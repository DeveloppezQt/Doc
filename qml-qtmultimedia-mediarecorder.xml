<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>MediaRecorder QML Type</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>For encoding and recording media generated in a <db:link xlink:href="qml-qtmultimedia-capturesession.xml">CaptureSession</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtMultimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiates:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>MediaRecorder is part of <db:simplelist><db:member>multimedia_qml</db:member><db:member>multimedia_audio_qml</db:member><db:member>multimedia_video_qml</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtmultimedia-mediarecorder.xml">MediaRecorder</db:link> element can be used within a <db:link xlink:href="qml-qtmultimedia-capturesession.xml">CaptureSession</db:link> to record and encode audio and video captured from a microphone and camera</db:para>
<db:para>The code below shows a simple capture session containing a <db:link xlink:href="qml-qtmultimedia-mediarecorder.xml">MediaRecorder</db:link> using the default camera and default audio input.</db:para>
<db:programlisting language="qml">CaptureSession {
    id: captureSession
    camera: Camera {
        id: camera
        active: true
    }
    audioInput: AudioInput {}
    recorder: MediaRecorder {
        id: recorder
    }
}
</db:programlisting>
<db:para>The code below shows how the recording can be started and stopped.</db:para>
<db:programlisting language="qml">CameraButton {
    text: &quot;Record&quot;
    visible: recorder.recorderState !== MediaRecorder.RecordingState
    onClicked: recorder.record()
}

CameraButton {
    id: stopButton
    text: &quot;Stop&quot;
    visible: recorder.recorderState === MediaRecorder.RecordingState
    onClicked: recorder.stop()
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtmultimedia-capturesession.xml">CaptureSession</db:link></db:member>
<db:member><db:link xlink:href="qml-qtmultimedia-camera.xml">Camera</db:link></db:member>
<db:member><db:link xlink:href="qml-qtmultimedia-audioinput.xml">AudioInput</db:link></db:member>
<db:member><db:link xlink:href="qml-qtmultimedia-imagecapture.xml">ImageCapture</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="actualLocation-prop">
<db:title>[read-only] actualLocation : QUrl</db:title>
<db:fieldsynopsis>
<db:type>QUrl</db:type>
<db:varname>actualLocation</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The actual location of the last media content.</db:para>
<db:para>The actual location is usually available after recording starts, and reset when new location is set or new recording starts.</db:para>
</db:section>
<db:section xml:id="audioBitRate-prop">
<db:title>[since 6.6] audioBitRate : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>audioBitRate</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the bit rate of the compressed audio stream in bits per second.</db:para>
<db:para>This property was introduced in Qt 6.6.</db:para>
</db:section>
<db:section xml:id="audioChannelCount-prop">
<db:title>[since 6.6] audioChannelCount : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>audioChannelCount</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of audio channels.</db:para>
<db:para>This property was introduced in Qt 6.6.</db:para>
</db:section>
<db:section xml:id="audioSampleRate-prop">
<db:title>[since 6.6] audioSampleRate : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>audioSampleRate</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the audio sample rate in Hz.</db:para>
<db:para>This property was introduced in Qt 6.6.</db:para>
</db:section>
<db:section xml:id="duration-prop">
<db:title>[read-only] duration : qint64</db:title>
<db:fieldsynopsis>
<db:type>qint64</db:type>
<db:varname>duration</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the recorded media duration in milliseconds.</db:para>
</db:section>
<db:section xml:id="encodingMode-prop">
<db:title>[since 6.6] encodingMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>encodingMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the encoding mode.</db:para>
<db:para>This property was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml#EncodingMode-enum">QMediaRecorder::EncodingMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error-prop">
<db:title>[read-only] error : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>error</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current media recorder error state.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>MediaRecorder.NoError</db:para>
</db:td>
<db:td>
<db:para>Not in an error state.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>MediaRecorder.ResourceError</db:para>
</db:td>
<db:td>
<db:para>Not enough system resources</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>MediaRecorder.FormatError</db:para>
</db:td>
<db:td>
<db:para>the current format is not supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>MediaRecorder.OutOfSpaceError</db:para>
</db:td>
<db:td>
<db:para>No space left on device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>MediaRecorder.LocationNotWriteable</db:para>
</db:td>
<db:td>
<db:para>The output location is not writable.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="errorString-prop">
<db:title>[read-only] errorString : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>errorString</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds a string describing the current error state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtmultimedia-mediarecorder.xml#error-prop">error</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mediaFormat-prop">
<db:title>mediaFormat : MediaFormat</db:title>
<db:fieldsynopsis>
<db:type>MediaFormat</db:type>
<db:varname>mediaFormat</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current MediaFormat of the recorder.</db:para>
</db:section>
<db:section xml:id="metaData-prop">
<db:title>metaData : mediaMetaData</db:title>
<db:fieldsynopsis>
<db:type>mediaMetaData</db:type>
<db:varname>metaData</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds meta data associated with the recording.</db:para>
<db:para>When a recording is started, any meta-data assigned will be attached to that recording.</db:para>
<db:note>
<db:para>Ensure that meta-data is assigned correctly by assigning it before starting the recording.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-mediametadata.xml">mediaMetaData</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="outputLocation-prop">
<db:title>outputLocation : QUrl</db:title>
<db:fieldsynopsis>
<db:type>QUrl</db:type>
<db:varname>outputLocation</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The destination location of media content.</db:para>
<db:para>Setting the location can fail, for example when the service supports only local file system locations but a network URL was passed. If the operation fails an errorOccured() signal is emitted.</db:para>
<db:para>The location can be relative or empty. If empty the recorder uses the system specific place and file naming scheme.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtmultimedia-mediarecorder.xml#errorOccurred-signal">errorOccurred</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="quality-prop">
<db:title>quality : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>quality</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Enumerates quality encoding levels.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>MediaRecorder.VeryLowQuality</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>MediaRecorder.LowQuality</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>MediaRecorder.NormalQuality</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>MediaRecorder.HighQuality</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>MediaRecorder.VeryHighQuality</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="recorderState-prop">
<db:title>[read-only] recorderState : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>recorderState</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current media recorder state.</db:para>
<db:para>The state property represents the user request and is changed synchronously during <db:link xlink:href="qml-qtmultimedia-mediarecorder.xml#record-method">record</db:link>(), <db:link xlink:href="qml-qtmultimedia-mediarecorder.xml#pause-method">pause</db:link>() or <db:link xlink:href="qml-qtmultimedia-mediarecorder.xml#stop-method">stop</db:link>() calls. RecorderSstate may also change asynchronously when recording fails.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>MediaRecorder.StoppedState</db:para>
</db:td>
<db:td>
<db:para>The recorder is not active.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>MediaRecorder.RecordingState</db:para>
</db:td>
<db:td>
<db:para>The recording is requested.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>MediaRecorder.PausedState</db:para>
</db:td>
<db:td>
<db:para>The recorder is pause.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="videoBitRate-prop">
<db:title>[since 6.6] videoBitRate : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>videoBitRate</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the bit rate of the compressed video stream in bits per second.</db:para>
<db:para>This property was introduced in Qt 6.6.</db:para>
</db:section>
<db:section xml:id="videoFrameRate-prop">
<db:title>[since 6.6] videoFrameRate : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>videoFrameRate</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the video frame rate.</db:para>
<db:para>A value of 0 indicates the recorder should make an optimal choice based on what is available from the video source and the limitations of the codec.</db:para>
<db:para>This property was introduced in Qt 6.6.</db:para>
</db:section>
<db:section xml:id="videoResolution-prop">
<db:title>[since 6.6] videoResolution : Size</db:title>
<db:fieldsynopsis>
<db:type>Size</db:type>
<db:varname>videoResolution</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the resolution of the encoded video.</db:para>
<db:para>Set an empty Size to make the recorder choose an optimal resolution based on what is available from the video source and the limitations of the codec.</db:para>
<db:para>This property was introduced in Qt 6.6.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="actualLocationChanged-signal">
<db:title>actualLocationChanged(const QUrl &amp;<db:emphasis>location</db:emphasis>)</db:title>
<db:para>Signals that the actual <db:code role="parameter">location</db:code> of the recorded media has changed.</db:para>
<db:para>This signal is usually emitted when recording starts.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onActualLocationChanged</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="durationChanged-signal">
<db:title>durationChanged(qint64 <db:emphasis>duration</db:emphasis>)</db:title>
<db:para>Signals that the <db:code role="parameter">duration</db:code> of the recorded media has changed.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onDurationChanged</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="errorOccurred-signal">
<db:title>errorOccurred(Error <db:emphasis>error</db:emphasis>, const QString &amp;<db:emphasis>errorString</db:emphasis>)</db:title>
<db:para>Signals that an <db:code role="parameter">error</db:code> has occurred.</db:para>
<db:para>The <db:code role="parameter">errorString</db:code> contains a description of the error.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onErrorOccurred</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="metaDataChanged-signal">
<db:title>metaDataChanged()</db:title>
<db:para>Signals that a media object's meta-data has changed.</db:para>
<db:para>If multiple meta-data elements are changed metaDataChanged() is emitted once.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onMetaDataChanged</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="recorderStateChanged-signal">
<db:title>recorderStateChanged(RecorderState <db:emphasis>state</db:emphasis>)</db:title>
<db:para>Signals that a media recorder's <db:code role="parameter">state</db:code> has changed.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onRecorderStateChanged</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="pause-method">
<db:title>pause()</db:title>
<db:para>Pauses recording.</db:para>
<db:para>The recorder state is changed to <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link>.PausedState.</db:para>
<db:para>Depending on the platform, pausing recording may be not supported. In this case the recorder state is unchanged.</db:para>
</db:section>
<db:section xml:id="record-method">
<db:title>record()</db:title>
<db:para>Starts recording.</db:para>
<db:para>While the recorder state is changed immediately to <db:code>MediaRecorder.RecordingState</db:code>, recording may start asynchronously.</db:para>
<db:para>If recording fails, the error() signal is emitted with recorder state being reset back to <db:code>QMediaRecorder.StoppedState</db:code>.</db:para>
<db:note>
<db:para>On mobile devices, recording will happen in the orientation the device had when calling record and is locked for the duration of the recording. To avoid artifacts on the user interface, we recommend to keep the user interface locked to the same orientation as long as the recording is ongoing using the contentOrientation property of the Window and unlock it again once the recording is finished.</db:para>
</db:note>
</db:section>
<db:section xml:id="stop-method">
<db:title>stop()</db:title>
<db:para>Stops the recording.</db:para>
<db:para>The recorder will stop the recording. Processing pending video and audio data might however still take some time. The recording is finished, once the state of the media recorder changes to <db:link xlink:href="qmediarecorder.xml#RecorderState-enum">QMediaRecorder::StoppedState</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
