<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Timers</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>How to use Qt timers in your application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>QObject, the base class of all Qt objects, provides the basic timer support in Qt. With QObject::startTimer(), you start a timer with an interval in milliseconds as argument. The function returns a unique integer timer ID. The timer will now fire at regular intervals until you explicitly call QObject::killTimer() with the timer ID.</db:para>
<db:para>For this mechanism to work, the application must run in an event loop. You start an event loop with QApplication::exec(). When a timer fires, the application sends a QTimerEvent, and the flow of control leaves the event loop until the timer event is processed. This implies that a timer cannot fire while your application is busy doing something else. In other words: the accuracy of timers depends on the granularity of your application.</db:para>
<db:para>In multithreaded applications, you can use the timer mechanism in any thread that has an event loop. To start an event loop from a non-GUI thread, use QThread::exec(). Qt uses the object's <db:link xlink:href="">thread affinity</db:link> to determine which thread will deliver the QTimerEvent. Because of this, you must start and stop all timers in the object's thread; it is not possible to start timers for objects in another thread.</db:para>
<db:para>The upper limit for the interval value is determined by the number of milliseconds that can be specified in a signed integer (in practice, this is a period of just over 24 days). The accuracy depends on the underlying operating system. Windows 2000 has 15 millisecond accuracy; other systems that we have tested can handle 1 millisecond intervals.</db:para>
<db:para>The main API for the timer functionality is QTimer. That class provides regular timers that emit a signal when the timer fires, and inherits QObject so that it fits well into the ownership structure of most GUI programs. The normal way of using it is like this:</db:para>
<db:programlisting language="cpp">    QTimer *timer = new QTimer(this);
    connect(timer, SIGNAL(timeout()), this, SLOT(updateCaption()));
    timer-&amp;gt;start(1000);
</db:programlisting>
<db:para>The QTimer object is made into a child of this widget so that, when this widget is deleted, the timer is deleted too. Next, its <db:link xlink:href="">timeout()</db:link> signal is connected to the slot that will do the work, it is started with a value of 1000 milliseconds, indicating that it will time out every second.</db:para>
<db:para>QTimer also provides a static function for single-shot timers. For example:</db:para>
<db:programlisting language="cpp">    QTimer::singleShot(200, this, SLOT(updateCaption()));
</db:programlisting>
<db:para>200 milliseconds (0.2 seconds) after this line of code is executed, the updateCaption() slot will be called.</db:para>
<db:para>For QTimer to work, you must have an event loop in your application; that is, you must call QCoreApplication::exec() somewhere. Timer events will be delivered only while the event loop is running.</db:para>
<db:para>In multithreaded applications, you can use QTimer in any thread that has an event loop. To start an event loop from a non-GUI thread, use QThread::exec(). Qt uses the timer's <db:link xlink:href="">thread affinity</db:link> to determine which thread will emit the <db:link xlink:href="">timeout()</db:link> signal. Because of this, you must start and stop the timer in its thread; it is not possible to start a timer from another thread.</db:para>
<db:para>The <db:link xlink:href="qtwidgets-widgets-analogclock-example.xml">Analog Clock</db:link> example shows how to use QTimer to redraw a widget at regular intervals. From AnalogClock's implementation:</db:para>
<db:programlisting language="cpp">AnalogClock::AnalogClock(QWidget *parent)
    : QWidget(parent)
{
    QTimer *timer = new QTimer(this);
    connect(timer, SIGNAL(timeout()), this, SLOT(update()));
    timer-&amp;gt;start(1000);
    ...
}
</db:programlisting>
<db:para>Every second, QTimer will call the QWidget::update() slot to refresh the clock's display.</db:para>
<db:para>If you already have a QObject subclass and want an easy optimization, you can use QBasicTimer instead of QTimer. With QBasicTimer, you must reimplement <db:link xlink:href="">timerEvent()</db:link> in your QObject subclass and handle the timeout there. The <db:link xlink:href="qtwidgets-widgets-wiggly-example.xml">Wiggly</db:link> example shows how to use QBasicTimer.</db:para>
</db:article>
