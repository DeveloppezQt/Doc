<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Timers</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>How to use Qt timers in your application.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:link xlink:href="qobject.xml">QObject</db:link>, the base class of all Qt objects, provides the basic timer support in Qt. With <db:link xlink:href="qobject.xml#startTimer">QObject::startTimer</db:link>(), you start a timer with an interval in milliseconds as argument. The function returns a unique integral timer ID. The timer will then fire at regular intervals until you explicitly call <db:link xlink:href="qobject.xml#killTimer">QObject::killTimer</db:link>() with that timer ID.</db:para>
<db:para>Instead of handling timer IDs directly, you can use <db:link xlink:href="qbasictimer.xml">QBasicTimer</db:link>. <db:link xlink:href="qbasictimer.xml">QBasicTimer</db:link> is a value-class, <db:link xlink:href="http://en.cppreference.com/w/cpp/language/raii">RAII</db:link> wrapper around a timer ID. You start the timer with <db:link xlink:href="qbasictimer.xml#start">QBasicTimer::start</db:link>(), and stop it with <db:link xlink:href="qbasictimer.xml#stop">QBasicTimer::stop</db:link>() (the latter is also called upon destruction). To use <db:link xlink:href="qbasictimer.xml">QBasicTimer</db:link>, you must reimplement <db:link xlink:href="qobject.xml#timerEvent">timerEvent</db:link>() in your class (which must be a sub-class of <db:link xlink:href="qobject.xml">QObject</db:link>), and handle the timer event there.</db:para>
<db:para>For this mechanism to work, the application must run in an event loop. You cat start an event loop with QApplication::exec(). When a timer fires, the application sends a <db:link xlink:href="qtimerevent.xml">QTimerEvent</db:link>, and the flow of control leaves the event loop until the timer event is processed. This implies that a timer cannot fire while your application is busy doing something else. In other words: the accuracy of timers depends on the granularity of your application.</db:para>
<db:para>In multithreaded applications, you can use the timer mechanism in any thread that has an event loop. To start an event loop from a non-GUI thread, use <db:link xlink:href="qthread.xml#exec">QThread::exec</db:link>(). Qt uses the object's <db:link xlink:href="qobject.xml#thread">thread affinity</db:link> to determine which thread will deliver the <db:link xlink:href="qtimerevent.xml">QTimerEvent</db:link>. Because of this, you must start and stop all timers in the object's thread; it is not possible to start timers for objects in another thread.</db:para>
<db:para>The main API for the timer functionality is <db:link xlink:href="qtimer.xml">QTimer</db:link>. <db:link xlink:href="qtimer.xml">QTimer</db:link> stores the interval in a signed integer, which limits the maximum interval it supports to the number of milliseconds that can fit in a signed integer (in practice, this is a period of around 24 days).</db:para>
<db:para>Qt 6.8 introduced the <db:link xlink:href="qchronotimer.xml">QChronoTimer</db:link> class. The main difference between the two classes is that <db:link xlink:href="qchronotimer.xml">QChronoTimer</db:link> supports a larger interval range and a higher precision (std::chrono::nanoseconds). For <db:link xlink:href="qtimer.xml">QTimer</db:link> the maximum supported interval is ±24 days, whereas for <db:link xlink:href="qchronotimer.xml">QChronoTimer</db:link> it is ±292 years. If you only need millisecond resolution and ±24 days range, you can continue to use <db:link xlink:href="qtimer.xml">QTimer</db:link>.</db:para>
<db:para>The accuracy of the timers depends on the underlying operating system. Windows 2000 has 15ms accuracy; other systems that we have tested can handle 1ms intervals.</db:para>
<db:para><db:link xlink:href="qchronotimer.xml">QChronoTimer</db:link> provides regular timers that emit a signal when the timer fires, and inherits from <db:link xlink:href="qobject.xml">QObject</db:link> so that it fits well into the ownership structure of most Qt programs. The normal way of using it is like this:</db:para>
<db:programlisting language="cpp">        QChronoTimer *timer = new QChronoTimer(1s, this);
        connect(timer, &amp;QChronoTimer::timeout, this, &amp;MyWidget::processOneThing);
        timer-&gt;start();
        QChronoTimer *timer = new QChronoTimer(this);
        connect(timer, &amp;QChronoTimer::timeout, this, &amp;MyWidget::processOneThing);
        timer-&gt;setInterval(1s);
        timer-&gt;start();
</db:programlisting>
<db:para>The <db:link xlink:href="qchronotimer.xml">QChronoTimer</db:link> object is made into a child of the this object so that, when this is destroyed, the timer is destroyed too. Next, the <db:link xlink:href="qchronotimer.xml#timeout">timeout</db:link>() signal is connected to the slot that will do the work, the timer interval can be either passed to the constructor, or set later on with setInterval().</db:para>
<db:para><db:link xlink:href="qchronotimer.xml">QChronoTimer</db:link> also provides static functions for single-shot timers. For example:</db:para>
<db:programlisting language="cpp">        MyWidget widget;
        QChronoTimer::singleShot(200ms, &amp;widget, &amp;MyWidget::updateCaption);
</db:programlisting>
<db:para>200ms after this line of code is executed, the updateCaption() slot will be called.</db:para>
<db:para>For <db:link xlink:href="qchronotimer.xml">QChronoTimer</db:link> to work, you must have an event loop in your application; that is, you must call <db:link xlink:href="qcoreapplication.xml#exec">QCoreApplication::exec</db:link>() somewhere. Timer events will be delivered only while the event loop is running.</db:para>
<db:para>In multithreaded applications, you can use <db:link xlink:href="qchronotimer.xml">QChronoTimer</db:link> in any thread that has an event loop. To start an event loop from a non-GUI thread, use <db:link xlink:href="qthread.xml#exec">QThread::exec</db:link>(). Qt uses the timer's <db:link xlink:href="qobject.xml#thread">thread affinity</db:link> to determine which thread will emit the <db:link xlink:href="qchronotimer.xml#timeout">timeout</db:link>() signal. Because of this, you must start and stop the timer in its thread; it is not possible to start a timer from another thread.</db:para>
<db:para>The <db:link xlink:href="">Analog Clock</db:link> example shows how to use <db:link xlink:href="qchronotimer.xml">QChronoTimer</db:link> to redraw a widget at regular intervals. From AnalogClock's implementation:</db:para>
<db:programlisting language="cpp">AnalogClock::AnalogClock(QWidget *parent)

    : QWidget(parent)
{
    auto *timer = new QChronoTimer(1s, this);
    connect(timer, &amp;QTimer::timeout, this, QOverload&lt;&gt;::of(&amp;AnalogClock::update));
    timer-&gt;start();
    ...
    ...
    setWindowTitle(tr(&quot;Analog Clock&quot;));
    resize(200, 200);
}
</db:programlisting>
<db:para>Every second, <db:link xlink:href="qchronotimer.xml">QChronoTimer</db:link> will call the QWidget::update() slot to refresh the clock's display.</db:para>
</db:article>
