<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Building a QML application</db:title>
<db:productname>QtCMake</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Using Qt with CMake</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="cmake-get-started.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Getting started with CMake"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="cmake-build-reusable-qml-module.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Building a reusable QML module"/></db:extendedlink>
<db:abstract>
<db:para>Using Qt with CMake.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>In <db:link xlink:href="cmake-get-started.xml#building-a-c-console-application">Building a C++ console application</db:link> we showed the CMakeLists.txt file for a simple console application. We will now create a QML application that uses the <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> module.</db:para>
<db:para>This is the full project file:</db:para>
<db:programlisting language="cpp">cmake_minimum_required(VERSION 3.16)

project(hello VERSION 1.0 LANGUAGES CXX)

find_package(Qt6 6.2 COMPONENTS Quick Gui REQUIRED)

qt_standard_project_setup(REQUIRES 6.5)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

qt_add_executable(myapp
    main.cpp
)

qt_add_qml_module(myapp
    URI hello
    QML_FILES
        main.qml
        FramedImage.qml
    RESOURCES
        img/world.png
)

target_link_libraries(myapp PRIVATE Qt6::Gui Qt6::Quick)
</db:programlisting>
<db:para>Let's walk through the changes we have made. In the <db:code>find_package</db:code> call, we replace <db:code>Core</db:code> with <db:code>Quick</db:code>. This will locate the <db:code>Qt6Quick</db:code> module and provide the <db:code>Qt6::Quick</db:code> targets we later link against.</db:para>
<db:programlisting language="cpp">find_package(Qt6 6.2 COMPONENTS Quick Gui REQUIRED)
</db:programlisting>
<db:para>We call <db:link xlink:href="qt-standard-project-setup.xml">qt_standard_project_setup</db:link>, and specify <db:link xlink:href="cmake-get-started.xml#building-a-c-console-application">CMAKE_CXX_STANDARD</db:link>, and <db:code>CMAKE_CXX_STANDARD_REQUIRED</db:code>. By passing <db:code>REQUIRES 6.5</db:code> to <db:code>qt_standard_project_setup</db:code>, we opt-in to useful defaults for <db:link xlink:href="qt-add-qml-module.xml#qt6-add-qml-module">qt_add_qml_module</db:link>. It enables all the <db:link xlink:href="qt-cmake-policies.xml">Qt CMake policies</db:link> up to version 6.5, in particular <db:link xlink:href="qt-cmake-policy-qtp0001.xml">QTP0001</db:link> that defines a sane default resource prefix for QML modules.</db:para>
<db:programlisting language="cpp">qt_standard_project_setup(REQUIRES 6.5)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
</db:programlisting>
<db:para>Note that the application will still link against <db:code>Qt6::Core</db:code>, because <db:code>Qt6::Quick</db:code> depends on it.</db:para>
<db:para><db:link xlink:href="qt-add-executable.xml">qt_add_executable</db:link> creates and finalizes an application target:</db:para>
<db:programlisting language="cpp">qt_add_executable(myapp
    main.cpp
)
</db:programlisting>
<db:para><db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link> passes the target of the executable, a URI, module version, and a list of QML files to ensure that myapp becomes a QML module. This places the QML files into <db:code>qrc:/qt/qml/${URI}</db:code> in the resource file system. Moreover, <db:code>qt_add_qml_module</db:code> ensures that <db:code>qmlcachegen</db:code> runs. Additionally, it creates a <db:code>myapp_qmllint</db:code> target, which runs <db:code>qmllint</db:code> on the files in QML_FILES.</db:para>
<db:programlisting language="cpp">qt_add_qml_module(myapp
    URI hello
    QML_FILES
        main.qml
        FramedImage.qml
    RESOURCES
        img/world.png
)
</db:programlisting>
<db:para>By adding the referenced resources, they get automatically added to the application under the same root path as the QML files â€“ also in the resource file system. By keeping the path in the resource system consistent with the one in the source and build directory, we ensure that the image is always found, as it is resolved relative to FramedImage.qml. It refers to the image in the resource file system if we load main.qml from there, or to the one in the actual file system if we review it with the <db:code>qml</db:code> tool.</db:para>
<db:para>In the <db:code>target_link_libraries</db:code> command, we link against <db:code>Qt6::Quick</db:code> instead of <db:code>Qt6::Core</db:code>.</db:para>
<db:programlisting language="cpp">target_link_libraries(myapp PRIVATE Qt6::Gui Qt6::Quick)

</db:programlisting>
</db:article>
