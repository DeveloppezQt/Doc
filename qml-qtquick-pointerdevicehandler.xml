<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>PointerDeviceHandler QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Abstract handler for pointer events with device-specific constraints.</db:para>
<db:para><db:emphasis role="bold">This type is under development and is subject to change.</db:emphasis></db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-multipointhandler.xml" xlink:role="">MultiPointHandler</db:link> and <db:link xlink:href="qml-qtquick-singlepointhandler.xml" xlink:role="">SinglePointHandler</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-pointerhandler.xml">PointerHandler</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Status</db:term>
<db:listitem>
<db:para>Preliminary</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This type is under development and is subject to change.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>An intermediate class (not registered as a QML type) for handlers which allow filtering based on device type, pointer type, or keyboard modifiers.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="acceptedButtons-prop">
<db:title>acceptedButtons : flags</db:title>
<db:para>The mouse buttons which can activate this Pointer Handler.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qml-qtquick-mouseevent.xml#button-prop">Qt.LeftButton</db:link>. It can be set to an OR combination of mouse buttons, and will ignore events from other buttons.</db:para>
<db:para>For example, a control could be made to respond to left and right clicks in different ways, with two handlers:</db:para>
<db:programlisting language="qml">Item {
    TapHandler {
        onTapped: console.log(&quot;left clicked&quot;)
    }
    TapHandler {
        acceptedButtons: Qt.RightButton
        onTapped: console.log(&quot;right clicked&quot;)
    }
}
</db:programlisting>
<db:note>
<db:para>Tapping on a touchscreen or tapping the stylus on a graphics tablet emulates clicking the left mouse button. This behavior can be altered via <db:link xlink:href="qml-qtquick-pointerdevicehandler.xml#acceptedDevices-prop">acceptedDevices</db:link> or <db:link xlink:href="qml-qtquick-pointerdevicehandler.xml#acceptedPointerTypes-prop">acceptedPointerTypes</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="acceptedDevices-prop">
<db:title>acceptedDevices : flags</db:title>
<db:para>The types of pointing devices that can activate this Pointer Handler.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qinputdevice.xml#DeviceType-enum">PointerDevice.AllDevices</db:link>. If you set it to an OR combination of device types, it will ignore events from non-matching devices.</db:para>
<db:para>For example, a control could be made to respond to mouse and stylus clicks in one way, and touchscreen taps in another way, with two handlers:</db:para>
<db:programlisting language="qml">Item {
   TapHandler {
       acceptedDevices: PointerDevice.Mouse | PointerDevice.TouchPad | PointerDevice.Stylus
       onTapped: console.log(&quot;clicked&quot;)
   }
   TapHandler {
       acceptedDevices: PointerDevice.TouchScreen
       onTapped: console.log(&quot;tapped&quot;)
   }
}
</db:programlisting>
<db:note>
<db:para>Not all platforms are yet able to distinguish mouse and touchpad; and on those that do, you often want to make mouse and touchpad behavior the same.</db:para>
</db:note>
</db:section>
<db:section xml:id="acceptedModifiers-prop">
<db:title>acceptedModifiers : flags</db:title>
<db:para>If this property is set, it will require the given keyboard modifiers to be pressed in order to react to pointer events, and otherwise ignore them.</db:para>
<db:para>If this property is set to <db:code>Qt.KeyboardModifierMask</db:code> (the default value), then the <db:link xlink:href="qml-qtquick-pointerhandler.xml">PointerHandler</db:link> ignores the modifier keys.</db:para>
<db:para>For example, an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> could have two handlers of the same type, one of which is enabled only if the required keyboard modifiers are pressed:</db:para>
<db:programlisting language="qml">Item {
   TapHandler {
       acceptedModifiers: Qt.ControlModifier
       onTapped: console.log(&quot;control-tapped&quot;)
   }
   TapHandler {
       acceptedModifiers: Qt.NoModifier
       onTapped: console.log(&quot;tapped&quot;)
   }
}
</db:programlisting>
<db:para>If you set <db:code>acceptedModifiers</db:code> to an OR combination of modifier keys, it means <db:emphasis>all</db:emphasis> of those modifiers must be pressed to activate the handler:</db:para>
<db:programlisting language="qml">Item {
   TapHandler {
       acceptedModifiers: Qt.ControlModifier | Qt.AltModifier | Qt.ShiftModifier
       onTapped: console.log(&quot;control-alt-shift-tapped&quot;)
   }
}
</db:programlisting>
<db:para>The available modifiers are as follows:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>NoModifier</db:para>
</db:td>
<db:td>
<db:para>No modifier key is allowed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShiftModifier</db:para>
</db:td>
<db:td>
<db:para>A Shift key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ControlModifier</db:para>
</db:td>
<db:td>
<db:para>A Ctrl key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>AltModifier</db:para>
</db:td>
<db:td>
<db:para>An Alt key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>MetaModifier</db:para>
</db:td>
<db:td>
<db:para>A Meta key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>KeypadModifier</db:para>
</db:td>
<db:td>
<db:para>A keypad button must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>GroupSwitchModifier</db:para>
</db:td>
<db:td>
<db:para>X11 only (unless activated on Windows by a command line argument). A Mode_switch key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>KeyboardModifierMask</db:para>
</db:td>
<db:td>
<db:para>The handler does not care which modifiers are pressed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If you need even more complex behavior than can be achieved with combinations of multiple handlers with multiple modifier flags, you can check the modifiers in JavaScript code:</db:para>
<db:programlisting language="qml">Item {
    TapHandler {
        onTapped:
            switch (point.modifiers) {
            case Qt.ControlModifier | Qt.AltModifier:
                console.log(&quot;CTRL+ALT&quot;);
                break;
            case Qt.ControlModifier | Qt.AltModifier | Qt.MetaModifier:
                console.log(&quot;CTRL+META+ALT&quot;);
                break;
            default:
                console.log(&quot;other modifiers&quot;, point.modifiers);
                break;
            }
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#KeyboardModifier-enum">Qt::KeyboardModifier</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="acceptedPointerTypes-prop">
<db:title>acceptedPointerTypes : flags</db:title>
<db:para>The types of pointing instruments (finger, stylus, eraser, etc.) that can activate this Pointer Handler.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qpointingdevice.xml#PointerType-enum">PointerDevice.AllPointerTypes</db:link>. If you set it to an OR combination of device types, it will ignore events from non-matching <db:link xlink:href="qml-qtquick-pointerdevice.xml">devices</db:link>.</db:para>
<db:para>For example, a control could be made to respond to mouse, touch, and stylus clicks in some way, but delete itself if tapped with an eraser tool on a graphics tablet, with two handlers:</db:para>
<db:programlisting language="qml">Rectangle {
   id: rect
   TapHandler {
       acceptedPointerTypes: PointerDevice.Generic | PointerDevice.Finger | PointerDevice.Pen
       onTapped: console.log(&quot;clicked&quot;)
   }
   TapHandler {
       acceptedPointerTypes: PointerDevice.Eraser
       onTapped: rect.destroy()
   }
}
</db:programlisting>
</db:section>
<db:section xml:id="active-prop">
<db:title>[read-only] active : bool</db:title>
<db:para>This holds <db:code>true</db:code> whenever this Input Handler has taken sole responsibility for handing one or more <db:link xlink:href="qml-qtquick-eventpoint.xml">eventPoints</db:link>, by successfully taking an exclusive grab of those points. This means that it is keeping its properties up-to-date according to the movements of those eventPoints and actively manipulating its <db:link xlink:href="qml-qtquick-pointerdevicehandler.xml#target-prop">target</db:link> (if any).</db:para>
</db:section>
<db:section xml:id="cursorShape-prop">
<db:title>cursorShape : Qt::CursorShape</db:title>
<db:para>This property holds the cursor shape that will appear whenever the mouse is hovering over the <db:link xlink:href="qml-qtquick-pointerdevicehandler.xml#parent-prop">parent</db:link> item while <db:link xlink:href="qml-qtquick-pointerdevicehandler.xml#active-prop">active</db:link> is <db:code>true</db:code>.</db:para>
<db:para>The available cursor shapes are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ArrowCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.UpArrowCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.CrossCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.WaitCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.IBeamCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeVerCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeHorCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeBDiagCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeFDiagCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeAllCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.BlankCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SplitVCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SplitHCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.PointingHandCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ForbiddenCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.WhatsThisCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.BusyCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.OpenHandCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ClosedHandCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.DragCopyCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.DragMoveCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.DragLinkCursor</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The default value is not set, which allows the <db:link xlink:href="qquickitem.xml#cursor">cursor</db:link> of <db:link xlink:href="qml-qtquick-pointerdevicehandler.xml#parent-prop">parent</db:link> item to appear. This property can be reset to the same initial condition by setting it to undefined.</db:para>
<db:note>
<db:para>When this property has not been set, or has been set to <db:code>undefined</db:code>, if you read the value it will return <db:code>Qt.ArrowCursor</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#CursorShape-enum">Qt::CursorShape</db:link></db:member>
<db:member><db:link xlink:href="qquickitem.xml#cursor">QQuickItem::cursor</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-hoverhandler.xml#cursorShape-prop">HoverHandler::cursorShape</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragThreshold-prop">
<db:title>dragThreshold : int</db:title>
<db:para>The distance in pixels that the user must drag an <db:link xlink:href="qml-qtquick-eventpoint.xml">eventPoint</db:link> in order to have it treated as a drag gesture.</db:para>
<db:para>The default value depends on the platform and screen resolution. It can be reset back to the default value by setting it to undefined. The behavior when a drag gesture begins varies in different handlers.</db:para>
</db:section>
<db:section xml:id="enabled-prop">
<db:title>enabled : bool</db:title>
<db:para>If a <db:link xlink:href="qml-qtquick-pointerhandler.xml">PointerHandler</db:link> is disabled, it will reject all events and no signals will be emitted.</db:para>
</db:section>
<db:section xml:id="grabPermissions-prop">
<db:title>grabPermissions : flags</db:title>
<db:para>This property specifies the permissions when this handler's logic decides to take over the exclusive grab, or when it is asked to approve grab takeover or cancellation by another handler.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>PointerHandler.TakeOverForbidden</db:para>
</db:td>
<db:td>
<db:para>This handler neither takes from nor gives grab permission to any type of Item or Handler.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.CanTakeOverFromHandlersOfSameType</db:para>
</db:td>
<db:td>
<db:para>This handler can take the exclusive grab from another handler of the same class.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.CanTakeOverFromHandlersOfDifferentType</db:para>
</db:td>
<db:td>
<db:para>This handler can take the exclusive grab from any kind of handler.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.CanTakeOverFromItems</db:para>
</db:td>
<db:td>
<db:para>This handler can take the exclusive grab from any type of Item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.CanTakeOverFromAnything</db:para>
</db:td>
<db:td>
<db:para>This handler can take the exclusive grab from any type of Item or Handler.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesTakeOverByHandlersOfSameType</db:para>
</db:td>
<db:td>
<db:para>This handler gives permission for another handler of the same class to take the grab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesTakeOverByHandlersOfDifferentType</db:para>
</db:td>
<db:td>
<db:para>This handler gives permission for any kind of handler to take the grab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesTakeOverByItems</db:para>
</db:td>
<db:td>
<db:para>This handler gives permission for any kind of Item to take the grab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesCancellation</db:para>
</db:td>
<db:td>
<db:para>This handler will allow its grab to be set to null.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesTakeOverByAnything</db:para>
</db:td>
<db:td>
<db:para>This handler gives permission for any type of Item or Handler to take the grab.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default is <db:code>PointerHandler.CanTakeOverFromItems | PointerHandler.CanTakeOverFromHandlersOfDifferentType | PointerHandler.ApprovesTakeOverByAnything</db:code> which allows most takeover scenarios but avoids e.g. two PinchHandlers fighting over the same touchpoints.</db:para>
</db:section>
<db:section xml:id="margin-prop">
<db:title>margin : real</db:title>
<db:para>The margin beyond the bounds of the <db:link xlink:href="qml-qtquick-pointerdevicehandler.xml#parent-prop">parent</db:link> item within which an <db:link xlink:href="qml-qtquick-eventpoint.xml">eventPoint</db:link> can activate this handler. For example, on a <db:link xlink:href="qml-qtquick-pinchhandler.xml">PinchHandler</db:link> where the <db:link xlink:href="qml-qtquick-pointerdevicehandler.xml#target-prop">target</db:link> is also the <db:code>parent</db:code>, it's useful to set this to a distance at least half the width of a typical user's finger, so that if the <db:code>parent</db:code> has been scaled down to a very small size, the pinch gesture is still possible. Or, if a <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link>-based button is placed near the screen edge, it can be used to comply with Fitts's Law: react to mouse clicks at the screen edge even though the button is visually spaced away from the edge by a few pixels.</db:para>
<db:para>The default value is 0.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/pointerHandlerMargin.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="parent-prop">
<db:title>parent : Item</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> which is the scope of the handler; the Item in which it was declared. The handler will handle events on behalf of this Item, which means a pointer event is relevant if at least one of its <db:link xlink:href="qml-qtquick-eventpoint.xml">eventPoints</db:link> occurs within the Item's interior. Initially <db:link xlink:href="qml-qtquick-pointerdevicehandler.xml#target-prop">target()</db:link> is the same, but it can be reassigned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-pointerdevicehandler.xml#target-prop">target</db:link></db:member>
<db:member><db:link xlink:href="qobject.xml#parent">QObject::parent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="target-prop">
<db:title>target : Item</db:title>
<db:para>The Item which this handler will manipulate.</db:para>
<db:para>By default, it is the same as the <db:link xlink:href="qml-qtquick-pointerdevicehandler.xml#parent-prop">parent</db:link>, the Item within which the handler is declared. However, it can sometimes be useful to set the target to a different Item, in order to handle events within one item but manipulate another; or to <db:code>null</db:code>, to disable the default behavior and do something else instead.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="canceled-signal">
<db:title>canceled(eventPoint <db:emphasis>point</db:emphasis>)</db:title>
<db:para>If this handler has already grabbed the given <db:code role="parameter">point</db:code>, this signal is emitted when the grab is stolen by a different Pointer Handler or Item.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onCanceled</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="grabChanged-signal">
<db:title>grabChanged(PointerDevice::GrabTransition <db:emphasis>transition</db:emphasis>, eventPoint <db:emphasis>point</db:emphasis>)</db:title>
<db:para>This signal is emitted when the grab has changed in some way which is relevant to this handler.</db:para>
<db:para>The <db:code role="parameter">transition</db:code> (verb) tells what happened. The <db:code role="parameter">point</db:code> (object) is the point that was grabbed or ungrabbed.</db:para>
<db:para>Valid values for <db:code role="parameter">transition</db:code> are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>PointerDevice.GrabExclusive</db:para>
</db:td>
<db:td>
<db:para>This handler has taken primary responsibility for handling the <db:code role="parameter">point</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerDevice.UngrabExclusive</db:para>
</db:td>
<db:td>
<db:para>This handler has given up its previous exclusive grab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerDevice.CancelGrabExclusive</db:para>
</db:td>
<db:td>
<db:para>This handler's exclusive grab has been taken over or cancelled.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerDevice.GrabPassive</db:para>
</db:td>
<db:td>
<db:para>This handler has acquired a passive grab, to monitor the <db:code role="parameter">point</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerDevice.UngrabPassive</db:para>
</db:td>
<db:td>
<db:para>This handler has given up its previous passive grab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerDevice.CancelGrabPassive</db:para>
</db:td>
<db:td>
<db:para>This handler's previous passive grab has terminated abnormally.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>The corresponding handler is <db:code>onGrabChanged</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
