<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDomDocument Class</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> class represents an XML document.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link> with the following exceptions:</db:para>
<db:para>These functions are not <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qdomdocument.xml#setContent">setContent(const QByteArray &amp;data, bool namespaceProcessing, QString *errorMsg, int *errorLine, int *errorColumn)</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDomDocument</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdomnode.xml" xlink:role="class">QDomNode</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDomDocument is part of <db:simplelist><db:member><db:link xlink:href="xml-tools.xml">XML Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> class represents the entire XML document. Conceptually, it is the root of the document tree, and provides the primary access to the document's data.</db:para>
<db:para>Since elements, text nodes, comments, processing instructions, etc., cannot exist outside the context of a document, the document class also contains the factory functions needed to create these objects. The node objects created have an <db:link xlink:href="qdomnode.xml#ownerDocument">ownerDocument</db:link>() function which associates them with the document within whose context they were created. The DOM classes that will be used most often are <db:link xlink:href="qdomnode.xml">QDomNode</db:link>, <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link>, <db:link xlink:href="qdomelement.xml">QDomElement</db:link> and <db:link xlink:href="qdomtext.xml">QDomText</db:link>.</db:para>
<db:para>The parsed XML is represented internally by a tree of objects that can be accessed using the various QDom classes. All QDom classes only <db:emphasis>reference</db:emphasis> objects in the internal tree. The internal objects in the DOM tree will get deleted once the last QDom object referencing them or the <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> itself is deleted.</db:para>
<db:para>Creation of elements, text nodes, etc. is done using the various factory functions provided in this class. Using the default constructors of the QDom classes will only result in empty objects that cannot be manipulated or inserted into the Document.</db:para>
<db:para>The <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> class has several functions for creating document data, for example, <db:link xlink:href="qdomdocument.xml#createElement">createElement</db:link>(), <db:link xlink:href="qdomdocument.xml#createTextNode">createTextNode</db:link>(), <db:link xlink:href="qdomdocument.xml#createComment">createComment</db:link>(), <db:link xlink:href="qdomdocument.xml#createCDATASection">createCDATASection</db:link>(), <db:link xlink:href="qdomdocument.xml#createProcessingInstruction">createProcessingInstruction</db:link>(), <db:link xlink:href="qdomdocument.xml#createAttribute">createAttribute</db:link>() and <db:link xlink:href="qdomdocument.xml#createEntityReference">createEntityReference</db:link>(). Some of these functions have versions that support namespaces, i.e. <db:link xlink:href="qdomdocument.xml#createElementNS">createElementNS</db:link>() and <db:link xlink:href="qdomdocument.xml#createAttributeNS">createAttributeNS</db:link>(). The <db:link xlink:href="qdomdocument.xml#createDocumentFragment">createDocumentFragment</db:link>() function is used to hold parts of the document; this is useful for manipulating for complex documents.</db:para>
<db:para>The entire content of the document is set with <db:link xlink:href="qdomdocument.xml#setContent">setContent</db:link>(). This function parses the string it is passed as an XML document and creates the DOM tree that represents the document. The root element is available using <db:link xlink:href="qdomdocument.xml#documentElement">documentElement</db:link>(). The textual representation of the document can be obtained using <db:link xlink:href="qdomdocument.xml#toString">toString</db:link>().</db:para>
<db:note>
<db:para>The DOM tree might end up reserving a lot of memory if the XML document is big. For such documents, the <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> or the <db:link xlink:href="qxmlquery.xml">QXmlQuery</db:link> classes might be better solutions.</db:para>
</db:note>
<db:para>It is possible to insert a node from another document into the document using <db:link xlink:href="qdomdocument.xml#importNode">importNode</db:link>().</db:para>
<db:para>You can obtain a list of all the elements that have a particular tag with <db:link xlink:href="qdomdocument.xml#elementsByTagName">elementsByTagName</db:link>() or with <db:link xlink:href="qdomdocument.xml#elementsByTagNameNS">elementsByTagNameNS</db:link>().</db:para>
<db:para>The QDom classes are typically used as follows:</db:para>
<db:programlisting language="cpp">QDomDocument doc(&quot;mydocument&quot;);
QFile file(&quot;mydocument.xml&quot;);
if (!file.open(QIODevice::ReadOnly))
    return;
if (!doc.setContent(&amp;file)) {
    file.close();
    return;
}
file.close();

// print out the element names of all elements that are direct children
// of the outermost element.
QDomElement docElem = doc.documentElement();

QDomNode n = docElem.firstChild();
while(!n.isNull()) {
    QDomElement e = n.toElement(); // try to convert the node to an element.
    if(!e.isNull()) {
        cout &lt;&lt; qPrintable(e.tagName()) &lt;&lt; endl; // the node really is an element.
    }
    n = n.nextSibling();
}

// Here we append a new element to the end of the document
QDomElement elem = doc.createElement(&quot;img&quot;);
elem.setAttribute(&quot;src&quot;, &quot;myimage.png&quot;);
docElem.appendChild(elem);
</db:programlisting>
<db:para>Once <db:code>doc</db:code> and <db:code>elem</db:code> go out of scope, the whole internal tree representing the XML document is deleted.</db:para>
<db:para>To create a document using DOM use code like this:</db:para>
<db:programlisting language="cpp">QDomDocument doc(&quot;MyML&quot;);
QDomElement root = doc.createElement(&quot;MyML&quot;);
doc.appendChild(root);

QDomElement tag = doc.createElement(&quot;Greeting&quot;);
root.appendChild(tag);

QDomText t = doc.createTextNode(&quot;Hello World&quot;);
tag.appendChild(t);

QString xml = doc.toString();
</db:programlisting>
<db:para>For further information about the Document Object Model see the Document Object Model (DOM) <db:link xlink:href="http://www.w3.org/TR/REC-DOM-Level-1/">Level 1</db:link> and <db:link xlink:href="http://www.w3.org/TR/DOM-Level-2-Core/">Level 2 Core</db:link> Specifications.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtxml-dombookmarks-example.xml">DOM Bookmarks Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-itemviews-simpledommodel-example.xml">Simple DOM Model Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDomDocument">
<db:title>QDomDocument::QDomDocument()</db:title>
<db:para>Constructs an empty document.</db:para>
</db:section>
<db:section xml:id="QDomDocument-2">
<db:title>[explicit] QDomDocument::QDomDocument(const QDomDocumentType &amp;<db:emphasis>doctype</db:emphasis>)</db:title>
<db:para>Creates a document with the document type <db:code role="parameter">doctype</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomimplementation.xml#createDocumentType">QDomImplementation::createDocumentType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDomDocument-3">
<db:title>[explicit] QDomDocument::QDomDocument(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Creates a document and sets the name of the document type to <db:code role="parameter">name</db:code>.</db:para>
</db:section>
<db:section xml:id="QDomDocument-1">
<db:title>QDomDocument::QDomDocument(const QDomDocument &amp;<db:emphasis>x</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">x</db:code>.</db:para>
<db:para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use <db:link xlink:href="qdomnode.xml#cloneNode">cloneNode</db:link>().</db:para>
</db:section>
<db:section xml:id="dtor.QDomDocument">
<db:title>[noexcept] QDomDocument::~QDomDocument()</db:title>
<db:para>Destroys the object and frees its resources.</db:para>
</db:section>
<db:section xml:id="createAttribute">
<db:title>QDomAttr QDomDocument::createAttribute(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Creates a new attribute called <db:code role="parameter">name</db:code> that can be inserted into an element, e.g. using <db:link xlink:href="qdomelement.xml#setAttributeNode">QDomElement::setAttributeNode</db:link>().</db:para>
<db:para>If <db:code role="parameter">name</db:code> is not a valid XML name, the behavior of this function is governed by <db:link xlink:href="qdomimplementation.xml#InvalidDataPolicy-enum">QDomImplementation::InvalidDataPolicy</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomdocument.xml#createAttributeNS">createAttributeNS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createAttributeNS">
<db:title>QDomAttr QDomDocument::createAttributeNS(const QString &amp;<db:emphasis>nsURI</db:emphasis>, const QString &amp;<db:emphasis>qName</db:emphasis>)</db:title>
<db:para>Creates a new attribute with namespace support that can be inserted into an element. The name of the attribute is <db:code role="parameter">qName</db:code> and the namespace URI is <db:code role="parameter">nsURI</db:code>. This function also sets <db:link xlink:href="qdomnode.xml#prefix">QDomNode::prefix</db:link>() and <db:link xlink:href="qdomnode.xml#localName">QDomNode::localName</db:link>() to appropriate values (depending on <db:code role="parameter">qName</db:code>).</db:para>
<db:para>If <db:code role="parameter">qName</db:code> is not a valid XML name, the behavior of this function is governed by <db:link xlink:href="qdomimplementation.xml#InvalidDataPolicy-enum">QDomImplementation::InvalidDataPolicy</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomdocument.xml#createAttribute">createAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createCDATASection">
<db:title>QDomCDATASection QDomDocument::createCDATASection(const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Creates a new CDATA section for the string <db:code role="parameter">value</db:code> that can be inserted into the document, e.g. using <db:link xlink:href="qdomnode.xml#appendChild">QDomNode::appendChild</db:link>().</db:para>
<db:para>If <db:code role="parameter">value</db:code> contains characters which cannot be stored in a CDATA section, the behavior of this function is governed by <db:link xlink:href="qdomimplementation.xml#InvalidDataPolicy-enum">QDomImplementation::InvalidDataPolicy</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#appendChild">QDomNode::appendChild</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#insertBefore">QDomNode::insertBefore</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#insertAfter">QDomNode::insertAfter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createComment">
<db:title>QDomComment QDomDocument::createComment(const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Creates a new comment for the string <db:code role="parameter">value</db:code> that can be inserted into the document, e.g. using <db:link xlink:href="qdomnode.xml#appendChild">QDomNode::appendChild</db:link>().</db:para>
<db:para>If <db:code role="parameter">value</db:code> contains characters which cannot be stored in an XML comment, the behavior of this function is governed by <db:link xlink:href="qdomimplementation.xml#InvalidDataPolicy-enum">QDomImplementation::InvalidDataPolicy</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#appendChild">QDomNode::appendChild</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#insertBefore">QDomNode::insertBefore</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#insertAfter">QDomNode::insertAfter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createDocumentFragment">
<db:title>QDomDocumentFragment QDomDocument::createDocumentFragment()</db:title>
<db:para>Creates a new document fragment, that can be used to hold parts of the document, e.g. when doing complex manipulations of the document tree.</db:para>
</db:section>
<db:section xml:id="createElement">
<db:title>QDomElement QDomDocument::createElement(const QString &amp;<db:emphasis>tagName</db:emphasis>)</db:title>
<db:para>Creates a new element called <db:code role="parameter">tagName</db:code> that can be inserted into the DOM tree, e.g. using <db:link xlink:href="qdomnode.xml#appendChild">QDomNode::appendChild</db:link>().</db:para>
<db:para>If <db:code role="parameter">tagName</db:code> is not a valid XML name, the behavior of this function is governed by <db:link xlink:href="qdomimplementation.xml#InvalidDataPolicy-enum">QDomImplementation::InvalidDataPolicy</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomdocument.xml#createElementNS">createElementNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#appendChild">QDomNode::appendChild</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#insertBefore">QDomNode::insertBefore</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#insertAfter">QDomNode::insertAfter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createElementNS">
<db:title>QDomElement QDomDocument::createElementNS(const QString &amp;<db:emphasis>nsURI</db:emphasis>, const QString &amp;<db:emphasis>qName</db:emphasis>)</db:title>
<db:para>Creates a new element with namespace support that can be inserted into the DOM tree. The name of the element is <db:code role="parameter">qName</db:code> and the namespace URI is <db:code role="parameter">nsURI</db:code>. This function also sets <db:link xlink:href="qdomnode.xml#prefix">QDomNode::prefix</db:link>() and <db:link xlink:href="qdomnode.xml#localName">QDomNode::localName</db:link>() to appropriate values (depending on <db:code role="parameter">qName</db:code>).</db:para>
<db:para>If <db:code role="parameter">qName</db:code> is an empty string, returns a null element regardless of whether the invalid data policy is set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomdocument.xml#createElement">createElement</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createEntityReference">
<db:title>QDomEntityReference QDomDocument::createEntityReference(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Creates a new entity reference called <db:code role="parameter">name</db:code> that can be inserted into the document, e.g. using <db:link xlink:href="qdomnode.xml#appendChild">QDomNode::appendChild</db:link>().</db:para>
<db:para>If <db:code role="parameter">name</db:code> is not a valid XML name, the behavior of this function is governed by <db:link xlink:href="qdomimplementation.xml#InvalidDataPolicy-enum">QDomImplementation::InvalidDataPolicy</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#appendChild">QDomNode::appendChild</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#insertBefore">QDomNode::insertBefore</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#insertAfter">QDomNode::insertAfter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createProcessingInstruction">
<db:title>QDomProcessingInstruction QDomDocument::createProcessingInstruction(const QString &amp;<db:emphasis>target</db:emphasis>, const QString &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Creates a new processing instruction that can be inserted into the document, e.g. using <db:link xlink:href="qdomnode.xml#appendChild">QDomNode::appendChild</db:link>(). This function sets the target for the processing instruction to <db:code role="parameter">target</db:code> and the data to <db:code role="parameter">data</db:code>.</db:para>
<db:para>If <db:code role="parameter">target</db:code> is not a valid XML name, or data if contains characters which cannot appear in a processing instruction, the behavior of this function is governed by <db:link xlink:href="qdomimplementation.xml#InvalidDataPolicy-enum">QDomImplementation::InvalidDataPolicy</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#appendChild">QDomNode::appendChild</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#insertBefore">QDomNode::insertBefore</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#insertAfter">QDomNode::insertAfter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createTextNode">
<db:title>QDomText QDomDocument::createTextNode(const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Creates a text node for the string <db:code role="parameter">value</db:code> that can be inserted into the document tree, e.g. using <db:link xlink:href="qdomnode.xml#appendChild">QDomNode::appendChild</db:link>().</db:para>
<db:para>If <db:code role="parameter">value</db:code> contains characters which cannot be stored as character data of an XML document (even in the form of character references), the behavior of this function is governed by <db:link xlink:href="qdomimplementation.xml#InvalidDataPolicy-enum">QDomImplementation::InvalidDataPolicy</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#appendChild">QDomNode::appendChild</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#insertBefore">QDomNode::insertBefore</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#insertAfter">QDomNode::insertAfter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="doctype">
<db:title>QDomDocumentType QDomDocument::doctype() const</db:title>
<db:para>Returns the document type of this document.</db:para>
</db:section>
<db:section xml:id="documentElement">
<db:title>QDomElement QDomDocument::documentElement() const</db:title>
<db:para>Returns the root element of the document.</db:para>
</db:section>
<db:section xml:id="elementById">
<db:title>QDomElement QDomDocument::elementById(const QString &amp;<db:emphasis>elementId</db:emphasis>)</db:title>
<db:para>Returns the element whose ID is equal to <db:code role="parameter">elementId</db:code>. If no element with the ID was found, this function returns a <db:link xlink:href="qdomnode.xml#isNull">null element</db:link>.</db:para>
<db:para>Since the QDomClasses do not know which attributes are element IDs, this function returns always a <db:link xlink:href="qdomnode.xml#isNull">null element</db:link>. This may change in a future version.</db:para>
</db:section>
<db:section xml:id="elementsByTagName">
<db:title>QDomNodeList QDomDocument::elementsByTagName(const QString &amp;<db:emphasis>tagname</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdomnodelist.xml">QDomNodeList</db:link>, that contains all the elements in the document with the name <db:code role="parameter">tagname</db:code>. The order of the node list is the order they are encountered in a preorder traversal of the element tree.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomdocument.xml#elementsByTagNameNS">elementsByTagNameNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#elementsByTagName">QDomElement::elementsByTagName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="elementsByTagNameNS">
<db:title>QDomNodeList QDomDocument::elementsByTagNameNS(const QString &amp;<db:emphasis>nsURI</db:emphasis>, const QString &amp;<db:emphasis>localName</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qdomnodelist.xml">QDomNodeList</db:link> that contains all the elements in the document with the local name <db:code role="parameter">localName</db:code> and a namespace URI of <db:code role="parameter">nsURI</db:code>. The order of the node list is the order they are encountered in a preorder traversal of the element tree.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomdocument.xml#elementsByTagName">elementsByTagName</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#elementsByTagNameNS">QDomElement::elementsByTagNameNS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="implementation">
<db:title>QDomImplementation QDomDocument::implementation() const</db:title>
<db:para>Returns a <db:link xlink:href="qdomimplementation.xml">QDomImplementation</db:link> object.</db:para>
</db:section>
<db:section xml:id="importNode">
<db:title>QDomNode QDomDocument::importNode(const QDomNode &amp;<db:emphasis>importedNode</db:emphasis>, bool <db:emphasis>deep</db:emphasis>)</db:title>
<db:para>Imports the node <db:code role="parameter">importedNode</db:code> from another document to this document. <db:code role="parameter">importedNode</db:code> remains in the original document; this function creates a copy that can be used within this document.</db:para>
<db:para>This function returns the imported node that belongs to this document. The returned node has no parent. It is not possible to import <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> and <db:link xlink:href="qdomdocumenttype.xml">QDomDocumentType</db:link> nodes. In those cases this function returns a <db:link xlink:href="qdomnode.xml#isNull">null node</db:link>.</db:para>
<db:para>If <db:code role="parameter">importedNode</db:code> is a <db:link xlink:href="qdomnode.xml#isNull">null node</db:link>, a null node is returned.</db:para>
<db:para>If <db:code role="parameter">deep</db:code> is true, this function imports not only the node <db:code role="parameter">importedNode</db:code> but its whole subtree; if it is false, only the <db:code role="parameter">importedNode</db:code> is imported. The argument <db:code role="parameter">deep</db:code> has no effect on <db:link xlink:href="qdomattr.xml">QDomAttr</db:link> and <db:link xlink:href="qdomentityreference.xml">QDomEntityReference</db:link> nodes, since the descendants of <db:link xlink:href="qdomattr.xml">QDomAttr</db:link> nodes are always imported and those of <db:link xlink:href="qdomentityreference.xml">QDomEntityReference</db:link> nodes are never imported.</db:para>
<db:para>The behavior of this function is slightly different depending on the node types:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Node Type</db:para>
</db:th>
<db:th>
<db:para>Behavior</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomattr.xml">QDomAttr</db:link></db:para>
</db:td>
<db:td>
<db:para>The owner element is set to 0 and the specified flag is set to true in the generated attribute. The whole subtree of <db:code role="parameter">importedNode</db:code> is always imported for attribute nodes: <db:code role="parameter">deep</db:code> has no effect.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomdocument.xml">QDomDocument</db:link></db:para>
</db:td>
<db:td>
<db:para>Document nodes cannot be imported.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomdocumentfragment.xml">QDomDocumentFragment</db:link></db:para>
</db:td>
<db:td>
<db:para>If <db:code role="parameter">deep</db:code> is true, this function imports the whole document fragment; otherwise it only generates an empty document fragment.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomdocumenttype.xml">QDomDocumentType</db:link></db:para>
</db:td>
<db:td>
<db:para>Document type nodes cannot be imported.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomelement.xml">QDomElement</db:link></db:para>
</db:td>
<db:td>
<db:para>Attributes for which <db:link xlink:href="qdomattr.xml#specified">QDomAttr::specified</db:link>() is true are also imported, other attributes are not imported. If <db:code role="parameter">deep</db:code> is true, this function also imports the subtree of <db:code role="parameter">importedNode</db:code>; otherwise it imports only the element node (and some attributes, see above).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomentity.xml">QDomEntity</db:link></db:para>
</db:td>
<db:td>
<db:para>Entity nodes can be imported, but at the moment there is no way to use them since the document type is read-only in DOM level 2.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomentityreference.xml">QDomEntityReference</db:link></db:para>
</db:td>
<db:td>
<db:para>Descendants of entity reference nodes are never imported: <db:code role="parameter">deep</db:code> has no effect.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomnotation.xml">QDomNotation</db:link></db:para>
</db:td>
<db:td>
<db:para>Notation nodes can be imported, but at the moment there is no way to use them since the document type is read-only in DOM level 2.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomprocessinginstruction.xml">QDomProcessingInstruction</db:link></db:para>
</db:td>
<db:td>
<db:para>The target and value of the processing instruction is copied to the new node.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomtext.xml">QDomText</db:link></db:para>
</db:td>
<db:td>
<db:para>The text is copied to the new node.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomcdatasection.xml">QDomCDATASection</db:link></db:para>
</db:td>
<db:td>
<db:para>The text is copied to the new node.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdomcomment.xml">QDomComment</db:link></db:para>
</db:td>
<db:td>
<db:para>The text is copied to the new node.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomelement.xml#setAttribute">QDomElement::setAttribute</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#insertBefore">QDomNode::insertBefore</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#insertAfter">QDomNode::insertAfter</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#replaceChild">QDomNode::replaceChild</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#removeChild">QDomNode::removeChild</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#appendChild">QDomNode::appendChild</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nodeType">
<db:title>QDomNode::NodeType QDomDocument::nodeType() const</db:title>
<db:para>Returns <db:code>DocumentNode</db:code>.</db:para>
</db:section>
<db:section xml:id="setContent">
<db:title>bool QDomDocument::setContent(const QByteArray &amp;<db:emphasis>data</db:emphasis>, bool <db:emphasis>namespaceProcessing</db:emphasis>, QString *<db:emphasis>errorMsg</db:emphasis> = Q_NULLPTR, int *<db:emphasis>errorLine</db:emphasis> = Q_NULLPTR, int *<db:emphasis>errorColumn</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>This function parses the XML document from the byte array <db:code role="parameter">data</db:code> and sets it as the content of the document. It tries to detect the encoding of the document as required by the XML specification.</db:para>
<db:para>If <db:code role="parameter">namespaceProcessing</db:code> is true, the parser recognizes namespaces in the XML file and sets the prefix name, local name and namespace URI to appropriate values. If <db:code role="parameter">namespaceProcessing</db:code> is false, the parser does no namespace processing when it reads the XML file.</db:para>
<db:para>If a parse error occurs, this function returns <db:code>false</db:code> and the error message is placed in <db:code>*</db:code><db:code role="parameter">errorMsg</db:code>, the line number in <db:code>*</db:code><db:code role="parameter">errorLine</db:code> and the column number in <db:code>*</db:code><db:code role="parameter">errorColumn</db:code> (unless the associated pointer is set to 0); otherwise this function returns <db:code>true</db:code>. The various error messages are described in the <db:link xlink:href="qxmlparseexception.xml">QXmlParseException</db:link> class documentation. Note that, if you want to display these error messages to your application's users, they will be displayed in English unless they are explicitly translated.</db:para>
<db:para>If <db:code role="parameter">namespaceProcessing</db:code> is true, the function <db:link xlink:href="qdomnode.xml#prefix">QDomNode::prefix</db:link>() returns a string for all elements and attributes. It returns an empty string if the element or attribute has no prefix.</db:para>
<db:para>Text nodes consisting only of whitespace are stripped and won't appear in the <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link>. If this behavior is not desired, one can use the setContent() overload that allows a <db:link xlink:href="qxmlreader.xml">QXmlReader</db:link> to be supplied.</db:para>
<db:para>If <db:code role="parameter">namespaceProcessing</db:code> is false, the functions <db:link xlink:href="qdomnode.xml#prefix">QDomNode::prefix</db:link>(), <db:link xlink:href="qdomnode.xml#localName">QDomNode::localName</db:link>() and <db:link xlink:href="qdomnode.xml#namespaceURI">QDomNode::namespaceURI</db:link>() return an empty string.</db:para>
<db:para>Entity references are handled as follows:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>References to internal general entities and character entities occurring in the content are included. The result is a <db:link xlink:href="qdomtext.xml">QDomText</db:link> node with the references replaced by their corresponding entity values.</db:para>
</db:listitem>
<db:listitem>
<db:para>References to parameter entities occurring in the internal subset are included. The result is a <db:link xlink:href="qdomdocumenttype.xml">QDomDocumentType</db:link> node which contains entity and notation declarations with the references replaced by their corresponding entity values.</db:para>
</db:listitem>
<db:listitem>
<db:para>Any general parsed entity reference which is not defined in the internal subset and which occurs in the content is represented as a <db:link xlink:href="qdomentityreference.xml">QDomEntityReference</db:link> node.</db:para>
</db:listitem>
<db:listitem>
<db:para>Any parsed entity reference which is not defined in the internal subset and which occurs outside of the content is replaced with an empty string.</db:para>
</db:listitem>
<db:listitem>
<db:para>Any unparsed entity reference is replaced with an empty string.</db:para>
</db:listitem>
</db:itemizedlist>
<db:warning>
<db:para>This function is not <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:warning><db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#namespaceURI">QDomNode::namespaceURI</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#localName">QDomNode::localName</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnode.xml#prefix">QDomNode::prefix</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#isNull">QString::isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#isEmpty">QString::isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContent-1">
<db:title>bool QDomDocument::setContent(QIODevice *<db:emphasis>dev</db:emphasis>, QString *<db:emphasis>errorMsg</db:emphasis> = Q_NULLPTR, int *<db:emphasis>errorLine</db:emphasis> = Q_NULLPTR, int *<db:emphasis>errorColumn</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function reads the XML document from the IO device <db:code role="parameter">dev</db:code>, returning true if the content was successfully parsed; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>No namespace processing is performed.</db:para>
</db:section>
<db:section xml:id="setContent-2">
<db:title>bool QDomDocument::setContent(const QByteArray &amp;<db:emphasis>buffer</db:emphasis>, QString *<db:emphasis>errorMsg</db:emphasis> = Q_NULLPTR, int *<db:emphasis>errorLine</db:emphasis> = Q_NULLPTR, int *<db:emphasis>errorColumn</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function reads the XML document from the byte array <db:code role="parameter">buffer</db:code>, returning true if the content was successfully parsed; otherwise returns false.</db:para>
<db:para>No namespace processing is performed.</db:para>
</db:section>
<db:section xml:id="setContent-3">
<db:title>bool QDomDocument::setContent(const QString &amp;<db:emphasis>text</db:emphasis>, QString *<db:emphasis>errorMsg</db:emphasis> = Q_NULLPTR, int *<db:emphasis>errorLine</db:emphasis> = Q_NULLPTR, int *<db:emphasis>errorColumn</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function reads the XML document from the string <db:code role="parameter">text</db:code>, returning true if the content was successfully parsed; otherwise returns <db:code>false</db:code>. Since <db:code role="parameter">text</db:code> is already a Unicode string, no encoding detection is performed.</db:para>
<db:para>No namespace processing is performed either.</db:para>
</db:section>
<db:section xml:id="setContent-4">
<db:title>bool QDomDocument::setContent(QIODevice *<db:emphasis>dev</db:emphasis>, bool <db:emphasis>namespaceProcessing</db:emphasis>, QString *<db:emphasis>errorMsg</db:emphasis> = Q_NULLPTR, int *<db:emphasis>errorLine</db:emphasis> = Q_NULLPTR, int *<db:emphasis>errorColumn</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function reads the XML document from the IO device <db:code role="parameter">dev</db:code>, returning true if the content was successfully parsed; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="setContent-5">
<db:title>bool QDomDocument::setContent(QXmlInputSource *<db:emphasis>source</db:emphasis>, QXmlReader *<db:emphasis>reader</db:emphasis>, QString *<db:emphasis>errorMsg</db:emphasis> = Q_NULLPTR, int *<db:emphasis>errorLine</db:emphasis> = Q_NULLPTR, int *<db:emphasis>errorColumn</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function reads the XML document from the <db:link xlink:href="qxmlinputsource.xml">QXmlInputSource</db:link> <db:code role="parameter">source</db:code> and parses it with the <db:link xlink:href="qxmlreader.xml">QXmlReader</db:link> <db:code role="parameter">reader</db:code>, returning true if the content was successfully parsed; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function doesn't change the features of the <db:code role="parameter">reader</db:code>. If you want to use certain features for parsing you can use this function to set up the reader appropriately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlsimplereader.xml">QXmlSimpleReader</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContent-6">
<db:title>[since 4.5] bool QDomDocument::setContent(QXmlInputSource *<db:emphasis>source</db:emphasis>, bool <db:emphasis>namespaceProcessing</db:emphasis>, QString *<db:emphasis>errorMsg</db:emphasis> = Q_NULLPTR, int *<db:emphasis>errorLine</db:emphasis> = Q_NULLPTR, int *<db:emphasis>errorColumn</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function reads the XML document from the <db:link xlink:href="qxmlinputsource.xml">QXmlInputSource</db:link> <db:code role="parameter">source</db:code>, returning true if the content was successfully parsed; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="setContent-7">
<db:title>bool QDomDocument::setContent(const QString &amp;<db:emphasis>text</db:emphasis>, bool <db:emphasis>namespaceProcessing</db:emphasis>, QString *<db:emphasis>errorMsg</db:emphasis> = Q_NULLPTR, int *<db:emphasis>errorLine</db:emphasis> = Q_NULLPTR, int *<db:emphasis>errorColumn</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function reads the XML document from the string <db:code role="parameter">text</db:code>, returning true if the content was successfully parsed; otherwise returns <db:code>false</db:code>. Since <db:code role="parameter">text</db:code> is already a Unicode string, no encoding detection is done.</db:para>
</db:section>
<db:section xml:id="toByteArray">
<db:title>QByteArray QDomDocument::toByteArray(int <db:emphasis>indent</db:emphasis> = 1) const</db:title>
<db:para>Converts the parsed document back to its textual representation and returns a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> containing the data encoded as UTF-8.</db:para>
<db:para>This function uses <db:code role="parameter">indent</db:code> as the amount of space to indent subelements.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomdocument.xml#toString">toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString">
<db:title>QString QDomDocument::toString(int <db:emphasis>indent</db:emphasis> = 1) const</db:title>
<db:para>Converts the parsed document back to its textual representation.</db:para>
<db:para>This function uses <db:code role="parameter">indent</db:code> as the amount of space to indent subelements.</db:para>
<db:para>If <db:code role="parameter">indent</db:code> is -1, no whitespace at all is added.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QDomDocument &amp;QDomDocument::operator=(const QDomDocument &amp;<db:emphasis>x</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">x</db:code> to this DOM document.</db:para>
<db:para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use <db:link xlink:href="qdomnode.xml#cloneNode">cloneNode</db:link>().</db:para>
</db:section>
</db:section>
</db:article>
