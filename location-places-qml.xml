<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Places API</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Location Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>The Places API allows users to discover places of interest and view details about them, such as address and contact information. Some places may have additional content associated with them, such as images and reviews. The Places API also facilitates management of places and categories, allowing users to save and remove them.</db:para>
</db:section>
<db:section xml:id="introductory-concepts">
<db:title>Introductory Concepts</db:title>
<db:section xml:id="plugin">
<db:title>Plugin</db:title>
<db:para>A <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> is an abstraction for a backend. One <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> might access places from a REST server while another may access places from a local database. The following instantiates a <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> object by providing a name of &quot;osm&quot;. The <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> name identifies which backend to choose from. Plugins may also be provided with a set of <db:link xlink:href="qml-qtlocation-pluginparameter.xml">parameters</db:link>, which essentially takes the form of a set of key-value pairs. The <db:link xlink:href="qml-qtlocation-pluginparameter.xml">parameters</db:link> that can be specified vary among the different <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> backends. For documentation on the possible <db:link xlink:href="qml-qtlocation-pluginparameter.xml">parameters</db:link> and nuances of each <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link>, see the <db:link xlink:href="qtlocation-index.xml#plugin-references-and-parameters">Plugin References</db:link>.</db:para>
<db:programlisting language="qml">Plugin {
    id: myPlugin
    name: &quot;osm&quot;
    //specify plugin parameters as necessary
    //PluginParameter {...}
    //PluginParameter {...}
    //...
}
</db:programlisting>
<db:note>
<db:para>The HERE plugin must be supplied with some mandatory parameters as outlined in the <db:link xlink:href="location-plugin-here.xml#mandatory-parameters">HERE Plugin</db:link> documentation.</db:para>
</db:note>
</db:section>
<db:section xml:id="models-views-and-delegates">
<db:title>Models, Views and Delegates</db:title>
<db:para>The QML Places API is built around the notion of models, views and delegates.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Model</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>A model holds data items and maintains their structure. The model is also responsible for retrieving the items from a data source.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">View</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>A view is a visual container that displays the data and manages how visual items are shown such as in a list or a grid. The view may also be responsible for navigating the data, for example, scrolling through the visual items during a flicking motion.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Delegate</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>A delegate defines how individual data elements should appear as visual items in the view. The models expose a set of data roles and the delegate uses them to construct a visual item. The delegate may also define behaviour such as an operation to invoke when a visual item is clicked.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The Common Use Cases section below demonstrates concrete examples of how these concepts fit together.</db:para>
</db:section>
</db:section>
<db:section xml:id="common-use-cases">
<db:title>Common Use Cases</db:title>
<db:section xml:id="searching-for-places">
<db:title>Searching for Places</db:title>
<db:para>Searching is accomplished via the <db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link>. The <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#plugin-prop">plugin</db:link> property specifies which backend to perform search operations against. Search parameters may be provided through properties such as the <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#searchTerm-prop">searchTerm</db:link> and <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#searchArea-prop">searchArea</db:link>. A search operation can then be started by invoking the <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#update-method">update</db:link>() method. For simplicity, the snippet below invokes <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#update-method">update</db:link>() once construction of the model as been completed, typically <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#update-method">update</db:link>() would be invoked in response to a user action such as a button click. While the search operation is underway the <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#status-prop">PlaceSearchModel::status</db:link> property transitions into the <db:code>Loading</db:code> state and when successfully completed moves into the <db:code>Ready</db:code> state.</db:para>
<db:programlisting language="qml">PlaceSearchModel {
    id: searchModel

    plugin: myPlugin

    searchTerm: &quot;pizza&quot;
    searchArea: QtPositioning.circle(startCoordinate);

    Component.onCompleted: update()

}
</db:programlisting>
</db:section>
<db:section xml:id="display-search-results-using-a-listview">
<db:title>Display Search Results using a ListView</db:title>
<db:para>A <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> can be used to show the search results found by the model. It defines the visual region for where the results are shown, and in the case below fills the entirety of its parent. The <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> has built in behavior that enables the region to respond to flicking events and to scroll appropriately.</db:para>
<db:para>In the snippet below, the search model has been assigned to the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>'s <db:link xlink:href="qml-qtquick-listview.xml#model-prop">model</db:link> property. When the model is updated with new results, the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> is automatically updated to reflect the model's new data items.</db:para>
<db:para>A simple delegate has been bound to the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>'s <db:link xlink:href="qml-qtquick-listview.xml#delegate-prop">delegate</db:link> property. The <db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link> exposes a set of <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#placesearchmodel-roles">roles</db:link> of which the <db:emphasis>title</db:emphasis> and <db:emphasis>place</db:emphasis> roles have been used below, these are of type string and <db:link xlink:href="qml-qtlocation-place.xml">Place</db:link> respectively. Essentially for each data item that should be visible in the view, the view invokes the delegate to create a visual representation of the item.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">ListView {
    anchors.fill: parent
    model: searchModel
    delegate: Component {
        Row {
            spacing: 5
            Marker { height: parent.height }
            Column {
                Text { text: title; font.bold: true }
                Text { text: place.location.address.text }
            }
        }
    }
}
</db:programlisting>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/places_list.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>For simplicty's sake we have assumed that every search result is of <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#search-result-types">type</db:link> <db:code>PlaceSearchResult</db:code> and so always have access to the <db:emphasis>place</db:emphasis> role, other search result types may not have a <db:emphasis>place</db:emphasis> role.</db:para>
</db:note>
<db:para>See the <db:link xlink:href="qtlocation-places-list-example.xml">Places List</db:link> example for full source code.</db:para>
</db:section>
<db:section xml:id="display-search-results-using-a-mapitemview">
<db:title>Display Search Results using a MapItemView</db:title>
<db:para>Instead of a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>, the <db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link> can be used in conjunction with a <db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link> to display markers on a map. Firstly a <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link> is used to define the visual region occupied by the map, in this case it fills the entirety of its parent. Other properties are specified such as the <db:link xlink:href="qml-qtlocation-map.xml#plugin-prop">plugin</db:link> providing the maps, and the map's <db:link xlink:href="qml-qtlocation-map.xml#center-prop">center</db:link> and <db:link xlink:href="qml-qtlocation-map.xml#zoomLevel-prop">zoomLevel</db:link>.</db:para>
<db:para>Inside the <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link>, a <db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link> is declared, where the <db:link xlink:href="qml-qtlocation-mapitemview.xml#model-prop">model</db:link> property has been set to the search model and a <db:link xlink:href="qml-qtlocation-mapitemview.xml#delegate-prop">delegate</db:link> consisting of a <db:link xlink:href="qml-qtlocation-mapquickitem.xml">MapQuickItem</db:link> is used to display a marker image. A marker is shown for every place that was found by the search model. The delegate uses the <db:emphasis>place</db:emphasis> role to position the marker.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">Map {
    id: map
    anchors.fill: parent
    plugin: myPlugin;
    center: locationOslo
    zoomLevel: 13

    MapItemView {
        model: searchModel
        delegate: MapQuickItem {
            coordinate: place.location.coordinate

            anchorPoint.x: image.width * 0.5
            anchorPoint.y: image.height

            sourceItem: Column {
                Image { id: image; source: &quot;marker.png&quot; }
                Text { text: title; font.bold: true }
            }
        }
    }
}
</db:programlisting>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/places_map.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>For simplicty's sake we have assumed that every search result is of <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#search-result-types">type</db:link> <db:code>PlaceSearchResult</db:code> and so always have access to the <db:emphasis>place</db:emphasis> role, other search result types may not have a <db:emphasis>place</db:emphasis> role.</db:para>
</db:note>
<db:para>See the <db:link xlink:href="qtlocation-places-map-example.xml">Places Map</db:link> example for full source code.</db:para>
</db:section>
<db:section xml:id="fetching-place-details">
<db:title>Fetching Place Details</db:title>
<db:para>In order to save bandwidth, sometimes a backend will only return places which are partially populated with details. This can be checked with the <db:link xlink:href="qml-qtlocation-place.xml#detailsFetched-prop">Place::detailsFetched</db:link> property which indicates whether all availalable details have been fetched or not. If not, the <db:link xlink:href="qml-qtlocation-place.xml#getDetails-method">Place::getDetails</db:link>() method can be invoked to fetch the remaining details.</db:para>
<db:programlisting language="qml">if (!place.detailsFetched)
    place.getDetails();
</db:programlisting>
</db:section>
<db:section xml:id="saving-and-removing-places">
<db:title>Saving and Removing Places</db:title>
<db:para>Some backends may support saving and removing places. This can be done by calling the <db:link xlink:href="qml-qtlocation-place.xml#save-method">Place::save</db:link>() and <db:link xlink:href="qml-qtlocation-place.xml#remove-method">Place::remove</db:link>() methods respectively. Note that in order to save a <db:link xlink:href="qml-qtlocation-place.xml">Place</db:link>, a <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> must be assigned to specify which backend we are saving to. The <db:link xlink:href="qml-qtlocation-place.xml#status-prop">status</db:link> property will transition into the <db:code>Saving</db:code> state while the save operation is happening and on successful completion will move to the <db:code>Ready</db:code> state. The following snippet shows how to save and remove a place using javascript.</db:para>
<db:programlisting language="qml">//creating and saving a place
var place = Qt.createQmlObject('import QtLocation 5.3; Place { }', parent);
place.plugin = myPlugin;
place.name = &quot;New York&quot;;
place.location.coordinate.latitude = 40.7
place.location.coordinate.longitude = -74.0
place.save();

//removing a place
place.remove();
</db:programlisting>
</db:section>
<db:section xml:id="learn-more">
<db:title>Learn More</db:title>
<db:para>The above snippets only exhibit a small subset of Places functionality. Refer to the <db:link xlink:href="location-places-qml.xml#places-types">Places Types</db:link> shown below for richer content such as <db:link xlink:href="qml-qtlocation-imagemodel.xml">images</db:link>, <db:link xlink:href="qml-qtlocation-reviewmodel.xml">reviews</db:link> etc, as well as more indepth descriptions and explanations.</db:para>
<db:para>See also the <db:link xlink:href="qtlocation-places-example.xml">Places (QML)</db:link> example for a more comprehensive demonstration on how to use the API.</db:para>
</db:section>
</db:section>
<db:section xml:id="places-types">
<db:title>Places Types</db:title>
<db:section xml:id="data-types">
<db:title>Data Types</db:title>
<db:variablelist role="qml-QtLocation5-places-data">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-category.xml" xlink:role="">Category</db:link></db:term>
<db:listitem>
<db:para>The Category type represents a category that a Place can be associated with.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-contactdetail.xml" xlink:role="">ContactDetail</db:link></db:term>
<db:listitem>
<db:para>The ContactDetail type holds a contact detail such as a phone number or a website address.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-contactdetails.xml" xlink:role="">ContactDetails</db:link></db:term>
<db:listitem>
<db:para>The ContactDetails type holds contact details for a Place.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-extendedattributes.xml" xlink:role="">ExtendedAttributes</db:link></db:term>
<db:listitem>
<db:para>The ExtendedAttributes type holds additional data about a Place.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-icon.xml" xlink:role="">Icon</db:link></db:term>
<db:listitem>
<db:para>The Icon type represents an icon image source which can have multiple sizes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-place.xml" xlink:role="">Place</db:link></db:term>
<db:listitem>
<db:para>The Place type represents a location that is a position of interest.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-placeattribute.xml" xlink:role="">PlaceAttribute</db:link></db:term>
<db:listitem>
<db:para>The PlaceAttribute type holds generic place attribute information.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-ratings.xml" xlink:role="">Ratings</db:link></db:term>
<db:listitem>
<db:para>The Ratings type holds place rating information.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-supplier.xml" xlink:role="">Supplier</db:link></db:term>
<db:listitem>
<db:para>Holds data regarding the supplier of a place, a place's image, review, or editorial.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-user.xml" xlink:role="">User</db:link></db:term>
<db:listitem>
<db:para>The User type identifies a user who contributed a particular Place content item.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="models">
<db:title>Models</db:title>
<db:variablelist role="qml-QtLocation5-places-models">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-categorymodel.xml" xlink:role="">CategoryModel</db:link></db:term>
<db:listitem>
<db:para>The CategoryModel type provides a model of the categories supported by a Plugin.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-editorialmodel.xml" xlink:role="">EditorialModel</db:link></db:term>
<db:listitem>
<db:para>The EditorialModel type provides a model of place editorials.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-imagemodel.xml" xlink:role="">ImageModel</db:link></db:term>
<db:listitem>
<db:para>The ImageModel type provides a model of place images.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-placesearchmodel.xml" xlink:role="">PlaceSearchModel</db:link></db:term>
<db:listitem>
<db:para>Provides access to place search results.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-placesearchsuggestionmodel.xml" xlink:role="">PlaceSearchSuggestionModel</db:link></db:term>
<db:listitem>
<db:para>Provides access to search term suggestions.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-reviewmodel.xml" xlink:role="">ReviewModel</db:link></db:term>
<db:listitem>
<db:para>Provides access to reviews of a Place.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:section>
</db:article>
