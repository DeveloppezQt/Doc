<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOffscreenSurface Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qoffscreensurface.xml">QOffscreenSurface</db:link> class represents an offscreen surface in the underlying platform.</db:para>
<db:para>This class was introduced in Qt 5.1.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOffscreenSurface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link> and <db:link xlink:href="qsurface.xml" xlink:role="class">QSurface</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qoffscreensurface.xml">QOffscreenSurface</db:link> is intended to be used with <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> to allow rendering with OpenGL in an arbitrary thread without the need to create a <db:link xlink:href="qwindow.xml">QWindow</db:link>.</db:para>
<db:para>Even though the surface is typically renderable, the surface's pixels are not accessible. <db:link xlink:href="qoffscreensurface.xml">QOffscreenSurface</db:link> should only be used to create OpenGL resources such as textures or framebuffer objects.</db:para>
<db:para>An application will typically use <db:link xlink:href="qoffscreensurface.xml">QOffscreenSurface</db:link> to perform some time-consuming tasks in a separate thread in order to avoid stalling the main rendering thread. Resources created in the <db:link xlink:href="qoffscreensurface.xml">QOffscreenSurface</db:link>'s context can be shared with the main OpenGL context. Some common use cases are asynchronous texture uploads or rendering into a <db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link>.</db:para>
<db:para>How the offscreen surface is implemented depends on the underlying platform, but it will typically use a pixel buffer (pbuffer). If the platform doesn't implement or support offscreen surfaces, <db:link xlink:href="qoffscreensurface.xml">QOffscreenSurface</db:link> will use an invisible <db:link xlink:href="qwindow.xml">QWindow</db:link> internally.</db:para>
<db:note>
<db:para>Due to the fact that <db:link xlink:href="qoffscreensurface.xml">QOffscreenSurface</db:link> is backed by a <db:link xlink:href="qwindow.xml">QWindow</db:link> on some platforms, cross-platform applications must ensure that <db:link xlink:href="qoffscreensurface.xml#create">create</db:link>() is only called on the main (GUI) thread. The <db:link xlink:href="qoffscreensurface.xml">QOffscreenSurface</db:link> is then safe to be used with <db:link xlink:href="qopenglcontext.xml#makeCurrent">makeCurrent</db:link>() on other threads, but the initialization and destruction must always happen on the main (GUI) thread.</db:para>
</db:note>
<db:note>
<db:para>In order to create an offscreen surface that is guaranteed to be compatible with a given context and window, make sure to set the format to the context's or the window's actual format, that is, the <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link> returned from <db:link xlink:href="qopenglcontext.xml#format">QOpenGLContext::format</db:link>() or <db:link xlink:href="qwindow.xml#format">QWindow::format</db:link>() <db:emphasis>after the context or window has been created</db:emphasis>. Passing the format returned from <db:link xlink:href="qwindow.xml#requestedFormat">QWindow::requestedFormat</db:link>() to <db:link xlink:href="qoffscreensurface.xml#setFormat">setFormat</db:link>() may result in an incompatible offscreen surface since the underlying windowing system interface may offer a different set of configurations for window and pbuffer surfaces.</db:para>
</db:note>
<db:note>
<db:para>Some platforms may utilize a surfaceless context extension (for example EGL_KHR_surfaceless_context) when available. In this case there will be no underlying native surface. For the use cases of <db:link xlink:href="qoffscreensurface.xml">QOffscreenSurface</db:link> (rendering to FBOs, texture upload) this is not a problem.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QOffscreenSurface">
<db:title>[explicit, since 5.10] QOffscreenSurface::QOffscreenSurface(QScreen *<db:emphasis>targetScreen</db:emphasis> = nullptr, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QOffscreenSurface</db:methodname>
<db:methodparam>
<db:type>QScreen *</db:type>
<db:parameter>targetScreen</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QOffscreenSurface(QScreen *targetScreen, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates an offscreen surface for the <db:code role="parameter">targetScreen</db:code> with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The underlying platform surface is not created until <db:link xlink:href="qoffscreensurface.xml#create">create</db:link>() is called.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoffscreensurface.xml#setScreen">setScreen</db:link>()</db:member>
<db:member><db:link xlink:href="qoffscreensurface.xml#create">create</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QOffscreenSurface">
<db:title>[virtual] QOffscreenSurface::~QOffscreenSurface()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QOffscreenSurface</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QOffscreenSurface()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the offscreen surface.</db:para>
</db:section>
<db:section xml:id="create">
<db:title>void QOffscreenSurface::create()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>create</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void create()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Allocates the platform resources associated with the offscreen surface.</db:para>
<db:para>It is at this point that the surface format set using <db:link xlink:href="qoffscreensurface.xml#setFormat">setFormat</db:link>() gets resolved into an actual native surface.</db:para>
<db:para>Call <db:link xlink:href="qoffscreensurface.xml#destroy">destroy</db:link>() to free the platform resources if necessary.</db:para>
<db:note>
<db:para>Some platforms require this function to be called on the main (GUI) thread.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoffscreensurface.xml#destroy">destroy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="destroy">
<db:title>void QOffscreenSurface::destroy()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>destroy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void destroy()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Releases the native platform resources associated with this offscreen surface.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoffscreensurface.xml#create">create</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="format">
<db:title>[override virtual] QSurfaceFormat QOffscreenSurface::format() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSurfaceFormat</db:type>
<db:methodname>format</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSurfaceFormat format() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qsurface.xml#format" role="function">QSurface::format() const</db:link>.</db:para>
<db:para>Returns the actual format of this offscreen surface.</db:para>
<db:para>After the offscreen surface has been created, this function will return the actual surface format of the surface. It might differ from the requested format if the requested format could not be fulfilled by the platform.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoffscreensurface.xml#setFormat">setFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qoffscreensurface.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qoffscreensurface.xml#requestedFormat">requestedFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QOffscreenSurface::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this offscreen surface is valid; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>The offscreen surface is valid if the platform resources have been successfuly allocated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoffscreensurface.xml#create">create</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nativeInterface">
<db:title>QNativeInterface *QOffscreenSurface::nativeInterface() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QNativeInterface *</db:type>
<db:methodname>nativeInterface</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNativeInterface * nativeInterface() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a native interface of the given type for the surface.</db:para>
<db:para>This function provides access to platform specific functionality of QOffScreenSurface, as defined in the <db:link xlink:href="qnativeinterface-sub-qtgui.xml">QNativeInterface</db:link> namespace:</db:para>
<db:variablelist role="native-interfaces-qoffscreensurface">
<db:varlistentry>
<db:term><db:link xlink:href="qnativeinterface-qandroidoffscreensurface.xml" xlink:role="class">QNativeInterface::QAndroidOffscreenSurface</db:link></db:term>
<db:listitem>
<db:para>Native interface to a offscreen surface on Android.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para>If the requested interface is not available a <db:code>nullptr</db:code> is returned.</db:para>
</db:section>
<db:section xml:id="requestedFormat">
<db:title>QSurfaceFormat QOffscreenSurface::requestedFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSurfaceFormat</db:type>
<db:methodname>requestedFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSurfaceFormat requestedFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the requested surfaceformat of this offscreen surface.</db:para>
<db:para>If the requested format was not supported by the platform implementation, the requestedFormat will differ from the actual offscreen surface format.</db:para>
<db:para>This is the value set with <db:link xlink:href="qoffscreensurface.xml#setFormat">setFormat</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoffscreensurface.xml#setFormat">setFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qoffscreensurface.xml#format">format</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="screen">
<db:title>QScreen *QOffscreenSurface::screen() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QScreen *</db:type>
<db:methodname>screen</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QScreen * screen() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the screen to which the offscreen surface is connected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoffscreensurface.xml#setScreen">setScreen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="screenChanged">
<db:title>void QOffscreenSurface::screenChanged(QScreen *<db:emphasis>screen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>screenChanged</db:methodname>
<db:methodparam>
<db:type>QScreen *</db:type>
<db:parameter>screen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void screenChanged(QScreen *screen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when an offscreen surface's <db:code role="parameter">screen</db:code> changes, either by being set explicitly with <db:link xlink:href="qoffscreensurface.xml#setScreen">setScreen</db:link>(), or automatically when the window's screen is removed.</db:para>
</db:section>
<db:section xml:id="setFormat">
<db:title>void QOffscreenSurface::setFormat(const QSurfaceFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFormat</db:methodname>
<db:methodparam>
<db:type>const QSurfaceFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFormat(const QSurfaceFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the offscreen surface <db:code role="parameter">format</db:code>.</db:para>
<db:para>The surface format will be resolved in the <db:link xlink:href="qoffscreensurface.xml#create">create</db:link>() function. Calling this function after <db:link xlink:href="qoffscreensurface.xml#create">create</db:link>() will not re-resolve the surface format of the native surface.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoffscreensurface.xml#format">format</db:link>()</db:member>
<db:member><db:link xlink:href="qoffscreensurface.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qoffscreensurface.xml#destroy">destroy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setScreen">
<db:title>void QOffscreenSurface::setScreen(QScreen *<db:emphasis>newScreen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setScreen</db:methodname>
<db:methodparam>
<db:type>QScreen *</db:type>
<db:parameter>newScreen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setScreen(QScreen *newScreen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the screen to which the offscreen surface is connected.</db:para>
<db:para>If the offscreen surface has been created, it will be recreated on the <db:code role="parameter">newScreen</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoffscreensurface.xml#screen">screen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>[override virtual] QSize QOffscreenSurface::size() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize size() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qsurface.xml#size" role="function">QSurface::size() const</db:link>.</db:para>
<db:para>Returns the size of the offscreen surface.</db:para>
</db:section>
<db:section xml:id="surfaceType">
<db:title>[override virtual] QSurface::SurfaceType QOffscreenSurface::surfaceType() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSurface::SurfaceType</db:type>
<db:methodname>surfaceType</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSurface::SurfaceType surfaceType() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qsurface.xml#surfaceType" role="function">QSurface::surfaceType() const</db:link>.</db:para>
<db:para>Returns the surface type of the offscreen surface.</db:para>
<db:para>The surface type of an offscreen surface is always <db:link xlink:href="qsurface.xml#SurfaceType-enum">QSurface::OpenGLSurface</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
