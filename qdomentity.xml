<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDomEntity Class</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdomentity.xml">QDomEntity</db:link> class represents an XML entity.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDomEntity</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdomnode.xml" xlink:role="class">QDomNode</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDomEntity is part of <db:simplelist><db:member><db:link xlink:href="xml-tools.xml">XML Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class represents an entity in an XML document, either parsed or unparsed. Note that this models the entity itself not the entity declaration.</db:para>
<db:para>DOM does not support editing entity nodes; if a user wants to make changes to the contents of an entity, every related <db:link xlink:href="qdomentityreference.xml">QDomEntityReference</db:link> node must be replaced in the DOM tree by a clone of the entity's contents, and then the desired changes must be made to each of the clones instead. All the descendants of an entity node are read-only.</db:para>
<db:para>An entity node does not have any parent.</db:para>
<db:para>You can access the entity's <db:link xlink:href="qdomentity.xml#publicId">publicId</db:link>(), <db:link xlink:href="qdomentity.xml#systemId">systemId</db:link>() and <db:link xlink:href="qdomentity.xml#notationName">notationName</db:link>() when available.</db:para>
<db:para>For further information about the Document Object Model see <db:link xlink:href="http://www.w3.org/TR/REC-DOM-Level-1/">Level 1</db:link> and <db:link xlink:href="http://www.w3.org/TR/DOM-Level-2-Core/">Level 2 Core</db:link>. For a more general introduction of the DOM implementation see the <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> documentation.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDomEntity">
<db:title>QDomEntity::QDomEntity()</db:title>
<db:para>Constructs an empty entity.</db:para>
</db:section>
<db:section xml:id="QDomEntity-1">
<db:title>QDomEntity::QDomEntity(const QDomEntity &amp;<db:emphasis>x</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">x</db:code>.</db:para>
<db:para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use <db:link xlink:href="qdomnode.xml#cloneNode">cloneNode</db:link>().</db:para>
</db:section>
<db:section xml:id="nodeType">
<db:title>QDomNode::NodeType QDomEntity::nodeType() const</db:title>
<db:para>Returns <db:code>EntityNode</db:code>.</db:para>
</db:section>
<db:section xml:id="notationName">
<db:title>QString QDomEntity::notationName() const</db:title>
<db:para>For unparsed entities this function returns the name of the notation for the entity. For parsed entities this function returns an empty string.</db:para>
</db:section>
<db:section xml:id="publicId">
<db:title>QString QDomEntity::publicId() const</db:title>
<db:para>Returns the public identifier associated with this entity. If the public identifier was not specified an empty string is returned.</db:para>
</db:section>
<db:section xml:id="systemId">
<db:title>QString QDomEntity::systemId() const</db:title>
<db:para>Returns the system identifier associated with this entity. If the system identifier was not specified an empty string is returned.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QDomEntity &amp;QDomEntity::operator=(const QDomEntity &amp;<db:emphasis>x</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">x</db:code> to this DOM entity.</db:para>
<db:para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use <db:link xlink:href="qdomnode.xml#cloneNode">cloneNode</db:link>().</db:para>
</db:section>
</db:section>
</db:article>
