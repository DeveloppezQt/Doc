<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QPointF Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpointf.xml">QPointF</db:link> class defines a point in the plane using floating point precision.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPointF</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPointF is part of <db:simplelist><db:member>painting</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A point is specified by a x coordinate and an y coordinate which can be accessed using the <db:link xlink:href="qpointf.xml#x">x</db:link>() and <db:link xlink:href="qpointf.xml#y">y</db:link>() functions. The coordinates of the point are specified using floating point numbers for accuracy. The <db:link xlink:href="qpointf.xml#isNull">isNull</db:link>() function returns true if both x and y are set to 0.0. The coordinates can be set (or altered) using the <db:link xlink:href="qpointf.xml#setX">setX</db:link>() and <db:link xlink:href="qpointf.xml#setY">setY</db:link>() functions, or alternatively the <db:link xlink:href="qpointf.xml#rx">rx</db:link>() and <db:link xlink:href="qpointf.xml#ry">ry</db:link>() functions which return references to the coordinates (allowing direct manipulation).</db:para>
<db:para>Given a point <db:emphasis>p</db:emphasis>, the following statements are all equivalent:</db:para>
<db:programlisting language="cpp">QPointF p;

p.setX(p.x() + 1.0);
p += QPointF(1.0, 0.0);
p.rx()++;
</db:programlisting>
<db:para>A <db:link xlink:href="qpointf.xml">QPointF</db:link> object can also be used as a vector: Addition and subtraction are defined as for vectors (each component is added separately). A <db:link xlink:href="qpointf.xml">QPointF</db:link> object can also be divided or multiplied by an int or a qreal.</db:para>
<db:para>In addition, the <db:link xlink:href="qpointf.xml">QPointF</db:link> class provides a constructor converting a <db:link xlink:href="qpoint.xml">QPoint</db:link> object into a <db:link xlink:href="qpointf.xml">QPointF</db:link> object, and a corresponding <db:link xlink:href="qpointf.xml#toPoint">toPoint</db:link>() function which returns a <db:link xlink:href="qpoint.xml">QPoint</db:link> copy of <db:emphasis>this</db:emphasis> point. Finally, <db:link xlink:href="qpointf.xml">QPointF</db:link> objects can be streamed as well as compared.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml">QPoint</db:link></db:member>
<db:member>QPolygonF</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPointF">
<db:title>QPointF::QPointF()</db:title>
<db:para>Constructs a null point, i.e. with coordinates (0.0, 0.0)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointf.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPointF-1">
<db:title>QPointF::QPointF(const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>Constructs a copy of the given <db:code role="parameter">point</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointf.xml#toPoint">toPoint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPointF-2">
<db:title>QPointF::QPointF(qreal <db:emphasis>xpos</db:emphasis>, qreal <db:emphasis>ypos</db:emphasis>)</db:title>
<db:para>Constructs a point with the given coordinates (<db:code role="parameter">xpos</db:code>, <db:code role="parameter">ypos</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointf.xml#setX">setX</db:link>()</db:member>
<db:member><db:link xlink:href="qpointf.xml#setY">setY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dotProduct">
<db:title>[static, since 5.1] qreal QPointF::dotProduct(const QPointF &amp;<db:emphasis>p1</db:emphasis>, const QPointF &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:programlisting language="cpp">QPointF p( 3.1, 7.1);
QPointF q(-1.0, 4.1);
int lengthSquared = QPointF::dotProduct(p, q);   // lengthSquared becomes 26.01
</db:programlisting>
<db:para>Returns the dot product of <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QPointF::isNull() const</db:title>
<db:para>Returns true if both the x and y coordinates are set to +0.0; otherwise returns false.</db:para>
<db:note>
<db:para>Since this function treats +0.0 and -0.0 differently, points with zero-valued coordinates where either or both values have a negative sign are not defined to be null points.</db:para>
</db:note>
</db:section>
<db:section xml:id="manhattanLength">
<db:title>[since 4.6] qreal QPointF::manhattanLength() const</db:title>
<db:para>Returns the sum of the absolute values of <db:link xlink:href="qpointf.xml#x">x</db:link>() and <db:link xlink:href="qpointf.xml#y">y</db:link>(), traditionally known as the &quot;Manhattan length&quot; of the vector from the origin to the point.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#manhattanLength">QPoint::manhattanLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rx">
<db:title>qreal &amp;QPointF::rx()</db:title>
<db:para>Returns a reference to the x coordinate of this point.</db:para>
<db:para>Using a reference makes it possible to directly manipulate x. For example:</db:para>
<db:programlisting language="cpp"> QPointF p(1.1, 2.5);
 p.rx()--;   // p becomes (0.1, 2.5)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointf.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qpointf.xml#setX">setX</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ry">
<db:title>qreal &amp;QPointF::ry()</db:title>
<db:para>Returns a reference to the y coordinate of this point.</db:para>
<db:para>Using a reference makes it possible to directly manipulate y. For example:</db:para>
<db:programlisting language="cpp">QPointF p(1.1, 2.5);
p.ry()++;   // p becomes (1.1, 3.5)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointf.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qpointf.xml#setY">setY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setX">
<db:title>void QPointF::setX(qreal <db:emphasis>x</db:emphasis>)</db:title>
<db:para>Sets the x coordinate of this point to the given <db:code role="parameter">x</db:code> coordinate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointf.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qpointf.xml#setY">setY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setY">
<db:title>void QPointF::setY(qreal <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Sets the y coordinate of this point to the given <db:code role="parameter">y</db:code> coordinate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointf.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qpointf.xml#setX">setX</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toPoint">
<db:title>QPoint QPointF::toPoint() const</db:title>
<db:para>Rounds the coordinates of this point to the nearest integer, and returns a <db:link xlink:href="qpoint.xml">QPoint</db:link> object with the rounded coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointf.xml#QPointF">QPointF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="x">
<db:title>qreal QPointF::x() const</db:title>
<db:para>Returns the x coordinate of this point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointf.xml#setX">setX</db:link>()</db:member>
<db:member><db:link xlink:href="qpointf.xml#rx">rx</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="y">
<db:title>qreal QPointF::y() const</db:title>
<db:para>Returns the y coordinate of this point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointf.xml#setY">setY</db:link>()</db:member>
<db:member><db:link xlink:href="qpointf.xml#ry">ry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-eq">
<db:title>QPointF &amp;QPointF::operator*=(qreal <db:emphasis>factor</db:emphasis>)</db:title>
<db:para>Multiplies this point's coordinates by the given <db:code role="parameter">factor</db:code>, and returns a reference to this point. For example:</db:para>
<db:programlisting language="cpp">QPointF p(-1.1, 4.1);
p *= 2.5;    // p becomes (-2.75, 10.25)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointf.xml#operator-2f-eq">operator/=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>QPointF &amp;QPointF::operator+=(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">point</db:code> to this point and returns a reference to this point. For example:</db:para>
<db:programlisting language="cpp">QPointF p( 3.1, 7.1);
QPointF q(-1.0, 4.1);
p += q;    // p becomes (2.1, 11.2)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointf.xml#operator--eq">operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--eq">
<db:title>QPointF &amp;QPointF::operator-=(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>Subtracts the given <db:code role="parameter">point</db:code> from this point and returns a reference to this point. For example:</db:para>
<db:programlisting language="cpp">QPointF p( 3.1, 7.1);
QPointF q(-1.0, 4.1);
p -= q;    // p becomes (4.1, 3.0)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointf.xml#operator-2b-eq">operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2f-eq">
<db:title>QPointF &amp;QPointF::operator/=(qreal <db:emphasis>divisor</db:emphasis>)</db:title>
<db:para>Divides both x and y by the given <db:code role="parameter">divisor</db:code>, and returns a reference to this point. For example:</db:para>
<db:programlisting language="cpp">QPointF p(-2.75, 10.25);
p /= 2.5;           // p becomes (-1.1, 4.1)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointf.xml#operator-2a-eq">operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq-1">
<db:title>bool operator!=(const QPointF &amp;<db:emphasis>p1</db:emphasis>, const QPointF &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">p1</db:code> is not equal to <db:code role="parameter">p2</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-2a-2">
<db:title>const QPointF operator*(const QPointF &amp;<db:emphasis>point</db:emphasis>, qreal <db:emphasis>factor</db:emphasis>)</db:title>
<db:para>Returns a copy of the given <db:code role="parameter">point</db:code>, multiplied by the given <db:code role="parameter">factor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointf.xml#operator-2a-eq">QPointF::operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-3">
<db:title>const QPointF operator*(qreal <db:emphasis>factor</db:emphasis>, const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a copy of the given <db:code role="parameter">point</db:code>, multiplied by the given <db:code role="parameter">factor</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2b-2">
<db:title>[since 5.0] const QPointF operator+(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>Returns <db:code role="parameter">point</db:code> unmodified.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="operator-2b-3">
<db:title>const QPointF operator+(const QPointF &amp;<db:emphasis>p1</db:emphasis>, const QPointF &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qpointf.xml">QPointF</db:link> object that is the sum of the given points, <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code>; each component is added separately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointf.xml#operator-2b-eq">QPointF::operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--2">
<db:title>const QPointF operator-(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a <db:link xlink:href="qpointf.xml">QPointF</db:link> object that is formed by changing the sign of both components of the given <db:code role="parameter">point</db:code>.</db:para>
<db:para>Equivalent to QPointF(0,0) - point.</db:para>
</db:section>
<db:section xml:id="operator--3">
<db:title>const QPointF operator-(const QPointF &amp;<db:emphasis>p1</db:emphasis>, const QPointF &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qpointf.xml">QPointF</db:link> object that is formed by subtracting <db:code role="parameter">p2</db:code> from <db:code role="parameter">p1</db:code>; each component is subtracted separately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointf.xml#operator--eq">QPointF::operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2f-1">
<db:title>const QPointF operator/(const QPointF &amp;<db:emphasis>point</db:emphasis>, qreal <db:emphasis>divisor</db:emphasis>)</db:title>
<db:para>Returns the <db:link xlink:href="qpointf.xml">QPointF</db:link> object formed by dividing both components of the given <db:code role="parameter">point</db:code> by the given <db:code role="parameter">divisor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointf.xml#operator-2f-eq">QPointF::operator/=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-10">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>Writes the given <db:code role="parameter">point</db:code> to the given <db:code role="parameter">stream</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq-1">
<db:title>bool operator==(const QPointF &amp;<db:emphasis>p1</db:emphasis>, const QPointF &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">p1</db:code> is equal to <db:code role="parameter">p2</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-10">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>Reads a point from the given <db:code role="parameter">stream</db:code> into the given <db:code role="parameter">point</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
