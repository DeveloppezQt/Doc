<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractOAuth2 Class</db:title>
<db:productname>QtNetworkAuth</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Authorization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractoauth2.xml">QAbstractOAuth2</db:link> class is the base of all implementations of OAuth 2 authentication methods.</db:para>
<db:para>This class was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractOAuth2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += networkauth</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractoauth.xml" xlink:role="class">QAbstractOAuth</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractOAuth2 is part of <db:simplelist><db:member>oauth</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The class defines the basic interface of the OAuth 2 authentication classes. By inheriting this class, you can create custom authentication methods using the OAuth 2 standard for different web services.</db:para>
<db:para>A description of how OAuth 2 works can be found in: <db:link xlink:href="https://tools.ietf.org/html/rfc6749">The OAuth 2.0 Authorization Framework</db:link></db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="clientIdentifier-prop">
<db:title>clientIdentifier : QString</db:title>
<db:para>This property holds the client identifier used to identify the application in the authentication process.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>virtual <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">clientIdentifier</db:emphasis>() const override</db:para>
</db:listitem>
<db:listitem>
<db:para>virtual <db:type>void</db:type> <db:emphasis role="bold">setClientIdentifier</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>clientIdentifier</db:emphasis>) override</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">clientIdentifierChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>clientIdentifier</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="clientIdentifierSharedKey-prop">
<db:title>clientIdentifierSharedKey : QString</db:title>
<db:para>This property holds the client shared key used as a password if the server requires authentication to request the token.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">clientIdentifierSharedKey</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setClientIdentifierSharedKey</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>clientIdentifierSharedKey</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">clientIdentifierSharedKeyChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>clientIdentifierSharedKey</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="expiration-prop">
<db:title>[read-only] expiration : const QDateTime</db:title>
<db:para>This property holds the expiration time of the current access token.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:type> <db:emphasis role="bold">expirationAt</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">expirationAtChanged</db:emphasis>(const <db:type><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:type> &amp;<db:emphasis>expiration</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="scope-prop">
<db:title>scope : QString</db:title>
<db:para>This property holds the desired scope which defines the permissions requested by the client.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">scope</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setScope</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>scope</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">scopeChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>scope</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="state-prop">
<db:title>state : QString</db:title>
<db:para>This property holds the string sent to the server during authentication. The state is used to identify and validate the request when the callback is received.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">state</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setState</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>state</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">stateChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>state</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="userAgent-prop">
<db:title>userAgent : QString</db:title>
<db:para>This property holds the User-Agent header used to create the network requests.</db:para>
<db:para>The default value is &quot;QtOAuth/1.0 (+https://www.qt.io)&quot;.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">userAgent</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setUserAgent</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>userAgent</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">userAgentChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>userAgent</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractOAuth2">
<db:title>[explicit] QAbstractOAuth2::QAbstractOAuth2(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a <db:link xlink:href="qabstractoauth2.xml">QAbstractOAuth2</db:link> object using <db:code role="parameter">parent</db:code> as parent.</db:para>
</db:section>
<db:section xml:id="QAbstractOAuth2-1">
<db:title>[explicit] QAbstractOAuth2::QAbstractOAuth2(QNetworkAccessManager *<db:emphasis>manager</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a <db:link xlink:href="qabstractoauth2.xml">QAbstractOAuth2</db:link> object using <db:code role="parameter">parent</db:code> as parent and sets <db:code role="parameter">manager</db:code> as the network access manager.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractOAuth2">
<db:title>[virtual noexcept] QAbstractOAuth2::~QAbstractOAuth2()</db:title>
<db:para>Destroys the <db:link xlink:href="qabstractoauth2.xml">QAbstractOAuth2</db:link> instance.</db:para>
</db:section>
<db:section xml:id="authorizationCallbackReceived">
<db:title>void QAbstractOAuth2::authorizationCallbackReceived(const QVariantMap &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Signal emitted when the reply server receives the authorization callback from the server: <db:code role="parameter">data</db:code> contains the values received from the server.</db:para>
</db:section>
<db:section xml:id="createAuthenticatedUrl">
<db:title>[virtual] QUrl QAbstractOAuth2::createAuthenticatedUrl(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis> = QVariantMap())</db:title>
<db:para>The returned URL is based on <db:code role="parameter">url</db:code>, combining it with the given <db:code role="parameter">parameters</db:code> and the access token.</db:para>
</db:section>
<db:section xml:id="deleteResource">
<db:title>[override virtual] QNetworkReply *QAbstractOAuth2::deleteResource(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis> = QVariantMap())</db:title>
<db:para>Sends an authenticated DELETE request and returns a new <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>. The <db:code role="parameter">url</db:code> and <db:code role="parameter">parameters</db:code> are used to create the request.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc2616#section-9.7">Hypertext Transfer Protocol – HTTP/1.1: DELETE</db:link></db:para>
</db:section>
<db:section xml:id="error">
<db:title>void QAbstractOAuth2::error(const QString &amp;<db:emphasis>error</db:emphasis>, const QString &amp;<db:emphasis>errorDescription</db:emphasis>, const QUrl &amp;<db:emphasis>uri</db:emphasis>)</db:title>
<db:para>Signal emitted when the server responds to the request with an error: <db:code role="parameter">error</db:code> is the name of the error; <db:code role="parameter">description</db:code> describes the error and <db:code role="parameter">uri</db:code> is an optional URI containing more information about the error.</db:para>
</db:section>
<db:section xml:id="get">
<db:title>[override virtual] QNetworkReply *QAbstractOAuth2::get(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis> = QVariantMap())</db:title>
<db:para>Sends an authenticated GET request and returns a new <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>. The <db:code role="parameter">url</db:code> and <db:code role="parameter">parameters</db:code> are used to create the request.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc2616#section-9.3">Hypertext Transfer Protocol – HTTP/1.1: GET</db:link></db:para>
</db:section>
<db:section xml:id="head">
<db:title>[override virtual] QNetworkReply *QAbstractOAuth2::head(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis> = QVariantMap())</db:title>
<db:para>Sends an authenticated HEAD request and returns a new <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>. The <db:code role="parameter">url</db:code> and <db:code role="parameter">parameters</db:code> are used to create the request.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc2616#section-9.4">Hypertext Transfer Protocol – HTTP/1.1: HEAD</db:link></db:para>
</db:section>
<db:section xml:id="post">
<db:title>[override virtual] QNetworkReply *QAbstractOAuth2::post(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis> = QVariantMap())</db:title>
<db:para>Sends an authenticated POST request and returns a new <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>. The <db:code role="parameter">url</db:code> and <db:code role="parameter">parameters</db:code> are used to create the request.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc2616#section-9.5">Hypertext Transfer Protocol – HTTP/1.1: POST</db:link></db:para>
</db:section>
</db:section>
</db:article>
