<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Elided Label Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example creates a widget similar to <db:link xlink:href="qlabel.xml">QLabel</db:link>, that elides the last visible line, if the text is too long to fit the widget's geometry.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:alt>Elided Label example on XPressMusic 5800</db:alt>
<db:imageobject>
<db:imagedata fileref="images/elidedlabel-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>When text of varying length has to be displayed in a uniformly sized area, for instance within a list or grid view where all list items have the same size, it can be useful to give the user a visual clue when not all text is visible. <db:link xlink:href="qlabel.xml">QLabel</db:link> can elide text that doesn't fit within it, but only in one line. The ElidedLabel widget shown in this example word wraps its text by its width, and elides the last visible line if some text is left out. TestWidget gives control to the features of ElidedWidget and forms the example application.</db:para>
<db:section xml:id="elidedlabel-class-definition">
<db:title>ElidedLabel Class Definition</db:title>
<db:para>Like <db:link xlink:href="qlabel.xml">QLabel</db:link>, ElidedLabel inherits from <db:link xlink:href="qframe.xml">QFrame</db:link>. Here's the definition of the ElidedLabel class:</db:para>
<db:programlisting language="cpp">class ElidedLabel : public QFrame
{
    Q_OBJECT
    Q_PROPERTY(QString text READ text WRITE setText)
    Q_PROPERTY(bool isElided READ isElided)

public:
    explicit ElidedLabel(const QString &amp;amp;text, QWidget *parent = nullptr);

    void setText(const QString &amp;amp;text);
    const QString &amp;amp; text() const { return content; }
    bool isElided() const { return elided; }

protected:
    void paintEvent(QPaintEvent *event) override;

signals:
    void elisionChanged(bool elided);

private:
    bool elided;
    QString content;
};
</db:programlisting>
<db:para>The isElided property depends the font, text content and geometry of the widget. Whenever any of these change, the elisionChanged() signal might trigger. We cache the current elision value in elided, so that it doesn't have to be recomputed every time it's asked for.</db:para>
</db:section>
<db:section xml:id="elidedlabel-class-implementation">
<db:title>ElidedLabel Class Implementation</db:title>
<db:para>Except for initializing the member variables, the constructor sets the size policy to be horizontally expanding, since it's meant to fill the width of its container and grow vertically.</db:para>
<db:programlisting language="cpp">ElidedLabel::ElidedLabel(const QString &amp;amp;text, QWidget *parent)
    : QFrame(parent)
    , elided(false)
    , content(text)
{
    setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Preferred);
}
</db:programlisting>
<db:para>Changing the content require a repaint of the widget.</db:para>
<db:programlisting language="cpp">void ElidedLabel::setText(const QString &amp;amp;newText)
{
    content = newText;
    update();
}
</db:programlisting>
<db:para><db:link xlink:href="qtextlayout.xml">QTextLayout</db:link> is used in the paintEvent() to divide the content into lines, that wrap on word boundaries. Each line, except the last visible one, is drawn lineSpacing pixels below the previous one. The draw() method of <db:link xlink:href="qtextline.xml">QTextLine</db:link> will draw the line using the coordinate point as the top left corner.</db:para>
<db:programlisting language="cpp">void ElidedLabel::paintEvent(QPaintEvent *event)
{
    QFrame::paintEvent(event);

    QPainter painter(this);
    QFontMetrics fontMetrics = painter.fontMetrics();

    bool didElide = false;
    int lineSpacing = fontMetrics.lineSpacing();
    int y = 0;

    QTextLayout textLayout(content, painter.font());
    textLayout.beginLayout();
    forever {
        QTextLine line = textLayout.createLine();

        if (!line.isValid())
            break;

        line.setLineWidth(width());
        int nextLineY = y + lineSpacing;

        if (height() &amp;gt;= nextLineY + lineSpacing) {
            line.draw(&amp;amp;painter, QPoint(0, y));
            y = nextLineY;
</db:programlisting>
<db:para>Unfortunately, <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link> does not elide text, so the last visible line has to be treated differently. This last line is elided if it is too wide. The drawText() method of <db:link xlink:href="qpainter.xml">QPainter</db:link> draws the text starting from the base line, which is ascecnt() pixels below the last drawn line.</db:para>
<db:para>Finally, one more line is created to see if everything fit on this line.</db:para>
<db:programlisting language="cpp">} else {
QString lastLine = content.mid(line.textStart());
QString elidedLastLine = fontMetrics.elidedText(lastLine, Qt::ElideRight, width());
painter.drawText(QPoint(0, y + fontMetrics.ascent()), elidedLastLine);
line = textLayout.createLine();
didElide = line.isValid();
break;
}
}
textLayout.endLayout();
</db:programlisting>
<db:para>If the text was elided and wasn't before or vice versa, cache it in elided and emit the change.</db:para>
<db:programlisting language="cpp">if (didElide != elided) {
    elided = didElide;
    emit elisionChanged(didElide);
}
}
</db:programlisting>
</db:section>
<db:section xml:id="testwidget-class-definition">
<db:title>TestWidget Class Definition</db:title>
<db:para>TestWidget is a <db:link xlink:href="qwidget.xml">QWidget</db:link> and is the main window of the example. It contains an ElidedLabel which can be resized with two <db:link xlink:href="qslider.xml">QSlider</db:link> widgets.</db:para>
<db:programlisting language="cpp">class TestWidget : public QWidget
{
    Q_OBJECT

public:
    TestWidget(QWidget *parent = nullptr);

protected:
    void resizeEvent(QResizeEvent *event) override;

private slots:
    void switchText();
    void onWidthChanged(int width);
    void onHeightChanged(int height);

private:
    int sampleIndex;
    QStringList textSamples;
    ElidedLabel *elidedText;
    QSlider *heightSlider;
    QSlider *widthSlider;
};
</db:programlisting>
</db:section>
<db:section xml:id="testwidget-class-implementation">
<db:title>TestWidget Class Implementation</db:title>
<db:para>The constructor initializes the whole widget. Strings of different length are stored in textSamples. The user is able to switch between these.</db:para>
<db:programlisting language="cpp">TestWidget::TestWidget(QWidget *parent)
    : QWidget(parent)
{
    const QString romeo = tr(
        &quot;But soft, what light through yonder window breaks? / &quot;
        &quot;It is the east, and Juliet is the sun. / &quot;
        &quot;Arise, fair sun, and kill the envious moon, / &quot;
        &quot;Who is already sick and pale with grief / &quot;
        &quot;That thou, her maid, art far more fair than she.&quot;
    );

    const QString macbeth = tr(
        &quot;To-morrow, and to-morrow, and to-morrow, / &quot;
        &quot;Creeps in this petty pace from day to day, / &quot;
        &quot;To the last syllable of recorded time; / &quot;
        &quot;And all our yesterdays have lighted fools / &quot;
        &quot;The way to dusty death. Out, out, brief candle! / &quot;
        &quot;Life's but a walking shadow, a poor player, / &quot;
        &quot;That struts and frets his hour upon the stage, / &quot;
        &quot;And then is heard no more. It is a tale / &quot;
        &quot;Told by an idiot, full of sound and fury, / &quot;
        &quot;Signifying nothing.&quot;
    );

    const QString harry = tr(&quot;Feeling lucky, punk?&quot;);

    textSamples &amp;lt;&amp;lt; romeo &amp;lt;&amp;lt; macbeth &amp;lt;&amp;lt; harry;
</db:programlisting>
<db:para>An ElidedLabel is created to contain the first of the sample strings. The frame is made visible to make it easier to see the actual size of the widget.</db:para>
<db:programlisting language="cpp">sampleIndex = 0;
elidedText = new ElidedLabel(textSamples[sampleIndex], this);
elidedText-&amp;gt;setFrameStyle(QFrame::Box);
</db:programlisting>
<db:para>The buttons and the elision label are created. By connecting the elisionChanged() signal to the setVisible() slot of the label, it will act as an indicator to when the text is elided or not. This signal could, for instance, be used to make a &quot;More&quot; button visible, or similar.</db:para>
<db:programlisting language="cpp">QPushButton *switchButton = new QPushButton(tr(&quot;Switch text&quot;));
connect(switchButton, &amp;amp;QPushButton::clicked, this, &amp;amp;TestWidget::switchText);

QPushButton *exitButton = new QPushButton(tr(&quot;Exit&quot;));
connect(exitButton, &amp;amp;QPushButton::clicked, this, &amp;amp;TestWidget::close);

QLabel *label = new QLabel(tr(&quot;Elided&quot;));
label-&amp;gt;setVisible(elidedText-&amp;gt;isElided());
connect(elidedText, &amp;amp;ElidedLabel::elisionChanged, label, &amp;amp;QLabel::setVisible);
</db:programlisting>
<db:para>The widthSlider and heightSlider specify the size of the elidedText. Since the y-axis is inverted, the heightSlider has to be inverted to act appropriately.</db:para>
<db:programlisting language="cpp">widthSlider = new QSlider(Qt::Horizontal);
widthSlider-&amp;gt;setMinimum(0);
connect(widthSlider, &amp;amp;QSlider::valueChanged, this, &amp;amp;TestWidget::onWidthChanged);

heightSlider = new QSlider(Qt::Vertical);
heightSlider-&amp;gt;setInvertedAppearance(true);
heightSlider-&amp;gt;setMinimum(0);
connect(heightSlider, &amp;amp;QSlider::valueChanged, this, &amp;amp;TestWidget::onHeightChanged);
</db:programlisting>
<db:para>The components are all stored in a <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link>, which is made the layout of the TestWidget.</db:para>
<db:programlisting language="cpp">QGridLayout *layout = new QGridLayout;
layout-&amp;gt;addWidget(label, 0, 1, Qt::AlignCenter);
layout-&amp;gt;addWidget(switchButton, 0, 2);
layout-&amp;gt;addWidget(exitButton, 0, 3);
layout-&amp;gt;addWidget(widthSlider, 1, 1, 1, 3);
layout-&amp;gt;addWidget(heightSlider, 2, 0);
layout-&amp;gt;addWidget(elidedText, 2, 1, 1, 3, Qt::AlignTop | Qt::AlignLeft);

setLayout(layout);
</db:programlisting>
<db:para>The widthSlider and heightSlider have the exact same length as the dimensions of the elidedText. The maximum value for both of them is thus their lengths, and each tick indicates one pixel.</db:para>
<db:programlisting language="cpp">void TestWidget::resizeEvent(QResizeEvent *event)
{
    Q_UNUSED(event);

    int maxWidth = widthSlider-&amp;gt;width();
    widthSlider-&amp;gt;setMaximum(maxWidth);
    widthSlider-&amp;gt;setValue(maxWidth / 2);

    int maxHeight = heightSlider-&amp;gt;height();
    heightSlider-&amp;gt;setMaximum(maxHeight);
    heightSlider-&amp;gt;setValue(maxHeight / 2);

    elidedText-&amp;gt;setFixedSize(widthSlider-&amp;gt;value(), heightSlider-&amp;gt;value());
}
</db:programlisting>
<db:para>The switchText() slot simply cycles through all the available sample texts.</db:para>
<db:programlisting language="cpp">void TestWidget::switchText()
{
    sampleIndex = (sampleIndex + 1) % textSamples.size();
    elidedText-&amp;gt;setText(textSamples.at(sampleIndex));
}
</db:programlisting>
<db:para>These slots set the width and height of the elided text, in response to changes in the sliders.</db:para>
</db:section>
<db:section xml:id="the-main-function">
<db:title>The main() Function</db:title>
<db:para>The main() function creates an instance of TestWidget fullscreen and enters the message loop.</db:para>
<db:programlisting language="cpp">int main( int argc, char *argv[] )
{
    QApplication application( argc, argv );
    TestWidget w;
    w.showFullScreen();
    return application.exec();
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/widgets/elidedlabel?h=6.1">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
