<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRemoteObjectHostBase Class</db:title>
<db:productname>QtRemoteObjects</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Remote Objects Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qremoteobjecthostbase.xml">QRemoteObjectHostBase</db:link> class provides base functionality common to <db:link xlink:href="qremoteobjecthost.xml">Host</db:link> and <db:link xlink:href="qremoteobjectregistryhost.xml">RegistryHost</db:link> classes.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRemoteObjectHostBase</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS RemoteObjects)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::RemoteObjects)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += remoteobjects</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qremoteobjectnode.xml" xlink:role="class">QRemoteObjectNode</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qremoteobjecthost.xml" xlink:role="class">QRemoteObjectHost</db:link> and <db:link xlink:href="qremoteobjectregistryhost.xml" xlink:role="class">QRemoteObjectRegistryHost</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qremoteobjecthostbase.xml">QRemoteObjectHostBase</db:link> is a base class that cannot be instantiated directly. It provides the <db:link xlink:href="qremoteobjecthostbase.xml#enableRemoting">enableRemoting</db:link> and <db:link xlink:href="qremoteobjecthostbase.xml#disableRemoting">disableRemoting</db:link> functionality shared by all host nodes (<db:link xlink:href="qremoteobjecthost.xml">Host</db:link> and <db:link xlink:href="qremoteobjectregistryhost.xml">RegistryHost</db:link>) as well as the logic required to expose <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> objects on the Remote Objects network.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AllowedSchemas-enum">
<db:title>enum QRemoteObjectHostBase::AllowedSchemas</db:title>
<db:enumsynopsis>
<db:enumname>AllowedSchemas</db:enumname>
<db:enumitem>
<db:enumidentifier>BuiltInSchemasOnly</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AllowExternalRegistration</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum is used to specify whether a Node will accept a url with an unrecognized schema for the hostUrl. By default only urls with known schemas are accepted, but using <db:code>AllowExternalRegistration</db:code> will enable the <db:link xlink:href="qtremoteobjects-registry.xml#registry">Registry</db:link> to pass your external (to QtRO) url to client Nodes.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qremoteobjecthostbase.xml">QRemoteObjectHostBase</db:link></db:emphasis>::BuiltInSchemasOnly</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Only allow the hostUrl to be set to a QtRO supported schema. This is the default value, and causes a Node error to be set if an unrecognized schema is provided.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qremoteobjecthostbase.xml">QRemoteObjectHostBase</db:link></db:emphasis>::AllowExternalRegistration</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The provided schema is registered as an <db:link xlink:href="qtremoteobjects-external-schemas.xml#external-schemas">External Schema</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjecthost.xml">QRemoteObjectHost</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="addHostSideConnection">
<db:title>void QRemoteObjectHostBase::addHostSideConnection(QIODevice *<db:emphasis>ioDevice</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addHostSideConnection</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>ioDevice</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addHostSideConnection(QIODevice *ioDevice)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>In order to <db:link xlink:href="qremoteobjecthostbase.xml#enableRemoting">QRemoteObjectHost::enableRemoting</db:link>() <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> objects over <db:link xlink:href="qtremoteobjects-external-schemas.xml#external-qiodevices">External QIODevices</db:link>, Qt Remote Objects needs access to the communications channel (a <db:link xlink:href="qiodevice.xml">QIODevice</db:link>) between the respective nodes. It is the addHostSideConnection() call that enables this on the <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> side, taking the <db:code role="parameter">ioDevice</db:code> as input. Any <db:link xlink:href="qremoteobjecthostbase.xml#enableRemoting">enableRemoting</db:link>() call will still work without calling addHostSideConnection, but the Node will not be able to share the <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> objects without being provided the connection to the Replica node. Before calling this function you must call <db:link xlink:href="qremoteobjecthost.xml#setHostUrl">setHostUrl</db:link>() with a unique URL and <db:link xlink:href="qremoteobjecthostbase.xml#AllowedSchemas-enum">AllowExternalRegistration</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjectnode.xml#addClientSideConnection">addClientSideConnection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="disableRemoting">
<db:title>bool QRemoteObjectHostBase::disableRemoting(QObject *<db:emphasis>remoteObject</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>disableRemoting</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>remoteObject</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool disableRemoting(QObject *remoteObject)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disables remote access for the <db:link xlink:href="qobject.xml">QObject</db:link> <db:code role="parameter">remoteObject</db:code>. Returns <db:code>false</db:code> if the current node is a client node or if the <db:code role="parameter">remoteObject</db:code> is not registered, and returns <db:code>true</db:code> if remoting is successfully disabled for the Source object.</db:para>
<db:warning>
<db:para>Replicas of this object will no longer be valid after calling this method.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjecthostbase.xml#enableRemoting">enableRemoting</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enableRemoting">
<db:title>bool QRemoteObjectHostBase::enableRemoting(ObjectType *<db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>enableRemoting</db:methodname>
<db:methodparam>
<db:type>ObjectType *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool enableRemoting(ObjectType *object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This templated function overload enables a host node to provide remote access to a <db:link xlink:href="qobject.xml">QObject</db:link> <db:code role="parameter">object</db:code> with a specified (and compile-time checked) interface. Client nodes connected to the node hosting this object may obtain Replicas of this Source.</db:para>
<db:para>This is best illustrated by example:</db:para>
<db:programlisting language="cpp">#include &quot;rep_TimeModel_source.h&quot;
MinuteTimer timer;
hostNode.enableRemoting&amp;lt;MinuteTimerSourceAPI&amp;gt;(&amp;amp;timer);
</db:programlisting>
<db:para>Here the MinuteTimerSourceAPI is the set of Signals/Slots/Properties defined by the TimeModel.rep file. Compile time checks are made to verify the input <db:link xlink:href="qobject.xml">QObject</db:link> can expose the requested API, it will fail to compile otherwise. This allows a subset of <db:code role="parameter">object</db:code> 's interface to be exposed, and allows the types of conversions supported by Signal/Slot connections.</db:para>
<db:para>Returns <db:code>false</db:code> if the current node is a client node, or if the <db:link xlink:href="qobject.xml">QObject</db:link> is already registered to be remoted, and <db:code>true</db:code> if remoting is successfully enabled for the <db:link xlink:href="qobject.xml">QObject</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjecthostbase.xml#disableRemoting">disableRemoting</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enableRemoting-1">
<db:title>bool QRemoteObjectHostBase::enableRemoting(QObject *<db:emphasis>object</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>enableRemoting</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool enableRemoting(QObject *object, const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables a host node to dynamically provide remote access to the <db:link xlink:href="qobject.xml">QObject</db:link> <db:code role="parameter">object</db:code>. Client nodes connected to the node hosting this object may obtain Replicas of this Source.</db:para>
<db:para>The optional <db:code role="parameter">name</db:code> defines the lookup-name under which the <db:link xlink:href="qobject.xml">QObject</db:link> can be acquired using <db:link xlink:href="qremoteobjectnode.xml#acquire">QRemoteObjectNode::acquire</db:link>() . If not explicitly set then the name given in the QCLASSINFO_REMOTEOBJECT_TYPE will be used. If no such macro was defined for the <db:link xlink:href="qobject.xml">QObject</db:link> then the <db:link xlink:href="qobject.xml#objectName-prop">QObject::objectName</db:link>() is used.</db:para>
<db:para>Returns <db:code>false</db:code> if the current node is a client node, or if the <db:link xlink:href="qobject.xml">QObject</db:link> is already registered to be remoted, and <db:code>true</db:code> if remoting is successfully enabled for the dynamic <db:link xlink:href="qobject.xml">QObject</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjecthostbase.xml#disableRemoting">disableRemoting</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enableRemoting-2">
<db:title>bool QRemoteObjectHostBase::enableRemoting(QAbstractItemModel *<db:emphasis>model</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>, const QList&lt;int&gt; <db:emphasis>roles</db:emphasis>, QItemSelectionModel *<db:emphasis>selectionModel</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>enableRemoting</db:methodname>
<db:methodparam>
<db:type>QAbstractItemModel *</db:type>
<db:parameter>model</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;int&gt;</db:type>
<db:parameter>roles</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QItemSelectionModel *</db:type>
<db:parameter>selectionModel</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool enableRemoting(QAbstractItemModel *model, const QString &amp;name, const QList&lt;int&gt; roles, QItemSelectionModel *selectionModel)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This overload of <db:link xlink:href="qremoteobjecthostbase.xml#enableRemoting">enableRemoting</db:link>() is specific to <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> types (or any type derived from <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>). This is useful if you want to have a model and the HMI for the model in different processes.</db:para>
<db:para>The three required parameters are the <db:code role="parameter">model</db:code> itself, the <db:code role="parameter">name</db:code> by which to lookup the model, and the <db:code role="parameter">roles</db:code> that should be exposed on the Replica side. If you want to synchronize selection between <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> and <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link>, the optional <db:code role="parameter">selectionModel</db:code> parameter can be used. This is only recommended when using a single Replica.</db:para>
<db:para>Behind the scenes, Qt Remote Objects batches data() lookups and prefetches data when possible to make the model interaction as responsive as possible.</db:para>
<db:para>Returns <db:code>false</db:code> if the current node is a client node, or if the <db:link xlink:href="qobject.xml">QObject</db:link> is already registered to be remoted, and <db:code>true</db:code> if remoting is successfully enabled for the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjecthostbase.xml#disableRemoting">disableRemoting</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="proxy">
<db:title>bool QRemoteObjectHostBase::proxy(const QUrl &amp;<db:emphasis>registryUrl</db:emphasis>, const QUrl &amp;<db:emphasis>hostUrl</db:emphasis> = {}, QRemoteObjectHostBase::RemoteObjectNameFilter <db:emphasis>filter</db:emphasis> = [](QStringView, QStringView) {return true; })</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>proxy</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>registryUrl</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>hostUrl</db:parameter>
<db:initializer>{}</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QRemoteObjectHostBase::RemoteObjectNameFilter</db:type>
<db:parameter>filter</db:parameter>
<db:initializer>[](QStringView, QStringView) {return true; }</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool proxy(const QUrl &amp;registryUrl, const QUrl &amp;hostUrl, QRemoteObjectHostBase::RemoteObjectNameFilter filter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Forward Remote Objects from another network</db:para>
<db:para>The proxy functionality is useful when you want to share <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> objects over multiple networks. For instance, if you have an embedded target using target-only connections (like local) and you want to make some of those same objects available externally.</db:para>
<db:para>As a concrete example, say you have a set of processes talking to each other on your target hardware using a registry, with the <db:link xlink:href="qtremoteobjects-registry.xml#registry">Registry</db:link> at &quot;local:registry&quot; and separate processes using a node at &quot;local:MyHost&quot; that holds <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> objects. If you wanted to access these objects, but over tcp, you could create a new proxyNode like so:</db:para>
<db:programlisting language="cpp">// myInternalHost is a node only visible on the device...
QRemoteObjectHost myInternalHost(&quot;local:MyHost&quot;);
myInternalHost.enableRemoting&amp;lt;SomeObject&amp;gt;(&amp;amp;someObject);

// Regular host node, listening on port 12123, so visible to other
// devices
QRemoteObjectHost proxyNode(&quot;tcp://localhost:12123&quot;);

// Enable proxying objects from nodes on the local machine's internal
// QtRO bus
proxyNode.proxy(&quot;local:registry&quot;);
</db:programlisting>
<db:para>And from another device you create another node:</db:para>
<db:programlisting language="cpp">// NB: localhost resolves to a different ip address than proxyNode
QRemoteObjectHost nodeOnRemoteDevice(&quot;tcp://localhost:23234&quot;);

// Connect to the target's proxyNode directly, or use a tcp registry...
nodeOnRemoteDevice.connectToNode(&quot;tcp://&amp;lt;target device&amp;gt;:12123&quot;);

// Because of the proxy, we can get the object over tcp/ip port 12123,
// even though we can't connect directly to &quot;local:MyHost&quot;
SomeObject *so = nodeOnRemoteDevice.acquire&amp;lt;SomeObject&amp;gt;();
</db:programlisting>
<db:para>This would (internally) create a node in proxyNode, which (again internally/automatically) connects to the provided registry (given by the <db:code role="parameter">registryUrl</db:code> parameter, &quot;local:registry&quot; in this example). Whenever local:registry emits the <db:link xlink:href="qremoteobjectnode.xml#remoteObjectAdded">remoteObjectAdded</db:link> signal, the <db:code>QRemoteObjectSourceLocation</db:code> is passed to the <db:code role="parameter">filter</db:code> given to the proxy call. If this method returns true (the default filter simply returns true without any filtering), the object is acquired() from the internal node and <db:link xlink:href="qremoteobjecthostbase.xml#enableRemoting">enableRemoting</db:link>() (once the replica is initialized) is called on proxyNode.</db:para>
<db:para>If a <db:code role="parameter">hostUrl</db:code> is provided (which is required to enable <db:link xlink:href="qremoteobjecthostbase.xml#reverseProxy">reverseProxy</db:link>, but not needed otherwise), the internal node will be a <db:link xlink:href="qremoteobjecthost.xml">QRemoteObjectHost</db:link> node configured with the provided address. If no <db:code role="parameter">hostUrl</db:code> is provided, the internal node will be a <db:link xlink:href="qremoteobjectnode.xml">QRemoteObjectNode</db:link> (not HostNode).</db:para>
<db:para>Returns <db:code>true</db:code> if the object is acquired from the internal node.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjecthostbase.xml#reverseProxy">reverseProxy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reverseProxy">
<db:title>bool QRemoteObjectHostBase::reverseProxy(QRemoteObjectHostBase::RemoteObjectNameFilter <db:emphasis>filter</db:emphasis> = [](QStringView, QStringView) {return true; })</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>reverseProxy</db:methodname>
<db:methodparam>
<db:type>QRemoteObjectHostBase::RemoteObjectNameFilter</db:type>
<db:parameter>filter</db:parameter>
<db:initializer>[](QStringView, QStringView) {return true; }</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool reverseProxy(QRemoteObjectHostBase::RemoteObjectNameFilter filter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Forwards remote objects to another network.</db:para>
<db:para>The reverseProxy() function allows the <db:link xlink:href="qremoteobjecthostbase.xml#proxy">proxy</db:link>() functionality to be extended, in effect mirroring the proxy functionality in the &quot;reverse&quot; direction. These are distinct, because node communication is not symmetric, one side calls <db:link xlink:href="qremoteobjecthostbase.xml#enableRemoting">enableRemoting</db:link>() with a <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> object, the other side calls <db:link xlink:href="qremoteobjectnode.xml#acquire">acquire</db:link>() to get a <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link>. Using <db:link xlink:href="qremoteobjecthostbase.xml#proxy">proxy</db:link>() allows you to &quot;observe&quot; objects on a target device remotely via acquire, but it does not allow off-target <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> objects to be acquired from the device's local:* network. That is where reverseProxy() comes in. If a proxyNode is created like so:</db:para>
<db:programlisting language="cpp">// myInternalHost is a node only visible on the device...
QRemoteObjectHost myInternalHost(&quot;local:MyHost&quot;, &quot;local:registry&quot;);

// RegistryHost node, listening on port 12123, so visible to other
// devices.  The node must be a RegistryHost, so the Sources on
// the &quot;outside&quot; network can be forwarded to the inner network.
QRemoteObjectRegistryHost proxyNode(&quot;tcp://0.0.0.0:12123&quot;);

// Enable proxying objects from nodes on the local machine's internal
// QtRO bus.  Note the hostUrl parameter is now needed.
proxyNode.proxy(&quot;local:registry&quot;, &quot;local:fromProxy&quot;);
proxyNode.reverseProxy();
</db:programlisting>
<db:para>And from another device you create another node:</db:para>
<db:programlisting language="cpp">// Listen on a local port, and connect to &quot;proxyNode&quot; as the registry.
// NB: localhost resolves to a different ip address than proxyNode
QRemoteObjectHost nodeOnRemoteDevice(&quot;tcp://localhost:23234&quot;,
                                     &quot;tcp://&amp;lt;target device&amp;gt;:12123&quot;);

// Because of the reverseProxy, we can expose objects on this device
// and they will make their way to proxyNode...
nodeOnRemoteDevice.enableRemoting&amp;lt;OtherObject&amp;gt;(&amp;amp;otherObject);
</db:programlisting>
<db:programlisting language="cpp">// Acquire() can now see the objects on other devices through proxyNode,
// due to the reverseProxy call.
OtherObject *oo = myInternalHost.acquire&amp;lt;OtherObject&amp;gt;();
</db:programlisting>
<db:para>While the <db:link xlink:href="qremoteobjecthostbase.xml#proxy">proxy</db:link>() functionality allows <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> objects on another network to be acquired(), reverseProxy() allows <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> objects to be &quot;pushed&quot; to an otherwise inaccessible network.</db:para>
<db:note>
<db:para><db:link xlink:href="qremoteobjecthostbase.xml#proxy">proxy</db:link>() needs to be called before reverseProxy(), and a hostUrl needs to be provided to <db:link xlink:href="qremoteobjecthostbase.xml#proxy">proxy</db:link> for reverseProxy() to work. The reverseProxy() method allows a separate <db:code role="parameter">filter</db:code> to be applied. This reverseProxy specific filter will receive notifications of new <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> objects on <db:code>proxyNode</db:code> and acquire them on the internal node if they pass the <db:code role="parameter">filter</db:code>.</db:para>
</db:note>
<db:para>Returns <db:code>true</db:code> on success, <db:code>false</db:code> otherwise.</db:para>
<db:note>
<db:para>Currently the reverse proxy functionality is supported only for <db:link xlink:href="qremoteobjectregistryhost.xml">QRemoteObjectRegistryHost</db:link>. Calling this method on a <db:link xlink:href="qremoteobjecthost.xml">QRemoteObjectHost</db:link> node will always return <db:code>false</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjecthostbase.xml#proxy">proxy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setName">
<db:title>[override virtual] void QRemoteObjectHostBase::setName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setName(const QString &amp;name) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qremoteobjectnode.xml#setName" role="function">QRemoteObjectNode::setName(const QString &amp;name)</db:link>.</db:para>
<db:para>Similar to <db:link xlink:href="qobject.xml#setObjectName">QObject::setObjectName</db:link>() (which this method calls), but this version also applies the <db:code role="parameter">name</db:code> to internal classes as well, which are used in some of the debugging output.</db:para>
</db:section>
</db:section>
</db:article>
