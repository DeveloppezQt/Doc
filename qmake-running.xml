<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Running qmake</db:title>
<db:productname>QMake</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>QMake Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qmake-common-projects.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Building Common Project Types"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qmake-platform-notes.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Platform Notes"/></db:extendedlink>
<db:abstract>
<db:para>QMake Manual.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The behavior of qmake can be customized when it is run by specifying various options on the command line. These allow the build process to be fine-tuned, provide useful diagnostic information, and can be used to specify the target platform for your project.</db:para>
<db:section xml:id="command-syntax">
<db:title>Command Syntax</db:title>
<db:para>The syntax used to run qmake takes the following simple form:</db:para>
<db:programlisting language="cpp">qmake [mode] [options] files
</db:programlisting>
<db:note>
<db:para>If you installed Qt via a package manager, the binary may be <db:code>qmake6</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="operating-modes">
<db:title>Operating Modes</db:title>
<db:para>qmake supports two different modes of operation. In the default mode, qmake uses the information in a project file to generate a Makefile, but it is also possible to use qmake to generate project files. If you want to explicitly set the mode, you must specify it before all other options. The <db:code>mode</db:code> can be either of the following two values:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>-makefile</db:code>  qmake output will be a Makefile.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-project</db:code>  qmake output will be a project file. </db:para>
<db:note>
<db:para>It is likely that the created file will need to be edited. For example, adding the <db:code>QT</db:code> variable to suit what modules are required for the project.</db:para>
</db:note>
</db:listitem>
</db:itemizedlist>
<db:para>You can use the <db:code>options</db:code> to specify both general and mode-specific settings. Options that only apply to the Makefile mode are described in the <db:link xlink:href="qmake-running.xml#makefilemode">Makefile Mode Options</db:link> section, whereas options that influence the creation of project files are described in the <db:link xlink:href="qmake-running.xml#projectmode">Project Mode Options</db:link> section.</db:para>
</db:section>
<db:section xml:id="files">
<db:title>Files</db:title>
<db:para>The <db:code>files</db:code> argument represents a list of one or more project files, separated by spaces.</db:para>
</db:section>
<db:section xml:id="general-options">
<db:title>General Options</db:title>
<db:para>A wide range of options can be specified on the command line to qmake in order to customize the build process, and to override default settings for your platform. The following basic options provide help on using qmake, specify where qmake writes the output file, and control the level of debugging information that will be written to the console:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>-help</db:code>  qmake will go over these features and give some useful help.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-o file</db:code>  qmake output will be directed to <db:code>file</db:code>. If this option is not specified, qmake will try to use a suitable file name for its output, depending on the mode it is running in. If '-' is specified, output is directed to stdout.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-d</db:code>  qmake will output debugging information. Adding <db:code>-d</db:code> more than once increases verbosity.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The template used for the project is usually specified by the <db:link xlink:href="qmake-variable-reference.xml#template">TEMPLATE</db:link> variable in the project file. You can override or modify this by using the following options:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>-t tmpl</db:code>  qmake will override any set <db:code>TEMPLATE</db:code> variables with <db:code>tmpl</db:code>, but only <db:emphasis>after</db:emphasis> the .pro file has been processed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-tp prefix</db:code>  qmake will add <db:code>prefix</db:code> to the <db:code>TEMPLATE</db:code> variable.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The level of warning information can be fine-tuned to help you find problems in your project file:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>-Wall</db:code>  qmake will report all known warnings.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-Wnone</db:code>  No warning information will be generated by qmake.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-Wparser</db:code>  qmake will only generate parser warnings. This will alert you to common pitfalls and potential problems in the parsing of your project files.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-Wlogic</db:code>  qmake will warn of common pitfalls and potential problems in your project file. For example, qmake will report multiple occurrences of files in lists and missing files.</db:para>
</db:listitem>
</db:itemizedlist>
<db:anchor xml:id="makefilemode"/>
</db:section>
<db:section xml:id="makefile-mode-options">
<db:title>Makefile Mode Options</db:title>
<db:programlisting language="cpp">qmake -makefile [options] files
</db:programlisting>
<db:para>In Makefile mode, qmake will generate a Makefile that is used to build the project. Additionally, the following options may be used in this mode to influence the way the project file is generated:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>-after</db:code>  qmake will process assignments given on the command line after the specified files.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-nocache</db:code>  qmake will ignore the <db:code>.qmake.cache</db:code> file.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-nodepend</db:code>  qmake will not generate any dependency information.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-cache file</db:code>  qmake will use <db:code>file</db:code> as the cache file, ignoring any other .qmake.cache files found.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-spec spec</db:code>  qmake will use <db:code>spec</db:code> as a path to platform and compiler information, and ignore the value of <db:link xlink:href="qmake-environment-reference.xml#qmakespec">QMAKESPEC</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>You may also pass qmake assignments on the command line. They are processed before all of the files specified. For example, the following command generates a Makefile from test.pro:</db:para>
<db:programlisting language="cpp">qmake -makefile -o Makefile &quot;CONFIG+=test&quot; test.pro
</db:programlisting>
<db:para>However, some of the specified options can be omitted as they are default values:</db:para>
<db:programlisting language="cpp">qmake &quot;CONFIG+=test&quot; test.pro
</db:programlisting>
<db:para>If you are certain you want your variables processed after the files specified, then you may pass the <db:code>-after</db:code> option. When this is specified, all assignments on the command line after the <db:code>-after</db:code> option will be postponed until after the specified files are parsed.</db:para>
<db:anchor xml:id="projectmode"/>
</db:section>
<db:section xml:id="project-mode-options">
<db:title>Project Mode Options</db:title>
<db:programlisting language="cpp">qmake -project [options] files
</db:programlisting>
<db:para>In project mode, qmake will generate a project file. Additionally, you may supply the following options in this mode:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>-r</db:code>  qmake will look through supplied directories recursively.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-nopwd</db:code>  qmake will not look in your current working directory for source code. It will only use the specified <db:code>files</db:code>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In this mode, the <db:code>files</db:code> argument can be a list of files or directories. If a directory is specified, it will be included in the <db:link xlink:href="qmake-variable-reference.xml#dependpath">DEPENDPATH</db:link> variable, and relevant code from there will be included in the generated project file. If a file is given, it will be appended to the correct variable, depending on its extension. For example, UI files are added to <db:link xlink:href="qmake-variable-reference.xml#forms">FORMS</db:link>, and C++ files are added to <db:link xlink:href="qmake-variable-reference.xml#sources">SOURCES</db:link>.</db:para>
<db:para>You may also pass assignments on the command line in this mode. When doing so, these assignments will be placed last in the generated project file.</db:para>
</db:section>
</db:article>
