<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_finalize_target</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Handles various common platform-specific tasks associated with Qt targets.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="qt6-finalize-target"/>
<db:para>Handles various common platform-specific tasks associated with Qt targets.</db:para>
<db:para>The command is defined in the Core component of the Qt6 package, which can be loaded like so:</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 REQUIRED COMPONENTS Core)
</db:programlisting>
<db:para>This command was introduced in Qt 6.2.</db:para>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt_finalize_target(target)
</db:programlisting>
<db:para>If <db:link xlink:href="">versionless commands</db:link> are disabled, use qt6_finalize_target() instead. It supports the same set of arguments as this command.</db:para>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para>After a target is created, further processing or <db:emphasis>finalization</db:emphasis> steps are sometimes needed. The steps to perform depend on the platform, the type of target, and on various properties of the target. These steps are expected to be performed within the same directory scope as the one in which the target was created, so this command should also be called from that same directory scope.</db:para>
<db:para>This command is ordinarily invoked as part of a call to <db:link xlink:href="qt-add-executable.xml#qt6-add-executable">qt_add_executable()</db:link> or <db:link xlink:href="qt-add-library.xml#qt6-add-library">qt_add_library()</db:link>. The timing of when that call takes place and when it might need to be called explicitly by a project is discussed in the documentation of those commands.</db:para>
</db:section>
<db:section xml:id="executable-targets">
<db:title>Executable Targets</db:title>
<db:para>For executable targets, qt_finalize_target() implements the logic described in the subsections below, as appropriate for the platform and target provided. Later Qt releases may expand finalization processing further.</db:para>
<db:section xml:id="all-platforms">
<db:title>All Platforms</db:title>
<db:para>Some internal processing is performed to facilitate automatic linking of Qt plugins. This is especially important if using a statically built Qt or a CMake version earlier than 3.21.</db:para>
</db:section>
<db:section xml:id="android">
<db:title>Android</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Generate a deployment settings file for the target.</db:para>
</db:listitem>
<db:listitem>
<db:para>Create a build target for generating an APK.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="wasm">
<db:title>WASM</db:title>
<db:para>Create ${target}.html (a target-specific wasm_shell.html file), qtloader.js and qtlogo.svg files in the CMAKE_CURRENT_BINARY_DIR.</db:para>
</db:section>
<db:section xml:id="ios">
<db:title>iOS</db:title>
<db:para>Finalization attempts to provide sensible values for the following target properties if they are not already set, and their corresponding CMAKE_... variable is also not set:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>XCODE_ATTRIBUTE_DEVELOPMENT_TEAM</db:para>
</db:listitem>
<db:listitem>
<db:para>XCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER</db:para>
</db:listitem>
<db:listitem>
<db:para>MACOSX_BUNDLE_GUI_IDENTIFIER</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If required, the <db:link xlink:href="cmake-variable-qt-no-set-xcode-development-team-id.xml">QT_NO_SET_XCODE_DEVELOPMENT_TEAM_ID</db:link> variable can be used to disable setting XCODE_ATTRIBUTE_DEVELOPMENT_TEAM, and the <db:link xlink:href="cmake-variable-qt-no-set-xcode-bundle-identifier.xml">QT_NO_SET_XCODE_BUNDLE_IDENTIFIER</db:link> variable can be used to disable setting XCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER and MACOSX_BUNDLE_GUI_IDENTIFIER.</db:para>
</db:section>
</db:section>
<db:section xml:id="library-targets">
<db:title>Library Targets</db:title>
<db:para>As of this Qt version, finalization for library targets does not perform any processing. Future Qt versions may add finalization processing for libraries, so you should ensure finalization is still invoked in the expected way.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt-set-finalizer-mode.xml#qt6-set-finalizer-mode">qt_set_finalizer_mode()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
