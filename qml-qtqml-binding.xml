<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Binding QML Type</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Enables the arbitrary creation of property bindings.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Binding is part of <db:simplelist><db:member>qtquick-interceptors</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>In QML, property bindings result in a dependency between the properties of different objects.</db:para>
<db:section xml:id="binding-to-an-inaccessible-property">
<db:title>Binding to an Inaccessible Property</db:title>
<db:para>Sometimes it is necessary to bind an object's property to that of another object that isn't directly instantiated by QML, such as a property of a class exported to QML by C++. You can use the Binding type to establish this dependency; binding any value to any object's property.</db:para>
<db:para>For example, in a C++ application that maps an &quot;app.enteredText&quot; property into QML, you can use Binding to update the enteredText property.</db:para>
<db:programlisting language="qml">TextEdit { id: myTextField; text: &quot;Please type here...&quot; }
Binding { app.enteredText: myTextField.text }
</db:programlisting>
<db:para>When text changes, the C++ property enteredText will update automatically.</db:para>
</db:section>
<db:section xml:id="conditional-bindings">
<db:title>Conditional Bindings</db:title>
<db:para>In some cases you may want to modify the value of a property when a certain condition is met but leave it unmodified otherwise. Often, it's not possible to do this with direct bindings, as you have to supply values for all possible branches.</db:para>
<db:para>For example, the code snippet below results in a warning whenever you release the mouse. This is because the value of the binding is undefined when the mouse isn't pressed.</db:para>
<db:programlisting language="qml">// produces warning: &quot;Unable to assign [undefined] to double value&quot;
value: if (mouse.pressed) mouse.mouseX
</db:programlisting>
<db:para>The Binding type can prevent this warning.</db:para>
<db:programlisting language="qml">Binding on value {
    when: mouse.pressed
    value: mouse.mouseX
}
</db:programlisting>
<db:para>The Binding type restores any previously set direct bindings on the property.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-index.xml">Qt QML</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="delayed-prop">
<db:title>[since 5.8] delayed : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>delayed</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the binding should be delayed.</db:para>
<db:para>A delayed binding will not immediately update the target, but rather wait until the event queue has been cleared. This can be used as an optimization, or to prevent intermediary values from being assigned.</db:para>
<db:programlisting language="cpp">Binding {
    contactName.text.value: givenName + &quot; &quot; + familyName
    when: list.ListView.isCurrentItem
    delayed: true
}
</db:programlisting>
<db:note>
<db:para>Using the delayed property incurs a run time cost as the Binding element has to create a proxy for the value, so that it can delay its application to the actual target. When using the <db:link xlink:href="qml-qtqml-binding.xml#target-prop">target</db:link> and <db:link xlink:href="qml-qtqml-binding.xml#property-prop">property</db:link> properties, this cost is lower because the <db:link xlink:href="qml-qtqml-binding.xml#value-prop">value</db:link> property can be re-used as proxy. When using the form shown above, Binding will allocate a separate object with a dynamic meta-object to hold the proxy values.</db:para>
</db:note>
<db:para>This property was introduced in Qt 5.8.</db:para>
</db:section>
<db:section xml:id="property-prop">
<db:title>property : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>property</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The property to be updated.</db:para>
<db:para>This can be a group property if the expression results in accessing a property of a <db:link xlink:href="qtqml-typesystem-valuetypes.xml">value type</db:link>. For example:</db:para>
<db:programlisting language="qml">Item {
    id: item

    property rect rectangle: Qt.rect(0, 0, 200, 200)
}

Binding {
    target: item
    property: &quot;rectangle.x&quot;
    value: 100
}
</db:programlisting>
<db:para>You only need to use this property if you can't supply the binding target declaratively. The following snippet of code is equivalent to the above binding, but more compact:</db:para>
<db:programlisting language="qml">Binding { item.rectangle.x: 100 }
</db:programlisting>
</db:section>
<db:section xml:id="restoreMode-prop">
<db:title>[since 5.14] restoreMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>restoreMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property can be used to describe if and how the original value should be restored when the binding is disabled.</db:para>
<db:para>The possible values are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Binding.RestoreNone The original value is not restored at all</db:para>
</db:listitem>
<db:listitem>
<db:para>Binding.RestoreBinding The original value is restored if it was another binding. In that case the old binding is in effect again.</db:para>
</db:listitem>
<db:listitem>
<db:para>Binding.RestoreValue The original value is restored if it was a plain value rather than a binding.</db:para>
</db:listitem>
<db:listitem>
<db:para>Binding.RestoreBindingOrValue The original value is always restored.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The default value is Binding.RestoreBindingOrValue.</db:para>
<db:note>
<db:para>This property exists for backwards compatibility with earlier versions of Qt. Don't use it in new code.</db:para>
</db:note>
<db:para>This property was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="target-prop">
<db:title>target : QtObject</db:title>
<db:fieldsynopsis>
<db:type>QtObject</db:type>
<db:varname>target</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The object to be updated. You only need to use this property if you can't supply the binding target declaratively. The following two pieces of code are equivalent.</db:para>
<db:programlisting language="qml">Binding { contactName.text: name }
</db:programlisting>
<db:programlisting language="qml">Binding {
    target: contactName
    property: &quot;text&quot;
    value: name
}
</db:programlisting>
<db:para>The former one is much more compact, but you cannot replace the target object or property at run time. With the latter one you can.</db:para>
</db:section>
<db:section xml:id="value-prop">
<db:title>value : var</db:title>
<db:fieldsynopsis>
<db:type>var</db:type>
<db:varname>value</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The value to be set on the target object and property. This can be a constant (which isn't very useful), or a bound expression.</db:para>
<db:para>You only need to use this property if you can't supply the binding target declaratively. Otherwise you can directly bind to the target.</db:para>
</db:section>
<db:section xml:id="when-prop">
<db:title>when : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>when</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds when the binding is active. This should be set to an expression that evaluates to true when you want the binding to be active.</db:para>
<db:programlisting language="qml">Binding {
    contactName.text: name
    when: list.ListView.isCurrentItem
}
</db:programlisting>
<db:para>By default, any binding or value that was set perviously is restored when the binding becomes inactive. You can customize the restoration behavior using the <db:link xlink:href="qml-qtqml-binding.xml#restoreMode-prop">restoreMode</db:link> property.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-binding.xml#restoreMode-prop">restoreMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
