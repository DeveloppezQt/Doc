<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Binding QML Type</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Enables the arbitrary creation of property bindings.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQml 2.11</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Binding is part of <db:simplelist><db:member>qtquick-interceptors</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>In QML, property bindings result in a dependency between the properties of different objects.</db:para>
<db:section xml:id="binding-to-an-inaccessible-property">
<db:title>Binding to an Inaccessible Property</db:title>
<db:para>Sometimes it is necessary to bind an object's property to that of another object that isn't directly instantiated by QML, such as a property of a class exported to QML by C++. You can use the Binding type to establish this dependency; binding any value to any object's property.</db:para>
<db:para>For example, in a C++ application that maps an &quot;app.enteredText&quot; property into QML, you can use Binding to update the enteredText property.</db:para>
<db:programlisting language="cpp">TextEdit { id: myTextField; text: &quot;Please type here...&quot; }
Binding { target: app; property: &quot;enteredText&quot;; value: myTextField.text }
</db:programlisting>
<db:para>When text changes, the C++ property enteredText will update automatically.</db:para>
</db:section>
<db:section xml:id="conditional-bindings">
<db:title>Conditional Bindings</db:title>
<db:para>In some cases you may want to modify the value of a property when a certain condition is met but leave it unmodified otherwise. Often, it's not possible to do this with direct bindings, as you have to supply values for all possible branches.</db:para>
<db:para>For example, the code snippet below results in a warning whenever you release the mouse. This is because the value of the binding is undefined when the mouse isn't pressed.</db:para>
<db:programlisting language="qml">// produces warning: &quot;Unable to assign [undefined] to double value&quot;
value: if (mouse.pressed) mouse.mouseX
</db:programlisting>
<db:para>The Binding type can prevent this warning.</db:para>
<db:programlisting language="qml">Binding on value {
    when: mouse.pressed
    value: mouse.mouseX
}
</db:programlisting>
<db:para>The Binding type restores any previously set direct bindings on the property.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-index.xml">Qt QML</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="delayed-prop">
<db:title>[since 5.8] delayed : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>delayed</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the binding should be delayed.</db:para>
<db:para>A delayed binding will not immediately update the target, but rather wait until the event queue has been cleared. This can be used as an optimization, or to prevent intermediary values from being assigned.</db:para>
<db:programlisting language="cpp">Binding {
    target: contactName; property: 'text'
    value: givenName + &quot; &quot; + familyName; when: list.ListView.isCurrentItem
    delayed: true
}
</db:programlisting>
<db:para>This property was introduced in Qt 5.8.</db:para>
</db:section>
<db:section xml:id="property-prop">
<db:title>property : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>property</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The property to be updated.</db:para>
<db:para>This can be a group property if the expression results in accessing a property of a <db:link xlink:href="qtqml-typesystem-basictypes.xml">value type</db:link>. For example:</db:para>
<db:programlisting language="qml">Item {
    id: item

    property rect rectangle: Qt.rect(0, 0, 200, 200)
}

Binding {
    target: item
    property: &quot;rectangle.x&quot;
    value: 100
}
</db:programlisting>
</db:section>
<db:section xml:id="target-prop">
<db:title>target : Object</db:title>
<db:fieldsynopsis>
<db:type>Object</db:type>
<db:varname>target</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The object to be updated.</db:para>
</db:section>
<db:section xml:id="value-prop">
<db:title>value : any</db:title>
<db:fieldsynopsis>
<db:type>any</db:type>
<db:varname>value</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The value to be set on the target object and property. This can be a constant (which isn't very useful), or a bound expression.</db:para>
</db:section>
<db:section xml:id="when-prop">
<db:title>when : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>when</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds when the binding is active. This should be set to an expression that evaluates to true when you want the binding to be active.</db:para>
<db:programlisting language="cpp">Binding {
    target: contactName; property: 'text'
    value: name; when: list.ListView.isCurrentItem
}
</db:programlisting>
<db:para>When the binding becomes inactive again, any direct bindings that were previously set on the property will be restored.</db:para>
</db:section>
</db:section>
</db:article>
