<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGraphicsSvgItem Class</db:title>
<db:productname>QtSvg</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SVG Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicssvgitem.xml">QGraphicsSvgItem</db:link> class is a <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> that can be used to render the contents of SVG files.</db:para>
<db:para>This class was introduced in Qt 4.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsSvgItem</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += svg</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsobject.xml" xlink:role="class">QGraphicsObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsSvgItem is part of <db:simplelist><db:member>graphicsview-api</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qgraphicssvgitem.xml">QGraphicsSvgItem</db:link> provides a way of rendering SVG files onto <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>. <db:link xlink:href="qgraphicssvgitem.xml">QGraphicsSvgItem</db:link> can be created by passing the SVG file to be rendered to its constructor or by explicit setting a shared <db:link xlink:href="qsvgrenderer.xml">QSvgRenderer</db:link> on it.</db:para>
<db:para>Note that setting <db:link xlink:href="qsvgrenderer.xml">QSvgRenderer</db:link> on a <db:link xlink:href="qgraphicssvgitem.xml">QGraphicsSvgItem</db:link> doesn't make the item take ownership of the renderer, therefore if using <db:link xlink:href="qgraphicssvgitem.xml#setSharedRenderer">setSharedRenderer</db:link>() method one has to make sure that the lifetime of the <db:link xlink:href="qsvgrenderer.xml">QSvgRenderer</db:link> object will be at least as long as that of the <db:link xlink:href="qgraphicssvgitem.xml">QGraphicsSvgItem</db:link>.</db:para>
<db:para><db:link xlink:href="qgraphicssvgitem.xml">QGraphicsSvgItem</db:link> provides a way of rendering only parts of the SVG files via the <db:link xlink:href="qgraphicssvgitem.xml#setElementId">setElementId</db:link>. If <db:link xlink:href="qgraphicssvgitem.xml#setElementId">setElementId</db:link>() method is called, only the SVG element (and its children) with the passed id will be renderer. This provides a convenient way of selectively rendering large SVG files that contain a number of discrete elements. For example the following code renders only jokers from a SVG file containing a whole card deck:</db:para>
<db:programlisting language="cpp">QSvgRenderer *renderer = new QSvgRenderer(QLatin1String(&quot;SvgCardDeck.svg&quot;));
QGraphicsSvgItem *black = new QGraphicsSvgItem();
QGraphicsSvgItem *red   = new QGraphicsSvgItem();

black-&gt;setSharedRenderer(renderer);
black-&gt;setElementId(QLatin1String(&quot;black_joker&quot;));

red-&gt;setSharedRenderer(renderer);
red-&gt;setElementId(QLatin1String(&quot;red_joker&quot;));
</db:programlisting>
<db:para>Size of the item can be set via the <db:link xlink:href="qrectf.xml#setSize">setSize</db:link>() method of the <db:link xlink:href="qgraphicssvgitem.xml#boundingRect">bounding rectangle</db:link> or via direct manipulation of the items transformation matrix.</db:para>
<db:para>By default the SVG rendering is cached using <db:link xlink:href="qgraphicsitem.xml#CacheMode-enum">QGraphicsItem::DeviceCoordinateCache</db:link> mode to speedup the display of items. Caching can be disabled by passing <db:link xlink:href="qgraphicsitem.xml#CacheMode-enum">QGraphicsItem::NoCache</db:link> to the <db:link xlink:href="qgraphicsitem.xml#setCacheMode">QGraphicsItem::setCacheMode</db:link>() method.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsvgwidget.xml">QSvgWidget</db:link></db:member>
<db:member><db:link xlink:href="qtsvg-module.xml">Qt SVG C++ Classes</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="elementId-prop">
<db:title>[since 4.6] elementId : QString</db:title>
<db:para>This property holds the element's XML ID.</db:para>
<db:para>This property was introduced in Qt 4.6.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qgraphicssvgitem.xml#elementId">elementId</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qgraphicssvgitem.xml#setElementId">setElementId</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>id</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maximumCacheSize-prop">
<db:title>[since 4.6] maximumCacheSize : QSize</db:title>
<db:para>This property holds the maximum size of the device coordinate cache for this item.</db:para>
<db:para>This property was introduced in Qt 4.6.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qgraphicssvgitem.xml#maximumCacheSize">maximumCacheSize</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qgraphicssvgitem.xml#setMaximumCacheSize">setMaximumCacheSize</db:link></db:emphasis>(const <db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> &amp;<db:emphasis>size</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGraphicsSvgItem">
<db:title>QGraphicsSvgItem::QGraphicsSvgItem(QGraphicsItem *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a new SVG item with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QGraphicsSvgItem-1">
<db:title>QGraphicsSvgItem::QGraphicsSvgItem(const QString &amp;<db:emphasis>fileName</db:emphasis>, QGraphicsItem *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a new item with the given <db:code role="parameter">parent</db:code> and loads the contents of the SVG file with the specified <db:code role="parameter">fileName</db:code>.</db:para>
</db:section>
<db:section xml:id="boundingRect">
<db:title>[override virtual] QRectF QGraphicsSvgItem::boundingRect() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#boundingRect" role="function">QGraphicsItem::boundingRect() const</db:link>.</db:para>
<db:para>Returns the bounding rectangle of this item.</db:para>
</db:section>
<db:section xml:id="elementId">
<db:title>QString QGraphicsSvgItem::elementId() const</db:title>
<db:para>Returns the XML ID the element that is currently being rendered. Returns an empty string if the whole file is being rendered.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qgraphicssvgitem.xml#elementId-prop">elementId</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicssvgitem.xml#setElementId">setElementId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumCacheSize">
<db:title>QSize QGraphicsSvgItem::maximumCacheSize() const</db:title>
<db:para>Returns the current maximum size of the device coordinate cache for this item. If the item is cached using <db:link xlink:href="qgraphicsitem.xml#CacheMode-enum">QGraphicsItem::DeviceCoordinateCache</db:link> mode, caching is bypassed if the extension of the item in device coordinates is larger than the maximum size.</db:para>
<db:para>The default maximum cache size is 1024x768. <db:link xlink:href="qpixmapcache.xml#cacheLimit">QPixmapCache::cacheLimit</db:link>() gives the cumulative bounds of the whole cache, whereas maximumCacheSize() refers to a maximum cache size for this particular item.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qgraphicssvgitem.xml#maximumCacheSize-prop">maximumCacheSize</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicssvgitem.xml#setMaximumCacheSize">setMaximumCacheSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#cacheMode">QGraphicsItem::cacheMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paint">
<db:title>[override virtual] void QGraphicsSvgItem::paint(QPainter *<db:emphasis>painter</db:emphasis>, const QStyleOptionGraphicsItem *<db:emphasis>option</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#paint" role="function">QGraphicsItem::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)</db:link>.</db:para>
</db:section>
<db:section xml:id="renderer">
<db:title>QSvgRenderer *QGraphicsSvgItem::renderer() const</db:title>
<db:para>Returns the currently use <db:link xlink:href="qsvgrenderer.xml">QSvgRenderer</db:link>.</db:para>
</db:section>
<db:section xml:id="setElementId">
<db:title>void QGraphicsSvgItem::setElementId(const QString &amp;<db:emphasis>id</db:emphasis>)</db:title>
<db:para>Sets the XML ID of the element to <db:code role="parameter">id</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qgraphicssvgitem.xml#elementId-prop">elementId</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicssvgitem.xml#elementId">elementId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMaximumCacheSize">
<db:title>void QGraphicsSvgItem::setMaximumCacheSize(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>Sets the maximum device coordinate cache size of the item to <db:code role="parameter">size</db:code>. If the item is cached using <db:link xlink:href="qgraphicsitem.xml#CacheMode-enum">QGraphicsItem::DeviceCoordinateCache</db:link> mode, caching is bypassed if the extension of the item in device coordinates is larger than <db:code role="parameter">size</db:code>.</db:para>
<db:para>The cache corresponds to the <db:link xlink:href="qpixmap.xml">QPixmap</db:link> which is used to cache the results of the rendering. Use <db:link xlink:href="qpixmapcache.xml#setCacheLimit">QPixmapCache::setCacheLimit</db:link>() to set limitations on the whole cache and use setMaximumCacheSize() when setting cache size for individual items.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qgraphicssvgitem.xml#maximumCacheSize-prop">maximumCacheSize</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicssvgitem.xml#maximumCacheSize">maximumCacheSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#cacheMode">QGraphicsItem::cacheMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSharedRenderer">
<db:title>void QGraphicsSvgItem::setSharedRenderer(QSvgRenderer *<db:emphasis>renderer</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">renderer</db:code> to be a shared <db:link xlink:href="qsvgrenderer.xml">QSvgRenderer</db:link> on the item. By using this method one can share the same <db:link xlink:href="qsvgrenderer.xml">QSvgRenderer</db:link> on a number of items. This means that the SVG file will be parsed only once. <db:link xlink:href="qsvgrenderer.xml">QSvgRenderer</db:link> passed to this method has to exist for as long as this item is used.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>[override virtual] int QGraphicsSvgItem::type() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#type" role="function">QGraphicsItem::type() const</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QGraphicsSvgItem</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qgraphicssvgitem.xml">QGraphicsSvgItem</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="isCachingEnabled">
<db:title>[deprecated] bool QGraphicsSvgItem::isCachingEnabled() const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qgraphicsitem.xml#cacheMode">QGraphicsItem::cacheMode</db:link>() instead.</db:para>
</db:section>
<db:section xml:id="setCachingEnabled">
<db:title>[deprecated] void QGraphicsSvgItem::setCachingEnabled(bool <db:emphasis>caching</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qgraphicsitem.xml#setCacheMode">QGraphicsItem::setCacheMode</db:link>() instead. Passing true to this function is equivalent to <db:link xlink:href="qgraphicsitem.xml#setCacheMode">QGraphicsItem::setCacheMode</db:link>(<db:link xlink:href="qgraphicsitem.xml#CacheMode-enum">QGraphicsItem::DeviceCoordinateCache</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicssvgitem.xml#isCachingEnabled">isCachingEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
