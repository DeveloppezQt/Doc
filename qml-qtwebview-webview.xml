<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebView QML Type</db:title>
<db:productname>QtWebView</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebView Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A component for displaying web content.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtWebView 1.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>WebView is part of <db:simplelist><db:member>qtwebview</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtwebview-webview.xml">WebView</db:link> is a component for displaying web content which is implemented using native APIs on the platforms where this is available, thus it does not necessarily require including a full web browser stack as part of the application.</db:para>
<db:para>To make the Qt <db:link xlink:href="qml-qtwebview-webview.xml">WebView</db:link> module function correctly across all platforms, it is necessary to call <db:link xlink:href="qtwebview.xml#initialize">QtWebView::initialize</db:link>() right after creating the <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> instance.</db:para>
<db:note>
<db:para>Due to platform limitations overlapping the <db:link xlink:href="qml-qtwebview-webview.xml">WebView</db:link> and other QML components is not supported.</db:para>
</db:note>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="canGoBack-prop">
<db:title>[read-only] canGoBack : bool</db:title>
<db:para>Holds <db:code>true</db:code> if it's currently possible to navigate back in the web history.</db:para>
</db:section>
<db:section xml:id="canGoForward-prop">
<db:title>[read-only] canGoForward : bool</db:title>
<db:para>Holds <db:code>true</db:code> if it's currently possible to navigate forward in the web history.</db:para>
</db:section>
<db:section xml:id="loadProgress-prop">
<db:title>[read-only] loadProgress : int</db:title>
<db:para>The current load progress of the web content, represented as an integer between 0 and 100.</db:para>
</db:section>
<db:section xml:id="loading-prop">
<db:title>[read-only] loading : bool</db:title>
<db:para>Holds <db:code>true</db:code> if the <db:link xlink:href="qml-qtwebview-webview.xml">WebView</db:link> is currently in the process of loading new content, <db:code>false</db:code> otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebview-webview.xml#loadingChanged-signal">loadingChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="title-prop">
<db:title>[read-only] title : string</db:title>
<db:para>The title of the currently loaded web page.</db:para>
</db:section>
<db:section xml:id="url-prop">
<db:title>url : url</db:title>
<db:para>The URL of currently loaded web page. Changing this will trigger loading new content.</db:para>
<db:para>The URL is used as-is. URLs that originate from user input should be parsed with <db:link xlink:href="qurl.xml#fromUserInput">QUrl::fromUserInput</db:link>().</db:para>
<db:note>
<db:para>The <db:link xlink:href="qml-qtwebview-webview.xml">WebView</db:link> does not support loading content through the Qt Resource system.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="loadingChanged-signal">
<db:title>loadingChanged(WebViewLoadRequest <db:emphasis>loadRequest</db:emphasis>)</db:title>
<db:para>This signal is emitted when the state of loading the web content changes. By handling this signal it's possible, for example, to react to page load errors.</db:para>
<db:para>The <db:code role="parameter">loadRequest</db:code> parameter holds the <db:emphasis>url</db:emphasis> and <db:emphasis>status</db:emphasis> of the request, as well as an <db:emphasis>errorString</db:emphasis> containing an error message for a failed request.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onLoadingChanged</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebview-webviewloadrequest.xml">WebViewLoadRequest</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="goBack-method">
<db:title>void goBack()</db:title>
<db:para>Navigates back in the web history.</db:para>
</db:section>
<db:section xml:id="goForward-method">
<db:title>void goForward()</db:title>
<db:para>Navigates forward in the web history.</db:para>
</db:section>
<db:section xml:id="loadHtml-method">
<db:title>void loadHtml(string <db:emphasis>html</db:emphasis>, url <db:emphasis>baseUrl</db:emphasis>)</db:title>
<db:para>Loads the specified <db:code role="parameter">html</db:code> content to the web view.</db:para>
<db:para>This method offers a lower-level alternative to the <db:link xlink:href="qml-qtwebview-webview.xml#url-prop">url</db:link> property, which references HTML pages via URL.</db:para>
<db:para>External objects such as stylesheets or images referenced in the HTML document should be located relative to <db:code role="parameter">baseUrl</db:code>. For example, if <db:code role="parameter">html</db:code> is retrieved from <db:code>http://www.example.com/documents/overview.html</db:code>, which is the base URL, then an image referenced with the relative url, <db:code>diagram.png</db:code>, should be at <db:code>http://www.example.com/documents/diagram.png</db:code>.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qml-qtwebview-webview.xml">WebView</db:link> does not support loading content through the Qt Resource system.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebview-webview.xml#url-prop">url</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reload-method">
<db:title>void reload()</db:title>
<db:para>Reloads the current <db:link xlink:href="qml-qtwebview-webview.xml#url-prop">url</db:link>.</db:para>
</db:section>
<db:section xml:id="runJavaScript-method">
<db:title>void runJavaScript(string <db:emphasis>script</db:emphasis>, variant <db:emphasis>callback</db:emphasis>)</db:title>
<db:para>Runs the specified JavaScript. In case a <db:code role="parameter">callback</db:code> function is provided, it will be invoked after the <db:code role="parameter">script</db:code> finished running.</db:para>
<db:programlisting language="cpp" role="bad">runJavaScript(&quot;document.title&quot;, function(result) { console.log(result); });
</db:programlisting>
</db:section>
<db:section xml:id="stop-method">
<db:title>void stop()</db:title>
<db:para>Stops loading the current <db:link xlink:href="qml-qtwebview-webview.xml#url-prop">url</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
