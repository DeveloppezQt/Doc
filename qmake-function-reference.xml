<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Replace Functions</db:title>
<db:productname>QMake</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>QMake Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qmake-variable-reference.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Variables"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qmake-test-function-reference.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Test Functions"/></db:extendedlink>
<db:abstract>
<db:para>QMake Manual.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>{qmake Manual}{Contents}</db:para>
<db:para>qmake provides functions for processing the contents of variables during the configuration process. These functions are called <db:emphasis>replace functions</db:emphasis>. Typically, they return values that you can assign to other variables. You can obtain these values by prefixing a function with the <db:code>$$</db:code> operator. Replace functions can be divided into built-in functions and function libraries.</db:para>
<db:para>See also <db:link xlink:href="qmake-test-function-reference.xml">Test Functions</db:link>.</db:para>
<db:section xml:id="built-in-replace-functions">
<db:title>Built-in Replace Functions</db:title>
<db:para>Basic replace functions are implemented as built-in functions.</db:para>
<db:section xml:id="absolute-path-path-base">
<db:title>absolute_path(path[, base])</db:title>
<db:para>Returns the absolute path of <db:code>path</db:code>.</db:para>
<db:para>If <db:code>base</db:code> is not specified, uses the current directory as the base directory.</db:para>
<db:para>For example, the following call returns the string <db:code>&quot;/home/johndoe/myproject/readme.txt&quot;</db:code>:</db:para>
<db:programlisting language="cpp">message($$absolute_path(&quot;readme.txt&quot;, &quot;/home/johndoe/myproject&quot;))
</db:programlisting>
<db:para>See also <db:link xlink:href="qmake-function-reference.xml#clean-path-path">clean_path()</db:link>, <db:link xlink:href="qmake-function-reference.xml#relative-path-filepath-base">relative_path()</db:link>.</db:para>
</db:section>
<db:section xml:id="basename-variablename">
<db:title>basename(variablename)</db:title>
<db:para>Returns the basename of the file specified in <db:code>variablename</db:code>.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">FILE = /etc/passwd
FILENAME = $$basename(FILE) #passwd
</db:programlisting>
</db:section>
<db:section xml:id="cat-filename-mode">
<db:title>cat(filename[, mode])</db:title>
<db:para>Returns the contents of <db:code>filename</db:code>. You can specify the following options for <db:code>mode</db:code>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>blob</db:code> returns the entire contents of the file as one value</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>lines</db:code> returns each line as a separate value (without line endings)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>true</db:code> (default value) and <db:code>false</db:code> return file contents as separate values, split according to qmake value list splitting rules (as in variable assignments). If <db:code>mode</db:code> is <db:code>false</db:code>, values that contain only a newline character are inserted into the list to indicate where line breaks were in the file.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="clean-path-path">
<db:title>clean_path(path)</db:title>
<db:para>Returns <db:code>path</db:code> with directory separators normalized (converted to &quot;/&quot;) and redundant ones removed, and &quot;.&quot;s and &quot;..&quot;s resolved (as far as possible). This function is a wrapper around <db:link xlink:href="qdir.xml#cleanPath">QDir::cleanPath</db:link>.</db:para>
<db:para>See also <db:link xlink:href="qmake-function-reference.xml#absolute-path-path-base">absolute_path()</db:link>, <db:link xlink:href="qmake-function-reference.xml#relative-path-filepath-base">relative_path()</db:link>, <db:link xlink:href="qmake-function-reference.xml#shell-path-path">shell_path()</db:link>, <db:link xlink:href="qmake-function-reference.xml#system-path-path">system_path()</db:link>.</db:para>
</db:section>
<db:section xml:id="dirname-file">
<db:title>dirname(file)</db:title>
<db:para>Returns the directory name part of the specified file. For example:</db:para>
<db:programlisting language="cpp">FILE = /etc/X11R6/XF86Config
DIRNAME = $$dirname(FILE) #/etc/X11R6
</db:programlisting>
</db:section>
<db:section xml:id="enumerate-vars">
<db:title>enumerate_vars</db:title>
<db:para>Returns a list of all defined variable names.</db:para>
</db:section>
<db:section xml:id="escape-expand-arg1-arg2-argn">
<db:title>escape_expand(arg1 [, arg2 ..., argn])</db:title>
<db:para>Accepts an arbitrary number of arguments. It expands the escape sequences <db:code>\n</db:code>, <db:code>\r</db:code>, <db:code>\t</db:code> for each argument and returns the arguments as a list.</db:para>
<db:note>
<db:para>If you specify the string to expand literally, you need to escape the backslashes, as illustrated by the following code snippet:</db:para>
</db:note>
<db:programlisting language="cpp">message(&quot;First line$$escape_expand(\\n)Second line&quot;)
</db:programlisting>
<db:anchor xml:id="findfunction"/>
</db:section>
<db:section xml:id="find-variablename-substr">
<db:title>find(variablename, substr)</db:title>
<db:para>Returns all the values in <db:code>variablename</db:code> that match the regular expression <db:code>substr</db:code>.</db:para>
<db:programlisting language="cpp">MY_VAR = one two three four
MY_VAR2 = $$join(MY_VAR, &quot; -L&quot;, -L) -Lfive
MY_VAR3 = $$member(MY_VAR, 2) $$find(MY_VAR, t.*)
</db:programlisting>
<db:para>MY_VAR2 will contain '-Lone -Ltwo -Lthree -Lfour -Lfive', and MY_VAR3 will contain 'three two three'.</db:para>
</db:section>
<db:section xml:id="first-variablename">
<db:title>first(variablename)</db:title>
<db:para>Returns the first value of <db:code>variablename</db:code>.</db:para>
<db:para>For example, the following call returns <db:code>firstname</db:code>:</db:para>
<db:programlisting language="cpp">CONTACT = firstname middlename surname phone
message($$first(CONTACT))
</db:programlisting>
<db:para>See also <db:link xlink:href="qmake-function-reference.xml#last-variablename">last()</db:link>.</db:para>
</db:section>
<db:section xml:id="format-number-number-options">
<db:title>format_number(number[, options...])</db:title>
<db:para>Returns <db:code>number</db:code> in the format specified by <db:code>options</db:code>. You can specify the following options:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>ibase=n</db:code> sets the base of the input to <db:code>n</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>obase=n</db:code> sets the base of the output to <db:code>n</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>width=n</db:code> sets the minimum width of the output to <db:code>n</db:code>. If the output is shorter than <db:code>width</db:code>, it is padded with spaces</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>zeropad</db:code> pads the output with zeroes instead of spaces</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>padsign</db:code> prepends a space to positive values in the output</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>alwayssign</db:code> prepends a plus sign to positive values in the output</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>leftalign</db:code> places the padding to the right of the value in the output</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Floating-point numbers are currently not supported.</db:para>
<db:para>For example, the following call converts the hexadecimal number <db:code>BAD</db:code> to <db:code>002989</db:code>:</db:para>
<db:programlisting language="cpp">message($$format_number(BAD, ibase=16 width=6 zeropad))
</db:programlisting>
</db:section>
<db:section xml:id="fromfile-filename-variablename">
<db:title>fromfile(filename, variablename)</db:title>
<db:para>Evaluates <db:code>filename</db:code> as a qmake project file and returns the value assigned to <db:code>variablename</db:code>.</db:para>
<db:para>See also <db:link xlink:href="qmake-test-function-reference.xml#infile-filename-var-val">infile()</db:link>.</db:para>
</db:section>
<db:section xml:id="getenv-variablename">
<db:title>getenv(variablename)</db:title>
<db:para>Returns the value of the environment variable <db:code>variablename</db:code>. This is mostly equivalent to the <db:code>$$(variablename)</db:code> syntax. The <db:code>getenv</db:code> function, however, supports environment variables with parentheses in their name.</db:para>
</db:section>
<db:section xml:id="join-variablename-glue-before-after">
<db:title>join(variablename, glue, before, after)</db:title>
<db:para>Joins the value of <db:code>variablename</db:code> with <db:code>glue</db:code>. If this value is not empty, this function prefixes the value with <db:code>before</db:code> and suffixes it with <db:code>after</db:code>. <db:code>variablename</db:code> is the only required field, the others default to empty strings. If you need to encode spaces in <db:code>glue</db:code>, <db:code>before</db:code>, or <db:code>after</db:code>, you must quote them.</db:para>
</db:section>
<db:section xml:id="last-variablename">
<db:title>last(variablename)</db:title>
<db:para>Returns the last value of <db:code>variablename</db:code>.</db:para>
<db:para>For example, the following call returns <db:code>phone</db:code>:</db:para>
<db:programlisting language="cpp">CONTACT = firstname middlename surname phone
message($$last(CONTACT))
</db:programlisting>
<db:para>See also <db:link xlink:href="qmake-function-reference.xml#first-variablename">first()</db:link>.</db:para>
</db:section>
<db:section xml:id="list-arg1-arg2-argn">
<db:title>list(arg1 [, arg2 ..., argn])</db:title>
<db:para>Takes an arbitrary number of arguments. It creates a uniquely named variable that contains a list of the arguments, and returns the name of that variable. You can use the variable to write a loop as illustrated by the following code snippet</db:para>
<db:programlisting language="cpp">for(var, $$list(foo bar baz)) {
    ...
}
</db:programlisting>
<db:para>instead of:</db:para>
<db:programlisting language="cpp">values = foo bar baz
for(var, values) {
    ...
}
</db:programlisting>
</db:section>
<db:section xml:id="lower-arg1-arg2-argn">
<db:title>lower(arg1 [, arg2 ..., argn])</db:title>
<db:para>Takes an arbitrary number of arguments and converts them to lower case.</db:para>
<db:para>See also <db:link xlink:href="qmake-function-reference.xml#upper-arg1-arg2-argn">upper()</db:link>.</db:para>
</db:section>
<db:section xml:id="member-variablename-position">
<db:title>member(variablename, position)</db:title>
<db:para>Returns the value at the given <db:code>position</db:code> in the list of items in <db:code>variablename</db:code>. If an item cannot be found at the position specified, an empty string is returned. <db:code>variablename</db:code> is the only required field. If not specified, <db:code>position</db:code> defaults to 0, causing the first value in the list to be returned.</db:para>
</db:section>
<db:section xml:id="prompt-question">
<db:title>prompt(question)</db:title>
<db:para>Displays the specified <db:code>question</db:code>, and returns a value read from stdin.</db:para>
</db:section>
<db:section xml:id="quote-string">
<db:title>quote(string)</db:title>
<db:para>Converts a whole <db:code>string</db:code> into a single entity and returns the result. This is just a fancy way of enclosing the string into double quotes.</db:para>
</db:section>
<db:section xml:id="re-escape-string">
<db:title>re_escape(string)</db:title>
<db:para>Returns the <db:code>string</db:code> with every special regular expression character escaped with a backslash. This function is a wrapper around <db:link xlink:href="qregexp.xml#escape">QRegExp::escape</db:link>.</db:para>
</db:section>
<db:section xml:id="relative-path-filepath-base">
<db:title>relative_path(filePath[, base])</db:title>
<db:para>Returns the path to <db:code>filePath</db:code> relative to <db:code>base</db:code>. If <db:code>base</db:code> is not specified, it is the current project directory. This function is a wrapper around <db:link xlink:href="qdir.xml#relativeFilePath">QDir::relativeFilePath</db:link>.</db:para>
<db:para>See also <db:link xlink:href="qmake-function-reference.xml#absolute-path-path-base">absolute_path()</db:link>, <db:link xlink:href="qmake-function-reference.xml#clean-path-path">clean_path()</db:link>.</db:para>
</db:section>
<db:section xml:id="replace-string-old-string-new-string">
<db:title>replace(string, old_string, new_string)</db:title>
<db:para>Replaces each instance of <db:code>old_string</db:code> with <db:code>new_string</db:code> in the contents of the variable supplied as <db:code>string</db:code>. For example, the code</db:para>
<db:programlisting language="cpp">MESSAGE = This is a tent.
message($$replace(MESSAGE, tent, test))
</db:programlisting>
<db:para>prints the message:</db:para>
<db:programlisting language="cpp">This is a test.
</db:programlisting>
</db:section>
<db:section xml:id="sprintf-string-arguments">
<db:title>sprintf(string, arguments...)</db:title>
<db:para>Replaces %1-%9 with the arguments passed in the comma-separated list of function <db:code>arguments</db:code> and returns the processed string.</db:para>
</db:section>
<db:section xml:id="resolve-depends-variablename-prefix">
<db:title>resolve_depends(variablename, prefix)</db:title>
<db:para>This is an internal function that you will typically not need.</db:para>
</db:section>
<db:section xml:id="reverse-variablename">
<db:title>reverse(variablename)</db:title>
<db:para>Returns the values of <db:code>variablename</db:code> in reverse order.</db:para>
</db:section>
<db:section xml:id="section-variablename-separator-begin-end">
<db:title>section(variablename, separator, begin, end)</db:title>
<db:para>Returns a section of the value of <db:code>variablename</db:code>. This function is a wrapper around <db:link xlink:href="qstring.xml#section">QString::section</db:link>.</db:para>
<db:para>For example, the following call outputs <db:code>surname</db:code>:</db:para>
<db:programlisting language="cpp">CONTACT = firstname:middlename:surname:phone
message($$section(CONTACT, :, 2, 2))
</db:programlisting>
</db:section>
<db:section xml:id="shadowed-path">
<db:title>shadowed(path)</db:title>
<db:para>Maps the path from the project source directory to the build directory. This function returns <db:code>path</db:code> for in-source builds. It returns an empty string if <db:code>path</db:code> points outside of the source tree.</db:para>
</db:section>
<db:section xml:id="shell-path-path">
<db:title>shell_path(path)</db:title>
<db:para>Converts all directory separators within <db:code>path</db:code> to separators that are compatible with the shell that is used while building the project (that is, the shell that is invoked by the make tool). For example, slashes are converted to backslashes when the Windows shell is used.</db:para>
<db:para>See also <db:link xlink:href="qmake-function-reference.xml#system-path-path">system_path()</db:link>.</db:para>
</db:section>
<db:section xml:id="shell-quote-arg">
<db:title>shell_quote(arg)</db:title>
<db:para>Quotes <db:code>arg</db:code> for the shell that is used while building the project.</db:para>
<db:para>See also <db:link xlink:href="qmake-function-reference.xml#system-quote-arg">system_quote()</db:link>.</db:para>
</db:section>
<db:section xml:id="size-variablename">
<db:title>size(variablename)</db:title>
<db:para>Returns the number of values of <db:code>variablename</db:code>.</db:para>
</db:section>
<db:section xml:id="sort-depends-variablename-prefix">
<db:title>sort_depends(variablename, prefix)</db:title>
<db:para>This is an internal function that you will typically not need.</db:para>
</db:section>
<db:section xml:id="split-variablename-separator">
<db:title>split(variablename, separator)</db:title>
<db:para>Splits the value of <db:code>variablename</db:code> into separate values, and returns them as a list. This function is a wrapper around <db:link xlink:href="qstring.xml#split">QString::split</db:link>.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">CONTACT = firstname:middlename:surname:phone
message($$split(CONTACT, :))
</db:programlisting>
</db:section>
<db:section xml:id="system-command-mode">
<db:title>system(command[, mode])</db:title>
<db:para>You can use this variant of the <db:code>system</db:code> function to obtain stdout from the command and assign it to a variable.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">UNAME = $$system(uname -s)
contains( UNAME, [lL]inux ):message( This looks like Linux ($$UNAME) to me )
</db:programlisting>
<db:para>See also the test variant of <db:link xlink:href="qmake-test-function-reference.xml#system-command">system()</db:link>.</db:para>
</db:section>
<db:section xml:id="system-path-path">
<db:title>system_path(path)</db:title>
<db:para>Converts all directory separators within <db:code>path</db:code> to separators that are compatible with the shell that is used by the <db:code>system()</db:code> functions to invoke commands. For example, slashes are converted to backslashes for the Windows shell.</db:para>
<db:para>See also <db:link xlink:href="qmake-function-reference.xml#shell-path-path">shell_path()</db:link>.</db:para>
</db:section>
<db:section xml:id="system-quote-arg">
<db:title>system_quote(arg)</db:title>
<db:para>Quotes <db:code>arg</db:code> for the for the shell that is used by the <db:code>system()</db:code> functions.</db:para>
<db:para>See also <db:link xlink:href="qmake-function-reference.xml#shell-quote-arg">shell_quote()</db:link>.</db:para>
<db:anchor xml:id="unique"/>
</db:section>
<db:section xml:id="unique-variablename">
<db:title>unique(variablename)</db:title>
<db:para>Returns the list of values in <db:code>variablename</db:code> with duplicate entries removed. For example:</db:para>
<db:programlisting language="cpp">ARGS = 1 2 3 2 5 1
ARGS = $$unique(ARGS) #1 2 3 5
</db:programlisting>
</db:section>
<db:section xml:id="upper-arg1-arg2-argn">
<db:title>upper(arg1 [, arg2 ..., argn])</db:title>
<db:para>Takes an arbitrary number of arguments and converts them to upper case.</db:para>
<db:para>See also <db:link xlink:href="qmake-function-reference.xml#lower-arg1-arg2-argn">lower()</db:link>.</db:para>
</db:section>
<db:section xml:id="val-escape-variablename">
<db:title>val_escape(variablename)</db:title>
<db:para>Escapes the values of <db:code>variablename</db:code> in a way that enables parsing them as qmake code.</db:para>
</db:section>
</db:section>
</db:article>
