<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>const_iterator Class</db:title>
<db:subtitle>QFuture::const_iterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qfuture-const-iterator.xml">QFuture::const_iterator</db:link> class provides an STL-style const iterator for <db:link xlink:href="qfuture.xml">QFuture</db:link>.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>const_iterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qfuture.xml">QFuture</db:link> provides both <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link> and <db:link xlink:href="java-style-iterators.xml#java-style-iterators">Java-style iterators</db:link>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</db:para>
<db:para>The default <db:link xlink:href="qfuture-const-iterator.xml">QFuture::const_iterator</db:link> constructor creates an uninitialized iterator. You must initialize it using a <db:link xlink:href="qfuture.xml">QFuture</db:link> function like <db:link xlink:href="qfuture.xml#constBegin">QFuture::constBegin</db:link>() or <db:link xlink:href="qfuture.xml#constEnd">QFuture::constEnd</db:link>() before you start iterating. Here's a typical loop that prints all the results available in a future:</db:para>
<db:programlisting language="cpp">QFuture&lt;QString&gt; future = ...;

QFuture&lt;QString&gt;::const_iterator i;
for (i = future.constBegin(); i != future.constEnd(); ++i)
    cout &lt;&lt; qPrintable(*i) &lt;&lt; endl;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfutureiterator.xml">QFutureIterator</db:link></db:member>
<db:member><db:link xlink:href="qfuture.xml">QFuture</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="difference_type-typedef">
<db:title>const_iterator::difference_type</db:title>
<db:para>Typedef for ptrdiff_t. Provided for STL compatibility.</db:para>
</db:section>
<db:section xml:id="iterator_category-typedef">
<db:title>const_iterator::iterator_category</db:title>
<db:para>Typedef for std::bidirectional_iterator_tag. Provided for STL compatibility.</db:para>
</db:section>
<db:section xml:id="pointer-typedef">
<db:title>const_iterator::pointer</db:title>
<db:para>Typedef for const T *. Provided for STL compatibility.</db:para>
</db:section>
<db:section xml:id="reference-typedef">
<db:title>const_iterator::reference</db:title>
<db:para>Typedef for const T &amp;. Provided for STL compatibility.</db:para>
</db:section>
<db:section xml:id="value_type-typedef">
<db:title>const_iterator::value_type</db:title>
<db:para>Typedef for T. Provided for STL compatibility.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="const_iterator">
<db:title>const_iterator::const_iterator()</db:title>
<db:para>Constructs an uninitialized iterator.</db:para>
<db:para>Functions like operator*() and operator++() should not be called on an uninitialized iterartor. Use operator=() to assign a value to it before using it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfuture.xml#constBegin">QFuture::constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qfuture.xml#constEnd">QFuture::constEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="const_iterator-1">
<db:title>const_iterator::const_iterator(const QFuture&lt;T&gt;::const_iterator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2a">
<db:title>const T &amp;const_iterator::operator*() const</db:title>
<db:para>Returns the current result.</db:para>
</db:section>
<db:section xml:id="operator-2b">
<db:title>QFuture&lt;T&gt;::const_iterator const_iterator::operator+(int <db:emphasis>j</db:emphasis>) const</db:title>
<db:para>Returns an iterator to the results at <db:code role="parameter">j</db:code> positions forward from this iterator. (If <db:code role="parameter">j</db:code> is negative, the iterator goes backward.)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfuture-const-iterator.xml#operator-">operator-</db:link>()</db:member>
<db:member><db:link xlink:href="qfuture-const-iterator.xml#operator-2b-eq">operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b">
<db:title>QFuture&lt;T&gt;::const_iterator &amp;const_iterator::operator++()</db:title>
<db:para>The prefix ++ operator (++it) advances the iterator to the next result in the future and returns an iterator to the new current result.</db:para>
<db:para>Calling this function on <db:link xlink:href="qfuture.xml">QFuture</db:link>&lt;T&gt;::constEnd() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfuture-const-iterator.xml#operator--">operator--</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b-1">
<db:title>QFuture&lt;T&gt;::const_iterator const_iterator::operator++(<db:emphasis>int</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix ++ operator (it++) advances the iterator to the next result in the future and returns an iterator to the previously current result.</db:para>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>QFuture&lt;T&gt;::const_iterator &amp;const_iterator::operator+=(int <db:emphasis>j</db:emphasis>)</db:title>
<db:para>Advances the iterator by <db:code role="parameter">j</db:code> results. (If <db:code role="parameter">j</db:code> is negative, the iterator goes backward.)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfuture-const-iterator.xml#operator--eq">operator-=</db:link>()</db:member>
<db:member><db:link xlink:href="qfuture-const-iterator.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-">
<db:title>QFuture&lt;T&gt;::const_iterator const_iterator::operator-(int <db:emphasis>j</db:emphasis>) const</db:title>
<db:para>Returns an iterator to the result at <db:code role="parameter">j</db:code> positions backward from this iterator. (If <db:code role="parameter">j</db:code> is negative, the iterator goes forward.)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfuture-const-iterator.xml#operator-2b">operator+</db:link>()</db:member>
<db:member><db:link xlink:href="qfuture-const-iterator.xml#operator--eq">operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--">
<db:title>QFuture&lt;T&gt;::const_iterator &amp;const_iterator::operator--()</db:title>
<db:para>The prefix -- operator (--it) makes the preceding result current and returns an iterator to the new current result.</db:para>
<db:para>Calling this function on <db:link xlink:href="qfuture.xml">QFuture</db:link>&lt;T&gt;::constBegin() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfuture-const-iterator.xml#operator-2b-2b">operator++</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator---1">
<db:title>QFuture&lt;T&gt;::const_iterator const_iterator::operator--(<db:emphasis>int</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix -- operator (it--) makes the preceding result current and returns an iterator to the previously current result.</db:para>
</db:section>
<db:section xml:id="operator--eq">
<db:title>QFuture&lt;T&gt;::const_iterator &amp;const_iterator::operator-=(int <db:emphasis>j</db:emphasis>)</db:title>
<db:para>Makes the iterator go back by <db:code role="parameter">j</db:code> results. (If <db:code role="parameter">j</db:code> is negative, the iterator goes forward.)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfuture-const-iterator.xml#operator-2b-eq">operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qfuture-const-iterator.xml#operator-">operator-</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--gt">
<db:title>const T *const_iterator::operator-&gt;() const</db:title>
<db:para>Returns a pointer to the current result.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QFuture&lt;T&gt;::const_iterator &amp;const_iterator::operator=(const QFuture&lt;T&gt;::const_iterator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this iterator.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>[noexcept] bool operator!=(const QFuture&lt;T&gt;::const_iterator &amp;<db:emphasis>lhs</db:emphasis>, const QFuture&lt;T&gt;::const_iterator &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> points to a different result than <db:code role="parameter">rhs</db:code> iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfuture-const-iterator.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[noexcept] bool operator==(const QFuture&lt;T&gt;::const_iterator &amp;<db:emphasis>lhs</db:emphasis>, const QFuture&lt;T&gt;::const_iterator &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> points to the same result as <db:code role="parameter">rhs</db:code> iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfuture-const-iterator.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
