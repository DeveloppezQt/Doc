<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMatrix4x4 Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmatrix4x4.xml">QMatrix4x4</db:link> class represents a 4x4 transformation matrix in 3D space.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMatrix4x4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMatrix4x4 is part of <db:simplelist><db:member><db:link xlink:href="painting-3d.xml">Rendering in 3D</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qmatrix4x4.xml">QMatrix4x4</db:link> class in general is treated as a row-major matrix, in that the constructors and <db:link xlink:href="qmatrix4x4.xml#operator-28-29">operator</db:link>() functions take data in row-major format, as is familiar in C-style usage.</db:para>
<db:para>Internally the data is stored as column-major format, so as to be optimal for passing to OpenGL functions, which expect column-major data.</db:para>
<db:para>When using these functions be aware that they return data in <db:emphasis role="bold">column-major</db:emphasis> format:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmatrix4x4.xml#data">data</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmatrix4x4.xml#constData">constData</db:link>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml">QVector3D</db:link></db:member>
<db:member><db:link xlink:href="qgenericmatrix.xml">QGenericMatrix</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMatrix4x4">
<db:title>QMatrix4x4::QMatrix4x4()</db:title>
<db:constructorsynopsis>
<db:methodname>QMatrix4x4</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an identity matrix.</db:para>
</db:section>
<db:section xml:id="QMatrix4x4-2">
<db:title>[explicit] QMatrix4x4::QMatrix4x4(const float *<db:emphasis>values</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMatrix4x4</db:methodname>
<db:methodparam>
<db:type>const float *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4(const float *values)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a matrix from the given 16 floating-point <db:code role="parameter">values</db:code>. The contents of the array <db:code role="parameter">values</db:code> is assumed to be in row-major order.</db:para>
<db:para>If the matrix has a special type (identity, translate, scale, etc), the programmer should follow this constructor with a call to <db:link xlink:href="qmatrix4x4.xml#optimize">optimize</db:link>() if they wish <db:link xlink:href="qmatrix4x4.xml">QMatrix4x4</db:link> to optimize further calls to <db:link xlink:href="qmatrix4x4.xml#translate">translate</db:link>(), <db:link xlink:href="qmatrix4x4.xml#scale">scale</db:link>(), etc.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#copyDataTo">copyDataTo</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#optimize">optimize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QMatrix4x4-3">
<db:title>QMatrix4x4::QMatrix4x4(float <db:emphasis>m11</db:emphasis>, float <db:emphasis>m12</db:emphasis>, float <db:emphasis>m13</db:emphasis>, float <db:emphasis>m14</db:emphasis>, float <db:emphasis>m21</db:emphasis>, float <db:emphasis>m22</db:emphasis>, float <db:emphasis>m23</db:emphasis>, float <db:emphasis>m24</db:emphasis>, float <db:emphasis>m31</db:emphasis>, float <db:emphasis>m32</db:emphasis>, float <db:emphasis>m33</db:emphasis>, float <db:emphasis>m34</db:emphasis>, float <db:emphasis>m41</db:emphasis>, float <db:emphasis>m42</db:emphasis>, float <db:emphasis>m43</db:emphasis>, float <db:emphasis>m44</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMatrix4x4</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>m11</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>m12</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>m13</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>m14</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>m21</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>m22</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>m23</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>m24</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>m31</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>m32</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>m33</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>m34</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>m41</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>m42</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>m43</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>m44</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4(float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24, float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a matrix from the 16 elements <db:code role="parameter">m11</db:code>, <db:code role="parameter">m12</db:code>, <db:code role="parameter">m13</db:code>, <db:code role="parameter">m14</db:code>, <db:code role="parameter">m21</db:code>, <db:code role="parameter">m22</db:code>, <db:code role="parameter">m23</db:code>, <db:code role="parameter">m24</db:code>, <db:code role="parameter">m31</db:code>, <db:code role="parameter">m32</db:code>, <db:code role="parameter">m33</db:code>, <db:code role="parameter">m34</db:code>, <db:code role="parameter">m41</db:code>, <db:code role="parameter">m42</db:code>, <db:code role="parameter">m43</db:code>, and <db:code role="parameter">m44</db:code>. The elements are specified in row-major order.</db:para>
<db:para>If the matrix has a special type (identity, translate, scale, etc), the programmer should follow this constructor with a call to <db:link xlink:href="qmatrix4x4.xml#optimize">optimize</db:link>() if they wish <db:link xlink:href="qmatrix4x4.xml">QMatrix4x4</db:link> to optimize further calls to <db:link xlink:href="qmatrix4x4.xml#translate">translate</db:link>(), <db:link xlink:href="qmatrix4x4.xml#scale">scale</db:link>(), etc.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#optimize">optimize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QMatrix4x4-4">
<db:title>[explicit] QMatrix4x4::QMatrix4x4(const QGenericMatrix&lt;N, M, float&gt; &amp;<db:emphasis>matrix</db:emphasis> = N)</db:title>
<db:constructorsynopsis>
<db:methodname>QMatrix4x4</db:methodname>
<db:methodparam>
<db:type>const QGenericMatrix&lt;N, M, float&gt; &amp;</db:type>
<db:parameter>matrix</db:parameter>
<db:initializer>N</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4(const QGenericMatrix&lt;N, M, float&gt; &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a 4x4 matrix from the left-most 4 columns and top-most 4 rows of <db:code role="parameter">matrix</db:code>. If <db:code role="parameter">matrix</db:code> has less than 4 columns or rows, the remaining elements are filled with elements from the identity matrix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#toGenericMatrix">toGenericMatrix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QMatrix4x4-5">
<db:title>QMatrix4x4::QMatrix4x4(const QTransform &amp;<db:emphasis>transform</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMatrix4x4</db:methodname>
<db:methodparam>
<db:type>const QTransform &amp;</db:type>
<db:parameter>transform</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4(const QTransform &amp;transform)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a 4x4 matrix from the conventional Qt 2D transformation matrix <db:code role="parameter">transform</db:code>.</db:para>
<db:para>If <db:code role="parameter">transform</db:code> has a special type (identity, translate, scale, etc), the programmer should follow this constructor with a call to <db:link xlink:href="qmatrix4x4.xml#optimize">optimize</db:link>() if they wish <db:link xlink:href="qmatrix4x4.xml">QMatrix4x4</db:link> to optimize further calls to <db:link xlink:href="qmatrix4x4.xml#translate">translate</db:link>(), <db:link xlink:href="qmatrix4x4.xml#scale">scale</db:link>(), etc.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#toTransform">toTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#optimize">optimize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="column">
<db:title>QVector4D QMatrix4x4::column(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVector4D</db:type>
<db:methodname>column</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector4D column(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the elements of column <db:code role="parameter">index</db:code> as a 4D vector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#setColumn">setColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#row">row</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constData">
<db:title>const float *QMatrix4x4::constData() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const float *</db:type>
<db:methodname>constData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const float * constData() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a constant pointer to the raw data of this matrix. This raw data is stored in column-major format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="copyDataTo">
<db:title>void QMatrix4x4::copyDataTo(float *<db:emphasis>values</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>copyDataTo</db:methodname>
<db:methodparam>
<db:type>float *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void copyDataTo(float *values) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the 16 items in this matrix and copies them to <db:code role="parameter">values</db:code> in row-major order.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>float *QMatrix4x4::data()</db:title>
<db:methodsynopsis>
<db:type>float *</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float * data()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the raw data of this matrix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#constData">constData</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#optimize">optimize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data-1">
<db:title>const float *QMatrix4x4::data() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const float *</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const float * data() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a constant pointer to the raw data of this matrix. This raw data is stored in column-major format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#constData">constData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="determinant">
<db:title>double QMatrix4x4::determinant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>double</db:type>
<db:methodname>determinant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">double determinant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the determinant of this matrix.</db:para>
</db:section>
<db:section xml:id="fill">
<db:title>void QMatrix4x4::fill(float <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fill</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fill(float value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Fills all elements of this matrx with <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="frustum">
<db:title>void QMatrix4x4::frustum(float <db:emphasis>left</db:emphasis>, float <db:emphasis>right</db:emphasis>, float <db:emphasis>bottom</db:emphasis>, float <db:emphasis>top</db:emphasis>, float <db:emphasis>nearPlane</db:emphasis>, float <db:emphasis>farPlane</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>frustum</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>left</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>right</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>bottom</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>top</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>nearPlane</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>farPlane</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void frustum(float left, float right, float bottom, float top, float nearPlane, float farPlane)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Multiplies this matrix by another that applies a perspective frustum projection for a window with lower-left corner (<db:code role="parameter">left</db:code>, <db:code role="parameter">bottom</db:code>), upper-right corner (<db:code role="parameter">right</db:code>, <db:code role="parameter">top</db:code>), and the specified <db:code role="parameter">nearPlane</db:code> and <db:code role="parameter">farPlane</db:code> clipping planes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#ortho">ortho</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#perspective">perspective</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inverted">
<db:title>QMatrix4x4 QMatrix4x4::inverted(bool *<db:emphasis>invertible</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMatrix4x4</db:type>
<db:methodname>inverted</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>invertible</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4 inverted(bool *invertible) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the inverse of this matrix. Returns the identity if this matrix cannot be inverted; i.e. <db:link xlink:href="qmatrix4x4.xml#determinant">determinant</db:link>() is zero. If <db:code role="parameter">invertible</db:code> is not null, then true will be written to that location if the matrix can be inverted; false otherwise.</db:para>
<db:para>If the matrix is recognized as the identity or an orthonormal matrix, then this function will quickly invert the matrix using optimized routines.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#determinant">determinant</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#normalMatrix">normalMatrix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAffine">
<db:title>bool QMatrix4x4::isAffine() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isAffine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAffine() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this matrix is affine matrix; false otherwise.</db:para>
<db:para>An affine matrix is a 4x4 matrix with row 3 equal to (0, 0, 0, 1), e.g. no projective coefficients.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#isIdentity">isIdentity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isIdentity">
<db:title>bool QMatrix4x4::isIdentity() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isIdentity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isIdentity() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this matrix is the identity; false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#setToIdentity">setToIdentity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lookAt">
<db:title>void QMatrix4x4::lookAt(const QVector3D &amp;<db:emphasis>eye</db:emphasis>, const QVector3D &amp;<db:emphasis>center</db:emphasis>, const QVector3D &amp;<db:emphasis>up</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>lookAt</db:methodname>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>eye</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>center</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>up</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void lookAt(const QVector3D &amp;eye, const QVector3D &amp;center, const QVector3D &amp;up)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Multiplies this matrix by a viewing matrix derived from an eye point. The <db:code role="parameter">center</db:code> value indicates the center of the view that the <db:code role="parameter">eye</db:code> is looking at. The <db:code role="parameter">up</db:code> value indicates which direction should be considered up with respect to the <db:code role="parameter">eye</db:code>.</db:para>
<db:note>
<db:para>The <db:code role="parameter">up</db:code> vector must not be parallel to the line of sight from <db:code role="parameter">eye</db:code> to <db:code role="parameter">center</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="map">
<db:title>QPoint QMatrix4x4::map(const QPoint &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>map</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint map(const QPoint &amp;point) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps <db:code role="parameter">point</db:code> by multiplying this matrix by <db:code role="parameter">point</db:code>. The matrix is applied pre-point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#mapRect">mapRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="map-1">
<db:title>QPointF QMatrix4x4::map(const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>map</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF map(const QPointF &amp;point) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps <db:code role="parameter">point</db:code> by post-multiplying this matrix by <db:code role="parameter">point</db:code>. The matrix is applied pre-point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#mapRect">mapRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="map-2">
<db:title>QVector3D QMatrix4x4::map(const QVector3D &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVector3D</db:type>
<db:methodname>map</db:methodname>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector3D map(const QVector3D &amp;point) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps <db:code role="parameter">point</db:code> by multiplying this matrix by <db:code role="parameter">point</db:code> extended to a 4D vector by assuming 1.0 for the w coordinate. The matrix is applied pre-point.</db:para>
<db:note>
<db:para>This function is not the same as <db:link xlink:href="qmatrix4x4.xml#mapVector">mapVector</db:link>(). For points, always use <db:link xlink:href="qmatrix4x4.xml#map">map</db:link>(). <db:link xlink:href="qmatrix4x4.xml#mapVector">mapVector</db:link>() is suitable for vectors (directions) only.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#mapRect">mapRect</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#mapVector">mapVector</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="map-3">
<db:title>QVector4D QMatrix4x4::map(const QVector4D &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVector4D</db:type>
<db:methodname>map</db:methodname>
<db:methodparam>
<db:type>const QVector4D &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector4D map(const QVector4D &amp;point) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps <db:code role="parameter">point</db:code> by multiplying this matrix by <db:code role="parameter">point</db:code>. The matrix is applied pre-point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#mapRect">mapRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapRect">
<db:title>QRect QMatrix4x4::mapRect(const QRect &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>mapRect</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect mapRect(const QRect &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps <db:code role="parameter">rect</db:code> by multiplying this matrix by the corners of <db:code role="parameter">rect</db:code> and then forming a new rectangle from the results. The returned rectangle will be an ordinary 2D rectangle with sides parallel to the horizontal and vertical axes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#map">map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapRect-1">
<db:title>QRectF QMatrix4x4::mapRect(const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>mapRect</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF mapRect(const QRectF &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps <db:code role="parameter">rect</db:code> by multiplying this matrix by the corners of <db:code role="parameter">rect</db:code> and then forming a new rectangle from the results. The returned rectangle will be an ordinary 2D rectangle with sides parallel to the horizontal and vertical axes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#map">map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapVector">
<db:title>QVector3D QMatrix4x4::mapVector(const QVector3D &amp;<db:emphasis>vector</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVector3D</db:type>
<db:methodname>mapVector</db:methodname>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>vector</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector3D mapVector(const QVector3D &amp;vector) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps <db:code role="parameter">vector</db:code> by multiplying the top 3x3 portion of this matrix by <db:code role="parameter">vector</db:code>. The translation and projection components of this matrix are ignored. The matrix is applied pre-vector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#map">map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normalMatrix">
<db:title>QMatrix3x3 QMatrix4x4::normalMatrix() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMatrix3x3</db:type>
<db:methodname>normalMatrix</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix3x3 normalMatrix() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the normal matrix corresponding to this 4x4 transformation. The normal matrix is the transpose of the inverse of the top-left 3x3 part of this 4x4 matrix. If the 3x3 sub-matrix is not invertible, this function returns the identity.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#inverted">inverted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="optimize">
<db:title>void QMatrix4x4::optimize()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>optimize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void optimize()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Optimize the usage of this matrix from its current elements.</db:para>
<db:para>Some operations such as <db:link xlink:href="qmatrix4x4.xml#translate">translate</db:link>(), <db:link xlink:href="qmatrix4x4.xml#scale">scale</db:link>(), and <db:link xlink:href="qmatrix4x4.xml#rotate">rotate</db:link>() can be performed more efficiently if the matrix being modified is already known to be the identity, a previous <db:link xlink:href="qmatrix4x4.xml#translate">translate</db:link>(), a previous <db:link xlink:href="qmatrix4x4.xml#scale">scale</db:link>(), etc.</db:para>
<db:para>Normally the <db:link xlink:href="qmatrix4x4.xml">QMatrix4x4</db:link> class keeps track of this special type internally as operations are performed. However, if the matrix is modified directly with <db:link xlink:href="qmatrix4x4.xml#operator-28-29">operator</db:link>()(int, int) or <db:link xlink:href="qmatrix4x4.xml#data">data</db:link>(), then <db:link xlink:href="qmatrix4x4.xml">QMatrix4x4</db:link> will lose track of the special type and will revert to the safest but least efficient operations thereafter.</db:para>
<db:para>By calling optimize() after directly modifying the matrix, the programmer can force <db:link xlink:href="qmatrix4x4.xml">QMatrix4x4</db:link> to recover the special type if the elements appear to conform to one of the known optimized types.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#operator-28-29">operator()</db:link>(int, int)</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ortho">
<db:title>void QMatrix4x4::ortho(float <db:emphasis>left</db:emphasis>, float <db:emphasis>right</db:emphasis>, float <db:emphasis>bottom</db:emphasis>, float <db:emphasis>top</db:emphasis>, float <db:emphasis>nearPlane</db:emphasis>, float <db:emphasis>farPlane</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>ortho</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>left</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>right</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>bottom</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>top</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>nearPlane</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>farPlane</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void ortho(float left, float right, float bottom, float top, float nearPlane, float farPlane)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Multiplies this matrix by another that applies an orthographic projection for a window with lower-left corner (<db:code role="parameter">left</db:code>, <db:code role="parameter">bottom</db:code>), upper-right corner (<db:code role="parameter">right</db:code>, <db:code role="parameter">top</db:code>), and the specified <db:code role="parameter">nearPlane</db:code> and <db:code role="parameter">farPlane</db:code> clipping planes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#frustum">frustum</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#perspective">perspective</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ortho-1">
<db:title>void QMatrix4x4::ortho(const QRect &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>ortho</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void ortho(const QRect &amp;rect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Multiplies this matrix by another that applies an orthographic projection for a window with boundaries specified by <db:code role="parameter">rect</db:code>. The near and far clipping planes will be -1 and 1 respectively.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#frustum">frustum</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#perspective">perspective</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ortho-2">
<db:title>void QMatrix4x4::ortho(const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>ortho</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void ortho(const QRectF &amp;rect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Multiplies this matrix by another that applies an orthographic projection for a window with boundaries specified by <db:code role="parameter">rect</db:code>. The near and far clipping planes will be -1 and 1 respectively.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#frustum">frustum</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#perspective">perspective</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="perspective">
<db:title>void QMatrix4x4::perspective(float <db:emphasis>verticalAngle</db:emphasis>, float <db:emphasis>aspectRatio</db:emphasis>, float <db:emphasis>nearPlane</db:emphasis>, float <db:emphasis>farPlane</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>perspective</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>verticalAngle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>aspectRatio</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>nearPlane</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>farPlane</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void perspective(float verticalAngle, float aspectRatio, float nearPlane, float farPlane)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Multiplies this matrix by another that applies a perspective projection. The vertical field of view will be <db:code role="parameter">verticalAngle</db:code> degrees within a window with a given <db:code role="parameter">aspectRatio</db:code> that determines the horizontal field of view. The projection will have the specified <db:code role="parameter">nearPlane</db:code> and <db:code role="parameter">farPlane</db:code> clipping planes which are the distances from the viewer to the corresponding planes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#ortho">ortho</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#frustum">frustum</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rotate">
<db:title>void QMatrix4x4::rotate(float <db:emphasis>angle</db:emphasis>, const QVector3D &amp;<db:emphasis>vector</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>rotate</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>angle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>vector</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void rotate(float angle, const QVector3D &amp;vector)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Multiples this matrix by another that rotates coordinates through <db:code role="parameter">angle</db:code> degrees about <db:code role="parameter">vector</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#scale">scale</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rotate-1">
<db:title>void QMatrix4x4::rotate(float <db:emphasis>angle</db:emphasis>, float <db:emphasis>x</db:emphasis>, float <db:emphasis>y</db:emphasis>, float <db:emphasis>z</db:emphasis> = 0.0f)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>rotate</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>angle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>z</db:parameter>
<db:initializer>0.0f</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void rotate(float angle, float x, float y, float z)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Multiplies this matrix by another that rotates coordinates through <db:code role="parameter">angle</db:code> degrees about the vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#scale">scale</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rotate-2">
<db:title>void QMatrix4x4::rotate(const QQuaternion &amp;<db:emphasis>quaternion</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>rotate</db:methodname>
<db:methodparam>
<db:type>const QQuaternion &amp;</db:type>
<db:parameter>quaternion</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void rotate(const QQuaternion &amp;quaternion)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Multiples this matrix by another that rotates coordinates according to a specified <db:code role="parameter">quaternion</db:code>. The <db:code role="parameter">quaternion</db:code> is assumed to have been normalized.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#scale">scale</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#translate">translate</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml">QQuaternion</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="row">
<db:title>QVector4D QMatrix4x4::row(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVector4D</db:type>
<db:methodname>row</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector4D row(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the elements of row <db:code role="parameter">index</db:code> as a 4D vector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#setRow">setRow</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#column">column</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scale">
<db:title>void QMatrix4x4::scale(const QVector3D &amp;<db:emphasis>vector</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>scale</db:methodname>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>vector</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void scale(const QVector3D &amp;vector)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Multiplies this matrix by another that scales coordinates by the components of <db:code role="parameter">vector</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#translate">translate</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#rotate">rotate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scale-1">
<db:title>void QMatrix4x4::scale(float <db:emphasis>x</db:emphasis>, float <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>scale</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void scale(float x, float y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Multiplies this matrix by another that scales coordinates by the components <db:code role="parameter">x</db:code>, and <db:code role="parameter">y</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#translate">translate</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#rotate">rotate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scale-2">
<db:title>void QMatrix4x4::scale(float <db:emphasis>x</db:emphasis>, float <db:emphasis>y</db:emphasis>, float <db:emphasis>z</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>scale</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>z</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void scale(float x, float y, float z)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Multiplies this matrix by another that scales coordinates by the components <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, and <db:code role="parameter">z</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#translate">translate</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#rotate">rotate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scale-3">
<db:title>void QMatrix4x4::scale(float <db:emphasis>factor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>scale</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>factor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void scale(float factor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Multiplies this matrix by another that scales coordinates by the given <db:code role="parameter">factor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#translate">translate</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#rotate">rotate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColumn">
<db:title>void QMatrix4x4::setColumn(int <db:emphasis>index</db:emphasis>, const QVector4D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setColumn</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector4D &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setColumn(int index, const QVector4D &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the elements of column <db:code role="parameter">index</db:code> to the components of <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#column">column</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#setRow">setRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRow">
<db:title>void QMatrix4x4::setRow(int <db:emphasis>index</db:emphasis>, const QVector4D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRow</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector4D &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRow(int index, const QVector4D &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the elements of row <db:code role="parameter">index</db:code> to the components of <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#row">row</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#setColumn">setColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setToIdentity">
<db:title>void QMatrix4x4::setToIdentity()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setToIdentity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setToIdentity()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this matrix to the identity.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#isIdentity">isIdentity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toGenericMatrix">
<db:title>QGenericMatrix&lt;N, M, float&gt; QMatrix4x4::toGenericMatrix() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGenericMatrix&lt;N, M, float&gt;</db:type>
<db:methodname>toGenericMatrix</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGenericMatrix&lt;N, M, float&gt; toGenericMatrix() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Constructs a NxM generic matrix from the left-most N columns and top-most M rows of this 4x4 matrix. If N or M is greater than 4, then the remaining elements are filled with elements from the identity matrix.</db:para>
</db:section>
<db:section xml:id="toTransform">
<db:title>QTransform QMatrix4x4::toTransform() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTransform</db:type>
<db:methodname>toTransform</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTransform toTransform() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the conventional Qt 2D transformation matrix that corresponds to this matrix.</db:para>
<db:para>The returned <db:link xlink:href="qtransform.xml">QTransform</db:link> is formed by simply dropping the third row and third column of the <db:link xlink:href="qmatrix4x4.xml">QMatrix4x4</db:link>. This is suitable for implementing orthographic projections where the z coordinate should be dropped rather than projected.</db:para>
</db:section>
<db:section xml:id="toTransform-1">
<db:title>QTransform QMatrix4x4::toTransform(float <db:emphasis>distanceToPlane</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTransform</db:type>
<db:methodname>toTransform</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>distanceToPlane</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTransform toTransform(float distanceToPlane) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the conventional Qt 2D transformation matrix that corresponds to this matrix.</db:para>
<db:para>If <db:code role="parameter">distanceToPlane</db:code> is non-zero, it indicates a projection factor to use to adjust for the z coordinate. The value of 1024 corresponds to the projection factor used by <db:link xlink:href="qtransform.xml#rotate">QTransform::rotate</db:link>() for the x and y axes.</db:para>
<db:para>If <db:code role="parameter">distanceToPlane</db:code> is zero, then the returned <db:link xlink:href="qtransform.xml">QTransform</db:link> is formed by simply dropping the third row and third column of the <db:link xlink:href="qmatrix4x4.xml">QMatrix4x4</db:link>. This is suitable for implementing orthographic projections where the z coordinate should be dropped rather than projected.</db:para>
</db:section>
<db:section xml:id="translate">
<db:title>void QMatrix4x4::translate(const QVector3D &amp;<db:emphasis>vector</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>translate</db:methodname>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>vector</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void translate(const QVector3D &amp;vector)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Multiplies this matrix by another that translates coordinates by the components of <db:code role="parameter">vector</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#scale">scale</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#rotate">rotate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translate-1">
<db:title>void QMatrix4x4::translate(float <db:emphasis>x</db:emphasis>, float <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>translate</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void translate(float x, float y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Multiplies this matrix by another that translates coordinates by the components <db:code role="parameter">x</db:code>, and <db:code role="parameter">y</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#scale">scale</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#rotate">rotate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translate-2">
<db:title>void QMatrix4x4::translate(float <db:emphasis>x</db:emphasis>, float <db:emphasis>y</db:emphasis>, float <db:emphasis>z</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>translate</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>z</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void translate(float x, float y, float z)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Multiplies this matrix by another that translates coordinates by the components <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, and <db:code role="parameter">z</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#scale">scale</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#rotate">rotate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transposed">
<db:title>QMatrix4x4 QMatrix4x4::transposed() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMatrix4x4</db:type>
<db:methodname>transposed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4 transposed() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this matrix, transposed about its diagonal.</db:para>
</db:section>
<db:section xml:id="viewport">
<db:title>void QMatrix4x4::viewport(float <db:emphasis>left</db:emphasis>, float <db:emphasis>bottom</db:emphasis>, float <db:emphasis>width</db:emphasis>, float <db:emphasis>height</db:emphasis>, float <db:emphasis>nearPlane</db:emphasis> = 0.0f, float <db:emphasis>farPlane</db:emphasis> = 1.0f)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>viewport</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>left</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>bottom</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>nearPlane</db:parameter>
<db:initializer>0.0f</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>farPlane</db:parameter>
<db:initializer>1.0f</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void viewport(float left, float bottom, float width, float height, float nearPlane, float farPlane)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Multiplies this matrix by another that performs the scale and bias transformation used by OpenGL to transform from normalized device coordinates (NDC) to viewport (window) coordinates. That is it maps points from the cube ranging over [-1, 1] in each dimension to the viewport with it's near-lower-left corner at (<db:code role="parameter">left</db:code>, <db:code role="parameter">bottom</db:code>, <db:code role="parameter">nearPlane</db:code>) and with size (<db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code>, <db:code role="parameter">farPlane</db:code> - <db:code role="parameter">nearPlane</db:code>).</db:para>
<db:para>This matches the transform used by the fixed function OpenGL viewport transform controlled by the functions glViewport() and glDepthRange().</db:para>
</db:section>
<db:section xml:id="viewport-1">
<db:title>void QMatrix4x4::viewport(const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>viewport</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void viewport(const QRectF &amp;rect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets up viewport transform for viewport bounded by <db:code role="parameter">rect</db:code> and with near and far set to 0 and 1 respectively.</db:para>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QMatrix4x4::operator QVariant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>operator QVariant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant operator QVariant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the matrix as a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QMatrix4x4::operator!=(const QMatrix4x4 &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QMatrix4x4 &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this matrix is not identical to <db:code role="parameter">other</db:code>; false otherwise. This operator uses an exact floating-point comparison.</db:para>
</db:section>
<db:section xml:id="operator-28-29">
<db:title>const float &amp;QMatrix4x4::operator()(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const float &amp;</db:type>
<db:methodname>operator()</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const float &amp; operator()(int row, int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a constant reference to the element at position (<db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>) in this matrix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#column">column</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#row">row</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-28-29-1">
<db:title>float &amp;QMatrix4x4::operator()(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>float &amp;</db:type>
<db:methodname>operator()</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">float &amp; operator()(int row, int column)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the element at position (<db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>) in this matrix so that the element can be assigned to.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#optimize">optimize</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#setColumn">setColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#setRow">setRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-eq">
<db:title>QMatrix4x4 &amp;QMatrix4x4::operator*=(const QMatrix4x4 &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMatrix4x4 &amp;</db:type>
<db:methodname>operator*=</db:methodname>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4 &amp; operator*=(const QMatrix4x4 &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Multiplies the contents of <db:code role="parameter">other</db:code> by this matrix.</db:para>
</db:section>
<db:section xml:id="operator-2a-eq-1">
<db:title>QMatrix4x4 &amp;QMatrix4x4::operator*=(float <db:emphasis>factor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMatrix4x4 &amp;</db:type>
<db:methodname>operator*=</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>factor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4 &amp; operator*=(float factor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Multiplies all elements of this matrix by <db:code role="parameter">factor</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>QMatrix4x4 &amp;QMatrix4x4::operator+=(const QMatrix4x4 &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMatrix4x4 &amp;</db:type>
<db:methodname>operator+=</db:methodname>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4 &amp; operator+=(const QMatrix4x4 &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the contents of <db:code role="parameter">other</db:code> to this matrix.</db:para>
</db:section>
<db:section xml:id="operator--eq">
<db:title>QMatrix4x4 &amp;QMatrix4x4::operator-=(const QMatrix4x4 &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMatrix4x4 &amp;</db:type>
<db:methodname>operator-=</db:methodname>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4 &amp; operator-=(const QMatrix4x4 &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Subtracts the contents of <db:code role="parameter">other</db:code> from this matrix.</db:para>
</db:section>
<db:section xml:id="operator-2f-eq">
<db:title>QMatrix4x4 &amp;QMatrix4x4::operator/=(float <db:emphasis>divisor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMatrix4x4 &amp;</db:type>
<db:methodname>operator/=</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>divisor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4 &amp; operator/=(float divisor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Divides all elements of this matrix by <db:code role="parameter">divisor</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QMatrix4x4::operator==(const QMatrix4x4 &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QMatrix4x4 &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this matrix is identical to <db:code role="parameter">other</db:code>; false otherwise. This operator uses an exact floating-point comparison.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-2a-11">
<db:title>QMatrix4x4 operator*(const QMatrix4x4 &amp;<db:emphasis>m1</db:emphasis>, const QMatrix4x4 &amp;<db:emphasis>m2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMatrix4x4</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>m1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>m2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">11</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4 operator*(const QMatrix4x4 &amp;m1, const QMatrix4x4 &amp;m2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the product of <db:code role="parameter">m1</db:code> and <db:code role="parameter">m2</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2a-14">
<db:title>QVector4D operator*(const QVector4D &amp;<db:emphasis>vector</db:emphasis>, const QMatrix4x4 &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVector4D</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QVector4D &amp;</db:type>
<db:parameter>vector</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">14</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector4D operator*(const QVector4D &amp;vector, const QMatrix4x4 &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the result of transforming <db:code role="parameter">vector</db:code> according to <db:code role="parameter">matrix</db:code>, with the matrix applied post-vector.</db:para>
</db:section>
<db:section xml:id="operator-2a-15">
<db:title>QVector4D operator*(const QMatrix4x4 &amp;<db:emphasis>matrix</db:emphasis>, const QVector4D &amp;<db:emphasis>vector</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVector4D</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector4D &amp;</db:type>
<db:parameter>vector</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">15</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector4D operator*(const QMatrix4x4 &amp;matrix, const QVector4D &amp;vector)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the result of transforming <db:code role="parameter">vector</db:code> according to <db:code role="parameter">matrix</db:code>, with the matrix applied pre-vector.</db:para>
</db:section>
<db:section xml:id="operator-2a-16">
<db:title>QPoint operator*(const QPoint &amp;<db:emphasis>point</db:emphasis>, const QMatrix4x4 &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPoint</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">16</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint operator*(const QPoint &amp;point, const QMatrix4x4 &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the result of transforming <db:code role="parameter">point</db:code> according to <db:code role="parameter">matrix</db:code>, with the matrix applied post-point.</db:para>
</db:section>
<db:section xml:id="operator-2a-17">
<db:title>QPointF operator*(const QPointF &amp;<db:emphasis>point</db:emphasis>, const QMatrix4x4 &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPointF</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">17</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF operator*(const QPointF &amp;point, const QMatrix4x4 &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the result of transforming <db:code role="parameter">point</db:code> according to <db:code role="parameter">matrix</db:code>, with the matrix applied post-point.</db:para>
</db:section>
<db:section xml:id="operator-2a-20">
<db:title>QMatrix4x4 operator*(float <db:emphasis>factor</db:emphasis>, const QMatrix4x4 &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMatrix4x4</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>factor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">20</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4 operator*(float factor, const QMatrix4x4 &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the result of multiplying all elements of <db:code role="parameter">matrix</db:code> by <db:code role="parameter">factor</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2a-21">
<db:title>QMatrix4x4 operator*(const QMatrix4x4 &amp;<db:emphasis>matrix</db:emphasis>, float <db:emphasis>factor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMatrix4x4</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>factor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">21</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4 operator*(const QMatrix4x4 &amp;matrix, float factor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the result of multiplying all elements of <db:code role="parameter">matrix</db:code> by <db:code role="parameter">factor</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2b-1">
<db:title>QMatrix4x4 operator+(const QMatrix4x4 &amp;<db:emphasis>m1</db:emphasis>, const QMatrix4x4 &amp;<db:emphasis>m2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMatrix4x4</db:type>
<db:methodname>operator+</db:methodname>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>m1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>m2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4 operator+(const QMatrix4x4 &amp;m1, const QMatrix4x4 &amp;m2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the sum of <db:code role="parameter">m1</db:code> and <db:code role="parameter">m2</db:code>.</db:para>
</db:section>
<db:section xml:id="operator--2">
<db:title>QMatrix4x4 operator-(const QMatrix4x4 &amp;<db:emphasis>m1</db:emphasis>, const QMatrix4x4 &amp;<db:emphasis>m2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMatrix4x4</db:type>
<db:methodname>operator-</db:methodname>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>m1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>m2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4 operator-(const QMatrix4x4 &amp;m1, const QMatrix4x4 &amp;m2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the difference of <db:code role="parameter">m1</db:code> and <db:code role="parameter">m2</db:code>.</db:para>
</db:section>
<db:section xml:id="operator--3">
<db:title>QMatrix4x4 operator-(const QMatrix4x4 &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMatrix4x4</db:type>
<db:methodname>operator-</db:methodname>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4 operator-(const QMatrix4x4 &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the negation of <db:code role="parameter">matrix</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2f-1">
<db:title>QMatrix4x4 operator/(const QMatrix4x4 &amp;<db:emphasis>matrix</db:emphasis>, float <db:emphasis>divisor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMatrix4x4</db:type>
<db:methodname>operator/</db:methodname>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>divisor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix4x4 operator/(const QMatrix4x4 &amp;matrix, float divisor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the result of dividing all elements of <db:code role="parameter">matrix</db:code> by <db:code role="parameter">divisor</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QMatrix4x4 &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QMatrix4x4 &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the given <db:code role="parameter">matrix</db:code> to the given <db:code role="parameter">stream</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QMatrix4x4 &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QMatrix4x4 &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QMatrix4x4 &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a 4x4 matrix from the given <db:code role="parameter">stream</db:code> into the given <db:code role="parameter">matrix</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QMatrix4x4</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qmatrix4x4.xml">QMatrix4x4</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="flipCoordinates">
<db:title>void QMatrix4x4::flipCoordinates()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>flipCoordinates</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void flipCoordinates()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Flips between right-handed and left-handed coordinate systems by multiplying the y and z coordinates by -1. This is normally used to create a left-handed orthographic view without scaling the viewport as <db:link xlink:href="qmatrix4x4.xml#ortho">ortho</db:link>() does.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml#ortho">ortho</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete-related-non-members">
<db:title>Obsolete Related Non-Members</db:title>
<db:section xml:id="operator-2a-12">
<db:title>QVector3D operator*(const QVector3D &amp;<db:emphasis>vector</db:emphasis>, const QMatrix4x4 &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVector3D</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>vector</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">12</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector3D operator*(const QVector3D &amp;vector, const QMatrix4x4 &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.1. We strongly advise against using it in new code.</db:para>
<db:para>Convert the <db:link xlink:href="qvector3d.xml">QVector3D</db:link> to a <db:link xlink:href="qvector4d.xml">QVector4D</db:link> with 1.0 as the w coordinate, then multiply.</db:para>
<db:para>Returns the result of transforming <db:code role="parameter">vector</db:code> according to <db:code role="parameter">matrix</db:code>, with the matrix applied post-vector. The vector is transformed as a point.</db:para>
</db:section>
<db:section xml:id="operator-2a-13">
<db:title>QVector3D operator*(const QMatrix4x4 &amp;<db:emphasis>matrix</db:emphasis>, const QVector3D &amp;<db:emphasis>vector</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVector3D</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>vector</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">13</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector3D operator*(const QMatrix4x4 &amp;matrix, const QVector3D &amp;vector)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.1. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qmatrix4x4.xml#map">QMatrix4x4::map</db:link>() instead.</db:para>
<db:para>Returns the result of transforming <db:code role="parameter">vector</db:code> according to <db:code role="parameter">matrix</db:code>, with the matrix applied pre-vector. The vector is transformed as a projective point.</db:para>
</db:section>
<db:section xml:id="operator-2a-18">
<db:title>QPoint operator*(const QMatrix4x4 &amp;<db:emphasis>matrix</db:emphasis>, const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPoint</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">18</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint operator*(const QMatrix4x4 &amp;matrix, const QPoint &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.1. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qmatrix4x4.xml#map">QMatrix4x4::map</db:link>() instead.</db:para>
<db:para>Returns the result of transforming <db:code role="parameter">point</db:code> according to <db:code role="parameter">matrix</db:code>, with the matrix applied pre-point.</db:para>
</db:section>
<db:section xml:id="operator-2a-19">
<db:title>QPointF operator*(const QMatrix4x4 &amp;<db:emphasis>matrix</db:emphasis>, const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPointF</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">19</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF operator*(const QMatrix4x4 &amp;matrix, const QPointF &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.1. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qmatrix4x4.xml#map">QMatrix4x4::map</db:link>() instead.</db:para>
<db:para>Returns the result of transforming <db:code role="parameter">point</db:code> according to <db:code role="parameter">matrix</db:code>, with the matrix applied pre-point.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
