<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QAssociativeIterable Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qassociativeiterable.xml">QAssociativeIterable</db:link> class is an iterable interface for an associative container in a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAssociativeIterable</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class allows several methods of accessing the elements of an associative container held within a <db:link xlink:href="qvariant.xml">QVariant</db:link>. An instance of <db:link xlink:href="qassociativeiterable.xml">QAssociativeIterable</db:link> can be extracted from a <db:link xlink:href="qvariant.xml">QVariant</db:link> if it can be converted to a <db:link xlink:href="qvariant.xml#QVariantHash-typedef">QVariantHash</db:link> or <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link>.</db:para>
<db:programlisting language="cpp">QHash&lt;int, QString&gt; mapping;
mapping.insert(7, &quot;Seven&quot;);
mapping.insert(11, &quot;Eleven&quot;);
mapping.insert(42, &quot;Forty-two&quot;);

QVariant variant = QVariant::fromValue(mapping);
if (variant.canConvert&lt;QVariantHash&gt;()) {
    QAssociativeIterable iterable = variant.value&lt;QAssociativeIterable&gt;();
    // Can use foreach over the values:
    foreach (const QVariant &amp;v, iterable) {
        qDebug() &lt;&lt; v;
    }
    // Can use C++11 range-for over the values:
    for (const QVariant &amp;v : iterable) {
        qDebug() &lt;&lt; v;
    }
    // Can use iterators:
    QAssociativeIterable::const_iterator it = iterable.begin();
    const QAssociativeIterable::const_iterator end = iterable.end();
    for ( ; it != end; ++it) {
        qDebug() &lt;&lt; *it; // The current value
        qDebug() &lt;&lt; it.key();
        qDebug() &lt;&lt; it.value();
    }
}

</db:programlisting>
<db:para>The container itself is not copied before iterating over it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvariant.xml">QVariant</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="begin">
<db:title>QAssociativeIterable::const_iterator QAssociativeIterable::begin() const</db:title>
<db:para>Returns a <db:link xlink:href="qassociativeiterable-const-iterator.xml">QAssociativeIterable::const_iterator</db:link> for the beginning of the container. This can be used in stl-style iteration.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qassociativeiterable.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="end">
<db:title>QAssociativeIterable::const_iterator QAssociativeIterable::end() const</db:title>
<db:para>Returns a <db:link xlink:href="qassociativeiterable-const-iterator.xml">QAssociativeIterable::const_iterator</db:link> for the end of the container. This can be used in stl-style iteration.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qassociativeiterable.xml#begin">begin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>int QAssociativeIterable::size() const</db:title>
<db:para>Returns the number of elements in the container.</db:para>
</db:section>
<db:section xml:id="value">
<db:title>QVariant QAssociativeIterable::value(const QVariant &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:para>Returns the value for the given <db:code role="parameter">key</db:code> in the container, if the types are convertible.</db:para>
</db:section>
</db:section>
</db:article>
