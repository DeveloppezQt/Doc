<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAssociativeIterable Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qassociativeiterable.xml">QAssociativeIterable</db:link> class is an iterable interface for an associative container in a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAssociativeIterable</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qiterable.xml" xlink:role="class">QIterable</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class allows several methods of accessing the elements of an associative container held within a <db:link xlink:href="qvariant.xml">QVariant</db:link>. An instance of <db:link xlink:href="qassociativeiterable.xml">QAssociativeIterable</db:link> can be extracted from a <db:link xlink:href="qvariant.xml">QVariant</db:link> if it can be converted to a <db:link xlink:href="qvariant.xml#QVariantHash-typedef">QVariantHash</db:link> or <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link> or if a custom mutable view has been registered.</db:para>
<db:programlisting language="cpp">QHash&amp;lt;int, QString&amp;gt; mapping;
mapping.insert(7, &quot;Seven&quot;);
mapping.insert(11, &quot;Eleven&quot;);
mapping.insert(42, &quot;Forty-two&quot;);

QVariant variant = QVariant::fromValue(mapping);
if (variant.canConvert&amp;lt;QVariantHash&amp;gt;()) {
    QAssociativeIterable iterable = variant.value&amp;lt;QAssociativeIterable&amp;gt;();
    // Can use foreach over the values:
    foreach (const QVariant &amp;amp;v, iterable) {
        qDebug() &amp;lt;&amp;lt; v;
    }
    // Can use C++11 range-for over the values:
    for (const QVariant &amp;amp;v : iterable) {
        qDebug() &amp;lt;&amp;lt; v;
    }
    // Can use iterators:
    QAssociativeIterable::const_iterator it = iterable.begin();
    const QAssociativeIterable::const_iterator end = iterable.end();
    for ( ; it != end; ++it) {
        qDebug() &amp;lt;&amp;lt; *it; // The current value
        qDebug() &amp;lt;&amp;lt; it.key();
        qDebug() &amp;lt;&amp;lt; it.value();
    }
}
</db:programlisting>
<db:para>The container itself is not copied before iterating over it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvariant.xml">QVariant</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="BidirectionalConstIterator-typedef">
<db:title>[alias] QAssociativeIterable::BidirectionalConstIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>BidirectionalConstIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Exposes a <db:link xlink:href="qassociativeiterable.xml#const_iterator-typedef">const_iterator</db:link> using std::bidirectional_iterator_tag.</db:para>
</db:section>
<db:section xml:id="BidirectionalIterator-typedef">
<db:title>[alias] QAssociativeIterable::BidirectionalIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>BidirectionalIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Exposes an iterator using std::bidirectional_iterator_tag.</db:para>
</db:section>
<db:section xml:id="ForwardConstIterator-typedef">
<db:title>[alias] QAssociativeIterable::ForwardConstIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>ForwardConstIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Exposes a <db:link xlink:href="qassociativeiterable.xml#const_iterator-typedef">const_iterator</db:link> using std::forward_iterator_tag.</db:para>
</db:section>
<db:section xml:id="ForwardIterator-typedef">
<db:title>[alias] QAssociativeIterable::ForwardIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>ForwardIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Exposes an iterator using std::forward_iterator_tag.</db:para>
</db:section>
<db:section xml:id="InputConstIterator-typedef">
<db:title>[alias] QAssociativeIterable::InputConstIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>InputConstIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Exposes a <db:link xlink:href="qassociativeiterable.xml#const_iterator-typedef">const_iterator</db:link> using std::input_iterator_tag.</db:para>
</db:section>
<db:section xml:id="InputIterator-typedef">
<db:title>[alias] QAssociativeIterable::InputIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>InputIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Exposes an iterator using std::input_iterator_tag.</db:para>
</db:section>
<db:section xml:id="RandomAccessConstIterator-typedef">
<db:title>[alias] QAssociativeIterable::RandomAccessConstIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>RandomAccessConstIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Exposes a <db:link xlink:href="qassociativeiterable.xml#const_iterator-typedef">const_iterator</db:link> using std::random_access_iterator_tag.</db:para>
</db:section>
<db:section xml:id="RandomAccessIterator-typedef">
<db:title>[alias] QAssociativeIterable::RandomAccessIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>RandomAccessIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Exposes an iterator using std::random_access_iterator_tag.</db:para>
</db:section>
<db:section xml:id="const_iterator-typedef">
<db:title>[alias] QAssociativeIterable::const_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>const_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="module">QtCore</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The QAssociativeIterable::const_iterator allows iteration over a container in a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>A QAssociativeIterable::const_iterator can only be created by a <db:link xlink:href="qassociativeiterable.xml">QAssociativeIterable</db:link> instance, and can be used in a way similar to other stl-style iterators.</db:para>
<db:programlisting language="cpp">QHash&amp;lt;int, QString&amp;gt; mapping;
mapping.insert(7, &quot;Seven&quot;);
mapping.insert(11, &quot;Eleven&quot;);
mapping.insert(42, &quot;Forty-two&quot;);

QVariant variant = QVariant::fromValue(mapping);
if (variant.canConvert&amp;lt;QVariantHash&amp;gt;()) {
    QAssociativeIterable iterable = variant.value&amp;lt;QAssociativeIterable&amp;gt;();
    // Can use foreach over the values:
    foreach (const QVariant &amp;amp;v, iterable) {
        qDebug() &amp;lt;&amp;lt; v;
    }
    // Can use C++11 range-for over the values:
    for (const QVariant &amp;amp;v : iterable) {
        qDebug() &amp;lt;&amp;lt; v;
    }
    // Can use iterators:
    QAssociativeIterable::const_iterator it = iterable.begin();
    const QAssociativeIterable::const_iterator end = iterable.end();
    for ( ; it != end; ++it) {
        qDebug() &amp;lt;&amp;lt; *it; // The current value
        qDebug() &amp;lt;&amp;lt; it.key();
        qDebug() &amp;lt;&amp;lt; it.value();
    }
}

</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qassociativeiterable.xml">QAssociativeIterable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="iterator-typedef">
<db:title>[alias, since 6.0] QAssociativeIterable::iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="module">QtCore</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The QAssociativeIterable::iterator allows iteration over a container in a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>A QAssociativeIterable::iterator can only be created by a <db:link xlink:href="qassociativeiterable.xml">QAssociativeIterable</db:link> instance, and can be used in a way similar to other stl-style iterators.</db:para>
<db:para>This typedef was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qassociativeiterable.xml">QAssociativeIterable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="containsKey">
<db:title>bool QAssociativeIterable::containsKey(const QVariant &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>containsKey</db:methodname>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool containsKey(const QVariant &amp;key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the container has an entry with the given <db:code role="parameter">key</db:code>, or false otherwise. If the <db:code role="parameter">key</db:code> isn't convertible to the expected type, false is returned.</db:para>
</db:section>
<db:section xml:id="find">
<db:title>QAssociativeIterable::const_iterator QAssociativeIterable::find(const QVariant &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAssociativeIterable::const_iterator</db:type>
<db:methodname>find</db:methodname>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAssociativeIterable::const_iterator find(const QVariant &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves a <db:link xlink:href="qassociativeiterable.xml#const_iterator-typedef">const_iterator</db:link> pointing to the element at the given <db:code role="parameter">key</db:code>, or the end of the container if that key does not exist. If the <db:code role="parameter">key</db:code> isn't convertible to the expected type, the end of the container is returned.</db:para>
</db:section>
<db:section xml:id="insertKey">
<db:title>void QAssociativeIterable::insertKey(const QVariant &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertKey</db:methodname>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertKey(const QVariant &amp;key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a new entry with the given <db:code role="parameter">key</db:code>, or resets the mapped value of any existing entry with the given <db:code role="parameter">key</db:code> to the default constructed mapped value. The <db:code role="parameter">key</db:code> is coerced to the expected type: If it isn't convertible, a default value is inserted.</db:para>
</db:section>
<db:section xml:id="mutableFind">
<db:title>QAssociativeIterable::iterator QAssociativeIterable::mutableFind(const QVariant &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QAssociativeIterable::iterator</db:type>
<db:methodname>mutableFind</db:methodname>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAssociativeIterable::iterator mutableFind(const QVariant &amp;key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves an iterator pointing to the element at the given <db:code role="parameter">key</db:code>, or the end of the container if that key does not exist. If the <db:code role="parameter">key</db:code> isn't convertible to the expected type, the end of the container is returned.</db:para>
</db:section>
<db:section xml:id="removeKey">
<db:title>void QAssociativeIterable::removeKey(const QVariant &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeKey</db:methodname>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeKey(const QVariant &amp;key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the entry with the given <db:code role="parameter">key</db:code> from the container. The <db:code role="parameter">key</db:code> is coerced to the expected type: If it isn't convertible, the default value is removed.</db:para>
</db:section>
<db:section xml:id="setValue">
<db:title>void QAssociativeIterable::setValue(const QVariant &amp;<db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>mapped</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setValue</db:methodname>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>mapped</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setValue(const QVariant &amp;key, const QVariant &amp;mapped)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the mapped value associated with <db:code role="parameter">key</db:code> to <db:code role="parameter">mapped</db:code>, if possible. Inserts a new entry if none exists yet, for the given <db:code role="parameter">key</db:code>. If the <db:code role="parameter">key</db:code> is not convertible to the key type, the value for the default-constructed key type is overwritten.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qassociativeiterable.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>QVariant QAssociativeIterable::value(const QVariant &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>value</db:methodname>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant value(const QVariant &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the mapped value at the given <db:code role="parameter">key</db:code>, or a default-constructed <db:link xlink:href="qvariant.xml">QVariant</db:link> of the mapped type, if the key does not exist. If the <db:code role="parameter">key</db:code> is not convertible to the key type, the mapped value associated with the default-constructed key is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qassociativeiterable.xml#setValue">setValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
