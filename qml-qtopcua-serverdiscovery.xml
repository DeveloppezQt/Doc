<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ServerDiscovery QML Type</db:title>
<db:productname>QtOpcUa</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>An OPC UA module for Qt</db:titleabbrev>
<db:abstract>
<db:para>Provides information about available servers.</db:para>
<db:para>This type was introduced in QtOpcUa 5.13.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtOpcUa</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtOpcUa 5.13</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Allows to fetch and access information about servers known to a server or discovery server.</db:para>
<db:programlisting language="qml">QtOpcUa.Connection {
    id: connection
    backend: availableBackends[0]
    defaultConnection: true
}

QtOpcUa.ServerDiscovery {
    discoveryUrl: &quot;opc.tcp://127.0.0.1:43344&quot;
    onServersChanged: {
        if (status.isGood) {
            if (status.status == QtOpcUa.Status.GoodCompletesAsynchronusly)
                return; // wait until finished
            if (count &amp;gt; 0) {
                // choose right server
                endpointDiscovery.serverUrl = at(0).discoveryUrls[0];
                console.log(&quot;Using server URL:&quot;, endpointDiscovery.serverUrl);
            } else {
                // no servers retrieved
            }
        } else {
            // Fetching servers failed
            console.log(&quot;Error fetching server:&quot;, servers.status.status);
        }
    }
}

QtOpcUa.EndpointDiscovery {
    id: endpointDiscovery
    onEndpointsChanged: {
        if (status.isGood) {
            if (status.status == QtOpcUa.Status.GoodCompletesAsynchronusly)
                return; // wait until finished
            if (count &amp;gt; 0) {
                // choose right endpoint
                console.log(&quot;Using endpoint&quot;, at(0).endpointUrl, at(0).securityPolicy);
                connection.connectToEndpoint(at(0));
            } else {
                // no endpoints retrieved
            }
        } else {
            // Fetching endpoints failed
            console.log(&quot;Error fetching endpoints:&quot;, status.status);
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="connection-prop">
<db:title>connection : Connection</db:title>
<db:fieldsynopsis>
<db:type>Connection</db:type>
<db:varname>connection</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The connection to be used for requesting information.</db:para>
<db:para>If this property is not set, the default connection will be used, if any.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtopcua-connection.xml">Connection</db:link></db:member>
<db:member><db:link xlink:href="qml-qtopcua-connection.xml#defaultConnection-prop">Connection::defaultConnection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count-prop">
<db:title>count : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>count</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Current number of servers in this element. Before using any data from this server discovery, you should check <db:link xlink:href="qml-qtopcua-serverdiscovery.xml#status-prop">status</db:link> if retrieval of the information was successful.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtopcua-serverdiscovery.xml#status-prop">status</db:link></db:member>
<db:member><db:link xlink:href="qml-qtopcua-status.xml">Status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="discoveryUrl-prop">
<db:title>discoveryUrl : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>discoveryUrl</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>URL of the server to retrieve the list of servers from. Every time the URL is changed, a request to the given server is started.</db:para>
<db:para>When starting the request, the list of available servers is cleared and the status is set to <db:link xlink:href="qml-qtopcua-status.xml#Status-propx">Status.GoodCompletesAsynchronously</db:link>. Once the request is finished, <db:link xlink:href="qml-qtopcua-serverdiscovery.xml#status-prop">status</db:link> changes. Make sure to check the <db:link xlink:href="qml-qtopcua-serverdiscovery.xml#status-prop">status</db:link> before accessing the list of servers.</db:para>
<db:programlisting language="cpp">onServersChanged: {
        if (status.isGood) {
            if (status.status == QtOpcUa.Status.GoodCompletesAsynchronusly)
                return; // wait until finished
            if (count &amp;gt; 0) {
                var serverUrl = at(0).serverUrl();
                console.log(serverUrl);
            }
        } else {
            // handle error
        }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtopcua-applicationdescription.xml">ApplicationDescription</db:link></db:member>
<db:member><db:link xlink:href="qml-qtopcua-serverdiscovery.xml#status-prop">status</db:link></db:member>
<db:member><db:link xlink:href="qml-qtopcua-serverdiscovery.xml#at-method">at</db:link></db:member>
<db:member><db:link xlink:href="qml-qtopcua-serverdiscovery.xml#count-prop">count</db:link></db:member>
<db:member><db:link xlink:href="qml-qtopcua-status.xml">Status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="status-prop">
<db:title>status : Status</db:title>
<db:fieldsynopsis>
<db:type>Status</db:type>
<db:varname>status</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The current status of this element. In case the last retrieval of servers was successful, the status should be <db:code>Status.Good</db:code>.</db:para>
<db:programlisting language="cpp">if (status.isGood) {
    // Choose endpoint to connect to
} else {
    // handle error
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtopcua-status.xml">Status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="at-method">
<db:title>ApplicationDescription at(<db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns the application description at given <db:code role="parameter">index</db:code>. In case there are no servers available or the index is invalid, an invalid application description is returned. Before using any returned data, you should check <db:link xlink:href="qml-qtopcua-serverdiscovery.xml#status-prop">status</db:link> if retrieval of the information was successful.</db:para>
<db:programlisting language="cpp">if (servers.status.isGood) {
    if (servers.count &amp;gt; 0)
        var serverUrl = at(0).serverUrl();
        console.log(serverUrl);
        // Choose endpoint to connect to
} else {
    // handle error
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtopcua-serverdiscovery.xml#count-prop">count</db:link></db:member>
<db:member><db:link xlink:href="qml-qtopcua-serverdiscovery.xml#status-prop">status</db:link></db:member>
<db:member><db:link xlink:href="qml-qtopcua-applicationdescription.xml">ApplicationDescription</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
