<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuick3DInstancing Class</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Base class for defining instance tables.</db:para>
<db:para>This class was introduced in Qt 6.2.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuick3DInstancing</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtquick3d-instancing.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qquick3dobject.xml" xlink:role="class">QQuick3DObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qquick3dinstancing.xml">QQuick3DInstancing</db:link> class can be inherited to specify a custom instance table for a Model in the Qt Quick 3D scene.</db:para>
<db:para>This class is abstract: To use it, create a subclass and implement <db:link xlink:href="qquick3dinstancing.xml#getInstanceBuffer">getInstanceBuffer</db:link>().</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="depthSortingEnabled-prop">
<db:title>depthSortingEnabled : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>depthSortingEnabled</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">depthSortingEnabled</db:synopsisinfo>
<db:synopsisinfo role="setter">setDepthSortingEnabled</db:synopsisinfo>
<db:synopsisinfo role="notifier">depthSortingEnabledChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the depth sorting enabled value for the instance table. When enabled, instances are sorted and rendered from the furthest instance from the camera to the nearest i.e. back-to-front. If disabled, which is the default, instances are rendered in the order they are specified in the instance table.</db:para>
<db:note>
<db:para>The instances are only sorted against each other. Instances are not sorted against other objects in the scene.</db:para>
</db:note>
<db:note>
<db:para>The sorting increases the frame preparation time especially with large instance counts.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">depthSortingEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDepthSortingEnabled</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">depthSortingEnabledChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="hasTransparency-prop">
<db:title>hasTransparency : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>hasTransparency</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">hasTransparency</db:synopsisinfo>
<db:synopsisinfo role="setter">setHasTransparency</db:synopsisinfo>
<db:synopsisinfo role="notifier">hasTransparencyChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Set this property to true if the instancing table contains alpha values that should be used when rendering the model. This property only makes a difference if the model is opaque: If the model has a transparent <db:link xlink:href="qml-qtquick3d-model.xml#materials-prop">material</db:link>, or an <db:link xlink:href="qml-qtquick3d-node.xml#opacity-prop">opacity</db:link> less than one, the alpha value from the table will be used regardless.</db:para>
<db:note>
<db:para>Enabling alpha blending may cause rendering issues when instances overlap. See the <db:link xlink:href="quick3d-instancing.xml#alpha-blending-and-instancing">alpha blending and instancing</db:link> documentation for details.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">hasTransparency</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHasTransparency</db:emphasis>(<db:type>bool</db:type> <db:emphasis>hasTransparency</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">hasTransparencyChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="instanceCountOverride-prop">
<db:title>instanceCountOverride : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>instanceCountOverride</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">instanceCountOverride</db:synopsisinfo>
<db:synopsisinfo role="setter">setInstanceCountOverride</db:synopsisinfo>
<db:synopsisinfo role="notifier">instanceCountOverrideChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Set this property to limit the number of instances without regenerating or re-uploading the instance table. This allows very inexpensive animation of the number of instances rendered.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">instanceCountOverride</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setInstanceCountOverride</db:emphasis>(<db:type>int</db:type> <db:emphasis>instanceCountOverride</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">instanceCountOverrideChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="calculateTableEntry">
<db:title>[static protected] QQuick3DInstancing::InstanceTableEntry QQuick3DInstancing::calculateTableEntry(const QVector3D &amp;<db:emphasis>position</db:emphasis>, const QVector3D &amp;<db:emphasis>scale</db:emphasis>, const QVector3D &amp;<db:emphasis>eulerRotation</db:emphasis>, const QColor &amp;<db:emphasis>color</db:emphasis>, const QVector4D &amp;<db:emphasis>customData</db:emphasis> = {})</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QQuick3DInstancing::InstanceTableEntry</db:type>
<db:methodname>calculateTableEntry</db:methodname>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>scale</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>eulerRotation</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector4D &amp;</db:type>
<db:parameter>customData</db:parameter>
<db:initializer>{}</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuick3DInstancing::InstanceTableEntry calculateTableEntry(const QVector3D &amp;position, const QVector3D &amp;scale, const QVector3D &amp;eulerRotation, const QColor &amp;color, const QVector4D &amp;customData)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the <db:code role="parameter">position</db:code> <db:code role="parameter">scale</db:code> <db:code role="parameter">eulerRotation</db:code> <db:code role="parameter">color</db:code> and <db:code role="parameter">customData</db:code> to the instance table format expected by the standard vertex shaders. Typical pattern:</db:para>
<db:programlisting language="cpp">QByteArray MyInstanceTable::getInstanceBuffer(int *instanceCount)
{
    QByteArray instanceData;

    ...

    auto entry = calculateTableEntry({xPos, yPos, zPos}, {xScale, yScale, zScale}, {xRot, yRot, zRot}, color, {});
    instanceData.append(reinterpret_cast&amp;lt;const char *&amp;gt;(&amp;amp;entry), sizeof(entry));
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquick3dinstancing.xml#calculateTableEntryFromQuaternion">calculateTableEntryFromQuaternion</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="calculateTableEntryFromQuaternion">
<db:title>[static protected] QQuick3DInstancing::InstanceTableEntry QQuick3DInstancing::calculateTableEntryFromQuaternion(const QVector3D &amp;<db:emphasis>position</db:emphasis>, const QVector3D &amp;<db:emphasis>scale</db:emphasis>, const QQuaternion &amp;<db:emphasis>rotation</db:emphasis>, const QColor &amp;<db:emphasis>color</db:emphasis>, const QVector4D &amp;<db:emphasis>customData</db:emphasis> = {})</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QQuick3DInstancing::InstanceTableEntry</db:type>
<db:methodname>calculateTableEntryFromQuaternion</db:methodname>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>scale</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QQuaternion &amp;</db:type>
<db:parameter>rotation</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector4D &amp;</db:type>
<db:parameter>customData</db:parameter>
<db:initializer>{}</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuick3DInstancing::InstanceTableEntry calculateTableEntryFromQuaternion(const QVector3D &amp;position, const QVector3D &amp;scale, const QQuaternion &amp;rotation, const QColor &amp;color, const QVector4D &amp;customData)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the <db:code role="parameter">position</db:code> <db:code role="parameter">scale</db:code> <db:code role="parameter">rotation</db:code> <db:code role="parameter">color</db:code> and <db:code role="parameter">customData</db:code> to the instance table format expected by the standard vertex shaders.</db:para>
<db:para>This is the same as <db:link xlink:href="qquick3dinstancing.xml#calculateTableEntry">calculateTableEntry</db:link>(), except for using a quaternion to specify the rotation.</db:para>
</db:section>
<db:section xml:id="getInstanceBuffer">
<db:title>[pure virtual protected] QByteArray QQuick3DInstancing::getInstanceBuffer(int *<db:emphasis>instanceCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>getInstanceBuffer</db:methodname>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>instanceCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray getInstanceBuffer(int *instanceCount) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implement this function to return the contents of the instance table. The number of instances should be returned in <db:code role="parameter">instanceCount</db:code>. The subclass is responsible for caching the result if necessary. If the instance table changes, the subclass should call <db:link xlink:href="qquick3dinstancing.xml#markDirty">markDirty</db:link>().</db:para>
</db:section>
<db:section xml:id="markDirty">
<db:title>[protected] void QQuick3DInstancing::markDirty()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>markDirty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void markDirty()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Mark that the instance data has changed and must be uploaded again.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquick3dinstancing.xml#getInstanceBuffer">getInstanceBuffer</db:link></db:member>
<db:member><db:link xlink:href="qquick3dinstancing.xml#instanceCountOverride-prop">instanceCountOverride</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
