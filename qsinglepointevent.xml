<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSinglePointEvent Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A base class for pointer events containing a single point, such as mouse events.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSinglePointEvent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpointerevent.xml" xlink:role="class">QPointerEvent</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qenterevent.xml" xlink:role="class">QEnterEvent</db:link>, <db:link xlink:href="qhoverevent.xml" xlink:role="class">QHoverEvent</db:link>, <db:link xlink:href="qmouseevent.xml" xlink:role="class">QMouseEvent</db:link>, <db:link xlink:href="qnativegestureevent.xml" xlink:role="class">QNativeGestureEvent</db:link>, <db:link xlink:href="qtabletevent.xml" xlink:role="class">QTabletEvent</db:link>, and <db:link xlink:href="qwheelevent.xml" xlink:role="class">QWheelEvent</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="exclusivePointGrabber-prop">
<db:title>exclusivePointGrabber : QObject*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QObject*</db:type>
<db:varname>exclusivePointGrabber</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">exclusivePointGrabber</db:synopsisinfo>
<db:synopsisinfo role="setter">setExclusivePointGrabber</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the object that will receive future updates</db:para>
<db:para>The exclusive grabber is an object that has chosen to receive all future update events and the release event containing the same point that this event carries.</db:para>
<db:para>Setting the exclusivePointGrabber property is a convenience equivalent to:</db:para>
<db:programlisting language="cpp">setExclusiveGrabber(points().first(), exclusiveGrabber);
</db:programlisting>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qobject.xml">QObject</db:link></db:type> *<db:emphasis role="bold">exclusivePointGrabber</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setExclusivePointGrabber</db:emphasis>(<db:type><db:link xlink:href="qobject.xml">QObject</db:link></db:type> *<db:emphasis>exclusiveGrabber</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="button">
<db:title>Qt::MouseButton QSinglePointEvent::button() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::MouseButton</db:type>
<db:methodname>button</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::MouseButton button() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the button that caused the event.</db:para>
<db:para>The returned value is always <db:link xlink:href="qt.xml#MouseButton-enum">Qt::NoButton</db:link> for mouse move events, as well as <db:link xlink:href="qevent.xml#Type-enum">TabletMove</db:link>, <db:link xlink:href="qevent.xml#Type-enum">TabletEnterProximity</db:link>, and <db:link xlink:href="qevent.xml#Type-enum">TabletLeaveProximity</db:link> events.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsinglepointevent.xml#buttons">buttons</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="buttons">
<db:title>Qt::MouseButtons QSinglePointEvent::buttons() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::MouseButtons</db:type>
<db:methodname>buttons</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::MouseButtons buttons() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the button state when the event was generated.</db:para>
<db:para>The button state is a combination of <db:link xlink:href="qt.xml#MouseButton-enum">Qt::LeftButton</db:link>, <db:link xlink:href="qt.xml#MouseButton-enum">Qt::RightButton</db:link>, and <db:link xlink:href="qt.xml#MouseButton-enum">Qt::MiddleButton</db:link> using the OR operator.</db:para>
<db:para>For mouse move or <db:link xlink:href="qevent.xml#Type-enum">TabletMove</db:link> events, this is all buttons that are pressed down.</db:para>
<db:para>For mouse press, double click, or <db:link xlink:href="qevent.xml#Type-enum">TabletPress</db:link> events, this includes the button that caused the event.</db:para>
<db:para>For mouse release or <db:link xlink:href="qevent.xml#Type-enum">TabletRelease</db:link> events, this excludes the button that caused the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsinglepointevent.xml#button">button</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="globalPosition">
<db:title>QPointF QSinglePointEvent::globalPosition() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>globalPosition</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF globalPosition() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position of the point in this event on the screen or virtual desktop.</db:para>
<db:note>
<db:para>The global position of a mouse pointer is recorded <db:emphasis>at the time of the event</db:emphasis>. This is important on asynchronous window systems such as X11; whenever you move your widgets around in response to mouse events, globalPosition() can differ a lot from the current cursor position returned by <db:link xlink:href="qcursor.xml#pos">QCursor::pos</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsinglepointevent.xml#position">position</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isBeginEvent">
<db:title>[override virtual] bool QSinglePointEvent::isBeginEvent() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isBeginEvent</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isBeginEvent() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this event represents a <db:link xlink:href="qsinglepointevent.xml#button">button</db:link> being pressed.</db:para>
</db:section>
<db:section xml:id="isEndEvent">
<db:title>[override virtual] bool QSinglePointEvent::isEndEvent() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEndEvent</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEndEvent() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this event represents a <db:link xlink:href="qsinglepointevent.xml#button">button</db:link> being released.</db:para>
</db:section>
<db:section xml:id="isUpdateEvent">
<db:title>[override virtual] bool QSinglePointEvent::isUpdateEvent() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isUpdateEvent</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isUpdateEvent() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this event does not include a change in <db:link xlink:href="qsinglepointevent.xml#buttons">button state</db:link>.</db:para>
</db:section>
<db:section xml:id="position">
<db:title>QPointF QSinglePointEvent::position() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>position</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF position() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position of the point in this event, relative to the widget or item that received the event.</db:para>
<db:para>If you move your widgets around in response to mouse events, use <db:link xlink:href="qsinglepointevent.xml#globalPosition">globalPosition</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsinglepointevent.xml#globalPosition">globalPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scenePosition">
<db:title>QPointF QSinglePointEvent::scenePosition() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>scenePosition</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF scenePosition() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position of the point in this event, relative to the window or scene.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventpoint.xml#scenePosition-prop">QEventPoint::scenePosition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
