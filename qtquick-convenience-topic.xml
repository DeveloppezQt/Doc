<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Important Concepts In Qt Quick - Convenience Types</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Overview of the convenience types for QML core features.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>In a highly dynamic user interface, the application developer will often wish to react to events and trigger various response logic. QML has built-in support for these concepts through bindings, signals and signal handlers, and dynamic object instantiation, but Qt Quick expands upon the support provided by the language with various convenience types.</db:para>
<db:section xml:id="dynamic-object-instantiation">
<db:title>Dynamic Object Instantiation</db:title>
<db:para>QML provides a number of ways to dynamically create and manage QML objects.</db:para>
<db:para>Objects can be created dynamically from within imperative JavaScript code in various ways. See <db:link xlink:href="qtqml-javascript-dynamicobjectcreation.xml">Dynamic QML object creation from JavaScript</db:link> for more details.</db:para>
<db:para>Qt Quick provides the <db:link xlink:href="qml-qtquick-loader.xml">Loader</db:link>, <db:link xlink:href="qml-qtquick-repeater.xml">Repeater</db:link>, <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>, <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link> and <db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link> types which also support dynamic object management, and provide a declarative API.</db:para>
<db:para>Please see the <db:link xlink:href="qtquick-performance.xml">performance guide</db:link> for more information on using dynamic instantiation and lazy initialization to improve application performance.</db:para>
</db:section>
<db:section xml:id="dynamic-bindings">
<db:title>Dynamic Bindings</db:title>
<db:para><db:link xlink:href="qtqml-syntax-propertybinding.xml">Property bindings</db:link> are a fundamental feature of QML. Typically, a property is initialized with its binding. However, the <db:link xlink:href="qml-qtqml-binding.xml">Binding</db:link> type and <db:link xlink:href="qml-qtqml-qt.xml#binding-method">Qt.binding</db:link>() function allows the client to dynamically bind properties from any object at run-time, and modify the binding target when required (or when it becomes available).</db:para>
</db:section>
<db:section xml:id="dynamic-signal-connections">
<db:title>Dynamic Signal Connections</db:title>
<db:para>QML supports dynamic signal connections through a signal's <db:code>connect()</db:code> method. The <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> module provides the convenience <db:link xlink:href="qml-qtqml-connections.xml">Connections</db:link> type which allows setting up a signal connection involving an object which isn't part of the static object hierarchy. It also allows the connection to be dynamically retargeted at runtime, which allows an application to process different signal notifications with different functions depending on the program state.</db:para>
<db:para>By declaring a <db:link xlink:href="qml-qtqml-connections.xml">Connections</db:link> instance, the client can dynamically cause signals emitted by one object to trigger methods of another object, and can modify the connection target when required (or when it becomes available).</db:para>
</db:section>
<db:section xml:id="timer-based-events">
<db:title>Timer-Based Events</db:title>
<db:para>Another common use-case is to trigger functionality some specified period of time after a particular event occurs. These sort of timer-based triggers are supported in Qt Quick through the <db:link xlink:href="qml-qtqml-timer.xml">Timer</db:link> type. Both single-shot and recurring timers are supported.</db:para>
</db:section>
</db:article>
