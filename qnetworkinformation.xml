<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNetworkInformation Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link> exposes various network information through native backends.</db:para>
<db:para>This class was introduced in Qt 6.1.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNetworkInformation</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link> provides a cross-platform interface to network-related information through plugins.</db:para>
<db:para>Various plugins can have various functionality supported, and so you can load() plugins based on which features are needed.</db:para>
<db:para><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link> is a singleton and stays alive from the first successful load() until destruction of the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> object. If you destroy and re-create the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> object you must call load() again.</db:para>
<db:note>
<db:para>Because the class is a singleton while also relying on <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link>, <db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link> should always first be loaded in the same thread as the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> object. This is because the object will also be destroyed in this thread, and various backend-specific components may rely on being destroyed in the same thread as it is created.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkinformation.xml#Feature-enum">QNetworkInformation::Feature</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Feature-enum">
<db:title>enum QNetworkInformation::Feature</db:title>
<db:bridgehead renderas="sect2">flags QNetworkInformation::Features</db:bridgehead>
<db:para>Lists all of the features that a plugin may currently support. This can be used in QNetworkInformation::load().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link></db:emphasis>::<db:emphasis role="bold">Feature</db:emphasis>::Reachability</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>If the plugin supports this feature then the reachability property will provide useful results. Otherwise it will always return Reachability::Unknown. See also <db:link xlink:href="qnetworkinformation.xml#Reachability-enum">QNetworkInformation::Reachability</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link></db:emphasis>::<db:emphasis role="bold">Feature</db:emphasis>::CaptivePortal</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>If the plugin supports this feature then the isBehindCaptivePortal property will provide useful results. Otherwise it will always return false.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link></db:emphasis>::<db:emphasis role="bold">Feature</db:emphasis>::TransportMedium</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>If the plugin supports this feature then the transportMedium property will provide useful results. Otherwise it will always return TransportMedium::Unknown. See also <db:link xlink:href="qnetworkinformation.xml#TransportMedium-enum">QNetworkInformation::TransportMedium</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link></db:emphasis>::<db:emphasis role="bold">Feature</db:emphasis>::Metered</db:code></db:para>
</db:td>
<db:td><db:code>0x8</db:code></db:td>
<db:td>
<db:para>If the plugin supports this feature then the isMetered property will provide useful results. Otherwise it will always return false.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Features</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Feature&gt;. </db:code>It stores an OR combination of <db:code>Feature</db:code> values.</db:para>
</db:section>
<db:section xml:id="Reachability-enum">
<db:title>enum QNetworkInformation::Reachability</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link></db:emphasis>::<db:emphasis role="bold">Reachability</db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>If this value is returned then we may be connected but the OS has still not confirmed full connectivity, or this feature is not supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link></db:emphasis>::<db:emphasis role="bold">Reachability</db:emphasis>::Disconnected</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Indicates that the system may have no connectivity at all.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link></db:emphasis>::<db:emphasis role="bold">Reachability</db:emphasis>::Local</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Indicates that the system is connected to a network, but it might only be able to access devices on the local network.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link></db:emphasis>::<db:emphasis role="bold">Reachability</db:emphasis>::Site</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Indicates that the system is connected to a network, but it might only be able to access devices on the local subnet or an intranet.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link></db:emphasis>::<db:emphasis role="bold">Reachability</db:emphasis>::Online</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Indicates that the system is connected to a network and able to access the Internet.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkinformation.xml#reachability-prop">QNetworkInformation::reachability</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="TransportMedium-enum">
<db:title>[since 6.3] enum QNetworkInformation::TransportMedium</db:title>
<db:para>Lists the currently recognized media with which one can connect to the internet.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link></db:emphasis>::<db:emphasis role="bold">TransportMedium</db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Returned if either the OS reports no active medium, the active medium is not recognized by Qt, or the TransportMedium feature is not supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link></db:emphasis>::<db:emphasis role="bold">TransportMedium</db:emphasis>::Ethernet</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Indicates that the currently active connection is using ethernet. Note: This value may also be returned when Windows is connected to a Bluetooth personal area network.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link></db:emphasis>::<db:emphasis role="bold">TransportMedium</db:emphasis>::Cellular</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Indicates that the currently active connection is using a cellular network.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link></db:emphasis>::<db:emphasis role="bold">TransportMedium</db:emphasis>::WiFi</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Indicates that the currently active connection is using Wi-Fi.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link></db:emphasis>::<db:emphasis role="bold">TransportMedium</db:emphasis>::Bluetooth</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Indicates that the currently active connection is connected using Bluetooth.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkinformation.xml#transportMedium-prop">QNetworkInformation::transportMedium</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="isBehindCaptivePortal-prop">
<db:title>[read-only, since 6.2] isBehindCaptivePortal : const bool</db:title>
<db:para>Lets you know if the user's device is behind a captive portal.</db:para>
<db:para>This property indicates if the user's device is currently known to be behind a captive portal. This functionality relies on the operating system's detection of captive portals and is not supported on systems that don't report this. On systems where this is not supported this will always return false.</db:para>
<db:para>This property was introduced in Qt 6.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isBehindCaptivePortal</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">isBehindCaptivePortalChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>state</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="isMetered-prop">
<db:title>[read-only, since 6.3] isMetered : const bool</db:title>
<db:para>Check if the current connection is metered</db:para>
<db:para>This property returns whether the current connection is (known to be) metered or not. You can use this as a guiding factor to decide whether your application should perform certain network requests or uploads. For instance, you may not want to upload logs or diagnostics while this property is true.</db:para>
<db:para>This property was introduced in Qt 6.3.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isMetered</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">isMeteredChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>isMetered</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="reachability-prop">
<db:title>[read-only] reachability : const Reachability</db:title>
<db:para>This property holds the current state of the system's network connectivity.</db:para>
<db:para>Indicates the level of connectivity that can be expected. Do note that this is only based on what the plugin/operating system reports. In certain scenarios this is known to be wrong. For example, on Windows the 'Online' check, by default, is performed by Windows connecting to a Microsoft-owned server. If this server is for any reason blocked then it will assume it does not have Online reachability. Because of this you should not use this as a pre-check before attempting to make a connection.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qnetworkinformation.xml#Reachability-enum">QNetworkInformation::Reachability</db:link></db:type> <db:emphasis role="bold">reachability</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">reachabilityChanged</db:emphasis>(<db:type><db:link xlink:href="qnetworkinformation.xml#Reachability-enum">QNetworkInformation::Reachability</db:link></db:type> <db:emphasis>newReachability</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="transportMedium-prop">
<db:title>[read-only, since 6.3] transportMedium : const TransportMedium</db:title>
<db:para>This property holds the currently active transport medium for the application</db:para>
<db:para>This property returns the currently active transport medium for the application, on operating systems where such information is available.</db:para>
<db:para>When the current transport medium changes a signal is emitted, this can, for instance, occur when a user leaves the range of a <db:link xlink:href="qnetworkinformation.xml#TransportMedium-enum">WiFi</db:link> network, unplugs their ethernet cable or enables Airplane mode.</db:para>
<db:para>This property was introduced in Qt 6.3.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qnetworkinformation.xml#TransportMedium-enum">QNetworkInformation::TransportMedium</db:link></db:type> <db:emphasis role="bold">transportMedium</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">transportMediumChanged</db:emphasis>(<db:type><db:link xlink:href="qnetworkinformation.xml#TransportMedium-enum">QNetworkInformation::TransportMedium</db:link></db:type> <db:emphasis>current</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="availableBackends">
<db:title>[static] QStringList QNetworkInformation::availableBackends()</db:title>
<db:para>Returns a list of the names of all currently available backends.</db:para>
</db:section>
<db:section xml:id="backendName">
<db:title>QString QNetworkInformation::backendName() const</db:title>
<db:para>Returns the name of the currently loaded backend.</db:para>
</db:section>
<db:section xml:id="instance">
<db:title>[static] QNetworkInformation *QNetworkInformation::instance()</db:title>
<db:para>Returns a pointer to the instance of the <db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link>, if any.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkinformation.xml#load" role="deprecated">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loadBackendByFeatures">
<db:title>[static, since 6.4] bool QNetworkInformation::loadBackendByFeatures(QNetworkInformation::Features <db:emphasis>features</db:emphasis>)</db:title>
<db:para>Load a backend which supports <db:code role="parameter">features</db:code>.</db:para>
<db:para>Returns true if it managed to load the requested backend or if it was already loaded. Returns false otherwise.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkinformation.xml#instance">instance</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loadBackendByName">
<db:title>[static, since 6.4] bool QNetworkInformation::loadBackendByName(QStringView <db:emphasis>backend</db:emphasis>)</db:title>
<db:para>Attempts to load a backend whose name matches <db:code role="parameter">backend</db:code> (case insensitively).</db:para>
<db:para>Returns true if it managed to load the requested backend or if it was already loaded. Returns false otherwise.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkinformation.xml#instance">instance</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loadDefaultBackend">
<db:title>[static, since 6.3] bool QNetworkInformation::loadDefaultBackend()</db:title>
<db:para>Attempts to load the platform-default backend.</db:para>
<db:note>
<db:para>Starting with 6.7 this tries to load any backend that supports <db:link xlink:href="qnetworkinformation.xml#Feature-enum">Reachability</db:link> if the platform-default backend is not available or fails to load. If this also fails it will fall back to a backend that only returns the default values for all properties.</db:para>
</db:note>
<db:para>This platform-to-plugin mapping is as follows:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Platform</db:para>
</db:th>
<db:th>
<db:para>Plugin-name</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Windows</db:para>
</db:td>
<db:td>
<db:para>networklistmanager</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Apple (macOS/iOS)</db:para>
</db:td>
<db:td>
<db:para>scnetworkreachability</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Android</db:para>
</db:td>
<db:td>
<db:para>android</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Linux</db:para>
</db:td>
<db:td>
<db:para>networkmanager</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This function is provided for convenience where the logic earlier is good enough. If you require a specific plugin then you should call <db:link xlink:href="qnetworkinformation.xml#loadBackendByName">loadBackendByName</db:link>() or <db:link xlink:href="qnetworkinformation.xml#loadBackendByFeatures">loadBackendByFeatures</db:link>() directly instead.</db:para>
<db:para>Determines a suitable backend to load and returns true if this backend is already loaded or on successful loading of it. Returns false if any other backend has already been loaded, or if loading of the selected backend fails.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkinformation.xml#instance">instance</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkinformation.xml#load" role="deprecated">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedFeatures">
<db:title>[since 6.3] QNetworkInformation::Features QNetworkInformation::supportedFeatures() const</db:title>
<db:para>Returns all the supported features of the current backend.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="supports">
<db:title>bool QNetworkInformation::supports(QNetworkInformation::Features <db:emphasis>features</db:emphasis>) const</db:title>
<db:para>Returns true if the currently loaded backend supports <db:code role="parameter">features</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QNetworkInformation</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="load">
<db:title>[static, deprecated in 6.4] bool QNetworkInformation::load(QNetworkInformation::Features <db:emphasis>features</db:emphasis>)</db:title>
<db:para>This function is deprecated since 6.4. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qnetworkinformation.xml#loadBackendByFeatures">loadBackendByFeatures</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkinformation.xml#loadBackendByName">loadBackendByName</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkinformation.xml#loadDefaultBackend">loadDefaultBackend</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkinformation.xml#loadBackendByFeatures">loadBackendByFeatures</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="load-1">
<db:title>[static, deprecated in 6.4] bool QNetworkInformation::load(QStringView <db:emphasis>backend</db:emphasis>)</db:title>
<db:para>This function is deprecated since 6.4. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qnetworkinformation.xml#loadBackendByName">loadBackendByName</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkinformation.xml#loadBackendByName">loadBackendByName</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkinformation.xml#loadDefaultBackend">loadDefaultBackend</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkinformation.xml#loadBackendByFeatures">loadBackendByFeatures</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
