<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QAbstractButton Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link> class is the abstract base class of button widgets, providing functionality common to buttons.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractButton</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qcheckbox.xml" xlink:role="class">QCheckBox</db:link>, <db:link xlink:href="qpushbutton.xml" xlink:role="class">QPushButton</db:link>, <db:link xlink:href="qradiobutton.xml" xlink:role="class">QRadioButton</db:link>, and <db:link xlink:href="qtoolbutton.xml" xlink:role="class">QToolButton</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractButton is part of <db:simplelist><db:member>abstractwidgets</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class implements an <db:emphasis>abstract</db:emphasis> button. Subclasses of this class handle user actions, and specify how the button is drawn.</db:para>
<db:para><db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link> provides support for both push buttons and checkable (toggle) buttons. Checkable buttons are implemented in the <db:link xlink:href="qradiobutton.xml">QRadioButton</db:link> and <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link> classes. Push buttons are implemented in the <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> and <db:link xlink:href="qtoolbutton.xml">QToolButton</db:link> classes; these also provide toggle behavior if required.</db:para>
<db:para>Any button can display a label containing text and an icon. setText() sets the text; setIcon() sets the icon. If a button is disabled, its label is changed to give the button a &quot;disabled&quot; appearance.</db:para>
<db:para>If the button is a text button with a string containing an ampersand ('&amp;'), <db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link> automatically creates a shortcut key. For example:</db:para>
<db:programlisting language="cpp">QPushButton *button = new QPushButton(tr(&quot;Ro&amp;ck &amp;&amp; Roll&quot;), this);
</db:programlisting>
<db:para>The <db:guilabel>Alt+C</db:guilabel> shortcut is assigned to the button, i.e., when the user presses <db:guilabel>Alt+C</db:guilabel> the button will call <db:link xlink:href="qabstractbutton.xml#animateClick">animateClick</db:link>(). See the <db:link xlink:href="qshortcut.xml#mnemonic">QShortcut</db:link> documentation for details. To display an actual ampersand, use '&amp;&amp;'.</db:para>
<db:para>You can also set a custom shortcut key using the setShortcut() function. This is useful mostly for buttons that do not have any text, and therefore can't have any automatic shortcut.</db:para>
<db:programlisting language="cpp">button-&gt;setIcon(QIcon(&quot;:/images/print.png&quot;));
button-&gt;setShortcut(tr(&quot;Alt+F7&quot;));
</db:programlisting>
<db:para>All the buttons provided by Qt (<db:link xlink:href="qpushbutton.xml">QPushButton</db:link>, <db:link xlink:href="qtoolbutton.xml">QToolButton</db:link>, <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link>, and <db:link xlink:href="qradiobutton.xml">QRadioButton</db:link>) can display both text and <db:link xlink:href="stylesheet-reference.xml#icon">icons</db:link>.</db:para>
<db:para>A button can be made the default button in a dialog by means of QPushButton::setDefault() and QPushButton::setAutoDefault().</db:para>
<db:para><db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link> provides most of the states used for buttons:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>isDown() indicates whether the button is <db:emphasis>pressed</db:emphasis> down.</db:para>
</db:listitem>
<db:listitem>
<db:para>isChecked() indicates whether the button is <db:emphasis>checked</db:emphasis>. Only checkable buttons can be checked and unchecked (see below).</db:para>
</db:listitem>
<db:listitem>
<db:para>isEnabled() indicates whether the button can be pressed by the user.</db:para>
<db:note>
<db:para>As opposed to other widgets, buttons derived from <db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link> accept mouse and context menu events when disabled.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>setAutoRepeat() sets whether the button will auto-repeat if the user holds it down. autoRepeatDelay and autoRepeatInterval define how auto-repetition is done.</db:para>
</db:listitem>
<db:listitem>
<db:para>setCheckable() sets whether the button is a toggle button or not.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The difference between isDown() and isChecked() is as follows. When the user clicks a toggle button to check it, the button is first <db:emphasis>pressed</db:emphasis> then released into the <db:emphasis>checked</db:emphasis> state. When the user clicks it again (to uncheck it), the button moves first to the <db:emphasis>pressed</db:emphasis> state, then to the <db:emphasis>unchecked</db:emphasis> state (isChecked() and isDown() are both false).</db:para>
<db:para><db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link> provides four signals:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para><db:link xlink:href="qabstractbutton.xml#pressed">pressed</db:link>() is emitted when the left mouse button is pressed while the mouse cursor is inside the button.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractbutton.xml#released">released</db:link>() is emitted when the left mouse button is released.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractbutton.xml#clicked">clicked</db:link>() is emitted when the button is first pressed and then released, when the shortcut key is typed, or when <db:link xlink:href="qabstractbutton.xml#click">click</db:link>() or <db:link xlink:href="qabstractbutton.xml#animateClick">animateClick</db:link>() is called.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractbutton.xml#toggled">toggled</db:link>() is emitted when the state of a toggle button changes.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>To subclass <db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link>, you must reimplement at least <db:link xlink:href="qabstractbutton.xml#paintEvent">paintEvent</db:link>() to draw the button's outline and its text or pixmap. It is generally advisable to reimplement sizeHint() as well, and sometimes <db:link xlink:href="qabstractbutton.xml#hitButton">hitButton</db:link>() (to determine whether a button press is within the button). For buttons with more than two states (like tri-state buttons), you will also have to reimplement <db:link xlink:href="qabstractbutton.xml#checkStateSet">checkStateSet</db:link>() and <db:link xlink:href="qabstractbutton.xml#nextCheckState">nextCheckState</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuttongroup.xml">QButtonGroup</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractButton">
<db:title>[explicit] QAbstractButton::QAbstractButton(QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs an abstract button with a <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractButton">
<db:title>[virtual noexcept] QAbstractButton::~QAbstractButton()</db:title>
<db:para>Destroys the button.</db:para>
</db:section>
<db:section xml:id="animateClick">
<db:title>void QAbstractButton::animateClick(int <db:emphasis>msec</db:emphasis> = 100)</db:title>
<db:para>Performs an animated click: the button is pressed immediately, and released <db:code role="parameter">msec</db:code> milliseconds later (the default is 100 ms).</db:para>
<db:para>Calling this function again before the button is released resets the release timer.</db:para>
<db:para>All signals associated with a click are emitted as appropriate.</db:para>
<db:para>This function does nothing if the button is <db:link xlink:href="">disabled.</db:link></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#click">click</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QAbstractButton::changeEvent(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="checkStateSet">
<db:title>[virtual protected] void QAbstractButton::checkStateSet()</db:title>
<db:para>This virtual handler is called when setChecked() is used, unless it is called from within <db:link xlink:href="qabstractbutton.xml#nextCheckState">nextCheckState</db:link>(). It allows subclasses to reset their intermediate button states.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#nextCheckState">nextCheckState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="click">
<db:title>void QAbstractButton::click()</db:title>
<db:para>Performs a click.</db:para>
<db:para>All the usual signals associated with a click are emitted as appropriate. If the button is checkable, the state of the button is toggled.</db:para>
<db:para>This function does nothing if the button is <db:link xlink:href="">disabled.</db:link></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#animateClick">animateClick</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clicked">
<db:title>void QAbstractButton::clicked(bool <db:emphasis>checked</db:emphasis> = false)</db:title>
<db:para>This signal is emitted when the button is activated (i.e., pressed down then released while the mouse cursor is inside the button), when the shortcut key is typed, or when <db:link xlink:href="qabstractbutton.xml#click">click</db:link>() or <db:link xlink:href="qabstractbutton.xml#animateClick">animateClick</db:link>() is called. Notably, this signal is <db:emphasis>not</db:emphasis> emitted if you call setDown(), setChecked() or <db:link xlink:href="qabstractbutton.xml#toggle">toggle</db:link>().</db:para>
<db:para>If the button is checkable, <db:code role="parameter">checked</db:code> is true if the button is checked, or false if the button is unchecked.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#pressed">pressed</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractbutton.xml#released">released</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractbutton.xml#toggled">toggled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QAbstractButton::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[override virtual protected] void QAbstractButton::focusInEvent(QFocusEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusInEvent" role="function">QWidget::focusInEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[override virtual protected] void QAbstractButton::focusOutEvent(QFocusEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusOutEvent" role="function">QWidget::focusOutEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="group">
<db:title>QButtonGroup *QAbstractButton::group() const</db:title>
<db:para>Returns the group that this button belongs to.</db:para>
<db:para>If the button is not a member of any <db:link xlink:href="qbuttongroup.xml">QButtonGroup</db:link>, this function returns 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuttongroup.xml">QButtonGroup</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hitButton">
<db:title>[virtual protected] bool QAbstractButton::hitButton(const QPoint &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">pos</db:code> is inside the clickable button rectangle; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>By default, the clickable area is the entire widget. Subclasses may reimplement this function to provide support for clickable areas of different shapes and sizes.</db:para>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QAbstractButton::keyPressEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyPressEvent" role="function">QWidget::keyPressEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="keyReleaseEvent">
<db:title>[override virtual protected] void QAbstractButton::keyReleaseEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyReleaseEvent" role="function">QWidget::keyReleaseEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QAbstractButton::mouseMoveEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseMoveEvent" role="function">QWidget::mouseMoveEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QAbstractButton::mousePressEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mousePressEvent" role="function">QWidget::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QAbstractButton::mouseReleaseEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseReleaseEvent" role="function">QWidget::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="nextCheckState">
<db:title>[virtual protected] void QAbstractButton::nextCheckState()</db:title>
<db:para>This virtual handler is called when a button is clicked. The default implementation calls setChecked(!isChecked()) if the button isCheckable(). It allows subclasses to implement intermediate button states.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#checkStateSet">checkStateSet</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override pure virtual protected] void QAbstractButton::paintEvent(QPaintEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="pressed">
<db:title>void QAbstractButton::pressed()</db:title>
<db:para>This signal is emitted when the button is pressed down.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#released">released</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractbutton.xml#clicked">clicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="released">
<db:title>void QAbstractButton::released()</db:title>
<db:para>This signal is emitted when the button is released.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#pressed">pressed</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractbutton.xml#clicked">clicked</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractbutton.xml#toggled">toggled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timerEvent">
<db:title>[override virtual protected] void QAbstractButton::timerEvent(QTimerEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#timerEvent" role="function">QObject::timerEvent(QTimerEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="toggle">
<db:title>void QAbstractButton::toggle()</db:title>
<db:para>Toggles the state of a checkable button.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>checked</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toggled">
<db:title>void QAbstractButton::toggled(bool <db:emphasis>checked</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a checkable button changes its state. <db:code role="parameter">checked</db:code> is true if the button is checked, or false if the button is unchecked.</db:para>
<db:para>This may be the result of a user action, <db:link xlink:href="qabstractbutton.xml#click">click</db:link>() slot activation, or because setChecked() is called.</db:para>
<db:para>The states of buttons in exclusive button groups are updated before this signal is emitted. This means that slots can act on either the &quot;off&quot; signal or the &quot;on&quot; signal emitted by the buttons in the group whose states have changed.</db:para>
<db:para>For example, a slot that reacts to signals emitted by newly checked buttons but which ignores signals from buttons that have been unchecked can be implemented using the following pattern:</db:para>
<db:programlisting language="cpp">void MyWidget::reactToToggle(bool checked)
{
   if (checked) {
      // Examine the new button states.
      ...
   }
}
</db:programlisting>
<db:para>Button groups can be created using the <db:link xlink:href="qbuttongroup.xml">QButtonGroup</db:link> class, and updates to the button states monitored with the <db:link xlink:href="qbuttongroup.xml#buttonClicked">QButtonGroup::buttonClicked</db:link>() signal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>checked</db:member>
<db:member><db:link xlink:href="qabstractbutton.xml#clicked">clicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
