<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractButton Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link> class is the abstract base class of button widgets, providing functionality common to buttons.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractButton</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qcheckbox.xml" xlink:role="class">QCheckBox</db:link>, <db:link xlink:href="qpushbutton.xml" xlink:role="class">QPushButton</db:link>, <db:link xlink:href="qradiobutton.xml" xlink:role="class">QRadioButton</db:link>, and <db:link xlink:href="qtoolbutton.xml" xlink:role="class">QToolButton</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractButton is part of <db:simplelist><db:member>abstractwidgets</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class implements an <db:emphasis>abstract</db:emphasis> button. Subclasses of this class handle user actions, and specify how the button is drawn.</db:para>
<db:para><db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link> provides support for both push buttons and checkable (toggle) buttons. Checkable buttons are implemented in the <db:link xlink:href="qradiobutton.xml">QRadioButton</db:link> and <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link> classes. Push buttons are implemented in the <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> and <db:link xlink:href="qtoolbutton.xml">QToolButton</db:link> classes; these also provide toggle behavior if required.</db:para>
<db:para>Any button can display a label containing text and an icon. <db:link xlink:href="qabstractbutton.xml#text-prop">setText</db:link>() sets the text; <db:link xlink:href="qabstractbutton.xml#icon-prop">setIcon</db:link>() sets the icon. If a button is disabled, its label is changed to give the button a &quot;disabled&quot; appearance.</db:para>
<db:para>If the button is a text button with a string containing an ampersand ('&amp;'), <db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link> automatically creates a shortcut key. For example:</db:para>
<db:programlisting language="cpp">QPushButton *button = new QPushButton(tr(&quot;Ro&amp;amp;ck &amp;amp;&amp;amp; Roll&quot;), this);
</db:programlisting>
<db:para>The <db:guilabel>Alt+C</db:guilabel> shortcut is assigned to the button, i.e., when the user presses <db:guilabel>Alt+C</db:guilabel> the button will call <db:link xlink:href="qabstractbutton.xml#animateClick">animateClick</db:link>(). See the <db:link xlink:href="qshortcut.xml#mnemonic">QShortcut</db:link> documentation for details. To display an actual ampersand, use '&amp;&amp;'.</db:para>
<db:para>You can also set a custom shortcut key using the <db:link xlink:href="qabstractbutton.xml#shortcut-prop">setShortcut</db:link>() function. This is useful mostly for buttons that do not have any text, and therefore can't have any automatic shortcut.</db:para>
<db:programlisting language="cpp">button-&amp;gt;setIcon(QIcon(&quot;:/images/print.png&quot;));
button-&amp;gt;setShortcut(tr(&quot;Alt+F7&quot;));
</db:programlisting>
<db:para>All the buttons provided by Qt (<db:link xlink:href="qpushbutton.xml">QPushButton</db:link>, <db:link xlink:href="qtoolbutton.xml">QToolButton</db:link>, <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link>, and <db:link xlink:href="qradiobutton.xml">QRadioButton</db:link>) can display both <db:link xlink:href="qabstractbutton.xml#text-prop">text</db:link> and <db:link xlink:href="stylesheet-reference.xml#icon">icons</db:link>.</db:para>
<db:para>A button can be made the default button in a dialog by means of <db:link xlink:href="qpushbutton.xml#default-prop">QPushButton::setDefault</db:link>() and <db:link xlink:href="qpushbutton.xml#autoDefault-prop">QPushButton::setAutoDefault</db:link>().</db:para>
<db:para><db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link> provides most of the states used for buttons:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qabstractbutton.xml#down-prop">isDown</db:link>() indicates whether the button is <db:emphasis>pressed</db:emphasis> down.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractbutton.xml#checked-prop">isChecked</db:link>() indicates whether the button is <db:emphasis>checked</db:emphasis>. Only checkable buttons can be checked and unchecked (see below).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml#enabled-prop">isEnabled</db:link>() indicates whether the button can be pressed by the user.</db:para>
<db:note>
<db:para>As opposed to other widgets, buttons derived from <db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link> accept mouse and context menu events when disabled.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractbutton.xml#autoRepeat-prop">setAutoRepeat</db:link>() sets whether the button will auto-repeat if the user holds it down. <db:link xlink:href="qabstractbutton.xml#autoRepeatDelay-prop">autoRepeatDelay</db:link> and <db:link xlink:href="qabstractbutton.xml#autoRepeatInterval-prop">autoRepeatInterval</db:link> define how auto-repetition is done.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractbutton.xml#checkable-prop">setCheckable</db:link>() sets whether the button is a toggle button or not.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The difference between <db:link xlink:href="qabstractbutton.xml#down-prop">isDown</db:link>() and <db:link xlink:href="qabstractbutton.xml#checked-prop">isChecked</db:link>() is as follows. When the user clicks a toggle button to check it, the button is first <db:emphasis>pressed</db:emphasis> then released into the <db:emphasis>checked</db:emphasis> state. When the user clicks it again (to uncheck it), the button moves first to the <db:emphasis>pressed</db:emphasis> state, then to the <db:emphasis>unchecked</db:emphasis> state (<db:link xlink:href="qabstractbutton.xml#checked-prop">isChecked</db:link>() and <db:link xlink:href="qabstractbutton.xml#down-prop">isDown</db:link>() are both false).</db:para>
<db:para><db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link> provides four signals:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para><db:link xlink:href="qabstractbutton.xml#pressed">pressed</db:link>() is emitted when the left mouse button is pressed while the mouse cursor is inside the button.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractbutton.xml#released">released</db:link>() is emitted when the left mouse button is released.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractbutton.xml#clicked">clicked</db:link>() is emitted when the button is first pressed and then released, when the shortcut key is typed, or when <db:link xlink:href="qabstractbutton.xml#click">click</db:link>() or <db:link xlink:href="qabstractbutton.xml#animateClick">animateClick</db:link>() is called.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractbutton.xml#toggled">toggled</db:link>() is emitted when the state of a toggle button changes.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>To subclass <db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link>, you must reimplement at least <db:link xlink:href="qabstractbutton.xml#paintEvent">paintEvent</db:link>() to draw the button's outline and its text or pixmap. It is generally advisable to reimplement <db:link xlink:href="qwidget.xml#sizeHint-prop">sizeHint</db:link>() as well, and sometimes <db:link xlink:href="qabstractbutton.xml#hitButton">hitButton</db:link>() (to determine whether a button press is within the button). For buttons with more than two states (like tri-state buttons), you will also have to reimplement <db:link xlink:href="qabstractbutton.xml#checkStateSet">checkStateSet</db:link>() and <db:link xlink:href="qabstractbutton.xml#nextCheckState">nextCheckState</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuttongroup.xml">QButtonGroup</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="autoExclusive-prop">
<db:title>autoExclusive : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>autoExclusive</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">autoExclusive</db:synopsisinfo>
<db:synopsisinfo role="setter">setAutoExclusive</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether auto-exclusivity is enabled</db:para>
<db:para>If auto-exclusivity is enabled, checkable buttons that belong to the same parent widget behave as if they were part of the same exclusive button group. In an exclusive button group, only one button can be checked at any time; checking another button automatically unchecks the previously checked one.</db:para>
<db:para>The property has no effect on buttons that belong to a button group.</db:para>
<db:para>autoExclusive is off by default, except for radio buttons.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">autoExclusive</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAutoExclusive</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiobutton.xml">QRadioButton</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="autoRepeat-prop">
<db:title>autoRepeat : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>autoRepeat</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">autoRepeat</db:synopsisinfo>
<db:synopsisinfo role="setter">setAutoRepeat</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether autoRepeat is enabled</db:para>
<db:para>If autoRepeat is enabled, then the <db:link xlink:href="qabstractbutton.xml#pressed">pressed</db:link>(), <db:link xlink:href="qabstractbutton.xml#released">released</db:link>(), and <db:link xlink:href="qabstractbutton.xml#clicked">clicked</db:link>() signals are emitted at regular intervals when the button is down. autoRepeat is off by default. The initial delay and the repetition interval are defined in milliseconds by <db:link xlink:href="qabstractbutton.xml#autoRepeatDelay-prop">autoRepeatDelay</db:link> and <db:link xlink:href="qabstractbutton.xml#autoRepeatInterval-prop">autoRepeatInterval</db:link>.</db:para>
<db:para>Note: If a button is pressed down by a shortcut key, then auto-repeat is enabled and timed by the system and not by this class. The <db:link xlink:href="qabstractbutton.xml#pressed">pressed</db:link>(), <db:link xlink:href="qabstractbutton.xml#released">released</db:link>(), and <db:link xlink:href="qabstractbutton.xml#clicked">clicked</db:link>() signals will be emitted like in the normal case.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">autoRepeat</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAutoRepeat</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="autoRepeatDelay-prop">
<db:title>autoRepeatDelay : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>autoRepeatDelay</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">autoRepeatDelay</db:synopsisinfo>
<db:synopsisinfo role="setter">setAutoRepeatDelay</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the initial delay of auto-repetition</db:para>
<db:para>If <db:link xlink:href="qabstractbutton.xml#autoRepeat-prop">autoRepeat</db:link> is enabled, then autoRepeatDelay defines the initial delay in milliseconds before auto-repetition kicks in.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">autoRepeatDelay</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAutoRepeatDelay</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#autoRepeat-prop">autoRepeat</db:link></db:member>
<db:member><db:link xlink:href="qabstractbutton.xml#autoRepeatInterval-prop">autoRepeatInterval</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="autoRepeatInterval-prop">
<db:title>autoRepeatInterval : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>autoRepeatInterval</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">autoRepeatInterval</db:synopsisinfo>
<db:synopsisinfo role="setter">setAutoRepeatInterval</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the interval of auto-repetition</db:para>
<db:para>If <db:link xlink:href="qabstractbutton.xml#autoRepeat-prop">autoRepeat</db:link> is enabled, then autoRepeatInterval defines the length of the auto-repetition interval in millisecons.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">autoRepeatInterval</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAutoRepeatInterval</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#autoRepeat-prop">autoRepeat</db:link></db:member>
<db:member><db:link xlink:href="qabstractbutton.xml#autoRepeatDelay-prop">autoRepeatDelay</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checkable-prop">
<db:title>checkable : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>checkable</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isCheckable</db:synopsisinfo>
<db:synopsisinfo role="setter">setCheckable</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the button is checkable</db:para>
<db:para>By default, the button is not checkable.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isCheckable</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCheckable</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#checked-prop">checked</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checked-prop">
<db:title>checked : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>checked</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isChecked</db:synopsisinfo>
<db:synopsisinfo role="setter">setChecked</db:synopsisinfo>
<db:synopsisinfo role="notifier">toggled</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the button is checked</db:para>
<db:para>Only checkable buttons can be checked. By default, the button is unchecked.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isChecked</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setChecked</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractbutton.xml#toggled">toggled</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>checked</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#checkable-prop">checkable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="down-prop">
<db:title>down : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>down</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isDown</db:synopsisinfo>
<db:synopsisinfo role="setter">setDown</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the button is pressed down</db:para>
<db:para>If this property is <db:code>true</db:code>, the button is pressed down. The signals <db:link xlink:href="qabstractbutton.xml#pressed">pressed</db:link>() and <db:link xlink:href="qabstractbutton.xml#clicked">clicked</db:link>() are not emitted if you set this property to true. The default is false.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isDown</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDown</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="icon-prop">
<db:title>icon : QIcon</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QIcon</db:type>
<db:varname>icon</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">icon</db:synopsisinfo>
<db:synopsisinfo role="setter">setIcon</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the icon shown on the button</db:para>
<db:para>The icon's default size is defined by the GUI style, but can be adjusted by setting the <db:link xlink:href="qabstractbutton.xml#iconSize-prop">iconSize</db:link> property.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qicon.xml">QIcon</db:link></db:type> <db:emphasis role="bold">icon</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setIcon</db:emphasis>(const <db:type><db:link xlink:href="qicon.xml">QIcon</db:link></db:type> &amp;<db:emphasis>icon</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="iconSize-prop">
<db:title>iconSize : QSize</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QSize</db:type>
<db:varname>iconSize</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">iconSize</db:synopsisinfo>
<db:synopsisinfo role="setter">setIconSize</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the icon size used for this button.</db:para>
<db:para>The default size is defined by the GUI style. This is a maximum size for the icons. Smaller icons will not be scaled up.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> <db:emphasis role="bold">iconSize</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setIconSize</db:emphasis>(const <db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> &amp;<db:emphasis>size</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="shortcut-prop">
<db:title>shortcut : QKeySequence</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QKeySequence</db:type>
<db:varname>shortcut</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">shortcut</db:synopsisinfo>
<db:synopsisinfo role="setter">setShortcut</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the mnemonic associated with the button</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qkeysequence.xml">QKeySequence</db:link></db:type> <db:emphasis role="bold">shortcut</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setShortcut</db:emphasis>(const <db:type><db:link xlink:href="qkeysequence.xml">QKeySequence</db:link></db:type> &amp;<db:emphasis>key</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="text-prop">
<db:title>text : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>text</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">text</db:synopsisinfo>
<db:synopsisinfo role="setter">setText</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the text shown on the button</db:para>
<db:para>If the button has no text, the text() function will return an empty string.</db:para>
<db:para>If the text contains an ampersand character ('&amp;'), a shortcut is automatically created for it. The character that follows the '&amp;' will be used as the shortcut key. Any previous shortcut will be overwritten or cleared if no shortcut is defined by the text. See the <db:link xlink:href="qshortcut.xml#mnemonic">QShortcut</db:link> documentation for details. To display an actual ampersand, use '&amp;&amp;'.</db:para>
<db:para>There is no default text.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">text</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setText</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>text</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractButton">
<db:title>[explicit] QAbstractButton::QAbstractButton(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QAbstractButton</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractButton(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an abstract button with a <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractButton">
<db:title>[virtual] QAbstractButton::~QAbstractButton()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAbstractButton</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAbstractButton()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the button.</db:para>
</db:section>
<db:section xml:id="animateClick">
<db:title>void QAbstractButton::animateClick()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>animateClick</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void animateClick()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs an animated click: the button is pressed immediately, and released 100ms later.</db:para>
<db:para>Calling this function again before the button is released resets the release timer.</db:para>
<db:para>All signals associated with a click are emitted as appropriate.</db:para>
<db:para>This function does nothing if the button is <db:link xlink:href="qwidget.xml#enabled-prop">disabled.</db:link></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#click">click</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QAbstractButton::changeEvent(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>changeEvent</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void changeEvent(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="checkStateSet">
<db:title>[virtual protected] void QAbstractButton::checkStateSet()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>checkStateSet</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void checkStateSet()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual handler is called when <db:link xlink:href="qabstractbutton.xml#checked-prop">setChecked</db:link>() is used, unless it is called from within <db:link xlink:href="qabstractbutton.xml#nextCheckState">nextCheckState</db:link>(). It allows subclasses to reset their intermediate button states.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#nextCheckState">nextCheckState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="click">
<db:title>void QAbstractButton::click()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>click</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void click()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs a click.</db:para>
<db:para>All the usual signals associated with a click are emitted as appropriate. If the button is checkable, the state of the button is toggled.</db:para>
<db:para>This function does nothing if the button is <db:link xlink:href="qwidget.xml#enabled-prop">disabled.</db:link></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#animateClick">animateClick</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clicked">
<db:title>void QAbstractButton::clicked(bool <db:emphasis>checked</db:emphasis> = false)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clicked</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>checked</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clicked(bool checked)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the button is activated (i.e., pressed down then released while the mouse cursor is inside the button), when the shortcut key is typed, or when <db:link xlink:href="qabstractbutton.xml#click">click</db:link>() or <db:link xlink:href="qabstractbutton.xml#animateClick">animateClick</db:link>() is called. Notably, this signal is <db:emphasis>not</db:emphasis> emitted if you call <db:link xlink:href="qabstractbutton.xml#down-prop">setDown</db:link>(), <db:link xlink:href="qabstractbutton.xml#checked-prop">setChecked</db:link>() or <db:link xlink:href="qabstractbutton.xml#toggle">toggle</db:link>().</db:para>
<db:para>If the button is checkable, <db:code role="parameter">checked</db:code> is true if the button is checked, or false if the button is unchecked.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#pressed">pressed</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractbutton.xml#released">released</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractbutton.xml#toggled">toggled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QAbstractButton::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[override virtual protected] void QAbstractButton::focusInEvent(QFocusEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>focusInEvent</db:methodname>
<db:methodparam>
<db:type>QFocusEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusInEvent(QFocusEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusInEvent" role="function">QWidget::focusInEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[override virtual protected] void QAbstractButton::focusOutEvent(QFocusEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>focusOutEvent</db:methodname>
<db:methodparam>
<db:type>QFocusEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusOutEvent(QFocusEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusOutEvent" role="function">QWidget::focusOutEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="group">
<db:title>QButtonGroup *QAbstractButton::group() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QButtonGroup *</db:type>
<db:methodname>group</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QButtonGroup * group() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the group that this button belongs to.</db:para>
<db:para>If the button is not a member of any <db:link xlink:href="qbuttongroup.xml">QButtonGroup</db:link>, this function returns <db:code>nullptr</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuttongroup.xml">QButtonGroup</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hitButton">
<db:title>[virtual protected] bool QAbstractButton::hitButton(const QPoint &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hitButton</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hitButton(const QPoint &amp;pos) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">pos</db:code> is inside the clickable button rectangle; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>By default, the clickable area is the entire widget. Subclasses may reimplement this function to provide support for clickable areas of different shapes and sizes.</db:para>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QAbstractButton::keyPressEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>keyPressEvent</db:methodname>
<db:methodparam>
<db:type>QKeyEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyPressEvent(QKeyEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyPressEvent" role="function">QWidget::keyPressEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="keyReleaseEvent">
<db:title>[override virtual protected] void QAbstractButton::keyReleaseEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>keyReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QKeyEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyReleaseEvent(QKeyEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyReleaseEvent" role="function">QWidget::keyReleaseEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QAbstractButton::mouseMoveEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseMoveEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseMoveEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseMoveEvent" role="function">QWidget::mouseMoveEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QAbstractButton::mousePressEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mousePressEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mousePressEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mousePressEvent" role="function">QWidget::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QAbstractButton::mouseReleaseEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseReleaseEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseReleaseEvent" role="function">QWidget::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="nextCheckState">
<db:title>[virtual protected] void QAbstractButton::nextCheckState()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>nextCheckState</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void nextCheckState()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual handler is called when a button is clicked. The default implementation calls <db:link xlink:href="qabstractbutton.xml#checked-prop">setChecked</db:link>(!<db:link xlink:href="qabstractbutton.xml#checked-prop">isChecked</db:link>()) if the button <db:link xlink:href="qabstractbutton.xml#checkable-prop">isCheckable</db:link>(). It allows subclasses to implement intermediate button states.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#checkStateSet">checkStateSet</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override pure virtual protected] void QAbstractButton::paintEvent(QPaintEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paintEvent</db:methodname>
<db:methodparam>
<db:type>QPaintEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintEvent(QPaintEvent *e) override = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="pressed">
<db:title>void QAbstractButton::pressed()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pressed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pressed()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the button is pressed down.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#released">released</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractbutton.xml#clicked">clicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="released">
<db:title>void QAbstractButton::released()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>released</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void released()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the button is released.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#pressed">pressed</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractbutton.xml#clicked">clicked</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractbutton.xml#toggled">toggled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timerEvent">
<db:title>[override virtual protected] void QAbstractButton::timerEvent(QTimerEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>timerEvent</db:methodname>
<db:methodparam>
<db:type>QTimerEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void timerEvent(QTimerEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#timerEvent" role="function">QObject::timerEvent(QTimerEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="toggle">
<db:title>void QAbstractButton::toggle()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>toggle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void toggle()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Toggles the state of a checkable button.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#checked-prop">checked</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toggled">
<db:title>void QAbstractButton::toggled(bool <db:emphasis>checked</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>toggled</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>checked</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">checked</db:synopsisinfo>
<db:synopsisinfo role="signature">void toggled(bool checked)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a checkable button changes its state. <db:code role="parameter">checked</db:code> is true if the button is checked, or false if the button is unchecked.</db:para>
<db:para>This may be the result of a user action, <db:link xlink:href="qabstractbutton.xml#click">click</db:link>() slot activation, or because <db:link xlink:href="qabstractbutton.xml#checked-prop">setChecked</db:link>() is called.</db:para>
<db:para>The states of buttons in exclusive button groups are updated before this signal is emitted. This means that slots can act on either the &quot;off&quot; signal or the &quot;on&quot; signal emitted by the buttons in the group whose states have changed.</db:para>
<db:para>For example, a slot that reacts to signals emitted by newly checked buttons but which ignores signals from buttons that have been unchecked can be implemented using the following pattern:</db:para>
<db:programlisting language="cpp">void MyWidget::reactToToggle(bool checked)
{
   if (checked) {
      // Examine the new button states.
      ...
   }
}
</db:programlisting>
<db:para>Button groups can be created using the <db:link xlink:href="qbuttongroup.xml">QButtonGroup</db:link> class, and updates to the button states monitored with the <db:link xlink:href="qbuttongroup.xml#buttonClicked">QButtonGroup::buttonClicked</db:link>() signal.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qabstractbutton.xml#checked-prop">checked</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#checked-prop">checked</db:link></db:member>
<db:member><db:link xlink:href="qabstractbutton.xml#clicked">clicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
