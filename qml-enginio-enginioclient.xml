<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>EnginioClient QML Type</db:title>
<db:productname>QtEnginioQml</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Client library for Enginio from QML</db:titleabbrev>
<db:abstract>
<db:para>Client interface to access Enginio service.</db:para>
<db:para>This type was introduced in Qt 5.3.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import Enginio 1.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>EnginioClient is part of <db:simplelist><db:member>engino-qml</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:programlisting language="qml">import Enginio 1.0
</db:programlisting>
<db:para><db:link xlink:href="qml-enginio-enginioclient.xml">EnginioClient</db:link> is the heart of the QML API for Enginio. It is used for all communication with the Enginio backend. <db:link xlink:href="qml-enginio-enginiomodel.xml">EnginioModel</db:link> compliments it to make handling of multiple objects simple.</db:para>
<db:para>The backend is identified by <db:link xlink:href="qml-enginio-enginioclient.xml#backendId-prop">backend ID</db:link>.</db:para>
<db:programlisting language="qml">EnginioClient {
    id: client
    backendId: &quot;YOUR_BACKEND_ID&quot; // from Enginio Dashboard
}
</db:programlisting>
<db:para>Once the backend is configured, it is possible to run queries by calling query on <db:link xlink:href="qml-enginio-enginioclient.xml">EnginioClient</db:link>. For example to get all objects stored with the type &quot;objects.image&quot; run this query:</db:para>
<db:programlisting language="qml">EnginioClient {
    // ...
    Component.onCompleted: query({&quot;objectType&quot;: &quot;objects.image&quot;})
}
</db:programlisting>
<db:para><db:link xlink:href="qml-enginio-enginioclient.xml">EnginioClient</db:link> gives you a convenient way to handle the responses to your queryies as well:</db:para>
<db:programlisting language="qml">EnginioClient {
    // ...
    onFinished: console.log(&quot;Engino request finished.&quot; + reply.data)
    onError: console.log(&quot;Enginio error &quot; + reply.errorCode + &quot;: &quot; + reply.errorString)
}
</db:programlisting>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="authenticationState-prop">
<db:title>authenticationState : Enginio::AuthenticationState</db:title>
<db:para>The state of the authentication.</db:para>
<db:para>Enginio provides convenient user management. The authentication state reflects whether the current user is authenticated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#identity-prop">identity</db:link></db:member>
<db:member><db:link xlink:href="qml-enginio-enginiooauth2authentication.xml">EnginioOAuth2Authentication</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="backendId-prop">
<db:title>backendId : string</db:title>
<db:para>Enginio backend ID. This can be obtained from the Enginio dashboard.</db:para>
</db:section>
<db:section xml:id="identity-prop">
<db:title>identity : EnginioIdentity</db:title>
<db:para>Property that represents a user. Setting the property will create an asynchronous authentication request, the result of it updates <db:link xlink:href="qml-enginio-enginioclient.xml#authenticationState-prop">authenticationState</db:link></db:para>
<db:para>It is allowed to assign a null pointer to the property to terminate the session.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#authenticationState-prop">authenticationState</db:link></db:member>
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#sessionAuthenticated-signal">sessionAuthenticated</db:link></db:member>
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#sessionAuthenticationError-signal">sessionAuthenticationError</db:link></db:member>
<db:member><db:link xlink:href="qml-enginio-enginiooauth2authentication.xml">EnginioOAuth2Authentication</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="error-signal">
<db:title>error(QJSValue <db:emphasis>reply</db:emphasis>)</db:title>
<db:para>This signal is emitted when a <db:code role="parameter">reply</db:code> finishes and contains an error.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onError</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="finished-signal">
<db:title>finished(QJSValue <db:emphasis>reply</db:emphasis>)</db:title>
<db:para>This signal is emitted when a <db:code role="parameter">reply</db:code> finishes.</db:para>
<db:note>
<db:para>that this signal is alwasy emitted, independent of whether the reply finished successfully or not.</db:para>
</db:note>
<db:note>
<db:para>The corresponding handler is <db:code>onFinished</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="sessionAuthenticated-signal">
<db:title>sessionAuthenticated(QJSValue <db:emphasis>reply</db:emphasis>)</db:title>
<db:para>Emitted when a user logs in.</db:para>
<db:para>The signal is emitted after a user was successfully logged into the backend. From that point on, all communication with the backend will be using these credentials. The <db:code role="parameter">reply</db:code> contains the information about the login and the user, the details may be different depending on used authentication method, but a typical reply may look like that:</db:para>
<db:programlisting language="cpp">{
  &quot;access_token&quot;: &quot;...&quot;,              // oauth2 access token
  &quot;refresh_token&quot;: &quot;...&quot;,             // oauth2 refresh token
  &quot;token_type&quot;: &quot;bearer&quot;,             // oauth2 token type
  &quot;expires_in&quot;: 28799,                // oautth2 token expiry date
  &quot;enginio_data&quot;: {
    &quot;user&quot;: {
      &quot;id&quot;: &quot;...&quot;,                    // this user Id
      &quot;createdAt&quot;: &quot;...&quot;,             // when the user was created
      &quot;creator&quot;: {                    // who created the user
        &quot;id&quot;: &quot;creatorId&quot;,
        &quot;objectType&quot;: &quot;users&quot;
      },
      &quot;email&quot;: &quot;user@user.com&quot;,       // the user's email address
      &quot;firstName&quot;: &quot;John&quot;,            // the user's first name
      &quot;lastName&quot;: &quot;Foo&quot;,              // the user's last name
      &quot;objectType&quot;: &quot;users&quot;,
      &quot;updatedAt&quot;: &quot;2013-11-25T14:54:58.957Z&quot;,
      &quot;username&quot;: &quot;JohnFoo&quot;           // the user's login
    },
    &quot;usergroups&quot;: []                  // usergroups to which the user belongs
  }
}
</db:programlisting>
<db:note>
<db:para>The corresponding handler is <db:code>onSessionAuthenticated</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#sessionAuthenticationError-signal">EnginioClient::sessionAuthenticationError</db:link>()</db:member>
<db:member><db:link xlink:href="qml-enginio-enginioreply.xml">EnginioReply</db:link></db:member>
<db:member><db:link xlink:href="qml-enginio-enginiooauth2authentication.xml">EnginioOAuth2Authentication</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sessionAuthenticationError-signal">
<db:title>sessionAuthenticationError(QJSValue <db:emphasis>reply</db:emphasis>)</db:title>
<db:para>Emitted when a user login fails.</db:para>
<db:para>The <db:code role="parameter">reply</db:code> contains the details about why the login failed.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onSessionAuthenticationError</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#sessionAuthenticated-signal">EnginioClient::sessionAuthenticated</db:link>()</db:member>
<db:member><db:link xlink:href="qml-enginio-enginioreply.xml">EnginioReply</db:link></db:member>
<db:member><db:link xlink:href="enginioclientconnection.xml#identity-prop">EnginioClientConnection::identity</db:link></db:member>
<db:member><db:link xlink:href="qml-enginio-enginiooauth2authentication.xml">EnginioOAuth2Authentication</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sessionTerminated-signal">
<db:title>sessionTerminated()</db:title>
<db:para>Emitted when a user logs out.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onSessionTerminated</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginiooauth2authentication.xml">EnginioOAuth2Authentication</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="create-method">
<db:title>EnginioReply create(QJSValue <db:emphasis>object</db:emphasis>, Operation <db:emphasis>operation</db:emphasis>)</db:title>
<db:para>Insert a new <db:code role="parameter">object</db:code> into the database.</db:para>
<db:para>The returned <db:link xlink:href="qml-enginio-enginioreply.xml">EnginioReply</db:link> indicates the success of the object creation. The object becomes available from the backend if it finishes without errors.</db:para>
<db:para><db:code role="parameter">operation</db:code> determines the kind of object created. For example a regular object or a user or usergroup. By default, <db:link xlink:href="enginio.xml#Operation-enum">Enginio::ObjectOperation</db:link> is used and regular objects created.</db:para>
<db:note>
<db:para>that the <db:code>objectType</db:code> is required for regular objects and has to begin with <db:code>&quot;objects.&quot;</db:code>.</db:para>
</db:note>
<db:para>The JSON for the object that will be created must follow this structure:</db:para>
<db:programlisting language="cpp">{
    &quot;objectType&quot;: &quot;object.myType&quot;,
    &quot;name&quot; : &quot;A thing&quot;,
    &quot;price&quot; : &quot;5&quot;,
}
</db:programlisting>
<db:para>Where only the <db:code>objectType</db:code> property is required and <db:code>name</db:code> and <db:code>price</db:code> are examples of custom properties.</db:para>
<db:para>Users and all kinds of other objects are created the same way but do not require any <db:code>objectType</db:code>.</db:para>
<db:para>To create a new user:</db:para>
<db:programlisting language="qml">var reply = enginioClient.create(
            { &quot;username&quot;: login.text,
              &quot;password&quot;: password.text,
              &quot;email&quot;: userEmail.text,
              &quot;firstName&quot;: userFirstName.text,
              &quot;lastName&quot;: userLastName.text
            }, Enginio.UserOperation)
</db:programlisting>
<db:para>To add a new member to a usergroup, the JSON needs to look like the example below.</db:para>
<db:programlisting language="cpp">{
    &quot;id&quot;: &quot;groupId&quot;,
    &quot;member&quot;: { &quot;id&quot;: &quot;userId&quot;, &quot;objectType&quot;: &quot;users&quot; }
}
</db:programlisting>
<db:para>Returns an <db:link xlink:href="qml-enginio-enginioreply.xml">EnginioReply</db:link> containing the status and data once it is finished.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginioreply.xml">EnginioReply</db:link></db:member>
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#query-method">query</db:link>()</db:member>
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#update-method">update</db:link>()</db:member>
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#remove-method">remove</db:link>()</db:member>
<db:member><db:link xlink:href="enginio.xml#Operation-enum">Enginio::Operation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="downloadUrl-method">
<db:title>EnginioReply downloadUrl(QJSValue <db:emphasis>object</db:emphasis>)</db:title>
<db:para>Get the download URL for a file</db:para>
<db:programlisting language="qml">var downloadData = {
    &quot;id&quot;: uploadReply.data.id,
}
var downloadReply = enginio.downloadUrl(downloadData)
</db:programlisting>
<db:para>The response contains the download URL and the duration how long the URL will be valid.</db:para>
<db:programlisting language="cpp">downloadReply.data.expiringUrl
downloadReply.data.expiresAt
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#uploadFile-method">uploadFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fullTextSearch-method">
<db:title>EnginioReply fullTextSearch(QJSValue <db:emphasis>query</db:emphasis>)</db:title>
<db:para>Perform a full text search on the database</db:para>
<db:para>The <db:code role="parameter">query</db:code> is an object sent to the backend to perform a fulltext search. Note that the search requires the searched properties to be indexed (on the server, configureable in the backend).</db:para>
<db:para>Returns <db:link xlink:href="qml-enginio-enginioreply.xml">EnginioReply</db:link> containing the status and the result once it is finished.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginioreply.xml">EnginioReply</db:link></db:member>
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#create-method">EnginioClient::create</db:link>()</db:member>
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#query-method">EnginioClient::query</db:link>()</db:member>
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#update-method">EnginioClient::update</db:link>()</db:member>
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#remove-method">EnginioClient::remove</db:link>()</db:member>
<db:member><db:link xlink:href="https://engin.io/documentation/rest/parameters/fulltext_query">JSON request structure</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="query-method">
<db:title>EnginioReply query(QJSValue <db:emphasis>query</db:emphasis>, Operation <db:emphasis>operation</db:emphasis>)</db:title>
<db:para>Query the database</db:para>
<db:para>The <db:code role="parameter">query</db:code> is an object containing the actual query to the backend. The query will be run on the <db:code role="parameter">operation</db:code> part of the backend.</db:para>
<db:para>The <db:code role="parameter">query</db:code> has to contain an &quot;objectType&quot; which has to point to a type defined in the backend. Optionally, it can also contain:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>query - describes how objects are queried, allows filtering of results. See {https://engin.io/documentation/rest/parameters/queries} {JSON query structure}</db:para>
</db:listitem>
<db:listitem>
<db:para>limit - limits how many objects the server should return (default value is 100).</db:para>
</db:listitem>
<db:listitem>
<db:para>offset - how many objects the server should skip from the beginning of the returned results. Note that the server keeps the data in random order so that usage of offset implies using sort as well.</db:para>
</db:listitem>
<db:listitem>
<db:para>sort - describes how results are sorted. See <db:link xlink:href="https://engin.io/documentation/rest/parameters/sort">JSON sort request structure</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>count - if the count is set, the server will return only count of matching objects</db:para>
</db:listitem>
<db:listitem>
<db:para>include - describes which other objects are included in the response. See <db:link xlink:href="https://engin.io/documentation/rest/parameters/include">JSON include structure</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The JSON to list all objects of type &quot;objects.image&quot;:</db:para>
<db:programlisting language="cpp">{
    &quot;objectType&quot;: &quot;objects.image&quot;
}
</db:programlisting>
<db:para>An example using <db:code>include</db:code> to get <db:code>file</db:code> references and with a query parameter that limits the results to only those objects where the reference is valid:</db:para>
<db:programlisting language="cpp">{
    &quot;objectType&quot;: &quot;objects.image&quot;,
    &quot;include&quot;: {&quot;file&quot;: {}},
    &quot;query&quot; : { &quot;file&quot;: { &quot;$ne&quot;: null } }
}
</db:programlisting>
<db:para>To find a usergroup named &quot;allUsers&quot;:</db:para>
<db:programlisting language="qml">var groupQuery = enginioClient.query({ &quot;query&quot;: { &quot;name&quot; : &quot;allUsers&quot; } }, Enginio.UsergroupOperation)
</db:programlisting>
<db:para>Returns an <db:link xlink:href="qml-enginio-enginioreply.xml">EnginioReply</db:link> containing the status and the result once it is finished.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginioreply.xml">EnginioReply</db:link></db:member>
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#create-method">create</db:link>()</db:member>
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#update-method">update</db:link>()</db:member>
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#remove-method">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove-method">
<db:title>EnginioReply remove(QJSValue <db:emphasis>query</db:emphasis>, Operation <db:emphasis>operation</db:emphasis>)</db:title>
<db:para>Remove an object from the database.</db:para>
<db:para>The <db:code role="parameter">object</db:code> that is to be removed is identified by its object ID and if it is a regular object also <db:code>objectType</db:code>.</db:para>
<db:para>The JSON that identfies an object looks like this:</db:para>
<db:programlisting language="cpp">{
    &quot;objectType&quot;: &quot;objects.images&quot;,
    &quot;id&quot;: &quot;52b1a94b5a3d8b15b1037ff5&quot;
}
</db:programlisting>
<db:para>The <db:code role="parameter">operation</db:code> is the area from which the object gets removed. It defaults to <db:link xlink:href="enginio.xml#Operation-enum">Enginio::ObjectOperation</db:link> to remove regular objects by default.</db:para>
<db:para>Returns an <db:link xlink:href="qml-enginio-enginioreply.xml">EnginioReply</db:link> containing the status once it is finished.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginioreply.xml">EnginioReply</db:link></db:member>
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#create-method">create</db:link>()</db:member>
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#query-method">query</db:link>()</db:member>
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#update-method">update</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="update-method">
<db:title>EnginioReply update(QJSValue <db:emphasis>query</db:emphasis>, Operation <db:emphasis>operation</db:emphasis>)</db:title>
<db:para>Update an object in the database.</db:para>
<db:para>The <db:code role="parameter">operation</db:code> is the area in which the <db:code role="parameter">object</db:code> gets updated. It defaults to <db:link xlink:href="enginio.xml#Operation-enum">Enginio::ObjectOperation</db:link> to update regular objects by default.</db:para>
<db:para>To change the name property of an object to &quot;New Name&quot;, use the following JSON:</db:para>
<db:programlisting language="cpp">{
    &quot;id&quot;: &quot;objectId&quot;,
    &quot;objectType&quot;: &quot;objects.objectType&quot;,
    &quot;name&quot;: &quot;New Name&quot;
}
</db:programlisting>
<db:para>All other existing properties of the object are not affected by the update.</db:para>
<db:para>To update the access control list of an object, use the following JSON:</db:para>
<db:programlisting language="cpp">{
    &quot;id&quot;: &quot;objectId&quot;,
    &quot;objectType&quot;: &quot;objects.objectType&quot;,
    &quot;access&quot;: { &quot;read&quot;: [&quot;id&quot;: &quot;userId&quot;, &quot;objectTypes&quot;: &quot;users&quot;],
                &quot;update&quot;: [&quot;id&quot;: &quot;userId&quot;, &quot;objectTypes&quot;: &quot;users&quot;],
                &quot;admin&quot;: [&quot;id&quot;: &quot;userId&quot;, &quot;objectTypes&quot;: &quot;users&quot;] }
}
</db:programlisting>
<db:para>Returns an <db:link xlink:href="qml-enginio-enginioreply.xml">EnginioReply</db:link> containing the status once it is finished.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginioreply.xml">EnginioReply</db:link></db:member>
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#create-method">create</db:link>()</db:member>
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#query-method">query</db:link>()</db:member>
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#remove-method">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uploadFile-method">
<db:title>EnginioReply uploadFile(QJSValue <db:emphasis>object</db:emphasis>, QUrl <db:emphasis>file</db:emphasis>)</db:title>
<db:para>Stores a <db:code role="parameter">file</db:code> attached to an <db:code role="parameter">object</db:code> in Enginio</db:para>
<db:para>Each uploaded file needs to be associated with an object in the database.</db:para>
<db:note>
<db:para>The upload will only work with the propper server setup: in the dashboard create a property of the type that you will use. Set this property to be a reference to files.</db:para>
</db:note>
<db:para>In order to upload a file, first create an object:</db:para>
<db:programlisting language="qml">var fileObject = {
    &quot;objectType&quot;: AppConfig.testObjectType,
    &quot;title&quot;: &quot;Example object with file attachment&quot;,
}
var reply = enginio.create(fileObject);
</db:programlisting>
<db:para>Then do the actual upload:</db:para>
<db:programlisting language="qml">var objectId = reply.data.id
var uploadData = {
    &quot;file&quot;:{
        &quot;fileName&quot;:&quot;test.png&quot;
    },
    &quot;targetFileProperty&quot;: {
        &quot;objectType&quot;: AppConfig.testObjectType,
        &quot;id&quot;: objectId,
        &quot;propertyName&quot;: &quot;fileAttachment&quot;
    },
}
var uploadReply = enginio.uploadFile(uploadData, fileName)
</db:programlisting>
<db:para>Note: There is no need to directly delete files. Instead when the object that contains the link to the file gets deleted, the file will automatically be deleted as well.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#downloadUrl-method">downloadUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
