<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Menu QML Type</db:title>
<db:productname>QtQuickControls2</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls 2 Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Menu popup that can be used as a context menu or popup menu.</db:para>
<db:para>This type was introduced in Qt 5.7.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls 2.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls2-popup.xml">Popup</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Menu is part of <db:simplelist><db:member>qtquickcontrols2-menus</db:member><db:member>qtquickcontrols2-popups</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-menu.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Menu has two main use cases:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Context menus; for example, a menu that is shown after right clicking</db:para>
</db:listitem>
<db:listitem>
<db:para>Popup menus; for example, a menu that is shown after clicking a button</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="cpp">Button {
    id: fileButton
    text: &quot;File&quot;
    onClicked: menu.open()

    Menu {
        id: menu
        y: fileButton.height

        MenuItem {
            text: &quot;New...&quot;
        }
        MenuItem {
            text: &quot;Open...&quot;
        }
        MenuItem {
            text: &quot;Save&quot;
        }
    }
}
</db:programlisting>
<db:para>Typically, menu items are statically declared as children of the menu, but Menu also provides API to <db:link xlink:href="qml-qtquick-controls2-menu.xml#addItem-method">add</db:link>, <db:link xlink:href="qml-qtquick-controls2-menu.xml#insertItem-method">insert</db:link>, <db:link xlink:href="qml-qtquick-controls2-menu.xml#moveItem-method">move</db:link> and <db:link xlink:href="qml-qtquick-controls2-menu.xml#removeItem-method">remove</db:link> items dynamically. The items in a menu can be accessed using <db:link xlink:href="qml-qtquick-controls2-menu.xml#itemAt-method">itemAt</db:link>() or <db:link xlink:href="qml-qtquick-controls2-popup.xml#contentChildren-prop">contentChildren</db:link>.</db:para>
<db:para>Although <db:link xlink:href="qml-qtquick-controls2-menuitem.xml">MenuItems</db:link> are most commonly used with Menu, it can contain any type of item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols2-customize.xml#customizing-menu">Customizing Menu</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols2-menus.xml">Menu Controls</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols2-popups.xml">Popup Controls</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="contentData-prop">
<db:title>contentData : list&lt;Object&gt;</db:title>
<db:para>This property holds the list of content data.</db:para>
<db:para>The list contains all objects that have been declared in QML as children of the menu, and also items that have been dynamically added or inserted using the <db:link xlink:href="qml-qtquick-controls2-menu.xml#addItem-method">addItem</db:link>() and <db:link xlink:href="qml-qtquick-controls2-menu.xml#insertItem-method">insertItem</db:link>() methods, respectively.</db:para>
<db:note>
<db:para>Unlike <db:code>contentChildren</db:code>, <db:code>contentData</db:code> does include non-visual QML objects. It is not re-ordered when items are inserted or moved.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#data-prop">Item::data</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-popup.xml#contentChildren-prop">contentChildren</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contentModel-prop">
<db:title>[read-only] contentModel : model</db:title>
<db:para>This property holds the model used to display menu items.</db:para>
<db:para>The content model is provided for visualization purposes. It can be assigned as a model to a content item that presents the contents of the menu.</db:para>
<db:programlisting language="cpp">Menu {
    id: menu
    contentItem: ListView {
        model: menu.contentModel
    }
}
</db:programlisting>
<db:para>The model allows menu items to be statically declared as children of the menu.</db:para>
</db:section>
<db:section xml:id="title-prop">
<db:title>title : string</db:title>
<db:para>This property holds the title for the menu.</db:para>
<db:para>The title of a menu is often displayed in the text of a menu item when the menu is a submenu, and in the text of a tool button when it is in a menubar.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="addItem-method">
<db:title>void addItem(Item <db:emphasis>item</db:emphasis>)</db:title>
<db:para>Adds <db:code role="parameter">item</db:code> to the end of the list of items.</db:para>
</db:section>
<db:section xml:id="insertItem-method">
<db:title>void insertItem(int <db:emphasis>index</db:emphasis>, Item <db:emphasis>item</db:emphasis>)</db:title>
<db:para>Inserts <db:code role="parameter">item</db:code> at <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="itemAt-method">
<db:title>Item itemAt(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns the item at <db:code role="parameter">index</db:code>, or <db:code>null</db:code> if it does not exist.</db:para>
</db:section>
<db:section xml:id="moveItem-method">
<db:title>void moveItem(int <db:emphasis>from</db:emphasis>, int <db:emphasis>to</db:emphasis>)</db:title>
<db:para>Moves an item <db:code role="parameter">from</db:code> one index <db:code role="parameter">to</db:code> another.</db:para>
</db:section>
<db:section xml:id="removeItem-method">
<db:title>void removeItem(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Removes the item at <db:code role="parameter">index</db:code>.</db:para>
<db:note>
<db:para>The ownership of the item is transferred to the caller.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
