<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Map Viewer (QML)</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Map Viewer example shows how to display and interact with a map, search for an address, and find driving directions.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

import QtQuick 2.5
import QtQuick.Controls 1.4
import QtLocation 5.6
import QtPositioning 5.5
import &quot;map&quot;
import &quot;menus&quot;
import &quot;helper.js&quot; as Helper

ApplicationWindow {
    id: appWindow
    property variant map
    property variant minimap
    property variant parameters

    //defaults
    property variant fromCoordinate: QtPositioning.coordinate(59.9483, 10.7695)
    property variant toCoordinate: QtPositioning.coordinate(59.9645, 10.671)

    function createMap(provider)
    {
        var plugin

        if (parameters &amp;&amp; parameters.length&gt;0)
            plugin = Qt.createQmlObject ('import QtLocation 5.6; Plugin{ name:&quot;' + provider + '&quot;; parameters: appWindow.parameters}', appWindow)
        else
            plugin = Qt.createQmlObject ('import QtLocation 5.6; Plugin{ name:&quot;' + provider + '&quot;}', appWindow)

        if (minimap) {
            minimap.destroy()
            minimap = null
        }

        var zoomLevel = null
        var center = null
        if (map) {
            zoomLevel = map.zoomLevel
            center = map.center
            map.destroy()
        }

        map = mapComponent.createObject(page);
        map.plugin = plugin;

        if (zoomLevel != null) {
            map.zoomLevel = zoomLevel
            map.center = center
        } else {
            map.zoomLevel = (map.maximumZoomLevel - map.minimumZoomLevel)/2
        }

        map.forceActiveFocus()
    }

    function getPlugins()
    {
        var plugin = Qt.createQmlObject ('import QtLocation 5.6; Plugin {}', appWindow)
        var myArray = new Array()
        for (var i = 0; i&lt;plugin.availableServiceProviders.length; i++) {
            var tempPlugin = Qt.createQmlObject ('import QtLocation 5.6; Plugin {name: &quot;' + plugin.availableServiceProviders[i]+ '&quot;}', appWindow)
            if (tempPlugin.supportsMapping())
                myArray.push(tempPlugin.name)
        }
        myArray.sort()
        return myArray
    }

    function initializeProviders(pluginParameters)
    {
        var parameters = new Array()
        for (var prop in pluginParameters){
            var parameter = Qt.createQmlObject('import QtLocation 5.6; PluginParameter{ name: &quot;'+ prop + '&quot;; value: &quot;' + pluginParameters[prop]+'&quot;}',appWindow)
            parameters.push(parameter)
        }
        appWindow.parameters = parameters
        var plugins = getPlugins()
        mainMenu.providerMenu.createMenu(plugins)
        for (var i = 0; i&lt;plugins.length; i++) {
            if (plugins[i] === &quot;osm&quot;)
                mainMenu.selectProvider(plugins[i])
        }
    }

    title: qsTr(&quot;Mapviewer&quot;)
    height: 640
    width: 360
    visible: true
    menuBar: mainMenu

    Address {
        id :fromAddress
        street: &quot;Sandakerveien 116&quot;
        city: &quot;Oslo&quot;
        country: &quot;Norway&quot;
        state : &quot;&quot;
        postalCode: &quot;0484&quot;
    }

    Address {
        id: toAddress
        street: &quot;Holmenkollveien 140&quot;
        city: &quot;Oslo&quot;
        country: &quot;Norway&quot;
        postalCode: &quot;0791&quot;
    }

    MainMenu {
        id: mainMenu

        function toggleMiniMapState()
        {
            if (minimap) {
                minimap.destroy()
                minimap = null
            } else {
                minimap = Qt.createQmlObject ('import &quot;map&quot;; MiniMap{ z: map.z + 2 }', map)
            }
        }

        function setLanguage(lang)
        {
            map.plugin.locales = lang;
            stackView.pop(page)
        }

        onSelectProvider: {
            stackView.pop()
            for (var i = 0; i &lt; providerMenu.items.length; i++) {
                providerMenu.items[i].checked = providerMenu.items[i].text === providerName
            }

            createMap(providerName)
            if (map.error === Map.NoError) {
                selectMapType(map.activeMapType)
                toolsMenu.createMenu(map);
            } else {
                mapTypeMenu.clear();
                toolsMenu.clear();
            }
        }

        onSelectMapType: {
            stackView.pop(page)
            for (var i = 0; i &lt; mapTypeMenu.items.length; i++) {
                mapTypeMenu.items[i].checked = mapTypeMenu.items[i].text === mapType.name
            }
            map.activeMapType = mapType
        }

        onSelectTool: {
            switch (tool) {
            case &quot;AddressRoute&quot;:
                stackView.pop({item:page, immediate: true})
                stackView.push({ item: Qt.resolvedUrl(&quot;forms/RouteAddress.qml&quot;) ,
                                   properties: { &quot;plugin&quot;: map.plugin,
                                       &quot;toAddress&quot;: toAddress,
                                       &quot;fromAddress&quot;: fromAddress}})
                stackView.currentItem.showRoute.connect(map.calculateCoordinateRoute)
                stackView.currentItem.showMessage.connect(stackView.showMessage)
                stackView.currentItem.closeForm.connect(stackView.closeForm)
                break
            case &quot;CoordinateRoute&quot;:
                stackView.pop({item:page, immediate: true})
                stackView.push({ item: Qt.resolvedUrl(&quot;forms/RouteCoordinate.qml&quot;) ,
                                   properties: { &quot;toCoordinate&quot;: toCoordinate,
                                       &quot;fromCoordinate&quot;: fromCoordinate}})
                stackView.currentItem.showRoute.connect(map.calculateCoordinateRoute)
                stackView.currentItem.closeForm.connect(stackView.closeForm)
                break
            case &quot;Geocode&quot;:
                stackView.pop({item:page, immediate: true})
                stackView.push({ item: Qt.resolvedUrl(&quot;forms/Geocode.qml&quot;) ,
                                   properties: { &quot;address&quot;: fromAddress}})
                stackView.currentItem.showPlace.connect(map.geocode)
                stackView.currentItem.closeForm.connect(stackView.closeForm)
                break
            case &quot;RevGeocode&quot;:
                stackView.pop({item:page, immediate: true})
                stackView.push({ item: Qt.resolvedUrl(&quot;forms/ReverseGeocode.qml&quot;) ,
                                   properties: { &quot;coordinate&quot;: fromCoordinate}})
                stackView.currentItem.showPlace.connect(map.geocode)
                stackView.currentItem.closeForm.connect(stackView.closeForm)
                break
            case &quot;Language&quot;:
                stackView.pop({item:page, immediate: true})
                stackView.push({ item: Qt.resolvedUrl(&quot;forms/Locale.qml&quot;) ,
                                   properties: { &quot;locale&quot;:  map.plugin.locales[0]}})
                stackView.currentItem.selectLanguage.connect(setLanguage)
                stackView.currentItem.closeForm.connect(stackView.closeForm)
                break
            case &quot;Clear&quot;:
                map.clearData()
                break
            case &quot;Prefetch&quot;:
                map.prefetchData()
                break
            default:
                console.log(&quot;Unsupported operation&quot;)
            }
        }

        onToggleMapState: {
            stackView.pop(page)
            switch (state) {
            case &quot;FollowMe&quot;:
                map.followme = !map.followme
                break
            case &quot;MiniMap&quot;:
                toggleMiniMapState()
                isMiniMap = minimap
                break
            default:
                console.log(&quot;Unsupported operation&quot;)
            }
        }
    }

    MapPopupMenu {
        id: mapPopupMenu

        function show(coordinate)
        {
            stackView.pop(page)
            mapPopupMenu.coordinate = coordinate
            mapPopupMenu.markersCount = map.markers.length
            mapPopupMenu.mapItemsCount = map.mapItems.length
            mapPopupMenu.update()
            mapPopupMenu.popup()
        }

        onItemClicked: {
            stackView.pop(page)
            switch (item) {
            case &quot;addMarker&quot;:
                map.addMarker()
                break
            case &quot;getCoordinate&quot;:
                map.coordinatesCaptured(coordinate.latitude, coordinate.longitude)
                break
            case &quot;fitViewport&quot;:
                map.fitViewportToMapItems()
                break
            case &quot;deleteMarkers&quot;:
                map.deleteMarkers()
                break
            case &quot;deleteItems&quot;:
                map.deleteMapItems()
                break
            default:
                console.log(&quot;Unsupported operation&quot;)
            }
        }
    }

    MarkerPopupMenu {
        id: markerPopupMenu

        function show(coordinate)
        {
            stackView.pop(page)
            markerPopupMenu.markersCount = map.markers.length
            markerPopupMenu.update()
            markerPopupMenu.popup()
        }

        function askForCoordinate()
        {
            stackView.push({ item: Qt.resolvedUrl(&quot;forms/ReverseGeocode.qml&quot;) ,
                               properties: { &quot;title&quot;: qsTr(&quot;New Coordinate&quot;),
                                   &quot;coordinate&quot;:   map.markers[map.currentMarker].coordinate}})
            stackView.currentItem.showPlace.connect(moveMarker)
            stackView.currentItem.closeForm.connect(stackView.closeForm)
        }

        function moveMarker(coordinate)
        {
            map.markers[map.currentMarker].coordinate = coordinate;
            map.center = coordinate;
            stackView.pop(page)
        }

        onItemClicked: {
            stackView.pop(page)
            switch (item) {
            case &quot;deleteMarker&quot;:
                map.deleteMarker(map.currentMarker)
                break;
            case &quot;getMarkerCoordinate&quot;:
                map.coordinatesCaptured(map.markers[map.currentMarker].coordinate.latitude, map.markers[map.currentMarker].coordinate.longitude)
                break;
            case &quot;moveMarkerTo&quot;:
                askForCoordinate()
                break;
            case &quot;routeToNextPoint&quot;:
            case &quot;routeToNextPoints&quot;:
                map.calculateMarkerRoute()
                break
            case &quot;distanceToNextPoint&quot;:
                var coordinate1 = map.markers[currentMarker].coordinate;
                var coordinate2 = map.markers[currentMarker+1].coordinate;
                var distance = Helper.formatDistance(coordinate1.distanceTo(coordinate2));
                stackView.showMessage(qsTr(&quot;Distance&quot;),&quot;&lt;b&gt;&quot; + qsTr(&quot;Distance:&quot;) + &quot;&lt;/b&gt; &quot; + distance)
                break
            case &quot;drawImage&quot;:
                map.addGeoItem(&quot;ImageItem&quot;)
                break
            case &quot;drawRectangle&quot;:
                map.addGeoItem(&quot;RectangleItem&quot;)
                break
            case &quot;drawCircle&quot;:
                map.addGeoItem(&quot;CircleItem&quot;)
                break;
            case &quot;drawPolyline&quot;:
                map.addGeoItem(&quot;PolylineItem&quot;)
                break;
            case &quot;drawPolygonMenu&quot;:
                map.addGeoItem(&quot;PolygonItem&quot;)
                break
            default:
                console.log(&quot;Unsupported operation&quot;)
            }
        }
    }

    ItemPopupMenu {
        id: itemPopupMenu

        function show(type,coordinate)
        {
            stackView.pop(page)
            itemPopupMenu.type = type
            itemPopupMenu.update()
            itemPopupMenu.popup()
        }

        onItemClicked: {
            stackView.pop(page)
            switch (item) {
            case &quot;showRouteInfo&quot;:
                stackView.showRouteListPage()
                break;
            case &quot;deleteRoute&quot;:
                map.routeModel.reset();
                break;
            case &quot;showPointInfo&quot;:
                map.showGeocodeInfo()
                break;
            case &quot;deletePoint&quot;:
                map.geocodeModel.reset()
                break;
            default:
                console.log(&quot;Unsupported operation&quot;)
            }
        }
    }

    StackView {
        id: stackView
        anchors.fill: parent
        focus: true
        initialItem: Item {
            id: page
        }

        function showMessage(title,message,backPage)
        {
            push({ item: Qt.resolvedUrl(&quot;forms/Message.qml&quot;) ,
                               properties: {
                                   &quot;title&quot; : title,
                                   &quot;message&quot; : message,
                                   &quot;backPage&quot; : backPage
                               }})
            currentItem.closeForm.connect(closeMessage)
        }

        function closeMessage(backPage)
        {
            pop(backPage)
        }

        function closeForm()
        {
            pop(page)
        }

        function showRouteListPage()
        {
            push({ item: Qt.resolvedUrl(&quot;forms/RouteList.qml&quot;) ,
                               properties: {
                                   &quot;routeModel&quot; : map.routeModel
                               }})
            currentItem.closeForm.connect(closeForm)
        }
    }

    Component {
        id: mapComponent

        MapComponent{
            width: page.width
            height: page.height
            onFollowmeChanged: mainMenu.isFollowMe = map.followme
            onSupportedMapTypesChanged: mainMenu.mapTypeMenu.createMenu(map)
            onCoordinatesCaptured: {
                var text = &quot;&lt;b&gt;&quot; + qsTr(&quot;Latitude:&quot;) + &quot;&lt;/b&gt; &quot; + Helper.roundNumber(latitude,4) + &quot;&lt;br/&gt;&lt;b&gt;&quot; + qsTr(&quot;Longitude:&quot;) + &quot;&lt;/b&gt; &quot; + Helper.roundNumber(longitude,4)
                stackView.showMessage(qsTr(&quot;Coordinates&quot;),text);
            }
            onGeocodeFinished:{
                if (map.geocodeModel.status == GeocodeModel.Ready) {
                    if (map.geocodeModel.count == 0) {
                        stackView.showMessage(qsTr(&quot;Geocode Error&quot;),qsTr(&quot;Unsuccessful geocode&quot;))
                    } else if (map.geocodeModel.count &gt; 1) {
                        stackView.showMessage(qsTr(&quot;Ambiguous geocode&quot;), map.geocodeModel.count + &quot; &quot; +
                                              qsTr(&quot;results found for the given address, please specify location&quot;))
                    } else {
                        stackView.showMessage(qsTr(&quot;Location&quot;), geocodeMessage(),page)
                    }
                } else if (map.geocodeModel.status == GeocodeModel.Error) {
                    stackView.showMessage(qsTr(&quot;Geocode Error&quot;),qsTr(&quot;Unsuccessful geocode&quot;))
                }
            }
            onRouteError: stackView.showMessage(qsTr(&quot;Route Error&quot;),qsTr(&quot;Unable to find a route for the given points&quot;),page)

            onShowGeocodeInfo: stackView.showMessage(qsTr(&quot;Location&quot;),geocodeMessage(),page)

            onErrorChanged: {
                if (map.error != Map.NoError) {
                    var title = qsTr(&quot;ProviderError&quot;)
                    var message =  map.errorString + &quot;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;&quot; + qsTr(&quot;Try to select other provider&quot;) + &quot;&lt;/b&gt;&quot;
                    if (map.error == Map.MissingRequiredParameterError)
                        message += &quot;&lt;br/&gt;&quot; + qsTr(&quot;or see&quot;) + &quot; \'mapviewer --help\' &quot;
                                + qsTr(&quot;how to pass plugin parameters.&quot;)
                    stackView.showMessage(title,message);
                }
            }
            onShowMainMenu: mapPopupMenu.show(coordinate)
            onShowMarkerMenu: markerPopupMenu.show(coordinate)
            onShowRouteMenu: itemPopupMenu.show(&quot;Route&quot;,coordinate)
            onShowPointMenu: itemPopupMenu.show(&quot;Point&quot;,coordinate)
            onShowRouteList: stackView.showRouteListPage()
        }
    }
}

</db:programlisting>
</db:article>
