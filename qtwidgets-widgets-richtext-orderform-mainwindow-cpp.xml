<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Order Form Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Order Form example shows how to generate rich text documents by combining a simple template with data input by the user in a dialog.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;
#if defined(QT_PRINTSUPPORT_LIB)
#include &amp;lt;QtPrintSupport/qtprintsupportglobal.h&amp;gt;
#if QT_CONFIG(printdialog)
#include &amp;lt;QPrinter&amp;gt;
#include &amp;lt;QPrintDialog&amp;gt;
#endif
#endif

#include &quot;detailsdialog.h&quot;
#include &quot;mainwindow.h&quot;

MainWindow::MainWindow()
{
    QMenu *fileMenu = new QMenu(tr(&quot;&amp;amp;File&quot;), this);
    QAction *newAction = fileMenu-&amp;gt;addAction(tr(&quot;&amp;amp;New...&quot;));
    newAction-&amp;gt;setShortcuts(QKeySequence::New);
    printAction = fileMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Print...&quot;), this, SLOT(printFile()));
    printAction-&amp;gt;setShortcuts(QKeySequence::Print);
    printAction-&amp;gt;setEnabled(false);
    QAction *quitAction = fileMenu-&amp;gt;addAction(tr(&quot;E&amp;amp;xit&quot;));
    quitAction-&amp;gt;setShortcuts(QKeySequence::Quit);
    menuBar()-&amp;gt;addMenu(fileMenu);

    letters = new QTabWidget;

    connect(newAction, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::openDialog);
    connect(quitAction, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::close);

    setCentralWidget(letters);
    setWindowTitle(tr(&quot;Order Form&quot;));
}

void MainWindow::createLetter(const QString &amp;amp;name, const QString &amp;amp;address,
                              QList&amp;lt;QPair&amp;lt;QString,int&amp;gt; &amp;gt; orderItems,
                              bool sendOffers)
{
    QTextEdit *editor = new QTextEdit;
    int tabIndex = letters-&amp;gt;addTab(editor, name);
    letters-&amp;gt;setCurrentIndex(tabIndex);

    QTextCursor cursor(editor-&amp;gt;textCursor());
    cursor.movePosition(QTextCursor::Start);
    QTextFrame *topFrame = cursor.currentFrame();
    QTextFrameFormat topFrameFormat = topFrame-&amp;gt;frameFormat();
    topFrameFormat.setPadding(16);
    topFrame-&amp;gt;setFrameFormat(topFrameFormat);

    QTextCharFormat textFormat;
    QTextCharFormat boldFormat;
    boldFormat.setFontWeight(QFont::Bold);

    QTextFrameFormat referenceFrameFormat;
    referenceFrameFormat.setBorder(1);
    referenceFrameFormat.setPadding(8);
    referenceFrameFormat.setPosition(QTextFrameFormat::FloatRight);
    referenceFrameFormat.setWidth(QTextLength(QTextLength::PercentageLength, 40));
    cursor.insertFrame(referenceFrameFormat);

    cursor.insertText(&quot;A company&quot;, boldFormat);
    cursor.insertBlock();
    cursor.insertText(&quot;321 City Street&quot;);
    cursor.insertBlock();
    cursor.insertText(&quot;Industry Park&quot;);
    cursor.insertBlock();
    cursor.insertText(&quot;Another country&quot;);

    cursor.setPosition(topFrame-&amp;gt;lastPosition());

    cursor.insertText(name, textFormat);
    QString line;
    foreach (line, address.split(&quot;\n&quot;)) {
        cursor.insertBlock();
        cursor.insertText(line);
    }
    cursor.insertBlock();
    cursor.insertBlock();

    QDate date = QDate::currentDate();
    cursor.insertText(tr(&quot;Date: %1&quot;).arg(date.toString(&quot;d MMMM yyyy&quot;)),
                      textFormat);
    cursor.insertBlock();

    QTextFrameFormat bodyFrameFormat;
    bodyFrameFormat.setWidth(QTextLength(QTextLength::PercentageLength, 100));
    cursor.insertFrame(bodyFrameFormat);

    cursor.insertText(tr(&quot;I would like to place an order for the following &quot;
                         &quot;items:&quot;), textFormat);
    cursor.insertBlock();
    cursor.insertBlock();

    QTextTableFormat orderTableFormat;
    orderTableFormat.setAlignment(Qt::AlignHCenter);
    QTextTable *orderTable = cursor.insertTable(1, 2, orderTableFormat);

    QTextFrameFormat orderFrameFormat = cursor.currentFrame()-&amp;gt;frameFormat();
    orderFrameFormat.setBorder(1);
    cursor.currentFrame()-&amp;gt;setFrameFormat(orderFrameFormat);

    cursor = orderTable-&amp;gt;cellAt(0, 0).firstCursorPosition();
    cursor.insertText(tr(&quot;Product&quot;), boldFormat);
    cursor = orderTable-&amp;gt;cellAt(0, 1).firstCursorPosition();
    cursor.insertText(tr(&quot;Quantity&quot;), boldFormat);

    for (int i = 0; i &amp;lt; orderItems.count(); ++i) {
        QPair&amp;lt;QString,int&amp;gt; item = orderItems[i];
        int row = orderTable-&amp;gt;rows();

        orderTable-&amp;gt;insertRows(row, 1);
        cursor = orderTable-&amp;gt;cellAt(row, 0).firstCursorPosition();
        cursor.insertText(item.first, textFormat);
        cursor = orderTable-&amp;gt;cellAt(row, 1).firstCursorPosition();
        cursor.insertText(QString(&quot;%1&quot;).arg(item.second), textFormat);
    }

    cursor.setPosition(topFrame-&amp;gt;lastPosition());

    cursor.insertBlock();
    cursor.insertText(tr(&quot;Please update my records to take account of the &quot;
                         &quot;following privacy information:&quot;));
    cursor.insertBlock();

    QTextTable *offersTable = cursor.insertTable(2, 2);

    cursor = offersTable-&amp;gt;cellAt(0, 1).firstCursorPosition();
    cursor.insertText(tr(&quot;I want to receive more information about your &quot;
                         &quot;company's products and special offers.&quot;), textFormat);
    cursor = offersTable-&amp;gt;cellAt(1, 1).firstCursorPosition();
    cursor.insertText(tr(&quot;I do not want to receive any promotional information &quot;
                         &quot;from your company.&quot;), textFormat);

    if (sendOffers)
        cursor = offersTable-&amp;gt;cellAt(0, 0).firstCursorPosition();
    else
        cursor = offersTable-&amp;gt;cellAt(1, 0).firstCursorPosition();

    cursor.insertText(&quot;X&quot;, boldFormat);

    cursor.setPosition(topFrame-&amp;gt;lastPosition());
    cursor.insertBlock();
    cursor.insertText(tr(&quot;Sincerely,&quot;), textFormat);
    cursor.insertBlock();
    cursor.insertBlock();
    cursor.insertBlock();
    cursor.insertText(name);

    printAction-&amp;gt;setEnabled(true);
}

void MainWindow::createSample()
{
    DetailsDialog dialog(&quot;Dialog with default values&quot;, this);
    createLetter(&quot;Mr. Smith&quot;, &quot;12 High Street\nSmall Town\nThis country&quot;,
                 dialog.orderItems(), true);
}

void MainWindow::openDialog()
{
    DetailsDialog dialog(tr(&quot;Enter Customer Details&quot;), this);

    if (dialog.exec() == QDialog::Accepted) {
        createLetter(dialog.senderName(), dialog.senderAddress(),
                     dialog.orderItems(), dialog.sendOffers());
    }
}

void MainWindow::printFile()
{
#if QT_CONFIG(printdialog)
    QTextEdit *editor = static_cast&amp;lt;QTextEdit*&amp;gt;(letters-&amp;gt;currentWidget());
    QPrinter printer;

    QPrintDialog dialog(&amp;amp;printer, this);
    dialog.setWindowTitle(tr(&quot;Print Document&quot;));
    if (editor-&amp;gt;textCursor().hasSelection())
        dialog.addEnabledOption(QAbstractPrintDialog::PrintSelection);
    if (dialog.exec() != QDialog::Accepted) {
        return;
    }

    editor-&amp;gt;print(&amp;amp;printer);
#endif
}

</db:programlisting>
</db:article>
