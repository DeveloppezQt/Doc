<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Secure Socket Client Example</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to communicate over an encrypted (SSL) connection.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;certificateinfo.h&quot;
#include &quot;ui_certificateinfo.h&quot;

CertificateInfo::CertificateInfo(QWidget *parent)
    : QDialog(parent)
{
    form = new Ui_CertificateInfo;
    form-&gt;setupUi(this);

    connect(form-&gt;certificationPathView, SIGNAL(currentIndexChanged(int)),
            this, SLOT(updateCertificateInfo(int)));
}

CertificateInfo::~CertificateInfo()
{
    delete form;
}

void CertificateInfo::setCertificateChain(const QList&lt;QSslCertificate&gt; &amp;chain)
{
    this-&gt;chain = chain;

    form-&gt;certificationPathView-&gt;clear();

    for (int i = 0; i &lt; chain.size(); ++i) {
        const QSslCertificate &amp;cert = chain.at(i);
        form-&gt;certificationPathView-&gt;addItem(tr(&quot;%1%2 (%3)&quot;).arg(!i ? QString() : tr(&quot;Issued by: &quot;))
                                             .arg(cert.subjectInfo(QSslCertificate::Organization).join(QLatin1Char(' ')))
                                             .arg(cert.subjectInfo(QSslCertificate::CommonName).join(QLatin1Char(' '))));
    }

    form-&gt;certificationPathView-&gt;setCurrentIndex(0);
}

void CertificateInfo::updateCertificateInfo(int index)
{
    form-&gt;certificateInfoView-&gt;clear();
    if (index &gt;= 0 &amp;&amp; index &lt; chain.size()) {
        const QSslCertificate &amp;cert = chain.at(index);
        QStringList lines;
        lines &lt;&lt; tr(&quot;Organization: %1&quot;).arg(cert.subjectInfo(QSslCertificate::Organization).join(QLatin1Char(' ')))
              &lt;&lt; tr(&quot;Subunit: %1&quot;).arg(cert.subjectInfo(QSslCertificate::OrganizationalUnitName).join(QLatin1Char(' ')))
              &lt;&lt; tr(&quot;Country: %1&quot;).arg(cert.subjectInfo(QSslCertificate::CountryName).join(QLatin1Char(' ')))
              &lt;&lt; tr(&quot;Locality: %1&quot;).arg(cert.subjectInfo(QSslCertificate::LocalityName).join(QLatin1Char(' ')))
              &lt;&lt; tr(&quot;State/Province: %1&quot;).arg(cert.subjectInfo(QSslCertificate::StateOrProvinceName).join(QLatin1Char(' ')))
              &lt;&lt; tr(&quot;Common Name: %1&quot;).arg(cert.subjectInfo(QSslCertificate::CommonName).join(QLatin1Char(' ')))
              &lt;&lt; QString()
              &lt;&lt; tr(&quot;Issuer Organization: %1&quot;).arg(cert.issuerInfo(QSslCertificate::Organization).join(QLatin1Char(' ')))
              &lt;&lt; tr(&quot;Issuer Unit Name: %1&quot;).arg(cert.issuerInfo(QSslCertificate::OrganizationalUnitName).join(QLatin1Char(' ')))
              &lt;&lt; tr(&quot;Issuer Country: %1&quot;).arg(cert.issuerInfo(QSslCertificate::CountryName).join(QLatin1Char(' ')))
              &lt;&lt; tr(&quot;Issuer Locality: %1&quot;).arg(cert.issuerInfo(QSslCertificate::LocalityName).join(QLatin1Char(' ')))
              &lt;&lt; tr(&quot;Issuer State/Province: %1&quot;).arg(cert.issuerInfo(QSslCertificate::StateOrProvinceName).join(QLatin1Char(' ')))
              &lt;&lt; tr(&quot;Issuer Common Name: %1&quot;).arg(cert.issuerInfo(QSslCertificate::CommonName).join(QLatin1Char(' ')));
        foreach (QString line, lines)
            form-&gt;certificateInfoView-&gt;addItem(line);
    } else {
        form-&gt;certificateInfoView-&gt;clear();
    }
}

</db:programlisting>
</db:article>
