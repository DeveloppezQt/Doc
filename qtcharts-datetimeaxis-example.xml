<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>DateTimeAxis Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to use QLineChart with QDateTimeAxis.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_datetimeaxis.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>To create line chart, QLineSeries instance is needed. Let's create one.</db:para>
<db:programlisting language="cpp">QLineSeries *series = new QLineSeries();
</db:programlisting>
<db:para>On the charts we will present how the number of sun spots changes in time. The data (from the Space Weather Prediction Center) is read from a text file. In the snippet below, notice how the <db:link xlink:href="qdatetime.xml#toMSecsSinceEpoch">QDateTime::toMSecsSinceEpoch</db:link> method is used to convert the <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object into a number that can be passed to the QLineSeries append method.</db:para>
<db:programlisting language="cpp">// data from http://www.swpc.noaa.gov/ftpdir/weekly/RecentIndices.txt
// http://www.swpc.noaa.gov/ftpdir/weekly/README
// http://www.weather.gov/disclaimer
QFile sunSpots(&quot;:sun&quot;);
if (!sunSpots.open(QIODevice::ReadOnly | QIODevice::Text)) {
    return 1;
}

QTextStream stream(&amp;sunSpots);
while (!stream.atEnd()) {
    QString line = stream.readLine();
    if (line.startsWith(&quot;#&quot;) || line.startsWith(&quot;:&quot;))
        continue;
    QStringList values = line.split(&quot; &quot;, QString::SkipEmptyParts);
    QDateTime momentInTime;
    momentInTime.setDate(QDate(values[0].toInt(), values[1].toInt() , 15));
    series-&gt;append(momentInTime.toMSecsSinceEpoch(), values[2].toDouble());
}
sunSpots.close();
</db:programlisting>
<db:para>To present the data on the chart we need the QChart instance. We add the series to it, hide the legend, create the default axes and set the title of the chart.</db:para>
<db:programlisting language="cpp">QChart *chart = new QChart();
chart-&gt;addSeries(series);
chart-&gt;legend()-&gt;hide();
chart-&gt;setTitle(&quot;Sunspots count (by Space Weather Prediction Center)&quot;);
</db:programlisting>
<db:para>Since we use QLineSeries, calling createDefaultAxes will create QValueAxis both as X- and Y-axis. To use QDateTimeAxis we need to set it manually to the chart. First, the instance of QDateTimeAxis is created, then the number of ticks to be shown is set. The number of sun spots is provided as an average for the month. Therefore we don't need the axis labels to contain the information about the time and the day. This is achieved by setting a custom label format. Please refer to the <db:link xlink:href="qdatetime.xml#toString">QDateTime::toString</db:link>() method documentation to learn about the available format options.</db:para>
<db:programlisting language="cpp">QDateTimeAxis *axisX = new QDateTimeAxis;
axisX-&gt;setTickCount(10);
axisX-&gt;setFormat(&quot;MMM yyyy&quot;);
axisX-&gt;setTitleText(&quot;Date&quot;);
chart-&gt;addAxis(axisX, Qt::AlignBottom);
series-&gt;attachAxis(axisX);

QValueAxis *axisY = new QValueAxis;
axisY-&gt;setLabelFormat(&quot;%i&quot;);
axisY-&gt;setTitleText(&quot;Sunspots count&quot;);
chart-&gt;addAxis(axisY, Qt::AlignLeft);
series-&gt;attachAxis(axisY);
</db:programlisting>
<db:para>Then we create a QChartView object with QChart as a parameter. This way we don't need to create the <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> scene ourselves. We also set the Antialiasing on to have the rendered lines look nicer.</db:para>
<db:programlisting language="cpp">QChartView *chartView = new QChartView(chart);
chartView-&gt;setRenderHint(QPainter::Antialiasing);
</db:programlisting>
<db:para>The chart is ready to be shown.</db:para>
<db:programlisting language="cpp">QMainWindow window;
window.setCentralWidget(chartView);
window.resize(820, 600);
window.show();
</db:programlisting>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="datetimeaxis/datetimeaxis.pro">datetimeaxis/datetimeaxis.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="datetimeaxis/main.cpp">datetimeaxis/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="datetimeaxis/sundata.qrc">datetimeaxis/sundata.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
