<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Charts C++ Classes</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>C++ classes for the Qt Charts API.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>C++ classes for the Qt Charts API.</db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Charts API is built on top of Qt Graphics View Framework. Charts can be displayed as <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> using the QChart class. However there is also the convenience class QChartView, which is <db:link xlink:href="qwidget.xml">QWidget</db:link> based. These enable us to quickly use Qt Charts as a normal Qt widget.</db:para>
<db:para>Each chart type is represented by the QAbstractSeries derived class. To create charts, the users have to use an instance of the related series class and add it to a QChart instance.</db:para>
<db:programlisting language="cpp">QLineSeries* series = new QLineSeries();
series-&gt;add(0, 6);
series-&gt;add(2, 4);
...
chartView-&gt;chart()-&gt;addSeries(series);
chartView-&gt;chart()-&gt;createDefaultAxes();
</db:programlisting>
</db:section>
</db:article>
