<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDBusVirtualObject Class</db:title>
<db:productname>QtDBus</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>QtDBus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdbusvirtualobject.xml">QDBusVirtualObject</db:link> class is used to handle several DBus paths with one class.</db:para>
<db:para>This class was introduced in Qt 5.1.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDBusVirtualObject</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += dbus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDBusVirtualObject">
<db:title>[explicit] QDBusVirtualObject::QDBusVirtualObject(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qdbusvirtualobject.xml">QDBusVirtualObject</db:link> with <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QDBusVirtualObject">
<db:title>[virtual noexcept] QDBusVirtualObject::~QDBusVirtualObject()</db:title>
<db:para>Destroys the object, deleting all of its child objects.</db:para>
</db:section>
<db:section xml:id="handleMessage">
<db:title>[pure virtual] bool QDBusVirtualObject::handleMessage(const QDBusMessage &amp;<db:emphasis>message</db:emphasis>, const QDBusConnection &amp;<db:emphasis>connection</db:emphasis>)</db:title>
<db:para>This function needs to handle all messages to the path of the virtual object, when the SubPath option is specified. The service, path, interface and methos are all part of the <db:code role="parameter">message</db:code>. Parameter <db:code role="parameter">connection</db:code> is the connection handle. Must return true when the message is handled, otherwise false (will generate dbus error message).</db:para>
</db:section>
<db:section xml:id="introspect">
<db:title>[pure virtual] QString QDBusVirtualObject::introspect(const QString &amp;<db:emphasis>path</db:emphasis>) const</db:title>
<db:para>This function needs to handle the introspection of the virtual object on <db:code role="parameter">path</db:code>. It must return xml of the form:</db:para>
<db:programlisting language="cpp">&lt;interface name=&quot;org.qtproject.QtDBus.MyObject&quot; &gt;
    &lt;property access=&quot;readwrite&quot; type=&quot;i&quot; name=&quot;prop1&quot; /&gt;
&lt;/interface&gt;
    </db:programlisting>
<db:para>If you pass the SubPath option, this introspection has to include all child nodes. Otherwise <db:link xlink:href="qdbus.xml">QDBus</db:link> handles the introspection of the child nodes.</db:para>
</db:section>
</db:section>
</db:article>
