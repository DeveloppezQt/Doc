<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QChildEvent Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qchildevent.xml">QChildEvent</db:link> class contains event parameters for child object events.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QChildEvent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qevent.xml" xlink:role="class">QEvent</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QChildEvent is part of <db:simplelist><db:member><db:link xlink:href="events.xml">Event Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Child events are sent immediately to objects when children are added or removed.</db:para>
<db:para>In both cases you can only rely on the child being a <db:link xlink:href="qobject.xml">QObject</db:link> (or, if <db:link xlink:href="qobject.xml#isWidgetType">QObject::isWidgetType</db:link>() returns true, a <db:link xlink:href="qwidget.xml">QWidget</db:link>). This is because in the <db:link xlink:href="qevent.xml#Type-enum">QEvent::ChildAdded</db:link> case the child is not yet fully constructed; in the <db:link xlink:href="qevent.xml#Type-enum">QEvent::ChildRemoved</db:link> case it might have already been destructed.</db:para>
<db:para>The handler for these events is <db:link xlink:href="qobject.xml#childEvent">QObject::childEvent</db:link>().</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QChildEvent">
<db:title>QChildEvent::QChildEvent(QEvent::Type <db:emphasis>type</db:emphasis>, QObject *<db:emphasis>child</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QChildEvent</db:methodname>
<db:methodparam>
<db:type>QEvent::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>child</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QChildEvent(QEvent::Type type, QObject *child)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a child event object of a particular <db:code role="parameter">type</db:code> for the <db:code role="parameter">child</db:code>.</db:para>
<db:para><db:code role="parameter">type</db:code> can be <db:link xlink:href="qevent.xml#Type-enum">QEvent::ChildAdded</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::ChildRemoved</db:link>, or <db:link xlink:href="qevent.xml#Type-enum">QEvent::ChildPolished</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchildevent.xml#child">child</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="added">
<db:title>bool QChildEvent::added() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>added</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool added() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:link xlink:href="qevent.xml#type">type</db:link>() is <db:link xlink:href="qevent.xml#Type-enum">QEvent::ChildAdded</db:link>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="child">
<db:title>QObject *QChildEvent::child() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>child</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * child() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the child object that was added or removed.</db:para>
</db:section>
<db:section xml:id="polished">
<db:title>bool QChildEvent::polished() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>polished</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool polished() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:link xlink:href="qevent.xml#type">type</db:link>() is <db:link xlink:href="qevent.xml#Type-enum">QEvent::ChildPolished</db:link>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="removed">
<db:title>bool QChildEvent::removed() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>removed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removed() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:link xlink:href="qevent.xml#type">type</db:link>() is <db:link xlink:href="qevent.xml#Type-enum">QEvent::ChildRemoved</db:link>; otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
