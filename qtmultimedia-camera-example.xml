<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Camera Example</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to capture a still image or record video. or video.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Camera Example demonstrates how you can use <db:link xlink:href="qtmultimedia-index.xml">Qt Multimedia</db:link> to implement some basic Camera functionality to take still images and record video clips with audio.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
<db:para>The example implements a <db:code>Camera</db:code> class that acts as our camera interface. It has a user interface, control functions, setting values and a means of defining the location where the image or video clip is to be saved. It will also store the image and video settings.</db:para>
<db:para>The Camera class uses:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>An instance of <db:link xlink:href="qcamera.xml">QCamera</db:link>, the API class interface to the hardware.</db:para>
</db:listitem>
<db:listitem>
<db:para>An instance of <db:link xlink:href="qimagecapture.xml">QImageCapture</db:link> to take still images.</db:para>
</db:listitem>
<db:listitem>
<db:para>An instance of <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link> to record video. It also contains the user interface object.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The Camera constructor does some basic initialization:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The user interface is initialized.</db:para>
</db:listitem>
<db:listitem>
<db:para>UI signals are connected to slots that react to the triggering event.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>However, most of the work is done when the <db:emphasis>setCamera()</db:emphasis> function is called, passing in a <db:link xlink:href="qcameradevice.xml">QCameraDevice</db:link>.</db:para>
<db:para><db:emphasis>setCamera()</db:emphasis> sets up various connections between the user interface and the functionality of the Camera class using signals and slots. It also instantiates and initializes the <db:link xlink:href="qcamera.xml">QCamera</db:link>, <db:link xlink:href="qimagecapture.xml">QImageCapture</db:link>, and <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link> objects mentioned above. The still and video recording visual tabs are enabled and finally the <db:link xlink:href="qcamera.xml#start">start</db:link>() function of the <db:link xlink:href="qcamera.xml">QCamera</db:link> object is called.</db:para>
<db:para>Now that the camera is ready for user commands it waits for a suitable event. Such an event can be a key press of either the <db:link xlink:href="qt.xml#Key-enum">Qt::Key_CameraFocus</db:link> or <db:link xlink:href="qt.xml#Key-enum">Qt::Key_Camera</db:link> buttons on the application window. Camera focus will simply display the preview and lock the camera settings. <db:code>Key_Camera</db:code> will either call <db:emphasis>takeImage()</db:emphasis> if doing an image capture, or call <db:code>record()</db:code> or <db:code>stop()</db:code> (if already recording) on the <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link> instance when recording video.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/camera-example.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtmultimedia.git/tree/examples/multimedia/camera?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
