<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QGLFunctions Class</db:title>
<db:productname>qtopengl</db:productname>
<db:titleabbrev>qtopengl Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qglfunctions.xml">QGLFunctions</db:link> class provides cross-platform access to the OpenGL/ES 2.0 API.</db:para>
<db:para><db:emphasis role="bold">This class is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
<db:para>This class was introduced in Qt 4.8.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGLFunctions</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGLFunctions is part of <db:simplelist><db:member>painting-3D</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Status</db:term>
<db:listitem>
<db:para>Deprecated</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This class is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>OpenGL/ES 2.0 defines a subset of the OpenGL specification that is common across many desktop and embedded OpenGL implementations. However, it can be difficult to use the functions from that subset because they need to be resolved manually on desktop systems.</db:para>
<db:para><db:link xlink:href="qglfunctions.xml">QGLFunctions</db:link> provides a guaranteed API that is available on all OpenGL systems and takes care of function resolution on systems that need it. The recommended way to use <db:link xlink:href="qglfunctions.xml">QGLFunctions</db:link> is by direct inheritance:</db:para>
<db:programlisting language="cpp">class MyGLWidget : public QGLWidget, protected QGLFunctions
{
    Q_OBJECT
public:
    MyGLWidget(QWidget *parent = 0) : QGLWidget(parent) {}

protected:
    void initializeGL();
    void paintGL();
};

void MyGLWidget::initializeGL()
{
    initializeGLFunctions();
}
</db:programlisting>
<db:para>The <db:code>paintGL()</db:code> function can then use any of the OpenGL/ES 2.0 functions without explicit resolution, such as glActiveTexture() in the following example:</db:para>
<db:programlisting language="cpp">void MyGLWidget::paintGL()
{
    glActiveTexture(GL_TEXTURE1);
    glBindTexture(GL_TEXTURE_2D, textureId);
    ...
}
</db:programlisting>
<db:para><db:link xlink:href="qglfunctions.xml">QGLFunctions</db:link> can also be used directly for ad-hoc invocation of OpenGL/ES 2.0 functions on all platforms:</db:para>
<db:programlisting language="cpp">QGLFunctions glFuncs(QGLContext::currentContext());
glFuncs.glActiveTexture(GL_TEXTURE1);
</db:programlisting>
<db:para><db:link xlink:href="qglfunctions.xml">QGLFunctions</db:link> provides wrappers for all OpenGL/ES 2.0 functions, except those like <db:code>glDrawArrays()</db:code>, <db:code>glViewport()</db:code>, and <db:code>glBindTexture()</db:code> that don't have portability issues.</db:para>
<db:para>Including the header for <db:link xlink:href="qglfunctions.xml">QGLFunctions</db:link> will also define all of the OpenGL/ES 2.0 macro constants that are not already defined by the system's OpenGL headers, such as <db:code>GL_TEXTURE1</db:code> above.</db:para>
<db:para>The <db:link xlink:href="qglfunctions.xml#hasOpenGLFeature">hasOpenGLFeature</db:link>() and <db:link xlink:href="qglfunctions.xml#openGLFeatures">openGLFeatures</db:link>() functions can be used to determine if the OpenGL implementation has a major OpenGL/ES 2.0 feature. For example, the following checks if non power of two textures are available:</db:para>
<db:programlisting language="cpp">QGLFunctions funcs(QGLContext::currentContext());
bool npot = funcs.hasOpenGLFeature(QGLFunctions::NPOTTextures);
</db:programlisting>
<db:note>
<db:para>This class has been deprecated in favor of <db:link xlink:href="qopenglfunctions.xml">QOpenGLFunctions</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="OpenGLFeature-enum">
<db:title>enum QGLFunctions::OpenGLFeature</db:title>
<db:bridgehead renderas="sect2">flags QGLFunctions::OpenGLFeatures</db:bridgehead>
<db:para>This enum defines OpenGL/ES 2.0 features that may be optional on other platforms.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglfunctions.xml">QGLFunctions</db:link></db:emphasis>::Multitexture</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>glActiveTexture() function is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglfunctions.xml">QGLFunctions</db:link></db:emphasis>::Shaders</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>Shader functions are available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglfunctions.xml">QGLFunctions</db:link></db:emphasis>::Buffers</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para>Vertex and index buffer functions are available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglfunctions.xml">QGLFunctions</db:link></db:emphasis>::Framebuffers</db:code></db:para>
</db:td>
<db:td><db:code>0x0008</db:code></db:td>
<db:td>
<db:para>Framebuffer object functions are available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglfunctions.xml">QGLFunctions</db:link></db:emphasis>::BlendColor</db:code></db:para>
</db:td>
<db:td><db:code>0x0010</db:code></db:td>
<db:td>
<db:para>glBlendColor() is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglfunctions.xml">QGLFunctions</db:link></db:emphasis>::BlendEquation</db:code></db:para>
</db:td>
<db:td><db:code>0x0020</db:code></db:td>
<db:td>
<db:para>glBlendEquation() is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglfunctions.xml">QGLFunctions</db:link></db:emphasis>::BlendEquationSeparate</db:code></db:para>
</db:td>
<db:td><db:code>0x0040</db:code></db:td>
<db:td>
<db:para>glBlendEquationSeparate() is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglfunctions.xml">QGLFunctions</db:link></db:emphasis>::BlendFuncSeparate</db:code></db:para>
</db:td>
<db:td><db:code>0x0080</db:code></db:td>
<db:td>
<db:para>glBlendFuncSeparate() is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglfunctions.xml">QGLFunctions</db:link></db:emphasis>::BlendSubtract</db:code></db:para>
</db:td>
<db:td><db:code>0x0100</db:code></db:td>
<db:td>
<db:para>Blend subtract mode is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglfunctions.xml">QGLFunctions</db:link></db:emphasis>::CompressedTextures</db:code></db:para>
</db:td>
<db:td><db:code>0x0200</db:code></db:td>
<db:td>
<db:para>Compressed texture functions are available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglfunctions.xml">QGLFunctions</db:link></db:emphasis>::Multisample</db:code></db:para>
</db:td>
<db:td><db:code>0x0400</db:code></db:td>
<db:td>
<db:para>glSampleCoverage() function is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglfunctions.xml">QGLFunctions</db:link></db:emphasis>::StencilSeparate</db:code></db:para>
</db:td>
<db:td><db:code>0x0800</db:code></db:td>
<db:td>
<db:para>Separate stencil functions are available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglfunctions.xml">QGLFunctions</db:link></db:emphasis>::NPOTTextures</db:code></db:para>
</db:td>
<db:td><db:code>0x1000</db:code></db:td>
<db:td>
<db:para>Non power of two textures are available.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>OpenGLFeatures</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;OpenGLFeature&gt;. </db:code>It stores an OR combination of <db:code>OpenGLFeature</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGLFunctions">
<db:title>QGLFunctions::QGLFunctions()</db:title>
<db:para>Constructs a default function resolver. The resolver cannot be used until <db:link xlink:href="qglfunctions.xml#initializeGLFunctions">initializeGLFunctions</db:link>() is called to specify the context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglfunctions.xml#initializeGLFunctions">initializeGLFunctions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QGLFunctions-1">
<db:title>[explicit] QGLFunctions::QGLFunctions(const QGLContext *<db:emphasis>context</db:emphasis>)</db:title>
<db:para>Constructs a function resolver for <db:code role="parameter">context</db:code>. If <db:code role="parameter">context</db:code> is null, then the resolver will be created for the current <db:link xlink:href="qglcontext.xml">QGLContext</db:link>.</db:para>
<db:para>An object constructed in this way can only be used with <db:code role="parameter">context</db:code> and other contexts that share with it. Use <db:link xlink:href="qglfunctions.xml#initializeGLFunctions">initializeGLFunctions</db:link>() to change the object's context association.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglfunctions.xml#initializeGLFunctions">initializeGLFunctions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasOpenGLFeature">
<db:title>bool QGLFunctions::hasOpenGLFeature(QGLFunctions::OpenGLFeature <db:emphasis>feature</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">feature</db:code> is present on this system's OpenGL implementation; false otherwise.</db:para>
<db:para>It is assumed that the <db:link xlink:href="qglcontext.xml">QGLContext</db:link> associated with this function resolver is current.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglfunctions.xml#openGLFeatures">openGLFeatures</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initializeGLFunctions">
<db:title>void QGLFunctions::initializeGLFunctions(const QGLContext *<db:emphasis>context</db:emphasis> = 0)</db:title>
<db:para>Initializes GL function resolution for <db:code role="parameter">context</db:code>. If <db:code role="parameter">context</db:code> is null, then the current <db:link xlink:href="qglcontext.xml">QGLContext</db:link> will be used.</db:para>
<db:para>After calling this function, the <db:link xlink:href="qglfunctions.xml" role="deprecated">QGLFunctions</db:link> object can only be used with <db:code role="parameter">context</db:code> and other contexts that share with it. Call initializeGLFunctions() again to change the object's context association.</db:para>
</db:section>
<db:section xml:id="openGLFeatures">
<db:title>QGLFunctions::OpenGLFeatures QGLFunctions::openGLFeatures() const</db:title>
<db:para>Returns the set of features that are present on this system's OpenGL implementation.</db:para>
<db:para>It is assumed that the <db:link xlink:href="qglcontext.xml">QGLContext</db:link> associated with this function resolver is current.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglfunctions.xml#hasOpenGLFeature">hasOpenGLFeature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
