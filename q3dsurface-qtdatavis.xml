<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Q3DSurface Class</db:title>
<db:productname>QtDataVis3D</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="q3dsurface-qtdatavis.xml">Q3DSurface</db:link> class provides methods for rendering 3D surface plots.</db:para>
<db:para>This class was introduced in QtDataVisualization 1.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>Q3DSurface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtDataVisualization 1.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS DataVisualization)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::DataVisualization)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += datavisualization</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstract3dgraph-qtdatavis.xml" xlink:role="class">QAbstract3DGraph</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class enables developers to render 3D surface plots and to view them by rotating the scene freely. The visual properties of the surface such as draw mode and shading can be controlled via <db:link xlink:href="qsurface3dseries-qtdatavis.xml">QSurface3DSeries</db:link>.</db:para>
<db:para>The <db:link xlink:href="q3dsurface-qtdatavis.xml">Q3DSurface</db:link> supports selection by showing a highlighted ball on the data point where the user has clicked with left mouse button (when default input handler is in use) or selected via <db:link xlink:href="qsurface3dseries-qtdatavis.xml">QSurface3DSeries</db:link>. The selection pointer is accompanied with a label which in default case shows the value of the data point and the coordinates of the point.</db:para>
<db:para>The value range and the label format shown on the axis can be controlled through <db:link xlink:href="qvalue3daxis-qtdatavis.xml">QValue3DAxis</db:link>.</db:para>
<db:para>To rotate the graph, hold down the right mouse button and move the mouse. Zooming is done using mouse wheel. Both assume the default input handler is in use.</db:para>
<db:para>If no axes are set explicitly to <db:link xlink:href="q3dsurface-qtdatavis.xml">Q3DSurface</db:link>, temporary default axes with no labels are created. These default axes can be modified via axis accessors, but as soon any axis is set explicitly for the orientation, the default axis for that orientation is destroyed.</db:para>
<db:section xml:id="how-to-construct-a-minimal-q3dsurface-graph">
<db:title>How to construct a minimal Q3DSurface graph</db:title>
<db:para>First, construct <db:link xlink:href="q3dsurface-qtdatavis.xml">Q3DSurface</db:link>. Since we are running the graph as top level window in this example, we need to clear the <db:code>Qt::FramelessWindowHint</db:code> flag, which gets set by default:</db:para>
<db:programlisting language="cpp">Q3DSurface surface;
surface.setFlags(surface.flags() ^ Qt::FramelessWindowHint);
</db:programlisting>
<db:para>Now <db:link xlink:href="q3dsurface-qtdatavis.xml">Q3DSurface</db:link> is ready to receive data to be rendered. Create data elements to receive values:</db:para>
<db:programlisting language="cpp">QSurfaceDataArray *data = new QSurfaceDataArray;
QSurfaceDataRow *dataRow1 = new QSurfaceDataRow;
QSurfaceDataRow *dataRow2 = new QSurfaceDataRow;
</db:programlisting>
<db:para>First feed the data to the row elements and then add their pointers to the data element:</db:para>
<db:programlisting language="cpp">*dataRow1 &lt;&lt; QVector3D(0.0f, 0.1f, 0.5f) &lt;&lt; QVector3D(1.0f, 0.5f, 0.5f);
*dataRow2 &lt;&lt; QVector3D(0.0f, 1.8f, 1.0f) &lt;&lt; QVector3D(1.0f, 1.2f, 1.0f);
*data &lt;&lt; dataRow1 &lt;&lt; dataRow2;
</db:programlisting>
<db:para>Create a new series and set data to it:</db:para>
<db:programlisting language="cpp">QSurface3DSeries *series = new QSurface3DSeries;
series-&gt;dataProxy()-&gt;resetArray(data);
surface.addSeries(series);
</db:programlisting>
<db:para>Finally you will need to set it visible:</db:para>
<db:programlisting language="cpp">surface.show();
</db:programlisting>
<db:para>The complete code needed to create and display this graph is:</db:para>
<db:programlisting language="cpp">#include &lt;QtDataVisualization&gt;

int main(int argc, char **argv)
{
    qputenv(&quot;QSG_RHI_BACKEND&quot;, &quot;opengl&quot;);
    QGuiApplication app(argc, argv);

    Q3DSurface surface;
    surface.setFlags(surface.flags() ^ Qt::FramelessWindowHint);
    QSurfaceDataArray *data = new QSurfaceDataArray;
    QSurfaceDataRow *dataRow1 = new QSurfaceDataRow;
    QSurfaceDataRow *dataRow2 = new QSurfaceDataRow;

    *dataRow1 &lt;&lt; QVector3D(0.0f, 0.1f, 0.5f) &lt;&lt; QVector3D(1.0f, 0.5f, 0.5f);
    *dataRow2 &lt;&lt; QVector3D(0.0f, 1.8f, 1.0f) &lt;&lt; QVector3D(1.0f, 1.2f, 1.0f);
    *data &lt;&lt; dataRow1 &lt;&lt; dataRow2;

    QSurface3DSeries *series = new QSurface3DSeries;
    series-&gt;dataProxy()-&gt;resetArray(data);
    surface.addSeries(series);
    surface.show();

    return app.exec();
}
</db:programlisting>
<db:para>And this is what those few lines of code produce:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/q3dsurface-minimal.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The scene can be rotated, zoomed into, and a surface point can be selected to view its position, but no other interaction is included in this minimal code example. You can learn more by familiarizing yourself with the examples provided, like the <db:link xlink:href="qtdatavis3d-graphgallery-example.xml#surface-graph">Surface Graph</db:link>.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dbars-qtdatavis.xml">Q3DBars</db:link></db:member>
<db:member><db:link xlink:href="q3dscatter-qtdatavis.xml">Q3DScatter</db:link></db:member>
<db:member><db:link xlink:href="qtdatavisualization-module-qtdatavis.xml">Qt Data Visualization C++ Classes</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="axisX-prop">
<db:title>axisX : QValue3DAxis*</db:title>
<db:para>This property holds the active x-axis.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvalue3daxis-qtdatavis.xml">QValue3DAxis</db:link></db:type> *<db:emphasis role="bold">axisX</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="q3dsurface-qtdatavis.xml#setAxisX">setAxisX</db:link></db:emphasis>(<db:type><db:link xlink:href="qvalue3daxis-qtdatavis.xml">QValue3DAxis</db:link></db:type> *<db:emphasis>axis</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">axisXChanged</db:emphasis>(<db:type><db:link xlink:href="qvalue3daxis-qtdatavis.xml">QValue3DAxis</db:link></db:type> *<db:emphasis>axis</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="axisY-prop">
<db:title>axisY : QValue3DAxis*</db:title>
<db:para>This property holds the active y-axis.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvalue3daxis-qtdatavis.xml">QValue3DAxis</db:link></db:type> *<db:emphasis role="bold">axisY</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="q3dsurface-qtdatavis.xml#setAxisY">setAxisY</db:link></db:emphasis>(<db:type><db:link xlink:href="qvalue3daxis-qtdatavis.xml">QValue3DAxis</db:link></db:type> *<db:emphasis>axis</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">axisYChanged</db:emphasis>(<db:type><db:link xlink:href="qvalue3daxis-qtdatavis.xml">QValue3DAxis</db:link></db:type> *<db:emphasis>axis</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="axisZ-prop">
<db:title>axisZ : QValue3DAxis*</db:title>
<db:para>This property holds the active z-axis.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvalue3daxis-qtdatavis.xml">QValue3DAxis</db:link></db:type> *<db:emphasis role="bold">axisZ</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="q3dsurface-qtdatavis.xml#setAxisZ">setAxisZ</db:link></db:emphasis>(<db:type><db:link xlink:href="qvalue3daxis-qtdatavis.xml">QValue3DAxis</db:link></db:type> *<db:emphasis>axis</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">axisZChanged</db:emphasis>(<db:type><db:link xlink:href="qvalue3daxis-qtdatavis.xml">QValue3DAxis</db:link></db:type> *<db:emphasis>axis</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="flipHorizontalGrid-prop">
<db:title>[since QtDataVisualization 1.2] flipHorizontalGrid : bool</db:title>
<db:para>This property holds whether the horizontal axis grid is displayed on top of the graph rather than on the bottom.</db:para>
<db:para>In some use cases the horizontal axis grid is mostly covered by the surface, so it can be more useful to display the horizontal axis grid on top of the graph rather than on the bottom. A typical use case for this is showing 2D spectrograms using orthoGraphic projection with a top-down viewpoint.</db:para>
<db:para>If <db:code>false</db:code>, the horizontal axis grid and labels are drawn on the horizontal background of the graph. If <db:code>true</db:code>, the horizontal axis grid and labels are drawn on the opposite side of the graph from the horizontal background. Defaults to <db:code>false</db:code>.</db:para>
<db:para>This property was introduced in QtDataVisualization 1.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">flipHorizontalGrid</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFlipHorizontalGrid</db:emphasis>(<db:type>bool</db:type> <db:emphasis>flip</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">flipHorizontalGridChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>flip</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="selectedSeries-prop">
<db:title>[read-only] selectedSeries : QSurface3DSeries* const</db:title>
<db:para>This property holds the selected series or null.</db:para>
<db:para>If selectionMode has <db:code>SelectionMultiSeries</db:code> set, this property holds the series which owns the selected point.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsurface3dseries-qtdatavis.xml">QSurface3DSeries</db:link></db:type> *<db:emphasis role="bold">selectedSeries</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">selectedSeriesChanged</db:emphasis>(<db:type><db:link xlink:href="qsurface3dseries-qtdatavis.xml">QSurface3DSeries</db:link></db:type> *<db:emphasis>series</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="Q3DSurface">
<db:title>[explicit] Q3DSurface::Q3DSurface(const QSurfaceFormat *<db:emphasis>format</db:emphasis> = nullptr, QWindow *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a new 3D surface graph with optional <db:code role="parameter">parent</db:code> window and surface <db:code role="parameter">format</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.Q3DSurface">
<db:title>[virtual noexcept] Q3DSurface::~Q3DSurface()</db:title>
<db:para>Destroys the 3D surface graph.</db:para>
</db:section>
<db:section xml:id="addAxis">
<db:title>void Q3DSurface::addAxis(QValue3DAxis *<db:emphasis>axis</db:emphasis>)</db:title>
<db:para>Adds <db:code role="parameter">axis</db:code> to the graph. The axes added via addAxis are not yet taken to use, addAxis is simply used to give the ownership of the <db:code role="parameter">axis</db:code> to the graph. The <db:code role="parameter">axis</db:code> must not be null or added to another graph.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dsurface-qtdatavis.xml#releaseAxis">releaseAxis</db:link>()</db:member>
<db:member><db:link xlink:href="q3dsurface-qtdatavis.xml#setAxisX">setAxisX</db:link>()</db:member>
<db:member><db:link xlink:href="q3dsurface-qtdatavis.xml#setAxisY">setAxisY</db:link>()</db:member>
<db:member><db:link xlink:href="q3dsurface-qtdatavis.xml#setAxisZ">setAxisZ</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addSeries">
<db:title>void Q3DSurface::addSeries(QSurface3DSeries *<db:emphasis>series</db:emphasis>)</db:title>
<db:para>Adds the <db:code role="parameter">series</db:code> to the graph. A graph can contain multiple series, but has only one set of axes. If the newly added series has specified a selected item, it will be highlighted and any existing selection will be cleared. Only one added series can have an active selection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph-qtdatavis.xml#hasSeries">QAbstract3DGraph::hasSeries</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="axes">
<db:title>QList&lt;QValue3DAxis *&gt; Q3DSurface::axes() const</db:title>
<db:para>Returns the list of all added axes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dsurface-qtdatavis.xml#addAxis">addAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="releaseAxis">
<db:title>void Q3DSurface::releaseAxis(QValue3DAxis *<db:emphasis>axis</db:emphasis>)</db:title>
<db:para>Releases the ownership of the <db:code role="parameter">axis</db:code> back to the caller, if it is added to this graph. If the released <db:code role="parameter">axis</db:code> is in use, a new default axis will be created and set active.</db:para>
<db:para>If the default axis is released and added back later, it behaves as any other axis would.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dsurface-qtdatavis.xml#addAxis">addAxis</db:link>()</db:member>
<db:member><db:link xlink:href="q3dsurface-qtdatavis.xml#setAxisX">setAxisX</db:link>()</db:member>
<db:member><db:link xlink:href="q3dsurface-qtdatavis.xml#setAxisY">setAxisY</db:link>()</db:member>
<db:member><db:link xlink:href="q3dsurface-qtdatavis.xml#setAxisZ">setAxisZ</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeSeries">
<db:title>void Q3DSurface::removeSeries(QSurface3DSeries *<db:emphasis>series</db:emphasis>)</db:title>
<db:para>Removes the <db:code role="parameter">series</db:code> from the graph.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph-qtdatavis.xml#hasSeries">QAbstract3DGraph::hasSeries</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="seriesList">
<db:title>QList&lt;QSurface3DSeries *&gt; Q3DSurface::seriesList() const</db:title>
<db:para>Returns the list of series added to this graph.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph-qtdatavis.xml#hasSeries">QAbstract3DGraph::hasSeries</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAxisX">
<db:title>void Q3DSurface::setAxisX(QValue3DAxis *<db:emphasis>axis</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">axis</db:code> as the active x-axis. Implicitly calls <db:link xlink:href="q3dsurface-qtdatavis.xml#addAxis">addAxis</db:link>() to transfer the ownership of the axis to this graph.</db:para>
<db:para>If <db:code role="parameter">axis</db:code> is null, a temporary default axis with no labels and an automatically adjusting range is created.</db:para>
<db:para>This temporary axis is destroyed if another axis is set explicitly to the same orientation.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="q3dsurface-qtdatavis.xml#axisX-prop">axisX</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dsurface-qtdatavis.xml#axisX-prop">axisX</db:link>()</db:member>
<db:member><db:link xlink:href="q3dsurface-qtdatavis.xml#addAxis">addAxis</db:link>()</db:member>
<db:member><db:link xlink:href="q3dsurface-qtdatavis.xml#releaseAxis">releaseAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAxisY">
<db:title>void Q3DSurface::setAxisY(QValue3DAxis *<db:emphasis>axis</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">axis</db:code> as the active y-axis. Implicitly calls <db:link xlink:href="q3dsurface-qtdatavis.xml#addAxis">addAxis</db:link>() to transfer the ownership of the axis to this graph.</db:para>
<db:para>If <db:code role="parameter">axis</db:code> is null, a temporary default axis with no labels and an automatically adjusting range is created.</db:para>
<db:para>This temporary axis is destroyed if another axis is set explicitly to the same orientation.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="q3dsurface-qtdatavis.xml#axisY-prop">axisY</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dsurface-qtdatavis.xml#axisY-prop">axisY</db:link>()</db:member>
<db:member><db:link xlink:href="q3dsurface-qtdatavis.xml#addAxis">addAxis</db:link>()</db:member>
<db:member><db:link xlink:href="q3dsurface-qtdatavis.xml#releaseAxis">releaseAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAxisZ">
<db:title>void Q3DSurface::setAxisZ(QValue3DAxis *<db:emphasis>axis</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">axis</db:code> as the active z-axis. Implicitly calls <db:link xlink:href="q3dsurface-qtdatavis.xml#addAxis">addAxis</db:link>() to transfer the ownership of the axis to this graph.</db:para>
<db:para>If <db:code role="parameter">axis</db:code> is null, a temporary default axis with no labels and an automatically adjusting range is created.</db:para>
<db:para>This temporary axis is destroyed if another axis is set explicitly to the same orientation.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="q3dsurface-qtdatavis.xml#axisZ-prop">axisZ</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dsurface-qtdatavis.xml#axisZ-prop">axisZ</db:link>()</db:member>
<db:member><db:link xlink:href="q3dsurface-qtdatavis.xml#addAxis">addAxis</db:link>()</db:member>
<db:member><db:link xlink:href="q3dsurface-qtdatavis.xml#releaseAxis">releaseAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
