<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTemporaryFile Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> class is an I/O device that operates on temporary files.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTemporaryFile</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qfile.xml" xlink:role="class">QFile</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTemporaryFile is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> is used to create unique temporary files safely. The file itself is created by calling <db:link xlink:href="qtemporaryfile.xml#open">open</db:link>(). The name of the temporary file is guaranteed to be unique (i.e., you are guaranteed to not overwrite an existing file), and the file will subsequently be removed upon destruction of the <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> object. This is an important technique that avoids data corruption for applications that store data in temporary files. The file name is either auto-generated, or created based on a template, which is passed to <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link>'s constructor.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    // Within a function/method...

    QTemporaryFile file;
    if (file.open()) {
        // file.fileName() returns the unique file name
    }

    // The QTemporaryFile destructor removes the temporary file
    // as it goes out of scope.
</db:programlisting>
<db:para>Reopening a <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> after calling <db:link xlink:href="qfiledevice.xml#close">close</db:link>() is safe. For as long as the <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> object itself is not destroyed, the unique temporary file will exist and be kept open internally by <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link>.</db:para>
<db:para>The file name of the temporary file can be found by calling <db:link xlink:href="qtemporaryfile.xml#fileName">fileName</db:link>(). Note that this is only defined after the file is first opened; the function returns an empty string before this.</db:para>
<db:para>A temporary file will have some static part of the name and some part that is calculated to be unique. The default filename will be determined from <db:link xlink:href="qcoreapplication.xml#applicationName-prop">QCoreApplication::applicationName</db:link>() (otherwise qt_temp) and will be placed into the temporary path as returned by <db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>(). If you specify your own filename, a relative file path will not be placed in the temporary directory by default, but be relative to the current working directory. It is important to specify the correct directory if the <db:link xlink:href="qtemporaryfile.xml#rename">rename</db:link>() function will be called, as <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> can only rename files within the same volume / filesystem as the temporary file itself was created on.</db:para>
<db:para>Specified filenames can contain the following template XXXXXX (six upper case &quot;X&quot; characters), which will be replaced by the auto-generated portion of the filename. Note that the template is case sensitive. If the template is not present in the filename, <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> appends the generated part to the filename given.</db:para>
<db:note>
<db:para>On Linux, <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> will attempt to create unnamed temporary files. If that succeeds, <db:link xlink:href="qtemporaryfile.xml#open">open</db:link>() will return true but <db:link xlink:href="qfile.xml#exists-1">exists</db:link>() will be false. If you call <db:link xlink:href="qtemporaryfile.xml#fileName">fileName</db:link>() or any function that calls it, <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> will give the file a name, so most applications will not see a difference.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>()</db:member>
<db:member><db:link xlink:href="qfile.xml">QFile</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTemporaryFile">
<db:title>QTemporaryFile::QTemporaryFile()</db:title>
<db:constructorsynopsis>
<db:methodname>QTemporaryFile</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QTemporaryFile()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> using as file template the application name returned by <db:link xlink:href="qcoreapplication.xml#applicationName-prop">QCoreApplication::applicationName</db:link>() (otherwise qt_temp) followed by &quot;.XXXXXX&quot;. The file is stored in the system's temporary directory, <db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#setFileTemplate">setFileTemplate</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTemporaryFile-1">
<db:title>[explicit] QTemporaryFile::QTemporaryFile(const QString &amp;<db:emphasis>templateName</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QTemporaryFile</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>templateName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTemporaryFile(const QString &amp;templateName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> with a template filename of <db:code role="parameter">templateName</db:code>. Upon opening the temporary file this will be used to create a unique filename.</db:para>
<db:para>If the <db:code role="parameter">templateName</db:code> does not contain XXXXXX it will automatically be appended and used as the dynamic portion of the filename.</db:para>
<db:para>If <db:code role="parameter">templateName</db:code> is a relative path, the path will be relative to the current working directory. You can use <db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>() to construct <db:code role="parameter">templateName</db:code> if you want use the system's temporary directory. It is important to specify the correct directory if the <db:link xlink:href="qtemporaryfile.xml#rename">rename</db:link>() function will be called, as <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> can only rename files within the same volume / filesystem as the temporary file itself was created on.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#open">open</db:link>()</db:member>
<db:member><db:link xlink:href="qtemporaryfile.xml#fileTemplate">fileTemplate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTemporaryFile-2">
<db:title>[explicit] QTemporaryFile::QTemporaryFile(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QTemporaryFile</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QTemporaryFile(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> (with the given <db:code role="parameter">parent</db:code>) using as file template the application name returned by <db:link xlink:href="qcoreapplication.xml#applicationName-prop">QCoreApplication::applicationName</db:link>() (otherwise qt_temp) followed by &quot;.XXXXXX&quot;. The file is stored in the system's temporary directory, <db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#setFileTemplate">setFileTemplate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTemporaryFile-3">
<db:title>QTemporaryFile::QTemporaryFile(const QString &amp;<db:emphasis>templateName</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QTemporaryFile</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>templateName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QTemporaryFile(const QString &amp;templateName, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> with a template filename of <db:code role="parameter">templateName</db:code> and the specified <db:code role="parameter">parent</db:code>. Upon opening the temporary file this will be used to create a unique filename.</db:para>
<db:para>If the <db:code role="parameter">templateName</db:code> does not contain XXXXXX it will automatically be appended and used as the dynamic portion of the filename.</db:para>
<db:para>If <db:code role="parameter">templateName</db:code> is a relative path, the path will be relative to the current working directory. You can use <db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>() to construct <db:code role="parameter">templateName</db:code> if you want use the system's temporary directory. It is important to specify the correct directory if the <db:link xlink:href="qtemporaryfile.xml#rename">rename</db:link>() function will be called, as <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> can only rename files within the same volume / filesystem as the temporary file itself was created on.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#open">open</db:link>()</db:member>
<db:member><db:link xlink:href="qtemporaryfile.xml#fileTemplate">fileTemplate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTemporaryFile-4">
<db:title>[explicit, since 6.7] QTemporaryFile::QTemporaryFile(const std::filesystem::path &amp;<db:emphasis>templateName</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QTemporaryFile</db:methodname>
<db:methodparam>
<db:type>const std::filesystem::path &amp;</db:type>
<db:parameter>templateName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QTemporaryFile(const std::filesystem::path &amp;templateName, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="dtor.QTemporaryFile">
<db:title>[virtual] QTemporaryFile::~QTemporaryFile()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QTemporaryFile</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QTemporaryFile()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the temporary file object, the file is automatically closed if necessary and if in auto remove mode it will automatically delete the file.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#autoRemove">autoRemove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="autoRemove">
<db:title>bool QTemporaryFile::autoRemove() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>autoRemove</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool autoRemove() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> is in auto remove mode. Auto-remove mode will automatically delete the filename from disk upon destruction. This makes it very easy to create your <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> object on the stack, fill it with data, read from it, and finally on function return it will automatically clean up after itself.</db:para>
<db:para>Auto-remove is on by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#setAutoRemove">setAutoRemove</db:link>()</db:member>
<db:member><db:link xlink:href="qfile.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createNativeFile">
<db:title>[static] QTemporaryFile *QTemporaryFile::createNativeFile(QFile &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QTemporaryFile *</db:type>
<db:methodname>createNativeFile</db:methodname>
<db:methodparam>
<db:type>QFile &amp;</db:type>
<db:parameter>file</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTemporaryFile * createNativeFile(QFile &amp;file)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">file</db:code> is not already a native file, then a <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> is created in <db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>(), the contents of <db:code role="parameter">file</db:code> is copied into it, and a pointer to the temporary file is returned. Does nothing and returns 0 if <db:code role="parameter">file</db:code> is already a native file.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">  QFile f(&quot;:/resources/file.txt&quot;);
  QTemporaryFile::createNativeFile(f); // Returns a pointer to a temporary file

  QFile f(&quot;/users/qt/file.txt&quot;);
  QTemporaryFile::createNativeFile(f); // Returns 0
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isNativePath">QFileInfo::isNativePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createNativeFile-1">
<db:title>[static] QTemporaryFile *QTemporaryFile::createNativeFile(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QTemporaryFile *</db:type>
<db:methodname>createNativeFile</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTemporaryFile * createNativeFile(const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Works on the given <db:code role="parameter">fileName</db:code> rather than an existing <db:link xlink:href="qfile.xml">QFile</db:link> object.</db:para>
</db:section>
<db:section xml:id="createNativeFile-2">
<db:title>[static, since 6.7] QTemporaryFile *QTemporaryFile::createNativeFile(const std::filesystem::path &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QTemporaryFile *</db:type>
<db:methodname>createNativeFile</db:methodname>
<db:methodparam>
<db:type>const std::filesystem::path &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QTemporaryFile * createNativeFile(const std::filesystem::path &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="fileName">
<db:title>[override virtual] QString QTemporaryFile::fileName() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>fileName</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fileName() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qfile.xml#fileName" role="function">QFile::fileName() const</db:link>.</db:para>
<db:para>Returns the complete unique filename backing the <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> object. This string is null before the <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> is opened, afterwards it will contain the <db:link xlink:href="qtemporaryfile.xml#fileTemplate">fileTemplate</db:link>() plus additional characters to make it unique.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#fileTemplate">fileTemplate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileTemplate">
<db:title>QString QTemporaryFile::fileTemplate() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>fileTemplate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fileTemplate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the set file template. The default file template will be called qcoreappname.XXXXXX and be placed in <db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#setFileTemplate">setFileTemplate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open">
<db:title>bool QTemporaryFile::open()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>open</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool open()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>A <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> will always be opened in QIODevice::ReadWrite mode, this allows easy access to the data in the file. This function will return true upon success and will set the <db:link xlink:href="qtemporaryfile.xml#fileName">fileName</db:link>() to the unique filename used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#fileName">fileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open-1">
<db:title>[override virtual protected] bool QTemporaryFile::open(QIODeviceBase::OpenMode <db:emphasis>flags</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>open</db:methodname>
<db:methodparam>
<db:type>QIODeviceBase::OpenMode</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool open(QIODeviceBase::OpenMode flags) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qfile.xml#open" role="function">QFile::open(QIODeviceBase::OpenMode mode)</db:link>.</db:para>
<db:para>Creates a unique file name for the temporary file, and opens it. You can get the unique name later by calling <db:link xlink:href="qtemporaryfile.xml#fileName">fileName</db:link>(). The file is guaranteed to have been created by this function (i.e., it has never existed before).</db:para>
</db:section>
<db:section xml:id="rename">
<db:title>bool QTemporaryFile::rename(const QString &amp;<db:emphasis>newName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>rename</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>newName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool rename(const QString &amp;newName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Renames the current temporary file to <db:code role="parameter">newName</db:code> and returns true if it succeeded.</db:para>
<db:para>This function has an important difference compared to <db:link xlink:href="qfile.xml#rename">QFile::rename</db:link>(): it will not perform a copy+delete if the low-level system call to rename the file fails, something that could happen if <db:code role="parameter">newName</db:code> specifies a file in a different volume or filesystem than the temporary file was created on. In other words, <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> only supports atomic file renaming.</db:para>
<db:para>This functionality is intended to support materializing the destination file with all contents already present, so another process cannot see an incomplete file in the process of being written. The <db:link xlink:href="qsavefile.xml">QSaveFile</db:link> class can be used for a similar purpose too, particularly if the destination file is not temporary.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsavefile.xml">QSaveFile</db:link></db:member>
<db:member><db:link xlink:href="qsavefile.xml#commit">QSaveFile::commit</db:link>()</db:member>
<db:member><db:link xlink:href="qfile.xml#rename">QFile::rename</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rename-1">
<db:title>[since 6.7] bool QTemporaryFile::rename(const std::filesystem::path &amp;<db:emphasis>newName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>rename</db:methodname>
<db:methodparam>
<db:type>const std::filesystem::path &amp;</db:type>
<db:parameter>newName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool rename(const std::filesystem::path &amp;newName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="setAutoRemove">
<db:title>void QTemporaryFile::setAutoRemove(bool <db:emphasis>b</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAutoRemove</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAutoRemove(bool b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> into auto-remove mode if <db:code role="parameter">b</db:code> is true.</db:para>
<db:para>Auto-remove is on by default.</db:para>
<db:para>If you set this property to false, ensure the application provides a way to remove the file once it is no longer needed, including passing the responsibility on to another process. Always use the <db:link xlink:href="qtemporaryfile.xml#fileName">fileName</db:link>() function to obtain the name and never try to guess the name that <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> has generated.</db:para>
<db:para>On some systems, if <db:link xlink:href="qtemporaryfile.xml#fileName">fileName</db:link>() is not called before closing the file, the temporary file may be removed regardless of the state of this property. This behavior should not be relied upon, so application code should either call <db:link xlink:href="qtemporaryfile.xml#fileName">fileName</db:link>() or leave the auto removal functionality enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#autoRemove">autoRemove</db:link>()</db:member>
<db:member><db:link xlink:href="qfile.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFileTemplate">
<db:title>void QTemporaryFile::setFileTemplate(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFileTemplate</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFileTemplate(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the static portion of the file name to <db:code role="parameter">name</db:code>. If the file template contains XXXXXX that will automatically be replaced with the unique part of the filename, otherwise a filename will be determined automatically based on the static portion specified.</db:para>
<db:para>If <db:code role="parameter">name</db:code> contains a relative file path, the path will be relative to the current working directory. You can use <db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>() to construct <db:code role="parameter">name</db:code> if you want use the system's temporary directory. It is important to specify the correct directory if the <db:link xlink:href="qtemporaryfile.xml#rename">rename</db:link>() function will be called, as <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> can only rename files within the same volume / filesystem as the temporary file itself was created on.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#fileTemplate">fileTemplate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFileTemplate-1">
<db:title>[since 6.7] void QTemporaryFile::setFileTemplate(const std::filesystem::path &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFileTemplate</db:methodname>
<db:methodparam>
<db:type>const std::filesystem::path &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFileTemplate(const std::filesystem::path &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
</db:section>
</db:article>
