<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QTemporaryFile Class</db:title>
<db:productname>QtCore</db:productname>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> class is an I/O device that operates on temporary files.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTemporaryFile</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qfile.xml" xlink:role="class">QFile</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTemporaryFile is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> is used to create unique temporary files safely. The file itself is created by calling <db:link xlink:href="qtemporaryfile.xml#open">open</db:link>(). The name of the temporary file is guaranteed to be unique (i.e., you are guaranteed to not overwrite an existing file), and the file will subsequently be removed upon destruction of the <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> object. This is an important technique that avoids data corruption for applications that store data in temporary files. The file name is either auto-generated, or created based on a template, which is passed to <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link>'s constructor.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    // Within a function/method...

    QTemporaryFile file;
    if (file.open()) {
        // file.fileName() returns the unique file name
    }

    // The QTemporaryFile destructor removes the temporary file
    // as it goes out of scope.
</db:programlisting>
<db:para>Reopening a <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> after calling <db:link xlink:href="qfiledevice.xml#close">close</db:link>() is safe. For as long as the <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> object itself is not destroyed, the unique temporary file will exist and be kept open internally by <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link>.</db:para>
<db:para>The file name of the temporary file can be found by calling <db:link xlink:href="qtemporaryfile.xml#fileName">fileName</db:link>(). Note that this is only defined after the file is first opened; the function returns an empty string before this.</db:para>
<db:para>A temporary file will have some static part of the name and some part that is calculated to be unique. The default filename will be determined from QCoreApplication::applicationName() (otherwise qt_temp) and will be placed into the temporary path as returned by <db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>(). If you specify your own filename, a relative file path will not be placed in the temporary directory by default, but be relative to the current working directory.</db:para>
<db:para>Specified filenames can contain the following template XXXXXX (six upper case &quot;X&quot; characters), which will be replaced by the auto-generated portion of the filename. Note that the template is case sensitive. If the template is not present in the filename, <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> appends the generated part to the filename given.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>()</db:member>
<db:member><db:link xlink:href="qfile.xml">QFile</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTemporaryFile">
<db:title>QTemporaryFile::QTemporaryFile()</db:title>
<db:para>Constructs a <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> using as file template the application name returned by QCoreApplication::applicationName() (otherwise qt_temp) followed by &quot;.XXXXXX&quot;. The file is stored in the system's temporary directory, <db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#setFileTemplate">setFileTemplate</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTemporaryFile-1">
<db:title>[explicit] QTemporaryFile::QTemporaryFile(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> (with the given <db:code role="parameter">parent</db:code>) using as file template the application name returned by QCoreApplication::applicationName() (otherwise qt_temp) followed by &quot;.XXXXXX&quot;. The file is stored in the system's temporary directory, <db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#setFileTemplate">setFileTemplate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTemporaryFile-2">
<db:title>[explicit] QTemporaryFile::QTemporaryFile(const QString &amp;<db:emphasis>templateName</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> with a template filename of <db:code role="parameter">templateName</db:code>. Upon opening the temporary file this will be used to create a unique filename.</db:para>
<db:para>If the <db:code role="parameter">templateName</db:code> does not contain XXXXXX it will automatically be appended and used as the dynamic portion of the filename.</db:para>
<db:para>If <db:code role="parameter">templateName</db:code> is a relative path, the path will be relative to the current working directory. You can use <db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>() to construct <db:code role="parameter">templateName</db:code> if you want use the system's temporary directory.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#open">open</db:link>()</db:member>
<db:member><db:link xlink:href="qtemporaryfile.xml#fileTemplate">fileTemplate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTemporaryFile-3">
<db:title>QTemporaryFile::QTemporaryFile(const QString &amp;<db:emphasis>templateName</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> with a template filename of <db:code role="parameter">templateName</db:code> and the specified <db:code role="parameter">parent</db:code>. Upon opening the temporary file this will be used to create a unique filename.</db:para>
<db:para>If the <db:code role="parameter">templateName</db:code> does not contain XXXXXX it will automatically be appended and used as the dynamic portion of the filename.</db:para>
<db:para>If <db:code role="parameter">templateName</db:code> is a relative path, the path will be relative to the current working directory. You can use <db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>() to construct <db:code role="parameter">templateName</db:code> if you want use the system's temporary directory.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#open">open</db:link>()</db:member>
<db:member><db:link xlink:href="qtemporaryfile.xml#fileTemplate">fileTemplate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QTemporaryFile">
<db:title>[virtual noexcept] QTemporaryFile::~QTemporaryFile()</db:title>
<db:para>Destroys the temporary file object, the file is automatically closed if necessary and if in auto remove mode it will automatically delete the file.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#autoRemove">autoRemove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="autoRemove">
<db:title>bool QTemporaryFile::autoRemove() const</db:title>
<db:para>Returns true if the <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> is in auto remove mode. Auto-remove mode will automatically delete the filename from disk upon destruction. This makes it very easy to create your <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> object on the stack, fill it with data, read from it, and finally on function return it will automatically clean up after itself.</db:para>
<db:para>Auto-remove is on by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#setAutoRemove">setAutoRemove</db:link>()</db:member>
<db:member><db:link xlink:href="qfile.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createNativeFile">
<db:title>[static] QTemporaryFile *QTemporaryFile::createNativeFile(QFile &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">file</db:code> is not already a native file then a <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> is created in the tempPath() and <db:code role="parameter">file</db:code> is copied into the temporary file, then a pointer to the temporary file is returned. If <db:code role="parameter">file</db:code> is already a native file, a <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> is not created, no copy is made and 0 is returned.</db:para>
<db:para>For example:</db:para>
<db:para><db:link xlink:href="qfile.xml">QFile</db:link> f(&quot;:/resources/file.txt&quot;); QTemporaryFile::createNativeFile(f); // Returns a pointer to a temporary file</db:para>
<db:para><db:link xlink:href="qfile.xml">QFile</db:link> f(&quot;/users/qt/file.txt&quot;); QTemporaryFile::createNativeFile(f); // Returns 0</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isNativePath">QFileInfo::isNativePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createNativeFile-1">
<db:title>[static] QTemporaryFile *QTemporaryFile::createNativeFile(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Works on the given <db:code role="parameter">fileName</db:code> rather than an existing <db:link xlink:href="qfile.xml">QFile</db:link> object.</db:para>
</db:section>
<db:section xml:id="fileName">
<db:title>[override virtual] QString QTemporaryFile::fileName() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qfile.xml#fileName" role="function">QFile::fileName() const</db:link>.</db:para>
<db:para>Returns the complete unique filename backing the <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> object. This string is null before the <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> is opened, afterwards it will contain the <db:link xlink:href="qtemporaryfile.xml#fileTemplate">fileTemplate</db:link>() plus additional characters to make it unique.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#fileTemplate">fileTemplate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileTemplate">
<db:title>QString QTemporaryFile::fileTemplate() const</db:title>
<db:para>Returns the set file template. The default file template will be called qcoreappname.XXXXXX and be placed in <db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#setFileTemplate">setFileTemplate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open">
<db:title>bool QTemporaryFile::open()</db:title>
<db:para>A <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> will always be opened in <db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">QIODevice::ReadWrite</db:link> mode, this allows easy access to the data in the file. This function will return true upon success and will set the <db:link xlink:href="qtemporaryfile.xml#fileName">fileName</db:link>() to the unique filename used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#fileName">fileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open-1">
<db:title>[override virtual protected] bool QTemporaryFile::open(QIODevice::OpenMode <db:emphasis>flags</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qfile.xml#open" role="function">QFile::open(QIODevice::OpenMode mode)</db:link>.</db:para>
<db:para>Creates a unique file name for the temporary file, and opens it. You can get the unique name later by calling <db:link xlink:href="qtemporaryfile.xml#fileName">fileName</db:link>(). The file is guaranteed to have been created by this function (i.e., it has never existed before).</db:para>
</db:section>
<db:section xml:id="setAutoRemove">
<db:title>void QTemporaryFile::setAutoRemove(bool <db:emphasis>b</db:emphasis>)</db:title>
<db:para>Sets the <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> into auto-remove mode if <db:code role="parameter">b</db:code> is true.</db:para>
<db:para>Auto-remove is on by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#autoRemove">autoRemove</db:link>()</db:member>
<db:member><db:link xlink:href="qfile.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFileTemplate">
<db:title>void QTemporaryFile::setFileTemplate(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Sets the static portion of the file name to <db:code role="parameter">name</db:code>. If the file template ends in XXXXXX that will automatically be replaced with the unique part of the filename, otherwise a filename will be determined automatically based on the static portion specified.</db:para>
<db:para>If <db:code role="parameter">name</db:code> contains a relative file path, the path will be relative to the current working directory. You can use <db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>() to construct <db:code role="parameter">name</db:code> if you want use the system's temporary directory.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporaryfile.xml#fileTemplate">fileTemplate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QTemporaryFile</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="createLocalFile">
<db:title>[static, deprecated] QTemporaryFile *QTemporaryFile::createLocalFile(QFile &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qtemporaryfile.xml#createNativeFile">QTemporaryFile::createNativeFile</db:link>(<db:link xlink:href="qfile.xml">QFile</db:link> &amp;file) instead.</db:para>
</db:section>
<db:section xml:id="createLocalFile-1">
<db:title>[static, deprecated] QTemporaryFile *QTemporaryFile::createLocalFile(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Use <db:link xlink:href="qtemporaryfile.xml#createNativeFile">QTemporaryFile::createNativeFile</db:link>(const <db:link xlink:href="qstring.xml">QString</db:link> &amp;<db:link xlink:href="qtemporaryfile.xml#fileName">fileName</db:link>) instead.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
