<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>An Introduction to Namespaces</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="xml-streaming.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="XML Streaming"/></db:extendedlink>
<db:abstract>
<db:para>Qt XML Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="namespaces"/>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>XML Processing</db:para>
<db:para>Parts of the Qt XML module documentation assume that you are familiar with XML namespaces. Here we present a brief introduction; skip to <db:link xlink:href="xml-namespaces.xml#namespacesconventions">Qt XML documentation conventions</db:link> if you already know this material.</db:para>
<db:para>Namespaces are a concept introduced into XML to allow a more modular design. With their help data processing software can easily resolve naming conflicts in XML documents.</db:para>
<db:para>Consider the following example:</db:para>
<db:programlisting language="cpp">&amp;lt;document&amp;gt;
&amp;lt;book&amp;gt;
  &amp;lt;title&amp;gt;Practical XML&amp;lt;/title&amp;gt;
  &amp;lt;author title=&quot;Ms&quot; name=&quot;Eris Kallisti&quot;/&amp;gt;
  &amp;lt;chapter&amp;gt;
    &amp;lt;title&amp;gt;A Namespace Called fnord&amp;lt;/title&amp;gt;
  &amp;lt;/chapter&amp;gt;
&amp;lt;/book&amp;gt;
&amp;lt;/document&amp;gt;
</db:programlisting>
<db:para>Here we find three different uses of the name <db:emphasis>title</db:emphasis>. If you wish to process this document you will encounter problems because each of the <db:emphasis>titles</db:emphasis> should be displayed in a different manner â€“ even though they have the same name.</db:para>
<db:para>The solution would be to have some means of identifying the first occurrence of <db:emphasis>title</db:emphasis> as the title of a book, i.e. to use the <db:emphasis>title</db:emphasis> element of a book namespace to distinguish it from, for example, the chapter title, e.g.:</db:para>
<db:programlisting language="cpp">&amp;lt;book:title&amp;gt;Practical XML&amp;lt;/book:title&amp;gt;
</db:programlisting>
<db:para><db:emphasis>book</db:emphasis> in this case is a <db:emphasis>prefix</db:emphasis> denoting the namespace.</db:para>
<db:para>Before we can apply a namespace to element or attribute names we must declare it.</db:para>
<db:para>Namespaces are URIs like <db:emphasis>http://www.example.com/fnord/book/</db:emphasis>. This does not mean that data must be available at this address; the URI is simply used to provide a unique name.</db:para>
<db:para>We declare namespaces in the same way as attributes; strictly speaking they <db:emphasis>are</db:emphasis> attributes. To make for example <db:emphasis>http://www.example.com/fnord/</db:emphasis> the document's default XML namespace <db:emphasis>xmlns</db:emphasis> we write</db:para>
<db:programlisting language="cpp">xmlns=&quot;http://example.com/fnord/&quot;
</db:programlisting>
<db:para>To distinguish the <db:emphasis>http://www.example.com/fnord/book/</db:emphasis> namespace from the default, we must supply it with a prefix:</db:para>
<db:programlisting language="cpp">xmlns:book=&quot;http://example.com/fnord/book/&quot;
</db:programlisting>
<db:para>A namespace that is declared like this can be applied to element and attribute names by prepending the appropriate prefix and a &quot;:&quot; delimiter. We have already seen this with the <db:emphasis>book:title</db:emphasis> element.</db:para>
<db:para>Element names without a prefix belong to the default namespace. This rule does not apply to attributes: an attribute without a prefix does not belong to any of the declared XML namespaces at all. Attributes always belong to the &quot;traditional&quot; namespace of the element in which they appear. A &quot;traditional&quot; namespace is not an XML namespace, it simply means that all attribute names belonging to one element must be different. Later we will see how to assign an XML namespace to an attribute.</db:para>
<db:para>Due to the fact that attributes without prefixes are not in any XML namespace there is no collision between the attribute <db:emphasis>title</db:emphasis> (that belongs to the <db:emphasis>author</db:emphasis> element) and for example the <db:emphasis>title</db:emphasis> element within a <db:emphasis>chapter</db:emphasis>.</db:para>
<db:para>Let's clarify this with an example:</db:para>
<db:programlisting language="cpp">&amp;lt;document xmlns:book = 'http://example.com/fnord/book/'
          xmlns      = 'http://example.com/fnord/' &amp;gt;
&amp;lt;book&amp;gt;
  &amp;lt;book:title&amp;gt;Practical XML&amp;lt;/book:title&amp;gt;
  &amp;lt;book:author xmlns:fnord = 'http://example.com/fnord/'
               title=&quot;Ms&quot;
               fnord:title=&quot;Goddess&quot;
               name=&quot;Eris Kallisti&quot;/&amp;gt;
  &amp;lt;chapter&amp;gt;
    &amp;lt;title&amp;gt;A Namespace Called fnord&amp;lt;/title&amp;gt;
  &amp;lt;/chapter&amp;gt;
&amp;lt;/book&amp;gt;
&amp;lt;/document&amp;gt;
</db:programlisting>
<db:para>Within the <db:emphasis>document</db:emphasis> element we have two namespaces declared. The default namespace <db:emphasis>http://www.example.com/fnord/</db:emphasis> applies to the <db:emphasis>book</db:emphasis> element, the <db:emphasis>chapter</db:emphasis> element, the appropriate <db:emphasis>title</db:emphasis> element and of course to <db:emphasis>document</db:emphasis> itself.</db:para>
<db:para>The <db:emphasis>book:author</db:emphasis> and <db:emphasis>book:title</db:emphasis> elements belong to the namespace with the URI <db:emphasis>http://www.example.com/fnord/book/</db:emphasis>.</db:para>
<db:para>The two <db:emphasis>book:author</db:emphasis> attributes <db:emphasis>title</db:emphasis> and <db:emphasis>name</db:emphasis> have no XML namespace assigned. They are only members of the &quot;traditional&quot; namespace of the element <db:emphasis>book:author</db:emphasis>, meaning that for example two <db:emphasis>title</db:emphasis> attributes in <db:emphasis>book:author</db:emphasis> are forbidden.</db:para>
<db:para>In the above example we circumvent the last rule by adding a <db:emphasis>title</db:emphasis> attribute from the <db:emphasis>http://www.example.com/fnord/</db:emphasis> namespace to <db:emphasis>book:author</db:emphasis>: the <db:emphasis>fnord:title</db:emphasis> comes from the namespace with the prefix <db:emphasis>fnord</db:emphasis> that is declared in the <db:emphasis>book:author</db:emphasis> element.</db:para>
<db:para>Clearly the <db:emphasis>fnord</db:emphasis> namespace has the same namespace URI as the default namespace. So why didn't we simply use the default namespace we'd already declared? The answer is quite complex:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>attributes without a prefix don't belong to any XML namespace at all, not even to the default namespace;</db:para>
</db:listitem>
<db:listitem>
<db:para>additionally omitting the prefix would lead to a <db:emphasis>title-title</db:emphasis> clash;</db:para>
</db:listitem>
<db:listitem>
<db:para>writing it as <db:emphasis>xmlns:title</db:emphasis> would declare a new namespace with the prefix <db:emphasis>title</db:emphasis> instead of applying the default <db:emphasis>xmlns</db:emphasis> namespace.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>With the Qt XML classes elements and attributes can be accessed in two ways: either by referring to their qualified names consisting of the namespace prefix and the &quot;real&quot; name (or <db:emphasis>local</db:emphasis> name) or by the combination of local name and namespace URI.</db:para>
<db:para>More information on XML namespaces can be found at <db:link xlink:href="http://www.w3.org/TR/REC-xml-names/">http://www.w3.org/TR/REC-xml-names/</db:link>.</db:para>
<db:anchor xml:id="namespacesconventions"/>
<db:section xml:id="conventions-used-in-the-qt-xml-documentation">
<db:title>Conventions Used in the Qt XML Documentation</db:title>
<db:para>The following terms are used to distinguish the parts of names within the context of namespaces:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:emphasis>qualified name</db:emphasis> is the name as it appears in the document. (In the above example <db:emphasis>book:title</db:emphasis> is a qualified name.)</db:para>
</db:listitem>
<db:listitem>
<db:para>A <db:emphasis>namespace prefix</db:emphasis> in a qualified name is the part to the left of the &quot;:&quot;. (<db:emphasis>book</db:emphasis> is the namespace prefix in <db:emphasis>book:title</db:emphasis>.)</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:emphasis>local part</db:emphasis> of a name (also referred to as the <db:emphasis>local name</db:emphasis>) appears to the right of the &quot;:&quot;. (Thus <db:emphasis>title</db:emphasis> is the local part of <db:emphasis>book:title</db:emphasis>.)</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:emphasis>namespace URI</db:emphasis> (&quot;Uniform Resource Identifier&quot;) is a unique identifier for a namespace. It looks like a URL (e.g. <db:emphasis>http://www.example.com/fnord/</db:emphasis> ) but does not require data to be accessible by the given protocol at the named address.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Elements without a &quot;:&quot; (like <db:emphasis>chapter</db:emphasis> in the example) do not have a namespace prefix. In this case the local part and the qualified name are identical (i.e. <db:emphasis>chapter</db:emphasis>).</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtxml-dombookmarks-example.xml">DOM Bookmarks Example</db:link></db:member>
<db:member><db:link xlink:href="qtxml-saxbookmarks-example.xml">SAX Bookmarks Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
