<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Creating Custom Widget Extensions</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="designer-creating-custom-widgets.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Creating Custom Widgets for Qt Designer"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="designer-ui-file-format.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Qt Designer's UI File Format"/></db:extendedlink>
<db:abstract>
<db:para>Qt Designer Manual.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Once you have a custom widget plugin for <db:emphasis>Qt Designer</db:emphasis>, you can provide it with the expected behavior and functionality within <db:emphasis>Qt Designer</db:emphasis>'s workspace, using custom widget extensions.</db:para>
<db:section xml:id="extension-types">
<db:title>Extension Types</db:title>
<db:para>There are several available types of extensions in <db:emphasis>Qt Designer</db:emphasis>. You can use all of these extensions in the same pattern, only replacing the respective extension base class.</db:para>
<db:para><db:link xlink:href="qdesignercontainerextension.xml">QDesignerContainerExtension</db:link> is necessary when implementing a custom multi-page container.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/designer-manual-taskmenuextension.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold"><db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link></db:emphasis></db:para>
<db:para><db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link> is useful for custom widgets. It provides an extension that allows you to add custom menu entries to <db:emphasis>Qt Designer</db:emphasis>'s task menu.</db:para>
<db:para>The <db:link xlink:href="qtdesigner-taskmenuextension-example.xml">Task Menu Extension</db:link> example illustrates how to use this class.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/designer-manual-containerextension.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold"><db:link xlink:href="qdesignercontainerextension.xml">QDesignerContainerExtension</db:link></db:emphasis></db:para>
<db:para><db:link xlink:href="qdesignercontainerextension.xml">QDesignerContainerExtension</db:link> is necessary when implementing a custom multi-page container. It provides an extension that allows you to add and delete pages for a multi-page container plugin in <db:emphasis>Qt Designer</db:emphasis>.</db:para>
<db:para>The <db:link xlink:href="qtdesigner-containerextension-example.xml">Container Extension</db:link> example further explains how to use this class.</db:para>
<db:note>
<db:para>It is not possible to add custom per-page properties for some widgets (e.g., <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link>) due to the way they are implemented.</db:para>
</db:note>
</db:td>
</db:tr>
</db:informaltable>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/designer-manual-membersheetextension.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold"><db:link xlink:href="qdesignermembersheetextension.xml">QDesignerMemberSheetExtension</db:link></db:emphasis></db:para>
<db:para>The <db:link xlink:href="qdesignermembersheetextension.xml">QDesignerMemberSheetExtension</db:link> class allows you to manipulate a widget's member functions displayed when connecting signals and slots.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/designer-manual-propertysheetextension.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold"><db:link xlink:href="qdesignerpropertysheetextension.xml">QDesignerPropertySheetExtension</db:link>, <db:link xlink:href="qdesignerdynamicpropertysheetextension.xml">QDesignerDynamicPropertySheetExtension</db:link></db:emphasis></db:para>
<db:para>These extension classes allow you to control how a widget's properties are displayed in <db:emphasis>Qt Designer</db:emphasis>'s property editor.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:emphasis>Qt Designer</db:emphasis> uses the <db:link xlink:href="qdesignerpropertysheetextension.xml">QDesignerPropertySheetExtension</db:link> and the <db:link xlink:href="qdesignermembersheetextension.xml">QDesignerMemberSheetExtension</db:link> classes to feed its property and signal and slot editors. Whenever a widget is selected in its workspace, <db:emphasis>Qt Designer</db:emphasis> will query for the widget's property sheet extension; likewise, whenever a connection between two widgets is requested, <db:emphasis>Qt Designer</db:emphasis> will query for the widgets' member sheet extensions.</db:para>
<db:warning>
<db:para>All widgets have default property and member sheets. If you implement custom property sheet or member sheet extensions, your custom extensions will override the default sheets.</db:para>
</db:warning>
</db:section>
<db:section xml:id="creating-an-extension">
<db:title>Creating an Extension</db:title>
<db:para>To create an extension you must inherit both <db:link xlink:href="qobject.xml">QObject</db:link> and the appropriate base class, and reimplement its functions. Since we are implementing an interface, we must ensure that it is made known to the meta object system using the <db:link xlink:href="qobject.xml#Q_INTERFACES">Q_INTERFACES</db:link>() macro in the extension class's definition. For example:</db:para>
<db:programlisting language="cpp">class MyExtension: public QObject,
                   public QdesignerContainerExtension
{
    Q_OBJECT
    Q_INTERFACE(QDesignerContainerExtension)

    ...
}
</db:programlisting>
<db:para>This enables <db:emphasis>Qt Designer</db:emphasis> to use the <db:link xlink:href="qobject.xml#qobject_cast-1">qobject_cast</db:link>() function to query for supported interfaces using a <db:link xlink:href="qobject.xml">QObject</db:link> pointer only.</db:para>
</db:section>
<db:section xml:id="exposing-an-extension-to-qt-designer">
<db:title>Exposing an Extension to Qt Designer</db:title>
<db:para>In <db:emphasis>Qt Designer</db:emphasis> the extensions are not created until they are required. For this reason, when implementing extensions, you must subclass <db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link> to create a class that is able to make instances of your extensions. Also, you must register your factory with <db:emphasis>Qt Designer</db:emphasis>'s extension manager; the extension manager handles the construction of extensions.</db:para>
<db:para>When an extension is requested, <db:emphasis>Qt Designer</db:emphasis>'s extension manager will run through its registered factories calling <db:link xlink:href="qextensionfactory.xml#createExtension">QExtensionFactory::createExtension</db:link>() for each of them until it finds one that is able to create the requested extension for the selected widget. This factory will then make an instance of the extension.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtdesignerextensions.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="creating-an-extension-factory">
<db:title>Creating an Extension Factory</db:title>
<db:para>The <db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link> class provides a standard extension factory, but it can also be used as an interface for custom extension factories.</db:para>
<db:para>The purpose is to reimplement the <db:link xlink:href="qextensionfactory.xml#createExtension">QExtensionFactory::createExtension</db:link>() function, making it able to create your extension, such as a <db:link xlink:href="qtdesigner-containerextension-example.xml">MultiPageWidget</db:link> container extension.</db:para>
<db:para>You can either create a new <db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link> and reimplement the <db:link xlink:href="qextensionfactory.xml#createExtension">QExtensionFactory::createExtension</db:link>() function:</db:para>
<db:programlisting language="cpp">QObject *ANewExtensionFactory::createExtension(QObject *object,
        const QString &amp;amp;iid, QObject *parent) const
{
    if (iid != Q_TYPEID(QDesignerContainerExtension))
        return 0;

    if (MyCustomWidget *widget = qobject_cast&amp;lt;MyCustomWidget*&amp;gt;
            (object))
        return new MyContainerExtension(widget, parent);

    return 0;
}
</db:programlisting>
<db:para>or you can use an existing factory, expanding the <db:link xlink:href="qextensionfactory.xml#createExtension">QExtensionFactory::createExtension</db:link>() function to enable the factory to create your custom extension as well:</db:para>
<db:programlisting language="cpp">QObject *AGeneralExtensionFactory::createExtension(QObject *object,
        const QString &amp;amp;iid, QObject *parent) const
{
    MyCustomWidget *widget = qobject_cast&amp;lt;MyCustomWidget*&amp;gt;(object);

    if (widget &amp;amp;&amp;amp; (iid == Q_TYPEID(QDesignerTaskMenuExtension))) {
         return new MyTaskMenuExtension(widget, parent);

    } else if (widget &amp;amp;&amp;amp; (iid == Q_TYPEID(QDesignerContainerExtension))) {
        return new MyContainerExtension(widget, parent);

    } else {
        return 0;
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="accessing-qt-designer-s-extension-manager">
<db:title>Accessing Qt Designer's Extension Manager</db:title>
<db:para>When implementing a custom widget plugin, you must subclass the <db:link xlink:href="qdesignercustomwidgetinterface.xml">QDesignerCustomWidgetInterface</db:link> to expose your plugin to <db:emphasis>Qt Designer</db:emphasis>. This is covered in more detail in the <db:link xlink:href="designer-creating-custom-widgets.xml">Creating Custom Widgets for Qt Designer</db:link> section. The registration of an extension factory is typically made in the <db:link xlink:href="qdesignercustomwidgetinterface.xml#initialize">QDesignerCustomWidgetInterface::initialize</db:link>() function:</db:para>
<db:programlisting language="cpp">void MyPlugin::initialize(QDesignerFormEditorInterface *formEditor)
{
    if (initialized)
        return;

    QExtensionManager *manager = formEditor-&amp;gt;extensionManager();
    Q_ASSERT(manager != 0);

    manager-&amp;gt;registerExtensions(new MyExtensionFactory(manager),
                                Q_TYPEID(QDesignerTaskMenuExtension));

    initialized = true;
}
</db:programlisting>
<db:para>The <db:code>formEditor</db:code> parameter in the <db:link xlink:href="qdesignercustomwidgetinterface.xml#initialize">QDesignerCustomWidgetInterface::initialize</db:link>() function is a pointer to <db:emphasis>Qt Designer</db:emphasis>'s current <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> object. You must use the <db:link xlink:href="qdesignerformeditorinterface.xml#extensionManager">QDesignerFormEditorInterface::extensionManager</db:link>() function to retrieve an interface to <db:emphasis>Qt Designer</db:emphasis>'s extension manager. Then you use the <db:link xlink:href="qextensionmanager.xml#registerExtensions">QExtensionManager::registerExtensions</db:link>() function to register your custom extension factory.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-examples">
<db:title>Related Examples</db:title>
<db:para>For more information on creating custom widget extensions in <db:emphasis>Qt Designer</db:emphasis>, refer to the <db:link xlink:href="qtdesigner-taskmenuextension-example.xml">Task Menu Extension</db:link> and <db:link xlink:href="qtdesigner-containerextension-example.xml">Container Extension</db:link> examples.</db:para>
</db:section>
</db:article>
