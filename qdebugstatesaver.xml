<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDebugStateSaver Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Convenience class for custom <db:link xlink:href="qdebug.xml">QDebug</db:link> operators.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDebugStateSaver</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Saves the settings used by <db:link xlink:href="qdebug.xml">QDebug</db:link>, and restores them upon destruction, then calls <db:link xlink:href="qdebug.xml#maybeSpace">maybeSpace</db:link>(), to separate arguments with a space if <db:link xlink:href="qdebug.xml#autoInsertSpaces">autoInsertSpaces</db:link>() was true at the time of constructing the <db:link xlink:href="qdebugstatesaver.xml">QDebugStateSaver</db:link>.</db:para>
<db:para>The automatic insertion of spaces between writes is one of the settings that <db:link xlink:href="qdebugstatesaver.xml">QDebugStateSaver</db:link> stores for the duration of the current block.</db:para>
<db:para>The settings of the internal <db:link xlink:href="qtextstream.xml">QTextStream</db:link> are also saved and restored, so that using &lt;&lt; <db:link xlink:href="qt.xml#hex">Qt::hex</db:link> in a <db:link xlink:href="qdebug.xml">QDebug</db:link> operator doesn't affect other <db:link xlink:href="qdebug.xml">QDebug</db:link> operators.</db:para>
<db:para><db:link xlink:href="qdebugstatesaver.xml">QDebugStateSaver</db:link> is typically used in the implementation of an operator&lt;&lt;() for debugging:</db:para>
<db:programlisting language="cpp">QDebug operator&amp;lt;&amp;lt;(QDebug dbg, const Message &amp;amp;message)
{
    const QList&amp;lt;QStringView&amp;gt; pieces = message.body().split(u&quot;\r\n&quot;, Qt::SkipEmptyParts);
    if (pieces.isEmpty())
        dbg.nospace() &amp;lt;&amp;lt; &quot;Message()&quot;;
    else if (pieces.size() == 1)
        dbg.nospace() &amp;lt;&amp;lt; &quot;Message(&quot; &amp;lt;&amp;lt; pieces.first() &amp;lt;&amp;lt; &quot;)&quot;;
    else
        dbg.nospace() &amp;lt;&amp;lt; &quot;Message(&quot; &amp;lt;&amp;lt; pieces.first() &amp;lt;&amp;lt; &quot; ...)&quot;;
    return dbg;
}
</db:programlisting>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDebugStateSaver">
<db:title>QDebugStateSaver::QDebugStateSaver(QDebug &amp;<db:emphasis>dbg</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDebugStateSaver</db:methodname>
<db:methodparam>
<db:type>QDebug &amp;</db:type>
<db:parameter>dbg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebugStateSaver(QDebug &amp;dbg)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qdebugstatesaver.xml">QDebugStateSaver</db:link> instance, which saves the settings currently used by <db:code role="parameter">dbg</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#setAutoInsertSpaces">QDebug::setAutoInsertSpaces</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#autoInsertSpaces">QDebug::autoInsertSpaces</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QDebugStateSaver">
<db:title>QDebugStateSaver::~QDebugStateSaver()</db:title>
<db:destructorsynopsis>
<db:methodname>~QDebugStateSaver</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QDebugStateSaver()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a <db:link xlink:href="qdebugstatesaver.xml">QDebugStateSaver</db:link> instance, which restores the settings used when the <db:link xlink:href="qdebugstatesaver.xml">QDebugStateSaver</db:link> instance was created.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#setAutoInsertSpaces">QDebug::setAutoInsertSpaces</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#autoInsertSpaces">QDebug::autoInsertSpaces</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
