<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Audio Recorder Example</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Discovering the available devices and supported codecs.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis>Audio Recorder</db:emphasis> demonstrates how to identify the available devices and supported codecs, and the use of QAudioRecorder class.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/audiorecorder.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="displaying-the-window-and-audio-settings">
<db:title>Displaying the Window and Audio Settings</db:title>
<db:para>We display a window for the user to select the appropriate audio input, codec, container, sample rate, and channels. It allows setting of either quality or bit rate. Finally, the output file can be selected and recording can be started.</db:para>
<db:para>The lists are populated using the following methods:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmediadevices.xml#audioInputs-prop">QMediaDevices::audioInputs</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmediaformat.xml#supportedAudioCodecs">QMediaFormat::supportedAudioCodecs</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmediaformat.xml#supportedFileFormats">QMediaFormat::supportedFileFormats</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qaudiodevice.xml#maximumSampleRate">QAudioDevice::maximumSampleRate</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qaudiodevice.xml#minimumSampleRate">QAudioDevice::minimumSampleRate</db:link>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The quality slider is setup from 0 (zero) to <db:link xlink:href="qmediarecorder.xml#Quality-enum">QMediaRecorder::VeryHighQuality</db:link> with a default value of <db:link xlink:href="qmediarecorder.xml#Quality-enum">QMediaRecorder::NormalQuality</db:link>, while the bit rate box are hard-coded into the list.</db:para>
</db:section>
<db:section xml:id="recording-audio">
<db:title>Recording Audio</db:title>
<db:para>To record audio we simply create a QAudioRecorder object,</db:para>
<db:programlisting language="cpp">audioRecorder = new QAudioRecorder(this);
</db:programlisting>
<db:para>and setup the lists as described above. The text on the record and pause buttons are toggled depending on the <db:link xlink:href="qmediarecorder.xml#RecorderState-enum">state</db:link> of the <db:code>audioRecorder</db:code> object. This means that if the state is <db:link xlink:href="qmediarecorder.xml#RecorderState-enum">QMediaRecorder::StoppedState</db:link> then the button text will be &quot;Record&quot; and &quot;Pause&quot;. In <db:link xlink:href="qmediarecorder.xml#RecorderState-enum">QMediaRecorder::RecordingState</db:link> the record button will have the text &quot;Stop&quot;, and in <db:link xlink:href="qmediarecorder.xml#RecorderState-enum">QMediaRecorder::PausedState</db:link> the pause button will have the text &quot;Resume&quot;.</db:para>
<db:para>Pressing the buttons will also result in a toggle based on the state. If recording is stopped, then pressing the record button will set the encoding settings and container on the <db:code>audioRecorder</db:code> object, and start recording using the <db:link xlink:href="qmediarecorder.xml#record">record</db:link>() method.</db:para>
<db:programlisting language="cpp">QMediaFormat format;
format.setCodec(boxValue(ui-&amp;gt;audioCodecBox).toString());
audioRecorder-&amp;gt;setMediaFormat(format);
audioRecorder-&amp;gt;setSampleRate(boxValue(ui-&amp;gt;sampleRateBox).toInt());
audioRecorder-&amp;gt;setBitRate(boxValue(ui-&amp;gt;bitrateBox).toInt());
audioRecorder-&amp;gt;setQuality(QMediaRecorder::EncodingQuality(ui-&amp;gt;qualitySlider-&amp;gt;value()));
audioRecorder-&amp;gt;setEncodingMode(ui-&amp;gt;constantQualityRadioButton-&amp;gt;isChecked() ?
                         QMediaRecorder::ConstantQualityEncoding :
                         QMediaRecorder::ConstantBitRateEncoding);

QString container = boxValue(ui-&amp;gt;containerBox).toString();

audioRecorder-&amp;gt;record();
</db:programlisting>
<db:para>While recording, the status bar of the application is updated with duration information from the <db:link xlink:href="qmediarecorder.xml#durationChanged">durationChanged</db:link> signal from the <db:code>audioRecorder</db:code> object.</db:para>
<db:programlisting language="cpp">ui-&amp;gt;statusbar-&amp;gt;showMessage(tr(&quot;Recorded %1 sec&quot;).arg(duration / 1000));
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtmultimedia.git/tree/examples/multimedia/audiorecorder?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
