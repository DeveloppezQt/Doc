<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Simple Example (ActiveQt)</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>ActiveQt.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Simple example demonstrates the use of <db:link xlink:href="qaxbindable.xml#requestPropertyChange">QAxBindable::requestPropertyChange</db:link>() and <db:link xlink:href="qaxbindable.xml#propertyChanged">QAxBindable::propertyChanged</db:link>(), and the use of the default <db:link xlink:href="qaxfactory.xml">QAxFactory</db:link> through the <db:code>QAXFACTORY_DEFAULT()</db:code> macro.</db:para>
<db:para>The ActiveX control in this example is a laid out QWidget with a QSlider, a QLCDNumber and a QLineEdit. It provides a signal/slot/property interface to change the values of the slider and the line edit, and to get notified of any property changes.</db:para>
<db:para>The Qt implementation of the ActiveX for this example is</db:para>
<db:programlisting language="cpp">class QSimpleAX : public QWidget, public QAxBindable
{
    Q_OBJECT
    Q_PROPERTY( QString text READ text WRITE setText )
    Q_PROPERTY( int value READ value WRITE setValue )
public:
    QSimpleAX(QWidget *parent = 0)
    : QWidget(parent)
    {
        QVBoxLayout *vbox = new QVBoxLayout( this );

        slider = new QSlider( Qt::Horizontal, this );
        LCD = new QLCDNumber( 3, this );
        edit = new QLineEdit( this );

        connect( slider, &amp;QAbstractSlider::valueChanged, this, &amp;QSimpleAX::setValue );
        connect( edit, &amp;QLineEdit::textChanged, this, &amp;QSimpleAX::setText );

        vbox-&gt;addWidget( slider );
        vbox-&gt;addWidget( LCD );
        vbox-&gt;addWidget( edit );
    }

    QString text() const
    {
        return edit-&gt;text();
    }
    int value() const
    {
        return slider-&gt;value();
    }

signals:
    void someSignal();
    void valueChanged(int);
    void textChanged(const QString&amp;);

public slots:
    void setText( const QString &amp;string )
    {
        if ( !requestPropertyChange( &quot;text&quot; ) )
            return;

        edit-&gt;blockSignals( true );
        edit-&gt;setText( string );
        edit-&gt;blockSignals( false );
        emit someSignal();
        emit textChanged( string );

        propertyChanged( &quot;text&quot; );
    }
    void about()
    {
        QMessageBox::information( this, &quot;About QSimpleAX&quot;, &quot;This is a Qt widget, and this slot has been\n&quot;
                                                          &quot;called through ActiveX/OLE automation!&quot; );
    }
    void setValue( int i )
    {
        if ( !requestPropertyChange( &quot;value&quot; ) )
            return;
        slider-&gt;blockSignals( true );
        slider-&gt;setValue( i );
        slider-&gt;blockSignals( false );
        LCD-&gt;display( i );
        emit valueChanged( i );

        propertyChanged( &quot;value&quot; );
    }

private:
    QSlider *slider;
    QLCDNumber *LCD;
    QLineEdit *edit;
};

</db:programlisting>
<db:para>The control is exported using the default <db:link xlink:href="qaxfactory.xml">QAxFactory</db:link></db:para>
<db:programlisting language="cpp">QAXFACTORY_DEFAULT(QSimpleAX,
           &quot;{DF16845C-92CD-4AAB-A982-EB9840E74669}&quot;,
           &quot;{616F620B-91C5-4410-A74E-6B81C76FFFE0}&quot;,
           &quot;{E1816BBA-BF5D-4A31-9855-D6BA432055FF}&quot;,
           &quot;{EC08F8FC-2754-47AB-8EFE-56A54057F34E}&quot;,
           &quot;{A095BA0C-224F-4933-A458-2DD7F6B85D8F}&quot;)
</db:programlisting>
<db:para>To build the example you must first build the <db:link xlink:href="qaxserver-module.xml">QAxServer</db:link> library. Then run qmake and your make tool in <db:code>examples/activeqt/simple</db:code>.</db:para>
<db:para>The <db:link xlink:href="qaxserver-demo-simple.xml">demonstration</db:link> requires your WebBrowser to support ActiveX controls, and scripting to be enabled.</db:para>
<db:para>The simple ActiveX control is embedded using the <db:code>&lt;object&gt;</db:code> tag.</db:para>
<db:programlisting language="cpp">&lt;object ID=&quot;QSimpleAX&quot; CLASSID=&quot;CLSID:DF16845C-92CD-4AAB-A982-EB9840E74669&quot;
CODEBASE=&quot;http://qt.nokia.com/demos/simpleax.cab&quot;&gt;
    &lt;PARAM NAME=&quot;text&quot; VALUE=&quot;A simple control&quot; /&gt;
    &lt;PARAM NAME=&quot;value&quot; VALUE=&quot;1&quot; /&gt;
[Object not available! Did you forget to build and register the server?]
&lt;/object&gt;
</db:programlisting>
<db:para>A simple HTML button is connected to the ActiveQt's about() slot.</db:para>
<db:programlisting language="cpp">&lt;FORM&gt;
    &lt;INPUT TYPE=&quot;BUTTON&quot; VALUE=&quot;About...&quot; onClick=&quot;QSimpleAX.about()&quot; /&gt;
&lt;/FORM&gt;
</db:programlisting>
<db:para>A second ActiveX control - the standard Calendar Control - is instantiated</db:para>
<db:programlisting language="cpp">&lt;object ID=&quot;Calendar&quot; CLASSID=&quot;CLSID:8E27C92B-1264-101C-8A2F-040224009C02&quot;&gt;
[Standard Calendar control not available!]
    &lt;PARAM NAME=&quot;day&quot; VALUE=&quot;1&quot; /&gt;
&lt;/object&gt;
</db:programlisting>
<db:para>Events from the ActiveX controls are handled using both Visual Basic Script and JavaScript.</db:para>
<db:programlisting language="cpp">&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub Calendar_Click()
    MsgBox( &quot;Calendar Clicked!&quot; )
End Sub

Sub QSimpleAX_TextChanged( str )
    document.title = str
End Sub
&lt;/SCRIPT&gt;

&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
function QSimpleAX::ValueChanged( Newvalue )
{
    Calendar.Day = Newvalue;
}
&lt;/SCRIPT&gt;
</db:programlisting>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="activeqt/simple/main.cpp">activeqt/simple/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="activeqt/simple/simple.pro">activeqt/simple/simple.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
