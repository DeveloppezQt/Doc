<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QBluetoothServiceInfo Class</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link> class enables access to the attributes of a Bluetooth service.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBluetoothServiceInfo</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += bluetooth</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link> provides information about a service offered by a Bluetooth device. In addition it can be used to register new services on the local device. Note that such a registration only affects the Bluetooth SDP entries. Any server listening for incoming connections (e.g an RFCOMM server) must be started before <db:link xlink:href="qbluetoothserviceinfo.xml#registerService">registerService</db:link>() is called. Deregistration must happen in the reverse order.</db:para>
<db:para><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link> is not a value type in the traditional sense. All copies of the same service info object share the same data as they do not detach upon changing them. This ensures that two copies can (de)register the same Bluetooth service.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AttributeId-enum">
<db:title>enum QBluetoothServiceInfo::AttributeId</db:title>
<db:para>Bluetooth service attributes. Please check the Bluetooth Core Specification for a more detailed description of these attributes.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:emphasis>::ServiceRecordHandle</db:code></db:para>
</db:td>
<db:td><db:code>0x0000</db:code></db:td>
<db:td>
<db:para>Specifies a service record from which attributes can be retrieved.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:emphasis>::ServiceClassIds</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>UUIDs of service classes that the service conforms to. The most common service classes are defined in (<db:link xlink:href="qbluetoothuuid.xml#ServiceClassUuid-enum">QBluetoothUuid::ServiceClassUuid</db:link>)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:emphasis>::ServiceRecordState</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>Attibute changes when any other service attribute is added, deleted or modified.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:emphasis>::ServiceId</db:code></db:para>
</db:td>
<db:td><db:code>0x0003</db:code></db:td>
<db:td>
<db:para>UUID that uniquely identifies the service.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:emphasis>::ProtocolDescriptorList</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para>List of protocols used by the service. The most common protocol Uuids are defined in <db:link xlink:href="qbluetoothuuid.xml#ProtocolUuid-enum">QBluetoothUuid::ProtocolUuid</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:emphasis>::BrowseGroupList</db:code></db:para>
</db:td>
<db:td><db:code>0x0005</db:code></db:td>
<db:td>
<db:para>List of browse groups the service is in.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:emphasis>::LanguageBaseAttributeIdList</db:code></db:para>
</db:td>
<db:td><db:code>0x0006</db:code></db:td>
<db:td>
<db:para>List of language base attribute IDs to support human-readable attributes.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:emphasis>::ServiceInfoTimeToLive</db:code></db:para>
</db:td>
<db:td><db:code>0x0007</db:code></db:td>
<db:td>
<db:para>Number of seconds for which the service record is expected to remain valid and unchanged.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:emphasis>::ServiceAvailability</db:code></db:para>
</db:td>
<db:td><db:code>0x0008</db:code></db:td>
<db:td>
<db:para>Value indicating the availability of the service.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:emphasis>::BluetoothProfileDescriptorList</db:code></db:para>
</db:td>
<db:td><db:code>0x0009</db:code></db:td>
<db:td>
<db:para>List of profiles to which the service conforms.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:emphasis>::DocumentationUrl</db:code></db:para>
</db:td>
<db:td><db:code>0x000A</db:code></db:td>
<db:td>
<db:para>URL that points to the documentation on the service..</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:emphasis>::ClientExecutableUrl</db:code></db:para>
</db:td>
<db:td><db:code>0x000B</db:code></db:td>
<db:td>
<db:para>URL that refers to the location of an application that can be used to utilize the service.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:emphasis>::IconUrl</db:code></db:para>
</db:td>
<db:td><db:code>0x000C</db:code></db:td>
<db:td>
<db:para>URL to the location of the icon representing the service.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:emphasis>::AdditionalProtocolDescriptorList</db:code></db:para>
</db:td>
<db:td><db:code>0x000D</db:code></db:td>
<db:td>
<db:para>Additional protocols used by the service. This attribute extends <db:code>ProtocolDescriptorList</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:emphasis>::PrimaryLanguageBase</db:code></db:para>
</db:td>
<db:td><db:code>0x0100</db:code></db:td>
<db:td>
<db:para>Base index for primary language text descriptors.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:emphasis>::ServiceName</db:code></db:para>
</db:td>
<db:td><db:code>PrimaryLanguageBase + 0x0000</db:code></db:td>
<db:td>
<db:para>Name of the Bluetooth service in the primary language.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:emphasis>::ServiceDescription</db:code></db:para>
</db:td>
<db:td><db:code>PrimaryLanguageBase + 0x0001</db:code></db:td>
<db:td>
<db:para>Description of the Bluetooth service in the primary language.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:emphasis>::ServiceProvider</db:code></db:para>
</db:td>
<db:td><db:code>PrimaryLanguageBase + 0x0002</db:code></db:td>
<db:td>
<db:para>Name of the company / entity that provides the Bluetooth service primary language.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Protocol-enum">
<db:title>enum QBluetoothServiceInfo::Protocol</db:title>
<db:para>This enum describes the socket protocol used by the service.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:emphasis>::UnknownProtocol</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The service uses an unknown socket protocol.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:emphasis>::L2capProtocol</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The service uses the L2CAP socket protocol. This protocol is not supported for direct socket connections on Android.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:emphasis>::RfcommProtocol</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The service uses the RFCOMM socket protocol.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QBluetoothServiceInfo">
<db:title>QBluetoothServiceInfo::QBluetoothServiceInfo()</db:title>
<db:para>Construct a new invalid <db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link>;</db:para>
</db:section>
<db:section xml:id="QBluetoothServiceInfo-1">
<db:title>QBluetoothServiceInfo::QBluetoothServiceInfo(const QBluetoothServiceInfo &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Construct a new <db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link> that is a copy of <db:code role="parameter">other</db:code>.</db:para>
<db:para>The two copies continue to share the same underlying data which does not detach upon write.</db:para>
</db:section>
<db:section xml:id="dtor.QBluetoothServiceInfo">
<db:title>[noexcept] QBluetoothServiceInfo::~QBluetoothServiceInfo()</db:title>
<db:para>Destroys the <db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link> object.</db:para>
</db:section>
<db:section xml:id="attribute">
<db:title>QVariant QBluetoothServiceInfo::attribute(quint16 <db:emphasis>attributeId</db:emphasis>) const</db:title>
<db:para>Returns the value of the attribute <db:code role="parameter">attributeId</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#setAttribute">setAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="attributes">
<db:title>QList&lt;quint16&gt; QBluetoothServiceInfo::attributes() const</db:title>
<db:para>Returns a list of all attribute ids that the <db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link> object has.</db:para>
</db:section>
<db:section xml:id="contains">
<db:title>bool QBluetoothServiceInfo::contains(quint16 <db:emphasis>attributeId</db:emphasis>) const</db:title>
<db:para>Returns true if the <db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link> object contains the attribute <db:code role="parameter">attributeId</db:code>, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="device">
<db:title>QBluetoothDeviceInfo QBluetoothServiceInfo::device() const</db:title>
<db:para>Returns the address of the Bluetooth device that provides this service.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#setDevice">setDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isComplete">
<db:title>bool QBluetoothServiceInfo::isComplete() const</db:title>
<db:para>Returns true if the <db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link> object is considered complete, otherwise returns false.</db:para>
<db:para>A complete <db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link> object contains a <db:link xlink:href="qbluetoothserviceinfo.xml#AttributeId-enum">ProtocolDescriptorList</db:link> attribute.</db:para>
</db:section>
<db:section xml:id="isRegistered">
<db:title>bool QBluetoothServiceInfo::isRegistered() const</db:title>
<db:para>Returns true if the service information is registered with the platform's Service Discovery Protocol (SDP) implementation, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QBluetoothServiceInfo::isValid() const</db:title>
<db:para>Returns true if the <db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link> object is valid, otherwise returns false.</db:para>
<db:para>An invalid <db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link> object will have no attributes.</db:para>
</db:section>
<db:section xml:id="protocolDescriptor">
<db:title>QBluetoothServiceInfo::Sequence QBluetoothServiceInfo::protocolDescriptor(QBluetoothUuid::ProtocolUuid <db:emphasis>protocol</db:emphasis>) const</db:title>
<db:para>Returns the protocol parameters as a <db:link xlink:href="qbluetoothserviceinfo-sequence.xml">QBluetoothServiceInfo::Sequence</db:link> for protocol <db:code role="parameter">protocol</db:code>.</db:para>
<db:para>An empty <db:link xlink:href="qbluetoothserviceinfo-sequence.xml">QBluetoothServiceInfo::Sequence</db:link> is returned if <db:code role="parameter">protocol</db:code> is not supported.</db:para>
</db:section>
<db:section xml:id="protocolServiceMultiplexer">
<db:title>int QBluetoothServiceInfo::protocolServiceMultiplexer() const</db:title>
<db:para>This is a convenience function. Returns the protocol/service multiplexer for services which support the L2CAP protocol, otherwise returns -1.</db:para>
<db:para>This function is equivalent to extracting the information from <db:link xlink:href="qbluetoothserviceinfo-sequence.xml">QBluetoothServiceInfo::Sequence</db:link> returned by <db:link xlink:href="qbluetoothserviceinfo.xml#attribute">QBluetoothServiceInfo::attribute</db:link>(<db:link xlink:href="qbluetoothserviceinfo.xml#AttributeId-enum">QBluetoothServiceInfo::ProtocolDescriptorList</db:link>).</db:para>
</db:section>
<db:section xml:id="registerService">
<db:title>bool QBluetoothServiceInfo::registerService(const QBluetoothAddress &amp;<db:emphasis>localAdapter</db:emphasis> = QBluetoothAddress())</db:title>
<db:para>Registers this service with the platform's Service Discovery Protocol (SDP) implementation, making it findable by other devices when they perform service discovery. Returns true if the service is successfully registered, otherwise returns false. Once registered changes to the record cannot be made. The service must be unregistered and registered again with the changes.</db:para>
<db:para>The <db:code role="parameter">localAdapter</db:code> parameter determines the local Bluetooth adapter under which the service should be registered. If <db:code role="parameter">localAdapter</db:code> is <db:code>null</db:code> the default Bluetooth adapter will be used. If this service info object is already registered via a local adapter and this is function is called using a different local adapter, the previous registration is removed and the service reregistered using the new adapter.</db:para>
</db:section>
<db:section xml:id="removeAttribute">
<db:title>void QBluetoothServiceInfo::removeAttribute(quint16 <db:emphasis>attributeId</db:emphasis>)</db:title>
<db:para>Removes the attribute <db:code role="parameter">attributeId</db:code> from the <db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link> object.</db:para>
<db:para>If the service information is already registered with the platforms SDP database, the database entry will not be updated until <db:link xlink:href="qbluetoothserviceinfo.xml#registerService">registerService</db:link>() was called again.</db:para>
</db:section>
<db:section xml:id="serverChannel">
<db:title>int QBluetoothServiceInfo::serverChannel() const</db:title>
<db:para>This is a convenience function. Returns the server channel for services which support the RFCOMM protocol, otherwise returns -1.</db:para>
<db:para>This function is equivalent to extracting the information from <db:link xlink:href="qbluetoothserviceinfo-sequence.xml">QBluetoothServiceInfo::Sequence</db:link> returned by <db:link xlink:href="qbluetoothserviceinfo.xml#attribute">QBluetoothServiceInfo::attribute</db:link>(QBluetootherServiceInfo::ProtocolDescriptorList).</db:para>
</db:section>
<db:section xml:id="serviceAvailability">
<db:title>quint8 QBluetoothServiceInfo::serviceAvailability() const</db:title>
<db:para>This is a convenience function. It is equivalent to calling attribute(<db:link xlink:href="qbluetoothserviceinfo.xml#AttributeId-enum">QBluetoothServiceInfo::ServiceAvailability</db:link>).toUInt().</db:para>
<db:para>Returns the availability of the service.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#setServiceAvailability">setServiceAvailability</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#attribute">attribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="serviceClassUuids">
<db:title>QList&lt;QBluetoothUuid&gt; QBluetoothServiceInfo::serviceClassUuids() const</db:title>
<db:para>Returns a list of UUIDs describing the service classes that this service conforms to.</db:para>
<db:para>This is a convenience function. It is equivalent to calling attribute(<db:link xlink:href="qbluetoothserviceinfo.xml#AttributeId-enum">QBluetoothServiceInfo::ServiceClassIds</db:link>).value&lt;<db:link xlink:href="qbluetoothserviceinfo-sequence.xml">QBluetoothServiceInfo::Sequence</db:link>&gt;() and subsequently iterating over its <db:link xlink:href="qbluetoothuuid.xml">QBluetoothUuid</db:link> entries.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#attribute">attribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="serviceDescription">
<db:title>QString QBluetoothServiceInfo::serviceDescription() const</db:title>
<db:para>This is a convenience function. It is equivalent to calling attribute(<db:link xlink:href="qbluetoothserviceinfo.xml#AttributeId-enum">QBluetoothServiceInfo::ServiceDescription</db:link>).toString().</db:para>
<db:para>Returns the service description in the primary language.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#setServiceDescription">setServiceDescription</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#attribute">attribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="serviceName">
<db:title>QString QBluetoothServiceInfo::serviceName() const</db:title>
<db:para>This is a convenience function. It is equivalent to calling attribute(<db:link xlink:href="qbluetoothserviceinfo.xml#AttributeId-enum">QBluetoothServiceInfo::ServiceName</db:link>).toString().</db:para>
<db:para>Returns the service name in the primary language.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#setServiceName">setServiceName</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#attribute">attribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="serviceProvider">
<db:title>QString QBluetoothServiceInfo::serviceProvider() const</db:title>
<db:para>This is a convenience function. It is equivalent to calling attribute(<db:link xlink:href="qbluetoothserviceinfo.xml#AttributeId-enum">QBluetoothServiceInfo::ServiceProvider</db:link>).toString().</db:para>
<db:para>Returns the service provider in the primary language.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#setServiceProvider">setServiceProvider</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#attribute">attribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="serviceUuid">
<db:title>QBluetoothUuid QBluetoothServiceInfo::serviceUuid() const</db:title>
<db:para>This is a convenience function. It is equivalent to calling attribute(<db:link xlink:href="qbluetoothserviceinfo.xml#AttributeId-enum">QBluetoothServiceInfo::ServiceId</db:link>).value&lt;<db:link xlink:href="qbluetoothuuid.xml">QBluetoothUuid</db:link>&gt;().</db:para>
<db:para>Returns the custom UUID of the service. This UUID may be null. UUIDs based on <db:link xlink:href="https://bluetooth.org">Bluetooth SIG standards</db:link> should be retrieved via <db:link xlink:href="qbluetoothserviceinfo.xml#serviceClassUuids">serviceClassUuids</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#setServiceUuid">setServiceUuid</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#attribute">attribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttribute">
<db:title>void QBluetoothServiceInfo::setAttribute(quint16 <db:emphasis>attributeId</db:emphasis>, const QBluetoothServiceInfo::Alternative &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is a convenience function.</db:para>
<db:para>Sets the attribute identified by <db:code role="parameter">attributeId</db:code> to <db:code role="parameter">value</db:code>.</db:para>
<db:para>If the service information is already registered with the platform's SDP database, the database entry will not be updated until <db:link xlink:href="qbluetoothserviceinfo.xml#registerService">registerService</db:link>() was called again.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#attribute">attribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttribute-1">
<db:title>void QBluetoothServiceInfo::setAttribute(quint16 <db:emphasis>attributeId</db:emphasis>, const QBluetoothServiceInfo::Sequence &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is a convenience function.</db:para>
<db:para>Sets the attribute identified by <db:code role="parameter">attributeId</db:code> to <db:code role="parameter">value</db:code>.</db:para>
<db:para>If the service information is already registered with the platform's SDP database, the database entry will not be updated until <db:link xlink:href="qbluetoothserviceinfo.xml#registerService">registerService</db:link>() was called again.</db:para>
</db:section>
<db:section xml:id="setAttribute-2">
<db:title>void QBluetoothServiceInfo::setAttribute(quint16 <db:emphasis>attributeId</db:emphasis>, const QBluetoothUuid &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is a convenience function.</db:para>
<db:para>Sets the attribute identified by <db:code role="parameter">attributeId</db:code> to <db:code role="parameter">value</db:code>.</db:para>
<db:para>If the service information is already registered with the platform's SDP database, the database entry will not be updated until <db:link xlink:href="qbluetoothserviceinfo.xml#registerService">registerService</db:link>() was called again.</db:para>
</db:section>
<db:section xml:id="setAttribute-3">
<db:title>void QBluetoothServiceInfo::setAttribute(quint16 <db:emphasis>attributeId</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the attribute identified by <db:code role="parameter">attributeId</db:code> to <db:code role="parameter">value</db:code>.</db:para>
<db:para>If the service information is already registered with the platform's SDP database, the database entry will not be updated until <db:link xlink:href="qbluetoothserviceinfo.xml#registerService">registerService</db:link>() was called again.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#isRegistered">isRegistered</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#registerService">registerService</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDevice">
<db:title>void QBluetoothServiceInfo::setDevice(const QBluetoothDeviceInfo &amp;<db:emphasis>device</db:emphasis>)</db:title>
<db:para>Sets the Bluetooth device that provides this service to <db:code role="parameter">device</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#device">device</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setServiceAvailability">
<db:title>void QBluetoothServiceInfo::setServiceAvailability(quint8 <db:emphasis>availability</db:emphasis>)</db:title>
<db:para>This is a convenience function. It is equivalent to calling <db:link xlink:href="qbluetoothserviceinfo.xml#setAttribute">setAttribute</db:link>(<db:link xlink:href="qbluetoothserviceinfo.xml#AttributeId-enum">QBluetoothServiceInfo::ServiceAvailability</db:link>, availability).</db:para>
<db:para>Sets the availabiltiy of the service to <db:code role="parameter">availability</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#serviceAvailability">serviceAvailability</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#setAttribute">setAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setServiceDescription">
<db:title>void QBluetoothServiceInfo::setServiceDescription(const QString &amp;<db:emphasis>description</db:emphasis>)</db:title>
<db:para>This is a convenience function. It is equivalent to calling <db:link xlink:href="qbluetoothserviceinfo.xml#setAttribute">setAttribute</db:link>(<db:link xlink:href="qbluetoothserviceinfo.xml#AttributeId-enum">QBluetoothServiceInfo::ServiceDescription</db:link>, description).</db:para>
<db:para>Sets the service description in the primary language to <db:code role="parameter">description</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#serviceDescription">serviceDescription</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#setAttribute">setAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setServiceName">
<db:title>void QBluetoothServiceInfo::setServiceName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>This is a convenience function. It is equivalent to calling <db:link xlink:href="qbluetoothserviceinfo.xml#setAttribute">setAttribute</db:link>(<db:link xlink:href="qbluetoothserviceinfo.xml#AttributeId-enum">QBluetoothServiceInfo::ServiceName</db:link>, name).</db:para>
<db:para>Sets the service name in the primary language to <db:code role="parameter">name</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#serviceName">serviceName</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#setAttribute">setAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setServiceProvider">
<db:title>void QBluetoothServiceInfo::setServiceProvider(const QString &amp;<db:emphasis>provider</db:emphasis>)</db:title>
<db:para>This is a convenience function. It is equivalent to calling <db:link xlink:href="qbluetoothserviceinfo.xml#setAttribute">setAttribute</db:link>(<db:link xlink:href="qbluetoothserviceinfo.xml#AttributeId-enum">QBluetoothServiceInfo::ServiceProvider</db:link>, provider).</db:para>
<db:para>Sets the service provider in the primary language to <db:code role="parameter">provider</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#serviceProvider">serviceProvider</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#setAttribute">setAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setServiceUuid">
<db:title>void QBluetoothServiceInfo::setServiceUuid(const QBluetoothUuid &amp;<db:emphasis>uuid</db:emphasis>)</db:title>
<db:para>This is a convenience function. It is equivalent to calling <db:link xlink:href="qbluetoothserviceinfo.xml#setAttribute">setAttribute</db:link>(<db:link xlink:href="qbluetoothserviceinfo.xml#AttributeId-enum">QBluetoothServiceInfo::ServiceId</db:link>, uuid).</db:para>
<db:para>Sets the custom service UUID to <db:code role="parameter">uuid</db:code>. This function should not be used to set a standardized service UUID.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#serviceUuid">serviceUuid</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml#setAttribute">setAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="socketProtocol">
<db:title>QBluetoothServiceInfo::Protocol QBluetoothServiceInfo::socketProtocol() const</db:title>
<db:para>Returns the protocol that the <db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link> object uses.</db:para>
</db:section>
<db:section xml:id="unregisterService">
<db:title>bool QBluetoothServiceInfo::unregisterService()</db:title>
<db:para>Unregisters this service with the platform's Service Discovery Protocol (SDP) implementation. After this, the service will no longer be findable by other devices through service discovery.</db:para>
<db:para>Returns true if the service is successfully unregistered, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QBluetoothServiceInfo &amp;QBluetoothServiceInfo::operator=(const QBluetoothServiceInfo &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Makes a copy of the <db:code role="parameter">other</db:code> and assigns it to this <db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link> object. The two copies continue to share the same service and registration details.</db:para>
</db:section>
</db:section>
</db:article>
