<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QImageCapture Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qimagecapture.xml">QImageCapture</db:link> class is used for the recording of media content.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QImageCapture</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Multimedia)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Multimedia)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QImageCapture is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_camera</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qimagecapture.xml">QImageCapture</db:link> class is a high level images recording class. It's not intended to be used alone but for accessing the media recording functions of other media objects, like <db:link xlink:href="qcamera.xml">QCamera</db:link>.</db:para>
<db:programlisting language="cpp">QMediaCaptureSession captureSession;
camera = new QCamera;
captureSession.setCamera(camera);

viewfinder = new QVideoWidget();
viewfinder-&amp;gt;show();
captureSession.setVideoOutput(viewfinder);

imageCapture = new QImageCapture(camera);
captureSession.setImageCapture(imageCapture);

camera-&amp;gt;start();
//on shutter button pressed
imageCapture-&amp;gt;capture();
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml">QCamera</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QImageCapture::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NotReadyError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ResourceError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OutOfSpaceError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NotSupportedFeatureError</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FormatError</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagecapture.xml">QImageCapture</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No Errors.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagecapture.xml">QImageCapture</db:link></db:emphasis>::NotReadyError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The service is not ready for capture yet.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagecapture.xml">QImageCapture</db:link></db:emphasis>::ResourceError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Device is not ready or not available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagecapture.xml">QImageCapture</db:link></db:emphasis>::OutOfSpaceError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>No space left on device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagecapture.xml">QImageCapture</db:link></db:emphasis>::NotSupportedFeatureError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Device does not support stillimages capture.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagecapture.xml">QImageCapture</db:link></db:emphasis>::FormatError</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Current format is not supported.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="FileFormat-enum">
<db:title>enum QImageCapture::FileFormat</db:title>
<db:enumsynopsis>
<db:enumname>FileFormat</db:enumname>
<db:enumitem>
<db:enumidentifier>UnspecifiedFormat</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>JPEG</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PNG</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WebP</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Tiff</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LastFileFormat</db:enumidentifier>
<db:enumvalue>Tiff</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Choose one of the following image formats:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagecapture.xml">QImageCapture</db:link></db:emphasis>::UnspecifiedFormat</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No format specified</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagecapture.xml">QImageCapture</db:link></db:emphasis>::JPEG</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para><db:code>.jpg</db:code> or <db:code>.jpeg</db:code> format</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagecapture.xml">QImageCapture</db:link></db:emphasis>::PNG</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para><db:code>.png</db:code> format</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagecapture.xml">QImageCapture</db:link></db:emphasis>::WebP</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para><db:code>.webp</db:code> format</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagecapture.xml">QImageCapture</db:link></db:emphasis>::Tiff</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para><db:code>.tiff</db:code> format</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Quality-enum">
<db:title>enum QImageCapture::Quality</db:title>
<db:enumsynopsis>
<db:enumname>Quality</db:enumname>
<db:enumitem>
<db:enumidentifier>VeryLowQuality</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LowQuality</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NormalQuality</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HighQuality</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>VeryHighQuality</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Enumerates quality encoding levels.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagecapture.xml">QImageCapture</db:link></db:emphasis>::VeryLowQuality</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagecapture.xml">QImageCapture</db:link></db:emphasis>::LowQuality</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagecapture.xml">QImageCapture</db:link></db:emphasis>::NormalQuality</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagecapture.xml">QImageCapture</db:link></db:emphasis>::HighQuality</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagecapture.xml">QImageCapture</db:link></db:emphasis>::VeryHighQuality</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="error-prop">
<db:title>[read-only] error : const Error</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Error</db:type>
<db:varname>error</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">error</db:synopsisinfo>
<db:synopsisinfo role="notifier">errorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the current error state.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qimagecapture.xml#Error-enum">QImageCapture::Error</db:link></db:type> <db:emphasis role="bold">error</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qimagecapture.xml#errorChanged">errorChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagecapture.xml#errorString-prop">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString-prop">
<db:title>[read-only] errorString : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>errorString</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">errorString</db:synopsisinfo>
<db:synopsisinfo role="notifier">errorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns a string describing the current error state.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">errorString</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qimagecapture.xml#errorChanged">errorChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagecapture.xml#error-prop">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileFormat-prop">
<db:title>[read-only] fileFormat : const FileFormat</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>FileFormat</db:type>
<db:varname>fileFormat</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">fileFormat</db:synopsisinfo>
<db:synopsisinfo role="notifier">fileFormatChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the image format.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qimagecapture.xml#FileFormat-enum">QImageCapture::FileFormat</db:link></db:type> <db:emphasis role="bold">fileFormat</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">fileFormatChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="metaData-prop">
<db:title>metaData : QMediaMetaData</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QMediaMetaData</db:type>
<db:varname>metaData</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">metaData</db:synopsisinfo>
<db:synopsisinfo role="setter">setMetaData</db:synopsisinfo>
<db:synopsisinfo role="notifier">metaDataChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the meta data that will get embedded into the image.</db:para>
<db:note>
<db:para>Additional fields such as a time stamp or location may get added by the camera back end.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:type> <db:emphasis role="bold">metaData</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qimagecapture.xml#setMetaData">setMetaData</db:link></db:emphasis>(const <db:type><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:type> &amp;<db:emphasis>metaData</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">metaDataChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="quality-prop">
<db:title>[read-only] quality : const Quality</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Quality</db:type>
<db:varname>quality</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">quality</db:synopsisinfo>
<db:synopsisinfo role="notifier">qualityChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the image encoding quality.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qimagecapture.xml#Quality-enum">QImageCapture::Quality</db:link></db:type> <db:emphasis role="bold">quality</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">qualityChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="readyForCapture-prop">
<db:title>[read-only] readyForCapture : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>readyForCapture</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isReadyForCapture</db:synopsisinfo>
<db:synopsisinfo role="notifier">readyForCaptureChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds <db:code>true</db:code> if the camera is ready to capture an image immediately. Calling <db:link xlink:href="qimagecapture.xml#capture">capture</db:link>() while <db:code>readyForCapture</db:code> is <db:code>false</db:code> is not permitted and results in an error.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isReadyForCapture</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qimagecapture.xml#readyForCaptureChanged">readyForCaptureChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>ready</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QImageCapture">
<db:title>[explicit] QImageCapture::QImageCapture(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QImageCapture</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QImageCapture(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a image capture object, from a <db:code role="parameter">parent</db:code>, that can capture individual still images produced by a camera.</db:para>
<db:para>You must connect both an image capture object and a <db:link xlink:href="qcamera.xml">QCamera</db:link> to a capture session to capture images.</db:para>
</db:section>
<db:section xml:id="dtor.QImageCapture">
<db:title>[virtual] QImageCapture::~QImageCapture()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QImageCapture</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QImageCapture()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys images capture object.</db:para>
</db:section>
<db:section xml:id="addMetaData">
<db:title>void QImageCapture::addMetaData(const QMediaMetaData &amp;<db:emphasis>metaData</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addMetaData</db:methodname>
<db:methodparam>
<db:type>const QMediaMetaData &amp;</db:type>
<db:parameter>metaData</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addMetaData(const QMediaMetaData &amp;metaData)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds additional <db:code role="parameter">metaData</db:code> to any existing meta data, that is embedded into the captured image.</db:para>
</db:section>
<db:section xml:id="capture">
<db:title>int QImageCapture::capture()</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>capture</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int capture()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Capture the image and make it available as a <db:link xlink:href="qimage.xml">QImage</db:link>. This operation is asynchronous in majority of cases, followed by signals <db:link xlink:href="qimagecapture.xml#imageExposed">QImageCapture::imageExposed</db:link>(), <db:link xlink:href="qimagecapture.xml#imageCaptured">QImageCapture::imageCaptured</db:link>() or <db:link xlink:href="qimagecapture.xml#error-prop">QImageCapture::error</db:link>().</db:para>
<db:para>QImageCapture::capture returns the capture Id parameter, used with <db:link xlink:href="qimagecapture.xml#imageExposed">imageExposed</db:link>(), <db:link xlink:href="qimagecapture.xml#imageCaptured">imageCaptured</db:link>() and <db:link xlink:href="qimagecapture.xml#imageSaved">imageSaved</db:link>() signals.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagecapture.xml#readyForCapture-prop">isReadyForCapture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="captureSession">
<db:title>QMediaCaptureSession *QImageCapture::captureSession() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMediaCaptureSession *</db:type>
<db:methodname>captureSession</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaCaptureSession * captureSession() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the capture session this camera is connected to, or a nullptr if the camera is not connected to a capture session.</db:para>
<db:para>Use <db:link xlink:href="qmediacapturesession.xml#imageCapture-prop">QMediaCaptureSession::setImageCapture</db:link>() to connect the image capture to a session.</db:para>
</db:section>
<db:section xml:id="captureToFile">
<db:title>int QImageCapture::captureToFile(const QString &amp;<db:emphasis>file</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>captureToFile</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>file</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int captureToFile(const QString &amp;file)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Capture the image and save it to <db:code role="parameter">file</db:code>. This operation is asynchronous in majority of cases, followed by signals <db:link xlink:href="qimagecapture.xml#imageExposed">QImageCapture::imageExposed</db:link>(), <db:link xlink:href="qimagecapture.xml#imageCaptured">QImageCapture::imageCaptured</db:link>(), <db:link xlink:href="qimagecapture.xml#imageSaved">QImageCapture::imageSaved</db:link>() or <db:link xlink:href="qimagecapture.xml#error-prop">QImageCapture::error</db:link>().</db:para>
<db:para>If an empty <db:code role="parameter">file</db:code> is passed, the camera back end chooses the default location and naming scheme for photos on the system, if only file name without full path is specified, the image will be saved to the default directory, with a full path reported with <db:link xlink:href="qimagecapture.xml#imageCaptured">imageCaptured</db:link>() and <db:link xlink:href="qimagecapture.xml#imageSaved">imageSaved</db:link>() signals.</db:para>
<db:para><db:link xlink:href="qcamera.xml">QCamera</db:link> saves all the capture parameters like exposure settings or image processing parameters, so changes to camera parameters after <db:link xlink:href="qimagecapture.xml#capture">capture</db:link>() is called do not affect previous capture requests.</db:para>
<db:para><db:link xlink:href="qimagecapture.xml#capture">QImageCapture::capture</db:link> returns the capture Id parameter, used with <db:link xlink:href="qimagecapture.xml#imageExposed">imageExposed</db:link>(), <db:link xlink:href="qimagecapture.xml#imageCaptured">imageCaptured</db:link>() and <db:link xlink:href="qimagecapture.xml#imageSaved">imageSaved</db:link>() signals.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagecapture.xml#readyForCapture-prop">isReadyForCapture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorOccurred">
<db:title>void QImageCapture::errorOccurred(int <db:emphasis>id</db:emphasis>, QImageCapture::Error <db:emphasis>error</db:emphasis>, const QString &amp;<db:emphasis>errorString</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>errorOccurred</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QImageCapture::Error</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>errorString</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void errorOccurred(int id, QImageCapture::Error error, const QString &amp;errorString)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the capture request <db:code role="parameter">id</db:code> has failed with an <db:code role="parameter">error</db:code> and <db:code role="parameter">errorString</db:code> description.</db:para>
</db:section>
<db:section xml:id="fileFormatDescription">
<db:title>[static] QString QImageCapture::fileFormatDescription(QImageCapture::FileFormat <db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fileFormatDescription</db:methodname>
<db:methodparam>
<db:type>QImageCapture::FileFormat</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fileFormatDescription(QImageCapture::FileFormat f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the description of the given file format, <db:code role="parameter">f</db:code>.</db:para>
</db:section>
<db:section xml:id="fileFormatName">
<db:title>[static] QString QImageCapture::fileFormatName(QImageCapture::FileFormat <db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fileFormatName</db:methodname>
<db:methodparam>
<db:type>QImageCapture::FileFormat</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fileFormatName(QImageCapture::FileFormat f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the given format, <db:code role="parameter">f</db:code>.</db:para>
</db:section>
<db:section xml:id="imageAvailable">
<db:title>void QImageCapture::imageAvailable(int <db:emphasis>id</db:emphasis>, const QVideoFrame &amp;<db:emphasis>frame</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>imageAvailable</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVideoFrame &amp;</db:type>
<db:parameter>frame</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void imageAvailable(int id, const QVideoFrame &amp;frame)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when the <db:code role="parameter">frame</db:code> with request <db:code role="parameter">id</db:code> is available.</db:para>
</db:section>
<db:section xml:id="imageCaptured">
<db:title>void QImageCapture::imageCaptured(int <db:emphasis>id</db:emphasis>, const QImage &amp;<db:emphasis>preview</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>imageCaptured</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>preview</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void imageCaptured(int id, const QImage &amp;preview)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when the frame with request <db:code role="parameter">id</db:code> was captured, but not processed and saved yet. Frame <db:code role="parameter">preview</db:code> can be displayed to user.</db:para>
</db:section>
<db:section xml:id="imageExposed">
<db:title>void QImageCapture::imageExposed(int <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>imageExposed</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void imageExposed(int id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when the frame with request <db:code role="parameter">id</db:code> was exposed.</db:para>
</db:section>
<db:section xml:id="imageMetadataAvailable">
<db:title>void QImageCapture::imageMetadataAvailable(int <db:emphasis>id</db:emphasis>, const QMediaMetaData &amp;<db:emphasis>metaData</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>imageMetadataAvailable</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMediaMetaData &amp;</db:type>
<db:parameter>metaData</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void imageMetadataAvailable(int id, const QMediaMetaData &amp;metaData)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that an image identified by <db:code role="parameter">id</db:code> has <db:code role="parameter">metaData</db:code>.</db:para>
</db:section>
<db:section xml:id="imageSaved">
<db:title>void QImageCapture::imageSaved(int <db:emphasis>id</db:emphasis>, const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>imageSaved</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void imageSaved(int id, const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when QImageCapture::CaptureToFile is set and the frame with request <db:code role="parameter">id</db:code> was saved to <db:code role="parameter">fileName</db:code>.</db:para>
</db:section>
<db:section xml:id="isAvailable">
<db:title>bool QImageCapture::isAvailable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isAvailable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAvailable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the images capture service ready to use.</db:para>
</db:section>
<db:section xml:id="readyForCaptureChanged">
<db:title>void QImageCapture::readyForCaptureChanged(bool <db:emphasis>ready</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>readyForCaptureChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>ready</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">readyForCapture</db:synopsisinfo>
<db:synopsisinfo role="signature">void readyForCaptureChanged(bool ready)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that a camera's <db:code role="parameter">ready</db:code> for capture state has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qimagecapture.xml#readyForCapture-prop">readyForCapture</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="resolution">
<db:title>QSize QImageCapture::resolution() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>resolution</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize resolution() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the resolution of the encoded image.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagecapture.xml#setResolution">setResolution</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resolutionChanged">
<db:title>void QImageCapture::resolutionChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resolutionChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resolutionChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals when the image resolution changes.</db:para>
</db:section>
<db:section xml:id="setFileFormat">
<db:title>void QImageCapture::setFileFormat(QImageCapture::FileFormat <db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFileFormat</db:methodname>
<db:methodparam>
<db:type>QImageCapture::FileFormat</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFileFormat(QImageCapture::FileFormat format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the image <db:code role="parameter">format</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagecapture.xml#fileFormat-prop">fileFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMetaData">
<db:title>void QImageCapture::setMetaData(const QMediaMetaData &amp;<db:emphasis>metaData</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMetaData</db:methodname>
<db:methodparam>
<db:type>const QMediaMetaData &amp;</db:type>
<db:parameter>metaData</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">metaData</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMetaData(const QMediaMetaData &amp;metaData)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces any existing meta data, to be embedded into the captured image, with a set of <db:code role="parameter">metaData</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qimagecapture.xml#metaData-prop">metaData</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagecapture.xml#metaData-prop">metaData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setQuality">
<db:title>void QImageCapture::setQuality(QImageCapture::Quality <db:emphasis>quality</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setQuality</db:methodname>
<db:methodparam>
<db:type>QImageCapture::Quality</db:type>
<db:parameter>quality</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setQuality(QImageCapture::Quality quality)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the image encoding <db:code role="parameter">quality</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagecapture.xml#quality-prop">quality</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setResolution">
<db:title>void QImageCapture::setResolution(const QSize &amp;<db:emphasis>resolution</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setResolution</db:methodname>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>resolution</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setResolution(const QSize &amp;resolution)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">resolution</db:code> of the encoded image.</db:para>
<db:para>An empty <db:link xlink:href="qsize.xml">QSize</db:link> indicates the encoder should make an optimal choice based on what is available from the image source and the limitations of the codec.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagecapture.xml#resolution">resolution</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setResolution-1">
<db:title>void QImageCapture::setResolution(int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setResolution</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setResolution(int width, int height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code> of the resolution of the encoded image.</db:para>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="supportedFormats">
<db:title>[static] QList&lt;QImageCapture::FileFormat&gt; QImageCapture::supportedFormats()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;QImageCapture::FileFormat&gt;</db:type>
<db:methodname>supportedFormats</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QImageCapture::FileFormat&gt; supportedFormats()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of supported file formats.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagecapture.xml#FileFormat-enum">FileFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
