<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Particles 3D Testbed Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to use the Qt Quick 3D Particles3D module.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2021 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick3D
import QtQuick3D.Particles3D
import QtQuick.Controls

Item {
    id: mainView

    readonly property real listItemWidth: 180
    readonly property real listItemHeight: 40
    // Enable this when only want to list the demos
    // Tweak the demos list as needed
    readonly property bool showOnlyDemos: false

    anchors.fill: parent

    ListModel {
        id: demosModel
        ListElement {
            name: &quot;Snowing&quot;
            file: &quot;Snowing.qml&quot;
        }
        ListElement {
            name: &quot;Line Particles&quot;
            file: &quot;LineParticles.qml&quot;
        }
        ListElement {
            name: &quot;HeartTrail&quot;
            file: &quot;HeartTrail.qml&quot;
        }
        ListElement {
            name: &quot;Giant Ocean Spider&quot;
            file: &quot;OceanSpider.qml&quot;
        }
        ListElement {
            name: &quot;Qt Cube Burst&quot;
            file: &quot;QtLogoAnimation.qml&quot;
        }
        ListElement {
            name: &quot;Fire And Smoke&quot;
            file: &quot;Fire.qml&quot;
        }
        ListElement {
            name: &quot;Speedometer&quot;
            file: &quot;Speedometer.qml&quot;
        }
        ListElement {
            name: &quot;Sorting&quot;
            file: &quot;Sorting.qml&quot;
        }
        ListElement {
            name: &quot;Model-Blend Particles&quot;
            file: &quot;ModelBlendParticles.qml&quot;
        }
        ListElement {
            name: &quot;Lights&quot;
            file: &quot;Lights.qml&quot;
        }
        ListElement {
            name: &quot;Dynamic Bursts&quot;
            file: &quot;DynamicBursts.qml&quot;
        }
    }

    ListModel {
        id: testsModel
        ListElement {
            name: &quot;Colorful Particles&quot;
            file: &quot;ColorfulParticles.qml&quot;
        }
        ListElement {
            name: &quot;Emitter Shapes&quot;
            file: &quot;EmitterShapes.qml&quot;
        }
        ListElement {
            name: &quot;Emitter Custom Shapes&quot;
            file: &quot;EmitterCustomShapes.qml&quot;
        }
        ListElement {
            name: &quot;Attractor Shapes&quot;
            file: &quot;AttractorShapes.qml&quot;
        }
        ListElement {
            name: &quot;Fading In/Out&quot;
            file: &quot;FadingInOut.qml&quot;
        }
        ListElement {
            name: &quot;Emit And Burst&quot;
            file: &quot;EmitAndBurst.qml&quot;
        }
        ListElement {
            name: &quot;ParticleSystem&quot;
            file: &quot;SystemPlayPause.qml&quot;
        }
        ListElement {
            name: &quot;Aligned Particles&quot;
            file: &quot;AlignedParticles.qml&quot;
        }
        ListElement {
            name: &quot;TrailEmitter Burst&quot;
            file: &quot;TrailEmitterBurst.qml&quot;
        }
        ListElement {
            name: &quot;Animated Sprite&quot;
            file: &quot;AnimatedSprite.qml&quot;
        }
        ListElement {
            name: &quot;Model Shape&quot;
            file: &quot;ModelShape.qml&quot;
        }
    }

    View3D {
        anchors.fill: parent

        environment: SceneEnvironment {
            clearColor: &quot;#000000&quot;
            backgroundMode: SceneEnvironment.Color
            antialiasingMode: settings.antialiasingMode
            antialiasingQuality: settings.antialiasingQuality
        }

        PerspectiveCamera {
            position: Qt.vector3d(0, 0, 600)
            clipFar: 2000
        }

        PointLight {
            position: Qt.vector3d(200, 200, 400)
            brightness: 50
            ambientColor: Qt.rgba(0.5, 0.3, 0.1, 1.0)
            SequentialAnimation on brightness {
                loops: Animation.Infinite
                NumberAnimation {
                    to: 400
                    duration: 2000
                    easing.type: Easing.OutElastic
                }
                NumberAnimation {
                    to: 50
                    duration: 6000
                    easing.type: Easing.InOutQuad
                }
            }
        }

        // Qt Cube model
        Model {
            source: &quot;#Cube&quot;
            position: Qt.vector3d(-250, 150, 100)
            scale: Qt.vector3d(1.0, 1.0, 1.0)
            NumberAnimation on eulerRotation.y {
                loops: Animation.Infinite
                from: 0
                to: 360
                duration: 10000
            }
            NumberAnimation on eulerRotation.x {
                loops: Animation.Infinite
                from: 0
                to: 360
                duration: 6000
            }
            materials: PrincipledMaterial {
                baseColorMap: Texture {
                    source: &quot;images/qt_logo2.png&quot;
                }
                normalMap: Texture {
                    source: &quot;images/qt_logo2_n.png&quot;
                }
            }
        }

        ParticleSystem3D {
            id: psystem
            startTime: 10000
            SpriteParticle3D {
                id: spriteParticle
                sprite: Texture {
                    source: &quot;images/dot.png&quot;
                }
                maxAmount: 200
                color: &quot;#80ff7000&quot;
                colorVariation: Qt.vector4d(0.6, 0.2, 0.0, 0.4)
                unifiedColorVariation: true
                fadeInDuration: 1000
                fadeOutDuration: 3000
            }
            ParticleEmitter3D {
                particle: spriteParticle
                emitRate: 20
                lifeSpan: 10000
                scale: Qt.vector3d(8, 8, 0)
                shape: ParticleShape3D {
                    type: ParticleShape3D.Cube
                }
                particleScale: 2.4
                particleScaleVariation: 1.8
                particleEndScale: 0.2
                velocity: TargetDirection3D {
                    magnitudeVariation: magnitude
                    positionVariation: Qt.vector3d(180, 180, 180)
                    SequentialAnimation on magnitude {
                        loops: Animation.Infinite
                        NumberAnimation {
                            to: 1.0
                            duration: 3000
                            easing.type: Easing.InOutQuad
                        }
                        NumberAnimation {
                            to: 0.1
                            duration: 5000
                            easing.type: Easing.InOutQuad
                        }
                    }
                }
            }
        }
    }

    Component {
        id: listComponent
        Button {
            width: mainView.listItemWidth
            height: mainView.listItemHeight
            background: Rectangle {
                id: buttonBackground
                border.width: 0.5
                border.color: &quot;#d0808080&quot;
                color: &quot;#d0404040&quot;
                opacity: hovered ? 1.0 : 0.5
            }
            contentItem: Text {
                anchors.centerIn: parent
                color: &quot;#f0f0f0&quot;
                font.pointSize: settings.fontSizeSmall
                text: name
            }

            onClicked: {
                loader.source = file
            }
        }
    }

    Text {
        id: topLabel
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.top: parent.top
        anchors.topMargin: 20
        text: qsTr(&quot;Qt Quick 3D - Particles3D&quot;)
        color: &quot;#f0f0f0&quot;
        font.pointSize: settings.fontSizeLarge
    }

    Row {
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.top: topLabel.bottom
        anchors.topMargin: 20
        spacing: 20
        ListView {
            id: demosListView
            width: mainView.listItemWidth
            height: count * mainView.listItemHeight
            model: demosModel
            delegate: listComponent
        }
        ListView {
            id: examplesListView
            visible: !showOnlyDemos
            width: mainView.listItemWidth
            height: count * mainView.listItemHeight
            model: testsModel
            delegate: listComponent
        }
    }
}

</db:programlisting>
</db:article>
