<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>sentinel Class</db:title>
<db:subtitle>QDirListing::sentinel</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This class was introduced in Qt 6.8.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>sentinel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>sentinel is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qdirlisting.xml">QDirListing</db:link> returns an object of this type to signal the end of iteration. Dereferencing a <db:link xlink:href="qdirlisting-const-iterator.xml">QDirListing::const_iterator</db:link> that is equal to sentinel{} is undefined behavior.</db:para>
<db:note>
<db:para>The &quot;classical&quot; STL algorithms don't support iterator/sentinel, so you need to use C++20 std::ranges algorithms for <db:link xlink:href="qdirlisting.xml">QDirListing</db:link>, or else a 3rd-party library that provides range-based algorithms in C++17.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdirlisting.xml">QDirListing</db:link></db:member>
<db:member><db:link xlink:href="qdirlisting-const-iterator.xml">QDirListing::const_iterator</db:link></db:member>
<db:member><db:link xlink:href="qdirlisting-direntry.xml">QDirListing::DirEntry</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
