<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Date QML Type</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides date functions.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQml</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The QML Date object extends the <db:link xlink:href="https://tc39.es/ecma262/#sec-date-objects">JS Date object</db:link> with locale aware functions.</db:para>
<db:para>Functions that accept a <db:code>format</db:code> argument take either Locale.LongFormat, Locale.ShortFormat, Locale.NarrowFormat enumeration values, or a string specifying the format.</db:para>
<db:para>The form of the supported format strings is as described in the documentation of <db:link xlink:href="qdate.xml#toString">QDate::toString</db:link>(), <db:link xlink:href="qtime.xml#toString">QTime::toString</db:link>() and <db:link xlink:href="qdatetime.xml#toString">QDateTime::toString</db:link>().</db:para>
<db:para>If the date is invalid, an empty string is returned.</db:para>
<db:section xml:id="format-enumeration-values">
<db:title>Format Enumeration Values</db:title>
<db:para>Use the enumeration values when you want a format that matches the locale preferences.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>Locale.LongFormat</db:para>
</db:td>
<db:td>
<db:para>Longer format</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Locale.ShortFormat</db:para>
</db:td>
<db:td>
<db:para>Shorter format</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Locale.NarrowFormat</db:para>
</db:td>
<db:td>
<db:para>In this context same as Locale.ShortFormat</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The format that the enumerations represent will depend on your locale, but also the method that the enumeration is used for.</db:para>
<db:para>For example, for the <db:code>en_US</db:code> locale, these format strings are used:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Function</db:para>
</db:th>
<db:th>
<db:para>Locale Enum</db:para>
</db:th>
<db:th>
<db:para>Format String</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtqml-date.xml#fromLocaleDateString-method">fromLocaleDateString</db:link>, <db:link xlink:href="qml-qtqml-date.xml#toLocaleDateString-method">toLocaleDateString</db:link></db:para>
</db:td>
<db:td>
<db:para>Locale.LongFormat</db:para>
</db:td>
<db:td>
<db:para><db:code>dddd, MMMM d, yyyy</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtqml-date.xml#fromLocaleDateString-method">fromLocaleDateString</db:link>, <db:link xlink:href="qml-qtqml-date.xml#toLocaleDateString-method">toLocaleDateString</db:link></db:para>
</db:td>
<db:td>
<db:para>Locale.ShortFormat</db:para>
</db:td>
<db:td>
<db:para><db:code>M/d/yy</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtqml-date.xml#fromLocaleTimeString-method">fromLocaleTimeString</db:link>, <db:link xlink:href="qml-qtqml-date.xml#toLocaleTimeString-method">toLocaleTimeString</db:link></db:para>
</db:td>
<db:td>
<db:para>Locale.LongFormat</db:para>
</db:td>
<db:td>
<db:para><db:code>h:mm:ss AP t</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtqml-date.xml#fromLocaleTimeString-method">fromLocaleTimeString</db:link>, <db:link xlink:href="qml-qtqml-date.xml#toLocaleTimeString-method">toLocaleTimeString</db:link></db:para>
</db:td>
<db:td>
<db:para>Locale.ShortFormat</db:para>
</db:td>
<db:td>
<db:para><db:code>h:mm AP</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtqml-date.xml#fromLocaleString-method">fromLocaleString</db:link>, <db:link xlink:href="qml-qtqml-date.xml#toLocaleString-method">toLocaleString</db:link></db:para>
</db:td>
<db:td>
<db:para>Locale.LongFormat</db:para>
</db:td>
<db:td>
<db:para><db:code>dddd, MMMM d, yyyy h:mm:ss AP t</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtqml-date.xml#fromLocaleString-method">fromLocaleString</db:link>, <db:link xlink:href="qml-qtqml-date.xml#toLocaleString-method">toLocaleString</db:link></db:para>
</db:td>
<db:td>
<db:para>Locale.ShortFormat</db:para>
</db:td>
<db:td>
<db:para><db:code>M/d/yy h:mm AP</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="further-notes">
<db:title>Further Notes</db:title>
<db:para>Using the locale-aware functions to perform date or time formatting can result in incorrectly formatted times, due to an inconsistency in specification between Qt and JS. ECMA-262 specifies that historical dates should be intrepreted by projecting the current rules for daylight-saving onto past years, while Qt uses historical data (where available) to determine whether daylight-saving was in effect for a given date. Therefore, constructing a Date value in JS and converting it to a string using the locale-aware functions can yield a result incorrect by one hour, if DST is currently in effect, while it was not for the time specified, or vice versa.</db:para>
<db:para>There are different date formats with different understandings of negative years. Common human language does not have a year 0. The year after 1BC is 1AD. This understanding is reflected when printing or parsing dates in one of the formats not standardized by ECMAScript. That is: toString(), <db:link xlink:href="qml-qtqml-date.xml#toLocaleString-method">toLocaleString</db:link>(), toUTCString() and friends. ECMAScript does standardize one format: ISO 8601. This is what you get when you call toISOString(). This format does include a year 0, which is 1BC in other formats. Thus you get different years when printing negative dates with toISOString() and toString().</db:para>
<db:para>When setting the year using the Date constructor or set(UTC)FullYear(), the convention set by ISO 8601 is used and 0 is a valid year. This means negative years set with the constructor or set(UTC)FullYear() are zero-based and thus offset by one year from what is printed with toString() and friends. Parsing the output of any of the to*String() methods will yield the same date value you printed from. Date.parse() will recognize the different formats and their convention on the existence of year 0.</db:para>
<db:para>Note that all this is different from what you get in other JavaScript implementations which usually treat year 0 as valid in all string representations. As the date formats are &quot;implementation-dependent&quot; in the ECMAScript standard, this is still valid, though.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-locale.xml">Locale</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="fromLocaleDateString-method">
<db:title>string fromLocaleDateString(<db:emphasis>locale</db:emphasis>, <db:emphasis>dateString</db:emphasis>, <db:emphasis>format</db:emphasis>)</db:title>
<db:para>Converts the date string <db:code role="parameter">dateString</db:code> to a <db:link xlink:href="qml-qtqml-date.xml">Date</db:link> object using <db:code role="parameter">locale</db:code> and <db:code role="parameter">format</db:code>.</db:para>
<db:para>If <db:code role="parameter">format</db:code> is not specified, <db:link xlink:href="qml-qtqml-locale.xml">Locale.LongFormat</db:link> will be used.</db:para>
<db:para>If <db:code role="parameter">locale</db:code> is not specified, the default locale will be used.</db:para>
<db:para>The following example shows the current date first being formatted as a date string using the default locale and format, then parsed back again in the same manner:</db:para>
<db:programlisting language="cpp">import QtQml 2.0

QtObject {
    property var locale: Qt.locale()
    property date currentDate: new Date()
    property string dateString

    Component.onCompleted: {
        dateString = currentDate.toLocaleDateString();
        print(Date.fromLocaleDateString(dateString));
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="fromLocaleString-method">
<db:title>string fromLocaleString(<db:emphasis>locale</db:emphasis>, <db:emphasis>dateTimeString</db:emphasis>, <db:emphasis>format</db:emphasis>)</db:title>
<db:para>Converts the datetime string <db:code role="parameter">dateTimeString</db:code> to a <db:link xlink:href="qml-qtqml-date.xml">Date</db:link> object using <db:code role="parameter">locale</db:code> and <db:code role="parameter">format</db:code>.</db:para>
<db:para>If <db:code role="parameter">format</db:code> is not specified, <db:link xlink:href="qml-qtqml-locale.xml">Locale.LongFormat</db:link> will be used.</db:para>
<db:para>If <db:code role="parameter">locale</db:code> is not specified, the default locale will be used.</db:para>
<db:para>The following example shows a datetime being parsed from a datetime string in a certain format using the default locale:</db:para>
<db:programlisting language="cpp">import QtQml 2.0

QtObject {
    property var locale: Qt.locale()
    property string dateTimeString: &quot;Tue 2013-09-17 10:56:06&quot;

    Component.onCompleted: {
        print(Date.fromLocaleString(locale, dateTimeString, &quot;ddd yyyy-MM-dd hh:mm:ss&quot;));
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="fromLocaleTimeString-method">
<db:title>string fromLocaleTimeString(<db:emphasis>locale</db:emphasis>, <db:emphasis>timeString</db:emphasis>, <db:emphasis>format</db:emphasis>)</db:title>
<db:para>Converts the time string <db:code role="parameter">timeString</db:code> to a <db:link xlink:href="qml-qtqml-date.xml">Date</db:link> object using <db:code role="parameter">locale</db:code> and <db:code role="parameter">format</db:code>.</db:para>
<db:para>If <db:code role="parameter">format</db:code> is not specified, <db:link xlink:href="qml-qtqml-locale.xml">Locale.LongFormat</db:link> will be used.</db:para>
<db:para>If <db:code role="parameter">locale</db:code> is not specified, the default locale will be used.</db:para>
<db:para>The following example shows the current time first being formatted as a time string using the default locale and a short format, then parsed back again in the same manner:</db:para>
<db:programlisting language="cpp">import QtQml 2.2

QtObject {
    property var locale: Qt.locale()
    property date currentTime: new Date()
    property string timeString

    Component.onCompleted: {
        timeString = currentTime.toLocaleTimeString(locale, Locale.ShortFormat);
        print(Date.fromLocaleTimeString(locale, timeString, Locale.ShortFormat));
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="timeZoneUpdated-method">
<db:title>string timeZoneUpdated()</db:title>
<db:para>Informs the JS engine that the system's timezone has been changed, which is necessary for the correct manipulation of datetime data.</db:para>
<db:para>JS stores Date objects in UTC time; all access to and from Date components in local time involves the application of the current offset from UTC. If the current offset changes due to the timezone being updated, the JS engine needs to be informed so that it can recalculate the offset.</db:para>
<db:para>This function should be called after the system's timezone has been updated.</db:para>
<db:para>For example, an application that changes the timezone would call timeZoneUpdated() after setting the new time zone:</db:para>
<db:programlisting language="cpp">property string selectedTimeZone

onSelectedTimeZoneChanged: {
    MyFunctions.setSystemTimeZone(selectedTimeZone)
    Date.timeZoneUpdated()
}
</db:programlisting>
</db:section>
<db:section xml:id="toLocaleDateString-method">
<db:title>string toLocaleDateString(<db:emphasis>locale</db:emphasis>, <db:emphasis>format</db:emphasis>)</db:title>
<db:para>Converts the Date to a string containing the date suitable for the specified <db:code role="parameter">locale</db:code> in the specified <db:code role="parameter">format</db:code>.</db:para>
<db:para>If <db:code role="parameter">format</db:code> is not specified, <db:link xlink:href="qml-qtqml-locale.xml">Locale.LongFormat</db:link> will be used.</db:para>
<db:para>If <db:code role="parameter">locale</db:code> is not specified, the default locale will be used.</db:para>
<db:para>The following example shows the current date formatted for the German locale:</db:para>
<db:programlisting language="cpp">import QtQuick 2.0

Text {
    text: &quot;The date is: &quot; + new Date().toLocaleDateString(Qt.locale(&quot;de_DE&quot;))
}
</db:programlisting>
</db:section>
<db:section xml:id="toLocaleString-method">
<db:title>string toLocaleString(<db:emphasis>locale</db:emphasis>, <db:emphasis>format</db:emphasis>)</db:title>
<db:para>Converts the Date to a string containing the date and time suitable for the specified <db:code role="parameter">locale</db:code> in the specified <db:code role="parameter">format</db:code>.</db:para>
<db:para>If <db:code role="parameter">format</db:code> is not specified, <db:link xlink:href="qml-qtqml-locale.xml">Locale.LongFormat</db:link> will be used.</db:para>
<db:para>If <db:code role="parameter">locale</db:code> is not specified, the default locale will be used.</db:para>
<db:para>The following example shows the current date and time formatted for the German locale:</db:para>
<db:programlisting language="cpp">import QtQuick 2.0

Text {
    text: &quot;The date is: &quot; + new Date().toLocaleString(Qt.locale(&quot;de_DE&quot;))
}
</db:programlisting>
</db:section>
<db:section xml:id="toLocaleTimeString-method">
<db:title>string toLocaleTimeString(<db:emphasis>locale</db:emphasis>, <db:emphasis>format</db:emphasis>)</db:title>
<db:para>Converts the Date to a string containing the time suitable for the specified <db:code role="parameter">locale</db:code> in the specified <db:code role="parameter">format</db:code>.</db:para>
<db:para>If <db:code role="parameter">format</db:code> is not specified, <db:link xlink:href="qml-qtqml-locale.xml">Locale.LongFormat</db:link> will be used.</db:para>
<db:para>If <db:code role="parameter">locale</db:code> is not specified, the default locale will be used.</db:para>
<db:para>The following example shows the current time formatted for the German locale:</db:para>
<db:programlisting language="cpp">import QtQuick 2.0

Text {
    text: &quot;The date is: &quot; + new Date().toLocaleTimeString(Qt.locale(&quot;de_DE&quot;))
}
</db:programlisting>
</db:section>
</db:section>
</db:article>
