<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QVulkanWindowRenderer Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qvulkanwindowrenderer.xml">QVulkanWindowRenderer</db:link> class is used to implement the application-specific rendering logic for a <db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link>.</db:para>
<db:para>This class was introduced in Qt 5.10.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QVulkanWindowRenderer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.10</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Applications typically subclass both <db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link> and <db:link xlink:href="qvulkanwindowrenderer.xml">QVulkanWindowRenderer</db:link>. The former allows handling events, for example, input, while the latter allows implementing the Vulkan resource management and command buffer building that make up the application's rendering.</db:para>
<db:para>In addition to event handling, the <db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link> subclass is responsible for providing an implementation for <db:link xlink:href="qvulkanwindow.xml#createRenderer">QVulkanWindow::createRenderer</db:link>() as well. This is where the window and renderer get connected. A typical implementation will simply create a new instance of a subclass of <db:link xlink:href="qvulkanwindowrenderer.xml">QVulkanWindowRenderer</db:link>.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QVulkanWindowRenderer">
<db:title>[virtual] QVulkanWindowRenderer::~QVulkanWindowRenderer()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QVulkanWindowRenderer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QVulkanWindowRenderer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Virtual destructor.</db:para>
</db:section>
<db:section xml:id="initResources">
<db:title>[virtual] void QVulkanWindowRenderer::initResources()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>initResources</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void initResources()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called when it is time to create the renderer's graphics resources.</db:para>
<db:para>Depending on the <db:link xlink:href="qvulkanwindow.xml#Flag-enum">QVulkanWindow::PersistentResources</db:link> flag, device lost situations, etc. this function may be called more than once during the lifetime of a <db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link>. However, subsequent invocations are always preceded by a call to <db:link xlink:href="qvulkanwindowrenderer.xml#releaseResources">releaseResources</db:link>().</db:para>
<db:para>Accessors like device(), graphicsQueue() and graphicsCommandPool() are only guaranteed to return valid values inside this function and afterwards, up until <db:link xlink:href="qvulkanwindowrenderer.xml#releaseResources">releaseResources</db:link>() is called.</db:para>
<db:para>The default implementation is empty.</db:para>
</db:section>
<db:section xml:id="initSwapChainResources">
<db:title>[virtual] void QVulkanWindowRenderer::initSwapChainResources()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>initSwapChainResources</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void initSwapChainResources()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called when swapchain, framebuffer or renderpass related initialization can be performed. Swapchain and related resources are reset and then recreated in response to window resize events, and therefore a pair of calls to <db:link xlink:href="qvulkanwindowrenderer.xml#initResources">initResources</db:link>() and <db:link xlink:href="qvulkanwindowrenderer.xml#releaseResources">releaseResources</db:link>() can have multiple calls to initSwapChainResources() and <db:link xlink:href="qvulkanwindowrenderer.xml#releaseSwapChainResources">releaseSwapChainResources</db:link>() calls in-between.</db:para>
<db:para>Accessors like <db:link xlink:href="qvulkanwindow.xml#swapChainImageSize">QVulkanWindow::swapChainImageSize</db:link>() are only guaranteed to return valid values inside this function and afterwards, up until <db:link xlink:href="qvulkanwindowrenderer.xml#releaseSwapChainResources">releaseSwapChainResources</db:link>() is called.</db:para>
<db:para>This is also the place where size-dependent calculations (for example, the projection matrix) should be made since this function is called effectively on every resize.</db:para>
<db:para>The default implementation is empty.</db:para>
</db:section>
<db:section xml:id="logicalDeviceLost">
<db:title>[virtual] void QVulkanWindowRenderer::logicalDeviceLost()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>logicalDeviceLost</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void logicalDeviceLost()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called when the logical device (VkDevice) is lost, meaning some operation failed with <db:code>VK_ERROR_DEVICE_LOST</db:code>.</db:para>
<db:para>The default implementation is empty.</db:para>
<db:para>There is typically no need to perform anything special in this function. <db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link> will automatically release all resources (invoking <db:link xlink:href="qvulkanwindowrenderer.xml#releaseSwapChainResources">releaseSwapChainResources</db:link>() and <db:link xlink:href="qvulkanwindowrenderer.xml#releaseResources">releaseResources</db:link>() as necessary) and will attempt to reinitialize, acquiring a new device. When the physical device was also lost, this reinitialization attempt may then result in <db:link xlink:href="qvulkanwindowrenderer.xml#physicalDeviceLost">physicalDeviceLost</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvulkanwindowrenderer.xml#physicalDeviceLost">physicalDeviceLost</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="physicalDeviceLost">
<db:title>[virtual] void QVulkanWindowRenderer::physicalDeviceLost()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>physicalDeviceLost</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void physicalDeviceLost()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called when the physical device is lost, meaning the creation of the logical device fails with <db:code>VK_ERROR_DEVICE_LOST</db:code>.</db:para>
<db:para>The default implementation is empty.</db:para>
<db:para>There is typically no need to perform anything special in this function because <db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link> will automatically retry to initialize itself after a certain amount of time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvulkanwindowrenderer.xml#logicalDeviceLost">logicalDeviceLost</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="preInitResources">
<db:title>[virtual] void QVulkanWindowRenderer::preInitResources()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>preInitResources</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void preInitResources()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called right before graphics initialization, that ends up in calling <db:link xlink:href="qvulkanwindowrenderer.xml#initResources">initResources</db:link>(), is about to begin.</db:para>
<db:para>Normally there is no need to reimplement this function. However, there are cases that involve decisions based on both the physical device and the surface. These cannot normally be performed before making the <db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link> visible since the Vulkan surface is not retrievable at that stage.</db:para>
<db:para>Instead, applications can reimplement this function. Here both <db:link xlink:href="qvulkanwindow.xml#physicalDevice">QVulkanWindow::physicalDevice</db:link>() and <db:link xlink:href="qvulkaninstance.xml#surfaceForWindow">QVulkanInstance::surfaceForWindow</db:link>() are functional, but no further logical device initialization has taken place yet.</db:para>
<db:para>The default implementation is empty.</db:para>
</db:section>
<db:section xml:id="releaseResources">
<db:title>[virtual] void QVulkanWindowRenderer::releaseResources()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>releaseResources</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void releaseResources()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called when the renderer's graphics resources must be released.</db:para>
<db:para>The implementation must be prepared that a call to this function may be followed by an <db:link xlink:href="qvulkanwindowrenderer.xml#initResources">initResources</db:link>() at a later point.</db:para>
<db:para><db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link> takes care of waiting for the device to become idle before and after invoking this function.</db:para>
<db:para>The default implementation is empty.</db:para>
</db:section>
<db:section xml:id="releaseSwapChainResources">
<db:title>[virtual] void QVulkanWindowRenderer::releaseSwapChainResources()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>releaseSwapChainResources</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void releaseSwapChainResources()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called when swapchain, framebuffer or renderpass related resources must be released.</db:para>
<db:para>The implementation must be prepared that a call to this function may be followed by a new call to <db:link xlink:href="qvulkanwindowrenderer.xml#initSwapChainResources">initSwapChainResources</db:link>() at a later point.</db:para>
<db:para><db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link> takes care of waiting for the device to become idle before and after invoking this function.</db:para>
<db:para>The default implementation is empty.</db:para>
<db:note>
<db:para>This is the last place to act with all graphics resources intact before <db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link> starts releasing them. It is therefore essential that implementations with an asynchronous, potentially multi-threaded <db:link xlink:href="qvulkanwindowrenderer.xml#startNextFrame">startNextFrame</db:link>() perform a blocking wait and call <db:link xlink:href="qvulkanwindow.xml#frameReady">QVulkanWindow::frameReady</db:link>() before returning from this function in case there is a pending frame submission.</db:para>
</db:note>
</db:section>
<db:section xml:id="startNextFrame">
<db:title>[pure virtual] void QVulkanWindowRenderer::startNextFrame()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>startNextFrame</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void startNextFrame() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called when the draw calls for the next frame are to be added to the command buffer.</db:para>
<db:para>Each call to this function must be followed by a call to <db:link xlink:href="qvulkanwindow.xml#frameReady">QVulkanWindow::frameReady</db:link>(). Failing to do so will stall the rendering loop. The call can also be made at a later time, after returning from this function. This means that it is possible to kick off asynchronous work, and only update the command buffer and notify <db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link> when that work has finished.</db:para>
<db:para>All Vulkan resources are initialized and ready when this function is invoked. The current framebuffer and main command buffer can be retrieved via <db:link xlink:href="qvulkanwindow.xml#currentFramebuffer">QVulkanWindow::currentFramebuffer</db:link>() and <db:link xlink:href="qvulkanwindow.xml#currentCommandBuffer">QVulkanWindow::currentCommandBuffer</db:link>(). The logical device and the active graphics queue are available via <db:link xlink:href="qvulkanwindow.xml#device">QVulkanWindow::device</db:link>() and <db:link xlink:href="qvulkanwindow.xml#graphicsQueue">QVulkanWindow::graphicsQueue</db:link>(). Implementations can create additional command buffers from the pool returned by <db:link xlink:href="qvulkanwindow.xml#graphicsCommandPool">QVulkanWindow::graphicsCommandPool</db:link>(). For convenience, the index of a host visible and device local memory type index are exposed via <db:link xlink:href="qvulkanwindow.xml#hostVisibleMemoryIndex">QVulkanWindow::hostVisibleMemoryIndex</db:link>() and <db:link xlink:href="qvulkanwindow.xml#deviceLocalMemoryIndex">QVulkanWindow::deviceLocalMemoryIndex</db:link>(). All these accessors are safe to be called from any thread.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvulkanwindow.xml#frameReady">QVulkanWindow::frameReady</db:link>()</db:member>
<db:member><db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
