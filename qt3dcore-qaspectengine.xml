<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAspectEngine Class</db:title>
<db:subtitle>Qt3DCore::QAspectEngine</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Responsible for handling all the <db:link xlink:href="qt3dcore-qabstractaspect.xml">QAbstractAspect</db:link> subclasses that have been registered with the scene.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>Qt3DCore/QAspectEngine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS 3DCore)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::3DCore)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3dcore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Status</db:term>
<db:listitem>
<db:para>Deprecated</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The Qt3D run loop is controlled by the Qt3DRender::QAspectEngine.</db:para>
<db:para><db:link xlink:href="qt3dcore-qabstractaspect.xml">Qt3DCore::QAbstractAspect</db:link> subclasses can be registered by calling Qt3DCore::QAspectEngine::registerAspect() which will take care of registering the aspect and in turn that will call Qt3DCore::QAbstractAspect::onRegistered();</db:para>
<db:para>The simulation loop is launched as soon as a root <db:link xlink:href="qt3dcore-qentity.xml">Qt3DCore::QEntity</db:link> is set on the <db:link xlink:href="qt3dcore-qaspectengine.xml">Qt3DCore::QAspectEngine</db:link>. This is followed by a call to onEngineStartup() on each aspect so that they can start their simulation work.</db:para>
<db:para>The simulation loop is stopped when the root entity is set to Qt3DCore::QEntityPtr(). This calls onEngineShutdown() on each aspect so that they can stop performing their simulation work.</db:para>
<db:para>Setting a new valid root entity would restart the simulation loop again.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAspectEngine">
<db:title>[explicit] QAspectEngine::QAspectEngine(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a new <db:link xlink:href="qt3dcore-qaspectengine.xml">QAspectEngine</db:link> with <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAspectEngine">
<db:title>[virtual noexcept] QAspectEngine::~QAspectEngine()</db:title>
<db:para>Destroys the engine.</db:para>
</db:section>
<db:section xml:id="aspect">
<db:title>Qt3DCore::QAbstractAspect *QAspectEngine::aspect(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns the asepect matching the <db:code role="parameter">name</db:code></db:para>
<db:note>
<db:para>Required that the aspect was registered by name</db:para>
</db:note>
</db:section>
<db:section xml:id="aspects">
<db:title>QList&lt;Qt3DCore::QAbstractAspect *&gt; QAspectEngine::aspects() const</db:title>
<db:para>Returns the aspects owned by the aspect engine.</db:para>
</db:section>
<db:section xml:id="executeCommand">
<db:title>QVariant QAspectEngine::executeCommand(const QString &amp;<db:emphasis>command</db:emphasis>)</db:title>
<db:para>Executes the given <db:code role="parameter">command</db:code> on aspect engine. Valid commands are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>&quot;list aspects&quot;</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Returns the reply for the command.</db:para>
</db:section>
<db:section xml:id="processFrame">
<db:title>void QAspectEngine::processFrame()</db:title>
<db:para>If using the manual run mode, this function executes the jobs for each aspect. It is blocking and won't return until all jobs have been completed.</db:para>
<db:para>If you are using the QRenderAspect,</db:para>
</db:section>
<db:section xml:id="registerAspect">
<db:title>void QAspectEngine::registerAspect(Qt3DCore::QAbstractAspect *<db:emphasis>aspect</db:emphasis>)</db:title>
<db:para>Registers a new <db:code role="parameter">aspect</db:code> to the AspectManager. The <db:link xlink:href="qt3dcore-qaspectengine.xml">QAspectEngine</db:link> takes ownership of the aspect and will delete it when the aspect is unregistered.</db:para>
</db:section>
<db:section xml:id="registerAspect-1">
<db:title>void QAspectEngine::registerAspect(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Registers a new aspect to the AspectManager based on its <db:code role="parameter">name</db:code> Uses the currently set aspect factory to create the actual aspect instance.</db:para>
</db:section>
<db:section xml:id="rootEntity">
<db:title>Qt3DCore::QEntityPtr QAspectEngine::rootEntity() const</db:title>
<db:para>Returns the root entity of the aspect engine.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3dcore-qaspectengine.xml#setRootEntity">setRootEntity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRootEntity">
<db:title>void QAspectEngine::setRootEntity(Qt3DCore::QEntityPtr <db:emphasis>root</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">root</db:code> entity for the aspect engine.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3dcore-qaspectengine.xml#rootEntity">rootEntity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unregisterAspect">
<db:title>void QAspectEngine::unregisterAspect(Qt3DCore::QAbstractAspect *<db:emphasis>aspect</db:emphasis>)</db:title>
<db:para>Unregisters and deletes the given <db:code role="parameter">aspect</db:code>.</db:para>
</db:section>
<db:section xml:id="unregisterAspect-1">
<db:title>void QAspectEngine::unregisterAspect(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Unregisters and deletes the aspect with the given <db:code role="parameter">name</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="QEntityPtr-typedef">
<db:title>QEntityPtr</db:title>
<db:para>A shared pointer for <db:link xlink:href="qt3dcore-qentity.xml">QEntity</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
