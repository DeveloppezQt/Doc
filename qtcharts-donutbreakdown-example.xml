<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Creating a Donut Breakdown Chart</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to create a donut breakdown chart.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:note>
<db:para>This is part of the <db:link xlink:href="qtcharts-chartsgallery-example.xml">Charts with Widgets Gallery</db:link> example.</db:para>
</db:note>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_donutbreakdown.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="creating-donut-breakdown-charts">
<db:title>Creating Donut Breakdown Charts</db:title>
<db:para>Let's start by defining some data for the chart.</db:para>
<db:programlisting language="cpp">// Graph is based on data of 'Total consumption of energy increased by 10 per cent in 2010'
// Statistics Finland, 13 December 2011
// http://www.stat.fi/til/ekul/2010/ekul_2010_2011-12-13_tie_001_en.html

auto series1 = new QPieSeries;
series1-&gt;setName(&quot;Fossil fuels&quot;);
series1-&gt;append(&quot;Oil&quot;, 353295);
series1-&gt;append(&quot;Coal&quot;, 188500);
series1-&gt;append(&quot;Natural gas&quot;, 148680);
series1-&gt;append(&quot;Peat&quot;, 94545);

auto series2 = new QPieSeries;
series2-&gt;setName(&quot;Renewables&quot;);
series2-&gt;append(&quot;Wood fuels&quot;, 319663);
series2-&gt;append(&quot;Hydro power&quot;, 45875);
series2-&gt;append(&quot;Wind power&quot;, 1060);

auto series3 = new QPieSeries;
series3-&gt;setName(&quot;Others&quot;);
series3-&gt;append(&quot;Nuclear energy&quot;, 238789);
series3-&gt;append(&quot;Import energy&quot;, 37802);
series3-&gt;append(&quot;Other&quot;, 32441);
</db:programlisting>
<db:para>Then we create a chart where we add the data. Note that this is our own chart derived from <db:link xlink:href="qchart-qtcharts.xml">QChart</db:link>.</db:para>
<db:programlisting language="cpp">auto donutBreakdown = new DonutBreakdownChart;
donutBreakdown-&gt;setAnimationOptions(QChart::AllAnimations);
donutBreakdown-&gt;setTitle(&quot;Total consumption of energy in Finland 2010&quot;);
donutBreakdown-&gt;legend()-&gt;setAlignment(Qt::AlignRight);
donutBreakdown-&gt;addBreakdownSeries(series1, Qt::red);
donutBreakdown-&gt;addBreakdownSeries(series2, Qt::darkGreen);
donutBreakdown-&gt;addBreakdownSeries(series3, Qt::darkBlue);
</db:programlisting>
<db:para>Our own chart works in such a way that we create a main series in the constructor we create a main series, which aggregates the data provided by the breakdown series. This is the piechart in the center.</db:para>
<db:programlisting language="cpp">DonutBreakdownChart::DonutBreakdownChart(QGraphicsItem *parent, Qt::WindowFlags wFlags)
    : QChart(QChart::ChartTypeCartesian, parent, wFlags)
{
    // create the series for main center pie
    m_mainSeries = new QPieSeries;
    m_mainSeries-&gt;setPieSize(0.7);
    QChart::addSeries(m_mainSeries);
}
</db:programlisting>
<db:para>When a breakdown series is added the data is used to create a slice in the main series and the breakdown series itself is used to create a segment of a donut positioned so that it is aligned with the corresponding slice in the main series.</db:para>
<db:programlisting language="cpp">void DonutBreakdownChart::addBreakdownSeries(QPieSeries *breakdownSeries, QColor color)
{
    QFont font(&quot;Arial&quot;, 8);

    // add breakdown series as a slice to center pie
    auto mainSlice = new DonutBreakdownMainSlice(breakdownSeries);
    mainSlice-&gt;setName(breakdownSeries-&gt;name());
    mainSlice-&gt;setValue(breakdownSeries-&gt;sum());
    m_mainSeries-&gt;append(mainSlice);

    // customize the slice
    mainSlice-&gt;setBrush(color);
    mainSlice-&gt;setLabelVisible();
    mainSlice-&gt;setLabelColor(Qt::white);
    mainSlice-&gt;setLabelPosition(QPieSlice::LabelInsideHorizontal);
    mainSlice-&gt;setLabelFont(font);

    // position and customize the breakdown series
    breakdownSeries-&gt;setPieSize(0.8);
    breakdownSeries-&gt;setHoleSize(0.7);
    breakdownSeries-&gt;setLabelsVisible();
    const auto slices = breakdownSeries-&gt;slices();
    for (QPieSlice *slice : slices) {
        color = color.lighter(115);
        slice-&gt;setBrush(color);
        slice-&gt;setLabelFont(font);
    }

    // add the series to the chart
    QChart::addSeries(breakdownSeries);

    // recalculate breakdown donut segments
    recalculateAngles();

    // update customize legend markers
    updateLegendMarkers();
}
</db:programlisting>
<db:para>Here's how the start and end angles for the donut segments are calculated.</db:para>
<db:programlisting language="cpp">void DonutBreakdownChart::recalculateAngles()
{
    qreal angle = 0;
    const auto slices = m_mainSeries-&gt;slices();
    for (QPieSlice *slice : slices) {
        QPieSeries *breakdownSeries = qobject_cast&lt;DonutBreakdownMainSlice *&gt;(slice)-&gt;breakdownSeries();
        breakdownSeries-&gt;setPieStartAngle(angle);
        angle += slice-&gt;percentage() * 360.0; // full pie is 360.0
        breakdownSeries-&gt;setPieEndAngle(angle);
    }
}
</db:programlisting>
<db:para>The legend markers are customized to show the breakdown percentage. The markers for the main level slices are hidden.</db:para>
<db:programlisting language="cpp">void DonutBreakdownChart::updateLegendMarkers()
{
    // go through all markers
    const auto allseries = series();
    for (QAbstractSeries *series : allseries) {
        const auto markers = legend()-&gt;markers(series);
        for (QLegendMarker *marker : markers) {
            auto pieMarker = qobject_cast&lt;QPieLegendMarker *&gt;(marker);
            if (series == m_mainSeries) {
                // hide markers from main series
                pieMarker-&gt;setVisible(false);
            } else {
                // modify markers from breakdown series
                pieMarker-&gt;setLabel(QString(&quot;%1 %2%&quot;)
                                    .arg(pieMarker-&gt;slice()-&gt;label())
                                    .arg(pieMarker-&gt;slice()-&gt;percentage() * 100, 0, 'f', 2));
                pieMarker-&gt;setFont(QFont(&quot;Arial&quot;, 8));
            }
        }
    }
}
</db:programlisting>
<db:para>Instead the main level slices show the percentage on the label.</db:para>
<db:programlisting language="cpp">DonutBreakdownMainSlice::DonutBreakdownMainSlice(QPieSeries *breakdownSeries, QObject *parent)
    : QPieSlice(parent),
      m_breakdownSeries(breakdownSeries)
{
    connect(this, &amp;DonutBreakdownMainSlice::percentageChanged,
            this, &amp;DonutBreakdownMainSlice::updateLabel);
}
    ...
void DonutBreakdownMainSlice::updateLabel()
{
    setLabel(QString(&quot;%1 %2%&quot;).arg(m_name).arg(percentage() * 100, 0, 'f', 2));
}
</db:programlisting>
<db:para>Now that we have our chart defined, we can finally create a <db:link xlink:href="qchartview-qtcharts.xml">QChartView</db:link> and show the chart.</db:para>
<db:programlisting language="cpp">createDefaultChartView(donutBreakdown);
</db:programlisting>
</db:section>
</db:article>
