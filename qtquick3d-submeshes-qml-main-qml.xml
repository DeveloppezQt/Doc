<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Sub-mesh Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how assign materials to sub-meshes.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2020 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick3D

Window {
    id: window
    width: 640
    height: 640
    visible: true
    title: &quot;Sub-mesh example&quot;

    View3D {
        id: view
        anchors.fill: parent
        camera: camera
        visible: true

        PerspectiveCamera {
            id: camera
            z: 20
        }

        DistortedCube {
            x: 4
            scale: Qt.vector3d(2, 2, 2)

            SequentialAnimation on eulerRotation {
                loops: Animation.Infinite
                PropertyAnimation {
                    duration: 5000
                    from: Qt.vector3d(0, 0, 0)
                    to: Qt.vector3d(360, 0, 360)
                }
            }
        }

        DistortedCube {
            x: -4
            scale: Qt.vector3d(2, 2, 2)
            materials: [ PrincipledMaterial {
                baseColor: &quot;red&quot;
                lighting: PrincipledMaterial.NoLighting
            },
            PrincipledMaterial {
                            baseColor: &quot;green&quot;
                            lighting: PrincipledMaterial.NoLighting
                        } ]
            SequentialAnimation on eulerRotation {
                loops: Animation.Infinite
                PropertyAnimation {
                    duration: 5000
                    from: Qt.vector3d(0, 0, 0)
                    to: Qt.vector3d(360, 0, 360)
                }
            }
        }
    }
}

</db:programlisting>
</db:article>
