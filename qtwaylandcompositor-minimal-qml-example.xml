<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Minimal QML</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt Wayland Compositor | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Minimal QML is a simple example that demonstrates how to write a Wayland compositor in QML.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Minimal QML is a desktop-style Wayland compositor example implementing a complete Qt Wayland Compositor with as little code as possible. The compositor is implemented with Qt Quick and QML.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/minimal-qml.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="the-waylandcompositor-object">
<db:title>The WaylandCompositor Object</db:title>
<db:para>The top-level item of the compositor is a <db:link xlink:href="qml-qtwayland-compositor-waylandcompositor.xml">WaylandCompositor</db:link>. This represents the Wayland server itself and manages the connections to clients as they come in.</db:para>
<db:programlisting language="qml">WaylandCompositor {
</db:programlisting>
<db:para>By default, the server supports the core Wayland protocol for communicating with clients. Usually, though, you will also want to support one or more extensions to the protocol. This gives the client more tools to influence its role in the windowing system.</db:para>
<db:para>Qt supports several standard and common extensions. In addition, it is easy to create and support custom extensions, as long as support can be added in both the client and server code.</db:para>
</db:section>
<db:section xml:id="shell-extensions">
<db:title>Shell Extensions</db:title>
<db:para>Typically, a compositor will support at least one <db:link xlink:href="qtwaylandcompositor-shellextensions.xml">shell extension</db:link>. Extensions are added to the compositor by instantiating them as direct children of the <db:link xlink:href="qml-qtwayland-compositor-waylandcompositor.xml">WaylandCompositor</db:link> object. They will automatically be added to its <db:code>extensions</db:code> property and broadcast to clients when they connect.</db:para>
<db:programlisting language="qml">WlShell {
    onWlShellSurfaceCreated: (shellSurface) =&amp;gt; shellSurfaces.append({shellSurface: shellSurface});
}
XdgShell {
    onToplevelCreated: (toplevel, xdgSurface) =&amp;gt; shellSurfaces.append({shellSurface: xdgSurface});
}
IviApplication {
    onIviSurfaceCreated: (iviSurface) =&amp;gt; shellSurfaces.append({shellSurface: iviSurface});
}
</db:programlisting>
<db:para>The <db:emphasis>Minimal QML</db:emphasis> example supports three different shells: <db:link xlink:href="qml-qtwayland-compositor-wlshell-wlshell.xml">WlShell</db:link>, <db:link xlink:href="qml-qtwayland-compositor-xdgshell-xdgshell.xml">XdgShell</db:link> and <db:link xlink:href="qml-qtwayland-compositor-iviapplication-iviapplication.xml">IviApplication</db:link>.</db:para>
<db:para>A client can connect to either of these and it will be used as a channel for communicating about certain things between the client and compositor, such as creating new windows, negotiating size, and so on.</db:para>
<db:para>When a client creates a new surface, its active extension will receive a signal of this. The signal contains a <db:link xlink:href="qml-qtwayland-compositor-shellsurface.xml">ShellSurface</db:link> argument. Depending on which extension received the signal, this argument will be of a subclass of <db:link xlink:href="qml-qtwayland-compositor-shellsurface.xml">ShellSurface</db:link>: <db:link xlink:href="qml-qtwayland-compositor-wlshell-wlshellsurface.xml">WlShellSurface</db:link>, <db:link xlink:href="qml-qtwayland-compositor-xdgshell-xdgsurface.xml">XdgSurface</db:link> or <db:link xlink:href="qml-qtwayland-compositor-iviapplication-ivisurface.xml">IviSurface</db:link> respectively.</db:para>
<db:para>The <db:link xlink:href="qml-qtwayland-compositor-shellsurface.xml">ShellSurface</db:link> can be used to access features of the shell extension for the specific surface. In the <db:emphasis>Minimal QML</db:emphasis> example, we simply want to add the client to our scene. To record existence of the new window, we add it to a simple <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> for safe-keeping.</db:para>
<db:programlisting language="qml">ListModel { id: shellSurfaces }
</db:programlisting>
</db:section>
<db:section xml:id="creating-the-scene">
<db:title>Creating the Scene</db:title>
<db:para>Most of the necessary compositor code is already ready. The final step is to make sure applications are actually visible on the screen.</db:para>
<db:para>For all compositors, we have to define at least one output. This is done by instantiating a <db:link xlink:href="qml-qtwayland-compositor-waylandoutput.xml">WaylandOutput</db:link> object as the direct child of the <db:link xlink:href="qml-qtwayland-compositor-waylandcompositor.xml">WaylandCompositor</db:link>. If there is only a single output, this will represent the primary screen on the system. (You may also create multiple <db:link xlink:href="qml-qtwayland-compositor-waylandoutput.xml">WaylandOutput</db:link> objects to address multiple screens if they are available. See the <db:link xlink:href="qtwaylandcompositor-multi-screen-example.xml">Multi Screen example</db:link> for more details about this.)</db:para>
<db:programlisting language="qml">WaylandOutput {
    sizeFollowsWindow: true
    window: Window {
        width: 1024
        height: 768
        visible: true
</db:programlisting>
<db:para>Inside the <db:link xlink:href="qml-qtwayland-compositor-waylandoutput.xml">WaylandOutput</db:link>, we create a <db:link xlink:href="qtwaylandcompositor-minimal-cpp-example.xml#window">Window</db:link> that serves as the container for our scene. In the example, we give this a size. The size used if the compositor is running as an application inside another windowing system which supports custom-sized windows. In a typical use case on an embedded device, where the compositor is the only display server running, it will probably be running on a full-screen platform plugin (such as <db:code>eglfs</db:code>) and the size set here will not matter.</db:para>
<db:para>The final step is to create items for each of the <db:link xlink:href="qml-qtwayland-compositor-shellsurface.xml">ShellSurface</db:link> objects that have been created. For this, we can use the <db:link xlink:href="qml-qtwayland-compositor-shellsurfaceitem.xml">ShellSurfaceItem</db:link> class.</db:para>
<db:programlisting language="qml">Repeater {
    model: shellSurfaces
    // ShellSurfaceItem handles displaying a shell surface.
    // It has implementations for things like interactive
    // resize/move, and forwarding of mouse and keyboard
    // events to the client process.
    ShellSurfaceItem {
        shellSurface: modelData
        onSurfaceDestroyed: shellSurfaces.remove(index)
    }
}
</db:programlisting>
<db:para>We create a <db:link xlink:href="qml-qtwayland-compositor-shellsurfaceitem.xml">ShellSurfaceItem</db:link> for each of the shell surfaces in our model, and assign them to the <db:code>shellSurface</db:code> property. In addition, we make sure the model is updated when the shell surface is destroyed. This can happen when a client manually closes a window, and if it exits or crashes.</db:para>
<db:para>And this is all the code needed to create a functional Wayland compositor using Qt Quick and QML. For another example of a compositor written in QML but which has a few more features, take a look at the <db:link xlink:href="qtwaylandcompositor-fancy-compositor-example.xml">Fancy Compositor example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtwayland.git/tree/examples/wayland/minimal-qml?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
