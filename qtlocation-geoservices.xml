<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Location GeoServices</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Implementing Qt Location GeoService plugins.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt Location provides the majority of its functionality through GeoService plugins. This document outlines how to develop a new GeoService plugin.</db:para>
<db:section xml:id="plugin-description">
<db:title>Plugin Description</db:title>
<db:para>Each plugin is described by a json file. The json describes the plugins capabilities and version. Below is an example of a json file used by the OpenStreenMap plugin:</db:para>
<db:programlisting language="cpp">{
    &quot;Keys&quot;: [&quot;osm&quot;],
    &quot;Provider&quot;: &quot;osm&quot;,
    &quot;Version&quot;: 100,
    &quot;Experimental&quot;: false,
    &quot;Features&quot;: [
        &quot;OnlineMappingFeature&quot;,
        &quot;OnlineGeocodingFeature&quot;,
        &quot;ReverseGeocodingFeature&quot;,
        &quot;OnlineRoutingFeature&quot;,
        &quot;OnlinePlacesFeature&quot;
    ]
}

</db:programlisting>
<db:para>The entries have the following meaning:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Key</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Keys</db:para>
</db:td>
<db:td>
<db:para>The unique name/key of the plugin. Each GeoService plugin must have a unique name.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Provider</db:para>
</db:td>
<db:td>
<db:para>The provider name of the services. Multiple plugins may have the same name. In such cases the Version string will be used to further distinguish the plugins.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Experimental</db:para>
</db:td>
<db:td>
<db:para>Marks the service plugin as experimental. API developers may choose to ignore such plugins when instanciating <db:link xlink:href="qgeoserviceprovider.xml#QGeoServiceProvider">QGeoServiceProvider::QGeoServiceProvider</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Version</db:para>
</db:td>
<db:td>
<db:para>The plugin version. If multiple plugins have the same provider name, the plugin with the higest version will be used.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Features</db:para>
</db:td>
<db:td>
<db:para>List of features provided by the plugin/service. Each feature is a string representation of the corresponding features in <db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link>. For more details see <db:link xlink:href="qgeoserviceprovider.xml#routingFeatures">QGeoServiceProvider::routingFeatures</db:link>(), <db:link xlink:href="qgeoserviceprovider.xml#geocodingFeatures">QGeoServiceProvider::geocodingFeatures</db:link>() and <db:link xlink:href="qgeoserviceprovider.xml#placesFeatures">QGeoServiceProvider::placesFeatures</db:link>().</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="implementing-plugins">
<db:title>Implementing Plugins</db:title>
<db:para>A plugin implementer needs to subclass <db:link xlink:href="qgeoserviceproviderfactory.xml">QGeoServiceProviderFactory</db:link> and as many of the ManagerEngine classes as they want to provide implementations for.</db:para>
<db:para>Subclassing <db:link xlink:href="qgeoserviceproviderfactory.xml">QGeoServiceProviderFactory</db:link> will only involves overriding of one of the following methods:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qgeoserviceproviderfactory.xml#createGeocodingManagerEngine">QGeoServiceProviderFactory::createGeocodingManagerEngine</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgeoserviceproviderfactory.xml#createRoutingManagerEngine">QGeoServiceProviderFactory::createRoutingManagerEngine</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgeoserviceproviderfactory.xml#createPlaceManagerEngine">QGeoServiceProviderFactory::createPlaceManagerEngine</db:link>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If a plugin does not provide an engine the relevant function should return 0.</db:para>
<db:variablelist role="QtLocation-impl">
<db:varlistentry>
<db:term><db:link xlink:href="qgeocodingmanagerengine.xml" xlink:role="class">QGeoCodingManagerEngine</db:link></db:term>
<db:listitem>
<db:para>The QGeoCodingManagerEngine class provides an interface and convenience methods to implementers of QGeoServiceProvider plugins who want to provide support for geocoding operations.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgeoroutingmanagerengine.xml" xlink:role="class">QGeoRoutingManagerEngine</db:link></db:term>
<db:listitem>
<db:para>The QGeoRoutingManagerEngine class provides an interface and convenience methods to implementers of QGeoServiceProvider plugins who want to provide access to geographic routing information.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgeoserviceproviderfactory.xml" xlink:role="class">QGeoServiceProviderFactory</db:link></db:term>
<db:listitem>
<db:para>The QGeoServiceProviderFactory class is a factory class used as the plugin interface for services related to geographical information.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qplacemanagerengine.xml" xlink:role="class">QPlaceManagerEngine</db:link></db:term>
<db:listitem>
<db:para>The QPlaceManagerEngine class provides an interface for implementers of QGeoServiceProvider plugins who want to provide access to place functionality.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:article>
