<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Sub-Attaq</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows Qt's ability to combine <db:link xlink:href="animation-overview.xml">the animation framework</db:link> and <db:link xlink:href="statemachine-api.xml">the state machine framework</db:link> to create a game.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL21$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file. Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** As a special exception, The Qt Company gives you certain additional
** rights. These rights are described in The Qt Company LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#ifndef SUBMARINE_P_H
#define SUBMARINE_P_H

//
//  W A R N I N G
//  -------------
//
// This file is not part of the Qt API.  It exists purely as an
// implementation detail.  This header file may change from version to
// version without notice, or even be removed.
//
// We mean it.
//

//Own
#include &quot;animationmanager.h&quot;
#include &quot;submarine.h&quot;
#include &quot;qanimationstate.h&quot;

//Qt
#include &lt;QtCore/QPropertyAnimation&gt;
#include &lt;QtWidgets/QGraphicsScene&gt;

//This state is describing when the boat is moving right
class MovementState : public QAnimationState
{
Q_OBJECT
public:
    explicit MovementState(SubMarine *submarine, QState *parent = 0) : QAnimationState(parent)
    {
        movementAnimation = new QPropertyAnimation(submarine, &quot;pos&quot;);
        connect(movementAnimation,SIGNAL(valueChanged(const QVariant &amp;)),this,SLOT(onAnimationMovementValueChanged(const QVariant &amp;)));
        setAnimation(movementAnimation);
        AnimationManager::self()-&gt;registerAnimation(movementAnimation);
        this-&gt;submarine = submarine;
    }

protected slots:
    void onAnimationMovementValueChanged(const QVariant &amp;)
    {
        if (qrand() % 200 + 1 == 3)
            submarine-&gt;launchTorpedo(qrand() % 3 + 1);
    }

protected:
    void onEntry(QEvent *e) Q_DECL_OVERRIDE
    {
        if (submarine-&gt;currentDirection() == SubMarine::Left) {
            movementAnimation-&gt;setEndValue(QPointF(0,submarine-&gt;y()));
            movementAnimation-&gt;setDuration(submarine-&gt;x()/submarine-&gt;currentSpeed()*12);
        }
        else /*if (submarine-&gt;currentDirection() == SubMarine::Right)*/ {
            movementAnimation-&gt;setEndValue(QPointF(submarine-&gt;scene()-&gt;width()-submarine-&gt;size().width(),submarine-&gt;y()));
            movementAnimation-&gt;setDuration((submarine-&gt;scene()-&gt;width()-submarine-&gt;size().width()-submarine-&gt;x())/submarine-&gt;currentSpeed()*12);
        }
        QAnimationState::onEntry(e);
    }

private:
    SubMarine *submarine;
    QPropertyAnimation *movementAnimation;
};

//This state is describing when the boat is moving right
class ReturnState : public QAnimationState
{
public:
    explicit ReturnState(SubMarine *submarine, QState *parent = 0) : QAnimationState(parent)
    {
        returnAnimation = new QPropertyAnimation(submarine-&gt;rotation(), &quot;angle&quot;);
        returnAnimation-&gt;setDuration(500);
        AnimationManager::self()-&gt;registerAnimation(returnAnimation);
        setAnimation(returnAnimation);
        this-&gt;submarine = submarine;
    }

protected:
    void onEntry(QEvent *e) Q_DECL_OVERRIDE
    {
        returnAnimation-&gt;stop();
        returnAnimation-&gt;setEndValue(submarine-&gt;currentDirection() == SubMarine::Right ? 360. : 180.);
        QAnimationState::onEntry(e);
    }

    void onExit(QEvent *e) Q_DECL_OVERRIDE
    {
        submarine-&gt;currentDirection() == SubMarine::Right ? submarine-&gt;setCurrentDirection(SubMarine::Left) : submarine-&gt;setCurrentDirection(SubMarine::Right);
        QAnimationState::onExit(e);
    }

private:
    SubMarine *submarine;
    QPropertyAnimation *returnAnimation;
};

#endif // SUBMARINE_P_H

</db:programlisting>
</db:article>
