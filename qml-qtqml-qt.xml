<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt QML Type</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a global object with useful enums and functions from Qt.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Qt is part of <db:simplelist><db:member>qml-utility-elements</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Qt is a singleton type that provides utility functions, properties, and enums. Here is an example showing how to use this type:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Text {
    color: Qt.rgba(1, 0, 0, 1)
    text: Qt.md5(&quot;hello, world&quot;)
}
</db:programlisting>
<db:section xml:id="enums">
<db:title>Enums</db:title>
<db:para>The Qt object contains the enums available in the <db:link xlink:href="qt.xml">Qt Namespace</db:link>. For example, you can access the <db:link xlink:href="qt.xml#MouseButton-enum">Qt::LeftButton</db:link> and <db:link xlink:href="qt.xml#MouseButton-enum">Qt::RightButton</db:link> enumeration values as Qt.LeftButton and Qt.RightButton.</db:para>
</db:section>
<db:section xml:id="types">
<db:title>Types</db:title>
<db:para>The Qt object also contains helper functions for creating objects of specific data types. This is primarily useful when setting the properties of an item when the property has one of the following types:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>rect - use <db:link xlink:href="qml-qtqml-qt.xml#rect-method">Qt.rect</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para>point - use <db:link xlink:href="qml-qtqml-qt.xml#point-method">Qt.point</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para>size - use <db:link xlink:href="qml-qtqml-qt.xml#size-method">Qt.size</db:link>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If the QtQuick module has been imported, the following helper functions for creating objects of specific data types are also available for clients to use:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>color - use <db:link xlink:href="qml-qtqml-qt.xml#rgba-method">Qt.rgba</db:link>(), <db:link xlink:href="qml-qtqml-qt.xml#hsla-method">Qt.hsla</db:link>(), <db:link xlink:href="qml-qtqml-qt.xml#darker-method">Qt.darker</db:link>(), <db:link xlink:href="qml-qtqml-qt.xml#lighter-method">Qt.lighter</db:link>() or <db:link xlink:href="qml-qtqml-qt.xml#tint-method">Qt.tint</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para>font - use <db:link xlink:href="qml-qtqml-qt.xml#font-method">Qt.font</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para>vector2d - use <db:link xlink:href="qml-qtqml-qt.xml#vector2d-method">Qt.vector2d</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para>vector3d - use <db:link xlink:href="qml-qtqml-qt.xml#vector3d-method">Qt.vector3d</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para>vector4d - use <db:link xlink:href="qml-qtqml-qt.xml#vector4d-method">Qt.vector4d</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para>quaternion - use <db:link xlink:href="qml-qtqml-qt.xml#quaternion-method">Qt.quaternion</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para>matrix4x4 - use <db:link xlink:href="qml-qtqml-qt.xml#matrix4x4-method">Qt.matrix4x4</db:link>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>There are also string based constructors for these types. See <db:link xlink:href="qtqml-typesystem-basictypes.xml">QML Basic Types</db:link> for more information.</db:para>
</db:section>
<db:section xml:id="date-time-formatters">
<db:title>Date/Time Formatters</db:title>
<db:para>The Qt object contains several functions for formatting <db:link xlink:href="qdatetime.xml">QDateTime</db:link>, <db:link xlink:href="qdate.xml">QDate</db:link> and <db:link xlink:href="qtime.xml">QTime</db:link> values.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-qt.xml#formatDateTime-method">string Qt.formatDateTime(datetime date, variant format)</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-qt.xml#formatDate-method">string Qt.formatDate(datetime date, variant format)</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-qt.xml#formatTime-method">string Qt.formatTime(datetime date, variant format)</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The format specification is described at <db:link xlink:href="qml-qtqml-qt.xml#formatDateTime-method">Qt.formatDateTime</db:link>.</db:para>
</db:section>
<db:section xml:id="dynamic-object-creation">
<db:title>Dynamic Object Creation</db:title>
<db:para>The following functions on the global object allow you to dynamically create QML items from files or strings. See <db:link xlink:href="qtqml-javascript-dynamicobjectcreation.xml">Dynamic QML Object Creation from JavaScript</db:link> for an overview of their use.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-qt.xml#createComponent-method">object Qt.createComponent(url)</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-qt.xml#createQmlObject-method">object Qt.createQmlObject(string qml, object parent, string filepath)</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="other-functions">
<db:title>Other Functions</db:title>
<db:para>The following functions are also on the Qt object.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-qt.xml#quit-method">Qt.quit</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-qt.xml#md5-method">Qt.md5</db:link>(string)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-qt.xml#btoa-method">string Qt.btoa(string)</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-qt.xml#atob-method">string Qt.atob(string)</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-qt.xml#binding-method">object Qt.binding(function)</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-qt.xml#locale-method">object Qt.locale()</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-qt.xml#resolvedUrl-method">string Qt.resolvedUrl(string)</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-qt.xml#openUrlExternally-method">Qt.openUrlExternally</db:link>(string)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-qt.xml#fontFamilies-method">list&lt;string&gt; Qt.fontFamilies()</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="application-prop">
<db:title>[since 5.1] application : object</db:title>
<db:fieldsynopsis>
<db:type>object</db:type>
<db:varname>application</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The application object provides access to global application state properties shared by many QML components.</db:para>
<db:para>It is the same as the <db:link xlink:href="qmake-common-projects.xml#application">Application</db:link> singleton.</db:para>
<db:para>The following example uses the application object to indicate whether the application is currently active:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    width: 300; height: 55
    color: Qt.application.active ? &quot;white&quot; : &quot;lightgray&quot;
    Text {
        text: &quot;Application &quot; + (Qt.application.active ? &quot;active&quot; : &quot;inactive&quot;)
        opacity: Qt.application.active ? 1.0 : 0.5
        anchors.centerIn: parent
    }
}
</db:programlisting>
<db:note>
<db:para>When using QML without a <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link>, the following properties will be undefined:</db:para>
</db:note>
<db:itemizedlist>
<db:listitem>
<db:para>application.active</db:para>
</db:listitem>
<db:listitem>
<db:para>application.state</db:para>
</db:listitem>
<db:listitem>
<db:para>application.layoutDirection</db:para>
</db:listitem>
<db:listitem>
<db:para>application.font</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This property was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="inputMethod-prop">
<db:title>[since 5.0] inputMethod : object</db:title>
<db:fieldsynopsis>
<db:type>object</db:type>
<db:varname>inputMethod</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The inputMethod object allows access to application's <db:link xlink:href="qinputmethod.xml">QInputMethod</db:link> object and all its properties and slots. See the <db:link xlink:href="qinputmethod.xml">QInputMethod</db:link> documentation for further details.</db:para>
<db:para>This property was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="platform-prop">
<db:title>[since 5.1] platform : object</db:title>
<db:fieldsynopsis>
<db:type>object</db:type>
<db:varname>platform</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The platform object provides info about the underlying platform.</db:para>
<db:para>Its properties are:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>platform.os</db:para>
</db:td>
<db:td>
<db:para>This read-only property contains the name of the operating system.</db:para>
<db:para>Possible values are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>&quot;android&quot; - Android</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;ios&quot; - iOS</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;tvos&quot; - tvOS</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;linux&quot; - Linux</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;osx&quot; - macOS</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;qnx&quot; - QNX (since Qt 5.9.3)</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;unix&quot; - Other Unix-based OS</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;windows&quot; - Windows</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;wasm&quot; - WebAssembly</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>platform.pluginName</db:para>
</db:td>
<db:td>
<db:para>This is the name of the platform set on the <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> instance as returned by <db:link xlink:href="qguiapplication.xml#platformName-prop">QGuiApplication::platformName</db:link>()</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This property was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="styleHints-prop">
<db:title>[since 5.5] styleHints : object</db:title>
<db:fieldsynopsis>
<db:type>object</db:type>
<db:varname>styleHints</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The styleHints object provides platform-specific style hints and settings. See the <db:link xlink:href="qstylehints.xml">QStyleHints</db:link> documentation for further details.</db:para>
<db:note>
<db:para>The styleHints object is only available when using the Qt Quick module.</db:para>
</db:note>
<db:para>The following example uses the styleHints object to determine whether an item should gain focus on mouse press or touch release:</db:para>
<db:programlisting language="cpp">import QtQuick 2.4

MouseArea {
    id: button

    onPressed: {
        if (!Qt.styleHints.setFocusOnTouchRelease)
            button.forceActiveFocus()
    }
    onReleased: {
        if (Qt.styleHints.setFocusOnTouchRelease)
            button.forceActiveFocus()
    }
}
</db:programlisting>
<db:para>This property was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="uiLanguage-prop">
<db:title>[since 5.15] uiLanguage : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>uiLanguage</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The uiLanguage holds the name of the language to be used for user interface string translations. It is exposed in C++ as QQmlEngine::uiLanguage property.</db:para>
<db:para>You can set the value freely and use it in bindings. It is recommended to set it after installing translators in your application. By convention, an empty string means no translation from the language used in the source code is intended to occur.</db:para>
<db:para>If you're using <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link> and the value changes, <db:link xlink:href="qqmlengine.xml#retranslate">QQmlEngine::retranslate</db:link>() will be called.</db:para>
<db:para>This property was introduced in Qt 5.15.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="callLater-method">
<db:title>[since 5.8] callLater(<db:emphasis>function</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type></db:type>
<db:methodname>callLater</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>function</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="signature">callLater(function)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:bridgehead renderas="sect2">[since 5.8] callLater(<db:emphasis>function</db:emphasis>, <db:emphasis>argument1</db:emphasis>, <db:emphasis>argument2</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:bridgehead><db:methodsynopsis>
<db:type></db:type>
<db:methodname>callLater</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>function</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type></db:type>
<db:parameter>argument1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type></db:type>
<db:parameter>argument2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">callLater(function, argument1, argument2, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Use this function to eliminate redundant calls to a function or signal.</db:para>
<db:para>The function passed as the first argument to Qt.<db:link xlink:href="qml-qtqml-qt.xml#callLater-method">callLater</db:link>() will be called later, once the QML engine returns to the event loop.</db:para>
<db:para>When this function is called multiple times in quick succession with the same function as its first argument, that function will be called only once.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    width: 480
    height: 320

    property int callsToUpdateMinimumWidth: 0
    property bool optimize: true

    property int currentTextModel: 0
    property var columnTexts: [
        [&quot;Click on either&quot;, &quot;rectangle above&quot;, &quot;and note how the counter&quot;, &quot;below updates&quot;, &quot;significantly faster using the&quot;, &quot;regular (non-optimized)&quot;, &quot;implementation&quot;],
        [&quot;The width&quot;, &quot;of this column&quot;, &quot;is&quot;, &quot;no wider than the&quot;, &quot;widest item&quot;],
        [&quot;Note how using Qt.callLater()&quot;, &quot;the minimum width is&quot;, &quot;calculated a bare-minimum&quot;, &quot;number&quot;, &quot;of times&quot;]
    ]

    Text {
        x: 20; y: 280
        text: &quot;Times minimum width has been calculated: &quot; + callsToUpdateMinimumWidth
    }

    Row {
        y: 25; spacing: 30; anchors.horizontalCenter: parent.horizontalCenter
        Rectangle {
            width: 200; height:  50; color: &quot;lightgreen&quot;
            Text { text: &quot;Optimized behavior\nusing Qt.callLater()&quot;; anchors.centerIn: parent }
            MouseArea { anchors.fill: parent; onClicked: { optimize = true; currentTextModel++ } }
        }
        Rectangle {
            width: 200; height:  50; color: &quot;lightblue&quot;
            Text { text: &quot;Regular behavior&quot;; anchors.centerIn: parent}
            MouseArea { anchors.fill: parent; onClicked: { optimize = false; currentTextModel++ } }
        }
    }

    Column {
        id: column
        anchors.centerIn: parent

        onChildrenChanged: optimize ? Qt.callLater(updateMinimumWidth) : updateMinimumWidth()

        property int widestChild
        function updateMinimumWidth() {
            callsToUpdateMinimumWidth++
            var w = 0;
            for (var i in children) {
                var child = children[i];
                if (child.implicitWidth &amp;gt; w) {
                    w = child.implicitWidth;
                }
            }

            widestChild = w;
        }

        Repeater {
            id: repeater
            model: columnTexts[currentTextModel%3]
            delegate: Text {
                color: &quot;white&quot;
                text: modelData
                width: column.widestChild
                horizontalAlignment: Text.Center
                Rectangle { anchors.fill: parent; z: -1; color: index%2 ? &quot;gray&quot; : &quot;darkgray&quot; }
            }
        }
    }
}
</db:programlisting>
<db:para>Any additional arguments passed to Qt.<db:link xlink:href="qml-qtqml-qt.xml#callLater-method">callLater</db:link>() will be passed on to the function invoked. Note that if redundant calls are eliminated, then only the last set of arguments will be passed to the function.</db:para>
<db:para>This QML method was introduced in Qt 5.8.</db:para>
</db:section>
<db:section xml:id="alpha-method">
<db:title>color alpha(color <db:emphasis>baseColor</db:emphasis>, real <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Returns <db:code role="parameter">baseColor</db:code> with an alpha value of <db:code role="parameter">value</db:code>.</db:para>
<db:para><db:code role="parameter">value</db:code> is a real ranging from 0 (completely transparent) to 1 (completely opaque).</db:para>
</db:section>
<db:section xml:id="atob-method">
<db:title>string atob(<db:emphasis>data</db:emphasis>)</db:title>
<db:para>ASCII to binary - this function decodes the base64 encoded <db:code role="parameter">data</db:code> string and returns it.</db:para>
</db:section>
<db:section xml:id="binding-method">
<db:title>[since 5.0] binding(<db:emphasis>function</db:emphasis>)</db:title>
<db:para>Returns a JavaScript object representing a <db:link xlink:href="qtqml-syntax-propertybinding.xml">property binding</db:link>, with a <db:code role="parameter">function</db:code> that evaluates the binding.</db:para>
<db:para>There are two main use-cases for the function: firstly, to apply a property binding imperatively from JavaScript code:</db:para>
<db:programlisting language="qml">Item {
    property bool someCondition: true
    property int edgePosition

    Component.onCompleted: {
        if (someCondition == true) {
            // bind to the result of the binding expression passed to Qt.binding()
            edgePosition = Qt.binding(function() { return x + width })
        }
    }
}
</db:programlisting>
<db:para>and secondly, to apply a property binding when initializing property values of dynamically constructed objects (via <db:link xlink:href="qml-qtqml-component.xml#createObject-method">Component.createObject</db:link>() or <db:link xlink:href="">Loader.setSource()</db:link>).</db:para>
<db:para>For example, assuming the existence of a DynamicText component:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Text {
    id: textElement
    width: 200
    height: 200
    text: &quot;Default text&quot;
    property string dynamicText: &quot;Dynamic text&quot;
    onTextChanged: console.log(text)
}
</db:programlisting>
<db:para>the output from:</db:para>
<db:programlisting language="qml">Item {
    id: root
    property string dynamicText: &quot;Root text&quot;

    Component.onCompleted: {
        var c = Qt.createComponent(&quot;DynamicText.qml&quot;)

        var obj1 = c.createObject(root, { 'text': Qt.binding(function() { return dynamicText + ' extra text' }) })
        root.dynamicText = &quot;Modified root text&quot;

        var obj2 = c.createObject(root, { 'text': Qt.binding(function() { return this.dynamicText + ' extra text' }) })
        obj2.dynamicText = &quot;Modified dynamic text&quot;
    }
}
</db:programlisting>
<db:para>and from:</db:para>
<db:programlisting language="qml">Item {
    id: root
    property string dynamicText: &quot;Root text&quot;

    Loader {
        id: loaderOne
        onLoaded: root.dynamicText = &quot;Modified root text&quot;
    }

    Loader {
        id: loaderTwo
        onLoaded: item.dynamicText = &quot;Modified dynamic text&quot;
    }

    Component.onCompleted: {
        loaderOne.setSource(&quot;DynamicText.qml&quot;, { 'text': Qt.binding(function() { return dynamicText + ' extra text' }) })
        loaderTwo.setSource(&quot;DynamicText.qml&quot;, { 'text': Qt.binding(function() { return this.dynamicText + ' extra text' }) })
    }
}
</db:programlisting>
<db:para>should both be:</db:para>
<db:programlisting language="cpp">Root text extra text
Modified root text extra text
Dynamic text extra text
Modified dynamic text extra text
</db:programlisting>
<db:para>This function cannot be used in property binding declarations (see the documentation on <db:link xlink:href="qtqml-syntax-propertybinding.xml#qml-javascript-assignment">binding declarations and binding assignments</db:link>) except when the result is stored in an array bound to a var property.</db:para>
<db:programlisting language="qml">Item {
    width: 50
    property var storedBindings: [ Qt.binding(function() { return x + width }) ] // stored
    property int a: Qt.binding(function() { return x + width }) // error!
    property int b

    Component.onCompleted: {
        b = storedBindings[0] // causes binding assignment
    }
}
</db:programlisting>
<db:para>This method was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="btoa-method">
<db:title>string btoa(<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Binary to ASCII - this function returns a base64 encoding of <db:code role="parameter">data</db:code>.</db:para>
</db:section>
<db:section xml:id="color-method">
<db:title>color color(string <db:emphasis>name</db:emphasis>)</db:title>
<db:para>Returns the color corresponding to the given <db:code role="parameter">name</db:code> (i.e. red or #ff0000). If there is no such color, null is returned.</db:para>
</db:section>
<db:section xml:id="colorEqual-method">
<db:title>color colorEqual(color <db:emphasis>lhs</db:emphasis>, string <db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if both <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> yield equal color values. Both arguments may be either color values or string values. If a string value is supplied it must be convertible to a color, as described for the color basic type.</db:para>
</db:section>
<db:section xml:id="createComponent-method">
<db:title>Component createComponent(url <db:emphasis>url</db:emphasis>, enumeration <db:emphasis>mode</db:emphasis>, QtObject <db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qml-qtqml-component.xml">Component</db:link> object created using the QML file at the specified <db:code role="parameter">url</db:code>, or null if an empty string was given.</db:para>
<db:para>The returned component's <db:link xlink:href="qml-qtqml-component.xml#status-prop">Component::status</db:link> property indicates whether the component was successfully created. If the status is Component.Error, see <db:link xlink:href="qml-qtqml-component.xml#errorString-method">Component::errorString</db:link>() for an error description.</db:para>
<db:para>If the optional <db:code role="parameter">mode</db:code> parameter is set to Component.Asynchronous, the component will be loaded in a background thread. The <db:link xlink:href="qml-qtqml-component.xml#status-prop">Component::status</db:link> property will be Component.Loading while it is loading. The status will change to Component.Ready if the component loads successfully, or Component.Error if loading fails. This parameter defaults to Component.PreferSynchronous if omitted.</db:para>
<db:para>If <db:code role="parameter">mode</db:code> is set to Component.PreferSynchronous, Qt will attempt to load the component synchronously, but may end up loading it asynchronously if necessary. Scenarios that may cause asynchronous loading include, but are not limited to, the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The URL refers to a network resource</db:para>
</db:listitem>
<db:listitem>
<db:para>The component is being created as a result of another component that is being loaded asynchronously</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If the optional <db:code role="parameter">parent</db:code> parameter is given, it should refer to the object that will become the parent for the created <db:link xlink:href="qml-qtqml-component.xml">Component</db:link> object. If no mode was passed, this can be the second argument.</db:para>
<db:para>Call <db:link xlink:href="qml-qtqml-component.xml#createObject-method">Component.createObject</db:link>() on the returned component to create an object instance of the component.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Item {
    id: container
    width: 300; height: 300

    function loadButton() {
        var component = Qt.createComponent(&quot;Button.qml&quot;);
        if (component.status == Component.Ready) {
            var button = component.createObject(container);
            button.color = &quot;red&quot;;
        }
    }

    Component.onCompleted: loadButton()
}
</db:programlisting>
<db:para>See <db:link xlink:href="qtqml-javascript-dynamicobjectcreation.xml">Dynamic QML Object Creation from JavaScript</db:link> for more information on using this function.</db:para>
<db:para>To create a QML object from an arbitrary string of QML (instead of a file), use <db:link xlink:href="qml-qtqml-qt.xml#createQmlObject-method">Qt.createQmlObject</db:link>().</db:para>
</db:section>
<db:section xml:id="createQmlObject-method">
<db:title>object createQmlObject(string <db:emphasis>qml</db:emphasis>, object <db:emphasis>parent</db:emphasis>, string <db:emphasis>filepath</db:emphasis>)</db:title>
<db:para>Returns a new object created from the given <db:code role="parameter">qml</db:code> string which will have the specified <db:code role="parameter">parent</db:code>, or null if there was an error in creating the object.</db:para>
<db:para>If <db:code role="parameter">filepath</db:code> is specified, it will be used for error reporting for the created object.</db:para>
<db:para>Example (where parentItem is the id of an existing QML item):</db:para>
<db:programlisting language="qml">const newObject = Qt.createQmlObject(`
    import QtQuick 2.0

    Rectangle {
        color: &quot;red&quot;
        width: 20
        height: 20
    }
    `,
    parentItem,
    &quot;myDynamicSnippet&quot;
);
</db:programlisting>
<db:para>In the case of an error, a <db:link xlink:href="qqmlerror.xml">QQmlError</db:link> object is thrown. This object has an additional property, qmlErrors, which is an array of the errors encountered. Each object in this array has the members lineNumber, columnNumber, fileName and message. For example, if the above snippet had misspelled color as 'colro' then the array would contain an object like the following: { &quot;lineNumber&quot; : 1, &quot;columnNumber&quot; : 32, &quot;fileName&quot; : &quot;dynamicSnippet1&quot;, &quot;message&quot; : &quot;Cannot assign to non-existent property &quot;colro&quot;&quot;}.</db:para>
<db:para>Note that this function returns immediately, and therefore may not work if the <db:code role="parameter">qml</db:code> string loads new components (that is, external QML files that have not yet been loaded). If this is the case, consider using <db:link xlink:href="qml-qtqml-qt.xml#createComponent-method">Qt.createComponent</db:link>() instead.</db:para>
<db:para>See <db:link xlink:href="qtqml-javascript-dynamicobjectcreation.xml">Dynamic QML Object Creation from JavaScript</db:link> for more information on using this function.</db:para>
</db:section>
<db:section xml:id="darker-method">
<db:title>color darker(color <db:emphasis>baseColor</db:emphasis>, real <db:emphasis>factor</db:emphasis>)</db:title>
<db:para>Returns a color darker than <db:code role="parameter">baseColor</db:code> by the <db:code role="parameter">factor</db:code> provided.</db:para>
<db:para>If the factor is greater than 1.0, this function returns a darker color. Setting factor to 3.0 returns a color that has one-third the brightness. If the factor is less than 1.0, the return color is lighter, but we recommend using the Qt.<db:link xlink:href="qml-qtqml-qt.xml#lighter-method">lighter</db:link>() function for this purpose. If the factor is 0 or negative, the return value is unspecified.</db:para>
<db:para>The function converts the current RGB color to HSV, divides the value (V) component by factor and converts the color back to RGB.</db:para>
<db:para>If <db:code role="parameter">factor</db:code> is not supplied, returns a color that is 50% darker than <db:code role="parameter">baseColor</db:code> (factor 2.0).</db:para>
</db:section>
<db:section xml:id="exit-method">
<db:title>exit(int <db:emphasis>retCode</db:emphasis>)</db:title>
<db:para>This function causes the <db:link xlink:href="qqmlengine.xml#exit">QQmlEngine::exit</db:link>(int) signal to be emitted. Within the <db:link xlink:href="">qml tool</db:link>, this causes the launcher application to exit with the specified return code (<db:code role="parameter">retCode</db:code>). To exit from the event loop with a specified return code when this method is called, a C++ application can connect the <db:link xlink:href="qqmlengine.xml#exit">QQmlEngine::exit</db:link>(int) signal to the <db:link xlink:href="qcoreapplication.xml#exit">QCoreApplication::exit</db:link>(int) slot.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-qt.xml#quit-method">quit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font-method">
<db:title>font font(object <db:emphasis>fontSpecifier</db:emphasis>)</db:title>
<db:para>Returns a font with the properties specified in the <db:code role="parameter">fontSpecifier</db:code> object or the nearest matching font. The <db:code role="parameter">fontSpecifier</db:code> object should contain key-value pairs where valid keys are the font type's subproperty names, and the values are valid values for each subproperty. Invalid keys will be ignored.</db:para>
</db:section>
<db:section xml:id="fontFamilies-method">
<db:title>list&lt;string&gt; fontFamilies()</db:title>
<db:para>Returns a list of the font families available to the application.</db:para>
</db:section>
<db:section xml:id="formatDate-method">
<db:title>string formatDate(datetime <db:emphasis>date</db:emphasis>, variant <db:emphasis>format</db:emphasis>, variant <db:emphasis>localeFormatOption</db:emphasis>)</db:title>
<db:para>Returns a string representation of <db:code role="parameter">date</db:code>, optionally formatted using <db:code role="parameter">format</db:code>.</db:para>
<db:para>The <db:code role="parameter">date</db:code> parameter may be a JavaScript Date object, a <db:link xlink:href="qml-date.xml">date</db:link> property, a <db:link xlink:href="qdate.xml">QDate</db:link>, or <db:link xlink:href="qdatetime.xml">QDateTime</db:link> value. The <db:code role="parameter">format</db:code> and <db:code role="parameter">localeFormatOption</db:code> parameter may be any of the possible format values as described for <db:link xlink:href="qml-qtqml-qt.xml#formatDateTime-method">Qt.formatDateTime</db:link>().</db:para>
<db:para>If <db:code role="parameter">format</db:code> is not specified, <db:code role="parameter">date</db:code> is formatted using <db:link xlink:href="qlocale.xml#FormatType-enum">Locale.ShortFormat</db:link> using the default locale.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-locale.xml">Locale</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="formatDateTime-method">
<db:title>string formatDateTime(datetime <db:emphasis>dateTime</db:emphasis>, variant <db:emphasis>format</db:emphasis>, variant <db:emphasis>localeFormatOption</db:emphasis>)</db:title>
<db:para>Returns a string representation of <db:code role="parameter">dateTime</db:code>, optionally formatted using <db:code role="parameter">format</db:code> and <db:code role="parameter">localeFormatOption</db:code>.</db:para>
<db:para>The <db:code role="parameter">dateTime</db:code> parameter may be a JavaScript Date object, a <db:link xlink:href="qml-date.xml">date</db:link> property, a <db:link xlink:href="qdate.xml">QDate</db:link>, <db:link xlink:href="qtime.xml">QTime</db:link>, or <db:link xlink:href="qdatetime.xml">QDateTime</db:link> value.</db:para>
<db:para>If <db:code role="parameter">format</db:code> is not provided, <db:code role="parameter">dateTime</db:code> is formatted using <db:link xlink:href="qlocale.xml#FormatType-enum">Locale.ShortFormat</db:link> using the default locale. Otherwise, <db:code role="parameter">format</db:code> should be either:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>One of the <db:link xlink:href="qt.xml#DateFormat-enum">Qt::DateFormat</db:link> enumeration values, such as Qt.RFC2822Date or Qt.ISODate.</db:para>
</db:listitem>
<db:listitem>
<db:para>A string that specifies the format of the returned string, as detailed below.</db:para>
</db:listitem>
<db:listitem>
<db:para>A locale object.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If <db:code role="parameter">format</db:code> specifies a locale object, dateTime is formatted with <db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>. In this case, <db:code role="parameter">localeFormatOption</db:code> can hold a value of type <db:link xlink:href="qlocale.xml#FormatType-enum">QLocale::FormatType</db:link> to further tune the formatting. If none is provided, <db:link xlink:href="qlocale.xml#FormatType-enum">Locale.ShortFormat</db:link> is used.</db:para>
<db:para>If <db:code role="parameter">format</db:code> specifies a format string, it should use the following expressions to specify the date:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Expression</db:para>
</db:th>
<db:th>
<db:para>Output</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>d</db:para>
</db:td>
<db:td>
<db:para>the day as number without a leading zero (1 to 31)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dd</db:para>
</db:td>
<db:td>
<db:para>the day as number with a leading zero (01 to 31)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ddd</db:para>
</db:td>
<db:td>
<db:para>the abbreviated localized day name (e.g. 'Mon' to 'Sun'). Uses QDate::shortDayName().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dddd</db:para>
</db:td>
<db:td>
<db:para>the long localized day name (e.g. 'Monday' to '<db:link xlink:href="qt.xml#DayOfWeek-enum">Qt::Sunday</db:link>'). Uses QDate::longDayName().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>M</db:para>
</db:td>
<db:td>
<db:para>the month as number without a leading zero (1-12)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MM</db:para>
</db:td>
<db:td>
<db:para>the month as number with a leading zero (01-12)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MMM</db:para>
</db:td>
<db:td>
<db:para>the abbreviated localized month name (e.g. 'Jan' to 'Dec'). Uses QDate::shortMonthName().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MMMM</db:para>
</db:td>
<db:td>
<db:para>the long localized month name (e.g. 'January' to 'December'). Uses QDate::longMonthName().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>yy</db:para>
</db:td>
<db:td>
<db:para>the year as two digit number (00-99)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>yyyy</db:para>
</db:td>
<db:td>
<db:para>the year as four digit number</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>In addition the following expressions can be used to specify the time:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Expression</db:para>
</db:th>
<db:th>
<db:para>Output</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>h</db:para>
</db:td>
<db:td>
<db:para>the hour without a leading zero (0 to 23 or 1 to 12 if AM/PM display)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>hh</db:para>
</db:td>
<db:td>
<db:para>the hour with a leading zero (00 to 23 or 01 to 12 if AM/PM display)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>m</db:para>
</db:td>
<db:td>
<db:para>the minute without a leading zero (0 to 59)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>mm</db:para>
</db:td>
<db:td>
<db:para>the minute with a leading zero (00 to 59)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>s</db:para>
</db:td>
<db:td>
<db:para>the second without a leading zero (0 to 59)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ss</db:para>
</db:td>
<db:td>
<db:para>the second with a leading zero (00 to 59)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>z</db:para>
</db:td>
<db:td>
<db:para>the milliseconds without leading zeroes (0 to 999)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>zzz</db:para>
</db:td>
<db:td>
<db:para>the milliseconds with leading zeroes (000 to 999)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AP</db:para>
</db:td>
<db:td>
<db:para>use AM/PM display. <db:emphasis>AP</db:emphasis> will be replaced by either &quot;AM&quot; or &quot;PM&quot;.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ap</db:para>
</db:td>
<db:td>
<db:para>use am/pm display. <db:emphasis>ap</db:emphasis> will be replaced by either &quot;am&quot; or &quot;pm&quot;.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>t</db:para>
</db:td>
<db:td>
<db:para>include a time-zone indicator.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>All other input characters will be ignored. Any sequence of characters that are enclosed in single quotes will be treated as text and not be used as an expression. Two consecutive single quotes (&quot;''&quot;) are replaced by a single quote in the output.</db:para>
<db:para>For example, if the following date/time value was specified:</db:para>
<db:programlisting language="cpp">// 21 May 2001 14:13:09
var dateTime = new Date(2001, 5, 21, 14, 13, 09)
</db:programlisting>
<db:para>This <db:code role="parameter">dateTime</db:code> value could be passed to Qt.formatDateTime(), <db:link xlink:href="qml-qtqml-qt.xml#formatDate-method">Qt.formatDate</db:link>() or <db:link xlink:href="qml-qtqml-qt.xml#formatTime-method">Qt.formatTime</db:link>() with the <db:code role="parameter">format</db:code> values below to produce the following results:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Format</db:para>
</db:th>
<db:th>
<db:para>Result</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>&quot;dd.MM.yyyy&quot;</db:para>
</db:td>
<db:td>
<db:para>21.05.2001</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>&quot;ddd MMMM d yy&quot;</db:para>
</db:td>
<db:td>
<db:para>Tue May 21 01</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>&quot;hh:mm:ss.zzz&quot;</db:para>
</db:td>
<db:td>
<db:para>14:13:09.042</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>&quot;h:m:s ap&quot;</db:para>
</db:td>
<db:td>
<db:para>2:13:9 pm</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-locale.xml">Locale</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="formatTime-method">
<db:title>string formatTime(datetime <db:emphasis>time</db:emphasis>, variant <db:emphasis>format</db:emphasis>, variant <db:emphasis>localeFormatOption</db:emphasis>)</db:title>
<db:para>Returns a string representation of <db:code role="parameter">time</db:code>, optionally formatted using <db:code role="parameter">format</db:code>, and, if provided, <db:code role="parameter">localeFormatOption</db:code>.</db:para>
<db:para>The <db:code role="parameter">time</db:code> parameter may be a JavaScript Date object, a <db:link xlink:href="qtime.xml">QTime</db:link>, or <db:link xlink:href="qdatetime.xml">QDateTime</db:link> value. The <db:code role="parameter">format</db:code> and <db:code role="parameter">localeFormatOption</db:code> parameter may be any of the possible format values as described for <db:link xlink:href="qml-qtqml-qt.xml#formatDateTime-method">Qt.formatDateTime</db:link>().</db:para>
<db:para>If <db:code role="parameter">format</db:code> is not specified, <db:code role="parameter">time</db:code> is formatted using <db:link xlink:href="qlocale.xml#FormatType-enum">Locale.ShortFormat</db:link> using the default locale.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-locale.xml">Locale</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hsla-method">
<db:title>color hsla(real <db:emphasis>hue</db:emphasis>, real <db:emphasis>saturation</db:emphasis>, real <db:emphasis>lightness</db:emphasis>, real <db:emphasis>alpha</db:emphasis>)</db:title>
<db:para>Returns a color with the specified <db:code role="parameter">hue</db:code>, <db:code role="parameter">saturation</db:code>, <db:code role="parameter">lightness</db:code>, and <db:code role="parameter">alpha</db:code> components. All components should be in the range 0-1 (inclusive).</db:para>
</db:section>
<db:section xml:id="hsva-method">
<db:title>[since 5.5] color hsva(real <db:emphasis>hue</db:emphasis>, real <db:emphasis>saturation</db:emphasis>, real <db:emphasis>value</db:emphasis>, real <db:emphasis>alpha</db:emphasis>)</db:title>
<db:para>Returns a color with the specified <db:code role="parameter">hue</db:code>, <db:code role="parameter">saturation</db:code>, <db:code role="parameter">value</db:code> and <db:code role="parameter">alpha</db:code> components. All components should be in the range 0-1 (inclusive).</db:para>
<db:para>This method was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="isQtObject-method">
<db:title>bool isQtObject(<db:emphasis>object</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">object</db:code> is a valid reference to a Qt or QML object, false otherwise.</db:para>
</db:section>
<db:section xml:id="lighter-method">
<db:title>color lighter(color <db:emphasis>baseColor</db:emphasis>, real <db:emphasis>factor</db:emphasis>)</db:title>
<db:para>Returns a color lighter than <db:code role="parameter">baseColor</db:code> by the <db:code role="parameter">factor</db:code> provided.</db:para>
<db:para>If the factor is greater than 1.0, this functions returns a lighter color. Setting factor to 1.5 returns a color that is 50% brighter. If the factor is less than 1.0, the return color is darker, but we recommend using the Qt.<db:link xlink:href="qml-qtqml-qt.xml#darker-method">darker</db:link>() function for this purpose. If the factor is 0 or negative, the return value is unspecified.</db:para>
<db:para>The function converts the current RGB color to HSV, multiplies the value (V) component by factor and converts the color back to RGB.</db:para>
<db:para>If <db:code role="parameter">factor</db:code> is not supplied, returns a color that is 50% lighter than <db:code role="parameter">baseColor</db:code> (factor 1.5).</db:para>
</db:section>
<db:section xml:id="locale-method">
<db:title>locale(<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Returns a JS object representing the locale with the specified <db:code role="parameter">name</db:code>, which has the format &quot;language[_territory][.codeset][@modifier]&quot; or &quot;C&quot;, where:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>language is a lowercase, two-letter, ISO 639 language code,</db:para>
</db:listitem>
<db:listitem>
<db:para>territory is an uppercase, two-letter, ISO 3166 country code, and</db:para>
</db:listitem>
<db:listitem>
<db:para>codeset and modifier are ignored.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If the string violates the locale format, or language is not a valid ISO 369 code, the &quot;C&quot; locale is used instead. If country is not present, or is not a valid ISO 3166 code, the most appropriate country is chosen for the specified language.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-locale.xml">Locale</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="md5-method">
<db:title>string md5(<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Returns a hex string of the md5 hash of <db:code role="parameter">data</db:code>.</db:para>
</db:section>
<db:section xml:id="matrix4x4-method">
<db:title>matrix4x4 matrix4x4(real <db:emphasis>m11</db:emphasis>, real <db:emphasis>m12</db:emphasis>, real <db:emphasis>m13</db:emphasis>, real <db:emphasis>m14</db:emphasis>, real <db:emphasis>m21</db:emphasis>, real <db:emphasis>m22</db:emphasis>, real <db:emphasis>m23</db:emphasis>, real <db:emphasis>m24</db:emphasis>, real <db:emphasis>m31</db:emphasis>, real <db:emphasis>m32</db:emphasis>, real <db:emphasis>m33</db:emphasis>, real <db:emphasis>m34</db:emphasis>, real <db:emphasis>m41</db:emphasis>, real <db:emphasis>m42</db:emphasis>, real <db:emphasis>m43</db:emphasis>, real <db:emphasis>m44</db:emphasis>)</db:title>
<db:para>Returns a matrix4x4 with the specified values.</db:para>
<db:para>The arguments correspond to their positions in the matrix:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:code role="parameter">m11</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">m12</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">m13</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">m14</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code role="parameter">m21</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">m22</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">m23</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">m24</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code role="parameter">m31</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">m32</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">m33</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">m34</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code role="parameter">m41</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">m42</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">m43</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">m44</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Alternatively, the function may be called with a single argument where that argument is a JavaScript array which contains the sixteen matrix values.</db:para>
<db:para>Finally, the function may be called with no arguments and the resulting matrix will be the identity matrix.</db:para>
</db:section>
<db:section xml:id="openUrlExternally-method">
<db:title>bool openUrlExternally(url <db:emphasis>target</db:emphasis>)</db:title>
<db:para>Attempts to open the specified <db:code role="parameter">target</db:code> url in an external application, based on the user's desktop preferences. Returns true if it succeeds, false otherwise.</db:para>
<db:warning>
<db:para>A return value of true indicates that the application has successfully requested the operating system to open the URL in an external application. The external application may still fail to launch or fail to open the requested URL. This result will not be reported back to the application.</db:para>
</db:warning>
</db:section>
<db:section xml:id="point-method">
<db:title>point point(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Returns a point with the specified <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> coordinates.</db:para>
</db:section>
<db:section xml:id="qsTr-method">
<db:title>string qsTr(string <db:emphasis>sourceText</db:emphasis>, string <db:emphasis>disambiguation</db:emphasis>, int <db:emphasis>n</db:emphasis>)</db:title>
<db:para>Returns a translated version of <db:code role="parameter">sourceText</db:code>, optionally based on a <db:code role="parameter">disambiguation</db:code> string and value of <db:code role="parameter">n</db:code> for strings containing plurals; otherwise returns <db:code role="parameter">sourceText</db:code> itself if no appropriate translated string is available.</db:para>
<db:para>If the same <db:code role="parameter">sourceText</db:code> is used in different roles within the same translation context, an additional identifying string may be passed in for <db:code role="parameter">disambiguation</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="qml">Text { text: qsTr(&quot;hello&quot;) }
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Internationalization and Localization with Qt Quick</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qsTrId-method">
<db:title>string qsTrId(string <db:emphasis>id</db:emphasis>, int <db:emphasis>n</db:emphasis>)</db:title>
<db:para>Returns a translated string identified by <db:code role="parameter">id</db:code>. If no matching string is found, the id itself is returned. This should not happen under normal conditions.</db:para>
<db:para>If <db:code role="parameter">n</db:code> &gt;= 0, all occurrences of %n in the resulting string are replaced with a decimal representation of <db:code role="parameter">n</db:code>. In addition, depending on <db:code role="parameter">n</db:code>'s value, the translation text may vary.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="qml">Text { text: qsTrId(&quot;hello_id&quot;) }
</db:programlisting>
<db:para>It is possible to supply a source string template like:</db:para>
<db:para><db:code>//% &lt;string&gt;</db:code></db:para>
<db:para>or</db:para>
<db:para><db:code>\begincomment% &lt;string&gt; \endcomment</db:code></db:para>
<db:para>Example:</db:para>
<db:programlisting language="qml">Text {
    //% &quot;hello&quot;
    text: qsTrId(&quot;hello_id&quot;)
}
</db:programlisting>
<db:para>Creating binary translation (QM) files suitable for use with this function requires passing the -idbased option to the lrelease tool.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#QT_TRID_NOOP">QT_TRID_NOOP</db:link>()</db:member>
<db:member><db:link xlink:href="">Internationalization and Localization with Qt Quick</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qsTrIdNoOp-method">
<db:title>string qsTrIdNoOp(string <db:emphasis>id</db:emphasis>)</db:title>
<db:para>Marks <db:code role="parameter">id</db:code> for dynamic translation.</db:para>
<db:para>Returns the <db:code role="parameter">id</db:code>.</db:para>
<db:para><db:link xlink:href="qtglobal.xml#QT_TRID_NOOP">QT_TRID_NOOP</db:link> is used in conjunction with the dynamic translation function <db:link xlink:href="qml-qtqml-qt.xml#qsTrId-method">qsTrId</db:link>(). It identifies a string as requiring translation (so it can be identified by lupdate), but leaves the actual translation to <db:link xlink:href="qml-qtqml-qt.xml#qsTrId-method">qsTrId</db:link>().</db:para>
<db:para>Example:</db:para>
<db:programlisting language="qml">Item {
    property string greetingId: QT_TRID_NOOP(&quot;hello_id&quot;)

    Text { text: qsTrId(greetingId) }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-qt.xml#qsTrId-method">qsTrId</db:link>()</db:member>
<db:member><db:link xlink:href="">Internationalization and Localization with Qt Quick</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qsTrNoOp-method">
<db:title>string qsTrNoOp(string <db:emphasis>sourceText</db:emphasis>, string <db:emphasis>disambiguation</db:emphasis>)</db:title>
<db:para>Marks <db:code role="parameter">sourceText</db:code> for dynamic translation; i.e, the stored <db:code role="parameter">sourceText</db:code> will not be altered.</db:para>
<db:para>If the same <db:code role="parameter">sourceText</db:code> is used in different roles within the same translation context, an additional identifying string may be passed in for <db:code role="parameter">disambiguation</db:code>.</db:para>
<db:para>Returns the <db:code role="parameter">sourceText</db:code>.</db:para>
<db:para><db:link xlink:href="qtglobal.xml#QT_TR_NOOP">QT_TR_NOOP</db:link> is used in conjunction with the dynamic translation functions <db:link xlink:href="qml-qtqml-qt.xml#qsTr-method">qsTr</db:link>() and <db:link xlink:href="qml-qtqml-qt.xml#qsTranslate-method">qsTranslate</db:link>(). It identifies a string as requiring translation (so it can be identified by lupdate), but leaves the actual translation to the dynamic functions.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="qml">Item {
    property string greeting: QT_TR_NOOP(&quot;hello&quot;)

    Text { text: qsTr(greeting) }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Internationalization and Localization with Qt Quick</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qsTranslate-method">
<db:title>string qsTranslate(string <db:emphasis>context</db:emphasis>, string <db:emphasis>sourceText</db:emphasis>, string <db:emphasis>disambiguation</db:emphasis>, int <db:emphasis>n</db:emphasis>)</db:title>
<db:para>Returns a translated version of <db:code role="parameter">sourceText</db:code> within the given <db:code role="parameter">context</db:code>, optionally based on a <db:code role="parameter">disambiguation</db:code> string and value of <db:code role="parameter">n</db:code> for strings containing plurals; otherwise returns <db:code role="parameter">sourceText</db:code> itself if no appropriate translated string is available.</db:para>
<db:para>If the same <db:code role="parameter">sourceText</db:code> is used in different roles within the same translation <db:code role="parameter">context</db:code>, an additional identifying string may be passed in for <db:code role="parameter">disambiguation</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="qml">Text { text: qsTranslate(&quot;CustomContext&quot;, &quot;hello&quot;) }
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Internationalization and Localization with Qt Quick</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qsTranslateNoOp-method">
<db:title>string qsTranslateNoOp(string <db:emphasis>context</db:emphasis>, string <db:emphasis>sourceText</db:emphasis>, string <db:emphasis>disambiguation</db:emphasis>)</db:title>
<db:para>Marks <db:code role="parameter">sourceText</db:code> for dynamic translation in the given <db:code role="parameter">context</db:code>; i.e, the stored <db:code role="parameter">sourceText</db:code> will not be altered.</db:para>
<db:para>If the same <db:code role="parameter">sourceText</db:code> is used in different roles within the same translation context, an additional identifying string may be passed in for <db:code role="parameter">disambiguation</db:code>.</db:para>
<db:para>Returns the <db:code role="parameter">sourceText</db:code>.</db:para>
<db:para><db:link xlink:href="qtglobal.xml#QT_TRANSLATE_NOOP">QT_TRANSLATE_NOOP</db:link> is used in conjunction with the dynamic translation functions <db:link xlink:href="qml-qtqml-qt.xml#qsTr-method">qsTr</db:link>() and <db:link xlink:href="qml-qtqml-qt.xml#qsTranslate-method">qsTranslate</db:link>(). It identifies a string as requiring translation (so it can be identified by lupdate), but leaves the actual translation to the dynamic functions.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="qml">Item {
    property string greeting: QT_TRANSLATE_NOOP(&quot;CustomContext&quot;, &quot;hello&quot;)

    Text { text: qsTranslate(&quot;CustomContext&quot;, greeting) }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Internationalization and Localization with Qt Quick</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="quaternion-method">
<db:title>quaternion quaternion(real <db:emphasis>scalar</db:emphasis>, real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>, real <db:emphasis>z</db:emphasis>)</db:title>
<db:para>Returns a quaternion with the specified <db:code role="parameter">scalar</db:code>, <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, and <db:code role="parameter">z</db:code> values.</db:para>
</db:section>
<db:section xml:id="quit-method">
<db:title>quit()</db:title>
<db:para>This function causes the <db:link xlink:href="qqmlengine.xml#quit">QQmlEngine::quit</db:link>() signal to be emitted. Within the <db:link xlink:href="">qml tool</db:link>, this causes the launcher application to exit; to quit a C++ application when this method is called, connect the <db:link xlink:href="qqmlengine.xml#quit">QQmlEngine::quit</db:link>() signal to the <db:link xlink:href="qcoreapplication.xml#quit">QCoreApplication::quit</db:link>() slot.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-qt.xml#exit-method">exit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rect-method">
<db:title>rect rect(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>, real <db:emphasis>width</db:emphasis>, real <db:emphasis>height</db:emphasis>)</db:title>
<db:para>Returns a rect with the top-left corner at <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code> and the specified <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>.</db:para>
</db:section>
<db:section xml:id="resolvedUrl-method">
<db:title>url resolvedUrl(url <db:emphasis>url</db:emphasis>)</db:title>
<db:para>Returns <db:code role="parameter">url</db:code> resolved relative to the URL of the caller.</db:para>
<db:para>If there is no caller or the caller is not associated with a QML context, returns <db:code role="parameter">url</db:code> resolved relative to the QML engine's base URL. If the QML engine has no base URL, just returns <db:code role="parameter">url</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-qt.xml#url-method">url</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resolvedUrl-method-1">
<db:title>url resolvedUrl(url <db:emphasis>url</db:emphasis>, object <db:emphasis>context</db:emphasis>)</db:title>
<db:para>Returns <db:code role="parameter">url</db:code> resolved relative to the URL of the QML context of <db:code role="parameter">context</db:code>. If <db:code role="parameter">context</db:code> is not associated with a QML context, returns <db:code role="parameter">url</db:code> resolved relative to the QML engine's base URL. If the QML engine has no base URL, just returns <db:code role="parameter">url</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-qt.xml#url-method">url</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rgba-method">
<db:title>color rgba(real <db:emphasis>red</db:emphasis>, real <db:emphasis>green</db:emphasis>, real <db:emphasis>blue</db:emphasis>, real <db:emphasis>alpha</db:emphasis>)</db:title>
<db:para>Returns a color with the specified <db:code role="parameter">red</db:code>, <db:code role="parameter">green</db:code>, <db:code role="parameter">blue</db:code>, and <db:code role="parameter">alpha</db:code> components. All components should be in the range 0-1 (inclusive).</db:para>
</db:section>
<db:section xml:id="size-method">
<db:title>size size(real <db:emphasis>width</db:emphasis>, real <db:emphasis>height</db:emphasis>)</db:title>
<db:para>Returns a size with the specified <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>.</db:para>
</db:section>
<db:section xml:id="tint-method">
<db:title>color tint(color <db:emphasis>baseColor</db:emphasis>, color <db:emphasis>tintColor</db:emphasis>)</db:title>
<db:para>This function allows tinting one color (<db:code role="parameter">baseColor</db:code>) with another (<db:code role="parameter">tintColor</db:code>).</db:para>
<db:para>The tint color should usually be mostly transparent, or you will not be able to see the underlying color. The below example provides a slight red tint by having the tint color be pure red which is only 1/16th opaque.</db:para>
<db:programlisting language="qml">Item {
    Rectangle {
        x: 0; width: 80; height: 80
        color: &quot;lightsteelblue&quot;
    }
    Rectangle {
        x: 100; width: 80; height: 80
        color: Qt.tint(&quot;lightsteelblue&quot;, &quot;#10FF0000&quot;)
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-rect_tint.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Tint is most useful when a subtle change is intended to be conveyed due to some event; you can then use tinting to more effectively tune the visible color.</db:para>
</db:section>
<db:section xml:id="url-method">
<db:title>url url(url <db:emphasis>url</db:emphasis>)</db:title>
<db:para>Returns <db:code role="parameter">url</db:code> verbatim. This can be used to force a type coercion to url. In contrast to Qt.<db:link xlink:href="qml-qtqml-qt.xml#resolvedUrl-method">resolvedUrl</db:link>() this retains any relative URLs. As strings are implicitly converted to urls, the function can be called with a string as argument, and will then return a url.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-qt.xml#resolvedUrl-method">resolvedUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="vector2d-method">
<db:title>vector2d vector2d(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Returns a vector2d with the specified <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> values.</db:para>
</db:section>
<db:section xml:id="vector3d-method">
<db:title>vector3d vector3d(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>, real <db:emphasis>z</db:emphasis>)</db:title>
<db:para>Returns a vector3d with the specified <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, and <db:code role="parameter">z</db:code> values.</db:para>
</db:section>
<db:section xml:id="vector4d-method">
<db:title>vector4d vector4d(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>, real <db:emphasis>z</db:emphasis>, real <db:emphasis>w</db:emphasis>)</db:title>
<db:para>Returns a vector4d with the specified <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>, and <db:code role="parameter">w</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for Qt</db:title>
<db:para><db:emphasis role="bold">The following members of QML type <db:link xlink:href="qml-qtqml-qt.xml">Qt</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-method-documentation">
<db:title>Obsolete Method Documentation</db:title>
<db:section xml:id="include-method">
<db:title>object include(string <db:emphasis>url</db:emphasis>, jsobject <db:emphasis>callback</db:emphasis>)</db:title>
<db:para>This method is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This method should not be used. Use ECMAScript modules, and the native JavaScript import and export statements instead.</db:para>
<db:para>Includes another JavaScript file. This method can only be used from within JavaScript files, and not regular QML files.</db:para>
<db:para>This imports all functions from <db:code role="parameter">url</db:code> into the current script's namespace.</db:para>
<db:para>Qt.include() returns an object that describes the status of the operation. The object has a single property, status, that is set to one of the following values:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Symbol</db:para>
</db:th>
<db:th>
<db:para>Value</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>result.OK</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>The include completed successfully.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>result.LOADING</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>Data is being loaded from the network.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>result.NETWORK_ERROR</db:para>
</db:td>
<db:td>
<db:para>2</db:para>
</db:td>
<db:td>
<db:para>A network error occurred while fetching the url.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>result.EXCEPTION</db:para>
</db:td>
<db:td>
<db:para>3</db:para>
</db:td>
<db:td>
<db:para>A JavaScript exception occurred while executing the included code. An additional exception property will be set in this case.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The status property will be updated as the operation progresses.</db:para>
<db:para>If provided, <db:code role="parameter">callback</db:code> is invoked when the operation completes. The callback is passed the same object as is returned from the Qt.include() call.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
