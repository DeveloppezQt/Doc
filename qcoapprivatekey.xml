<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCoapPrivateKey Class</db:title>
<db:productname>QtCoap</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt CoAP Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcoapprivatekey.xml">QCoapPrivateKey</db:link> class provides an interface for managing CoAP security keys.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCoapPrivateKey</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += coap</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qcoapprivatekey.xml">QCoapPrivateKey</db:link> packages a private key used in negotiating CoAP connections securely. It holds the information required for authentication using <db:code>pre-shared</db:code> keys and X.509 certificates.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCoapPrivateKey">
<db:title>QCoapPrivateKey::QCoapPrivateKey()</db:title>
<db:constructorsynopsis>
<db:methodname>QCoapPrivateKey</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapPrivateKey()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty instance of <db:link xlink:href="qcoapprivatekey.xml">QCoapPrivateKey</db:link>.</db:para>
</db:section>
<db:section xml:id="QCoapPrivateKey-1">
<db:title>QCoapPrivateKey::QCoapPrivateKey(const QByteArray &amp;<db:emphasis>key</db:emphasis>, QSsl::KeyAlgorithm <db:emphasis>algorithm</db:emphasis>, QSsl::EncodingFormat <db:emphasis>format</db:emphasis> = QSsl::Pem, const QByteArray &amp;<db:emphasis>passPhrase</db:emphasis> = QByteArray())</db:title>
<db:constructorsynopsis>
<db:methodname>QCoapPrivateKey</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSsl::KeyAlgorithm</db:type>
<db:parameter>algorithm</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSsl::EncodingFormat</db:type>
<db:parameter>format</db:parameter>
<db:initializer>QSsl::Pem</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>passPhrase</db:parameter>
<db:initializer>QByteArray()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapPrivateKey(const QByteArray &amp;key, QSsl::KeyAlgorithm algorithm, QSsl::EncodingFormat format, const QByteArray &amp;passPhrase)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qcoapprivatekey.xml">QCoapPrivateKey</db:link> from the byte array <db:code role="parameter">key</db:code> using the specified <db:code role="parameter">algorithm</db:code> and encoding <db:code role="parameter">format</db:code>.</db:para>
<db:para>If the key is encrypted then <db:code role="parameter">passPhrase</db:code> is required to decrypt it.</db:para>
</db:section>
<db:section xml:id="QCoapPrivateKey-2">
<db:title>QCoapPrivateKey::QCoapPrivateKey(const Qt::HANDLE &amp;<db:emphasis>handle</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QCoapPrivateKey</db:methodname>
<db:methodparam>
<db:type>const Qt::HANDLE &amp;</db:type>
<db:parameter>handle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapPrivateKey(const Qt::HANDLE &amp;handle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qcoapprivatekey.xml">QCoapPrivateKey</db:link> from a native key <db:code role="parameter">handle</db:code>.</db:para>
</db:section>
<db:section xml:id="QCoapPrivateKey-3">
<db:title>QCoapPrivateKey::QCoapPrivateKey(const QCoapPrivateKey &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QCoapPrivateKey</db:methodname>
<db:methodparam>
<db:type>const QCoapPrivateKey &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapPrivateKey(const QCoapPrivateKey &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Copies the contents of <db:code role="parameter">other</db:code> into this key, making the two keys identical.</db:para>
</db:section>
<db:section xml:id="QCoapPrivateKey-4">
<db:title>QCoapPrivateKey::QCoapPrivateKey(QCoapPrivateKey &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QCoapPrivateKey</db:methodname>
<db:methodparam>
<db:type>QCoapPrivateKey &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapPrivateKey(QCoapPrivateKey &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a <db:link xlink:href="qcoapprivatekey.xml">QCoapPrivateKey</db:link>, making it point to the same object as <db:code role="parameter">other</db:code> was pointing to.</db:para>
</db:section>
<db:section xml:id="dtor.QCoapPrivateKey">
<db:title>QCoapPrivateKey::~QCoapPrivateKey()</db:title>
<db:destructorsynopsis>
<db:methodname>~QCoapPrivateKey</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCoapPrivateKey()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Releases any resources held by <db:link xlink:href="qcoapprivatekey.xml">QCoapPrivateKey</db:link>.</db:para>
</db:section>
<db:section xml:id="algorithm">
<db:title>QSsl::KeyAlgorithm QCoapPrivateKey::algorithm() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSsl::KeyAlgorithm</db:type>
<db:methodname>algorithm</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSsl::KeyAlgorithm algorithm() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the key algorithm.</db:para>
</db:section>
<db:section xml:id="encodingFormat">
<db:title>QSsl::EncodingFormat QCoapPrivateKey::encodingFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSsl::EncodingFormat</db:type>
<db:methodname>encodingFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSsl::EncodingFormat encodingFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the encoding format of the key.</db:para>
</db:section>
<db:section xml:id="handle">
<db:title>Qt::HANDLE QCoapPrivateKey::handle() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::HANDLE</db:type>
<db:methodname>handle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::HANDLE handle() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the native key handle.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QCoapPrivateKey::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the private key is null, returns <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="key">
<db:title>QByteArray QCoapPrivateKey::key() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>key</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray key() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the encoded private key.</db:para>
</db:section>
<db:section xml:id="passPhrase">
<db:title>QByteArray QCoapPrivateKey::passPhrase() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>passPhrase</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray passPhrase() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the passphrase for the key.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>void QCoapPrivateKey::swap(QCoapPrivateKey &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QCoapPrivateKey &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QCoapPrivateKey &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this private key with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QCoapPrivateKey &amp;QCoapPrivateKey::operator=(const QCoapPrivateKey &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCoapPrivateKey &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QCoapPrivateKey &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapPrivateKey &amp; operator=(const QCoapPrivateKey &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copies the contents of <db:code role="parameter">other</db:code> into this key, making the two keys identical.</db:para>
<db:para>Returns a reference to this <db:link xlink:href="qcoapprivatekey.xml">QCoapPrivateKey</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
