<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - View3D Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates the use of <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> to show a scene from multiple cameras.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/view3d-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example demonstrates using four separate <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>s with different cameras in an application.</db:para>
<db:section xml:id="defining-the-cameras">
<db:title>Defining the Cameras</db:title>
<db:para>First we define the <db:link xlink:href="qml-qtquick3d-camera.xml">cameras</db:link>. We're going to define several different cameras, even though we will only add 4 views. We're doing this because we want to be able to switch the camera in one of the views.</db:para>
<db:para>The cameras have to be defined inside the root <db:link xlink:href="qml-qtquick3d-node.xml">Node</db:link>. This is how the cameras are defined:</db:para>
<db:programlisting language="qml">Node {
    id: standAloneScene
    ...
// The predefined cameras. They have to be part of the scene, i.e. inside the root node.
// Animated perspective camera
Node {
    PerspectiveCamera {
        id: cameraPerspectiveOne
        z: 600
    }

    PropertyAnimation on eulerRotation.x {
        loops: Animation.Infinite
        duration: 5000
        to: -360
        from: 0
    }
}

// Stationary perspective camera
PerspectiveCamera {
    id: cameraPerspectiveTwo
    z: 600
}
    ...
// Stationary orthographic camera viewing from left
OrthographicCamera {
    id: cameraOrthographicLeft
    x: -600
    eulerRotation.y: -90
}
}
</db:programlisting>
</db:section>
<db:section xml:id="adding-the-views">
<db:title>Adding the Views</db:title>
<db:para>After defining the cameras we can add the <db:link xlink:href="qml-qtquick3d-view3d.xml">views</db:link>. We divide the screen to four parts, and add views one-by-one like this:</db:para>
<db:programlisting language="qml">// The views
Rectangle {
    id: topLeft
    anchors.top: parent.top
    anchors.left: parent.left
    width: parent.width * 0.5
    height: parent.height * 0.5
    color: &quot;#848895&quot;
    border.color: &quot;black&quot;

    View3D {
        id: topLeftView
        anchors.fill: parent
        importScene: standAloneScene
        camera: cameraOrthographicFront
    }

    Label {
        text: &quot;Front&quot;
        anchors.top: parent.top
        anchors.left: parent.left
        anchors.margins: 10
        color: &quot;#222840&quot;
        font.pointSize: 14
    }
}
    ...
</db:programlisting>
<db:para>The top-right view has three buttons in it. The buttons can be used to switch the camera used in that view on the fly. The switching is done just by settings the camera property:</db:para>
<db:programlisting language="qml">RoundButton {
    text: &quot;Camera 1&quot;
    highlighted: topRightView.camera == cameraPerspectiveOne
    onClicked: {
        topRightView.camera = cameraPerspectiveOne
    }
}
    ...
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="view3d/CMakeLists.txt">view3d/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="view3d/main.cpp">view3d/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="view3d/main.qml">view3d/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="view3d/qml.qrc">view3d/qml.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="view3d/view3d.pro">view3d/view3d.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
