<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Camera Example</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Camera Example shows how to use the API to capture a still image or video.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;imagesettings.h&quot;
#include &quot;ui_imagesettings.h&quot;

#include &amp;lt;QComboBox&amp;gt;
#include &amp;lt;QDebug&amp;gt;
#include &amp;lt;QCameraImageCapture&amp;gt;
#include &amp;lt;QMediaService&amp;gt;

ImageSettings::ImageSettings(QCameraImageCapture *imageCapture, QWidget *parent) :
    QDialog(parent),
    ui(new Ui::ImageSettingsUi),
    imagecapture(imageCapture)
{
    ui-&amp;gt;setupUi(this);

    //image codecs
    ui-&amp;gt;imageCodecBox-&amp;gt;addItem(tr(&quot;Default image format&quot;), QVariant(QString()));
    const QStringList supportedImageCodecs = imagecapture-&amp;gt;supportedImageCodecs();
    for (const QString &amp;amp;codecName : supportedImageCodecs) {
        QString description = imagecapture-&amp;gt;imageCodecDescription(codecName);
        ui-&amp;gt;imageCodecBox-&amp;gt;addItem(codecName + &quot;: &quot; + description, QVariant(codecName));
    }

    ui-&amp;gt;imageQualitySlider-&amp;gt;setRange(0, int(QMultimedia::VeryHighQuality));

    ui-&amp;gt;imageResolutionBox-&amp;gt;addItem(tr(&quot;Default Resolution&quot;));
    const QList&amp;lt;QSize&amp;gt; supportedResolutions = imagecapture-&amp;gt;supportedResolutions();
    for (const QSize &amp;amp;resolution : supportedResolutions) {
        ui-&amp;gt;imageResolutionBox-&amp;gt;addItem(QString(&quot;%1x%2&quot;).arg(resolution.width()).arg(resolution.height()),
                                        QVariant(resolution));
    }
}

ImageSettings::~ImageSettings()
{
    delete ui;
}

void ImageSettings::changeEvent(QEvent *e)
{
    QDialog::changeEvent(e);
    switch (e-&amp;gt;type()) {
    case QEvent::LanguageChange:
        ui-&amp;gt;retranslateUi(this);
        break;
    default:
        break;
    }
}

QImageEncoderSettings ImageSettings::imageSettings() const
{
    QImageEncoderSettings settings = imagecapture-&amp;gt;encodingSettings();
    settings.setCodec(boxValue(ui-&amp;gt;imageCodecBox).toString());
    settings.setQuality(QMultimedia::EncodingQuality(ui-&amp;gt;imageQualitySlider-&amp;gt;value()));
    settings.setResolution(boxValue(ui-&amp;gt;imageResolutionBox).toSize());

    return settings;
}

void ImageSettings::setImageSettings(const QImageEncoderSettings &amp;amp;imageSettings)
{
    selectComboBoxItem(ui-&amp;gt;imageCodecBox, QVariant(imageSettings.codec()));
    selectComboBoxItem(ui-&amp;gt;imageResolutionBox, QVariant(imageSettings.resolution()));
    ui-&amp;gt;imageQualitySlider-&amp;gt;setValue(imageSettings.quality());
}

QVariant ImageSettings::boxValue(const QComboBox *box) const
{
    int idx = box-&amp;gt;currentIndex();
    if (idx == -1)
        return QVariant();

    return box-&amp;gt;itemData(idx);
}

void ImageSettings::selectComboBoxItem(QComboBox *box, const QVariant &amp;amp;value)
{
    for (int i = 0; i &amp;lt; box-&amp;gt;count(); ++i) {
        if (box-&amp;gt;itemData(i) == value) {
            box-&amp;gt;setCurrentIndex(i);
            break;
        }
    }
}

</db:programlisting>
</db:article>
