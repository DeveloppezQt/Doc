<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>KeyEvent QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides information about a key event.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>KeyEvent is part of <db:simplelist><db:member>qtquick-input-events</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>For example, the following changes the Item's state property when the Enter key is pressed:</db:para>
<db:programlisting language="qml">Item {
    focus: true
    Keys.onPressed: (event)=&amp;gt; { if (event.key == Qt.Key_Enter) state = 'ShowDetails'; }
}
    </db:programlisting>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="accepted-prop">
<db:title>accepted : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>accepted</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Setting <db:code role="parameter">accepted</db:code> to true prevents the key event from being propagated to the item's parent.</db:para>
<db:para>Generally, if the item acts on the key event then it should be accepted so that ancestor items do not also respond to the same event.</db:para>
</db:section>
<db:section xml:id="count-prop">
<db:title>count : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>count</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of keys involved in this event. If <db:link xlink:href="qml-qtquick-keyevent.xml#text-prop">KeyEvent::text</db:link> is not empty, this is simply the length of the string.</db:para>
</db:section>
<db:section xml:id="isAutoRepeat-prop">
<db:title>isAutoRepeat : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>isAutoRepeat</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether this event comes from an auto-repeating key.</db:para>
</db:section>
<db:section xml:id="key-prop">
<db:title>key : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>key</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the code of the key that was pressed or released.</db:para>
<db:para>See <db:link xlink:href="qt.xml#Key-enum">Qt.Key</db:link> for the list of keyboard codes. These codes are independent of the underlying window system. Note that this function does not distinguish between capital and non-capital letters; use the <db:link xlink:href="qml-qtquick-keyevent.xml#text-prop">text</db:link> property for this purpose.</db:para>
<db:para>A value of either 0 or <db:link xlink:href="qt.xml#Key-enum">Qt.Key_Unknown</db:link> means that the event is not the result of a known key; for example, it may be the result of a compose sequence, a keyboard macro, or due to key event compression.</db:para>
</db:section>
<db:section xml:id="modifiers-prop">
<db:title>modifiers : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>modifiers</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the keyboard modifier flags that existed immediately before the event occurred.</db:para>
<db:para>It contains a bitwise combination of numeric values (the same as in <db:link xlink:href="qt.xml#KeyboardModifier-enum">Qt::KeyboardModifier</db:link>):</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Qt.NoModifier</db:para>
</db:td>
<db:td>
<db:para>No modifier key is pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.ShiftModifier</db:para>
</db:td>
<db:td>
<db:para>}A Shift key on the keyboard is pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.ControlModifier</db:para>
</db:td>
<db:td>
<db:para>A Ctrl key on the keyboard is pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.AltModifier</db:para>
</db:td>
<db:td>
<db:para>An Alt key on the keyboard is pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.MetaModifier</db:para>
</db:td>
<db:td>
<db:para>A Meta key on the keyboard is pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.KeypadModifier</db:para>
</db:td>
<db:td>
<db:para>A keypad button is pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.GroupSwitchModifier</db:para>
</db:td>
<db:td>
<db:para>X11 only. A Mode_switch key on the keyboard is pressed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For example, to react to a Shift key + Enter key combination:</db:para>
<db:programlisting language="qml">Item {
    focus: true
    Keys.onPressed: (event)=&amp;gt; {
        if ((event.key == Qt.Key_Enter) &amp;amp;&amp;amp; (event.modifiers &amp;amp; Qt.ShiftModifier))
            doSomething();
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="nativeScanCode-prop">
<db:title>nativeScanCode : quint32</db:title>
<db:fieldsynopsis>
<db:type>quint32</db:type>
<db:varname>nativeScanCode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property contains the native scan code of the key that was pressed. It is passed through from <db:link xlink:href="qkeyevent.xml">QKeyEvent</db:link> unchanged.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qkeyevent.xml#nativeScanCode">QKeyEvent::nativeScanCode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text-prop">
<db:title>text : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>text</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the Unicode text that the key generated. The text returned can be an empty string in cases where modifier keys, such as Shift, Control, Alt, and Meta, are being pressed or released. In such cases <db:code>key</db:code> will contain a valid value</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="matches-method">
<db:title>bool matches(StandardKey <db:emphasis>matchKey</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if the key event matches the given standard <db:code role="parameter">matchKey</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:programlisting language="qml">Item {
    focus: true
    Keys.onPressed: (event)=&amp;gt; {
        if (event.matches(StandardKey.Undo))
            myModel.undo();
        else if (event.matches(StandardKey.Redo))
            myModel.redo();
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qkeysequence.xml#StandardKey-enum">QKeySequence::StandardKey</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
