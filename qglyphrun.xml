<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGlyphRun Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> class provides direct access to the internal glyphs in a font.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGlyphRun</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGlyphRun is part of <db:simplelist><db:member>text</db:member><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>When Qt displays a string of text encoded in Unicode, it will first convert the Unicode points into a list of glyph indexes and a list of positions based on one or more fonts. The Unicode representation of the text and the <db:link xlink:href="qfont.xml">QFont</db:link> object will in this case serve as a convenient abstraction that hides the details of what actually takes place when displaying the text on-screen. For instance, by the time the text actually reaches the screen, it may be represented by a set of fonts in addition to the one specified by the user, e.g. in case the originally selected font did not support all the writing systems contained in the text.</db:para>
<db:para>Under certain circumstances, it can be useful as an application developer to have more low-level control over which glyphs in a specific font are drawn to the screen. This could for instance be the case in applications that use an external font engine and text shaper together with Qt. <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> provides an interface to the raw data needed to get text on the screen. It contains a list of glyph indexes, a position for each glyph and a font.</db:para>
<db:para>It is the user's responsibility to ensure that the selected font actually contains the provided glyph indexes.</db:para>
<db:para><db:link xlink:href="qtextlayout.xml#glyphRuns">QTextLayout::glyphRuns</db:link>() or <db:link xlink:href="qtextfragment.xml#glyphRuns">QTextFragment::glyphRuns</db:link>() can be used to convert unicode encoded text into a list of <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> objects, and <db:link xlink:href="qpainter.xml#drawGlyphRun">QPainter::drawGlyphRun</db:link>() can be used to draw the glyphs.</db:para>
<db:note>
<db:para>Please note that <db:link xlink:href="qrawfont.xml">QRawFont</db:link> is considered local to the thread in which it is constructed. This in turn means that a new <db:link xlink:href="qrawfont.xml">QRawFont</db:link> will have to be created and set on the <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> if it is moved to a different thread. If the <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> contains a reference to a <db:link xlink:href="qrawfont.xml">QRawFont</db:link> from a different thread than the current, it will not be possible to draw the glyphs using a <db:link xlink:href="qpainter.xml">QPainter</db:link>, as the <db:link xlink:href="qrawfont.xml">QRawFont</db:link> is considered invalid and inaccessible in this case.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="GlyphRunFlag-enum">
<db:title>[since 5.0] enum QGlyphRun::GlyphRunFlag</db:title>
<db:bridgehead renderas="sect2">flags QGlyphRun::GlyphRunFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>GlyphRunFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>Overline</db:enumidentifier>
<db:enumvalue>0x01</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Underline</db:enumidentifier>
<db:enumvalue>0x02</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StrikeOut</db:enumidentifier>
<db:enumvalue>0x04</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RightToLeft</db:enumidentifier>
<db:enumvalue>0x08</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SplitLigature</db:enumidentifier>
<db:enumvalue>0x10</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QGlyphRun::GlyphRunFlags</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum describes flags that alter the way the run of glyphs might be presented or behave in a visual layout. The layout which generates the glyph runs can set these flags based on relevant internal data, to retain information needed to present the text as intended by the user of the layout.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link></db:emphasis>::Overline</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Indicates that the glyphs should be visualized together with an overline.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link></db:emphasis>::Underline</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Indicates that the glyphs should be visualized together with an underline.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link></db:emphasis>::StrikeOut</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>Indicates that the glyphs should be struck out visually.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link></db:emphasis>::RightToLeft</db:code></db:para>
</db:td>
<db:td><db:code>0x08</db:code></db:td>
<db:td>
<db:para>Indicates that the glyphs are ordered right to left. This can affect the positioning of other screen elements that are relative to the glyph run, such as an inline text object.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link></db:emphasis>::SplitLigature</db:code></db:para>
</db:td>
<db:td><db:code>0x10</db:code></db:td>
<db:td>
<db:para>Indicates that the glyph run splits a ligature glyph. This means that a ligature glyph is included in the run, but the characters represented by it corresponds only to part of that ligature. The glyph run's <db:link xlink:href="qglyphrun.xml#boundingRect">boundingRect</db:link>() function can in this case be used to retrieve the area covered by glyphs that correspond to the characters represented by the glyph run. When visualizing the glyphs, care needs to be taken to clip to this bounding rect to ensure that only the corresponding part of the ligature is painted. In particular, this can be the case when retrieving a glyph run from a <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link> for a specific character range, e.g. when retrieving the selected area of a <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.0.</db:para>
<db:para>The <db:code>GlyphRunFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;GlyphRunFlag&gt;. </db:code>It stores an OR combination of <db:code>GlyphRunFlag</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGlyphRun">
<db:title>QGlyphRun::QGlyphRun()</db:title>
<db:constructorsynopsis>
<db:methodname>QGlyphRun</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGlyphRun()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> object.</db:para>
</db:section>
<db:section xml:id="QGlyphRun-1">
<db:title>QGlyphRun::QGlyphRun(const QGlyphRun &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGlyphRun</db:methodname>
<db:methodparam>
<db:type>const QGlyphRun &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGlyphRun(const QGlyphRun &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> object which is a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGlyphRun">
<db:title>QGlyphRun::~QGlyphRun()</db:title>
<db:destructorsynopsis>
<db:methodname>~QGlyphRun</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGlyphRun()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link>.</db:para>
</db:section>
<db:section xml:id="boundingRect">
<db:title>[since 5.0] QRectF QGlyphRun::boundingRect() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>boundingRect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF boundingRect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the smallest rectangle that contains all glyphs in this <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link>. If a bounding rect has been set using <db:link xlink:href="qglyphrun.xml#setBoundingRect">setBoundingRect</db:link>(), then this will be returned. Otherwise the bounding rect will be calculated based on the font metrics of the glyphs in the glyph run.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglyphrun.xml#setBoundingRect">setBoundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QGlyphRun::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears all data in the <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> object.</db:para>
</db:section>
<db:section xml:id="flags">
<db:title>[since 5.0] QGlyphRun::GlyphRunFlags QGlyphRun::flags() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGlyphRun::GlyphRunFlags</db:type>
<db:methodname>flags</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGlyphRun::GlyphRunFlags flags() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the flags set for this <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglyphrun.xml#setFlags">setFlags</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml#setFlag">setFlag</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml#setFlag">setFlag</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="glyphIndexes">
<db:title>QList&lt;quint32&gt; QGlyphRun::glyphIndexes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;quint32&gt;</db:type>
<db:methodname>glyphIndexes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;quint32&gt; glyphIndexes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the glyph indexes for this <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglyphrun.xml#setGlyphIndexes">setGlyphIndexes</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml#setPositions">setPositions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>[since 5.0] bool QGlyphRun::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> does not contain any glyphs.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="isRightToLeft">
<db:title>[since 5.0] bool QGlyphRun::isRightToLeft() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isRightToLeft</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isRightToLeft() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> contains glyphs that are painted from the right to the left.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglyphrun.xml#setRightToLeft">setRightToLeft</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="overline">
<db:title>bool QGlyphRun::overline() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>overline</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool overline() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> should be painted with an overline decoration.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglyphrun.xml#setOverline">setOverline</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="positions">
<db:title>QList&lt;QPointF&gt; QGlyphRun::positions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QPointF&gt;</db:type>
<db:methodname>positions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QPointF&gt; positions() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position of the edge of the baseline for each glyph in this set of glyph indexes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglyphrun.xml#setPositions">setPositions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rawFont">
<db:title>QRawFont QGlyphRun::rawFont() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRawFont</db:type>
<db:methodname>rawFont</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRawFont rawFont() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the font selected for this <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglyphrun.xml#setRawFont">setRawFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBoundingRect">
<db:title>[since 5.0] void QGlyphRun::setBoundingRect(const QRectF &amp;<db:emphasis>boundingRect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBoundingRect</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>boundingRect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBoundingRect(const QRectF &amp;boundingRect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the bounding rect of the glyphs in this <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> to be <db:code role="parameter">boundingRect</db:code>. This rectangle will be returned by <db:link xlink:href="qglyphrun.xml#boundingRect">boundingRect</db:link>() unless it is empty, in which case the bounding rectangle of the glyphs in the glyph run will be returned instead.</db:para>
<db:note>
<db:para>Unless you are implementing text shaping, you should not have to use this function. It is used specifically when the <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> should represent an area which is smaller than the area of the glyphs it contains. This could happen e.g. if the glyph run is retrieved by calling <db:link xlink:href="qtextlayout.xml#glyphRuns">QTextLayout::glyphRuns</db:link>() and the specified range only includes part of a ligature (where two or more characters are combined to a single glyph.) When this is the case, the bounding rect should only include the appropriate part of the ligature glyph, based on a calculation of the average width of the characters in the ligature.</db:para>
</db:note>
<db:para>In order to support such a case (an example is selections which should be drawn with a different color than the main text color), it is necessary to clip the painting mechanism to the rectangle returned from <db:link xlink:href="qglyphrun.xml#boundingRect">boundingRect</db:link>() to avoid drawing the entire ligature glyph.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglyphrun.xml#boundingRect">boundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFlag">
<db:title>[since 5.0] void QGlyphRun::setFlag(QGlyphRun::GlyphRunFlag <db:emphasis>flag</db:emphasis>, bool <db:emphasis>enabled</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFlag</db:methodname>
<db:methodparam>
<db:type>QGlyphRun::GlyphRunFlag</db:type>
<db:parameter>flag</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enabled</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFlag(QGlyphRun::GlyphRunFlag flag, bool enabled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enabled</db:code> is true, then <db:code role="parameter">flag</db:code> is enabled; otherwise, it is disabled.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglyphrun.xml#flags">flags</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFlags">
<db:title>[since 5.0] void QGlyphRun::setFlags(QGlyphRun::GlyphRunFlags <db:emphasis>flags</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFlags</db:methodname>
<db:methodparam>
<db:type>QGlyphRun::GlyphRunFlags</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFlags(QGlyphRun::GlyphRunFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the flags of this <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> to <db:code role="parameter">flags</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglyphrun.xml#setFlag">setFlag</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGlyphIndexes">
<db:title>void QGlyphRun::setGlyphIndexes(const QList&lt;quint32&gt; &amp;<db:emphasis>glyphIndexes</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setGlyphIndexes</db:methodname>
<db:methodparam>
<db:type>const QList&lt;quint32&gt; &amp;</db:type>
<db:parameter>glyphIndexes</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGlyphIndexes(const QList&lt;quint32&gt; &amp;glyphIndexes)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the glyph indexes for this <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> object to <db:code role="parameter">glyphIndexes</db:code>. The glyph indexes must be valid for the selected font.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglyphrun.xml#glyphIndexes">glyphIndexes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOverline">
<db:title>void QGlyphRun::setOverline(bool <db:emphasis>overline</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOverline</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>overline</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOverline(bool overline)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Indicates that this <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> should be painted with an overline decoration if <db:code role="parameter">overline</db:code> is true. Otherwise the <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> should be painted with no overline decoration.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglyphrun.xml#overline">overline</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml#setFlag">setFlag</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPositions">
<db:title>void QGlyphRun::setPositions(const QList&lt;QPointF&gt; &amp;<db:emphasis>positions</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPositions</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QPointF&gt; &amp;</db:type>
<db:parameter>positions</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPositions(const QList&lt;QPointF&gt; &amp;positions)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the positions of the edge of the baseline for each glyph in this set of glyph indexes to <db:code role="parameter">positions</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglyphrun.xml#positions">positions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRawData">
<db:title>void QGlyphRun::setRawData(const quint32 *<db:emphasis>glyphIndexArray</db:emphasis>, const QPointF *<db:emphasis>glyphPositionArray</db:emphasis>, int <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRawData</db:methodname>
<db:methodparam>
<db:type>const quint32 *</db:type>
<db:parameter>glyphIndexArray</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF *</db:type>
<db:parameter>glyphPositionArray</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRawData(const quint32 *glyphIndexArray, const QPointF *glyphPositionArray, int size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the glyph indexes and positions of this <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> to use the first <db:code role="parameter">size</db:code> elements in the arrays <db:code role="parameter">glyphIndexArray</db:code> and <db:code role="parameter">glyphPositionArray</db:code>. The data is <db:emphasis>not</db:emphasis> copied. The caller must guarantee that the arrays are not deleted as long as this <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> and any copies of it exists.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglyphrun.xml#setGlyphIndexes">setGlyphIndexes</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml#setPositions">setPositions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRawFont">
<db:title>void QGlyphRun::setRawFont(const QRawFont &amp;<db:emphasis>rawFont</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRawFont</db:methodname>
<db:methodparam>
<db:type>const QRawFont &amp;</db:type>
<db:parameter>rawFont</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRawFont(const QRawFont &amp;rawFont)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the font in which to look up the glyph indexes to the <db:code role="parameter">rawFont</db:code> specified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglyphrun.xml#rawFont">rawFont</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml#setGlyphIndexes">setGlyphIndexes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRightToLeft">
<db:title>[since 5.0] void QGlyphRun::setRightToLeft(bool <db:emphasis>rightToLeft</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRightToLeft</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>rightToLeft</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRightToLeft(bool rightToLeft)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Indicates that this <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> contains glyphs that should be ordered from the right to left if <db:code role="parameter">rightToLeft</db:code> is true. Otherwise the order of the glyphs is assumed to be left to right.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglyphrun.xml#isRightToLeft">isRightToLeft</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml#setFlag">setFlag</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStrikeOut">
<db:title>void QGlyphRun::setStrikeOut(bool <db:emphasis>strikeOut</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStrikeOut</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>strikeOut</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStrikeOut(bool strikeOut)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Indicates that this <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> should be painted with an strike out decoration if <db:code role="parameter">strikeOut</db:code> is true. Otherwise the <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> should be painted with no strike out decoration.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglyphrun.xml#strikeOut">strikeOut</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml#setFlag">setFlag</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUnderline">
<db:title>void QGlyphRun::setUnderline(bool <db:emphasis>underline</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUnderline</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>underline</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUnderline(bool underline)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Indicates that this <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> should be painted with an underline decoration if <db:code role="parameter">underline</db:code> is true. Otherwise the <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> should be painted with no underline decoration.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglyphrun.xml#underline">underline</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml#setFlag">setFlag</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="strikeOut">
<db:title>bool QGlyphRun::strikeOut() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>strikeOut</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool strikeOut() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> should be painted with a strike out decoration.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglyphrun.xml#setStrikeOut">setStrikeOut</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.0] void QGlyphRun::swap(QGlyphRun &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QGlyphRun &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QGlyphRun &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this glyph run instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="underline">
<db:title>bool QGlyphRun::underline() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>underline</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool underline() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> should be painted with an underline decoration.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglyphrun.xml#setUnderline">setUnderline</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QGlyphRun::operator!=(const QGlyphRun &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QGlyphRun &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QGlyphRun &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Compares <db:code role="parameter">other</db:code> to this <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> object. Returns <db:code>true</db:code> if any of the list of glyph indexes, the list of positions or the font are different, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QGlyphRun &amp;QGlyphRun::operator=(const QGlyphRun &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QGlyphRun &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QGlyphRun &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGlyphRun &amp; operator=(const QGlyphRun &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> object.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QGlyphRun::operator==(const QGlyphRun &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QGlyphRun &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QGlyphRun &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Compares <db:code role="parameter">other</db:code> to this <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> object. Returns <db:code>true</db:code> if the list of glyph indexes, the list of positions and the font are all equal, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
