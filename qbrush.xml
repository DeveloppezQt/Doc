<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QBrush Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbrush.xml">QBrush</db:link> class defines the fill pattern of shapes drawn by <db:link xlink:href="qpainter.xml">QPainter</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBrush</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QBrush is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A brush has a style, a color, a gradient and a texture.</db:para>
<db:para>The brush <db:link xlink:href="qbrush.xml#style">style</db:link>() defines the fill pattern using the <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::BrushStyle</db:link> enum. The default brush style is <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::NoBrush</db:link> (depending on how you construct a brush). This style tells the painter to not fill shapes. The standard style for filling is <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::SolidPattern</db:link>. The style can be set when the brush is created using the appropriate constructor, and in addition the <db:link xlink:href="qbrush.xml#setStyle">setStyle</db:link>() function provides means for altering the style once the brush is constructed.</db:para>
<db:mediaobject>
<db:alt>Brush Styles</db:alt>
<db:imageobject>
<db:imagedata fileref="images/brush-styles.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The brush <db:link xlink:href="qbrush.xml#color">color</db:link>() defines the color of the fill pattern. The color can either be one of Qt's predefined colors, <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::GlobalColor</db:link>, or any other custom <db:link xlink:href="qcolor.xml">QColor</db:link>. The currently set color can be retrieved and altered using the <db:link xlink:href="qbrush.xml#color">color</db:link>() and <db:link xlink:href="qbrush.xml#setColor">setColor</db:link>() functions, respectively.</db:para>
<db:para>The <db:link xlink:href="qbrush.xml#gradient">gradient</db:link>() defines the gradient fill used when the current style is either <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::LinearGradientPattern</db:link>, <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::RadialGradientPattern</db:link> or <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::ConicalGradientPattern</db:link>. Gradient brushes are created by giving a <db:link xlink:href="qgradient.xml">QGradient</db:link> as a constructor argument when creating the <db:link xlink:href="qbrush.xml">QBrush</db:link>. Qt provides three different gradients: <db:link xlink:href="qlineargradient.xml">QLinearGradient</db:link>, <db:link xlink:href="qconicalgradient.xml">QConicalGradient</db:link>, and <db:link xlink:href="qradialgradient.xml">QRadialGradient</db:link> - all of which inherit <db:link xlink:href="qgradient.xml">QGradient</db:link>.</db:para>
<db:programlisting language="cpp">    QRadialGradient gradient(50, 50, 50, 50, 50);
    gradient.setColorAt(0, QColor::fromRgbF(0, 1, 0, 1));
    gradient.setColorAt(1, QColor::fromRgbF(0, 0, 0, 0));

    QBrush brush(gradient);
</db:programlisting>
<db:para>The <db:link xlink:href="qbrush.xml#texture">texture</db:link>() defines the pixmap used when the current style is <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::TexturePattern</db:link>. You can create a brush with a texture by providing the pixmap when the brush is created or by using <db:link xlink:href="qbrush.xml#setTexture">setTexture</db:link>().</db:para>
<db:para>Note that applying <db:link xlink:href="qbrush.xml#setTexture">setTexture</db:link>() makes <db:link xlink:href="qbrush.xml#style">style</db:link>() == <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::TexturePattern</db:link>, regardless of previous style settings. Also, calling <db:link xlink:href="qbrush.xml#setColor">setColor</db:link>() will not make a difference if the style is a gradient. The same is the case if the style is <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::TexturePattern</db:link> style unless the current texture is a <db:link xlink:href="qbitmap.xml">QBitmap</db:link>.</db:para>
<db:para>The <db:link xlink:href="qbrush.xml#isOpaque">isOpaque</db:link>() function returns <db:code>true</db:code> if the brush is fully opaque otherwise false. A brush is considered opaque if:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The alpha component of the <db:link xlink:href="qbrush.xml#color">color</db:link>() is 255.</db:para>
</db:listitem>
<db:listitem>
<db:para>Its <db:link xlink:href="qbrush.xml#texture">texture</db:link>() does not have an alpha channel and is not a <db:link xlink:href="qbitmap.xml">QBitmap</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>The colors in the <db:link xlink:href="qbrush.xml#gradient">gradient</db:link>() all have an alpha component that is 255.</db:para>
</db:listitem>
</db:itemizedlist>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/brush-outline.png"/>
</db:imageobject>
</db:inlinemediaobject> Outlines</db:para>
</db:td>
<db:td>
<db:para>To specify the style and color of lines and outlines, use the <db:link xlink:href="qpainter.xml">QPainter</db:link>'s <db:link xlink:href="qpen.xml">pen</db:link> combined with <db:link xlink:href="qt.xml#PenStyle-enum">Qt::PenStyle</db:link> and <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::GlobalColor</db:link>:</db:para>
<db:programlisting language="cpp">QPainter painter(this);

painter.setBrush(Qt::cyan);
painter.setPen(Qt::darkCyan);
painter.drawRect(0, 0, 100,100);

painter.setBrush(Qt::NoBrush);
painter.setPen(Qt::darkGreen);
painter.drawRect(40, 40, 100, 100);
</db:programlisting>
<db:para>Note that, by default, <db:link xlink:href="qpainter.xml">QPainter</db:link> renders the outline (using the currently set pen) when drawing shapes. Use <db:link xlink:href="qt.xml#PenStyle-enum"><db:code>painter.setPen(Qt::NoPen)</db:code></db:link> to disable this behavior.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For more information about painting in general, see the <db:link xlink:href="paintsystem.xml">Paint System</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#BrushStyle-enum">Qt::BrushStyle</db:link></db:member>
<db:member><db:link xlink:href="qpainter.xml">QPainter</db:link></db:member>
<db:member><db:link xlink:href="qcolor.xml">QColor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QBrush">
<db:title>QBrush::QBrush()</db:title>
<db:constructorsynopsis>
<db:methodname>QBrush</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a default black brush with the style <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::NoBrush</db:link> (i.e. this brush will not fill shapes).</db:para>
</db:section>
<db:section xml:id="QBrush-1">
<db:title>QBrush::QBrush(Qt::BrushStyle <db:emphasis>style</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QBrush</db:methodname>
<db:methodparam>
<db:type>Qt::BrushStyle</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush(Qt::BrushStyle style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a black brush with the given <db:code role="parameter">style</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml#setStyle">setStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QBrush-2">
<db:title>QBrush::QBrush(const QColor &amp;<db:emphasis>color</db:emphasis>, Qt::BrushStyle <db:emphasis>style</db:emphasis> = Qt::SolidPattern)</db:title>
<db:constructorsynopsis>
<db:methodname>QBrush</db:methodname>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::BrushStyle</db:type>
<db:parameter>style</db:parameter>
<db:initializer>Qt::SolidPattern</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush(const QColor &amp;color, Qt::BrushStyle style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a brush with the given <db:code role="parameter">color</db:code> and <db:code role="parameter">style</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml#setColor">setColor</db:link>()</db:member>
<db:member><db:link xlink:href="qbrush.xml#setStyle">setStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QBrush-3">
<db:title>QBrush::QBrush(Qt::GlobalColor <db:emphasis>color</db:emphasis>, Qt::BrushStyle <db:emphasis>style</db:emphasis> = Qt::SolidPattern)</db:title>
<db:constructorsynopsis>
<db:methodname>QBrush</db:methodname>
<db:methodparam>
<db:type>Qt::GlobalColor</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::BrushStyle</db:type>
<db:parameter>style</db:parameter>
<db:initializer>Qt::SolidPattern</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush(Qt::GlobalColor color, Qt::BrushStyle style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a brush with the given <db:code role="parameter">color</db:code> and <db:code role="parameter">style</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml#setColor">setColor</db:link>()</db:member>
<db:member><db:link xlink:href="qbrush.xml#setStyle">setStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QBrush-4">
<db:title>QBrush::QBrush(const QColor &amp;<db:emphasis>color</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QBrush</db:methodname>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush(const QColor &amp;color, const QPixmap &amp;pixmap)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a brush with the given <db:code role="parameter">color</db:code> and the custom pattern stored in <db:code role="parameter">pixmap</db:code>.</db:para>
<db:para>The style is set to <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::TexturePattern</db:link>. The color will only have an effect for QBitmaps.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml#setColor">setColor</db:link>()</db:member>
<db:member><db:link xlink:href="qbrush.xml#setTexture">setTexture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QBrush-5">
<db:title>QBrush::QBrush(Qt::GlobalColor <db:emphasis>color</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QBrush</db:methodname>
<db:methodparam>
<db:type>Qt::GlobalColor</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush(Qt::GlobalColor color, const QPixmap &amp;pixmap)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a brush with the given <db:code role="parameter">color</db:code> and the custom pattern stored in <db:code role="parameter">pixmap</db:code>.</db:para>
<db:para>The style is set to <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::TexturePattern</db:link>. The color will only have an effect for QBitmaps.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml#setColor">setColor</db:link>()</db:member>
<db:member><db:link xlink:href="qbrush.xml#setTexture">setTexture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QBrush-6">
<db:title>QBrush::QBrush(const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QBrush</db:methodname>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush(const QPixmap &amp;pixmap)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a brush with a black color and a texture set to the given <db:code role="parameter">pixmap</db:code>. The style is set to <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::TexturePattern</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml#setTexture">setTexture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QBrush-7">
<db:title>QBrush::QBrush(const QImage &amp;<db:emphasis>image</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QBrush</db:methodname>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush(const QImage &amp;image)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a brush with a black color and a texture set to the given <db:code role="parameter">image</db:code>. The style is set to <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::TexturePattern</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml#setTextureImage">setTextureImage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QBrush-9">
<db:title>QBrush::QBrush(const QGradient &amp;<db:emphasis>gradient</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QBrush</db:methodname>
<db:methodparam>
<db:type>const QGradient &amp;</db:type>
<db:parameter>gradient</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush(const QGradient &amp;gradient)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a brush based on the given <db:code role="parameter">gradient</db:code>.</db:para>
<db:para>The brush style is set to the corresponding gradient style (either <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::LinearGradientPattern</db:link>, <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::RadialGradientPattern</db:link> or <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::ConicalGradientPattern</db:link>).</db:para>
</db:section>
<db:section xml:id="QBrush-8">
<db:title>QBrush::QBrush(const QBrush &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QBrush</db:methodname>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush(const QBrush &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QBrush">
<db:title>QBrush::~QBrush()</db:title>
<db:destructorsynopsis>
<db:methodname>~QBrush</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QBrush()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the brush.</db:para>
</db:section>
<db:section xml:id="color">
<db:title>const QColor &amp;QBrush::color() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QColor &amp;</db:type>
<db:methodname>color</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QColor &amp; color() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the brush color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml#setColor">setColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="gradient">
<db:title>const QGradient *QBrush::gradient() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QGradient *</db:type>
<db:methodname>gradient</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QGradient * gradient() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the gradient describing this brush.</db:para>
</db:section>
<db:section xml:id="isOpaque">
<db:title>bool QBrush::isOpaque() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isOpaque</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isOpaque() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the brush is fully opaque otherwise false. A brush is considered opaque if:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The alpha component of the <db:link xlink:href="qbrush.xml#color">color</db:link>() is 255.</db:para>
</db:listitem>
<db:listitem>
<db:para>Its <db:link xlink:href="qbrush.xml#texture">texture</db:link>() does not have an alpha channel and is not a <db:link xlink:href="qbitmap.xml">QBitmap</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>The colors in the <db:link xlink:href="qbrush.xml#gradient">gradient</db:link>() all have an alpha component that is 255.</db:para>
</db:listitem>
<db:listitem>
<db:para>It is an extended radial gradient.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="setColor">
<db:title>void QBrush::setColor(const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setColor</db:methodname>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setColor(const QColor &amp;color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the brush color to the given <db:code role="parameter">color</db:code>.</db:para>
<db:para>Note that calling setColor() will not make a difference if the style is a gradient. The same is the case if the style is <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::TexturePattern</db:link> style unless the current texture is a <db:link xlink:href="qbitmap.xml">QBitmap</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml#color">color</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColor-1">
<db:title>void QBrush::setColor(Qt::GlobalColor <db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setColor</db:methodname>
<db:methodparam>
<db:type>Qt::GlobalColor</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setColor(Qt::GlobalColor color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the brush color to the given <db:code role="parameter">color</db:code>.</db:para>
</db:section>
<db:section xml:id="setStyle">
<db:title>void QBrush::setStyle(Qt::BrushStyle <db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStyle</db:methodname>
<db:methodparam>
<db:type>Qt::BrushStyle</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStyle(Qt::BrushStyle style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the brush style to <db:code role="parameter">style</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml#style">style</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTexture">
<db:title>void QBrush::setTexture(const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTexture</db:methodname>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTexture(const QPixmap &amp;pixmap)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the brush pixmap to <db:code role="parameter">pixmap</db:code>. The style is set to <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::TexturePattern</db:link>.</db:para>
<db:para>The current brush color will only have an effect for monochrome pixmaps, i.e. for <db:link xlink:href="qpixmap.xml#depth">QPixmap::depth</db:link>() == 1 (<db:link xlink:href="qbitmap.xml">QBitmaps</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml#texture">texture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextureImage">
<db:title>[since 4.2] void QBrush::setTextureImage(const QImage &amp;<db:emphasis>image</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTextureImage</db:methodname>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTextureImage(const QImage &amp;image)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the brush image to <db:code role="parameter">image</db:code>. The style is set to <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::TexturePattern</db:link>.</db:para>
<db:para>Note the current brush color will <db:emphasis>not</db:emphasis> have any affect on monochrome images, as opposed to calling <db:link xlink:href="qbrush.xml#setTexture">setTexture</db:link>() with a <db:link xlink:href="qbitmap.xml">QBitmap</db:link>. If you want to change the color of monochrome image brushes, either convert the image to <db:link xlink:href="qbitmap.xml">QBitmap</db:link> with <db:code>QBitmap::fromImage()</db:code> and set the resulting <db:link xlink:href="qbitmap.xml">QBitmap</db:link> as a texture, or change the entries in the color table for the image.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml#textureImage">textureImage</db:link>()</db:member>
<db:member><db:link xlink:href="qbrush.xml#setTexture">setTexture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransform">
<db:title>[since 4.3] void QBrush::setTransform(const QTransform &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTransform</db:methodname>
<db:methodparam>
<db:type>const QTransform &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTransform(const QTransform &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">matrix</db:code> as an explicit transformation matrix on the current brush. The brush transformation matrix is merged with <db:link xlink:href="qpainter.xml">QPainter</db:link> transformation matrix to produce the final result.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml#transform">transform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="style">
<db:title>Qt::BrushStyle QBrush::style() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::BrushStyle</db:type>
<db:methodname>style</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::BrushStyle style() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the brush style.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml#setStyle">setStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 4.8] void QBrush::swap(QBrush &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QBrush &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QBrush &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps brush <db:code role="parameter">other</db:code> with this brush. This operation is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
</db:section>
<db:section xml:id="texture">
<db:title>QPixmap QBrush::texture() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPixmap</db:type>
<db:methodname>texture</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap texture() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the custom brush pattern, or a null pixmap if no custom brush pattern has been set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml#setTexture">setTexture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textureImage">
<db:title>[since 4.2] QImage QBrush::textureImage() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QImage</db:type>
<db:methodname>textureImage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QImage textureImage() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the custom brush pattern, or a null image if no custom brush pattern has been set.</db:para>
<db:para>If the texture was set as a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> it will be converted to a <db:link xlink:href="qimage.xml">QImage</db:link>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml#setTextureImage">setTextureImage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transform">
<db:title>[since 4.3] QTransform QBrush::transform() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTransform</db:type>
<db:methodname>transform</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTransform transform() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current transformation matrix for the brush.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml#setTransform">setTransform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QBrush::operator QVariant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>operator QVariant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant operator QVariant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the brush as a <db:link xlink:href="qvariant.xml">QVariant</db:link></db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QBrush::operator!=(const QBrush &amp;<db:emphasis>brush</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QBrush &amp;brush) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the brush is different from the given <db:code role="parameter">brush</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Two brushes are different if they have different styles, colors or transforms or different pixmaps or gradients depending on the style.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QBrush &amp;QBrush::operator=(const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QBrush &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush &amp; operator=(const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the given <db:code role="parameter">brush</db:code> to <db:emphasis>this</db:emphasis> brush and returns a reference to <db:emphasis>this</db:emphasis> brush.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>[since 5.2] QBrush &amp;QBrush::operator=(QBrush &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QBrush &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QBrush &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush &amp; operator=(QBrush &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qbrush.xml">QBrush</db:link> instance.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QBrush::operator==(const QBrush &amp;<db:emphasis>brush</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QBrush &amp;brush) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the brush is equal to the given <db:code role="parameter">brush</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Two brushes are equal if they have equal styles, colors and transforms and equal pixmaps or gradients depending on the style.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the given <db:code role="parameter">brush</db:code> to the given <db:code role="parameter">stream</db:code> and returns a reference to the <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads the given <db:code role="parameter">brush</db:code> from the given <db:code role="parameter">stream</db:code> and returns a reference to the <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QBrush</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qbrush.xml">QBrush</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="matrix">
<db:title>[since 4.2] const QMatrix &amp;QBrush::matrix() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QMatrix &amp;</db:type>
<db:methodname>matrix</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QMatrix &amp; matrix() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qbrush.xml#transform">transform</db:link>() instead.</db:para>
<db:para>Returns the current transformation matrix for the brush.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml#setMatrix">setMatrix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMatrix">
<db:title>[since 4.2] void QBrush::setMatrix(const QMatrix &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMatrix</db:methodname>
<db:methodparam>
<db:type>const QMatrix &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMatrix(const QMatrix &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qbrush.xml#setTransform">setTransform</db:link>() instead.</db:para>
<db:para>Sets <db:code role="parameter">matrix</db:code> as an explicit transformation matrix on the current brush. The brush transformation matrix is merged with <db:link xlink:href="qpainter.xml">QPainter</db:link> transformation matrix to produce the final result.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml#matrix">matrix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
