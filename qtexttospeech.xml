<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextToSpeech Class</db:title>
<db:productname>QtSpeech</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Text-To-Speech library</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link> class provides a convenient access to text-to-speech engines.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextToSpeech</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += texttospeech</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Use <db:link xlink:href="qtexttospeech.xml#say">say</db:link>() to start synthesizing text. It is possible to specify the language with <db:link xlink:href="qtexttospeech.xml#setLocale">setLocale</db:link>(). To select between the available voices use <db:link xlink:href="qtexttospeech.xml#setVoice">setVoice</db:link>(). The languages and voices depend on the available synthesizers on each platform. On Linux by default speech-dispatcher is used.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="State-enum">
<db:title>enum QTextToSpeech::State</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link></db:emphasis>::Ready</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The synthesizer is ready to start a new text. This is also the state after a text was finished.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link></db:emphasis>::Speaking</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The current text is being spoken.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link></db:emphasis>::Paused</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The sythetization was paused and can be resumed with <db:link xlink:href="qtexttospeech.xml#resume">resume</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link></db:emphasis>::BackendError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The backend was unable to synthesize the current string.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="locale-prop">
<db:title>locale : QLocale</db:title>
<db:para>This property holds the current locale in use. By default, the system locale is used.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlocale.xml">QLocale</db:link></db:type> <db:emphasis role="bold">locale</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qtexttospeech.xml#setLocale">setLocale</db:link></db:emphasis>(const <db:type><db:link xlink:href="qlocale.xml">QLocale</db:link></db:type> &amp;<db:emphasis>locale</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">localeChanged</db:emphasis>(const <db:type><db:link xlink:href="qlocale.xml">QLocale</db:link></db:type> &amp;<db:emphasis>locale</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="pitch-prop">
<db:title>pitch : double</db:title>
<db:para>This property holds the voice pitch in the range -1.0 to 1.0. The default of 0.0 is normal speech pitch.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>double</db:type> <db:emphasis role="bold">pitch</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPitch</db:emphasis>(<db:type>double</db:type> <db:emphasis>pitch</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">pitchChanged</db:emphasis>(<db:type>double</db:type> <db:emphasis>pitch</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="rate-prop">
<db:title>rate : double</db:title>
<db:para>This property holds the current voice rate in the range -1.0 to 1.0. The default value of 0.0 is normal speech flow.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>double</db:type> <db:emphasis role="bold">rate</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRate</db:emphasis>(<db:type>double</db:type> <db:emphasis>rate</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rateChanged</db:emphasis>(<db:type>double</db:type> <db:emphasis>rate</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="state-prop">
<db:title>[read-only] state : const State</db:title>
<db:para>This property holds the current state of the speech synthesizer. Use <db:link xlink:href="qtexttospeech.xml#say">say</db:link>() to start synthesizing text with the current voice and locale.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtexttospeech.xml#State-enum">QTextToSpeech::State</db:link></db:type> <db:emphasis role="bold">state</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">stateChanged</db:emphasis>(<db:type><db:link xlink:href="qtexttospeech.xml#State-enum">QTextToSpeech::State</db:link></db:type> <db:emphasis>state</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="voice-prop">
<db:title>voice : QVoice</db:title>
<db:para>This property holds the current voice used for the speech.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QVoice</db:type> <db:emphasis role="bold">voice</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qtexttospeech.xml#setVoice">setVoice</db:link></db:emphasis>(const <db:type>QVoice</db:type> &amp;<db:emphasis>voice</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">voiceChanged</db:emphasis>(const <db:type>QVoice</db:type> &amp;<db:emphasis>voice</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="volume-prop">
<db:title>volume : int</db:title>
<db:para>This property holds the current volume in the range 0.0 to 1.0. The default value is the platform's default volume.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>double</db:type> <db:emphasis role="bold">volume</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setVolume</db:emphasis>(<db:type>double</db:type> <db:emphasis>volume</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">volumeChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>volume</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextToSpeech">
<db:title>[explicit] QTextToSpeech::QTextToSpeech(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Loads a text-to-speech engine from a plug-in that uses the default engine plug-in and constructs a <db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link> object as the child of <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The default engine may be platform-specific.</db:para>
<db:para>If loading the plug-in fails, <db:link xlink:href="qtexttospeech.xml#state-prop">QTextToSpeech::state</db:link>() will return <db:link xlink:href="qtexttospeech.xml#State-enum">QTextToSpeech::BackendError</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#availableEngines">availableEngines</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTextToSpeech-1">
<db:title>[explicit] QTextToSpeech::QTextToSpeech(const QString &amp;<db:emphasis>engine</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Loads a text-to-speech engine from a plug-in that matches parameter <db:code role="parameter">engine</db:code> and constructs a <db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link> object as the child of <db:code role="parameter">parent</db:code>.</db:para>
<db:para>If <db:code role="parameter">engine</db:code> is empty, the default engine plug-in is used. The default engine may be platform-specific.</db:para>
<db:para>If loading the plug-in fails, <db:link xlink:href="qtexttospeech.xml#state-prop">QTextToSpeech::state</db:link>() will return <db:link xlink:href="qtexttospeech.xml#State-enum">QTextToSpeech::BackendError</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#availableEngines">availableEngines</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="availableEngines">
<db:title>[static] QStringList QTextToSpeech::availableEngines()</db:title>
<db:para>Gets the list of supported text-to-speech engine plug-ins.</db:para>
</db:section>
<db:section xml:id="availableLocales">
<db:title>QVector&lt;QLocale&gt; QTextToSpeech::availableLocales() const</db:title>
<db:para>Gets a vector of locales that are currently supported. Note on some platforms these can change when the backend changes synthesizers for example.</db:para>
</db:section>
<db:section xml:id="availableVoices">
<db:title>QVector&lt;QVoice&gt; QTextToSpeech::availableVoices() const</db:title>
<db:para>Gets a vector of voices available for the current locale.</db:para>
<db:note>
<db:para>if no locale has been set, the system locale is used.</db:para>
</db:note>
</db:section>
<db:section xml:id="pause">
<db:title>void QTextToSpeech::pause()</db:title>
<db:para>Pause the current speech.</db:para>
<db:note>
<db:para>this function depends on the platform and backend and may not work at all, take several seconds until it takes effect or may pause instantly. Some synthesizers will look for a break that they can later resume from, such as a sentence end.</db:para>
</db:note>
<db:note>
<db:para>Due to Android platform limitations, pause() stops the current utterance, while <db:link xlink:href="qtexttospeech.xml#resume">resume</db:link>() starts the previously queued utterance from the beginning.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#resume">resume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resume">
<db:title>void QTextToSpeech::resume()</db:title>
<db:para>Resume speaking after <db:link xlink:href="qtexttospeech.xml#pause">pause</db:link>() has been called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#pause">pause</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="say">
<db:title>void QTextToSpeech::say(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Start synthesizing the <db:code role="parameter">text</db:code>. This function will start the asynchronous speaking of the text. The current state is available using the <db:link xlink:href="qtexttospeech.xml#state-prop">state</db:link> property. Once the synthetization is done, a <db:link xlink:href="qtexttospeech.xml#state-prop">stateChanged</db:link>() signal with the <db:link xlink:href="qtexttospeech.xml#State-enum">Ready</db:link> state will be emitted.</db:para>
</db:section>
<db:section xml:id="setLocale">
<db:title>void QTextToSpeech::setLocale(const QLocale &amp;<db:emphasis>locale</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">locale</db:code> to a given locale if possible. The default is the system locale.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qtexttospeech.xml#locale-prop">locale</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#locale-prop">locale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVoice">
<db:title>void QTextToSpeech::setVoice(const QVoice &amp;<db:emphasis>voice</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">voice</db:code> to use.</db:para>
<db:note>
<db:para>On some platforms setting the voice changes other voice attributes such as locale, pitch, etc. in which case signals are emitted for these changes.</db:para>
</db:note>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qtexttospeech.xml#voice-prop">voice</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#voice-prop">voice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stop">
<db:title>void QTextToSpeech::stop()</db:title>
<db:para>Stop the currently speaking text.</db:para>
</db:section>
</db:section>
</db:article>
