<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextToSpeech Class</db:title>
<db:productname>QtTextToSpeech</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt TextToSpeech Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link> class provides a convenient access to text-to-speech engines.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextToSpeech</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS TextToSpeech)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::TextToSpeech)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += texttospeech</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Use <db:link xlink:href="qtexttospeech.xml#say">say</db:link>() to start reading text to the default audio device, and <db:link xlink:href="qtexttospeech.xml#stop">stop</db:link>(), <db:link xlink:href="qtexttospeech.xml#pause">pause</db:link>(), and <db:link xlink:href="qtexttospeech.xml#resume">resume</db:link>() to control the reading of the text.</db:para>
<db:programlisting language="cpp">    connect(ui.speakButton, &amp;amp;QPushButton::clicked, m_speech, [this]{
        m_speech-&amp;gt;say(ui.plainTextEdit-&amp;gt;toPlainText());
    });
    connect(ui.stopButton, &amp;amp;QPushButton::clicked, m_speech, [this]{
        m_speech-&amp;gt;stop();
    });
    connect(ui.pauseButton, &amp;amp;QPushButton::clicked, m_speech, [this]{
        m_speech-&amp;gt;pause();
    });
    connect(ui.resumeButton, &amp;amp;QPushButton::clicked, m_speech, &amp;amp;QTextToSpeech::resume);
</db:programlisting>
<db:para>To synthesize text into PCM data for further processing, use synthesize().</db:para>
<db:para>The list of voices the engine supports for the current language is returned by <db:link xlink:href="qtexttospeech.xml#availableVoices">availableVoices</db:link>(). Change the language using <db:link xlink:href="qtexttospeech.xml#locale-prop">setLocale</db:link>(), using one of the <db:link xlink:href="qtexttospeech.xml#availableLocales">availableLocales</db:link>() that is a good match for the language that the input text is in, and for the accent of the desired voice output. This will change the list of available voices on most platforms. Then use one of the available voices in a call to <db:link xlink:href="qtexttospeech.xml#voice-prop">setVoice</db:link>().</db:para>
<db:note>
<db:para>Which locales and voices the engine supports depends usually on the Operating System configuration. E.g. on macOS, end users can install voices through the <db:emphasis>Accessibility</db:emphasis> panel in <db:emphasis>System Preferences</db:emphasis>.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="BoundaryHint-enum">
<db:title>enum QTextToSpeech::BoundaryHint</db:title>
<db:enumsynopsis>
<db:enumname>BoundaryHint</db:enumname>
<db:enumitem>
<db:enumidentifier>Default</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Immediate</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Word</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Sentence</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>describes when speech should be stopped and paused.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link></db:emphasis>::<db:emphasis role="bold">BoundaryHint</db:emphasis>::Default</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Uses the engine specific default behavior.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link></db:emphasis>::<db:emphasis role="bold">BoundaryHint</db:emphasis>::Immediate</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The engine should stop playback immediately.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link></db:emphasis>::<db:emphasis role="bold">BoundaryHint</db:emphasis>::Word</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Stop speech when the current word is finished.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link></db:emphasis>::<db:emphasis role="bold">BoundaryHint</db:emphasis>::Sentence</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Stop speech when the current sentence is finished.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>These are hints to the engine. The current engine might not support all options.</db:para>
</db:note>
</db:section>
<db:section xml:id="ErrorReason-enum">
<db:title>enum QTextToSpeech::ErrorReason</db:title>
<db:enumsynopsis>
<db:enumname>ErrorReason</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Initialization</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Configuration</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Input</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Playback</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the current error, if any, of the <db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link> engine.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link></db:emphasis>::<db:emphasis role="bold">ErrorReason</db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link></db:emphasis>::<db:emphasis role="bold">ErrorReason</db:emphasis>::Initialization</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The backend could not be initialized, e.g. due to a missing driver or operating system requirement.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link></db:emphasis>::<db:emphasis role="bold">ErrorReason</db:emphasis>::Configuration</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The given backend configuration is inconsistent, e.g. due to wrong voice name or parameters.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link></db:emphasis>::<db:emphasis role="bold">ErrorReason</db:emphasis>::Input</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The given text could not be synthesized, e.g. due to invalid size or characters.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link></db:emphasis>::<db:emphasis role="bold">ErrorReason</db:emphasis>::Playback</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Audio playback failed e.g. due to missing audio device, wrong format or audio streaming interruption.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Use <db:link xlink:href="qtexttospeech.xml#errorReason">errorReason</db:link>() to obtain the current error and <db:link xlink:href="qtexttospeech.xml#errorString">errorString</db:link>() to get the related error message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#errorOccurred">errorOccurred</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="State-enum">
<db:title>enum QTextToSpeech::State</db:title>
<db:enumsynopsis>
<db:enumname>State</db:enumname>
<db:enumitem>
<db:enumidentifier>Ready</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Speaking</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Paused</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Error</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the current state of the text-to-speech engine.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link></db:emphasis>::Ready</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The synthesizer is ready to start a new text. This is also the state after a text was finished.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link></db:emphasis>::Speaking</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Text is being spoken.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link></db:emphasis>::Paused</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The synthesis was paused and can be resumed with <db:link xlink:href="qtexttospeech.xml#resume">resume</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link></db:emphasis>::Error</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>An error has occurred. Details are given by <db:link xlink:href="qtexttospeech.xml#errorReason">errorReason</db:link>().</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#ErrorReason-enum">QTextToSpeech::ErrorReason</db:link></db:member>
<db:member><db:link xlink:href="qtexttospeech.xml#errorReason">errorReason</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttospeech.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="engine-prop">
<db:title>[since 6.4] engine : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>engine</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">engine</db:synopsisinfo>
<db:synopsisinfo role="setter">setEngine</db:synopsisinfo>
<db:synopsisinfo role="notifier">engineChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the engine used to synthesize text to speech.</db:para>
<db:para>Changing the engine stops any ongoing speech.</db:para>
<db:para>On most platforms, changing the engine will update the list of <db:link xlink:href="qtexttospeech.xml#availableLocales">available locales</db:link> and <db:link xlink:href="qtexttospeech.xml#availableVoices">available voices</db:link>.</db:para>
<db:para>This property was introduced in Qt 6.4.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">engine</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qtexttospeech.xml#setEngine">setEngine</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>engine</db:emphasis>, const <db:type>QVariantMap</db:type> &amp;<db:emphasis>params</db:emphasis> = QVariantMap())</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">engineChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>engine</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="locale-prop">
<db:title>locale : QLocale</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QLocale</db:type>
<db:varname>locale</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">locale</db:synopsisinfo>
<db:synopsisinfo role="setter">setLocale</db:synopsisinfo>
<db:synopsisinfo role="notifier">localeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current locale in use.</db:para>
<db:para>By default, the system locale is used.</db:para>
<db:para>On some platforms, changing the locale will update the list of <db:link xlink:href="qtexttospeech.xml#availableVoices">available voices</db:link>, and if the current voice is not available with the new locale, a new voice will be set.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlocale.xml">QLocale</db:link></db:type> <db:emphasis role="bold">locale</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLocale</db:emphasis>(const <db:type><db:link xlink:href="qlocale.xml">QLocale</db:link></db:type> &amp;<db:emphasis>locale</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">localeChanged</db:emphasis>(const <db:type><db:link xlink:href="qlocale.xml">QLocale</db:link></db:type> &amp;<db:emphasis>locale</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#voice-prop">voice</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pitch-prop">
<db:title>pitch : double</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>double</db:type>
<db:varname>pitch</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pitch</db:synopsisinfo>
<db:synopsisinfo role="setter">setPitch</db:synopsisinfo>
<db:synopsisinfo role="notifier">pitchChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the voice pitch, ranging from -1.0 to 1.0.</db:para>
<db:para>The default of 0.0 is the normal speech pitch.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>double</db:type> <db:emphasis role="bold">pitch</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPitch</db:emphasis>(<db:type>double</db:type> <db:emphasis>pitch</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">pitchChanged</db:emphasis>(<db:type>double</db:type> <db:emphasis>pitch</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="rate-prop">
<db:title>rate : double</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>double</db:type>
<db:varname>rate</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">rate</db:synopsisinfo>
<db:synopsisinfo role="setter">setRate</db:synopsisinfo>
<db:synopsisinfo role="notifier">rateChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current voice rate, ranging from -1.0 to 1.0.</db:para>
<db:para>The default value of 0.0 is normal speech flow.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>double</db:type> <db:emphasis role="bold">rate</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRate</db:emphasis>(<db:type>double</db:type> <db:emphasis>rate</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rateChanged</db:emphasis>(<db:type>double</db:type> <db:emphasis>rate</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="state-prop">
<db:title>[read-only] state : const State</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>State</db:type>
<db:varname>state</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">state</db:synopsisinfo>
<db:synopsisinfo role="notifier">stateChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current state of the speech synthesizer.</db:para>
<db:programlisting language="cpp">void MainWindow::stateChanged(QTextToSpeech::State state)
{
    switch (state) {
    case QTextToSpeech::Speaking:
        ui.statusbar-&amp;gt;showMessage(tr(&quot;Speech started...&quot;));
        break;
    case QTextToSpeech::Ready:
        ui.statusbar-&amp;gt;showMessage(tr(&quot;Speech stopped...&quot;), 2000);
        break;
    case QTextToSpeech::Paused:
        ui.statusbar-&amp;gt;showMessage(tr(&quot;Speech paused...&quot;));
        break;
    default:
        ui.statusbar-&amp;gt;showMessage(tr(&quot;Speech error!&quot;));
        break;
    }

    ui.pauseButton-&amp;gt;setEnabled(state == QTextToSpeech::Speaking);
    ui.resumeButton-&amp;gt;setEnabled(state == QTextToSpeech::Paused);
    ui.stopButton-&amp;gt;setEnabled(state == QTextToSpeech::Speaking || state == QTextToSpeech::Paused);
}
</db:programlisting>
<db:para>Use <db:link xlink:href="qtexttospeech.xml#say">say</db:link>() to start synthesizing text with the current <db:link xlink:href="qtexttospeech.xml#voice-prop">voice</db:link> and <db:link xlink:href="qtexttospeech.xml#locale-prop">locale</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtexttospeech.xml#State-enum">QTextToSpeech::State</db:link></db:type> <db:emphasis role="bold">state</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">stateChanged</db:emphasis>(<db:type><db:link xlink:href="qtexttospeech.xml#State-enum">QTextToSpeech::State</db:link></db:type> <db:emphasis>state</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="voice-prop">
<db:title>voice : QVoice</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QVoice</db:type>
<db:varname>voice</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">voice</db:synopsisinfo>
<db:synopsisinfo role="setter">setVoice</db:synopsisinfo>
<db:synopsisinfo role="notifier">voiceChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the voice that will be used for the speech.</db:para>
<db:para>The voice needs to be one of the <db:link xlink:href="qtexttospeech.xml#availableVoices">voices available</db:link> for the engine.</db:para>
<db:para>On some platforms, setting the voice changes other voice attributes such as <db:link xlink:href="qtexttospeech.xml#locale-prop">locale</db:link>, <db:link xlink:href="qtexttospeech.xml#pitch-prop">pitch</db:link>, and so on. These changes trigger the emission of signals.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvoice.xml">QVoice</db:link></db:type> <db:emphasis role="bold">voice</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setVoice</db:emphasis>(const <db:type><db:link xlink:href="qvoice.xml">QVoice</db:link></db:type> &amp;<db:emphasis>voice</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">voiceChanged</db:emphasis>(const <db:type><db:link xlink:href="qvoice.xml">QVoice</db:link></db:type> &amp;<db:emphasis>voice</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="volume-prop">
<db:title>volume : double</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>double</db:type>
<db:varname>volume</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">volume</db:synopsisinfo>
<db:synopsisinfo role="setter">setVolume</db:synopsisinfo>
<db:synopsisinfo role="notifier">volumeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current volume, ranging from 0.0 to 1.0.</db:para>
<db:para>The default value is the platform's default volume.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>double</db:type> <db:emphasis role="bold">volume</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setVolume</db:emphasis>(<db:type>double</db:type> <db:emphasis>volume</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">volumeChanged</db:emphasis>(<db:type>double</db:type> <db:emphasis>volume</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextToSpeech">
<db:title>[explicit] QTextToSpeech::QTextToSpeech(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextToSpeech</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextToSpeech(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Loads a text-to-speech engine from a plug-in that uses the default engine plug-in and constructs a <db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link> object as the child of <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The default engine is platform-specific.</db:para>
<db:para>If the engine initializes correctly, then the <db:link xlink:href="qtexttospeech.xml#state-prop">state</db:link> of the engine will change to <db:link xlink:href="qtexttospeech.xml#State-enum">QTextToSpeech::Ready</db:link>; note that this might happen asynchronously. If the plugin fails to load, then <db:link xlink:href="qtexttospeech.xml#state-prop">state</db:link> will be set to <db:link xlink:href="qtexttospeech.xml#State-enum">QTextToSpeech::Error</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#availableEngines">availableEngines</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTextToSpeech-1">
<db:title>[explicit] QTextToSpeech::QTextToSpeech(const QString &amp;<db:emphasis>engine</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextToSpeech</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>engine</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextToSpeech(const QString &amp;engine, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Loads a text-to-speech engine from a plug-in that matches parameter <db:code role="parameter">engine</db:code> and constructs a <db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link> object as the child of <db:code role="parameter">parent</db:code>.</db:para>
<db:para>If <db:code role="parameter">engine</db:code> is empty, the default engine plug-in is used. The default engine is platform-specific.</db:para>
<db:para>If the engine initializes correctly, the <db:link xlink:href="qtexttospeech.xml#state-prop">state</db:link> of the engine will be set to <db:link xlink:href="qtexttospeech.xml#State-enum">QTextToSpeech::Ready</db:link>. If the plugin fails to load, or if the engine fails to initialize, the engine's <db:link xlink:href="qtexttospeech.xml#state-prop">state</db:link> will be set to <db:link xlink:href="qtexttospeech.xml#State-enum">QTextToSpeech::Error</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#availableEngines">availableEngines</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTextToSpeech-2">
<db:title>[explicit, since 6.4] QTextToSpeech::QTextToSpeech(const QString &amp;<db:emphasis>engine</db:emphasis>, const QVariantMap &amp;<db:emphasis>params</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextToSpeech</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>engine</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>params</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextToSpeech(const QString &amp;engine, const QVariantMap &amp;params, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Loads a text-to-speech engine from a plug-in that matches parameter <db:code role="parameter">engine</db:code> and constructs a <db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link> object as the child of <db:code role="parameter">parent</db:code>, passing <db:code role="parameter">params</db:code> through to the engine.</db:para>
<db:para>If <db:code role="parameter">engine</db:code> is empty, the default engine plug-in is used. The default engine is platform-specific. Which key/value pairs in <db:code role="parameter">params</db:code> are supported depends on the engine. See <db:link xlink:href="qttexttospeech-engines.xml">the engine documentation</db:link> for details. Unsupported entries will be ignored.</db:para>
<db:para>If the engine initializes correctly, the <db:link xlink:href="qtexttospeech.xml#state-prop">state</db:link> of the engine will be set to <db:link xlink:href="qtexttospeech.xml#State-enum">QTextToSpeech::Ready</db:link>. If the plugin fails to load, or if the engine fails to initialize, the engine's <db:link xlink:href="qtexttospeech.xml#state-prop">state</db:link> will be set to <db:link xlink:href="qtexttospeech.xml#State-enum">QTextToSpeech::Error</db:link>.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#availableEngines">availableEngines</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QTextToSpeech">
<db:title>[override virtual] QTextToSpeech::~QTextToSpeech()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QTextToSpeech</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QTextToSpeech() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this <db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link> object, stopping any speech.</db:para>
</db:section>
<db:section xml:id="availableEngines">
<db:title>[static] QStringList QTextToSpeech::availableEngines()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>availableEngines</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList availableEngines()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Gets the list of supported text-to-speech engine plug-ins.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#engine-prop">engine</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="availableLocales">
<db:title>QList&lt;QLocale&gt; QTextToSpeech::availableLocales() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QLocale&gt;</db:type>
<db:methodname>availableLocales</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QLocale&gt; availableLocales() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of locales that are supported by the active <db:link xlink:href="qtexttospeech.xml#engine-prop">engine</db:link>.</db:para>
</db:section>
<db:section xml:id="availableVoices">
<db:title>QList&lt;QVoice&gt; QTextToSpeech::availableVoices() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QVoice&gt;</db:type>
<db:methodname>availableVoices</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QVoice&gt; availableVoices() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of voices available for the current <db:link xlink:href="qtexttospeech.xml#locale-prop">locale</db:link>.</db:para>
<db:note>
<db:para>If no locale has been set, the system locale is used.</db:para>
</db:note>
</db:section>
<db:section xml:id="errorOccurred">
<db:title>void QTextToSpeech::errorOccurred(QTextToSpeech::ErrorReason <db:emphasis>reason</db:emphasis>, const QString &amp;<db:emphasis>errorString</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>errorOccurred</db:methodname>
<db:methodparam>
<db:type>QTextToSpeech::ErrorReason</db:type>
<db:parameter>reason</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>errorString</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void errorOccurred(QTextToSpeech::ErrorReason reason, const QString &amp;errorString)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after an error occurred and the <db:link xlink:href="qtexttospeech.xml#state-prop">state</db:link> has been set to <db:link xlink:href="qtexttospeech.xml#State-enum">QTextToSpeech::Error</db:link>. The <db:code role="parameter">reason</db:code> parameter specifies the type of error, and the <db:code role="parameter">errorString</db:code> provides a human-readable error description.</db:para>
<db:para><db:link xlink:href="qtexttospeech.xml#ErrorReason-enum">QTextToSpeech::ErrorReason</db:link> is not a registered metatype, so for queued connections, you will have to register it with <db:link xlink:href="qmetatype.xml#Q_DECLARE_METATYPE">Q_DECLARE_METATYPE</db:link>() and <db:link xlink:href="qmetatype.xml#qRegisterMetaType-3">qRegisterMetaType</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#errorReason">errorReason</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttospeech.xml#errorString">errorString</db:link>()</db:member>
<db:member><db:link xlink:href="custom-types.xml">Creating Custom Qt Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorReason">
<db:title>QTextToSpeech::ErrorReason QTextToSpeech::errorReason() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextToSpeech::ErrorReason</db:type>
<db:methodname>errorReason</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextToSpeech::ErrorReason errorReason() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the reason why the engine has reported an error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#state-prop">state</db:link></db:member>
<db:member><db:link xlink:href="qtexttospeech.xml#errorOccurred">errorOccurred</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QTextToSpeech::errorString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>errorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString errorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current engine error message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#errorOccurred">errorOccurred</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pause">
<db:title>void QTextToSpeech::pause(QTextToSpeech::BoundaryHint <db:emphasis>boundaryHint</db:emphasis> = QTextToSpeech::BoundaryHint::Default)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pause</db:methodname>
<db:methodparam>
<db:type>QTextToSpeech::BoundaryHint</db:type>
<db:parameter>boundaryHint</db:parameter>
<db:initializer>QTextToSpeech::BoundaryHint::Default</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pause(QTextToSpeech::BoundaryHint boundaryHint)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Pauses the current speech at <db:code role="parameter">boundaryHint</db:code>.</db:para>
<db:para>Whether the <db:code role="parameter">boundaryHint</db:code> is respected depends on the <db:link xlink:href="qtexttospeech.xml#engine-prop">engine</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#resume">resume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resume">
<db:title>void QTextToSpeech::resume()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resume</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resume()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resume speaking after <db:link xlink:href="qtexttospeech.xml#pause">pause</db:link>() has been called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#pause">pause</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="say">
<db:title>void QTextToSpeech::say(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>say</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void say(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts synthesizing the <db:code role="parameter">text</db:code>.</db:para>
<db:para>This function starts sythesizing the speech asynchronously, and reads the text to the default audio output device.</db:para>
<db:programlisting language="cpp">    connect(ui.speakButton, &amp;amp;QPushButton::clicked, m_speech, [this]{
        m_speech-&amp;gt;say(ui.plainTextEdit-&amp;gt;toPlainText());
    });
</db:programlisting>
<db:note>
<db:para>All in-progress readings are stopped before beginning to read the recently synthesized text.</db:para>
</db:note>
<db:para>The current state is available using the <db:link xlink:href="qtexttospeech.xml#state-prop">state</db:link> property, and is set to <db:link xlink:href="qtexttospeech.xml#State-enum">Speaking</db:link> once the reading starts. When the reading is done, <db:link xlink:href="qtexttospeech.xml#state-prop">state</db:link> will be set to <db:link xlink:href="qtexttospeech.xml#State-enum">Ready</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#stop">stop</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttospeech.xml#pause">pause</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttospeech.xml#resume">resume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEngine">
<db:title>[since 6.4] bool QTextToSpeech::setEngine(const QString &amp;<db:emphasis>engine</db:emphasis>, const QVariantMap &amp;<db:emphasis>params</db:emphasis> = QVariantMap())</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setEngine</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>engine</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>params</db:parameter>
<db:initializer>QVariantMap()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">engine</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setEngine(const QString &amp;engine, const QVariantMap &amp;params)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the engine used by this <db:link xlink:href="qtexttospeech.xml">QTextToSpeech</db:link> object to <db:code role="parameter">engine</db:code>, passing <db:code role="parameter">params</db:code> through to the engine constructor.</db:para>
<db:para>Returns whether <db:code role="parameter">engine</db:code> could be set successfully.</db:para>
<db:para>Which key/value pairs in <db:code role="parameter">params</db:code> are supported depends on the engine. See <db:link xlink:href="qttexttospeech-engines.xml">the engine documentation</db:link> for details. Unsupported entries will be ignored.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qtexttospeech.xml#engine-prop">engine</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#engine-prop">engine</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stop">
<db:title>void QTextToSpeech::stop(QTextToSpeech::BoundaryHint <db:emphasis>boundaryHint</db:emphasis> = QTextToSpeech::BoundaryHint::Default)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stop</db:methodname>
<db:methodparam>
<db:type>QTextToSpeech::BoundaryHint</db:type>
<db:parameter>boundaryHint</db:parameter>
<db:initializer>QTextToSpeech::BoundaryHint::Default</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stop(QTextToSpeech::BoundaryHint boundaryHint)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stops the current reading at <db:code role="parameter">boundaryHint</db:code>.</db:para>
<db:para>The reading cannot be resumed. Whether the <db:code role="parameter">boundaryHint</db:code> is respected depends on the engine.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#say">say</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttospeech.xml#pause">pause</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
