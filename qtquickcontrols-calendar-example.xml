<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Controls - Calendar Example</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates the use of Calendar control.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-example-calendar.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The Calendar example displays a Calendar control and an events list for the selected date. It uses a C++ class to fetch the event details from an SQLite database. The example app uses a custom <db:link xlink:href="qml-qtquick-controls-styles-calendarstyle.xml">CalendarStyle</db:link> to highlight the selected date and mark the dates that have events.</db:para>
<db:para>The following snippet from <db:emphasis>main.qml</db:emphasis> shows how the Calendar control is used in the app:</db:para>
<db:programlisting language="cpp">Calendar {
    id: calendar
    width: (parent.width &gt; parent.height ? parent.width * 0.6 - parent.spacing : parent.width)
    height: (parent.height &gt; parent.width ? parent.height * 0.6 - parent.spacing : parent.height)
    frameVisible: true
    weekNumbersVisible: true
    selectedDate: new Date(2014, 0, 1)
    focus: true

    style: CalendarStyle {
        dayDelegate: Item {
                 ...
            }
       }
}
</db:programlisting>
<db:para>The C++ class, SqlEventModel, inherits SqlQueryModel to create a database with dummy events for certain dates.</db:para>
<db:programlisting language="cpp">SqlEventModel::SqlEventModel()
{
    createConnection();
}

void SqlEventModel::createConnection()
{
    QSqlDatabase db = QSqlDatabase::addDatabase(&quot;QSQLITE&quot;);
    db.setDatabaseName(&quot;:memory:&quot;);
    if (!db.open()) {
        qFatal(&quot;Cannot open database&quot;);
        return;
    }

    QSqlQuery query;
    // We store the time as seconds because it's easier to query.
    query.exec(&quot;create table Event (name TEXT, startDate DATE, startTime INT, endDate DATE, endTime INT)&quot;);
    query.exec(&quot;insert into Event values('Grocery shopping', '2014-01-01', 36000, '2014-01-01', 39600)&quot;);
    query.exec(&quot;insert into Event values('Ice skating', '2014-01-01', 57600, '2014-01-01', 61200)&quot;);
    query.exec(&quot;insert into Event values('Doctor''s appointment', '2014-01-15', 57600, '2014-01-15', 63000)&quot;);
    query.exec(&quot;insert into Event values('Conference', '2014-01-24', 32400, '2014-01-28', 61200)&quot;);

    return;
}

</db:programlisting>
<db:para>In <db:emphasis>main.qml</db:emphasis>, the SqlEventModel custom type is used to get the list of events to mark the dates on the calendar.</db:para>
<db:programlisting language="cpp">SqlEventModel {
    id: eventModel
}

Calendar {
    ...
    style: CalendarStyle {
        dayDelegate: Item {
            ...
            Image {
                visible: eventModel.eventsForDate(styleData.date).length &gt; 0
                ...
                source: &quot;qrc:/images/eventindicator.png&quot;
            }
        }
    }
}
</db:programlisting>
<db:para>The app uses a Flow type to position the items, and manipulates the items' width and height based on the orientation change on mobile devices.</db:para>
<db:programlisting language="cpp">Calendar {
    id: calendar
    width: (parent.width &gt; parent.height ? parent.width * 0.6 - parent.spacing : parent.width)
    height: (parent.height &gt; parent.width ? parent.height * 0.6 - parent.spacing : parent.height)
}

Rectangle {
    width: (parent.width &gt; parent.height ? parent.width * 0.4 - parent.spacing : parent.width)
    height: (parent.height &gt; parent.width ? parent.height * 0.4 - parent.spacing : parent.height)
    border.color: Qt.darker(color, 1.2)

    ListView {
        ...
    }
}
</db:programlisting>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="calendar/calendar.pro">calendar/calendar.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="calendar/qml/main.qml">calendar/qml/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="calendar/resources.qrc">calendar/resources.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="calendar/src/event.cpp">calendar/src/event.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="calendar/src/event.h">calendar/src/event.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="calendar/src/main.cpp">calendar/src/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="calendar/src/sqleventmodel.cpp">calendar/src/sqleventmodel.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="calendar/src/sqleventmodel.h">calendar/src/sqleventmodel.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="calendar/images/eventindicator.png">calendar/images/eventindicator.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
