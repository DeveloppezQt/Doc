<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SAX Bookmarks Example</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to read XBEL files.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;xbelgenerator.h&quot;

XbelGenerator::XbelGenerator(QTreeWidget *treeWidget)
    : treeWidget(treeWidget)
{
}

bool XbelGenerator::write(QIODevice *device)
{
    out.setDevice(device);
    out.setCodec(&quot;UTF-8&quot;);
    out &lt;&lt; &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;
        &lt;&lt; &quot;&lt;!DOCTYPE xbel&gt;\n&quot;
        &lt;&lt; &quot;&lt;xbel version=\&quot;1.0\&quot;&gt;\n&quot;;

    for (int i = 0; i &lt; treeWidget-&gt;topLevelItemCount(); ++i)
        generateItem(treeWidget-&gt;topLevelItem(i), 1);

    out &lt;&lt; &quot;&lt;/xbel&gt;\n&quot;;
    return true;
}

QString XbelGenerator::indent(int depth)
{
    const int IndentSize = 4;
    return QString(IndentSize * depth, ' ');
}

QString XbelGenerator::escapedText(const QString &amp;str)
{
    QString result = str;
    result.replace(&quot;&amp;&quot;, &quot;&amp;amp;&quot;);
    result.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;);
    result.replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;);
    return result;
}

QString XbelGenerator::escapedAttribute(const QString &amp;str)
{
    QString result = escapedText(str);
    result.replace(&quot;\&quot;&quot;, &quot;&quot;&quot;);
    result.prepend(QLatin1Char('&quot;'));
    result.append(QLatin1Char('&quot;'));
    return result;
}

void XbelGenerator::generateItem(QTreeWidgetItem *item, int depth)
{
    QString tagName = item-&gt;data(0, Qt::UserRole).toString();
    if (tagName == &quot;folder&quot;) {
        bool folded = !treeWidget-&gt;isItemExpanded(item);
        out &lt;&lt; indent(depth) &lt;&lt; &quot;&lt;folder folded=\&quot;&quot; &lt;&lt; (folded ? &quot;yes&quot; : &quot;no&quot;)
                             &lt;&lt; &quot;\&quot;&gt;\n&quot;
            &lt;&lt; indent(depth + 1) &lt;&lt; &quot;&lt;title&gt;&quot; &lt;&lt; escapedText(item-&gt;text(0))
                                 &lt;&lt; &quot;&lt;/title&gt;\n&quot;;

        for (int i = 0; i &lt; item-&gt;childCount(); ++i)
            generateItem(item-&gt;child(i), depth + 1);

        out &lt;&lt; indent(depth) &lt;&lt; &quot;&lt;/folder&gt;\n&quot;;
    } else if (tagName == &quot;bookmark&quot;) {
        out &lt;&lt; indent(depth) &lt;&lt; &quot;&lt;bookmark&quot;;
        if (!item-&gt;text(1).isEmpty())
            out &lt;&lt; &quot; href=&quot; &lt;&lt; escapedAttribute(item-&gt;text(1));
        out &lt;&lt; &quot;&gt;\n&quot;
            &lt;&lt; indent(depth + 1) &lt;&lt; &quot;&lt;title&gt;&quot; &lt;&lt; escapedText(item-&gt;text(0))
                                 &lt;&lt; &quot;&lt;/title&gt;\n&quot;
            &lt;&lt; indent(depth) &lt;&lt; &quot;&lt;/bookmark&gt;\n&quot;;
    } else if (tagName == &quot;separator&quot;) {
        out &lt;&lt; indent(depth) &lt;&lt; &quot;&lt;separator/&gt;\n&quot;;
    }
}

</db:programlisting>
</db:article>
