<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Overview</db:title>
<db:productname>QMake</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>QMake Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qmake-manual.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="qmake Manual"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qmake-tutorial.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Getting Started with qmake"/></db:extendedlink>
<db:abstract>
<db:para>QMake Manual.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The qmake tool provides you with a project-oriented system for managing the build process for applications, libraries, and other components. This approach gives you control over the source files used, and allows each of the steps in the process to be described concisely, typically within a single file. qmake expands the information in each project file to a Makefile that executes the necessary commands for compiling and linking.</db:para>
<db:section xml:id="describing-a-project">
<db:title>Describing a Project</db:title>
<db:para>Projects are described by the contents of project (<db:code>.pro</db:code>) files. qmake uses the information within the files to generate Makefiles that contain all the commands that are needed to build each project. Project files typically contain a list of source and header files, general configuration information, and any application-specific details, such as a list of extra libraries to link against, or a list of extra include paths to use.</db:para>
<db:para>Project files can contain a number of different elements, including comments, variable declarations, built-in functions, and some simple control structures. In most simple projects, it is only necessary to declare the source and header files that are used to build the project with some basic configuration options. For more information about how to create a simple project file, see <db:link xlink:href="qmake-tutorial.xml">Getting Started with qmake</db:link>.</db:para>
<db:para>You can create more sophisticated project files for complex projects. For an overview of project files, see <db:link xlink:href="qmake-project-files.xml">Creating Project Files</db:link>. For detailed information about the variables and functions that you can use in project files, see <db:link xlink:href="qmake-reference.xml">Reference</db:link>.</db:para>
<db:para>You can use application or library project templates to specify specialized configuration options to fine tune the build process. For more information, see <db:link xlink:href="qmake-common-projects.xml">Building Common Project Types</db:link>.</db:para>
<db:para>You can use the <db:link xlink:href="https://doc.qt.io/qtcreator/creator-project-creating.html">Qt Creator new project wizard</db:link> to create the project file. You choose the project template, and Qt Creator creates a project file with default values that enable you to build and run the project. You can modify the project file to suit your purposes.</db:para>
<db:para>You can also use qmake to generate project files. For a full description of qmake command line options, see <db:link xlink:href="qmake-running.xml">Running qmake</db:link>.</db:para>
<db:para>The basic configuration features of qmake can handle most cross-platform projects. However, it might be useful, or even necessary, to use some platform-specific variables. For more information, see <db:link xlink:href="qmake-platform-notes.xml">Platform Notes</db:link>.</db:para>
</db:section>
<db:section xml:id="building-a-project">
<db:title>Building a Project</db:title>
<db:para>For simple projects, you only need to run qmake in the top level directory of your project to generate a Makefile. You can then run your platform's <db:code>make</db:code> tool to build the project according to the Makefile.</db:para>
<db:para>For more information about the environment variables that qmake uses when configuring the build process, see <db:link xlink:href="qmake-environment-reference.xml">Configuring qmake</db:link>.</db:para>
<db:note>
<db:para>Add your project build directory to the list of excluded directories of any anti-virus application that runs on your system.</db:para>
</db:note>
</db:section>
<db:section xml:id="using-third-party-libraries">
<db:title>Using Third Party Libraries</db:title>
<db:para>The guide to <db:link xlink:href="third-party-libraries.xml">Third Party Libraries</db:link> shows you how to use simple third party libraries in your Qt project.</db:para>
</db:section>
<db:section xml:id="precompiling-headers">
<db:title>Precompiling Headers</db:title>
<db:para>In large projects, it is possible to take advantage of precompiled header files to speed up the build process. For more information, see <db:link xlink:href="qmake-precompiledheaders.xml">Using Precompiled Headers</db:link>.</db:para>
</db:section>
</db:article>
