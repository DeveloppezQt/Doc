<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for Windows - Graphics Acceleration</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using graphics acceleration with Qt for Windows.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>For <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> to work, a graphics driver that provides Direct 3D 11.1, Vulkan 1.0, or OpenGL 2.1 or higher is required. As of Qt 6, the default for Qt Quick on Windows is Direct3D 11. This is different from Qt 5, where the default was OpenGL, either directly, or through ANGLE, an OpenGL to Direct3D translator. ANGLE is no longer shipped with Qt in Qt 6.</db:para>
<db:para>To force using Direct3D's software rasterizer (WARP), set the environment variable QSG_RHI_PREFER_SOFTWARE_RENDERER to 1.</db:para>
<db:para>To request using Vulkan or OpenGL, both of which require a Vulkan or OpenGL driver to be installed, set the environment variable QSG_RHI_BACKEND to vulkan or opengl, or use the equivalent <db:link xlink:href="qquickwindow.xml#setGraphicsApi">C++ API</db:link> in main().</db:para>
<db:para>While not the default for <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link>, OpenGL is still commonly used in many Qt applications, for example in <db:link xlink:href="qwidget.xml">QWidget</db:link>-based applications building on <db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link> or <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link>. The following sections cover some OpenGL specifics of a Qt build.</db:para>
<db:section xml:id="dynamically-loading-opengl">
<db:title>Dynamically Loading OpenGL</db:title>
<db:para>Qt supports choosing and loading the OpenGL implementation at runtime. This mode is the default, and can be explicitly requested by passing -opengl dynamic to the configure script.</db:para>
<db:programlisting language="cpp" role="bad">configure -opengl dynamic
</db:programlisting>
<db:para>This configuration is the most flexible because no dependencies or assumptions are hardcoded about the OpenGL implementation during build time. It allows robust application deployment. When a given environment fails to provide a proper OpenGL 2.0 implementation, it will fall back automatically to load an alternative to opengl32.dll, the default name of which is opengl32sw.dll. The pre-built Qt packages ship a build of Mesa llvmpipe, a software rasterizer implementation of OpenGL, under that name.</db:para>
<db:para>When configured with -opengl dynamic, neither Qt nor the applications built using qmake or CMake will link to opengl32.lib. Instead, the library is chosen and loaded at runtime. By default, Qt will determine whether the system's opengl32.dll provides OpenGL 2 functions. If these are present, opengl32.dll is used, otherwise it attempts to load opengl32sw.dll. See below for details.</db:para>
<db:para>The loading mechanism can be configured through the QT_OPENGL environment variable and the following application attributes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt::AA_UseDesktopOpenGL Equivalent to setting QT_OPENGL to desktop.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt::AA_UseOpenGLES Has no effect in Qt 6.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt::AA_UseSoftwareOpenGL Equivalent to setting QT_OPENGL to software.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When a certain configuration is requested explicitly, no checks are done at application startup, that is, the system-provided opengl32.dll will not be examined.</db:para>
<db:para>The dynamic loading has a significant impact on applications that contain native OpenGL calls: they may fail to link since opengl32.lib is not automatically specified to the linker. Instead, applications are expected to use the OpenGL functions via the <db:link xlink:href="qopenglfunctions.xml">QOpenGLFunctions</db:link> class. Thus the direct dependency on the OpenGL library is removed and all calls will be routed during runtime to the implementation chosen by Qt. Alternatively, applications are free to make direct OpenGL function calls if they add opengl32.lib to their .pro project files: <db:emphasis>LIBS += opengl32.lib</db:emphasis> (Visual Studio) or <db:emphasis>LIBS += -lopengl32</db:emphasis> (MinGW). The result is, from the application's perspective, equivalent to the -opengl desktop build configuration of Qt.</db:para>
<db:para>Qt::AA_UseSoftwareOpenGL is special in the sense that it will try to load an OpenGL implementation with a non-standard name. The default name is opengl32sw.dll. This allows shipping a software-only OpenGL implementation, for example a build of <db:link xlink:href="http://www.mesa3d.org/llvmpipe.html">Mesa with llvmpipe</db:link>, under this name. If necessary, the filename can be overridden by setting the QT_OPENGL_DLL environment variable.</db:para>
<db:para>It is possible to provide a JSON-format configuration file specifying which OpenGL implementation to use depending on the graphics card and driver version. The location is given by the environment variable QT_OPENGL_BUGLIST. Relative paths are resolved using QLibraryInfo::SettingsPath or QStandardPaths::ConfigLocation. The file utilizes the format of the driver bug list used in <db:link xlink:href="http://www.chromium.org/Home">The Chromium Projects</db:link>. It consists of a list of entries each of which specifies a set of conditions and a list of feature keywords. Typically, device id and vendor id are used to match a specific graphics card. They can be found in the output of the qtdiag6 or dxdiag tool.</db:para>
<db:para>The following feature keywords are relevant for choosing the OpenGL implementation:</db:para>
<db:note>
<db:para>In Qt 6, the legacy ANGLE related keywords (disable_angle, disable_d3d11, disable_d3d9) are accepted, but have no effect.</db:para>
</db:note>
<db:itemizedlist>
<db:listitem>
<db:para>disable_desktopgl - Disables OpenGL. This ensures that Qt does not attempt to use regular OpenGL (opengl32.dll), and that it starts with ANGLE right away. This is useful to prevent bad OpenGL drivers from crashing the application.</db:para>
</db:listitem>
<db:listitem>
<db:para>disable_rotation - Forces the application to run in landscape orientation always. It has no effect when using a software OpenGL implementation. This is intended for drivers that have issues with rotation.</db:para>
</db:listitem>
<db:listitem>
<db:para>disable_program_cache - Disable storing shader program binaries on disk.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>A sample file looks like:</db:para>
<db:programlisting language="cpp" role="bad">{
&quot;entries&quot;: [
{
  &quot;id&quot;: 1,
  &quot;description&quot;: &quot;Disable D3D11 on older nVidia drivers&quot;,
  &quot;os&quot;: {
    &quot;type&quot;: &quot;win&quot;
  },
  &quot;vendor_id&quot;: &quot;0x10de&quot;,
  &quot;device_id&quot;: [&quot;0x0DE9&quot;],
  &quot;driver_version&quot;: {
    &quot;op&quot;: &quot;&amp;lt;=&quot;,
    &quot;value&quot;: &quot;8.17.12.6973&quot;
  },
  &quot;features&quot;: [
    &quot;disable_d3d11&quot;
  ]
},
...
</db:programlisting>
<db:para>When QT_OPENGL_BUGLIST is not specified, a built-in list will be used. This typically includes some older, less-capable graphics cards with disable_desktopgl set, in order to prevent Qt from using their unstable desktop OpenGL implementations and instead fall back to attempting to load the software-based alternative library right away.</db:para>
<db:para>In practice the most common combinations are expected to be the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>disable_desktopgl - In case the system provides OpenGL 2.0 or newer, but the driver is known to be unstable and prone to crash.</db:para>
</db:listitem>
<db:listitem>
<db:para>disable_desktopgl, disable_angle - When no accelerated path is desired. This ensures that the only option Qt tries is the software rasterizer (opengl32sw.dll). Can be useful in virtual machines and applications that are deployed on a wide range of old systems.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The supported keys for matching a given card or driver are the following. Note that some of these are specific to Qt.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>os.type - Operating system: win, linux, macosx, android</db:para>
</db:listitem>
<db:listitem>
<db:para>os.version - Kernel version</db:para>
</db:listitem>
<db:listitem>
<db:para>os.release - Specifies a list of operating system releases on Windows: xp, vista, 7, 8, 8.1, 10.</db:para>
</db:listitem>
<db:listitem>
<db:para>vendor_id - Vendor from the adapter identifier</db:para>
</db:listitem>
<db:listitem>
<db:para>device_id - List of PCI device IDs.</db:para>
</db:listitem>
<db:listitem>
<db:para>driver_version - Driver version from the adapter identifier</db:para>
</db:listitem>
<db:listitem>
<db:para>driver_description - Matches when the value is a substring of the driver description from the adapter identifier</db:para>
</db:listitem>
<db:listitem>
<db:para>gl_vendor - Matches when the value is a substring of the GL_VENDOR string</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To disable all blacklisting, set the environment variable QT_NO_OPENGL_BUGLIST to any value. This will skip reading any configuration files, and instead will assume that nothing is disabled, regardless of the driver or OS.</db:para>
<db:note>
<db:para>While not typically needed, QT_NO_OPENGL_BUGLIST can become relevant in certain virtual environments, with multiple, possibly virtual, graphics adapters present. If the logs from categories like qt.qpa.gl indicate that the detection of the driver and display adapter leads to incorrectly disabling OpenGL, it is then recommended to set this environment variable in order to enable the application to run normally. This environment variable was introduced in Qt 5.15.</db:para>
</db:note>
</db:section>
<db:section xml:id="direct-dependency-to-opengl32-dll">
<db:title>Direct dependency to opengl32.dll</db:title>
<db:para>An alternative to the default dynamic OpenGL builds is to depend directly on opengl32.dll. For this mode, pass the command line options -opengl desktop to the configure script.</db:para>
<db:programlisting language="cpp" role="bad">configure -opengl desktop
</db:programlisting>
<db:note>
<db:para>Using EGL and OpenGL ES is not supported on Windows. In Qt 6, OpenGL on Windows always implies using WGL as the windowing system interface.</db:para>
</db:note>
<db:para>In such Qt builds, many Qt shared libraries, and also Qt applications will have a dependency to opengl32.dll, and therefore using an alternative library is not possible.</db:para>
</db:section>
</db:article>
