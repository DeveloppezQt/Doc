<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>40000 Chips</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Visualizes a huge graphic view scene with 40000 chip items.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the demonstration applications of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Digia gives you certain additional
** rights.  These rights are described in the Digia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;view.h&quot;

#ifndef QT_NO_PRINTER
#include &lt;QPrinter&gt;
#include &lt;QPrintDialog&gt;
#endif
#ifndef QT_NO_OPENGL
#include &lt;QtOpenGL&gt;
#else
#include &lt;QtWidgets&gt;
#endif
#include &lt;qmath.h&gt;

#ifndef QT_NO_WHEELEVENT
void GraphicsView::wheelEvent(QWheelEvent *e)
{
    if (e-&gt;modifiers() &amp; Qt::ControlModifier) {
        if (e-&gt;delta() &gt; 0)
            view-&gt;zoomIn(6);
        else
            view-&gt;zoomOut(6);
        e-&gt;accept();
    } else {
        QGraphicsView::wheelEvent(e);
    }
}
#endif

View::View(const QString &amp;name, QWidget *parent)
    : QFrame(parent)
{
    setFrameStyle(Sunken | StyledPanel);
    graphicsView = new GraphicsView(this);
    graphicsView-&gt;setRenderHint(QPainter::Antialiasing, false);
    graphicsView-&gt;setDragMode(QGraphicsView::RubberBandDrag);
    graphicsView-&gt;setOptimizationFlags(QGraphicsView::DontSavePainterState);
    graphicsView-&gt;setViewportUpdateMode(QGraphicsView::SmartViewportUpdate);
    graphicsView-&gt;setTransformationAnchor(QGraphicsView::AnchorUnderMouse);

    int size = style()-&gt;pixelMetric(QStyle::PM_ToolBarIconSize);
    QSize iconSize(size, size);

    QToolButton *zoomInIcon = new QToolButton;
    zoomInIcon-&gt;setAutoRepeat(true);
    zoomInIcon-&gt;setAutoRepeatInterval(33);
    zoomInIcon-&gt;setAutoRepeatDelay(0);
    zoomInIcon-&gt;setIcon(QPixmap(&quot;:/zoomin.png&quot;));
    zoomInIcon-&gt;setIconSize(iconSize);
    QToolButton *zoomOutIcon = new QToolButton;
    zoomOutIcon-&gt;setAutoRepeat(true);
    zoomOutIcon-&gt;setAutoRepeatInterval(33);
    zoomOutIcon-&gt;setAutoRepeatDelay(0);
    zoomOutIcon-&gt;setIcon(QPixmap(&quot;:/zoomout.png&quot;));
    zoomOutIcon-&gt;setIconSize(iconSize);
    zoomSlider = new QSlider;
    zoomSlider-&gt;setMinimum(0);
    zoomSlider-&gt;setMaximum(500);
    zoomSlider-&gt;setValue(250);
    zoomSlider-&gt;setTickPosition(QSlider::TicksRight);

    // Zoom slider layout
    QVBoxLayout *zoomSliderLayout = new QVBoxLayout;
    zoomSliderLayout-&gt;addWidget(zoomInIcon);
    zoomSliderLayout-&gt;addWidget(zoomSlider);
    zoomSliderLayout-&gt;addWidget(zoomOutIcon);

    QToolButton *rotateLeftIcon = new QToolButton;
    rotateLeftIcon-&gt;setIcon(QPixmap(&quot;:/rotateleft.png&quot;));
    rotateLeftIcon-&gt;setIconSize(iconSize);
    QToolButton *rotateRightIcon = new QToolButton;
    rotateRightIcon-&gt;setIcon(QPixmap(&quot;:/rotateright.png&quot;));
    rotateRightIcon-&gt;setIconSize(iconSize);
    rotateSlider = new QSlider;
    rotateSlider-&gt;setOrientation(Qt::Horizontal);
    rotateSlider-&gt;setMinimum(-360);
    rotateSlider-&gt;setMaximum(360);
    rotateSlider-&gt;setValue(0);
    rotateSlider-&gt;setTickPosition(QSlider::TicksBelow);

    // Rotate slider layout
    QHBoxLayout *rotateSliderLayout = new QHBoxLayout;
    rotateSliderLayout-&gt;addWidget(rotateLeftIcon);
    rotateSliderLayout-&gt;addWidget(rotateSlider);
    rotateSliderLayout-&gt;addWidget(rotateRightIcon);

    resetButton = new QToolButton;
    resetButton-&gt;setText(tr(&quot;0&quot;));
    resetButton-&gt;setEnabled(false);

    // Label layout
    QHBoxLayout *labelLayout = new QHBoxLayout;
    label = new QLabel(name);
    label2 = new QLabel(tr(&quot;Pointer Mode&quot;));
    selectModeButton = new QToolButton;
    selectModeButton-&gt;setText(tr(&quot;Select&quot;));
    selectModeButton-&gt;setCheckable(true);
    selectModeButton-&gt;setChecked(true);
    dragModeButton = new QToolButton;
    dragModeButton-&gt;setText(tr(&quot;Drag&quot;));
    dragModeButton-&gt;setCheckable(true);
    dragModeButton-&gt;setChecked(false);
    antialiasButton = new QToolButton;
    antialiasButton-&gt;setText(tr(&quot;Antialiasing&quot;));
    antialiasButton-&gt;setCheckable(true);
    antialiasButton-&gt;setChecked(false);
    openGlButton = new QToolButton;
    openGlButton-&gt;setText(tr(&quot;OpenGL&quot;));
    openGlButton-&gt;setCheckable(true);
#ifndef QT_NO_OPENGL
    openGlButton-&gt;setEnabled(QGLFormat::hasOpenGL());
#else
    openGlButton-&gt;setEnabled(false);
#endif
    printButton = new QToolButton;
    printButton-&gt;setIcon(QIcon(QPixmap(&quot;:/fileprint.png&quot;)));

    QButtonGroup *pointerModeGroup = new QButtonGroup;
    pointerModeGroup-&gt;setExclusive(true);
    pointerModeGroup-&gt;addButton(selectModeButton);
    pointerModeGroup-&gt;addButton(dragModeButton);

    labelLayout-&gt;addWidget(label);
    labelLayout-&gt;addStretch();
    labelLayout-&gt;addWidget(label2);
    labelLayout-&gt;addWidget(selectModeButton);
    labelLayout-&gt;addWidget(dragModeButton);
    labelLayout-&gt;addStretch();
    labelLayout-&gt;addWidget(antialiasButton);
    labelLayout-&gt;addWidget(openGlButton);
    labelLayout-&gt;addWidget(printButton);

    QGridLayout *topLayout = new QGridLayout;
    topLayout-&gt;addLayout(labelLayout, 0, 0);
    topLayout-&gt;addWidget(graphicsView, 1, 0);
    topLayout-&gt;addLayout(zoomSliderLayout, 1, 1);
    topLayout-&gt;addLayout(rotateSliderLayout, 2, 0);
    topLayout-&gt;addWidget(resetButton, 2, 1);
    setLayout(topLayout);

    connect(resetButton, SIGNAL(clicked()), this, SLOT(resetView()));
    connect(zoomSlider, SIGNAL(valueChanged(int)), this, SLOT(setupMatrix()));
    connect(rotateSlider, SIGNAL(valueChanged(int)), this, SLOT(setupMatrix()));
    connect(graphicsView-&gt;verticalScrollBar(), SIGNAL(valueChanged(int)),
            this, SLOT(setResetButtonEnabled()));
    connect(graphicsView-&gt;horizontalScrollBar(), SIGNAL(valueChanged(int)),
            this, SLOT(setResetButtonEnabled()));
    connect(selectModeButton, SIGNAL(toggled(bool)), this, SLOT(togglePointerMode()));
    connect(dragModeButton, SIGNAL(toggled(bool)), this, SLOT(togglePointerMode()));
    connect(antialiasButton, SIGNAL(toggled(bool)), this, SLOT(toggleAntialiasing()));
    connect(openGlButton, SIGNAL(toggled(bool)), this, SLOT(toggleOpenGL()));
    connect(rotateLeftIcon, SIGNAL(clicked()), this, SLOT(rotateLeft()));
    connect(rotateRightIcon, SIGNAL(clicked()), this, SLOT(rotateRight()));
    connect(zoomInIcon, SIGNAL(clicked()), this, SLOT(zoomIn()));
    connect(zoomOutIcon, SIGNAL(clicked()), this, SLOT(zoomOut()));
    connect(printButton, SIGNAL(clicked()), this, SLOT(print()));

    setupMatrix();
}

QGraphicsView *View::view() const
{
    return static_cast&lt;QGraphicsView *&gt;(graphicsView);
}

void View::resetView()
{
    zoomSlider-&gt;setValue(250);
    rotateSlider-&gt;setValue(0);
    setupMatrix();
    graphicsView-&gt;ensureVisible(QRectF(0, 0, 0, 0));

    resetButton-&gt;setEnabled(false);
}

void View::setResetButtonEnabled()
{
    resetButton-&gt;setEnabled(true);
}

void View::setupMatrix()
{
    qreal scale = qPow(qreal(2), (zoomSlider-&gt;value() - 250) / qreal(50));

    QMatrix matrix;
    matrix.scale(scale, scale);
    matrix.rotate(rotateSlider-&gt;value());

    graphicsView-&gt;setMatrix(matrix);
    setResetButtonEnabled();
}

void View::togglePointerMode()
{
    graphicsView-&gt;setDragMode(selectModeButton-&gt;isChecked()
                              ? QGraphicsView::RubberBandDrag
                              : QGraphicsView::ScrollHandDrag);
    graphicsView-&gt;setInteractive(selectModeButton-&gt;isChecked());
}

void View::toggleOpenGL()
{
#ifndef QT_NO_OPENGL
    graphicsView-&gt;setViewport(openGlButton-&gt;isChecked() ? new QGLWidget(QGLFormat(QGL::SampleBuffers)) : new QWidget);
#endif
}

void View::toggleAntialiasing()
{
    graphicsView-&gt;setRenderHint(QPainter::Antialiasing, antialiasButton-&gt;isChecked());
}

void View::print()
{
#if !defined(QT_NO_PRINTER) &amp;&amp; !defined(QT_NO_PRINTDIALOG)
    QPrinter printer;
    QPrintDialog dialog(&amp;printer, this);
    if (dialog.exec() == QDialog::Accepted) {
        QPainter painter(&amp;printer);
        graphicsView-&gt;render(&amp;painter);
    }
#endif
}

void View::zoomIn(int level)
{
    zoomSlider-&gt;setValue(zoomSlider-&gt;value() + level);
}

void View::zoomOut(int level)
{
    zoomSlider-&gt;setValue(zoomSlider-&gt;value() - level);
}

void View::rotateLeft()
{
    rotateSlider-&gt;setValue(rotateSlider-&gt;value() - 10);
}

void View::rotateRight()
{
    rotateSlider-&gt;setValue(rotateSlider-&gt;value() + 10);
}

</db:programlisting>
</db:article>
