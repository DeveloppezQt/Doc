<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAxWidget Class</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaxwidget.xml">QAxWidget</db:link> class is a <db:link xlink:href="qwidget.xml">QWidget</db:link> that wraps an ActiveX control.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAxWidget</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += axcontainer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link> and <db:link xlink:href="qaxbase.xml" xlink:role="class">QAxBase</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qaxwidget.xml">QAxWidget</db:link> can be instantiated as an empty object, with the name of the ActiveX control it should wrap, or with an existing interface pointer to the ActiveX control. The ActiveX control's properties, methods and events which only use <db:link xlink:href="qaxbase.xml">QAxBase</db:link> supported data types, become available as Qt properties, slots and signals. The base class <db:link xlink:href="qaxbase.xml">QAxBase</db:link> provides an API to access the ActiveX directly through the <db:code>IUnknown</db:code> pointer.</db:para>
<db:para><db:link xlink:href="qaxwidget.xml">QAxWidget</db:link> is a <db:link xlink:href="qwidget.xml">QWidget</db:link> and can mostly be used as such, e.g. it can be organized in a widget hierarchy and layouts or act as an event filter. Standard widget properties, e.g. <db:link xlink:href="qwidget.xml#enabled-prop">enabled</db:link> are supported, but it depends on the ActiveX control to implement support for ambient properties like e.g. palette or font. <db:link xlink:href="qaxwidget.xml">QAxWidget</db:link> tries to provide the necessary hints.</db:para>
<db:para>However, you cannot reimplement Qt-specific event handlers like mousePressEvent or keyPressEvent and expect them to be called reliably. The embedded control covers the <db:link xlink:href="qaxwidget.xml">QAxWidget</db:link> completely, and usually handles the user interface itself. Use control-specific APIs (i.e. listen to the signals of the control), or use standard COM techniques like window procedure subclassing.</db:para>
<db:para><db:link xlink:href="qaxwidget.xml">QAxWidget</db:link> also inherits most of its ActiveX-related functionality from <db:link xlink:href="qaxbase.xml">QAxBase</db:link>, notably <db:link xlink:href="qaxbase.xml#dynamicCall">dynamicCall</db:link>() and <db:link xlink:href="qaxbase.xml#querySubObject">querySubObject</db:link>().</db:para>
<db:warning>
<db:para>You can subclass <db:link xlink:href="qaxwidget.xml">QAxWidget</db:link>, but you cannot use the <db:code>Q_OBJECT</db:code> macro in the subclass (the generated moc-file will not compile), so you cannot add further signals, slots or properties. This limitation is due to the metaobject information generated in runtime. To work around this problem, aggregate the <db:link xlink:href="qaxwidget.xml">QAxWidget</db:link> as a member of the <db:link xlink:href="qobject.xml">QObject</db:link> subclass.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbase.xml">QAxBase</db:link></db:member>
<db:member><db:link xlink:href="qaxobject.xml">QAxObject</db:link></db:member>
<db:member><db:link xlink:href="qaxscript.xml">QAxScript</db:link></db:member>
<db:member><db:link xlink:href="activeqt-index.xml">ActiveQt Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAxWidget">
<db:title>[explicit] QAxWidget::QAxWidget(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR, Qt::WindowFlags <db:emphasis>f</db:emphasis> = Qt::WindowFlags())</db:title>
<db:para>Creates an empty <db:link xlink:href="qaxwidget.xml">QAxWidget</db:link> widget and propagates <db:code role="parameter">parent</db:code> and <db:code role="parameter">f</db:code> to the <db:link xlink:href="qwidget.xml">QWidget</db:link> constructor. To initialize a control, call <db:link xlink:href="qaxbase.xml#control-prop">setControl</db:link>().</db:para>
</db:section>
<db:section xml:id="QAxWidget-1">
<db:title>[explicit] QAxWidget::QAxWidget(IUnknown *<db:emphasis>iface</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR, Qt::WindowFlags <db:emphasis>f</db:emphasis> = Qt::WindowFlags())</db:title>
<db:para>Creates a <db:link xlink:href="qaxwidget.xml">QAxWidget</db:link> that wraps the COM object referenced by <db:code role="parameter">iface</db:code>. <db:code role="parameter">parent</db:code> and <db:code role="parameter">f</db:code> are propagated to the <db:link xlink:href="qwidget.xml">QWidget</db:link> contructor.</db:para>
</db:section>
<db:section xml:id="QAxWidget-2">
<db:title>[explicit] QAxWidget::QAxWidget(const QString &amp;<db:emphasis>c</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR, Qt::WindowFlags <db:emphasis>f</db:emphasis> = Qt::WindowFlags())</db:title>
<db:para>Creates an <db:link xlink:href="qaxwidget.xml">QAxWidget</db:link> widget and initializes the ActiveX control <db:code role="parameter">c</db:code>. <db:code role="parameter">parent</db:code> and <db:code role="parameter">f</db:code> are propagated to the <db:link xlink:href="qwidget.xml">QWidget</db:link> contructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbase.xml#control-prop">setControl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QAxWidget">
<db:title>[virtual noexcept] QAxWidget::~QAxWidget()</db:title>
<db:para>Shuts down the ActiveX control and destroys the <db:link xlink:href="qaxwidget.xml">QAxWidget</db:link> widget, cleaning up all allocated resources.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxwidget.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QAxWidget::changeEvent(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>[override virtual] void QAxWidget::clear()</db:title>
<db:para>Reimplements: <db:link xlink:href="qaxbase.xml#clear" role="function">QAxBase::clear()</db:link>.</db:para>
<db:para>Shuts down the ActiveX control.</db:para>
</db:section>
<db:section xml:id="connectNotify">
<db:title>[override virtual protected] void QAxWidget::connectNotify(const QMetaMethod &amp;<db:emphasis>signal</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#connectNotify" role="function">QObject::connectNotify(const QMetaMethod &amp;signal)</db:link>.</db:para>
</db:section>
<db:section xml:id="createAggregate">
<db:title>[virtual] QAxAggregated *QAxWidget::createAggregate()</db:title>
<db:para>Reimplement this function when you want to implement additional COM interfaces for the client site of the ActiveX control, or when you want to provide alternative implementations of COM interfaces. Return a new object of a <db:link xlink:href="qaxaggregated.xml">QAxAggregated</db:link> subclass.</db:para>
<db:para>The default implementation returns the null pointer.</db:para>
</db:section>
<db:section xml:id="createHostWindow">
<db:title>[virtual protected] bool QAxWidget::createHostWindow(bool <db:emphasis>initialized</db:emphasis>)</db:title>
<db:para>Creates the client site for the ActiveX control, and returns true if the control could be embedded successfully, otherwise returns false. If <db:code role="parameter">initialized</db:code> is true the control has already been initialized.</db:para>
<db:para>This function is called by <db:link xlink:href="qaxwidget.xml#initialize">initialize</db:link>(). If you reimplement initialize to customize the actual control instantiation, call this function in your reimplementation to have the control embedded by the default client side. Creates the client site for the ActiveX control, and returns true if the control could be embedded successfully, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="createHostWindow-1">
<db:title>[protected, since 4.4] bool QAxWidget::createHostWindow(bool <db:emphasis>initialized</db:emphasis>, const QByteArray &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Creates the client site for the ActiveX control, and returns true if the control could be embedded successfully, otherwise returns false. If <db:code role="parameter">initialized</db:code> is false the control will be initialized using the <db:code role="parameter">data</db:code>. The control will be initialized through either IPersistStreamInit or IPersistStorage interface.</db:para>
<db:para>If the control needs to be initialized using custom data, call this function in your reimplementation of <db:link xlink:href="qaxwidget.xml#initialize">initialize</db:link>(). This function is not called by the default implementation of <db:link xlink:href="qaxwidget.xml#initialize">initialize</db:link>().</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
</db:section>
<db:section xml:id="doVerb">
<db:title>[since 4.1] bool QAxWidget::doVerb(const QString &amp;<db:emphasis>verb</db:emphasis>)</db:title>
<db:para>Requests the ActiveX control to perform the action <db:code role="parameter">verb</db:code>. The possible verbs are returned by <db:link xlink:href="qaxbase.xml#verbs">verbs</db:link>().</db:para>
<db:para>The function returns true if the object could perform the action, otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
</db:section>
<db:section xml:id="initialize">
<db:title>[override virtual protected, since 4.2] bool QAxWidget::initialize(IUnknown **<db:emphasis>ptr</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qaxbase.xml#initialize" role="function">QAxBase::initialize(IUnknown **ptr)</db:link>.</db:para>
<db:para>Calls <db:link xlink:href="qaxbase.xml#initialize">QAxBase::initialize</db:link>(<db:code role="parameter">ptr</db:code>), and embeds the control in this widget by calling <db:link xlink:href="qaxwidget.xml#createHostWindow">createHostWindow</db:link>(false) if successful.</db:para>
<db:para>To initialize the control before it is activated, reimplement this function and add your initialization code before you call <db:link xlink:href="qaxwidget.xml#createHostWindow">createHostWindow</db:link>(true).</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QAxWidget::minimumSizeHint() const</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#minimumSizeHint-prop" role="property">QWidget::minimumSizeHint</db:link>.</db:para>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QAxWidget::resizeEvent(<db:emphasis>QResizeEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#resizeEvent" role="function">QWidget::resizeEvent(QResizeEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QAxWidget::sizeHint() const</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#sizeHint-prop" role="property">QWidget::sizeHint</db:link>.</db:para>
</db:section>
<db:section xml:id="translateKeyEvent">
<db:title>[virtual protected] bool QAxWidget::translateKeyEvent(int <db:emphasis>message</db:emphasis>, int <db:emphasis>keycode</db:emphasis>) const</db:title>
<db:para>Reimplement this function to pass certain key events to the ActiveX control. <db:code role="parameter">message</db:code> is the Window message identifier specifying the message type (ie. WM_KEYDOWN), and <db:code role="parameter">keycode</db:code> is the virtual keycode (ie. VK_TAB).</db:para>
<db:para>If the function returns true the key event is passed on to the ActiveX control, which then either processes the event or passes the event on to Qt.</db:para>
<db:para>If the function returns false the processing of the key event is ignored by ActiveQt, ie. the ActiveX control might handle it or not.</db:para>
<db:para>The default implementation returns true for the following cases:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>WM_SYSKEYDOWN</db:para>
</db:th>
<db:th>
<db:para>WM_SYSKEYUP</db:para>
</db:th>
<db:th>
<db:para>WM_KEYDOWN</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>All keycodes</db:para>
</db:td>
<db:td>
<db:para>VK_MENU</db:para>
</db:td>
<db:td>
<db:para>VK_TAB, VK_DELETE and all non-arrow-keys in combination with VK_SHIFT, VK_CONTROL or VK_MENU</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This table is the result of experimenting with popular ActiveX controls, ie. Internet Explorer and Microsoft Office applications, but for some controls it might require modification.</db:para>
</db:section>
</db:section>
</db:article>
