<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Signal handler parameters</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>[signal-handler-parameters] The signal handler does not satisfy the signal types.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This warning category is spelled [signal-handler-parameters] by qmllint.</db:para>
<db:para>This warning category has multiple warnings, described in the sections below:</db:para>
<db:section xml:id="type-of-parameter-in-signal-was-not-found">
<db:title>Type of parameter in signal was not found</db:title>
<db:section xml:id="what-happened">
<db:title>What happened?</db:title>
<db:para>A signal handler tried to handle a signal with parameters of unknown QML types.</db:para>
<db:para>Usually, this happens when handling C++ defined signals in QML when the module with the C++ defined signal does not properly declare its QML dependency to another QML module. If the module with the C++ defined signal compiles, then this is a sign that a dependency was only declared on the C++ level and not on <db:link xlink:href="qt-add-qml-module.xml#declaring-module-dependencies">the QML module level</db:link>.</db:para>
<db:note>
<db:para>If you are importing QML modules with external dependencies, verify that they are actually installed, and that their modules end up in an <db:link xlink:href="qtqml-syntax-imports.xml#qml-import-path">import path</db:link>.</db:para>
</db:note>
<db:para>The warning might also indicate that the parameter type of the C++ defined signal does not have a QML counterpart. The parameter type might be missing the <db:link xlink:href="qqmlintegration-h-qtqml-proxy.xml#QML_ELEMENT">QML_ELEMENT</db:link> macro, for example. Refer to <db:link xlink:href="qtqml-cppintegration-definetypes.xml">Defining QML Types from C++</db:link> or <db:link xlink:href="qtqml-cppintegration-overview.xml">Overview - QML and C++ Integration</db:link> in this case.</db:para>
</db:section>
<db:section xml:id="why-is-this-bad">
<db:title>Why is this bad?</db:title>
<db:para>In the first case, the module with the C++ signal has an undeclared dependency on the QML module level, which makes it hard to use the module, as users of the module need to guess the module's hidden dependencies.</db:para>
<db:para>In both cases, QML tooling is not able to find the QML counterpart of the C++ type: the <db:link xlink:href="qtqml-qtquick-compiler-tech.xml">compiler</db:link> can't compile this signal handler to C++ and <db:link xlink:href="qtqml-tooling-qmllint.xml">qmllint</db:link> as well as <db:link xlink:href="qtqml-tooling-qmlls.xml">QML Language Server</db:link> can't analyze this handler.</db:para>
</db:section>
<db:section xml:id="example">
<db:title>Example</db:title>
<db:para>Let our module have a C++ class with one helloWorld signal:</db:para>
<db:programlisting language="cpp">#include &lt;QQuickItem&gt;
#include &lt;QtQml/qqmlregistration.h&gt;
#include &lt;QObject&gt;

class MyCppObject : public QObject
{
 Q_OBJECT
 QML_ELEMENT
public:
 MyCppObject(QObject *parent = nullptr)
     : QObject(parent)
 {}

signals:
 void helloWorld(QQuickItem *i);

};
</db:programlisting>
<db:para>with following CMakeLists.txt:</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 6.5 REQUIRED COMPONENTS Quick QuickControls2)

qt_standard_project_setup(REQUIRES 6.5)

qt_add_executable(mymodule
 main.cpp
)

qt_add_qml_module(mymodule
    URI MyModule
    VERSION 1.0
    QML_FILES Main.qml
    SOURCES mycppobject.cpp mycppobject.h
)

# declare C++ dependency to Quick
target_link_libraries(appuntitled27
 PRIVATE Qt6::Quick
)
</db:programlisting>
<db:para>The C++ dependency Quick was declared, such that this class can compile and the QQuickItem include can be found. Also, mymodule does not have any dependency on QtQuick.</db:para>
<db:para>Now, lets try to handle this helloWorld signal in QML:</db:para>
<db:programlisting language="qml">import MyModule // name of the module with MyCppObject

MyCppObject {
    onHelloWorld: function (x) { console.log(x); } // not ok: Type QQuickItem was not found!
}
</db:programlisting>
<db:para>The reason of the warning message is that in the QML code, QQuickItem and its QML counterpart Item are not known: the dependency 'QtQuick' of MyModule was not declared in the CMakeLists.txt!</db:para>
<db:para>You can add it as following in the qt_add_qml_module() call:</db:para>
<db:programlisting language="cpp" role="bad">qt_add_qml_module(mymodule
    URI MyModule
    ...
    # declare QML dependencies to QtQuick:
    DEPENDENCIES QtQuick
    ...
)
</db:programlisting>
<db:para>Now, the QML code should be fine again!</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-handler-has-more-formal-parameters-than-the-signal-it-handles">
<db:title>Signal handler has more formal parameters than the signal it handles</db:title>
<db:section xml:id="signal-handler-has-more-formal-parameters-than-the-signal-it-handles-what-happened-5">
<db:title>What happened?</db:title>
<db:para>A signal handler expects more parameters than what the signal will actually provide.</db:para>
</db:section>
<db:section xml:id="signal-handler-has-more-formal-parameters-than-the-signal-it-handles-why-is-this-bad-6">
<db:title>Why is this bad?</db:title>
<db:para>The extra parameters will be undefined.</db:para>
</db:section>
<db:section xml:id="signal-handler-has-more-formal-parameters-than-the-signal-it-handles-example-7">
<db:title>Example</db:title>
<db:programlisting language="qml">import QtQuick

Item {
    signal helloWorld(x: QtObject)  // signal expects only one parameter

    onHelloWorld: function (x,y,z) {} // not ok: signal handler handles three parameters
}
</db:programlisting>
<db:para>To fix this warning, remove the extra parameters of the signal handler or add the missing parameters to the signal's declaration:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    signal helloWorld(x: QtObject)  // signal expects only one parameter

    onHelloWorld: function (x) {} // ok: signal handler handles one parameter

    signal alternativeHelloWorld(x: QtObject, y: int, y: int)  // signal expects three parameters

    onAlternativeHelloWorld: function (x,y,z) {} // ok: signal handler handles three parameters
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="the-signal-has-a-parameter-of-the-same-name">
<db:title>The signal has a parameter of the same name</db:title>
<db:section xml:id="the-signal-has-a-parameter-of-the-same-name-what-happened-9">
<db:title>What happened?</db:title>
<db:para>The signal or signal handler might have swapped some of its arguments, or some arguments might be missing.</db:para>
</db:section>
<db:section xml:id="the-signal-has-a-parameter-of-the-same-name-why-is-this-bad-10">
<db:title>Why is this bad?</db:title>
<db:para>This is very probably a typo and not intended by the user.</db:para>
</db:section>
<db:section xml:id="the-signal-has-a-parameter-of-the-same-name-example-11">
<db:title>Example</db:title>
<db:section xml:id="missing-arguments">
<db:title>Missing Arguments</db:title>
<db:programlisting language="qml">import QtQuick

Item {
    signal helloWorld(x: QtObject, y: int)

    onHelloWorld: function (y) {} // not ok: it seems that x was forgotten
}
</db:programlisting>
<db:para>To fix this warning, add the missing parameters or rename the first parameter:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    signal helloWorld(x: QtObject, y: int)

    onHelloWorld: function (x, y) {} // ok: parameters have the same order as in helloWorld

    signal alternativeHelloWorld(x: QtObject, y: int)

    onAlternativeHelloWorld: function (x) {} // ok: parameters have the same order as in helloWorld, even if y is missing
}
</db:programlisting>
</db:section>
<db:section xml:id="swapped-arguments">
<db:title>Swapped arguments</db:title>
<db:programlisting language="qml">import QtQuick

Item {
    signal helloWorld(x: QtObject, y: int)

    onHelloWorld: function (y, x) {} // not ok: helloWorld expects first 'x' then 'y'
}
</db:programlisting>
<db:para>To fix this warning, reorder the parameters in the correct order:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    signal helloWorld(x: QtObject, y: int)

    onHelloWorld: function (x, y) {} // ok: parameters have the same order as in helloWorld
}
</db:programlisting>
</db:section>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt-add-qml-module.xml#declaring-module-dependencies">qt_add_qml_module#declaring-module-dependencies</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
