<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QHelpFilterEngine Class</db:title>
<db:productname>QtHelp</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Help Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qhelpfilterengine.xml">QHelpFilterEngine</db:link> class provides a filtered view of the help contents.</db:para>
<db:para>This class was introduced in Qt 5.13.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QHelpFilterEngine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.13</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Help)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Help)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += help</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The filter engine allows the management of filters associated with a <db:link xlink:href="qhelpenginecore.xml">QHelpEngineCore</db:link> instance. The help engine internally creates an instance of the filter engine, which can be accessed by calling <db:link xlink:href="qhelpenginecore.xml#filterEngine">QHelpEngineCore::filterEngine</db:link>(). Therefore, the public constructor of this class is disabled.</db:para>
<db:para>The filters are identified by a filter name string. Filter details are described by the <db:link xlink:href="qhelpfilterdata.xml">QHelpFilterData</db:link> class.</db:para>
<db:para>The filter engine allows for adding new filters and changing the existing filters' data through the <db:link xlink:href="qhelpfilterengine.xml#setFilterData">setFilterData</db:link>() method. An existing filter can be removed through the <db:link xlink:href="qhelpfilterengine.xml#removeFilter">removeFilter</db:link>() method.</db:para>
<db:para>Out of the registered filters one can be marked as the active one. The active filter will be used by the associated help engine for returning filtered results of many different functions, such as content, index, or search results. If no filter is marked active, the help engine returns the full results list available.</db:para>
<db:para>The active filter is returned by <db:link xlink:href="qhelpfilterengine.xml#activeFilter">activeFilter</db:link>() and it can be changed by <db:link xlink:href="qhelpfilterengine.xml#setActiveFilter">setActiveFilter</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpenginecore.xml">QHelpEngineCore</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="activeFilter">
<db:title>QString QHelpFilterEngine::activeFilter() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>activeFilter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString activeFilter() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the currently active filter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpfilterengine.xml#setActiveFilter">setActiveFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="availableComponents">
<db:title>QStringList QHelpFilterEngine::availableComponents() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>availableComponents</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList availableComponents() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of all available components defined in all registered documentation files.</db:para>
</db:section>
<db:section xml:id="availableVersions">
<db:title>[since 5.15] QList&lt;QVersionNumber&gt; QHelpFilterEngine::availableVersions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QVersionNumber&gt;</db:type>
<db:methodname>availableVersions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QVersionNumber&gt; availableVersions() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of all available versions defined in all registered documentation files.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="filterActivated">
<db:title>void QHelpFilterEngine::filterActivated(const QString &amp;<db:emphasis>newFilter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>filterActivated</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>newFilter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void filterActivated(const QString &amp;newFilter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the active filter is set. <db:code role="parameter">newFilter</db:code> specifies the name of the filter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpfilterengine.xml#setActiveFilter">setActiveFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filterData">
<db:title>QHelpFilterData QHelpFilterEngine::filterData(const QString &amp;<db:emphasis>filterName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QHelpFilterData</db:type>
<db:methodname>filterData</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filterName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHelpFilterData filterData(const QString &amp;filterName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the filter details associated with <db:code role="parameter">filterName</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpfilterengine.xml#setFilterData">setFilterData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filters">
<db:title>QStringList QHelpFilterEngine::filters() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>filters</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList filters() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of all filter names defined inside the filter engine.</db:para>
</db:section>
<db:section xml:id="indices">
<db:title>[since 5.15] QStringList QHelpFilterEngine::indices() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>indices</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList indices() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a sorted list of available indices. The returned list contents depend on the active filter, and therefore only the indices registered for the active filter will be returned.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="indices-1">
<db:title>[since 5.15] QStringList QHelpFilterEngine::indices(const QString &amp;<db:emphasis>filterName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>indices</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filterName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList indices(const QString &amp;filterName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a sorted list of available indices, filtered by <db:code role="parameter">filterName</db:code>. The returned list contents depend on the passed filter, and therefore only the indices registered for this filter will be returned. If you want to get all available indices unfiltered, pass empty string as <db:code role="parameter">filterName</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="namespaceToComponent">
<db:title>QMap&lt;QString, QString&gt; QHelpFilterEngine::namespaceToComponent() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMap&lt;QString, QString&gt;</db:type>
<db:methodname>namespaceToComponent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMap&lt;QString, QString&gt; namespaceToComponent() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the map of all the available namespaces as keys together with their associated components as values.</db:para>
</db:section>
<db:section xml:id="namespaceToVersion">
<db:title>QMap&lt;QString, QVersionNumber&gt; QHelpFilterEngine::namespaceToVersion() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMap&lt;QString, QVersionNumber&gt;</db:type>
<db:methodname>namespaceToVersion</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMap&lt;QString, QVersionNumber&gt; namespaceToVersion() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the map of all the available namespaces as keys together with their associated versions as values.</db:para>
</db:section>
<db:section xml:id="namespacesForFilter">
<db:title>QStringList QHelpFilterEngine::namespacesForFilter(const QString &amp;<db:emphasis>filterName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>namespacesForFilter</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filterName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList namespacesForFilter(const QString &amp;filterName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of all registered documentation namespaces that match the filter identified by <db:code role="parameter">filterName</db:code>.</db:para>
</db:section>
<db:section xml:id="removeFilter">
<db:title>bool QHelpFilterEngine::removeFilter(const QString &amp;<db:emphasis>filterName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>removeFilter</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filterName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removeFilter(const QString &amp;filterName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the filter identified by <db:code role="parameter">filterName</db:code>.</db:para>
<db:para>Returns <db:code>true</db:code> if removing the filter succeeded, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="setActiveFilter">
<db:title>bool QHelpFilterEngine::setActiveFilter(const QString &amp;<db:emphasis>filterName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setActiveFilter</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filterName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setActiveFilter(const QString &amp;filterName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes the currently active filter to <db:code role="parameter">filterName</db:code>.</db:para>
<db:para>Returns <db:code>true</db:code> if changing the filter succeeded, otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpfilterengine.xml#activeFilter">activeFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFilterData">
<db:title>bool QHelpFilterEngine::setFilterData(const QString &amp;<db:emphasis>filterName</db:emphasis>, const QHelpFilterData &amp;<db:emphasis>filterData</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setFilterData</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filterName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QHelpFilterData &amp;</db:type>
<db:parameter>filterData</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setFilterData(const QString &amp;filterName, const QHelpFilterData &amp;filterData)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes the existing filter details of the filter identified by <db:code role="parameter">filterName</db:code> to <db:code role="parameter">filterData</db:code>. If the filter does not exist, a new filter is created.</db:para>
<db:para>Returns <db:code>true</db:code> if setting the filter succeeded, otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpfilterengine.xml#filterData">filterData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
