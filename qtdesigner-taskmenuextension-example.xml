<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Task Menu Extension Example</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>Creating a custom widget plugin for <db:emphasis>Qt Designer</db:emphasis> and providing custom task menu entries that are associated with the plugin.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Task Menu Extension example shows how to create a custom widget plugin for <db:link xlink:href="qtdesigner-manual.xml"><db:emphasis>Qt Designer</db:emphasis></db:link>, and how to to use the <db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link> class to provide custom task menu entries associated with the plugin.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/taskmenuextension-example-faded.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>To provide a custom widget that can be used with <db:emphasis>Qt Designer</db:emphasis>, we need to supply a self-contained implementation. In this example we use a custom widget designed to show the task menu extension feature: The TicTacToe widget.</db:para>
<db:para>An extension is an object which modifies the behavior of <db:emphasis>Qt Designer</db:emphasis>. The <db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link> can provide custom task menu entries when a widget with this extension is selected.</db:para>
<db:para>There are four available types of extensions in <db:emphasis>Qt Designer</db:emphasis>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qdesignercontainerextension.xml">QDesignerContainerExtension</db:link> provides an extension that allows you to add (and delete) pages to a multi-page container plugin in <db:emphasis>Qt Designer</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdesignermembersheetextension.xml">QDesignerMemberSheetExtension</db:link> provides an extension that allows you to manipulate a widget's member functions which is displayed when configuring connections using Qt Designer's mode for editing signals and slots.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdesignerpropertysheetextension.xml">QDesignerPropertySheetExtension</db:link> provides an extension that allows you to manipulate a widget's properties which is displayed in Qt Designer's property editor.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link> provides an extension that allows you to add custom menu entries to <db:emphasis>Qt Designer</db:emphasis>'s task menu.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>You can use all the extensions following the same pattern as in this example, only replacing the respective extension base class. For more information, see the <db:link xlink:href="qtdesigner-module.xml">Qt Designer C++ Classes</db:link>.</db:para>
<db:para>The Task Menu Extension example consists of five classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>TicTacToe</db:code> is a custom widget that lets the user play the Tic-Tac-Toe game.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>TicTacToePlugin</db:code> exposes the <db:code>TicTacToe</db:code> class to <db:emphasis>Qt Designer</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>TicTacToeTaskMenuFactory</db:code> creates a <db:code>TicTacToeTaskMenu</db:code> object.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>TicTacToeTaskMenu</db:code> provides the task menu extension, i.e the plugin's associated task menu entries.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>TicTacToeDialog</db:code> lets the user modify the state of a Tic-Tac-Toe plugin loaded into <db:emphasis>Qt Designer</db:emphasis>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The project file for custom widget plugins needs some additional information to ensure that they will work within <db:emphasis>Qt Designer</db:emphasis>. For example, custom widget plugins rely on components supplied with <db:emphasis>Qt Designer</db:emphasis>, and this must be specified in the project file that we use. We will first take a look at the plugin's project file.</db:para>
<db:para>Then we will continue by reviewing the <db:code>TicTacToePlugin</db:code> class, and take a look at the <db:code>TicTacToeTaskMenuFactory</db:code> and <db:code>TicTacToeTaskMenu</db:code> classes. Finally, we will review the <db:code>TicTacToeDialog</db:code> class before we take a quick look at the <db:code>TicTacToe</db:code> widget's class definition.</db:para>
<db:section xml:id="project-files">
<db:title>Project files</db:title>
<db:section xml:id="cmake">
<db:title>CMake</db:title>
<db:para>The project files need to state that a plugin linking to the <db:emphasis>Qt Designer</db:emphasis> libraries is to be built:</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS Core Designer Gui Widgets)

qt_add_plugin(taskmenuextension)

target_link_libraries(taskmenuextension PUBLIC
    Qt::Core
    Qt::Designer
    Qt::Gui
    Qt::Widgets
)
</db:programlisting>
<db:para>The following example shows how to add the header and source files of the widget:</db:para>
<db:programlisting language="cpp">target_sources(taskmenuextension PRIVATE
    tictactoe.cpp tictactoe.h
    tictactoedialog.cpp tictactoedialog.h
    tictactoeplugin.cpp tictactoeplugin.h
    tictactoetaskmenu.cpp tictactoetaskmenu.h
)
</db:programlisting>
<db:para>We provide an implementation of the plugin interface so that <db:emphasis>Qt Designer</db:emphasis> can use the custom widget. In this particular example we also provide implementations of the task menu extension and the extension factory as well as a dialog implementation.</db:para>
<db:para>It is important to ensure that the plugin is installed in a location that is searched by <db:emphasis>Qt Designer</db:emphasis>. We do this by specifying a target path for the project and adding it to the list of items to install:</db:para>
<db:programlisting language="cpp">   set(INSTALL_EXAMPLEDIR &quot;${QT6_INSTALL_PREFIX}/${QT6_INSTALL_PLUGINS}/designer&quot;)
install(TARGETS taskmenuextension
    RUNTIME DESTINATION &quot;${INSTALL_EXAMPLEDIR}&quot;
    BUNDLE DESTINATION &quot;${INSTALL_EXAMPLEDIR}&quot;
    LIBRARY DESTINATION &quot;${INSTALL_EXAMPLEDIR}&quot;
)
</db:programlisting>
<db:para>The task menu extension is created as a library. It will be installed alongside the other <db:emphasis>Qt Designer</db:emphasis> plugins when the project is installed (using <db:code>ninja install</db:code> or an equivalent installation procedure).</db:para>
<db:para>For more information about plugins, see the <db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link> documentation.</db:para>
</db:section>
<db:section xml:id="qmake">
<db:title>qmake</db:title>
<db:para>The following example shows how to link a plugin to the <db:emphasis>Qt Designer</db:emphasis> libraries:</db:para>
<db:programlisting language="cpp">TEMPLATE = lib
CONFIG  += plugin

QT      += widgets designer
</db:programlisting>
<db:para>The following example shows how to add the header and source files of the widget:</db:para>
<db:programlisting language="cpp">HEADERS += tictactoe.h \
           tictactoedialog.h \
           tictactoeplugin.h \
           tictactoetaskmenu.h
SOURCES += tictactoe.cpp \
           tictactoedialog.cpp \
           tictactoeplugin.cpp \
           tictactoetaskmenu.cpp
OTHER_FILES += tictactoe.json
</db:programlisting>
<db:para>The following example shows how to install a plugin to the <db:emphasis>Qt Designer</db:emphasis>'s plugin path:</db:para>
<db:programlisting language="cpp">target.path = $$[QT_INSTALL_PLUGINS]/designer
INSTALLS += target
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="tictactoeplugin-class-definition">
<db:title>TicTacToePlugin Class Definition</db:title>
<db:para>The <db:code>TicTacToePlugin</db:code> class exposes <db:code>the</db:code> TicTacToe class to <db:emphasis>Qt Designer</db:emphasis>. Its definition is equivalent to the <db:link xlink:href="qtdesigner-customwidgetplugin-example.xml">Custom Widget Plugin</db:link> example's plugin class which is explained in detail. The only part of the class definition that is specific to this particular custom widget is the class name.</db:para>
<db:para>To ensure that Qt recognizes the widget as a plugin, export relevant information about the widget by adding the <db:code>Q_PLUGIN_METADATA()</db:code> macro:</db:para>
<db:programlisting language="cpp">#ifndef TICTACTOEPLUGIN_H
#define TICTACTOEPLUGIN_H

#include &amp;lt;QtUiPlugin/QDesignerCustomWidgetInterface&amp;gt;

class QIcon;
class QWidget;

class TicTacToePlugin : public QObject, public QDesignerCustomWidgetInterface
{
    Q_OBJECT
    Q_PLUGIN_METADATA(IID &quot;org.qt-project.Qt.QDesignerCustomWidgetInterface&quot;)
    Q_INTERFACES(QDesignerCustomWidgetInterface)

public:
    explicit TicTacToePlugin(QObject *parent = nullptr);

    QString name() const override;
    QString group() const override;
    QString toolTip() const override;
    QString whatsThis() const override;
    QString includeFile() const override;
    QIcon icon() const override;
    bool isContainer() const override;
    QWidget *createWidget(QWidget *parent) override;
    bool isInitialized() const override;
    void initialize(QDesignerFormEditorInterface *formEditor) override;
    QString domXml() const override;

private:
    bool initialized = false;
};

#endif
</db:programlisting>
<db:para>The plugin class provides <db:emphasis>Qt Designer</db:emphasis> with basic information about our plugin, such as its class name and its include file. Furthermore it knows how to create instances of the <db:code>TicTacToe</db:code> widget. TicTacToePlugin also defines the <db:link xlink:href="qdesignercustomwidgetinterface.xml#initialize">initialize</db:link>() function which is called after the plugin is loaded into <db:emphasis>Qt Designer</db:emphasis>. The function's <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> parameter provides the plugin with a gateway to all of <db:emphasis>Qt Designer</db:emphasis>'s API's.</db:para>
<db:para>The <db:code>TicTacToePlugin</db:code> class inherits from both <db:link xlink:href="qobject.xml">QObject</db:link> and <db:link xlink:href="qdesignercustomwidgetinterface.xml">QDesignerCustomWidgetInterface</db:link>. It is important to remember, when using multiple inheritance, to ensure that all the interfaces (i.e. the classes that doesn't inherit <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link>) are made known to the meta object system using the <db:link xlink:href="qobject.xml#Q_INTERFACES">Q_INTERFACES</db:link>() macro. This enables <db:emphasis>Qt Designer</db:emphasis> to use <db:link xlink:href="qobject.xml#qobject_cast-1">qobject_cast</db:link>() to query for supported interfaces using nothing but a <db:link xlink:href="qobject.xml">QObject</db:link> pointer.</db:para>
</db:section>
<db:section xml:id="tictactoeplugin-class-implementation">
<db:title>TicTacToePlugin Class Implementation</db:title>
<db:para>The TicTacToePlugin class implementation is in most parts equivalent to the <db:link xlink:href="qtdesigner-customwidgetplugin-example.xml">Custom Widget Plugin</db:link> example's plugin class:</db:para>
<db:programlisting language="cpp">TicTacToePlugin::TicTacToePlugin(QObject *parent)
    : QObject(parent)
{
}

QString TicTacToePlugin::name() const
{
    return u&quot;TicTacToe&quot;_s;
}

QString TicTacToePlugin::group() const
{
    return u&quot;Display Widgets [Examples]&quot;_s;
}

QString TicTacToePlugin::toolTip() const
{
    return u&quot;Tic Tac Toe Example, demonstrating class QDesignerTaskMenuExtension (C++)&quot;_s;
}

QString TicTacToePlugin::whatsThis() const
{
    return {};
}

QString TicTacToePlugin::includeFile() const
{
    return u&quot;tictactoe.h&quot;_s;
}

QIcon TicTacToePlugin::icon() const
{
    return {};
}

bool TicTacToePlugin::isContainer() const
{
    return false;
}

QWidget *TicTacToePlugin::createWidget(QWidget *parent)
{
    auto *ticTacToe = new TicTacToe(parent);
    ticTacToe-&amp;gt;setState(u&quot;-X-XO----&quot;_s);
    return ticTacToe;
}

bool TicTacToePlugin::isInitialized() const
{
    return initialized;
}
</db:programlisting>
<db:para>The only function that differs significantly is the initialize() function:</db:para>
<db:programlisting language="cpp">void TicTacToePlugin::initialize(QDesignerFormEditorInterface *formEditor)
{
</db:programlisting>
<db:para>The <db:code>initialize()</db:code> function takes a <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> object as argument. The <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> class provides access to Qt Designer's components.</db:para>
<db:para>In <db:emphasis>Qt Designer</db:emphasis> you can create two kinds of plugins: custom widget plugins and tool plugins. <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> provides access to all the <db:emphasis>Qt Designer</db:emphasis> components that you normally need to create a tool plugin: the extension manager, the object inspector, the property editor and the widget box. Custom widget plugins have access to the same components.</db:para>
<db:programlisting language="cpp">    if (initialized)
        return;

    auto *manager = formEditor-&amp;gt;extensionManager();
    Q_ASSERT(manager != nullptr);
</db:programlisting>
<db:para>When creating extensions associated with custom widget plugins, we need to access <db:emphasis>Qt Designer</db:emphasis>'s current extension manager which we retrieve from the <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> parameter.</db:para>
<db:para><db:emphasis>Qt Designer</db:emphasis>'s <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> holds information about all Qt Designer's components: The action editor, the object inspector, the property editor, the widget box, and the extension and form window managers.</db:para>
<db:para>The <db:link xlink:href="qextensionmanager.xml">QExtensionManager</db:link> class provides extension management facilities for <db:emphasis>Qt Designer</db:emphasis>. Using <db:emphasis>Qt Designer</db:emphasis>'s current extension manager you can retrieve the extension for a given object. You can also register and unregister an extension for a given object. Remember that an extension is an object which modifies the behavior of <db:emphasis>Qt Designer</db:emphasis>.</db:para>
<db:para>When registrering an extension, it is actually the associated extension factory that is registered. In <db:emphasis>Qt Designer</db:emphasis>, extension factories are used to look up and create named extensions as they are required. So, in this example, the task menu extension itself is not created until a task menu is requested by the user.</db:para>
<db:programlisting language="cpp">    manager-&amp;gt;registerExtensions(new TicTacToeTaskMenuFactory(manager),
                                Q_TYPEID(QDesignerTaskMenuExtension));

    initialized = true;
}

QString TicTacToePlugin::domXml() const
{
    return uR&quot;(
&amp;lt;ui language=&quot;c++&quot;&amp;gt;
    &amp;lt;widget class=&quot;TicTacToe&quot; name=&quot;ticTacToe&quot;/&amp;gt;
    &amp;lt;customwidgets&amp;gt;
        &amp;lt;customwidget&amp;gt;
            &amp;lt;class&amp;gt;TicTacToe&amp;lt;/class&amp;gt;
            &amp;lt;propertyspecifications&amp;gt;
            &amp;lt;tooltip name=&quot;state&quot;&amp;gt;Tic Tac Toe state&amp;lt;/tooltip&amp;gt;
            &amp;lt;stringpropertyspecification name=&quot;state&quot; notr=&quot;true&quot; type=&quot;singleline&quot;/&amp;gt;
            &amp;lt;/propertyspecifications&amp;gt;
        &amp;lt;/customwidget&amp;gt;
    &amp;lt;/customwidgets&amp;gt;
&amp;lt;/ui&amp;gt;
)&quot;_s;
}
</db:programlisting>
<db:para>We create a <db:code>TicTacToeTaskMenuFactory</db:code> object that we register using <db:emphasis>Qt Designer</db:emphasis>'s current <db:link xlink:href="qextensionmanager.xml">extension manager</db:link> retrieved from the <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> parameter. The first argument is the newly created factory and the second argument is an extension identifier which is a string. The <db:code>Q_TYPEID()</db:code> macro simply converts the string into a <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link>.</db:para>
<db:para>The <db:code>TicTacToeTaskMenuFactory</db:code> class is a subclass of <db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link>. When the user request a task menu by clicking the right mouse button over a widget with the specified task menu extension, <db:emphasis>Qt Designer</db:emphasis>'s extension manager will run through all its registered factories invoking the first one that is able to create a task menu extension for the selected widget. This factory will in turn create a <db:code>TicTacToeTaskMenu</db:code> object (the extension).</db:para>
<db:para>We omit to reimplement the <db:link xlink:href="qdesignercustomwidgetinterface.xml#domXml">QDesignerCustomWidgetInterface::domXml</db:link>() function (which include default settings for the widget in the standard XML format used by Qt Designer), since no default values are necessary.</db:para>
<db:programlisting language="cpp">    Q_PLUGIN_METADATA(IID &quot;org.qt-project.Qt.QDesignerCustomWidgetInterface&quot;)
</db:programlisting>
<db:para>Finally, we use the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro to export the TicTacToePlugin class for use with Qt's plugin handling classes: This macro ensures that <db:emphasis>Qt Designer</db:emphasis> can access and construct the custom widget. Without this macro, there is no way for <db:emphasis>Qt Designer</db:emphasis> to use the widget.</db:para>
</db:section>
<db:section xml:id="tictactoetaskmenufactory-class-definition">
<db:title>TicTacToeTaskMenuFactory Class Definition</db:title>
<db:para>The <db:code>TicTacToeTaskMenuFactory</db:code> class inherits <db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link> which provides a standard extension factory for <db:emphasis>Qt Designer</db:emphasis>.</db:para>
<db:programlisting language="cpp">class TicTacToeTaskMenuFactory : public QExtensionFactory
{
    Q_OBJECT

public:
    explicit TicTacToeTaskMenuFactory(QExtensionManager *parent = nullptr);

protected:
    QObject *createExtension(QObject *object, const QString &amp;amp;iid, QObject *parent) const override;
};
</db:programlisting>
<db:para>The subclass's purpose is to reimplement the <db:link xlink:href="qextensionfactory.xml#createExtension">QExtensionFactory::createExtension</db:link>() function, making it able to create a <db:code>TicTacToe</db:code> task menu extension.</db:para>
</db:section>
<db:section xml:id="tictactoetaskmenufactory-class-implementation">
<db:title>TicTacToeTaskMenuFactory Class Implementation</db:title>
<db:para>The class constructor simply calls the <db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link> base class constructor:</db:para>
<db:programlisting language="cpp">TicTacToeTaskMenuFactory::TicTacToeTaskMenuFactory(QExtensionManager *parent)
    : QExtensionFactory(parent)
{
}
</db:programlisting>
<db:para>As described above, the factory is invoked when the user request a task menu by clicking the right mouse button over a widget with the specified task menu extension in <db:emphasis>Qt Designer</db:emphasis>.</db:para>
<db:para><db:emphasis>Qt Designer</db:emphasis>'s behavior is the same whether the requested extension is associated with a container, a member sheet, a property sheet or a task menu: Its extension manager runs through all its registered extension factories calling <db:code>createExtension()</db:code> for each until one responds by creating the requested extension.</db:para>
<db:programlisting language="cpp">QObject *TicTacToeTaskMenuFactory::createExtension(QObject *object,
                                                   const QString &amp;amp;iid,
                                                   QObject *parent) const
{
    if (iid != Q_TYPEID(QDesignerTaskMenuExtension))
        return nullptr;

    if (auto *tic = qobject_cast&amp;lt;TicTacToe*&amp;gt;(object))
        return new TicTacToeTaskMenu(tic, parent);

    return nullptr;
}
</db:programlisting>
<db:para>So the first thing we do in <db:code>TicTacToeTaskMenuFactory::createExtension()</db:code> is to check if the requested extension is a task menu extension. If it is, and the widget requesting it is a <db:code>TicTacToe</db:code> widget, we create and return a <db:code>TicTacToeTaskMenu</db:code> object. Otherwise, we simply return a null pointer, allowing <db:emphasis>Qt Designer</db:emphasis>'s extension manager to continue its search through the registered factories.</db:para>
</db:section>
<db:section xml:id="tictactoetaskmenu-class-definition">
<db:title>TicTacToeTaskMenu Class Definition</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/taskmenuextension-menu.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:code>TicTacToeTaskMenu</db:code> class inherits <db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link> which allows you to add custom entries (in the form of QActions) to the task menu in <db:emphasis>Qt Designer</db:emphasis>.</db:para>
<db:programlisting language="cpp">class TicTacToeTaskMenu : public QObject, public QDesignerTaskMenuExtension
{
    Q_OBJECT
    Q_INTERFACES(QDesignerTaskMenuExtension)

public:
    explicit TicTacToeTaskMenu(TicTacToe *tic, QObject *parent);

    QAction *preferredEditAction() const override;
    QList&amp;lt;QAction *&amp;gt; taskActions() const override;

private slots:
    void editState();

private:
    QAction *editStateAction;
    TicTacToe *ticTacToe;
};
</db:programlisting>
<db:para>We reimplement the <db:code>preferredEditAction()</db:code> and <db:code>taskActions()</db:code> functions. Note that we implement a constructor that takes <db:emphasis>two</db:emphasis> arguments: the parent widget, and the <db:code>TicTacToe</db:code> widget for which the task menu is requested.</db:para>
<db:para>In addition we declare the private <db:code>editState()</db:code> slot, our custom <db:code>editStateAction</db:code> and a private pointer to the <db:code>TicTacToe</db:code> widget which state we want to modify.</db:para>
</db:section>
<db:section xml:id="tictactoetaskmenu-class-implementation">
<db:title>TicTacToeTaskMenu Class Implementation</db:title>
<db:programlisting language="cpp">TicTacToeTaskMenu::TicTacToeTaskMenu(TicTacToe *tic, QObject *parent)
    : QObject(parent)
    , editStateAction(new QAction(tr(&quot;Edit State...&quot;), this))
    , ticTacToe(tic)
{
    connect(editStateAction, &amp;amp;QAction::triggered, this, &amp;amp;TicTacToeTaskMenu::editState);
}
</db:programlisting>
<db:para>In the constructor we first save the reference to the <db:code>TicTacToe</db:code> widget sent as parameter, i.e the widget which state we want to modify. We will need this later when our custom action is invoked. We also create our custom <db:code>editStateAction</db:code> and connect it to the <db:code>editState()</db:code> slot.</db:para>
<db:programlisting language="cpp">void TicTacToeTaskMenu::editState()
{
    TicTacToeDialog dialog(ticTacToe);
    dialog.exec();
}
</db:programlisting>
<db:para>The <db:code>editState()</db:code> slot is called whenever the user chooses the <db:emphasis role="bold">Edit State...</db:emphasis> option in a <db:code>TicTacToe</db:code> widget's task menu. The slot creates a <db:code>TicTacToeDialog</db:code> presenting the current state of the widget, and allowing the user to edit its state by playing the game.</db:para>
<db:programlisting language="cpp">QAction *TicTacToeTaskMenu::preferredEditAction() const
{
    return editStateAction;
}
</db:programlisting>
<db:para>We reimplement the <db:code>preferredEditAction()</db:code> function to return our custom <db:code>editStateAction</db:code> as the action that should be invoked when selecting a <db:code>TicTacToe</db:code> widget and pressing <db:emphasis role="bold">F2</db:emphasis> .</db:para>
<db:programlisting language="cpp">QList&amp;lt;QAction *&amp;gt; TicTacToeTaskMenu::taskActions() const
{
    return QList&amp;lt;QAction *&amp;gt;{editStateAction};
}
</db:programlisting>
<db:para>We reimplement the <db:code>taskActions()</db:code> function to return a list of our custom actions making these appear on top of the default menu entries in a <db:code>TicTacToe</db:code> widget's task menu.</db:para>
</db:section>
<db:section xml:id="tictactoedialog-class-definition">
<db:title>TicTacToeDialog Class Definition</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/taskmenuextension-dialog.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:code>TicTacToeDialog</db:code> class inherits <db:link xlink:href="qdialog.xml">QDialog</db:link>. The dialog lets the user modify the state of the currently selected Tic-Tac-Toe plugin.</db:para>
<db:programlisting language="cpp">class TicTacToeDialog : public QDialog
{
    Q_OBJECT

public:
    explicit TicTacToeDialog(TicTacToe *plugin = nullptr, QWidget *parent = nullptr);

    QSize sizeHint() const override;

private slots:
    void resetState();
    void saveState();

private:
    TicTacToe *editor;
    TicTacToe *ticTacToe;
    QDialogButtonBox *buttonBox;
};
</db:programlisting>
<db:para>We reimplement the <db:code>sizeHint()</db:code> function. We also declare two private slots: <db:code>resetState()</db:code> and <db:code>saveState()</db:code>. In addition to the dialog's buttons and layouts we declare two <db:code>TicTacToe</db:code> pointers, one to the widget the user can interact with and the other to the original custom widget plugin which state the user wants to edit.</db:para>
</db:section>
<db:section xml:id="tictactoedialog-class-implementation">
<db:title>TicTacToeDialog Class Implementation</db:title>
<db:programlisting language="cpp">TicTacToeDialog::TicTacToeDialog(TicTacToe *tic, QWidget *parent)
    : QDialog(parent)
    , editor(new TicTacToe)
    , ticTacToe(tic)
    , buttonBox(new QDialogButtonBox(QDialogButtonBox::Ok
                                     | QDialogButtonBox::Cancel
                                     | QDialogButtonBox::Reset))
{
    editor-&amp;gt;setState(ticTacToe-&amp;gt;state());

    connect(buttonBox-&amp;gt;button(QDialogButtonBox::Reset), &amp;amp;QAbstractButton::clicked,
            this, &amp;amp;TicTacToeDialog::resetState);
    connect(buttonBox, &amp;amp;QDialogButtonBox::accepted, this, &amp;amp;TicTacToeDialog::saveState);
    connect(buttonBox, &amp;amp;QDialogButtonBox::rejected, this, &amp;amp;QDialog::reject);

    auto *mainLayout = new QVBoxLayout(this);
    mainLayout-&amp;gt;addWidget(editor);
    mainLayout-&amp;gt;addWidget(buttonBox);

    setWindowTitle(tr(&quot;Edit State&quot;));
}
</db:programlisting>
<db:para>In the constructor we first save the reference to the TicTacToe widget sent as parameter, i.e the widget which state the user want to modify. Then we create a new <db:code>TicTacToe</db:code> widget, and set its state to be equivalent to the parameter widget's state.</db:para>
<db:para>Finally, we create the dialog's buttons and layout.</db:para>
<db:programlisting language="cpp">QSize TicTacToeDialog::sizeHint() const
{
    return {250, 250};
}
</db:programlisting>
<db:para>We reimplement the <db:code>sizeHint()</db:code> function to ensure that the dialog is given a reasonable size.</db:para>
<db:programlisting language="cpp">void TicTacToeDialog::resetState()
{
    editor-&amp;gt;clearBoard();
}
</db:programlisting>
<db:para>The <db:code>resetState()</db:code> slot is called whenever the user press the <db:emphasis role="bold">Reset</db:emphasis> button. The only thing we do is to call the <db:code>clearBoard()</db:code> function for the editor widget, i.e. the <db:code>TicTacToe</db:code> widget we created in the dialog's constructor.</db:para>
<db:programlisting language="cpp">void TicTacToeDialog::saveState()
{
</db:programlisting>
<db:para>The <db:code>saveState()</db:code> slot is called whenever the user press the <db:emphasis role="bold">OK</db:emphasis> button, and transfers the state of the editor widget to the widget which state we want to modify. In order to make the change of state visible to <db:emphasis>Qt Designer</db:emphasis> we need to set the latter widget's state property using the <db:link xlink:href="qdesignerformwindowinterface.xml">QDesignerFormWindowInterface</db:link> class.</db:para>
<db:para><db:link xlink:href="qdesignerformwindowinterface.xml">QDesignerFormWindowInterface</db:link> provides you with information about the associated form window as well as allowing you to alter its properties. The interface is not intended to be instantiated directly, but to provide access to Qt Designer's current form windows controlled by Qt Designer's form window manager.</db:para>
<db:para>If you are looking for the form window containing a specific widget, you can use the static <db:link xlink:href="qdesignerformwindowinterface.xml#findFormWindow">QDesignerFormWindowInterface::findFormWindow</db:link>() function:</db:para>
<db:programlisting language="cpp">    if (auto *formWindow = QDesignerFormWindowInterface::findFormWindow(ticTacToe))
        formWindow-&amp;gt;cursor()-&amp;gt;setProperty(&quot;state&quot;, editor-&amp;gt;state());
</db:programlisting>
<db:para>After retrieving the form window of the widget (which state we want to modify), we use the <db:link xlink:href="qdesignerformwindowinterface.xml#cursor">QDesignerFormWindowInterface::cursor</db:link>() function to retrieve the form window's cursor.</db:para>
<db:para>The <db:link xlink:href="qdesignerformwindowcursorinterface.xml">QDesignerFormWindowCursorInterface</db:link> class provides an interface to the form window's text cursor. Once we have cursor, we can finally set the state property using the <db:link xlink:href="qdesignerformwindowcursorinterface.xml#setProperty">QDesignerFormWindowCursorInterface::setProperty</db:link>() function.</db:para>
<db:programlisting language="cpp">    accept();
}
</db:programlisting>
<db:para>In the end we call the <db:link xlink:href="qevent.xml#accept">QEvent::accept</db:link>() function which sets the accept flag of the event object. Setting the <db:code>accept</db:code> parameter indicates that the event receiver wants the event. Unwanted events might be propagated to the parent widget.</db:para>
</db:section>
<db:section xml:id="tictactoe-class-definition">
<db:title>TicTacToe Class Definition</db:title>
<db:para>The <db:code>TicTacToe</db:code> class is a custom widget that lets the user play the Tic-Tac-Toe game.</db:para>
<db:programlisting language="cpp">class TicTacToe : public QWidget
{
    Q_OBJECT
    Q_PROPERTY(QString state READ state WRITE setState)

public:
    explicit TicTacToe(QWidget *parent = nullptr);

    QSize minimumSizeHint() const override;
    QSize sizeHint() const override;
    void setState(const QString &amp;amp;newState);
    QString state() const;
    void clearBoard();

protected:
    void mousePressEvent(QMouseEvent *event) override;
    void paintEvent(QPaintEvent *event) override;

private:
    static constexpr char16_t Empty = '-';
    static constexpr char16_t Cross = 'X';
    static constexpr char16_t Nought = 'O';

    QRect cellRect(int position) const;
    int cellWidth() const { return width() / 3; }
    int cellHeight() const { return height() / 3; }

    QString myState;
    int turnNumber = 0;
};
</db:programlisting>
<db:para>The main details to observe in the <db:code>TicTacToe</db:code> class defintion is the declaration of the <db:code>state</db:code> property and its <db:code>state()</db:code> and <db:code>setState()</db:code> functions.</db:para>
<db:para>We need to declare the <db:code>TicTacToe</db:code> widget's state as a property to make it visible to <db:emphasis>Qt Designer</db:emphasis>; allowing <db:emphasis>Qt Designer</db:emphasis> to manage it in the same way it manages the properties the <db:code>TicTacToe</db:code> widget inherits from <db:link xlink:href="qwidget.xml">QWidget</db:link> and <db:link xlink:href="qobject.xml">QObject</db:link>, for example featuring the property editor.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qttools.git/tree/examples/designer/taskmenuextension?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
