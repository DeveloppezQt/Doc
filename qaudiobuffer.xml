<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAudioBuffer Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaudiobuffer.xml">QAudioBuffer</db:link> class represents a collection of audio samples with a specific format and sample rate.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAudioBuffer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Multimedia)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Multimedia)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAudioBuffer is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_audio</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qaudiobuffer.xml">QAudioBuffer</db:link> is used by the <db:link xlink:href="qaudiodecoder.xml">QAudioDecoder</db:link> class to hand decoded audio data over to the application. An audio buffer contains data in a certain <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> that can be queried using <db:link xlink:href="qaudiobuffer.xml#format">format</db:link>(). It is also tagged with timing and duration information.</db:para>
<db:para>To access the data stored inside the buffer, use the <db:link xlink:href="qaudiobuffer.xml#data">data</db:link>() or <db:link xlink:href="qaudiobuffer.xml#constData">constData</db:link>() methods.</db:para>
<db:para>Audio buffers are explicitly shared, in most cases, you should call <db:link xlink:href="qaudiobuffer.xml#detach">detach</db:link>() before modifying the data.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="F32M-typedef">
<db:title>QAudioBuffer::F32M</db:title>
<db:typedefsynopsis>
<db:typedefname>F32M</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This is a predefined specialization for a 32 bit float mono sample.</db:para>
</db:section>
<db:section xml:id="F32S-typedef">
<db:title>QAudioBuffer::F32S</db:title>
<db:typedefsynopsis>
<db:typedefname>F32S</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This is a predifined specialization for a 32 bit float stereo sample.</db:para>
</db:section>
<db:section xml:id="S16M-typedef">
<db:title>QAudioBuffer::S16M</db:title>
<db:typedefsynopsis>
<db:typedefname>S16M</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This is a predefined specialization for a signed 16 bit mono sample. i</db:para>
</db:section>
<db:section xml:id="S16S-typedef">
<db:title>QAudioBuffer::S16S</db:title>
<db:typedefsynopsis>
<db:typedefname>S16S</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This is a predefined specialization for a signed stereo 16 bit sample. Each channel is a <db:emphasis>signed short</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="S32M-typedef">
<db:title>QAudioBuffer::S32M</db:title>
<db:typedefsynopsis>
<db:typedefname>S32M</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This is a predefined specialization for a signed 32 bit mono sample.</db:para>
</db:section>
<db:section xml:id="S32S-typedef">
<db:title>QAudioBuffer::S32S</db:title>
<db:typedefsynopsis>
<db:typedefname>S32S</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This is a predifined specialization for a siged 32 bit stereo sample.</db:para>
</db:section>
<db:section xml:id="U8M-typedef">
<db:title>QAudioBuffer::U8M</db:title>
<db:typedefsynopsis>
<db:typedefname>U8M</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This is a predefined specialization for an unsigned 8 bit mono sample.</db:para>
</db:section>
<db:section xml:id="U8S-typedef">
<db:title>QAudioBuffer::U8S</db:title>
<db:typedefsynopsis>
<db:typedefname>U8S</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This is a predifined specialization for an unsiged 8 bit stereo sample.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAudioBuffer">
<db:title>QAudioBuffer::QAudioBuffer()</db:title>
<db:constructorsynopsis>
<db:methodname>QAudioBuffer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioBuffer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Create a new, empty, invalid buffer.</db:para>
</db:section>
<db:section xml:id="QAudioBuffer-2">
<db:title>QAudioBuffer::QAudioBuffer(const QByteArray &amp;<db:emphasis>data</db:emphasis>, const QAudioFormat &amp;<db:emphasis>format</db:emphasis>, qint64 <db:emphasis>startTime</db:emphasis> = -1)</db:title>
<db:constructorsynopsis>
<db:methodname>QAudioBuffer</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QAudioFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>startTime</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioBuffer(const QByteArray &amp;data, const QAudioFormat &amp;format, qint64 startTime)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new audio buffer from the supplied <db:code role="parameter">data</db:code>, in the given <db:code role="parameter">format</db:code>. The format will determine how the number and sizes of the samples are interpreted from the <db:code role="parameter">data</db:code>.</db:para>
<db:para>If the supplied <db:code role="parameter">data</db:code> is not an integer multiple of the calculated frame size, the excess data will not be used.</db:para>
<db:para>This audio buffer will copy the contents of <db:code role="parameter">data</db:code>.</db:para>
<db:para><db:code role="parameter">startTime</db:code> (in microseconds) indicates when this buffer starts in the stream. If this buffer is not part of a stream, set it to -1.</db:para>
</db:section>
<db:section xml:id="QAudioBuffer-3">
<db:title>QAudioBuffer::QAudioBuffer(int <db:emphasis>numFrames</db:emphasis>, const QAudioFormat &amp;<db:emphasis>format</db:emphasis>, qint64 <db:emphasis>startTime</db:emphasis> = -1)</db:title>
<db:constructorsynopsis>
<db:methodname>QAudioBuffer</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>numFrames</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QAudioFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>startTime</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioBuffer(int numFrames, const QAudioFormat &amp;format, qint64 startTime)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new audio buffer with space for <db:code role="parameter">numFrames</db:code> frames of the given <db:code role="parameter">format</db:code>. The individual samples will be initialized to the default for the format.</db:para>
<db:para><db:code role="parameter">startTime</db:code> (in microseconds) indicates when this buffer starts in the stream. If this buffer is not part of a stream, set it to -1.</db:para>
</db:section>
<db:section xml:id="QAudioBuffer-1">
<db:title>QAudioBuffer::QAudioBuffer(const QAudioBuffer &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAudioBuffer</db:methodname>
<db:methodparam>
<db:type>const QAudioBuffer &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioBuffer(const QAudioBuffer &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new audio buffer from <db:code role="parameter">other</db:code>. Audio buffers are explicitly shared, you should call <db:link xlink:href="qaudiobuffer.xml#detach">detach</db:link>() on the buffer to make a copy that can then be modified.</db:para>
</db:section>
<db:section xml:id="QAudioBuffer-4">
<db:title>QAudioBuffer::QAudioBuffer(QAudioBuffer &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAudioBuffer</db:methodname>
<db:methodparam>
<db:type>QAudioBuffer &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioBuffer(QAudioBuffer &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qaudiobuffer.xml">QAudioBuffer</db:link> by moving from <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAudioBuffer">
<db:title>QAudioBuffer::~QAudioBuffer()</db:title>
<db:destructorsynopsis>
<db:methodname>~QAudioBuffer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAudioBuffer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this audio buffer.</db:para>
</db:section>
<db:section xml:id="byteCount">
<db:title>qsizetype QAudioBuffer::byteCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>byteCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype byteCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size of this buffer, in bytes.</db:para>
</db:section>
<db:section xml:id="constData">
<db:title>const T *QAudioBuffer::constData() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const T *</db:type>
<db:methodname>constData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const T * constData() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to this buffer's data. You can only read it.</db:para>
<db:para>This method is preferred over the const version of <db:link xlink:href="qaudiobuffer.xml#data">data</db:link>() to prevent unnecessary copying.</db:para>
<db:para>There is also a templatized version of this constData() function that allows you to retrieve a specific type of read-only pointer to the data. Note that there is no checking done on the format of the audio buffer - this is simply a convenience function.</db:para>
<db:programlisting language="cpp">// With a 16bit sample buffer:
const quint16 *data = buffer-&amp;gt;constData&amp;lt;quint16&amp;gt;();
</db:programlisting>
</db:section>
<db:section xml:id="data">
<db:title>const T *QAudioBuffer::data() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const T *</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const T * data() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to this buffer's data. You can only read it.</db:para>
<db:para>You should use the <db:link xlink:href="qaudiobuffer.xml#constData">constData</db:link>() function rather than this to prevent accidental deep copying.</db:para>
<db:para>There is also a templatized version of this data() function that allows you to retrieve a specific type of read-only pointer to the data. Note that there is no checking done on the format of the audio buffer - this is simply a convenience function.</db:para>
<db:programlisting language="cpp">// With a 16bit sample const buffer:
const quint16 *data = buffer-&amp;gt;data&amp;lt;quint16&amp;gt;();
</db:programlisting>
</db:section>
<db:section xml:id="data-1">
<db:title>T *QAudioBuffer::data()</db:title>
<db:methodsynopsis>
<db:type>T *</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">T * data()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to this buffer's data. You can modify the data through the returned pointer.</db:para>
<db:para>Since <db:link xlink:href="qaudiobuffer.xml">QAudioBuffer</db:link> objects are explicitly shared, you should usually call <db:link xlink:href="qaudiobuffer.xml#detach">detach</db:link>() before modifying the data through this function.</db:para>
<db:para>There is also a templatized version of <db:link xlink:href="qaudiobuffer.xml#data">data</db:link>() allows you to retrieve a specific type of pointer to the data. Note that there is no checking done on the format of the audio buffer - this is simply a convenience function.</db:para>
<db:programlisting language="cpp">// With a 16bit sample buffer:
quint16 *data = buffer-&amp;gt;data&amp;lt;quint16&amp;gt;(); // May cause deep copy
</db:programlisting>
</db:section>
<db:section xml:id="detach">
<db:title>void QAudioBuffer::detach()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>detach</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void detach()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Detaches this audio buffers from other copies that might share data with it.</db:para>
</db:section>
<db:section xml:id="duration">
<db:title>qint64 QAudioBuffer::duration() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>duration</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 duration() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the duration of audio in this buffer, in microseconds.</db:para>
<db:para>This depends on the <db:link xlink:href="qaudiobuffer.xml#format">format</db:link>(), and the <db:link xlink:href="qaudiobuffer.xml#frameCount">frameCount</db:link>().</db:para>
</db:section>
<db:section xml:id="format">
<db:title>QAudioFormat QAudioBuffer::format() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAudioFormat</db:type>
<db:methodname>format</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioFormat format() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qaudioformat.xml">format</db:link> of this buffer.</db:para>
<db:para>Several properties of this format influence how the <db:link xlink:href="qaudiobuffer.xml#duration">duration</db:link>() or <db:link xlink:href="qaudiobuffer.xml#byteCount">byteCount</db:link>() are calculated from the <db:link xlink:href="qaudiobuffer.xml#frameCount">frameCount</db:link>().</db:para>
</db:section>
<db:section xml:id="frameCount">
<db:title>qsizetype QAudioBuffer::frameCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>frameCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype frameCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of complete audio frames in this buffer.</db:para>
<db:para>An audio frame is an interleaved set of one sample per channel for the same instant in time.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QAudioBuffer::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this is a valid buffer. A valid buffer has more than zero frames in it and a valid format.</db:para>
</db:section>
<db:section xml:id="sampleCount">
<db:title>qsizetype QAudioBuffer::sampleCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>sampleCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype sampleCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of samples in this buffer.</db:para>
<db:para>If the format of this buffer has multiple channels, then this count includes all channels. This means that a stereo buffer with 1000 samples in total will have 500 left samples and 500 right samples (interleaved), and this function will return 1000.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiobuffer.xml#frameCount">frameCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startTime">
<db:title>qint64 QAudioBuffer::startTime() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>startTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 startTime() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the time in a stream that this buffer starts at (in microseconds).</db:para>
<db:para>If this buffer is not part of a stream, this will return -1.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>void QAudioBuffer::swap(QAudioBuffer &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QAudioBuffer &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QAudioBuffer &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps the audio buffer with <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QAudioBuffer &amp;QAudioBuffer::operator=(const QAudioBuffer &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QAudioBuffer &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QAudioBuffer &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioBuffer &amp; operator=(const QAudioBuffer &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the <db:code role="parameter">other</db:code> buffer to this.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QAudioBuffer &amp;QAudioBuffer::operator=(QAudioBuffer &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QAudioBuffer &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QAudioBuffer &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioBuffer &amp; operator=(QAudioBuffer &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves <db:code role="parameter">other</db:code> into this <db:link xlink:href="qaudiobuffer.xml">QAudioBuffer</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
