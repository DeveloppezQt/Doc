<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Rogue Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Rogue example shows how to use the Qt state machine for event handling.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;window.h&quot;
#include &quot;movementtransition.h&quot;

Window::Window()
{
    pX = 5;
    pY = 5;

    QFontDatabase database;
    QFont font;
    if (database.families().contains(&quot;Monospace&quot;)) {
        font = QFont(&quot;Monospace&quot;);
    }
    else {
        foreach (QString family, database.families()) {
            if (database.isFixedPitch(family)) {
                font = QFont(family);
                break;
            }
        }
    }
    font.setPointSize(12);
    setFont(font);

    setupMap();
    buildMachine();
}

void Window::setStatus(const QString &amp;status)
{
    myStatus = status;
    repaint();
}

QString Window::status() const
{
    return myStatus;
}

void Window::paintEvent(QPaintEvent * /* event */)
{
    QFontMetrics metrics(font());
    QPainter painter(this);
    int fontHeight = metrics.height();
    int fontWidth = metrics.width('X');
    int yPos = fontHeight;
    int xPos;

    painter.fillRect(rect(), Qt::black);
    painter.setPen(Qt::white);

    painter.drawText(QPoint(0, yPos), status());

    for (int y = 0; y &lt; HEIGHT; ++y) {
        yPos += fontHeight;
        xPos = 0;

        for (int x = 0; x &lt; WIDTH; ++x) {
            if (y == pY &amp;&amp; x == pX) {
                xPos += fontWidth;
                continue;
            }

            painter.setPen(Qt::white);

            double x1 = static_cast&lt;double&gt;(pX);
            double y1 = static_cast&lt;double&gt;(pY);
            double x2 = static_cast&lt;double&gt;(x);
            double y2 = static_cast&lt;double&gt;(y);

            if (x2&lt;x1) {
                x2+=0.5;
            } else if (x2&gt;x1) {
                 x2-=0.5;
            }

            if (y2&lt;y1) {
                 y2+=0.5;
            } else if (y2&gt;y1) {
                 y2-=0.5;
            }

            double dx = x2 - x1;
            double dy = y2 - y1;

            double length = qSqrt(dx*dx+dy*dy);

            dx /= length;
            dy /= length;

            double xi = x1;
            double yi = y1;

            while (length &gt; 0) {
                int cx = static_cast&lt;int&gt;(xi+0.5);
                int cy = static_cast&lt;int&gt;(yi+0.5);

                if (x2 == cx &amp;&amp; y2 == cy)
                    break;

                if (!(x1==cx &amp;&amp; y1==cy)
                    &amp;&amp; (map[cx][cy] == '#' || (length-10) &gt; 0)) {
                    painter.setPen(QColor(60,60,60));
                    break;
                }

                xi += dx;
                yi += dy;
                --length;
            }

            painter.drawText(QPoint(xPos, yPos), map[x][y]);
            xPos += fontWidth;
        }
    }
    painter.setPen(Qt::white);
    painter.drawText(QPoint(pX * fontWidth, (pY + 2) * fontHeight), QChar('@'));
}

QSize Window::sizeHint() const
{
    QFontMetrics metrics(font());

    return QSize(metrics.width('X') * WIDTH, metrics.height() * (HEIGHT + 1));
}

void Window::buildMachine()
{
    machine = new QStateMachine;

    QState *inputState = new QState(machine);
    inputState-&gt;assignProperty(this, &quot;status&quot;, &quot;Move the rogue with 2, 4, 6, and 8&quot;);

    MovementTransition *transition = new MovementTransition(this);
    inputState-&gt;addTransition(transition);

    QState *quitState = new QState(machine);
    quitState-&gt;assignProperty(this, &quot;status&quot;, &quot;Really quit(y/n)?&quot;);

    QKeyEventTransition *yesTransition = new
        QKeyEventTransition(this, QEvent::KeyPress, Qt::Key_Y);
    yesTransition-&gt;setTargetState(new QFinalState(machine));
    quitState-&gt;addTransition(yesTransition);

    QKeyEventTransition *noTransition =
        new QKeyEventTransition(this, QEvent::KeyPress, Qt::Key_N);
    noTransition-&gt;setTargetState(inputState);
    quitState-&gt;addTransition(noTransition);

    QKeyEventTransition *quitTransition =
        new QKeyEventTransition(this, QEvent::KeyPress, Qt::Key_Q);
    quitTransition-&gt;setTargetState(quitState);
    inputState-&gt;addTransition(quitTransition);

    machine-&gt;setInitialState(inputState);

    connect(machine, SIGNAL(finished()), qApp, SLOT(quit()));

    machine-&gt;start();
}

void Window::movePlayer(Direction direction)
{
    switch (direction) {
        case Left:
            if (map[pX - 1][pY] != '#')
                --pX;
            break;
        case Right:
            if (map[pX + 1][pY] != '#')
                ++pX;
            break;
        case Up:
            if (map[pX][pY - 1] != '#')
                --pY;
            break;
        case Down:
            if (map[pX][pY + 1] != '#')
                ++pY;
            break;
    }
    repaint();
}

void Window::setupMap()
{
    qsrand(QTime(0,0,0).secsTo(QTime::currentTime()));

    for (int x = 0; x &lt; WIDTH; ++x)
        for (int y = 0; y &lt; HEIGHT; ++y) {
        if (x == 0 || x == WIDTH - 1 || y == 0 || y == HEIGHT - 1 || qrand() % 40 == 0)
            map[x][y] = '#';
        else
            map[x][y] = '.';
    }
}

</db:programlisting>
</db:article>
