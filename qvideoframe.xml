<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QVideoFrame Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link> class represents a frame of video data.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QVideoFrame</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Multimedia)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Multimedia)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QVideoFrame is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_video</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link> encapsulates the pixel data of a video frame, and information about the frame.</db:para>
<db:para>Video frames can come from several places - decoded <db:link xlink:href="qmediaplayer.xml">media</db:link>, a <db:link xlink:href="qcamera.xml">camera</db:link>, or generated programmatically. The way pixels are described in these frames can vary greatly, and some pixel formats offer greater compression opportunities at the expense of ease of use.</db:para>
<db:para>The pixel contents of a video frame can be mapped to memory using the <db:link xlink:href="qvideoframe.xml#map">map</db:link>() function. After a successful call to <db:link xlink:href="qvideoframe.xml#map">map</db:link>(), the video data can be accessed through various functions. Some of the YUV pixel formats provide the data in several planes. The <db:link xlink:href="qvideoframe.xml#planeCount">planeCount</db:link>() method will return the amount of planes that being used.</db:para>
<db:para>While mapped, the video data of each plane can accessed using the <db:link xlink:href="qvideoframe.xml#bits">bits</db:link>() function, which returns a pointer to a buffer. The size of this buffer is given by the <db:link xlink:href="qvideoframe.xml#mappedBytes">mappedBytes</db:link>() function, and the size of each line is given by <db:link xlink:href="qvideoframe.xml#bytesPerLine">bytesPerLine</db:link>(). The return value of the handle() function may also be used to access frame data using the internal buffer's native APIs (for example - an OpenGL texture handle).</db:para>
<db:para>A video frame can also have timestamp information associated with it. These timestamps can be used to determine when to start and stop displaying the frame.</db:para>
<db:para><db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link> objects can consume a significant amount of memory or system resources and should not be held for longer than required by the application.</db:para>
<db:note>
<db:para>Since video frames can be expensive to copy, <db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link> is explicitly shared, so any change made to a video frame will also apply to any copies.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="HandleType-enum">
<db:title>enum QVideoFrame::HandleType</db:title>
<db:enumsynopsis>
<db:enumname>HandleType</db:enumname>
<db:enumitem>
<db:enumidentifier>NoHandle</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RhiTextureHandle</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Identifies the type of a video buffers handle.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link></db:emphasis>::NoHandle</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The buffer has no handle, its data can only be accessed by mapping the buffer.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link></db:emphasis>::RhiTextureHandle</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The handle of the buffer is defined by The Qt Rendering Hardware Interface (RHI). RHI is Qt's internal graphics abstraction for 3D APIs, such as OpenGL, Vulkan, Metal, and Direct 3D.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#handleType">handleType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="MapMode-enum">
<db:title>enum QVideoFrame::MapMode</db:title>
<db:enumsynopsis>
<db:enumname>MapMode</db:enumname>
<db:enumitem>
<db:enumidentifier>NotMapped</db:enumidentifier>
<db:enumvalue>0x00</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ReadOnly</db:enumidentifier>
<db:enumvalue>0x01</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WriteOnly</db:enumidentifier>
<db:enumvalue>0x02</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ReadWrite</db:enumidentifier>
<db:enumvalue>ReadOnly | WriteOnly</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Enumerates how a video buffer's data is mapped to system memory.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link></db:emphasis>::NotMapped</db:code></db:para>
</db:td>
<db:td><db:code>0x00</db:code></db:td>
<db:td>
<db:para>The video buffer is not mapped to memory.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link></db:emphasis>::ReadOnly</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>The mapped memory is populated with data from the video buffer when mapped, but the content of the mapped memory may be discarded when unmapped.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link></db:emphasis>::WriteOnly</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>The mapped memory is uninitialized when mapped, but the possibly modified content will be used to populate the video buffer when unmapped.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link></db:emphasis>::ReadWrite</db:code></db:para>
</db:td>
<db:td><db:code>ReadOnly | WriteOnly</db:code></db:td>
<db:td>
<db:para>The mapped memory is populated with data from the video buffer, and the video buffer is repopulated with the content of the mapped memory when it is unmapped.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#mapMode">mapMode</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoframe.xml#map">map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QVideoFrame">
<db:title>QVideoFrame::QVideoFrame()</db:title>
<db:constructorsynopsis>
<db:methodname>QVideoFrame</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoFrame()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null video frame.</db:para>
</db:section>
<db:section xml:id="QVideoFrame-1">
<db:title>QVideoFrame::QVideoFrame(const QVideoFrameFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QVideoFrame</db:methodname>
<db:methodparam>
<db:type>const QVideoFrameFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoFrame(const QVideoFrameFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a video frame of the given pixel <db:code role="parameter">format</db:code>.</db:para>
</db:section>
<db:section xml:id="QVideoFrame-2">
<db:title>QVideoFrame::QVideoFrame(const QVideoFrame &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QVideoFrame</db:methodname>
<db:methodparam>
<db:type>const QVideoFrame &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoFrame(const QVideoFrame &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a shallow copy of <db:code role="parameter">other</db:code>. Since <db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link> is explicitly shared, these two instances will reflect the same frame.</db:para>
</db:section>
<db:section xml:id="QVideoFrame-3">
<db:title>QVideoFrame::QVideoFrame(QVideoFrame &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QVideoFrame</db:methodname>
<db:methodparam>
<db:type>QVideoFrame &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoFrame(QVideoFrame &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link> by moving from <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QVideoFrame">
<db:title>QVideoFrame::~QVideoFrame()</db:title>
<db:destructorsynopsis>
<db:methodname>~QVideoFrame</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QVideoFrame()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a video frame.</db:para>
</db:section>
<db:section xml:id="bits">
<db:title>uchar *QVideoFrame::bits(int <db:emphasis>plane</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uchar *</db:type>
<db:methodname>bits</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>plane</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uchar * bits(int plane)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the start of the frame data buffer for a <db:code role="parameter">plane</db:code>.</db:para>
<db:para>This value is only valid while the frame data is <db:link xlink:href="qvideoframe.xml#map">mapped</db:link>.</db:para>
<db:para>Changes made to data accessed via this pointer (when mapped with write access) are only guaranteed to have been persisted when <db:link xlink:href="qvideoframe.xml#unmap">unmap</db:link>() is called and when the buffer has been mapped for writing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#map">map</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoframe.xml#mappedBytes">mappedBytes</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoframe.xml#bytesPerLine">bytesPerLine</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoframe.xml#planeCount">planeCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bits-1">
<db:title>const uchar *QVideoFrame::bits(int <db:emphasis>plane</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const uchar *</db:type>
<db:methodname>bits</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>plane</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const uchar * bits(int plane) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the start of the frame data buffer for a <db:code role="parameter">plane</db:code>.</db:para>
<db:para>This value is only valid while the frame data is <db:link xlink:href="qvideoframe.xml#map">mapped</db:link>.</db:para>
<db:para>If the buffer was not mapped with read access, the contents of this buffer will initially be uninitialized.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#map">map</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoframe.xml#mappedBytes">mappedBytes</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoframe.xml#bytesPerLine">bytesPerLine</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoframe.xml#planeCount">planeCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bytesPerLine">
<db:title>int QVideoFrame::bytesPerLine(int <db:emphasis>plane</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>bytesPerLine</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>plane</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int bytesPerLine(int plane) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of bytes in a scan line of a <db:code role="parameter">plane</db:code>.</db:para>
<db:para>This value is only valid while the frame data is <db:link xlink:href="qvideoframe.xml#map">mapped</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#bits">bits</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoframe.xml#map">map</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoframe.xml#mappedBytes">mappedBytes</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoframe.xml#planeCount">planeCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endTime">
<db:title>qint64 QVideoFrame::endTime() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>endTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 endTime() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the presentation time (in microseconds) when a frame should stop being displayed.</db:para>
<db:para>An invalid time is represented as -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#setEndTime">setEndTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="handleType">
<db:title>QVideoFrame::HandleType QVideoFrame::handleType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVideoFrame::HandleType</db:type>
<db:methodname>handleType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoFrame::HandleType handleType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of a video frame's handle.</db:para>
<db:para>The handle type could either be <db:link xlink:href="qvideoframe.xml#HandleType-enum">NoHandle</db:link>, meaning that the frame is memory based, or a RHI texture.</db:para>
</db:section>
<db:section xml:id="height">
<db:title>int QVideoFrame::height() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>height</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int height() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the height of a video frame.</db:para>
</db:section>
<db:section xml:id="isMapped">
<db:title>bool QVideoFrame::isMapped() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isMapped</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isMapped() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Identifies if a video frame's contents are currently mapped to system memory.</db:para>
<db:para>This is a convenience function which checks that the <db:link xlink:href="qvideoframe.xml#MapMode-enum">MapMode</db:link> of the frame is not equal to <db:link xlink:href="qvideoframe.xml#MapMode-enum">QVideoFrame::NotMapped</db:link>.</db:para>
<db:para>Returns true if the contents of the video frame are mapped to system memory, and false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#mapMode">mapMode</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoframe.xml#MapMode-enum">QVideoFrame::MapMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isReadable">
<db:title>bool QVideoFrame::isReadable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isReadable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isReadable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Identifies if the mapped contents of a video frame were read from the frame when it was mapped.</db:para>
<db:para>This is a convenience function which checks if the <db:link xlink:href="qvideoframe.xml#MapMode-enum">MapMode</db:link> contains the <db:link xlink:href="qvideoframe.xml#MapMode-enum">QVideoFrame::WriteOnly</db:link> flag.</db:para>
<db:para>Returns true if the contents of the mapped memory were read from the video frame, and false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#mapMode">mapMode</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoframe.xml#MapMode-enum">QVideoFrame::MapMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QVideoFrame::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Identifies whether a video frame is valid.</db:para>
<db:para>An invalid frame has no video buffer associated with it.</db:para>
<db:para>Returns true if the frame is valid, and false if it is not.</db:para>
</db:section>
<db:section xml:id="isWritable">
<db:title>bool QVideoFrame::isWritable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isWritable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isWritable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Identifies if the mapped contents of a video frame will be persisted when the frame is unmapped.</db:para>
<db:para>This is a convenience function which checks if the <db:link xlink:href="qvideoframe.xml#MapMode-enum">MapMode</db:link> contains the <db:link xlink:href="qvideoframe.xml#MapMode-enum">QVideoFrame::WriteOnly</db:link> flag.</db:para>
<db:para>Returns true if the video frame will be updated when unmapped, and false otherwise.</db:para>
<db:note>
<db:para>The result of altering the data of a frame that is mapped in read-only mode is undefined. Depending on the buffer implementation the changes may be persisted, or worse alter a shared buffer.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#mapMode">mapMode</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoframe.xml#MapMode-enum">QVideoFrame::MapMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="map">
<db:title>bool QVideoFrame::map(QVideoFrame::MapMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>map</db:methodname>
<db:methodparam>
<db:type>QVideoFrame::MapMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool map(QVideoFrame::MapMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the contents of a video frame to system (CPU addressable) memory.</db:para>
<db:para>In some cases the video frame data might be stored in video memory or otherwise inaccessible memory, so it is necessary to map a frame before accessing the pixel data. This may involve copying the contents around, so avoid mapping and unmapping unless required.</db:para>
<db:para>The map <db:code role="parameter">mode</db:code> indicates whether the contents of the mapped memory should be read from and/or written to the frame. If the map mode includes the <db:code>QVideoFrame::ReadOnly</db:code> flag the mapped memory will be populated with the content of the video frame when initially mapped. If the map mode includes the <db:code>QVideoFrame::WriteOnly</db:code> flag the content of the possibly modified mapped memory will be written back to the frame when unmapped.</db:para>
<db:para>While mapped the contents of a video frame can be accessed directly through the pointer returned by the <db:link xlink:href="qvideoframe.xml#bits">bits</db:link>() function.</db:para>
<db:para>When access to the data is no longer needed, be sure to call the <db:link xlink:href="qvideoframe.xml#unmap">unmap</db:link>() function to release the mapped memory and possibly update the video frame contents.</db:para>
<db:para>If the video frame has been mapped in read only mode, it is permissible to map it multiple times in read only mode (and unmap it a corresponding number of times). In all other cases it is necessary to unmap the frame first before mapping a second time.</db:para>
<db:note>
<db:para>Writing to memory that is mapped as read-only is undefined, and may result in changes to shared data or crashes.</db:para>
</db:note>
<db:para>Returns true if the frame was mapped to memory in the given <db:code role="parameter">mode</db:code> and false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#unmap">unmap</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoframe.xml#mapMode">mapMode</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoframe.xml#bits">bits</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapMode">
<db:title>QVideoFrame::MapMode QVideoFrame::mapMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVideoFrame::MapMode</db:type>
<db:methodname>mapMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoFrame::MapMode mapMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the mode a video frame was mapped to system memory in.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#map">map</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoframe.xml#MapMode-enum">QVideoFrame::MapMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mappedBytes">
<db:title>int QVideoFrame::mappedBytes(int <db:emphasis>plane</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>mappedBytes</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>plane</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int mappedBytes(int plane) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of bytes occupied by plane <db:code role="parameter">plane</db:code> of the mapped frame data.</db:para>
<db:para>This value is only valid while the frame data is <db:link xlink:href="qvideoframe.xml#map">mapped</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#map">map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mirrored">
<db:title>bool QVideoFrame::mirrored() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>mirrored</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool mirrored() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the frame should be mirrored before displaying.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#setMirrored">setMirrored</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paint">
<db:title>void QVideoFrame::paint(QPainter *<db:emphasis>painter</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis>, const QVideoFrame::PaintOptions &amp;<db:emphasis>options</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>paint</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVideoFrame::PaintOptions &amp;</db:type>
<db:parameter>options</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paint(QPainter *painter, const QRectF &amp;rect, const QVideoFrame::PaintOptions &amp;options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Uses a <db:link xlink:href="qpainter.xml">QPainter</db:link>, <db:code role="parameter">painter</db:code>, to render this <db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link> to <db:code role="parameter">rect</db:code>. The PaintOptions <db:code role="parameter">options</db:code> can be used to specify a background color and how <db:code role="parameter">rect</db:code> should be filled with the video.</db:para>
<db:note>
<db:para>that rendering will usually happen without hardware acceleration when using this method.</db:para>
</db:note>
</db:section>
<db:section xml:id="pixelFormat">
<db:title>QVideoFrameFormat::PixelFormat QVideoFrame::pixelFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVideoFrameFormat::PixelFormat</db:type>
<db:methodname>pixelFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoFrameFormat::PixelFormat pixelFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pixel format of this video frame.</db:para>
</db:section>
<db:section xml:id="planeCount">
<db:title>int QVideoFrame::planeCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>planeCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int planeCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of planes in the video frame.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#map">map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rotation">
<db:title>QtVideo::Rotation QVideoFrame::rotation() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QtVideo::Rotation</db:type>
<db:methodname>rotation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QtVideo::Rotation rotation() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the angle the frame should be rotated clockwise before displaying.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#setRotation">setRotation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEndTime">
<db:title>void QVideoFrame::setEndTime(qint64 <db:emphasis>time</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEndTime</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>time</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEndTime(qint64 time)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the presentation <db:code role="parameter">time</db:code> (in microseconds) when a frame should stop being displayed.</db:para>
<db:para>An invalid time is represented as -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#endTime">endTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMirrored">
<db:title>void QVideoFrame::setMirrored(bool <db:emphasis>mirrored</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMirrored</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>mirrored</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMirrored(bool mirrored)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">mirrored</db:code> flag for the frame and sets the flag to the underlying <db:link xlink:href="qvideoframe.xml#surfaceFormat">surfaceFormat</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#mirrored">mirrored</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRotation">
<db:title>void QVideoFrame::setRotation(QtVideo::Rotation <db:emphasis>angle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRotation</db:methodname>
<db:methodparam>
<db:type>QtVideo::Rotation</db:type>
<db:parameter>angle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRotation(QtVideo::Rotation angle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">angle</db:code> the frame should be rotated clockwise before displaying.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#rotation">rotation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStartTime">
<db:title>void QVideoFrame::setStartTime(qint64 <db:emphasis>time</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStartTime</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>time</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStartTime(qint64 time)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the presentation <db:code role="parameter">time</db:code> (in microseconds) when the frame should initially be displayed.</db:para>
<db:para>An invalid time is represented as -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#startTime">startTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSubtitleText">
<db:title>void QVideoFrame::setSubtitleText(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSubtitleText</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSubtitleText(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the subtitle text that should be rendered together with this video frame to <db:code role="parameter">text</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#subtitleText">subtitleText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>QSize QVideoFrame::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the dimensions of a video frame.</db:para>
</db:section>
<db:section xml:id="startTime">
<db:title>qint64 QVideoFrame::startTime() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>startTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 startTime() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the presentation time (in microseconds) when the frame should be displayed.</db:para>
<db:para>An invalid time is represented as -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#setStartTime">setStartTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="subtitleText">
<db:title>QString QVideoFrame::subtitleText() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>subtitleText</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString subtitleText() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the subtitle text that should be rendered together with this video frame.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#setSubtitleText">setSubtitleText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="surfaceFormat">
<db:title>QVideoFrameFormat QVideoFrame::surfaceFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVideoFrameFormat</db:type>
<db:methodname>surfaceFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoFrameFormat surfaceFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the surface format of this video frame.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>void QVideoFrame::swap(QVideoFrame &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QVideoFrame &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QVideoFrame &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps the current video frame with <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="toImage">
<db:title>QImage QVideoFrame::toImage() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QImage</db:type>
<db:methodname>toImage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QImage toImage() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Based on the pixel format converts current video frame to image.</db:para>
</db:section>
<db:section xml:id="unmap">
<db:title>void QVideoFrame::unmap()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>unmap</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void unmap()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Releases the memory mapped by the <db:link xlink:href="qvideoframe.xml#map">map</db:link>() function.</db:para>
<db:para>If the <db:link xlink:href="qvideoframe.xml#MapMode-enum">MapMode</db:link> included the <db:link xlink:href="qvideoframe.xml#MapMode-enum">QVideoFrame::WriteOnly</db:link> flag this will persist the current content of the mapped memory to the video frame.</db:para>
<db:para>unmap() should not be called if <db:link xlink:href="qvideoframe.xml#map">map</db:link>() function failed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#map">map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="width">
<db:title>int QVideoFrame::width() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>width</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int width() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the width of a video frame.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QVideoFrame::operator!=(const QVideoFrame &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QVideoFrame &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QVideoFrame &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this <db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link> and <db:code role="parameter">other</db:code> do not reflect the same frame.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QVideoFrame &amp;QVideoFrame::operator=(QVideoFrame &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVideoFrame &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QVideoFrame &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoFrame &amp; operator=(QVideoFrame &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves <db:code role="parameter">other</db:code> into this <db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QVideoFrame &amp;QVideoFrame::operator=(const QVideoFrame &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVideoFrame &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QVideoFrame &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoFrame &amp; operator=(const QVideoFrame &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the contents of <db:code role="parameter">other</db:code> to this video frame. Since <db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link> is explicitly shared, these two instances will reflect the same frame.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QVideoFrame::operator==(const QVideoFrame &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QVideoFrame &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QVideoFrame &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this <db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link> and <db:code role="parameter">other</db:code> reflect the same frame.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QVideoFrame</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-type-documentation">
<db:title>Obsolete Member Type Documentation</db:title>
<db:section xml:id="RotationAngle-enum">
<db:title>enum QVideoFrame::RotationAngle</db:title>
<db:enumsynopsis>
<db:enumname>RotationAngle</db:enumname>
<db:enumitem>
<db:enumidentifier>Rotation0</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Rotation90</db:enumidentifier>
<db:enumvalue>90</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Rotation180</db:enumidentifier>
<db:enumvalue>180</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Rotation270</db:enumidentifier>
<db:enumvalue>270</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum is deprecated since 6.7. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qtvideo.xml#Rotation-enum">QtVideo::Rotation</db:link> instead.</db:para>
<db:para>The angle of the clockwise rotation that should be applied to a video frame before displaying.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link></db:emphasis>::Rotation0</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No rotation required, the frame has correct orientation</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link></db:emphasis>::Rotation90</db:code></db:para>
</db:td>
<db:td><db:code>90</db:code></db:td>
<db:td>
<db:para>The frame should be rotated by 90 degrees</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link></db:emphasis>::Rotation180</db:code></db:para>
</db:td>
<db:td><db:code>180</db:code></db:td>
<db:td>
<db:para>The frame should be rotated by 180 degrees</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link></db:emphasis>::Rotation270</db:code></db:para>
</db:td>
<db:td><db:code>270</db:code></db:td>
<db:td>
<db:para>The frame should be rotated by 270 degrees</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="rotationAngle">
<db:title>QVideoFrame::RotationAngle QVideoFrame::rotationAngle() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVideoFrame::RotationAngle</db:type>
<db:methodname>rotationAngle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoFrame::RotationAngle rotationAngle() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.7. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:code>QVideoFrame::rotation</db:code> instead.</db:para>
<db:para>Returns the angle the frame should be rotated clockwise before displaying.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#setRotationAngle">setRotationAngle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRotationAngle">
<db:title>void QVideoFrame::setRotationAngle(QVideoFrame::RotationAngle <db:emphasis>angle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRotationAngle</db:methodname>
<db:methodparam>
<db:type>QVideoFrame::RotationAngle</db:type>
<db:parameter>angle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRotationAngle(QVideoFrame::RotationAngle angle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.7. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:code>QVideoFrame::setRotation</db:code> instead.</db:para>
<db:para>Sets the <db:code role="parameter">angle</db:code> the frame should be rotated clockwise before displaying.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml#rotationAngle">rotationAngle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
