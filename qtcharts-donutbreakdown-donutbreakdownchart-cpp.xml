<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Donut Chart Breakdown Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how to use create a donut breakdown chart using QPieSeries API.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Charts module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/
#include &quot;donutbreakdownchart.h&quot;
#include &quot;mainslice.h&quot;
#include &lt;QtCharts/QPieSlice&gt;
#include &lt;QtCharts/QPieLegendMarker&gt;

QT_CHARTS_USE_NAMESPACE

DonutBreakdownChart::DonutBreakdownChart(QGraphicsItem *parent, Qt::WindowFlags wFlags)
    : QChart(QChart::ChartTypeCartesian, parent, wFlags)
{
    // create the series for main center pie
    m_mainSeries = new QPieSeries();
    m_mainSeries-&gt;setPieSize(0.7);
    QChart::addSeries(m_mainSeries);
}

void DonutBreakdownChart::addBreakdownSeries(QPieSeries *breakdownSeries, QColor color)
{
    QFont font(&quot;Arial&quot;, 8);

    // add breakdown series as a slice to center pie
    MainSlice *mainSlice = new MainSlice(breakdownSeries);
    mainSlice-&gt;setName(breakdownSeries-&gt;name());
    mainSlice-&gt;setValue(breakdownSeries-&gt;sum());
    m_mainSeries-&gt;append(mainSlice);

    // customize the slice
    mainSlice-&gt;setBrush(color);
    mainSlice-&gt;setLabelVisible();
    mainSlice-&gt;setLabelColor(Qt::white);
    mainSlice-&gt;setLabelPosition(QPieSlice::LabelInsideHorizontal);
    mainSlice-&gt;setLabelFont(font);

    // position and customize the breakdown series
    breakdownSeries-&gt;setPieSize(0.8);
    breakdownSeries-&gt;setHoleSize(0.7);
    breakdownSeries-&gt;setLabelsVisible();
    foreach (QPieSlice *slice, breakdownSeries-&gt;slices()) {
        color = color.lighter(115);
        slice-&gt;setBrush(color);
        slice-&gt;setLabelFont(font);
    }

    // add the series to the chart
    QChart::addSeries(breakdownSeries);

    // recalculate breakdown donut segments
    recalculateAngles();

    // update customize legend markers
    updateLegendMarkers();
}

void DonutBreakdownChart::recalculateAngles()
{
    qreal angle = 0;
    foreach (QPieSlice *slice, m_mainSeries-&gt;slices()) {
        QPieSeries *breakdownSeries = qobject_cast&lt;MainSlice *&gt;(slice)-&gt;breakdownSeries();
        breakdownSeries-&gt;setPieStartAngle(angle);
        angle += slice-&gt;percentage() * 360.0; // full pie is 360.0
        breakdownSeries-&gt;setPieEndAngle(angle);
    }
}

void DonutBreakdownChart::updateLegendMarkers()
{
    // go through all markers
    foreach (QAbstractSeries *series, series()) {
        foreach (QLegendMarker *marker, legend()-&gt;markers(series)) {
            QPieLegendMarker *pieMarker = qobject_cast&lt;QPieLegendMarker *&gt;(marker);
            if (series == m_mainSeries) {
                // hide markers from main series
                pieMarker-&gt;setVisible(false);
            } else {
                // modify markers from breakdown series
                pieMarker-&gt;setLabel(QString(&quot;%1 %2%&quot;)
                                    .arg(pieMarker-&gt;slice()-&gt;label())
                                    .arg(pieMarker-&gt;slice()-&gt;percentage() * 100, 0, 'f', 2));
                pieMarker-&gt;setFont(QFont(&quot;Arial&quot;, 8));
            }
        }
    }
}

</db:programlisting>
</db:article>
