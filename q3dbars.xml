<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Q3DBars Class</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="q3dbars.xml">Q3DBars</db:link> class provides methods for rendering 3D bar graphs.</db:para>
<db:para>This class was introduced in QtDataVisualization 1.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>Q3DBars</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtDataVisualization 1.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstract3dgraph.xml" xlink:role="class">QAbstract3DGraph</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class enables developers to render bar graphs in 3D and to view them by rotating the scene freely. Rotation is done by holding down the right mouse button and moving the mouse. Zooming is done by mouse wheel. Selection, if enabled, is done by left mouse button. The scene can be reset to default camera view by clicking mouse wheel. In touch devices rotation is done by tap-and-move, selection by tap-and-hold and zoom by pinch.</db:para>
<db:para>If no axes are set explicitly to <db:link xlink:href="q3dbars.xml">Q3DBars</db:link>, temporary default axes with no labels are created. These default axes can be modified via axis accessors, but as soon any axis is set explicitly for the orientation, the default axis for that orientation is destroyed.</db:para>
<db:para><db:link xlink:href="q3dbars.xml">Q3DBars</db:link> supports more than one series visible at the same time. It is not necessary for all series to have the same amount of rows and columns. Row and column labels are taken from the first added series, unless explicitly defined to row and column axes.</db:para>
<db:section xml:id="how-to-construct-a-minimal-q3dbars-graph">
<db:title>How to construct a minimal Q3DBars graph</db:title>
<db:para>First, construct an instance of <db:link xlink:href="q3dbars.xml">Q3DBars</db:link>. Since we are running the graph as top level window in this example, we need to clear the <db:code>Qt::FramelessWindowHint</db:code> flag, which gets set by default:</db:para>
<db:programlisting language="cpp">Q3DBars bars;
bars.setFlags(bars.flags() ^ Qt::FramelessWindowHint);
</db:programlisting>
<db:para>After constructing <db:link xlink:href="q3dbars.xml">Q3DBars</db:link>, you can set the data window by changing the range on the row and column axes. It is not mandatory, as data window will default to showing all of the data in the series. If the amount of data is large, it is usually preferable to show just a portion of it. For the example, let's set the data window to show first five rows and columns:</db:para>
<db:programlisting language="cpp">bars.rowAxis()-&amp;gt;setRange(0, 4);
bars.columnAxis()-&amp;gt;setRange(0, 4);
</db:programlisting>
<db:para>Now <db:link xlink:href="q3dbars.xml">Q3DBars</db:link> is ready to receive data to be rendered. Create a series with one row of 5 values:</db:para>
<db:programlisting language="cpp">QBar3DSeries *series = new QBar3DSeries;
QBarDataRow *data = new QBarDataRow;
*data &amp;lt;&amp;lt; 1.0f &amp;lt;&amp;lt; 3.0f &amp;lt;&amp;lt; 7.5f &amp;lt;&amp;lt; 5.0f &amp;lt;&amp;lt; 2.2f;
series-&amp;gt;dataProxy()-&amp;gt;addRow(data);
bars.addSeries(series);
</db:programlisting>
<db:note>
<db:para>We set the data window to 5 x 5, but we are adding only one row of data. This is ok, the rest of the rows will just be blank.</db:para>
</db:note>
<db:para>Finally you will need to set it visible:</db:para>
<db:programlisting language="cpp">bars.show();
</db:programlisting>
<db:para>The complete code needed to create and display this graph is:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QtDataVisualization&amp;gt;

using namespace QtDataVisualization;

int main(int argc, char **argv)
{
    QGuiApplication app(argc, argv);

    Q3DBars bars;
    bars.setFlags(bars.flags() ^ Qt::FramelessWindowHint);
    bars.rowAxis()-&amp;gt;setRange(0, 4);
    bars.columnAxis()-&amp;gt;setRange(0, 4);
    QBar3DSeries *series = new QBar3DSeries;
    QBarDataRow *data = new QBarDataRow;
    *data &amp;lt;&amp;lt; 1.0f &amp;lt;&amp;lt; 3.0f &amp;lt;&amp;lt; 7.5f &amp;lt;&amp;lt; 5.0f &amp;lt;&amp;lt; 2.2f;
    series-&amp;gt;dataProxy()-&amp;gt;addRow(data);
    bars.addSeries(series);
    bars.show();

    return app.exec();
}
</db:programlisting>
<db:para>And this is what those few lines of code produce:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/q3dbars-minimal.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The scene can be rotated, zoomed into, and a bar can be selected to view its value, but no other interaction is included in this minimal code example. You can learn more by familiarizing yourself with the examples provided, like the <db:link xlink:href="qtdatavisualization-bars-example.xml">Bars Example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dscatter.xml">Q3DScatter</db:link></db:member>
<db:member><db:link xlink:href="q3dsurface.xml">Q3DSurface</db:link></db:member>
<db:member><db:link xlink:href="qtdatavisualization-module.xml">Qt Data Visualization C++ Classes</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="barSpacing-prop">
<db:title>barSpacing : QSizeF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QSizeF</db:type>
<db:varname>barSpacing</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">barSpacing</db:synopsisinfo>
<db:synopsisinfo role="setter">setBarSpacing</db:synopsisinfo>
<db:synopsisinfo role="notifier">barSpacingChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Bar spacing in the X and Z dimensions.</db:para>
<db:para>Preset to <db:code>(1.0, 1.0)</db:code> by default. Spacing is affected by the <db:link xlink:href="q3dbars.xml#barSpacingRelative-prop">barSpacingRelative</db:link> property.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsizef.xml">QSizeF</db:link></db:type> <db:emphasis role="bold">barSpacing</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBarSpacing</db:emphasis>(const <db:type><db:link xlink:href="qsizef.xml">QSizeF</db:link></db:type> &amp;<db:emphasis>spacing</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">barSpacingChanged</db:emphasis>(const <db:type><db:link xlink:href="qsizef.xml">QSizeF</db:link></db:type> &amp;<db:emphasis>spacing</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dbars.xml#barSpacingRelative-prop">barSpacingRelative</db:link></db:member>
<db:member><db:link xlink:href="q3dbars.xml#multiSeriesUniform-prop">multiSeriesUniform</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="barSpacingRelative-prop">
<db:title>barSpacingRelative : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>barSpacingRelative</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isBarSpacingRelative</db:synopsisinfo>
<db:synopsisinfo role="setter">setBarSpacingRelative</db:synopsisinfo>
<db:synopsisinfo role="notifier">barSpacingRelativeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether spacing is absolute or relative to bar thickness.</db:para>
<db:para>If it is <db:code>true</db:code>, the value of <db:code>0.0</db:code> means that the bars are placed side-to-side, <db:code>1.0</db:code> means that a space as wide as the thickness of one bar is left between the bars, and so on. Preset to <db:code>true</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isBarSpacingRelative</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBarSpacingRelative</db:emphasis>(<db:type>bool</db:type> <db:emphasis>relative</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">barSpacingRelativeChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>relative</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="barThickness-prop">
<db:title>barThickness : float</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>float</db:type>
<db:varname>barThickness</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">barThickness</db:synopsisinfo>
<db:synopsisinfo role="setter">setBarThickness</db:synopsisinfo>
<db:synopsisinfo role="notifier">barThicknessChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the bar thickness ratio between the X and Z dimensions.</db:para>
<db:para>The value <db:code>1.0</db:code> means that the bars are as wide as they are deep, whereas <db:code>0.5</db:code> makes them twice as deep as they are wide. Preset to <db:code>1.0</db:code> by default.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">barThickness</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBarThickness</db:emphasis>(<db:type>float</db:type> <db:emphasis>thicknessRatio</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">barThicknessChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>thicknessRatio</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="columnAxis-prop">
<db:title>columnAxis : QCategory3DAxis*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QCategory3DAxis*</db:type>
<db:varname>columnAxis</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">columnAxis</db:synopsisinfo>
<db:synopsisinfo role="setter">setColumnAxis</db:synopsisinfo>
<db:synopsisinfo role="notifier">columnAxisChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the axis attached to the active column.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcategory3daxis.xml">QCategory3DAxis</db:link></db:type> *<db:emphasis role="bold">columnAxis</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="q3dbars.xml#setColumnAxis">setColumnAxis</db:link></db:emphasis>(<db:type><db:link xlink:href="qcategory3daxis.xml">QCategory3DAxis</db:link></db:type> *<db:emphasis>axis</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">columnAxisChanged</db:emphasis>(<db:type><db:link xlink:href="qcategory3daxis.xml">QCategory3DAxis</db:link></db:type> *<db:emphasis>axis</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="floorLevel-prop">
<db:title>floorLevel : float</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>float</db:type>
<db:varname>floorLevel</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">floorLevel</db:synopsisinfo>
<db:synopsisinfo role="setter">setFloorLevel</db:synopsisinfo>
<db:synopsisinfo role="notifier">floorLevelChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the floor level for the bar graph in Y-axis data coordinates.</db:para>
<db:para>The actual floor level will be restricted by the Y-axis minimum and maximum values. Defaults to zero.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">floorLevel</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFloorLevel</db:emphasis>(<db:type>float</db:type> <db:emphasis>level</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">floorLevelChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>level</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="multiSeriesUniform-prop">
<db:title>multiSeriesUniform : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>multiSeriesUniform</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isMultiSeriesUniform</db:synopsisinfo>
<db:synopsisinfo role="setter">setMultiSeriesUniform</db:synopsisinfo>
<db:synopsisinfo role="notifier">multiSeriesUniformChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether bars are to be scaled with proportions set to a single series bar even if there are multiple series displayed.</db:para>
<db:para>If set to <db:code>true</db:code>, <db:link xlink:href="q3dbars.xml#barSpacing-prop">bar spacing</db:link> will be correctly applied only to the X-axis. Preset to <db:code>false</db:code> by default.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isMultiSeriesUniform</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMultiSeriesUniform</db:emphasis>(<db:type>bool</db:type> <db:emphasis>uniform</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">multiSeriesUniformChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>uniform</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="primarySeries-prop">
<db:title>primarySeries : QBar3DSeries*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QBar3DSeries*</db:type>
<db:varname>primarySeries</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">primarySeries</db:synopsisinfo>
<db:synopsisinfo role="setter">setPrimarySeries</db:synopsisinfo>
<db:synopsisinfo role="notifier">primarySeriesChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the primary series of the graph.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qbar3dseries.xml">QBar3DSeries</db:link></db:type> *<db:emphasis role="bold">primarySeries</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="q3dbars.xml#setPrimarySeries">setPrimarySeries</db:link></db:emphasis>(<db:type><db:link xlink:href="qbar3dseries.xml">QBar3DSeries</db:link></db:type> *<db:emphasis>series</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">primarySeriesChanged</db:emphasis>(<db:type><db:link xlink:href="qbar3dseries.xml">QBar3DSeries</db:link></db:type> *<db:emphasis>series</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="rowAxis-prop">
<db:title>rowAxis : QCategory3DAxis*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QCategory3DAxis*</db:type>
<db:varname>rowAxis</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">rowAxis</db:synopsisinfo>
<db:synopsisinfo role="setter">setRowAxis</db:synopsisinfo>
<db:synopsisinfo role="notifier">rowAxisChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the axis attached to the active row.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcategory3daxis.xml">QCategory3DAxis</db:link></db:type> *<db:emphasis role="bold">rowAxis</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="q3dbars.xml#setRowAxis">setRowAxis</db:link></db:emphasis>(<db:type><db:link xlink:href="qcategory3daxis.xml">QCategory3DAxis</db:link></db:type> *<db:emphasis>axis</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rowAxisChanged</db:emphasis>(<db:type><db:link xlink:href="qcategory3daxis.xml">QCategory3DAxis</db:link></db:type> *<db:emphasis>axis</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="selectedSeries-prop">
<db:title>[read-only] selectedSeries : QBar3DSeries* const</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QBar3DSeries*</db:type>
<db:varname>selectedSeries</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">selectedSeries</db:synopsisinfo>
<db:synopsisinfo role="notifier">selectedSeriesChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the selected series or a null value.</db:para>
<db:para>If selectionMode has the <db:code>SelectionMultiSeries</db:code> flag set, this property holds the series that owns the selected bar.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qbar3dseries.xml">QBar3DSeries</db:link></db:type> *<db:emphasis role="bold">selectedSeries</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">selectedSeriesChanged</db:emphasis>(<db:type><db:link xlink:href="qbar3dseries.xml">QBar3DSeries</db:link></db:type> *<db:emphasis>series</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="valueAxis-prop">
<db:title>valueAxis : QValue3DAxis*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QValue3DAxis*</db:type>
<db:varname>valueAxis</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">valueAxis</db:synopsisinfo>
<db:synopsisinfo role="setter">setValueAxis</db:synopsisinfo>
<db:synopsisinfo role="notifier">valueAxisChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets the active value axis (the Y-axis) to <db:code role="parameter">axis</db:code>. Implicitly calls <db:link xlink:href="q3dbars.xml#addAxis">addAxis</db:link>() to transfer the ownership of <db:code role="parameter">axis</db:code> to this graph.</db:para>
<db:para>If <db:code role="parameter">axis</db:code> is null, a temporary default axis with no labels and an automatically adjusting range is created. This temporary axis is destroyed if another axis is set explicitly to the same orientation.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvalue3daxis.xml">QValue3DAxis</db:link></db:type> *<db:emphasis role="bold">valueAxis</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setValueAxis</db:emphasis>(<db:type><db:link xlink:href="qvalue3daxis.xml">QValue3DAxis</db:link></db:type> *<db:emphasis>axis</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">valueAxisChanged</db:emphasis>(<db:type><db:link xlink:href="qvalue3daxis.xml">QValue3DAxis</db:link></db:type> *<db:emphasis>axis</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dbars.xml#addAxis">addAxis</db:link>()</db:member>
<db:member><db:link xlink:href="q3dbars.xml#releaseAxis">releaseAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="Q3DBars">
<db:title>[explicit] Q3DBars::Q3DBars(const QSurfaceFormat *<db:emphasis>format</db:emphasis> = nullptr, QWindow *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>Q3DBars</db:methodname>
<db:methodparam>
<db:type>const QSurfaceFormat *</db:type>
<db:parameter>format</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">Q3DBars(const QSurfaceFormat *format, QWindow *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new 3D bar graph with optional <db:code role="parameter">parent</db:code> window and surface <db:code role="parameter">format</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.Q3DBars">
<db:title>[virtual] Q3DBars::~Q3DBars()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~Q3DBars</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~Q3DBars()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the 3D bar graph.</db:para>
</db:section>
<db:section xml:id="addAxis">
<db:title>void Q3DBars::addAxis(QAbstract3DAxis *<db:emphasis>axis</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addAxis</db:methodname>
<db:methodparam>
<db:type>QAbstract3DAxis *</db:type>
<db:parameter>axis</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addAxis(QAbstract3DAxis *axis)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds <db:code role="parameter">axis</db:code> to the graph. The axes added via addAxis are not yet taken to use, addAxis is simply used to give the ownership of the <db:code role="parameter">axis</db:code> to the graph. The <db:code role="parameter">axis</db:code> must not be null or added to another graph.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dbars.xml#releaseAxis">releaseAxis</db:link>()</db:member>
<db:member><db:link xlink:href="q3dbars.xml#valueAxis-prop">setValueAxis</db:link>()</db:member>
<db:member><db:link xlink:href="q3dbars.xml#setRowAxis">setRowAxis</db:link>()</db:member>
<db:member><db:link xlink:href="q3dbars.xml#setColumnAxis">setColumnAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addSeries">
<db:title>void Q3DBars::addSeries(QBar3DSeries *<db:emphasis>series</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addSeries</db:methodname>
<db:methodparam>
<db:type>QBar3DSeries *</db:type>
<db:parameter>series</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addSeries(QBar3DSeries *series)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the <db:code role="parameter">series</db:code> to the graph. A graph can contain multiple series, but only one set of axes, so the rows and columns of all series must match for the visualized data to be meaningful. If the graph has multiple visible series, only the primary series will generate the row or column labels on the axes in cases where the labels are not explicitly set to the axes. If the newly added series has specified a selected bar, it will be highlighted and any existing selection will be cleared. Only one added series can have an active selection.</db:para>
<db:para>/sa <db:link xlink:href="q3dbars.xml#seriesList">seriesList</db:link>(), <db:link xlink:href="q3dbars.xml#primarySeries-prop">primarySeries</db:link></db:para>
</db:section>
<db:section xml:id="axes">
<db:title>QList&lt;QAbstract3DAxis *&gt; Q3DBars::axes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QAbstract3DAxis *&gt;</db:type>
<db:methodname>axes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QAbstract3DAxis *&gt; axes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of all added axes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dbars.xml#addAxis">addAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertSeries">
<db:title>void Q3DBars::insertSeries(int <db:emphasis>index</db:emphasis>, QBar3DSeries *<db:emphasis>series</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertSeries</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QBar3DSeries *</db:type>
<db:parameter>series</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertSeries(int index, QBar3DSeries *series)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts the <db:code role="parameter">series</db:code> into the position <db:code role="parameter">index</db:code> in the series list. If the <db:code role="parameter">series</db:code> has already been added to the list, it is moved to the new <db:code role="parameter">index</db:code>.</db:para>
<db:note>
<db:para>When moving a series to a new <db:code role="parameter">index</db:code> that is after its old index, the new position in list is calculated as if the series was still in its old index, so the final index is actually the <db:code role="parameter">index</db:code> decremented by one.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dbars.xml#addSeries">addSeries</db:link>()</db:member>
<db:member><db:link xlink:href="q3dbars.xml#seriesList">seriesList</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="releaseAxis">
<db:title>void Q3DBars::releaseAxis(QAbstract3DAxis *<db:emphasis>axis</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>releaseAxis</db:methodname>
<db:methodparam>
<db:type>QAbstract3DAxis *</db:type>
<db:parameter>axis</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void releaseAxis(QAbstract3DAxis *axis)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Releases the ownership of the <db:code role="parameter">axis</db:code> back to the caller, if it is added to this graph. If the released <db:code role="parameter">axis</db:code> is in use, a new default axis will be created and set active.</db:para>
<db:para>If the default axis is released and added back later, it behaves as any other axis would.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dbars.xml#addAxis">addAxis</db:link>()</db:member>
<db:member><db:link xlink:href="q3dbars.xml#valueAxis-prop">setValueAxis</db:link>()</db:member>
<db:member><db:link xlink:href="q3dbars.xml#setRowAxis">setRowAxis</db:link>()</db:member>
<db:member><db:link xlink:href="q3dbars.xml#setColumnAxis">setColumnAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeSeries">
<db:title>void Q3DBars::removeSeries(QBar3DSeries *<db:emphasis>series</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeSeries</db:methodname>
<db:methodparam>
<db:type>QBar3DSeries *</db:type>
<db:parameter>series</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeSeries(QBar3DSeries *series)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the <db:code role="parameter">series</db:code> from the graph.</db:para>
</db:section>
<db:section xml:id="seriesList">
<db:title>QList&lt;QBar3DSeries *&gt; Q3DBars::seriesList() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QBar3DSeries *&gt;</db:type>
<db:methodname>seriesList</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QBar3DSeries *&gt; seriesList() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of series added to this graph.</db:para>
</db:section>
<db:section xml:id="setColumnAxis">
<db:title>void Q3DBars::setColumnAxis(QCategory3DAxis *<db:emphasis>axis</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setColumnAxis</db:methodname>
<db:methodparam>
<db:type>QCategory3DAxis *</db:type>
<db:parameter>axis</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">columnAxis</db:synopsisinfo>
<db:synopsisinfo role="signature">void setColumnAxis(QCategory3DAxis *axis)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the axis of the active column to <db:code role="parameter">axis</db:code>. Implicitly calls <db:link xlink:href="q3dbars.xml#addAxis">addAxis</db:link>() to transfer the ownership of the axis to this graph.</db:para>
<db:para>If <db:code role="parameter">axis</db:code> is null, a temporary default axis with no labels is created. This temporary axis is destroyed if another axis is set explicitly to the same orientation.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="q3dbars.xml#columnAxis-prop">columnAxis</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dbars.xml#columnAxis-prop">columnAxis</db:link>()</db:member>
<db:member><db:link xlink:href="q3dbars.xml#addAxis">addAxis</db:link>()</db:member>
<db:member><db:link xlink:href="q3dbars.xml#releaseAxis">releaseAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPrimarySeries">
<db:title>void Q3DBars::setPrimarySeries(QBar3DSeries *<db:emphasis>series</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPrimarySeries</db:methodname>
<db:methodparam>
<db:type>QBar3DSeries *</db:type>
<db:parameter>series</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">primarySeries</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPrimarySeries(QBar3DSeries *series)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">series</db:code> as the primary series of the graph. The primary series determines the row and column axis labels when the labels are not explicitly set to the axes.</db:para>
<db:para>If the specified series is not yet added to the graph, setting it as the primary series will also implicitly add it to the graph.</db:para>
<db:para>If the primary series itself is removed from the graph, this property resets to default.</db:para>
<db:para>If <db:code role="parameter">series</db:code> is null, this property resets to default. Defaults to the first added series or zero if no series are added to the graph.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="q3dbars.xml#primarySeries-prop">primarySeries</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dbars.xml#primarySeries-prop">primarySeries</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRowAxis">
<db:title>void Q3DBars::setRowAxis(QCategory3DAxis *<db:emphasis>axis</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRowAxis</db:methodname>
<db:methodparam>
<db:type>QCategory3DAxis *</db:type>
<db:parameter>axis</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">rowAxis</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRowAxis(QCategory3DAxis *axis)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the axis of the active row to <db:code role="parameter">axis</db:code>. Implicitly calls <db:link xlink:href="q3dbars.xml#addAxis">addAxis</db:link>() to transfer the ownership of the axis to this graph.</db:para>
<db:para>If <db:code role="parameter">axis</db:code> is null, a temporary default axis with no labels is created. This temporary axis is destroyed if another axis is set explicitly to the same orientation.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="q3dbars.xml#rowAxis-prop">rowAxis</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dbars.xml#rowAxis-prop">rowAxis</db:link>()</db:member>
<db:member><db:link xlink:href="q3dbars.xml#addAxis">addAxis</db:link>()</db:member>
<db:member><db:link xlink:href="q3dbars.xml#releaseAxis">releaseAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
