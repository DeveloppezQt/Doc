<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Using Legend Markers</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to make use of legend markers.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:note>
<db:para>This is part of the <db:link xlink:href="qtcharts-chartsgallery-example.xml">Charts with Widgets Gallery</db:link> example.</db:para>
</db:note>
<db:para>In this example we create an application which uses the <db:link xlink:href="qlegendmarker.xml">QLegendMarker</db:link> clicked signal to show/hide the corresponding series in a chart. The connect marker button connects a clicked signal from all markers in a legend to the handleMarkerClicked slot.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_legendmarkers.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Our application has buttons for adding or removing a series in a chart and a button to connect or disconnect the legend markers clicked signal to our handler. In the image above we have connected the markers and clicked on one of them.</db:para>
<db:programlisting language="cpp">    // Connect all markers to handler
    const auto markers = m_chart-&amp;gt;legend()-&amp;gt;markers();
    for (QLegendMarker *marker : markers) {
        // Disconnect possible existing connection to avoid multiple connections
        QObject::disconnect(marker, &amp;amp;QLegendMarker::clicked,
                            this, &amp;amp;LegendMarkersWidget::handleMarkerClicked);
        QObject::connect(marker, &amp;amp;QLegendMarker::clicked,
                         this, &amp;amp;LegendMarkersWidget::handleMarkerClicked);
    }
</db:programlisting>
<db:para>Here we connect the markers in the legend to our handler. To avoid connecting the same marker more than once, we first disconnect it.</db:para>
<db:programlisting language="cpp">    const auto markers = m_chart-&amp;gt;legend()-&amp;gt;markers();
    for (QLegendMarker *marker : markers) {
        QObject::disconnect(marker, &amp;amp;QLegendMarker::clicked,
                            this, &amp;amp;LegendMarkersWidget::handleMarkerClicked);
    }
</db:programlisting>
<db:para>Here we disconnect all markers from our handler.</db:para>
<db:programlisting language="cpp">    auto marker = qobject_cast&amp;lt;QLegendMarker *&amp;gt;(sender());
    Q_ASSERT(marker);
</db:programlisting>
<db:para>In our handler we first cast the sender of the event to the <db:link xlink:href="qlegendmarker.xml">QLegendMarker</db:link>.</db:para>
<db:programlisting language="cpp">    switch (marker-&amp;gt;type())
</db:programlisting>
<db:para>Then we check the type of the marker. This is required if we want to access the detailed methods of the marker and cast it to the correct type. If all we need is the pointer to <db:link xlink:href="qabstractseries.xml">QAbstractSeries</db:link>, the casting isn't necessary. In case of a pie or bar series, we may need the pointer to a related <db:link xlink:href="qpieslice.xml">QPieSlice</db:link> or <db:link xlink:href="qbarset.xml">QBarSet</db:link>.</db:para>
<db:programlisting language="cpp">        // Toggle visibility of series
        marker-&amp;gt;series()-&amp;gt;setVisible(!marker-&amp;gt;series()-&amp;gt;isVisible());

        // Turn legend marker back to visible, since hiding series also hides the marker
        // and we don't want it to happen now.
        marker-&amp;gt;setVisible(true);
</db:programlisting>
<db:para>We want to toggle the visibility of the series, when the marker is clicked. To do so, we get the pointer to a related series from the marker and toggle its visibility. Since the legend marker follows the visibility of the series by default, we also set the marked back to visible. If we don't do so, the marker will be invisible in the legend and we can't click on it anymore.</db:para>
<db:programlisting language="cpp">        // Dim the marker, if series is not visible
        qreal alpha = 1.0;

        if (!marker-&amp;gt;series()-&amp;gt;isVisible())
            alpha = 0.5;

        QColor color;
        QBrush brush = marker-&amp;gt;labelBrush();
        color = brush.color();
        color.setAlphaF(alpha);
        brush.setColor(color);
        marker-&amp;gt;setLabelBrush(brush);

        brush = marker-&amp;gt;brush();
        color = brush.color();
        color.setAlphaF(alpha);
        brush.setColor(color);
        marker-&amp;gt;setBrush(brush);

        QPen pen = marker-&amp;gt;pen();
        color = pen.color();
        color.setAlphaF(alpha);
        pen.setColor(color);
        marker-&amp;gt;setPen(pen);
</db:programlisting>
<db:para>Instead of making the marker invisible when the series is hidden, we dim the color of the marker. Here we do it by modifying the color of the laberBrush.</db:para>
</db:article>
