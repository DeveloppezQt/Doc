<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Logarithmic Axis Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to use QLogValueAxis.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_logvalueaxis.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Create a QLineSeries instance and add some data to it.</db:para>
<db:programlisting language="cpp">QLineSeries *series = new QLineSeries();
*series &lt;&lt; QPointF(1, 1) &lt;&lt; QPointF(2, 73) &lt;&lt; QPointF(3, 268) &lt;&lt; QPointF(4, 17) &lt;&lt; QPointF(5, 4325) &lt;&lt; QPointF(6, 723);
</db:programlisting>
<db:para>To present the data on the chart we need a QChart instance. Add the series to it, hide the legend and set the title of the chart.</db:para>
<db:programlisting language="cpp">QChart *chart = new QChart();
chart-&gt;addSeries(series);
chart-&gt;legend()-&gt;hide();
chart-&gt;setTitle(&quot;Logarithmic axis example&quot;);
</db:programlisting>
<db:para>Create the axes. Add them to the chart and attach to the series.</db:para>
<db:programlisting language="cpp">QValueAxis *axisX = new QValueAxis;
axisX-&gt;setTitleText(&quot;Data point&quot;);
axisX-&gt;setTickCount(6);
axisX-&gt;setLabelFormat(&quot;%i&quot;);
chart-&gt;addAxis(axisX, Qt::AlignBottom);
series-&gt;attachAxis(axisX);

QLogValueAxis *axisY = new QLogValueAxis;
axisY-&gt;setLabelFormat(&quot;%g&quot;);
axisY-&gt;setTitleText(&quot;Values&quot;);
axisY-&gt;setBase(8);
chart-&gt;addAxis(axisY, Qt::AlignLeft);
series-&gt;attachAxis(axisY);
</db:programlisting>
<db:para>Then create a QChartView object with QChart as a parameter. Enable antialiasing to have the rendered line look nicer.</db:para>
<db:programlisting language="cpp">QChartView *chartView = new QChartView(chart);
chartView-&gt;setRenderHint(QPainter::Antialiasing);
</db:programlisting>
<db:para>The chart is ready to be shown.</db:para>
<db:programlisting language="cpp">QMainWindow window;
window.setCentralWidget(chartView);
window.resize(400, 300);
window.show();

</db:programlisting>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="logvalueaxis/logvalueaxis.pro">logvalueaxis/logvalueaxis.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="logvalueaxis/main.cpp">logvalueaxis/main.cpp</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
