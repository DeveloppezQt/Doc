<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNetworkCookie Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnetworkcookie.xml">QNetworkCookie</db:link> class holds one network cookie.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNetworkCookie</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNetworkCookie is part of <db:simplelist><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Cookies are small bits of information that stateless protocols like HTTP use to maintain some persistent information across requests.</db:para>
<db:para>A cookie is set by a remote server when it replies to a request and it expects the same cookie to be sent back when further requests are sent.</db:para>
<db:para><db:link xlink:href="qnetworkcookie.xml">QNetworkCookie</db:link> holds one such cookie as received from the network. A cookie has a name and a value, but those are opaque to the application (that is, the information stored in them has no meaning to the application). A cookie has an associated path name and domain, which indicate when the cookie should be sent again to the server.</db:para>
<db:para>A cookie can also have an expiration date, indicating its validity. If the expiration date is not present, the cookie is considered a &quot;session cookie&quot; and should be discarded when the application exits (or when its concept of session is over).</db:para>
<db:para><db:link xlink:href="qnetworkcookie.xml">QNetworkCookie</db:link> provides a way of parsing a cookie from the HTTP header format using the <db:link xlink:href="qnetworkcookie.xml#parseCookies">QNetworkCookie::parseCookies</db:link>() function. However, when received in a <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>, the cookie is already parsed.</db:para>
<db:para>This class implements cookies as described by the <db:link xlink:href="http://cgi.netscape.com/newsref/std/cookie_spec.html">initial cookie specification by Netscape</db:link>, which is somewhat similar to the <db:link xlink:href="http://www.rfc-editor.org/rfc/rfc2109.txt">RFC 2109</db:link> specification, plus the <db:link xlink:href="http://msdn.microsoft.com/en-us/library/ms533046(VS.85).aspx">&quot;HttpOnly&quot; extension</db:link>. The more recent <db:link xlink:href="http://www.rfc-editor.org/rfc/rfc2965.txt">RFC 2965</db:link> specification (which uses the Set-Cookie2 header) is not supported.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookiejar.xml">QNetworkCookieJar</db:link></db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:member>
<db:member><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="RawForm-enum">
<db:title>enum QNetworkCookie::RawForm</db:title>
<db:para>This enum is used with the <db:link xlink:href="qnetworkcookie.xml#toRawForm">toRawForm</db:link>() function to declare which form of a cookie shall be returned.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkcookie.xml">QNetworkCookie</db:link></db:emphasis>::NameAndValueOnly</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>makes <db:link xlink:href="qnetworkcookie.xml#toRawForm">toRawForm</db:link>() return only the &quot;NAME=VALUE&quot; part of the cookie, as suitable for sending back to a server in a client request's &quot;Cookie:&quot; header. Multiple cookies are separated by a semi-colon in the &quot;Cookie:&quot; header field.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkcookie.xml">QNetworkCookie</db:link></db:emphasis>::Full</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>makes <db:link xlink:href="qnetworkcookie.xml#toRawForm">toRawForm</db:link>() return the full cookie contents, as suitable for sending to a client in a server's &quot;Set-Cookie:&quot; header.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Note that only the Full form of the cookie can be parsed back into its original contents.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#toRawForm">toRawForm</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkcookie.xml#parseCookies">parseCookies</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNetworkCookie-1">
<db:title>[explicit] QNetworkCookie::QNetworkCookie(const QByteArray &amp;<db:emphasis>name</db:emphasis> = QByteArray(), const QByteArray &amp;<db:emphasis>value</db:emphasis> = QByteArray())</db:title>
<db:para>Create a new <db:link xlink:href="qnetworkcookie.xml">QNetworkCookie</db:link> object, initializing the cookie name to <db:code role="parameter">name</db:code> and its value to <db:code role="parameter">value</db:code>.</db:para>
<db:para>A cookie is only valid if it has a name. However, the value is opaque to the application and being empty may have significance to the remote server.</db:para>
</db:section>
<db:section xml:id="QNetworkCookie">
<db:title>QNetworkCookie::QNetworkCookie(const QNetworkCookie &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Creates a new <db:link xlink:href="qnetworkcookie.xml">QNetworkCookie</db:link> object by copying the contents of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QNetworkCookie">
<db:title>[noexcept] QNetworkCookie::~QNetworkCookie()</db:title>
<db:para>Destroys this <db:link xlink:href="qnetworkcookie.xml">QNetworkCookie</db:link> object.</db:para>
</db:section>
<db:section xml:id="domain">
<db:title>QString QNetworkCookie::domain() const</db:title>
<db:para>Returns the domain this cookie is associated with. This corresponds to the &quot;domain&quot; field of the cookie string.</db:para>
<db:para>Note that the domain here may start with a dot, which is not a valid hostname. However, it means this cookie matches all hostnames ending with that domain name.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#setDomain">setDomain</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="expirationDate">
<db:title>QDateTime QNetworkCookie::expirationDate() const</db:title>
<db:para>Returns the expiration date for this cookie. If this cookie is a session cookie, the <db:link xlink:href="qdatetime.xml">QDateTime</db:link> returned will not be valid. If the date is in the past, this cookie has already expired and should not be sent again back to a remote server.</db:para>
<db:para>The expiration date corresponds to the parameters of the &quot;expires&quot; entry in the cookie string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#isSessionCookie">isSessionCookie</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkcookie.xml#setExpirationDate">setExpirationDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasSameIdentifier">
<db:title>bool QNetworkCookie::hasSameIdentifier(const QNetworkCookie &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this cookie has the same identifier tuple as <db:code role="parameter">other</db:code>. The identifier tuple is composed of the name, domain and path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isHttpOnly">
<db:title>[since 4.5] bool QNetworkCookie::isHttpOnly() const</db:title>
<db:para>Returns true if the &quot;HttpOnly&quot; flag is enabled for this cookie.</db:para>
<db:para>A cookie that is &quot;HttpOnly&quot; is only set and retrieved by the network requests and replies; i.e., the HTTP protocol. It is not accessible from scripts running on browsers.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#isSecure">isSecure</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSecure">
<db:title>bool QNetworkCookie::isSecure() const</db:title>
<db:para>Returns true if the &quot;secure&quot; option was specified in the cookie string, false otherwise.</db:para>
<db:para>Secure cookies may contain private information and should not be resent over unencrypted connections.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#setSecure">setSecure</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSessionCookie">
<db:title>bool QNetworkCookie::isSessionCookie() const</db:title>
<db:para>Returns true if this cookie is a session cookie. A session cookie is a cookie which has no expiration date, which means it should be discarded when the application's concept of session is over (usually, when the application exits).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#expirationDate">expirationDate</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkcookie.xml#setExpirationDate">setExpirationDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>QByteArray QNetworkCookie::name() const</db:title>
<db:para>Returns the name of this cookie. The only mandatory field of a cookie is its name, without which it is not considered valid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#setName">setName</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkcookie.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normalize">
<db:title>[since 5.0] void QNetworkCookie::normalize(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:para>This functions normalizes the path and domain of the cookie if they were previously empty. The <db:code role="parameter">url</db:code> parameter is used to determine the correct domain and path.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="parseCookies">
<db:title>[static] QList&lt;QNetworkCookie&gt; QNetworkCookie::parseCookies(const QByteArray &amp;<db:emphasis>cookieString</db:emphasis>)</db:title>
<db:para>Parses the cookie string <db:code role="parameter">cookieString</db:code> as received from a server response in the &quot;Set-Cookie:&quot; header. If there's a parsing error, this function returns an empty list.</db:para>
<db:para>Since the HTTP header can set more than one cookie at the same time, this function returns a <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qnetworkcookie.xml">QNetworkCookie</db:link>&gt;, one for each cookie that is parsed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#toRawForm">toRawForm</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="path">
<db:title>QString QNetworkCookie::path() const</db:title>
<db:para>Returns the path associated with this cookie. This corresponds to the &quot;path&quot; field of the cookie string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#setPath">setPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDomain">
<db:title>void QNetworkCookie::setDomain(const QString &amp;<db:emphasis>domain</db:emphasis>)</db:title>
<db:para>Sets the domain associated with this cookie to be <db:code role="parameter">domain</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#domain">domain</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setExpirationDate">
<db:title>void QNetworkCookie::setExpirationDate(const QDateTime &amp;<db:emphasis>date</db:emphasis>)</db:title>
<db:para>Sets the expiration date of this cookie to <db:code role="parameter">date</db:code>. Setting an invalid expiration date to this cookie will mean it's a session cookie.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#isSessionCookie">isSessionCookie</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkcookie.xml#expirationDate">expirationDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHttpOnly">
<db:title>[since 4.5] void QNetworkCookie::setHttpOnly(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:para>Sets this cookie's &quot;HttpOnly&quot; flag to <db:code role="parameter">enable</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#isHttpOnly">isHttpOnly</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setName">
<db:title>void QNetworkCookie::setName(const QByteArray &amp;<db:emphasis>cookieName</db:emphasis>)</db:title>
<db:para>Sets the name of this cookie to be <db:code role="parameter">cookieName</db:code>. Note that setting a cookie name to an empty <db:link xlink:href="qbytearray.xml">QByteArray</db:link> will make this cookie invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#name">name</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkcookie.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPath">
<db:title>void QNetworkCookie::setPath(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Sets the path associated with this cookie to be <db:code role="parameter">path</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#path">path</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSecure">
<db:title>void QNetworkCookie::setSecure(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:para>Sets the secure flag of this cookie to <db:code role="parameter">enable</db:code>.</db:para>
<db:para>Secure cookies may contain private information and should not be resent over unencrypted connections.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#isSecure">isSecure</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setValue">
<db:title>void QNetworkCookie::setValue(const QByteArray &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the value of this cookie to be <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#value">value</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkcookie.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept, since 5.0] void QNetworkCookie::swap(QNetworkCookie &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this cookie with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="toRawForm">
<db:title>QByteArray QNetworkCookie::toRawForm(QNetworkCookie::RawForm <db:emphasis>form</db:emphasis> = Full) const</db:title>
<db:para>Returns the raw form of this <db:link xlink:href="qnetworkcookie.xml">QNetworkCookie</db:link>. The <db:link xlink:href="qbytearray.xml">QByteArray</db:link> returned by this function is suitable for an HTTP header, either in a server response (the Set-Cookie header) or the client request (the Cookie header). You can choose from one of two formats, using <db:code role="parameter">form</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#parseCookies">parseCookies</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>QByteArray QNetworkCookie::value() const</db:title>
<db:para>Returns this cookies value, as specified in the cookie string. Note that a cookie is still valid if its value is empty.</db:para>
<db:para>Cookie name-value pairs are considered opaque to the application: that is, their values don't mean anything.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#setValue">setValue</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkcookie.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QNetworkCookie::operator!=(const QNetworkCookie &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this cookie is not equal to <db:code role="parameter">other</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QNetworkCookie &amp;QNetworkCookie::operator=(const QNetworkCookie &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copies the contents of the <db:link xlink:href="qnetworkcookie.xml">QNetworkCookie</db:link> object <db:code role="parameter">other</db:code> to this object.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[since 5.0] bool QNetworkCookie::operator==(const QNetworkCookie &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this cookie is equal to <db:code role="parameter">other</db:code>. This function only returns true if all fields of the cookie are the same.</db:para>
<db:para>However, in some contexts, two cookies of the same name could be considered equal.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkcookie.xml#operator-not-eq">operator!=</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkcookie.xml#hasSameIdentifier">hasSameIdentifier</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
