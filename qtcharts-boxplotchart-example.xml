<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Box and Whiskers Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to create a box-and-whiskers chart.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The example also shows how to read the non-continuous data from a file, arrange it and find medians needed for box-and-whiskers plotting.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_boxplotchart.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>To show the share deviation of two companies we start by creating two QBoxPlotSeries to handle monthly data.</db:para>
<db:programlisting language="cpp">QBoxPlotSeries *acmeSeries = new QBoxPlotSeries();
acmeSeries-&gt;setName(&quot;Acme Ltd&quot;);

QBoxPlotSeries *boxWhiskSeries = new QBoxPlotSeries();
boxWhiskSeries-&gt;setName(&quot;BoxWhisk Inc&quot;);
</db:programlisting>
<db:para><db:link xlink:href="qfile.xml">QFile</db:link> class is used to open a text file where the non-continuous data is kept. The BoxDataReader is an auxiliary class for reading the text file and finding the extreme and median values from the data. The BoxDataReader is explained in more detail later. The method readBox reads the values and sets them to the QBoxSet item which the method returns for the caller. The returned QBoxSet item is added to the series.</db:para>
<db:programlisting language="cpp">QFile acmeData(&quot;:acme&quot;);
if (!acmeData.open(QIODevice::ReadOnly | QIODevice::Text))
    return 1;

BoxDataReader dataReader(&amp;acmeData);
while (!dataReader.atEnd()) {
    QBoxSet *set = dataReader.readBox();
    if (set)
        acmeSeries-&gt;append(set);
}
</db:programlisting>
<db:para>In this section a second file is opened for reading the data for the second company.</db:para>
<db:programlisting language="cpp">QFile boxwhiskData(&quot;:boxwhisk&quot;);
if (!boxwhiskData.open(QIODevice::ReadOnly | QIODevice::Text))
    return 1;

dataReader.readFile(&amp;boxwhiskData);
while (!dataReader.atEnd()) {
    QBoxSet *set = dataReader.readBox();
    if (set)
        boxWhiskSeries-&gt;append(set);
}
</db:programlisting>
<db:para>In this code snippet a new QChart instance is created and previously created series are added to it. The title is also defined and animation is set to be SeriesAnimation.</db:para>
<db:programlisting language="cpp">QChart *chart = new QChart();
chart-&gt;addSeries(acmeSeries);
chart-&gt;addSeries(boxWhiskSeries);
chart-&gt;setTitle(&quot;Acme Ltd and BoxWhisk Inc share deviation in 2012&quot;);
chart-&gt;setAnimationOptions(QChart::SeriesAnimations);
</db:programlisting>
<db:para>Here we ask the chart to create default axes for our presentation. We also set the range for the vertical axis by querying the pointer for the axis from the chart, and then setting the min and max for that axis.</db:para>
<db:programlisting language="cpp">chart-&gt;createDefaultAxes();
chart-&gt;axisY()-&gt;setMin(15.0);
chart-&gt;axisY()-&gt;setMax(34.0);
</db:programlisting>
<db:para>In this section we set the legends to be visible and place them at the bottom of the chart.</db:para>
<db:programlisting language="cpp">chart-&gt;legend()-&gt;setVisible(true);
chart-&gt;legend()-&gt;setAlignment(Qt::AlignBottom);
</db:programlisting>
<db:para>Finally, we add the chart onto a view. We also turn on the antialiasing for the chartView.</db:para>
<db:programlisting language="cpp">QChartView *chartView = new QChartView(chart);
chartView-&gt;setRenderHint(QPainter::Antialiasing);
</db:programlisting>
<db:para>The chart is ready to be shown. We set the chart to be the central widget of the window. We also set the size for the chart window and show it.</db:para>
<db:programlisting language="cpp">QMainWindow window;
window.setCentralWidget(chartView);
window.resize(800, 600);
window.show();
</db:programlisting>
<db:para>Here the method readBox is explained in detail. Firstly, a line is read from the file and lines starting with # are rejected since they are considered as comment lines.</db:para>
<db:programlisting language="cpp">QString line = readLine();
if (line.startsWith(&quot;#&quot;))
    return 0;
</db:programlisting>
<db:para>In this file the data is arranged as number, space, number, or space. On this snippet the line is split into single number strings which are stored on <db:link xlink:href="qstringlist.xml">QStringList</db:link>.</db:para>
<db:programlisting language="cpp">QStringList strList = line.split(&quot; &quot;, QString::SkipEmptyParts);
</db:programlisting>
<db:para>The sortedList will hold the numbers in continuous order and in this code segment we show how to do it. First the sortedList is cleared and numbers are read from the strList and stored into sortedList in double format. The qSort method arranges the sortedList into continuous order starting from the smallest.</db:para>
<db:programlisting language="cpp">sortedList.clear();
for (int i = 1; i &lt; strList.count(); i++)
    sortedList.append(strList.at(i).toDouble());

qSort(sortedList.begin(), sortedList.end());
</db:programlisting>
<db:para>Below you will find a code sample showing how to select extremes and medians from the continuous data. Firstly a new QBoxSet is created. Lower and upper extremes are simple to select; they are just first and last items on the sortedList. For medians we use a helper method findMedian which is explained later. For the median from the upper half we need to adjust the begin number if the amount of the numbers is even or uneven. The end number for lower half comes naturally from int rounding.</db:para>
<db:programlisting language="cpp">QBoxSet *box = new QBoxSet(strList.first());
box-&gt;setValue(QBoxSet::LowerExtreme, sortedList.first());
box-&gt;setValue(QBoxSet::UpperExtreme, sortedList.last());
box-&gt;setValue(QBoxSet::Median, findMedian(0, count));
box-&gt;setValue(QBoxSet::LowerQuartile, findMedian(0, count / 2));
box-&gt;setValue(QBoxSet::UpperQuartile, findMedian(count / 2 + (count % 2), count));
</db:programlisting>
<db:para>Below you will find the code sample for the method findMedian. If the amount of numbers is uneven we select the number from the middle. For even amount numbers we take two numbers from the middle and calculate the mean value.</db:para>
<db:programlisting language="cpp">int count = end - begin;
if (count % 2) {
    return sortedList.at(count / 2 + begin);
} else {
    qreal right = sortedList.at(count / 2 + begin);
    qreal left = sortedList.at(count / 2 - 1 + begin);
    return (right + left) / 2.0;
}
</db:programlisting>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="boxplotchart/boxdatareader.cpp">boxplotchart/boxdatareader.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="boxplotchart/boxdatareader.h">boxplotchart/boxdatareader.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="boxplotchart/boxplotchart.pro">boxplotchart/boxplotchart.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="boxplotchart/boxplotdata.qrc">boxplotchart/boxplotdata.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="boxplotchart/main.cpp">boxplotchart/main.cpp</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
