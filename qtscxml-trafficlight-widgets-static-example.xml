<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt SCXML Traffic Light Example (Static)</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Scxml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A widget-based application that uses a compiled state machine to implement a traffic light.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/trafficlight.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Traffic Light Example (Static)</db:emphasis> demonstrates how to connect to the active properties of a state in a state machine that is compiled to a class.</db:para>
<db:para>The UI is created using Qt Widgets.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="compiling-the-state-machine">
<db:title>Compiling the State Machine</db:title>
<db:para>We link against the Qt SCXML module by adding the following line to the <db:emphasis>.pro</db:emphasis> file:</db:para>
<db:programlisting language="cpp">QT += qml scxml
</db:programlisting>
<db:para>We then specify the state machine to compile:</db:para>
<db:programlisting language="cpp">STATECHARTS = ../trafficlight-common/statemachine.scxml
</db:programlisting>
<db:para>The Qt SCXML Compiler, <db:code>qscxmlc</db:code>, is run automatically to generate <db:emphasis>statemachine.h</db:emphasis> and <db:emphasis>statemachine.cpp</db:emphasis>, and to add them to the <db:code>HEADERS</db:code> and <db:code>SOURCES</db:code> variables for compilation.</db:para>
</db:section>
<db:section xml:id="instantiating-the-state-machine">
<db:title>Instantiating the State Machine</db:title>
<db:para>We instantiate the generated <db:code>TrafficLightStateMachine</db:code> class in the <db:emphasis>trafficlight-widgets-static.cpp</db:emphasis> file, as follows:</db:para>
<db:programlisting language="cpp">#include &quot;statemachine.h&quot;
#include &quot;../trafficlight-common/trafficlight.h&quot;

#include &amp;lt;QApplication&amp;gt;

int main(int argc, char **argv)
{
    QApplication app(argc, argv);

    TrafficLightStateMachine machine;
    TrafficLight widget(&amp;amp;machine);
    widget.show();
    machine.start();

    return app.exec();
}
</db:programlisting>
</db:section>
<db:section xml:id="connecting-to-states">
<db:title>Connecting to States</db:title>
<db:para>In the SCXML file, we specify states for each light: red, yellow, and green. In the <db:code>&lt;onentry&gt;</db:code> element, we specify the event to send when entering the state and the delay in seconds before sending the event. In the <db:code>&lt;transition&gt;</db:code> element, we specify the event that triggers the transition to the state specified by the <db:code>target</db:code> attribute:</db:para>
<db:programlisting language="cpp">        &amp;lt;state id=&quot;red&quot;&amp;gt;
            &amp;lt;onentry&amp;gt;
                &amp;lt;send event=&quot;startGoingGreen&quot; delay=&quot;3s&quot;/&amp;gt;
            &amp;lt;/onentry&amp;gt;
            &amp;lt;transition event=&quot;startGoingGreen&quot; target=&quot;redGoingGreen&quot;/&amp;gt;
        &amp;lt;/state&amp;gt;

        &amp;lt;state id=&quot;yellow&quot; initial=&quot;greenGoingRed&quot;&amp;gt;
            &amp;lt;state id=&quot;redGoingGreen&quot;&amp;gt;
                &amp;lt;onentry&amp;gt;
                    &amp;lt;send event=&quot;goGreen&quot; delay=&quot;1s&quot;/&amp;gt;
                &amp;lt;/onentry&amp;gt;
                &amp;lt;transition event=&quot;goGreen&quot; target=&quot;green&quot;/&amp;gt;
            &amp;lt;/state&amp;gt;

            &amp;lt;state id=&quot;greenGoingRed&quot;&amp;gt;
                &amp;lt;onentry&amp;gt;
                    &amp;lt;send event=&quot;goRed&quot; delay=&quot;1s&quot;/&amp;gt;
                &amp;lt;/onentry&amp;gt;
                &amp;lt;transition event=&quot;goRed&quot; target=&quot;red&quot;/&amp;gt;
            &amp;lt;/state&amp;gt;
        &amp;lt;/state&amp;gt;

        &amp;lt;state id=&quot;green&quot;&amp;gt;
            &amp;lt;onentry&amp;gt;
                &amp;lt;send event=&quot;startGoingRed&quot; delay=&quot;3s&quot;/&amp;gt;
            &amp;lt;/onentry&amp;gt;
            &amp;lt;transition event=&quot;startGoingRed&quot; target=&quot;greenGoingRed&quot;/&amp;gt;
        &amp;lt;/state&amp;gt;
</db:programlisting>
<db:para>We connect to the states as follows:</db:para>
<db:programlisting language="cpp">    machine-&amp;gt;connectToState(QStringLiteral(&quot;red&quot;),
                            widget-&amp;gt;redLight(), &amp;amp;LightWidget::switchLight);
    machine-&amp;gt;connectToState(QStringLiteral(&quot;redGoingGreen&quot;),
                            widget-&amp;gt;redLight(), &amp;amp;LightWidget::switchLight);
    machine-&amp;gt;connectToState(QStringLiteral(&quot;yellow&quot;),
                            widget-&amp;gt;yellowLight(), &amp;amp;LightWidget::switchLight);
    machine-&amp;gt;connectToState(QStringLiteral(&quot;blinking&quot;),
                            widget-&amp;gt;yellowLight(), &amp;amp;LightWidget::switchLight);
    machine-&amp;gt;connectToState(QStringLiteral(&quot;green&quot;),
                            widget-&amp;gt;greenLight(), &amp;amp;LightWidget::switchLight);
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="trafficlight-widgets-static/trafficlight-widgets-static.cpp">trafficlight-widgets-static/trafficlight-widgets-static.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="trafficlight-widgets-static/trafficlight-widgets-static.pro">trafficlight-widgets-static/trafficlight-widgets-static.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="trafficlight-widgets-static/trafficlight-widgets-static.qrc">trafficlight-widgets-static/trafficlight-widgets-static.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
