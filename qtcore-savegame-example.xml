<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>JSON Save Game Example</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The JSON Save Game example demonstrates how to save and load a small game using <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link>, <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link> and <db:link xlink:href="qjsonarray.xml">QJsonArray</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Many games provide save functionality, so that the player's progress through the game can be saved and loaded at a later time. The process of saving a game generally involves serializing each game object's member variables to a file. Many formats can be used for this purpose, one of which is JSON. With <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link>, you also have the ability to serialize a document in a binary format, which is great if you don't want the save file to be readable, or if you need to keep the file size down.</db:para>
<db:para>In this example, we'll demonstrate how to save and load a simple game to and from JSON and binary formats.</db:para>
<db:section xml:id="the-character-class">
<db:title>The Character class</db:title>
<db:para>The Character class represents a non-player character (NPC) in our game, and stores the player's name, level, and class type.</db:para>
<db:para>It provides read() and write() functions to serialise its member variables.</db:para>
<db:programlisting language="cpp">class Character
{
public:
    enum ClassType {
        Warrior, Mage, Archer
    };

    Character();
    Character(const QString &amp;name, int level, ClassType classType);

    QString name() const;
    void setName(const QString &amp;name);

    int level() const;
    void setLevel(int level);

    ClassType classType() const;
    void setClassType(ClassType classType);

    void read(const QJsonObject &amp;json);
    void write(QJsonObject &amp;json) const;
private:
    QString mName;
    int mLevel;
    ClassType mClassType;
};
</db:programlisting>
<db:para>Of particular interest to us are the read and write function implementations:</db:para>
<db:programlisting language="cpp">void Character::read(const QJsonObject &amp;json)
{
    mName = json[&quot;name&quot;].toString();
    mLevel = json[&quot;level&quot;].toDouble();
    mClassType = ClassType(qRound(json[&quot;classType&quot;].toDouble()));
}
</db:programlisting>
<db:para>In the read() function, we assign Character's members values from the <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link> argument. You can use either <db:link xlink:href="qjsonobject.xml#operator-5b-5d">QJsonObject::operator[]</db:link>() or <db:link xlink:href="qjsonobject.xml#value">QJsonObject::value</db:link>() to access values within the JSON object; both are const functions and return <db:link xlink:href="qjsonvalue.xml#Type-enum">QJsonValue::Undefined</db:link> if the key is invalid. We could check if the keys are valid before attempting to read them with <db:link xlink:href="qjsonobject.xml#contains">QJsonObject::contains</db:link>(), but we assume that they are.</db:para>
<db:programlisting language="cpp">void Character::write(QJsonObject &amp;json) const
{
    json[&quot;name&quot;] = mName;
    json[&quot;level&quot;] = mLevel;
    json[&quot;classType&quot;] = mClassType;
}
</db:programlisting>
<db:para>In the write() function, we do the reverse of the read() function; assign values from the Character object to the JSON object. As with accessing values, there are two ways to set values on a <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link>: <db:link xlink:href="qjsonobject.xml#operator-5b-5d">QJsonObject::operator[]</db:link>() and <db:link xlink:href="qjsonobject.xml#insert">QJsonObject::insert</db:link>(). Both will override any existing value at the given key.</db:para>
<db:para>Next up is the Level class:</db:para>
<db:programlisting language="cpp">class Level
{
public:
    Level();

    const QList&lt;Character&gt; &amp;npcs() const;
    void setNpcs(const QList&lt;Character&gt; &amp;npcs);

    void read(const QJsonObject &amp;json);
    void write(QJsonObject &amp;json) const;
private:
    QList&lt;Character&gt; mNpcs;
};
</db:programlisting>
<db:para>We want to have several levels in our game, each with several NPCs, so we keep a <db:link xlink:href="qlist.xml">QList</db:link> of Character objects. We also provide the familiar read() and write() functions.</db:para>
<db:programlisting language="cpp">void Level::read(const QJsonObject &amp;json)
{
    mNpcs.clear();
    QJsonArray npcArray = json[&quot;npcs&quot;].toArray();
    for (int npcIndex = 0; npcIndex &lt; npcArray.size(); ++npcIndex) {
        QJsonObject npcObject = npcArray[npcIndex].toObject();
        Character npc;
        npc.read(npcObject);
        mNpcs.append(npc);
    }
}
</db:programlisting>
<db:para>Containers can be written and read to and from JSON using <db:link xlink:href="qjsonarray.xml">QJsonArray</db:link>. In our case, we construct a <db:link xlink:href="qjsonarray.xml">QJsonArray</db:link> from the value associated with the key &quot;npcs&quot;. Then, for each <db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link> element in the array, we call toObject() to get the Character's JSON object. The Character object can then read their JSON and be appended to our NPC list.</db:para>
<db:note>
<db:para><db:link xlink:href="containers.xml">Associate containers</db:link> can be written by storing the key in each value object (if it's not already). With this approach, the container is stored as a regular array of objects, but the index of each element is used as the key to construct the container when reading it back in.</db:para>
</db:note>
<db:programlisting language="cpp">void Level::write(QJsonObject &amp;json) const
{
    QJsonArray npcArray;
    foreach (const Character npc, mNpcs) {
        QJsonObject npcObject;
        npc.write(npcObject);
        npcArray.append(npcObject);
    }
    json[&quot;npcs&quot;] = npcArray;
}
</db:programlisting>
<db:para>Again, the write() function is similar to the read() function, except reversed.</db:para>
<db:para>Having established the Character and Level classes, we can move on to the Game class:</db:para>
<db:programlisting language="cpp">class Game
{
public:
    Game();

    enum SaveFormat {
        Json, Binary
    };

    const Character &amp;player() const;
    const QList&lt;Level&gt; &amp;levels() const;

    void newGame();
    bool loadGame(SaveFormat saveFormat);
    bool saveGame(SaveFormat saveFormat) const;

    void read(const QJsonObject &amp;json);
    void write(QJsonObject &amp;json) const;
private:
    Character mPlayer;
    QList&lt;Level&gt; mLevels;
};
</db:programlisting>
<db:para>First of all, we define the SaveFormat enum. This will allow us to specify the format in which the game should be saved: Json or Binary.</db:para>
<db:para>Next, we provide accessors for the player and levels. We then expose three functions: newGame(), saveGame() and loadGame().</db:para>
<db:para>The read() and write() functions are used by saveGame() and loadGame().</db:para>
<db:programlisting language="cpp">void Game::newGame() {
    mPlayer = Character();
    mPlayer.setName(QStringLiteral(&quot;Hero&quot;));
    mPlayer.setClassType(Character::Archer);
    mPlayer.setLevel(15);

    mLevels.clear();

    Level village;
    QList&lt;Character&gt; villageNpcs;
    villageNpcs.append(Character(QStringLiteral(&quot;Barry the Blacksmith&quot;), 10, Character::Warrior));
    villageNpcs.append(Character(QStringLiteral(&quot;Terry the Trader&quot;), 10, Character::Warrior));
    village.setNpcs(villageNpcs);
    mLevels.append(village);

    Level dungeon;
    QList&lt;Character&gt; dungeonNpcs;
    dungeonNpcs.append(Character(QStringLiteral(&quot;Eric the Evil&quot;), 20, Character::Mage));
    dungeonNpcs.append(Character(QStringLiteral(&quot;Eric's Sidekick #1&quot;), 5, Character::Warrior));
    dungeonNpcs.append(Character(QStringLiteral(&quot;Eric's Sidekick #2&quot;), 5, Character::Warrior));
    dungeon.setNpcs(dungeonNpcs);
    mLevels.append(dungeon);
}
</db:programlisting>
<db:para>To setup a new game, we create the player and populate the levels and their NPCs.</db:para>
<db:programlisting language="cpp">void Game::read(const QJsonObject &amp;json)
{
    mPlayer.read(json[&quot;player&quot;].toObject());

    mLevels.clear();
    QJsonArray levelArray = json[&quot;levels&quot;].toArray();
    for (int levelIndex = 0; levelIndex &lt; levelArray.size(); ++levelIndex) {
        QJsonObject levelObject = levelArray[levelIndex].toObject();
        Level level;
        level.read(levelObject);
        mLevels.append(level);
    }
}
</db:programlisting>
<db:para>The first thing we do in the read() function is tell the player to read itself. We then clear the levels list so that calling loadGame() on the same Game object twice doesn't result in old levels hanging around.</db:para>
<db:para>We then populate the level list by reading each Level from a <db:link xlink:href="qjsonarray.xml">QJsonArray</db:link>.</db:para>
<db:programlisting language="cpp">void Game::write(QJsonObject &amp;json) const
{
    QJsonObject playerObject;
    mPlayer.write(playerObject);
    json[&quot;player&quot;] = playerObject;

    QJsonArray levelArray;
    foreach (const Level level, mLevels) {
        QJsonObject levelObject;
        level.write(levelObject);
        levelArray.append(levelObject);
    }
    json[&quot;levels&quot;] = levelArray;
}
</db:programlisting>
<db:para>We write the game to JSON similarly to how we write Level.</db:para>
<db:programlisting language="cpp">bool Game::loadGame(Game::SaveFormat saveFormat)
{
    QFile loadFile(saveFormat == Json
        ? QStringLiteral(&quot;save.json&quot;)
        : QStringLiteral(&quot;save.dat&quot;));

    if (!loadFile.open(QIODevice::ReadOnly)) {
        qWarning(&quot;Couldn't open save file.&quot;);
        return false;
    }

    QByteArray saveData = loadFile.readAll();

    QJsonDocument loadDoc(saveFormat == Json
        ? QJsonDocument::fromJson(saveData)
        : QJsonDocument::fromBinaryData(saveData));

    read(loadDoc.object());

    return true;
}
</db:programlisting>
<db:para>When loading a saved game in loadGame(), the first thing we do is open the save file based on which format it was saved to; &quot;save.json&quot; for JSON, and &quot;save.dat&quot; for binary. We print a warning and return false if the file couldn't be opened.</db:para>
<db:para>Since <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link>'s <db:link xlink:href="qjsondocument.xml#fromJson">fromJson</db:link>() and <db:link xlink:href="qjsondocument.xml#fromBinaryData">fromBinaryData</db:link>() functions both take a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, we can read the entire contents of the save file into one, regardless of the save format.</db:para>
<db:para>After constructing the <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link>, we instruct the Game object to read itself and then return true to indicate success.</db:para>
<db:programlisting language="cpp">bool Game::saveGame(Game::SaveFormat saveFormat) const
{
    QFile saveFile(saveFormat == Json
        ? QStringLiteral(&quot;save.json&quot;)
        : QStringLiteral(&quot;save.dat&quot;));

    if (!saveFile.open(QIODevice::WriteOnly)) {
        qWarning(&quot;Couldn't open save file.&quot;);
        return false;
    }

    QJsonObject gameObject;
    write(gameObject);
    QJsonDocument saveDoc(gameObject);
    saveFile.write(saveFormat == Json
        ? saveDoc.toJson()
        : saveDoc.toBinaryData());

    return true;
}
</db:programlisting>
<db:para>Not surprisingly, saveGame() looks very much like loadGame(). We determine the file extension based on the format, print a warning and return false if the opening of the file fails. We then write the Game object to a <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link>, and call either <db:link xlink:href="qjsondocument.xml#toJson">QJsonDocument::toJson</db:link>() or to <db:link xlink:href="qjsondocument.xml#toBinaryData">QJsonDocument::toBinaryData</db:link>() to save the game, depending on which format was specified.</db:para>
<db:para>We are now ready to enter main():</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QCoreApplication app(argc, argv);

    Game game;
    game.newGame();
    // Game is played; changes are made...
</db:programlisting>
<db:para>Since we're only interested in demonstrating <db:emphasis>serialization</db:emphasis> of a game with JSON, our game is not actually playable. Therefore, we only need <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> and have no event loop. We create our game and assume that the player had a great time and made lots of progress, altering the internal state of our Character, Level and Game objects.</db:para>
<db:programlisting language="cpp">    if (!game.saveGame(Game::Json))
        return 1;

    if (!game.saveGame(Game::Binary))
        return 1;

    Game fromJsonGame;
    if (!fromJsonGame.loadGame(Game::Json))
        return 1;

    Game fromBinaryGame;
    if (!fromBinaryGame.loadGame(Game::Binary))
        return 1;

    return 0;
}
</db:programlisting>
<db:para>When the player has finished, we save their game. For demonstration purposes, we serialize to both JSON and binary. You can examine the contents of the files in the same directory as the executable, although the binary save file will contain some garbage characters (which is normal).</db:para>
<db:para>To show that the saved files can be loaded again, we call loadGame() for each format, returning 1 on failure. Assuming everything went well, we return 0 to indicate success.</db:para>
<db:para>That concludes our example. As you can see, serialization with Qt's JSON classes is very simple and convenient. The advantages of using <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> and friends over <db:link xlink:href="qdatastream.xml">QDataStream</db:link>, for example, is that you not only get human-readable JSON files, but you also have the option to use a binary format if it's required, <db:emphasis>without</db:emphasis> rewriting any code.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="savegame/character.cpp">savegame/character.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="savegame/character.h">savegame/character.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="savegame/game.cpp">savegame/game.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="savegame/game.h">savegame/game.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="savegame/level.cpp">savegame/level.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="savegame/level.h">savegame/level.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="savegame/main.cpp">savegame/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="savegame/savegame.pro">savegame/savegame.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="json.xml">JSON Support in Qt</db:link></db:member>
<db:member><db:link xlink:href="">Data Storage</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section></db:article>
