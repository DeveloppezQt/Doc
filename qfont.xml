<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFont Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qfont.xml">QFont</db:link> class specifies a font used for drawing text.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFont</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFont is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member><db:member>appearance</db:member><db:member>shared</db:member><db:member><db:link xlink:href="richtext-processing.xml">Rich Text Processing APIs</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>When you create a <db:link xlink:href="qfont.xml">QFont</db:link> object you specify various attributes that you want the font to have. Qt will use the font with the specified attributes, or if no matching font exists, Qt will use the closest matching installed font. The attributes of the font that is actually used are retrievable from a <db:link xlink:href="qfontinfo.xml">QFontInfo</db:link> object. If the window system provides an exact match <db:link xlink:href="qfont.xml#exactMatch">exactMatch</db:link>() returns <db:code>true</db:code>. Use <db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link> to get measurements, e.g. the pixel length of a string using <db:link xlink:href="qfontmetrics.xml#width">QFontMetrics::width</db:link>().</db:para>
<db:para>Note that a <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> instance must exist before a <db:link xlink:href="qfont.xml">QFont</db:link> can be used. You can set the application's default font with <db:link xlink:href="qguiapplication.xml#setFont">QGuiApplication::setFont</db:link>().</db:para>
<db:para>If a chosen font does not include all the characters that need to be displayed, <db:link xlink:href="qfont.xml">QFont</db:link> will try to find the characters in the nearest equivalent fonts. When a <db:link xlink:href="qpainter.xml">QPainter</db:link> draws a character from a font the <db:link xlink:href="qfont.xml">QFont</db:link> will report whether or not it has the character; if it does not, <db:link xlink:href="qpainter.xml">QPainter</db:link> will draw an unfilled square.</db:para>
<db:para>Create QFonts like this:</db:para>
<db:programlisting language="cpp">QFont serifFont(&quot;Times&quot;, 10, QFont::Bold);
QFont sansFont(&quot;Helvetica [Cronyx]&quot;, 12);
</db:programlisting>
<db:para>The attributes set in the constructor can also be set later, e.g. <db:link xlink:href="qfont.xml#setFamily">setFamily</db:link>(), <db:link xlink:href="qfont.xml#setPointSize">setPointSize</db:link>(), <db:link xlink:href="qfont.xml#setPointSizeF">setPointSizeF</db:link>(), <db:link xlink:href="qfont.xml#setWeight">setWeight</db:link>() and <db:link xlink:href="qfont.xml#setItalic">setItalic</db:link>(). The remaining attributes must be set after contstruction, e.g. <db:link xlink:href="qfont.xml#setBold">setBold</db:link>(), <db:link xlink:href="qfont.xml#setUnderline">setUnderline</db:link>(), <db:link xlink:href="qfont.xml#setOverline">setOverline</db:link>(), <db:link xlink:href="qfont.xml#setStrikeOut">setStrikeOut</db:link>() and <db:link xlink:href="qfont.xml#setFixedPitch">setFixedPitch</db:link>(). <db:link xlink:href="qfontinfo.xml">QFontInfo</db:link> objects should be created <db:emphasis>after</db:emphasis> the font's attributes have been set. A <db:link xlink:href="qfontinfo.xml">QFontInfo</db:link> object will not change, even if you change the font's attributes. The corresponding &quot;get&quot; functions, e.g. <db:link xlink:href="qfont.xml#family">family</db:link>(), <db:link xlink:href="qfont.xml#pointSize">pointSize</db:link>(), etc., return the values that were set, even though the values used may differ. The actual values are available from a <db:link xlink:href="qfontinfo.xml">QFontInfo</db:link> object.</db:para>
<db:para>If the requested font family is unavailable you can influence the <db:link xlink:href="qfont.xml#fontmatching">font matching algorithm</db:link> by choosing a particular <db:link xlink:href="qfont.xml#StyleHint-enum">QFont::StyleHint</db:link> and <db:link xlink:href="qfont.xml#StyleStrategy-enum">QFont::StyleStrategy</db:link> with <db:link xlink:href="qfont.xml#setStyleHint">setStyleHint</db:link>(). The default family (corresponding to the current style hint) is returned by <db:link xlink:href="qfont.xml#defaultFamily">defaultFamily</db:link>().</db:para>
<db:para>The font-matching algorithm has a <db:link xlink:href="qfont.xml#lastResortFamily">lastResortFamily</db:link>() and <db:link xlink:href="qfont.xml#lastResortFont">lastResortFont</db:link>() in cases where a suitable match cannot be found. You can provide substitutions for font family names using <db:link xlink:href="qfont.xml#insertSubstitution">insertSubstitution</db:link>() and <db:link xlink:href="qfont.xml#insertSubstitutions">insertSubstitutions</db:link>(). Substitutions can be removed with <db:link xlink:href="qfont.xml#removeSubstitutions">removeSubstitutions</db:link>(). Use <db:link xlink:href="qfont.xml#substitute">substitute</db:link>() to retrieve a family's first substitute, or the family name itself if it has no substitutes. Use <db:link xlink:href="qfont.xml#substitutes">substitutes</db:link>() to retrieve a list of a family's substitutes (which may be empty).</db:para>
<db:para>Every <db:link xlink:href="qfont.xml">QFont</db:link> has a <db:link xlink:href="qfont.xml#key">key</db:link>() which you can use, for example, as the key in a cache or dictionary. If you want to store a user's font preferences you could use <db:link xlink:href="qsettings.xml">QSettings</db:link>, writing the font information with <db:link xlink:href="qfont.xml#toString">toString</db:link>() and reading it back with <db:link xlink:href="qfont.xml#fromString">fromString</db:link>(). The operator&lt;&lt;() and operator&gt;&gt;() functions are also available, but they work on a data stream.</db:para>
<db:para>It is possible to set the height of characters shown on the screen to a specified number of pixels with <db:link xlink:href="qfont.xml#setPixelSize">setPixelSize</db:link>(); however using <db:link xlink:href="qfont.xml#setPointSize">setPointSize</db:link>() has a similar effect and provides device independence.</db:para>
<db:para>Loading fonts can be expensive, especially on X11. <db:link xlink:href="qfont.xml">QFont</db:link> contains extensive optimizations to make the copying of <db:link xlink:href="qfont.xml">QFont</db:link> objects fast, and to cache the results of the slow window system functions it depends upon.</db:para>
<db:anchor xml:id="fontmatching"/>
<db:para>The font matching algorithm works as follows:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>The specified font family is searched for.</db:para>
</db:listitem>
<db:listitem>
<db:para>If not found, the <db:link xlink:href="qfont.xml#styleHint">styleHint</db:link>() is used to select a replacement family.</db:para>
</db:listitem>
<db:listitem>
<db:para>Each replacement font family is searched for.</db:para>
</db:listitem>
<db:listitem>
<db:para>If none of these are found or there was no <db:link xlink:href="qfont.xml#styleHint">styleHint</db:link>(), &quot;helvetica&quot; will be searched for.</db:para>
</db:listitem>
<db:listitem>
<db:para>If &quot;helvetica&quot; isn't found Qt will try the <db:link xlink:href="qfont.xml#lastResortFamily">lastResortFamily</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>If the <db:link xlink:href="qfont.xml#lastResortFamily">lastResortFamily</db:link>() isn't found Qt will try the <db:link xlink:href="qfont.xml#lastResortFont">lastResortFont</db:link>() which will always return a name of some kind.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Note that the actual font matching algorithm varies from platform to platform.</db:para>
<db:para>In Windows a request for the &quot;Courier&quot; font is automatically changed to &quot;Courier New&quot;, an improved version of Courier that allows for smooth scaling. The older &quot;Courier&quot; bitmap font can be selected by setting the <db:link xlink:href="qfont.xml#StyleStrategy-enum">PreferBitmap</db:link> style strategy (see <db:link xlink:href="qfont.xml#setStyleStrategy">setStyleStrategy</db:link>()).</db:para>
<db:para>Once a font is found, the remaining attributes are matched in order of priority:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para><db:link xlink:href="qfont.xml#fixedPitch">fixedPitch</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qfont.xml#pointSize">pointSize</db:link>() (see below)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qfont.xml#weight">weight</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qfont.xml#style">style</db:link>()</db:para>
</db:listitem>
</db:orderedlist>
<db:para>If you have a font which matches on family, even if none of the other attributes match, this font will be chosen in preference to a font which doesn't match on family but which does match on the other attributes. This is because font family is the dominant search criteria.</db:para>
<db:para>The point size is defined to match if it is within 20% of the requested point size. When several fonts match and are only distinguished by point size, the font with the closest point size to the one requested will be chosen.</db:para>
<db:para>The actual family, font size, weight and other font attributes used for drawing text will depend on what's available for the chosen family under the window system. A <db:link xlink:href="qfontinfo.xml">QFontInfo</db:link> object can be used to determine the actual values used for drawing the text.</db:para>
<db:para>Examples:</db:para>
<db:programlisting language="cpp">QFont f(&quot;Helvetica&quot;);
</db:programlisting>
<db:para>If you had both an Adobe and a Cronyx Helvetica, you might get either.</db:para>
<db:programlisting language="cpp">QFont f(&quot;Helvetica [Cronyx]&quot;);
</db:programlisting>
<db:para>You can specify the foundry you want in the family name. The font f in the above example will be set to &quot;Helvetica [Cronyx]&quot;.</db:para>
<db:para>To determine the attributes of the font actually used in the window system, use a <db:link xlink:href="qfontinfo.xml">QFontInfo</db:link> object, e.g.</db:para>
<db:programlisting language="cpp">QFontInfo info(f1);
QString family = info.family();
</db:programlisting>
<db:para>To find out font metrics use a <db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link> object, e.g.</db:para>
<db:programlisting language="cpp">QFontMetrics fm(f1);
int textWidthInPixels = fm.width(&quot;How many pixels wide is this text?&quot;);
int textHeightInPixels = fm.height();
</db:programlisting>
<db:para>For more general information on fonts, see the <db:link xlink:href="http://nwalsh.com/comp.fonts/FAQ/">comp.fonts FAQ</db:link>. Information on encodings can be found from <db:link xlink:href="http://czyborra.com/">Roman Czyborra's</db:link> page.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link></db:member>
<db:member><db:link xlink:href="qfontinfo.xml">QFontInfo</db:link></db:member>
<db:member><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-charactermap-example.xml">Character Map Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Capitalization-enum">
<db:title>[since 4.4] enum QFont::Capitalization</db:title>
<db:para>Rendering option for text this font applies to.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::MixedCase</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>This is the normal text rendering option where no capitalization change is applied.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::AllUppercase</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This alters the text to be rendered in all uppercase type.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::AllLowercase</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>This alters the text to be rendered in all lowercase type.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::SmallCaps</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>This alters the text to be rendered in small-caps type.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::Capitalize</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>This alters the text to be rendered with the first character of each word as an uppercase character.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 4.4.</db:para>
</db:section>
<db:section xml:id="HintingPreference-enum">
<db:title>[since 4.8] enum QFont::HintingPreference</db:title>
<db:para>This enum describes the different levels of hinting that can be applied to glyphs to improve legibility on displays where it might be warranted by the density of pixels.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::PreferDefaultHinting</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Use the default hinting level for the target platform.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::PreferNoHinting</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>If possible, render text without hinting the outlines of the glyphs. The text layout will be typographically accurate and scalable, using the same metrics as are used e.g. when printing.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::PreferVerticalHinting</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>If possible, render text with no horizontal hinting, but align glyphs to the pixel grid in the vertical direction. The text will appear crisper on displays where the density is too low to give an accurate rendering of the glyphs. But since the horizontal metrics of the glyphs are unhinted, the text's layout will be scalable to higher density devices (such as printers) without impacting details such as line breaks.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::PreferFullHinting</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>If possible, render text with hinting in both horizontal and vertical directions. The text will be altered to optimize legibility on the target device, but since the metrics will depend on the target size of the text, the positions of glyphs, line breaks, and other typographical detail will not scale, meaning that a text layout may look different on devices with different pixel densities.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Please note that this enum only describes a preference, as the full range of hinting levels are not supported on all of Qt's supported platforms. The following table details the effect of a given hinting preference on a selected set of target platforms.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
</db:th>
<db:th>
<db:para>PreferDefaultHinting</db:para>
</db:th>
<db:th>
<db:para>PreferNoHinting</db:para>
</db:th>
<db:th>
<db:para>PreferVerticalHinting</db:para>
</db:th>
<db:th>
<db:para>PreferFullHinting</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Windows Vista (w/o Platform Update) and earlier</db:para>
</db:td>
<db:td>
<db:para>Full hinting</db:para>
</db:td>
<db:td>
<db:para>Full hinting</db:para>
</db:td>
<db:td>
<db:para>Full hinting</db:para>
</db:td>
<db:td>
<db:para>Full hinting</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Windows 7 and Windows Vista (w/Platform Update) and DirectWrite enabled in Qt</db:para>
</db:td>
<db:td>
<db:para>Full hinting</db:para>
</db:td>
<db:td>
<db:para>Vertical hinting</db:para>
</db:td>
<db:td>
<db:para>Vertical hinting</db:para>
</db:td>
<db:td>
<db:para>Full hinting</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>FreeType</db:para>
</db:td>
<db:td>
<db:para>Operating System setting</db:para>
</db:td>
<db:td>
<db:para>No hinting</db:para>
</db:td>
<db:td>
<db:para>Vertical hinting (light)</db:para>
</db:td>
<db:td>
<db:para>Full hinting</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Cocoa on macOS</db:para>
</db:td>
<db:td>
<db:para>No hinting</db:para>
</db:td>
<db:td>
<db:para>No hinting</db:para>
</db:td>
<db:td>
<db:para>No hinting</db:para>
</db:td>
<db:td>
<db:para>No hinting</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>Please be aware that altering the hinting preference on Windows is available through the DirectWrite font engine. This is available on Windows Vista after installing the platform update, and on Windows 7. In order to use this extension, configure Qt using -directwrite. The target application will then depend on the availability of DirectWrite on the target system.</db:para>
</db:note>
<db:para>This enum was introduced in Qt 4.8.</db:para>
</db:section>
<db:section xml:id="SpacingType-enum">
<db:title>[since 4.4] enum QFont::SpacingType</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::PercentageSpacing</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A value of 100 will keep the spacing unchanged; a value of 200 will enlarge the spacing after a character by the width of the character itself.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::AbsoluteSpacing</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A positive value increases the letter spacing by the corresponding pixels; a negative value decreases the spacing.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 4.4.</db:para>
</db:section>
<db:section xml:id="Stretch-enum">
<db:title>enum QFont::Stretch</db:title>
<db:para>Predefined stretch values that follow the CSS naming convention. The higher the value, the more stretched the text is.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::AnyStretch</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>0 Accept any stretch matched using the other <db:link xlink:href="qfont.xml">QFont</db:link> properties (added in Qt 5.8)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::UltraCondensed</db:code></db:para>
</db:td>
<db:td><db:code>50</db:code></db:td>
<db:td>
<db:para>50</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::ExtraCondensed</db:code></db:para>
</db:td>
<db:td><db:code>62</db:code></db:td>
<db:td>
<db:para>62</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::Condensed</db:code></db:para>
</db:td>
<db:td><db:code>75</db:code></db:td>
<db:td>
<db:para>75</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::SemiCondensed</db:code></db:para>
</db:td>
<db:td><db:code>87</db:code></db:td>
<db:td>
<db:para>87</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::Unstretched</db:code></db:para>
</db:td>
<db:td><db:code>100</db:code></db:td>
<db:td>
<db:para>100</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::SemiExpanded</db:code></db:para>
</db:td>
<db:td><db:code>112</db:code></db:td>
<db:td>
<db:para>112</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::Expanded</db:code></db:para>
</db:td>
<db:td><db:code>125</db:code></db:td>
<db:td>
<db:para>125</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::ExtraExpanded</db:code></db:para>
</db:td>
<db:td><db:code>150</db:code></db:td>
<db:td>
<db:para>150</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::UltraExpanded</db:code></db:para>
</db:td>
<db:td><db:code>200</db:code></db:td>
<db:td>
<db:para>200</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setStretch">setStretch</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#stretch">stretch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Style-enum">
<db:title>enum QFont::Style</db:title>
<db:para>This enum describes the different styles of glyphs that are used to display text.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::StyleNormal</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Normal glyphs used in unstyled text.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::StyleItalic</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Italic glyphs that are specifically designed for the purpose of representing italicized text.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::StyleOblique</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Glyphs with an italic appearance that are typically based on the unstyled glyphs, but are not fine-tuned for the purpose of representing italicized text.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#Weight-enum">Weight</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="StyleHint-enum">
<db:title>enum QFont::StyleHint</db:title>
<db:para>Style hints are used by the <db:link xlink:href="qfont.xml">font matching</db:link> algorithm to find an appropriate default family if a selected font family is not available.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::AnyStyle</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>leaves the font matching algorithm to choose the family. This is the default.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::SansSerif</db:code></db:para>
</db:td>
<db:td><db:code>Helvetica</db:code></db:td>
<db:td>
<db:para>the font matcher prefer sans serif fonts.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::Helvetica</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>is a synonym for <db:code>SansSerif</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::Serif</db:code></db:para>
</db:td>
<db:td><db:code>Times</db:code></db:td>
<db:td>
<db:para>the font matcher prefers serif fonts.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::Times</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>is a synonym for <db:code>Serif</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::TypeWriter</db:code></db:para>
</db:td>
<db:td><db:code>Courier</db:code></db:td>
<db:td>
<db:para>the font matcher prefers fixed pitch fonts.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::Courier</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>a synonym for <db:code>TypeWriter</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::OldEnglish</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>the font matcher prefers decorative fonts.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::Decorative</db:code></db:para>
</db:td>
<db:td><db:code>OldEnglish</db:code></db:td>
<db:td>
<db:para>is a synonym for <db:code>OldEnglish</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::Monospace</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>the font matcher prefers fonts that map to the CSS generic font-family 'monospace'.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::Fantasy</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>the font matcher prefers fonts that map to the CSS generic font-family 'fantasy'.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::Cursive</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>the font matcher prefers fonts that map to the CSS generic font-family 'cursive'.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::System</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>the font matcher prefers system fonts.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="StyleStrategy-enum">
<db:title>enum QFont::StyleStrategy</db:title>
<db:para>The style strategy tells the <db:link xlink:href="qfont.xml">font matching</db:link> algorithm what type of fonts should be used to find an appropriate default family.</db:para>
<db:para>The following strategies are available:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::PreferDefault</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>the default style strategy. It does not prefer any type of font.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::PreferBitmap</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>prefers bitmap fonts (as opposed to outline fonts).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::PreferDevice</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para>prefers device fonts.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::PreferOutline</db:code></db:para>
</db:td>
<db:td><db:code>0x0008</db:code></db:td>
<db:td>
<db:para>prefers outline fonts (as opposed to bitmap fonts).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::ForceOutline</db:code></db:para>
</db:td>
<db:td><db:code>0x0010</db:code></db:td>
<db:td>
<db:para>forces the use of outline fonts.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::NoAntialias</db:code></db:para>
</db:td>
<db:td><db:code>0x0100</db:code></db:td>
<db:td>
<db:para>don't antialias the fonts.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::NoSubpixelAntialias</db:code></db:para>
</db:td>
<db:td><db:code>0x0800</db:code></db:td>
<db:td>
<db:para>avoid subpixel antialiasing on the fonts if possible.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::PreferAntialias</db:code></db:para>
</db:td>
<db:td><db:code>0x0080</db:code></db:td>
<db:td>
<db:para>antialias if possible.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::OpenGLCompatible</db:code></db:para>
</db:td>
<db:td><db:code>0x0200</db:code></db:td>
<db:td>
<db:para>forces the use of OpenGL compatible fonts.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::NoFontMerging</db:code></db:para>
</db:td>
<db:td><db:code>0x8000</db:code></db:td>
<db:td>
<db:para>If the font selected for a certain writing system does not contain a character requested to draw, then Qt automatically chooses a similar looking font that contains the character. The NoFontMerging flag disables this feature. Please note that enabling this flag will not prevent Qt from automatically picking a suitable font when the selected font does not support the writing system of the text.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Any of these may be OR-ed with one of these flags:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::PreferMatch</db:code></db:para>
</db:td>
<db:td><db:code>0x0020</db:code></db:td>
<db:td>
<db:para>prefer an exact match. The font matcher will try to use the exact font size that has been specified.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::PreferQuality</db:code></db:para>
</db:td>
<db:td><db:code>0x0040</db:code></db:td>
<db:td>
<db:para>prefer the best quality font. The font matcher will use the nearest standard point size that the font supports.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::ForceIntegerMetrics</db:code></db:para>
</db:td>
<db:td><db:code>0x0400</db:code></db:td>
<db:td>
<db:para>forces the use of integer values in font engines that support fractional font metrics.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Weight-enum">
<db:title>enum QFont::Weight</db:title>
<db:para>Qt uses a weighting scale from 0 to 99 similar to, but not the same as, the scales used in Windows or CSS. A weight of 0 will be thin, whilst 99 will be extremely black.</db:para>
<db:para>This enum contains the predefined font weights:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::Thin</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::ExtraLight</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>12</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::Light</db:code></db:para>
</db:td>
<db:td><db:code>25</db:code></db:td>
<db:td>
<db:para>25</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::Normal</db:code></db:para>
</db:td>
<db:td><db:code>50</db:code></db:td>
<db:td>
<db:para>50</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::Medium</db:code></db:para>
</db:td>
<db:td><db:code>57</db:code></db:td>
<db:td>
<db:para>57</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::DemiBold</db:code></db:para>
</db:td>
<db:td><db:code>63</db:code></db:td>
<db:td>
<db:para>63</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::Bold</db:code></db:para>
</db:td>
<db:td><db:code>75</db:code></db:td>
<db:td>
<db:para>75</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::ExtraBold</db:code></db:para>
</db:td>
<db:td><db:code>81</db:code></db:td>
<db:td>
<db:para>81</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfont.xml">QFont</db:link></db:emphasis>::Black</db:code></db:para>
</db:td>
<db:td><db:code>87</db:code></db:td>
<db:td>
<db:para>87</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFont">
<db:title>QFont::QFont()</db:title>
<db:para>Constructs a font object that uses the application's default font.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#setFont">QGuiApplication::setFont</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#font">QGuiApplication::font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QFont-2">
<db:title>QFont::QFont(const QFont &amp;<db:emphasis>font</db:emphasis>, QPaintDevice *<db:emphasis>pd</db:emphasis>)</db:title>
<db:para>Constructs a font from <db:code role="parameter">font</db:code> for use on the paint device <db:code role="parameter">pd</db:code>.</db:para>
</db:section>
<db:section xml:id="QFont-3">
<db:title>QFont::QFont(const QString &amp;<db:emphasis>family</db:emphasis>, int <db:emphasis>pointSize</db:emphasis> = -1, int <db:emphasis>weight</db:emphasis> = -1, bool <db:emphasis>italic</db:emphasis> = false)</db:title>
<db:para>Constructs a font object with the specified <db:code role="parameter">family</db:code>, <db:code role="parameter">pointSize</db:code>, <db:code role="parameter">weight</db:code> and <db:code role="parameter">italic</db:code> settings.</db:para>
<db:para>If <db:code role="parameter">pointSize</db:code> is zero or negative, the point size of the font is set to a system-dependent default value. Generally, this is 12 points.</db:para>
<db:para>The <db:code role="parameter">family</db:code> name may optionally also include a foundry name, e.g. &quot;Helvetica [Cronyx]&quot;. If the <db:code role="parameter">family</db:code> is available from more than one foundry and the foundry isn't specified, an arbitrary foundry is chosen. If the family isn't available a family will be set using the <db:link xlink:href="qfont.xml">font matching</db:link> algorithm.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#Weight-enum">Weight</db:link></db:member>
<db:member><db:link xlink:href="qfont.xml#setFamily">setFamily</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setPointSize">setPointSize</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setWeight">setWeight</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setItalic">setItalic</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setStyleHint">setStyleHint</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#font">QGuiApplication::font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QFont-1">
<db:title>QFont::QFont(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:para>Constructs a font that is a copy of <db:code role="parameter">font</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QFont">
<db:title>[noexcept] QFont::~QFont()</db:title>
<db:para>Destroys the font object and frees all allocated resources.</db:para>
</db:section>
<db:section xml:id="bold">
<db:title>bool QFont::bold() const</db:title>
<db:para>Returns <db:code>true</db:code> if <db:link xlink:href="qfont.xml#weight">weight</db:link>() is a value greater than <db:link xlink:href="qfont.xml#Weight-enum">QFont::Medium</db:link>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#weight">weight</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setBold">setBold</db:link>()</db:member>
<db:member><db:link xlink:href="qfontinfo.xml#bold">QFontInfo::bold</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="capitalization">
<db:title>[since 4.4] QFont::Capitalization QFont::capitalization() const</db:title>
<db:para>Returns the current capitalization type of the font.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setCapitalization">setCapitalization</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultFamily">
<db:title>QString QFont::defaultFamily() const</db:title>
<db:para>Returns the family name that corresponds to the current style hint.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#StyleHint-enum">StyleHint</db:link></db:member>
<db:member><db:link xlink:href="qfont.xml#styleHint">styleHint</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setStyleHint">setStyleHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exactMatch">
<db:title>bool QFont::exactMatch() const</db:title>
<db:para>Returns <db:code>true</db:code> if a window system font exactly matching the settings of this font is available.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontinfo.xml">QFontInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="family">
<db:title>QString QFont::family() const</db:title>
<db:para>Returns the requested font family name, i.e. the name set in the constructor or the last setFont() call.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setFamily">setFamily</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#substitutes">substitutes</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#substitute">substitute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fixedPitch">
<db:title>bool QFont::fixedPitch() const</db:title>
<db:para>Returns <db:code>true</db:code> if fixed pitch has been set; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setFixedPitch">setFixedPitch</db:link>()</db:member>
<db:member><db:link xlink:href="qfontinfo.xml#fixedPitch">QFontInfo::fixedPitch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromString">
<db:title>bool QFont::fromString(const QString &amp;<db:emphasis>descrip</db:emphasis>)</db:title>
<db:para>Sets this font to match the description <db:code role="parameter">descrip</db:code>. The description is a comma-separated list of the font attributes, as returned by <db:link xlink:href="qfont.xml#toString">toString</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#toString">toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hintingPreference">
<db:title>[since 4.8] QFont::HintingPreference QFont::hintingPreference() const</db:title>
<db:para>Returns the currently preferred hinting level for glyphs rendered with this font.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setHintingPreference">setHintingPreference</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertSubstitution">
<db:title>[static] void QFont::insertSubstitution(const QString &amp;<db:emphasis>familyName</db:emphasis>, const QString &amp;<db:emphasis>substituteName</db:emphasis>)</db:title>
<db:para>Inserts <db:code role="parameter">substituteName</db:code> into the substitution table for the family <db:code role="parameter">familyName</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#insertSubstitutions">insertSubstitutions</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#removeSubstitutions">removeSubstitutions</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#substitutions">substitutions</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#substitute">substitute</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#substitutes">substitutes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertSubstitutions">
<db:title>[static] void QFont::insertSubstitutions(const QString &amp;<db:emphasis>familyName</db:emphasis>, const QStringList &amp;<db:emphasis>substituteNames</db:emphasis>)</db:title>
<db:para>Inserts the list of families <db:code role="parameter">substituteNames</db:code> into the substitution list for <db:code role="parameter">familyName</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#insertSubstitution">insertSubstitution</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#removeSubstitutions">removeSubstitutions</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#substitutions">substitutions</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#substitute">substitute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isCopyOf">
<db:title>bool QFont::isCopyOf(const QFont &amp;<db:emphasis>f</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this font and <db:code role="parameter">f</db:code> are copies of each other, i.e. one of them was created as a copy of the other and neither has been modified since. This is much stricter than equality.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#operator-eq">operator=</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="italic">
<db:title>bool QFont::italic() const</db:title>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qfont.xml#style">style</db:link>() of the font is not <db:link xlink:href="qfont.xml#Style-enum">QFont::StyleNormal</db:link></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setItalic">setItalic</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#style">style</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="kerning">
<db:title>bool QFont::kerning() const</db:title>
<db:para>Returns <db:code>true</db:code> if kerning should be used when drawing text with this font.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setKerning">setKerning</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="key">
<db:title>QString QFont::key() const</db:title>
<db:para>Returns the font's key, a textual representation of a font. It is typically used as the key for a cache or dictionary of fonts.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmap.xml">QMap</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastResortFamily">
<db:title>QString QFont::lastResortFamily() const</db:title>
<db:para>Returns the &quot;last resort&quot; font family name.</db:para>
<db:para>The current implementation tries a wide variety of common fonts, returning the first one it finds. Is is possible that no family is found in which case an empty string is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#lastResortFont">lastResortFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastResortFont">
<db:title>QString QFont::lastResortFont() const</db:title>
<db:para>Returns a &quot;last resort&quot; font name for the font matching algorithm. This is used if the last resort family is not available. It will always return a name, if necessary returning something like &quot;fixed&quot; or &quot;system&quot;.</db:para>
<db:para>The current implementation tries a wide variety of common fonts, returning the first one it finds. The implementation may change at any time, but this function will always return a string containing something.</db:para>
<db:para>It is theoretically possible that there really isn't a lastResortFont() in which case Qt will abort with an error message. We have not been able to identify a case where this happens. Please <db:link xlink:href="bughowto.xml">report it as a bug</db:link> if it does, preferably with a list of the fonts you have installed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#lastResortFamily">lastResortFamily</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="letterSpacing">
<db:title>[since 4.4] qreal QFont::letterSpacing() const</db:title>
<db:para>Returns the letter spacing for the font.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setLetterSpacing">setLetterSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#letterSpacingType">letterSpacingType</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setWordSpacing">setWordSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="letterSpacingType">
<db:title>[since 4.4] QFont::SpacingType QFont::letterSpacingType() const</db:title>
<db:para>Returns the spacing type used for letter spacing.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#letterSpacing">letterSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setLetterSpacing">setLetterSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setWordSpacing">setWordSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="overline">
<db:title>bool QFont::overline() const</db:title>
<db:para>Returns <db:code>true</db:code> if overline has been set; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setOverline">setOverline</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pixelSize">
<db:title>int QFont::pixelSize() const</db:title>
<db:para>Returns the pixel size of the font if it was set with <db:link xlink:href="qfont.xml#setPixelSize">setPixelSize</db:link>(). Returns -1 if the size was set with <db:link xlink:href="qfont.xml#setPointSize">setPointSize</db:link>() or <db:link xlink:href="qfont.xml#setPointSizeF">setPointSizeF</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setPixelSize">setPixelSize</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#pointSize">pointSize</db:link>()</db:member>
<db:member><db:link xlink:href="qfontinfo.xml#pointSize">QFontInfo::pointSize</db:link>()</db:member>
<db:member><db:link xlink:href="qfontinfo.xml#pixelSize">QFontInfo::pixelSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointSize">
<db:title>int QFont::pointSize() const</db:title>
<db:para>Returns the point size of the font. Returns -1 if the font size was specified in pixels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setPointSize">setPointSize</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#pointSizeF">pointSizeF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointSizeF">
<db:title>qreal QFont::pointSizeF() const</db:title>
<db:para>Returns the point size of the font. Returns -1 if the font size was specified in pixels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#pointSize">pointSize</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setPointSizeF">setPointSizeF</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#pixelSize">pixelSize</db:link>()</db:member>
<db:member><db:link xlink:href="qfontinfo.xml#pointSize">QFontInfo::pointSize</db:link>()</db:member>
<db:member><db:link xlink:href="qfontinfo.xml#pixelSize">QFontInfo::pixelSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeSubstitutions">
<db:title>[static, since 5.0] void QFont::removeSubstitutions(const QString &amp;<db:emphasis>familyName</db:emphasis>)</db:title>
<db:para>Removes all the substitutions for <db:code role="parameter">familyName</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#insertSubstitutions">insertSubstitutions</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#insertSubstitution">insertSubstitution</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#substitutions">substitutions</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#substitute">substitute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resolve">
<db:title>QFont QFont::resolve(const QFont &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns a new <db:link xlink:href="qfont.xml">QFont</db:link> that has attributes copied from <db:code role="parameter">other</db:code> that have not been previously set on this font.</db:para>
</db:section>
<db:section xml:id="setBold">
<db:title>void QFont::setBold(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">enable</db:code> is true sets the font's weight to <db:link xlink:href="qfont.xml#Weight-enum">QFont::Bold</db:link>; otherwise sets the weight to <db:link xlink:href="qfont.xml#Weight-enum">QFont::Normal</db:link>.</db:para>
<db:para>For finer boldness control use <db:link xlink:href="qfont.xml#setWeight">setWeight</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#bold">bold</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setWeight">setWeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCapitalization">
<db:title>[since 4.4] void QFont::setCapitalization(QFont::Capitalization <db:emphasis>caps</db:emphasis>)</db:title>
<db:para>Sets the capitalization of the text in this font to <db:code role="parameter">caps</db:code>.</db:para>
<db:para>A font's capitalization makes the text appear in the selected capitalization mode.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#capitalization">capitalization</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFamily">
<db:title>void QFont::setFamily(const QString &amp;<db:emphasis>family</db:emphasis>)</db:title>
<db:para>Sets the family name of the font. The name is case insensitive and may include a foundry name.</db:para>
<db:para>The <db:code role="parameter">family</db:code> name may optionally also include a foundry name, e.g. &quot;Helvetica [Cronyx]&quot;. If the <db:code role="parameter">family</db:code> is available from more than one foundry and the foundry isn't specified, an arbitrary foundry is chosen. If the family isn't available a family will be set using the <db:link xlink:href="qfont.xml">font matching</db:link> algorithm.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#family">family</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setStyleHint">setStyleHint</db:link>()</db:member>
<db:member><db:link xlink:href="qfontinfo.xml">QFontInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFixedPitch">
<db:title>void QFont::setFixedPitch(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">enable</db:code> is true, sets fixed pitch on; otherwise sets fixed pitch off.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#fixedPitch">fixedPitch</db:link>()</db:member>
<db:member><db:link xlink:href="qfontinfo.xml">QFontInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHintingPreference">
<db:title>[since 4.8] void QFont::setHintingPreference(QFont::HintingPreference <db:emphasis>hintingPreference</db:emphasis>)</db:title>
<db:para>Set the preference for the hinting level of the glyphs to <db:code role="parameter">hintingPreference</db:code>. This is a hint to the underlying font rendering system to use a certain level of hinting, and has varying support across platforms. See the table in the documentation for <db:link xlink:href="qfont.xml#HintingPreference-enum">QFont::HintingPreference</db:link> for more details.</db:para>
<db:para>The default hinting preference is <db:link xlink:href="qfont.xml#HintingPreference-enum">QFont::PreferDefaultHinting</db:link>.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#hintingPreference">hintingPreference</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItalic">
<db:title>void QFont::setItalic(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:para>Sets the <db:link xlink:href="qfont.xml#style">style</db:link>() of the font to <db:link xlink:href="qfont.xml#Style-enum">QFont::StyleItalic</db:link> if <db:code role="parameter">enable</db:code> is true; otherwise the style is set to <db:link xlink:href="qfont.xml#Style-enum">QFont::StyleNormal</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#italic">italic</db:link>()</db:member>
<db:member><db:link xlink:href="qfontinfo.xml">QFontInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setKerning">
<db:title>void QFont::setKerning(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:para>Enables kerning for this font if <db:code role="parameter">enable</db:code> is true; otherwise disables it. By default, kerning is enabled.</db:para>
<db:para>When kerning is enabled, glyph metrics do not add up anymore, even for Latin text. In other words, the assumption that width('a') + width('b') is equal to width(&quot;ab&quot;) is not necessarily true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#kerning">kerning</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLetterSpacing">
<db:title>[since 4.4] void QFont::setLetterSpacing(QFont::SpacingType <db:emphasis>type</db:emphasis>, qreal <db:emphasis>spacing</db:emphasis>)</db:title>
<db:para>Sets the letter spacing for the font to <db:code role="parameter">spacing</db:code> and the type of spacing to <db:code role="parameter">type</db:code>.</db:para>
<db:para>Letter spacing changes the default spacing between individual letters in the font. The spacing between the letters can be made smaller as well as larger either in percentage of the character width or in pixels, depending on the selected spacing type.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#letterSpacing">letterSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#letterSpacingType">letterSpacingType</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setWordSpacing">setWordSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOverline">
<db:title>void QFont::setOverline(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">enable</db:code> is true, sets overline on; otherwise sets overline off.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#overline">overline</db:link>()</db:member>
<db:member><db:link xlink:href="qfontinfo.xml">QFontInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPixelSize">
<db:title>void QFont::setPixelSize(int <db:emphasis>pixelSize</db:emphasis>)</db:title>
<db:para>Sets the font size to <db:code role="parameter">pixelSize</db:code> pixels.</db:para>
<db:para>Using this function makes the font device dependent. Use <db:link xlink:href="qfont.xml#setPointSize">setPointSize</db:link>() or <db:link xlink:href="qfont.xml#setPointSizeF">setPointSizeF</db:link>() to set the size of the font in a device independent manner.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#pixelSize">pixelSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPointSize">
<db:title>void QFont::setPointSize(int <db:emphasis>pointSize</db:emphasis>)</db:title>
<db:para>Sets the point size to <db:code role="parameter">pointSize</db:code>. The point size must be greater than zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#pointSize">pointSize</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setPointSizeF">setPointSizeF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPointSizeF">
<db:title>void QFont::setPointSizeF(qreal <db:emphasis>pointSize</db:emphasis>)</db:title>
<db:para>Sets the point size to <db:code role="parameter">pointSize</db:code>. The point size must be greater than zero. The requested precision may not be achieved on all platforms.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#pointSizeF">pointSizeF</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setPointSize">setPointSize</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setPixelSize">setPixelSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStretch">
<db:title>void QFont::setStretch(int <db:emphasis>factor</db:emphasis>)</db:title>
<db:para>Sets the stretch factor for the font.</db:para>
<db:para>The stretch factor matches a condensed or expanded version of the font or applies a stretch transform that changes the width of all characters in the font by <db:code role="parameter">factor</db:code> percent. For example, setting <db:code role="parameter">factor</db:code> to 150 results in all characters in the font being 1.5 times (ie. 150%) wider. The minimum stretch factor is 1, and the maximum stretch factor is 4000. The default stretch factor is <db:code>AnyStretch</db:code>, which will accept any stretch factor and not apply any transform on the font.</db:para>
<db:para>The stretch factor is only applied to outline fonts. The stretch factor is ignored for bitmap fonts.</db:para>
<db:note>
<db:para>When matching a font with a native non-default stretch factor, requesting a stretch of 100 will stretch it back to a medium width font.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#stretch">stretch</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#Stretch-enum">QFont::Stretch</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStrikeOut">
<db:title>void QFont::setStrikeOut(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">enable</db:code> is true, sets strikeout on; otherwise sets strikeout off.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#strikeOut">strikeOut</db:link>()</db:member>
<db:member><db:link xlink:href="qfontinfo.xml">QFontInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStyle">
<db:title>void QFont::setStyle(QFont::Style <db:emphasis>style</db:emphasis>)</db:title>
<db:para>Sets the style of the font to <db:code role="parameter">style</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#style">style</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#italic">italic</db:link>()</db:member>
<db:member><db:link xlink:href="qfontinfo.xml">QFontInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStyleHint">
<db:title>void QFont::setStyleHint(QFont::StyleHint <db:emphasis>hint</db:emphasis>, QFont::StyleStrategy <db:emphasis>strategy</db:emphasis> = PreferDefault)</db:title>
<db:para>Sets the style hint and strategy to <db:code role="parameter">hint</db:code> and <db:code role="parameter">strategy</db:code>, respectively.</db:para>
<db:para>If these aren't set explicitly the style hint will default to <db:code>AnyStyle</db:code> and the style strategy to <db:code>PreferDefault</db:code>.</db:para>
<db:para>Qt does not support style hints on X11 since this information is not provided by the window system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#StyleHint-enum">StyleHint</db:link></db:member>
<db:member><db:link xlink:href="qfont.xml#styleHint">styleHint</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#StyleStrategy-enum">StyleStrategy</db:link></db:member>
<db:member><db:link xlink:href="qfont.xml#styleStrategy">styleStrategy</db:link>()</db:member>
<db:member><db:link xlink:href="qfontinfo.xml">QFontInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStyleName">
<db:title>[since 4.8] void QFont::setStyleName(const QString &amp;<db:emphasis>styleName</db:emphasis>)</db:title>
<db:para>Sets the style name of the font to <db:code role="parameter">styleName</db:code>. When set, other style properties like <db:link xlink:href="qfont.xml#style">style</db:link>() and <db:link xlink:href="qfont.xml#weight">weight</db:link>() will be ignored for font matching.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#styleName">styleName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStyleStrategy">
<db:title>void QFont::setStyleStrategy(QFont::StyleStrategy <db:emphasis>s</db:emphasis>)</db:title>
<db:para>Sets the style strategy for the font to <db:code role="parameter">s</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#styleStrategy">styleStrategy</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#StyleStrategy-enum">QFont::StyleStrategy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUnderline">
<db:title>void QFont::setUnderline(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">enable</db:code> is true, sets underline on; otherwise sets underline off.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#underline">underline</db:link>()</db:member>
<db:member><db:link xlink:href="qfontinfo.xml">QFontInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWeight">
<db:title>void QFont::setWeight(int <db:emphasis>weight</db:emphasis>)</db:title>
<db:para>Sets the weight of the font to <db:code role="parameter">weight</db:code>, using the scale defined by <db:link xlink:href="qfont.xml#Weight-enum">QFont::Weight</db:link> enumeration.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#weight">weight</db:link>()</db:member>
<db:member><db:link xlink:href="qfontinfo.xml">QFontInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWordSpacing">
<db:title>[since 4.4] void QFont::setWordSpacing(qreal <db:emphasis>spacing</db:emphasis>)</db:title>
<db:para>Sets the word spacing for the font to <db:code role="parameter">spacing</db:code>.</db:para>
<db:para>Word spacing changes the default spacing between individual words. A positive value increases the word spacing by a corresponding amount of pixels, while a negative value decreases the inter-word spacing accordingly.</db:para>
<db:para>Word spacing will not apply to writing systems, where indiviaul words are not separated by white space.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#wordSpacing">wordSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setLetterSpacing">setLetterSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stretch">
<db:title>int QFont::stretch() const</db:title>
<db:para>Returns the stretch factor for the font.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setStretch">setStretch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="strikeOut">
<db:title>bool QFont::strikeOut() const</db:title>
<db:para>Returns <db:code>true</db:code> if strikeout has been set; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setStrikeOut">setStrikeOut</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="style">
<db:title>QFont::Style QFont::style() const</db:title>
<db:para>Returns the style of the font.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setStyle">setStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="styleHint">
<db:title>QFont::StyleHint QFont::styleHint() const</db:title>
<db:para>Returns the <db:link xlink:href="qfont.xml#StyleHint-enum">StyleHint</db:link>.</db:para>
<db:para>The style hint affects the <db:link xlink:href="qfont.xml">font matching</db:link> algorithm. See <db:link xlink:href="qfont.xml#StyleHint-enum">QFont::StyleHint</db:link> for the list of available hints.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setStyleHint">setStyleHint</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#StyleStrategy-enum">QFont::StyleStrategy</db:link></db:member>
<db:member><db:link xlink:href="qfontinfo.xml#styleHint">QFontInfo::styleHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="styleName">
<db:title>[since 4.8] QString QFont::styleName() const</db:title>
<db:para>Returns the requested font style name, it will be used to match the font with irregular styles (that can't be normalized in other style properties). It depends on system font support, thus only works for macOS and X11 so far. On Windows irregular styles will be added as separate font families so there is no need for this.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setStyleName">setStyleName</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setFamily">setFamily</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setStyle">setStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="styleStrategy">
<db:title>QFont::StyleStrategy QFont::styleStrategy() const</db:title>
<db:para>Returns the <db:link xlink:href="qfont.xml#StyleStrategy-enum">StyleStrategy</db:link>.</db:para>
<db:para>The style strategy affects the <db:link xlink:href="qfont.xml">font matching</db:link> algorithm. See <db:link xlink:href="qfont.xml#StyleStrategy-enum">QFont::StyleStrategy</db:link> for the list of available strategies.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setStyleStrategy">setStyleStrategy</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setStyleHint">setStyleHint</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#StyleHint-enum">QFont::StyleHint</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="substitute">
<db:title>[static] QString QFont::substitute(const QString &amp;<db:emphasis>familyName</db:emphasis>)</db:title>
<db:para>Returns the first family name to be used whenever <db:code role="parameter">familyName</db:code> is specified. The lookup is case insensitive.</db:para>
<db:para>If there is no substitution for <db:code role="parameter">familyName</db:code>, <db:code role="parameter">familyName</db:code> is returned.</db:para>
<db:para>To obtain a list of substitutions use <db:link xlink:href="qfont.xml#substitutes">substitutes</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setFamily">setFamily</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#insertSubstitutions">insertSubstitutions</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#insertSubstitution">insertSubstitution</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#removeSubstitutions">removeSubstitutions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="substitutes">
<db:title>[static] QStringList QFont::substitutes(const QString &amp;<db:emphasis>familyName</db:emphasis>)</db:title>
<db:para>Returns a list of family names to be used whenever <db:code role="parameter">familyName</db:code> is specified. The lookup is case insensitive.</db:para>
<db:para>If there is no substitution for <db:code role="parameter">familyName</db:code>, an empty list is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#substitute">substitute</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#insertSubstitutions">insertSubstitutions</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#insertSubstitution">insertSubstitution</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#removeSubstitutions">removeSubstitutions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="substitutions">
<db:title>[static] QStringList QFont::substitutions()</db:title>
<db:para>Returns a sorted list of substituted family names.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#insertSubstitution">insertSubstitution</db:link>()</db:member>
<db:member><db:link xlink:href="">removeSubstitution()</db:link></db:member>
<db:member><db:link xlink:href="qfont.xml#substitute">substitute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.0] void QFont::swap(QFont &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this font instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="toString">
<db:title>QString QFont::toString() const</db:title>
<db:para>Returns a description of the font. The description is a comma-separated list of the attributes, perfectly suited for use in <db:link xlink:href="qsettings.xml">QSettings</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#fromString">fromString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="underline">
<db:title>bool QFont::underline() const</db:title>
<db:para>Returns <db:code>true</db:code> if underline has been set; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setUnderline">setUnderline</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="weight">
<db:title>int QFont::weight() const</db:title>
<db:para>Returns the weight of the font, using the same scale as the <db:link xlink:href="qfont.xml#Weight-enum">QFont::Weight</db:link> enumeration.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setWeight">setWeight</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#Weight-enum">Weight</db:link></db:member>
<db:member><db:link xlink:href="qfontinfo.xml">QFontInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wordSpacing">
<db:title>[since 4.4] qreal QFont::wordSpacing() const</db:title>
<db:para>Returns the word spacing for the font.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setWordSpacing">setWordSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setLetterSpacing">setLetterSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QFont::operator QVariant() const</db:title>
<db:para>Returns the font as a <db:link xlink:href="qvariant.xml">QVariant</db:link></db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QFont::operator!=(const QFont &amp;<db:emphasis>f</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this font is different from <db:code role="parameter">f</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Two QFonts are considered to be different if their font attributes are different.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt">
<db:title>bool QFont::operator&lt;(const QFont &amp;<db:emphasis>f</db:emphasis>) const</db:title>
<db:para>Provides an arbitrary comparison of this font and font <db:code role="parameter">f</db:code>. All that is guaranteed is that the operator returns <db:code>false</db:code> if both fonts are equal and that (f1 &lt; f2) == !(f2 &lt; f1) if the fonts are not equal.</db:para>
<db:para>This function is useful in some circumstances, for example if you want to use <db:link xlink:href="qfont.xml">QFont</db:link> objects as keys in a <db:link xlink:href="qmap.xml">QMap</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#operator-eq-eq">operator==</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#operator-not-eq">operator!=</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#isCopyOf">isCopyOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[default, since 5.2] QFont &amp;QFont::operator=(QFont &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qfont.xml">QFont</db:link> instance.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QFont &amp;QFont::operator=(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">font</db:code> to this font and returns a reference to it.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QFont::operator==(const QFont &amp;<db:emphasis>f</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this font is equal to <db:code role="parameter">f</db:code>; otherwise returns false.</db:para>
<db:para>Two QFonts are considered equal if their font attributes are equal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#operator-not-eq">operator!=</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#isCopyOf">isCopyOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qHash-1">
<db:title>[noexcept, since 5.3] uint qHash(const QFont &amp;<db:emphasis>font</db:emphasis>, uint <db:emphasis>seed</db:emphasis> = 0)</db:title>
<db:para>Returns the hash value for <db:code role="parameter">font</db:code>. If specified, <db:code role="parameter">seed</db:code> is used to initialize the hash.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>s</db:emphasis>, const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:para>Writes the font <db:code role="parameter">font</db:code> to the data stream <db:code role="parameter">s</db:code>. (<db:link xlink:href="qfont.xml#toString">toString</db:link>() writes to a text stream.)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Format of the QDataStream operators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-1">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>s</db:emphasis>, QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:para>Reads the font <db:code role="parameter">font</db:code> from the data stream <db:code role="parameter">s</db:code>. (<db:link xlink:href="qfont.xml#fromString">fromString</db:link>() reads from a text stream.)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Format of the QDataStream operators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QFont</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qfont.xml">QFont</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="rawMode">
<db:title>[deprecated] bool QFont::rawMode() const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns <db:code>true</db:code> if raw mode is used for font name matching; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setRawMode">setRawMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rawName">
<db:title>[deprecated] QString QFont::rawName() const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns the name of the font within the underlying window system.</db:para>
<db:para>On X11, this function will return an empty string.</db:para>
<db:para>Using the return value of this function is usually <db:emphasis>not</db:emphasis> <db:emphasis>portable</db:emphasis>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setRawName">setRawName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRawMode">
<db:title>[deprecated] void QFont::setRawMode(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>If <db:code role="parameter">enable</db:code> is true, turns raw mode on; otherwise turns raw mode off. This function only has an effect under X11.</db:para>
<db:para>If raw mode is enabled, Qt will search for an X font with a complete font name matching the family name, ignoring all other values set for the <db:link xlink:href="qfont.xml">QFont</db:link>. If the font name matches several fonts, Qt will use the first font returned by X. <db:link xlink:href="qfontinfo.xml">QFontInfo</db:link> <db:emphasis>cannot</db:emphasis> be used to fetch information about a <db:link xlink:href="qfont.xml">QFont</db:link> using raw mode (it will return the values set in the <db:link xlink:href="qfont.xml">QFont</db:link> for all parameters, including the family name).</db:para>
<db:warning>
<db:para>Enabling raw mode has no effect since Qt 5.0.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#rawMode">rawMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRawName">
<db:title>[deprecated] void QFont::setRawName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Sets a font by its system specific name.</db:para>
<db:para>A font set with setRawName() is still a full-featured <db:link xlink:href="qfont.xml">QFont</db:link>. It can be queried (for example with <db:link xlink:href="qfont.xml#italic">italic</db:link>()) or modified (for example with <db:link xlink:href="qfont.xml#setItalic">setItalic</db:link>()) and is therefore also suitable for rendering rich text.</db:para>
<db:para>If Qt's internal font database cannot resolve the raw name, the font becomes a raw font with <db:code role="parameter">name</db:code> as its family.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#rawName">rawName</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#setFamily">setFamily</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
