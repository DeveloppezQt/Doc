<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Places (QML)</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Places example demonstrates how to search for Places and access related content.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/places.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The Places example demonstrates how to search for Places. In particular it shows how further information such as reviews, images and related content can be retrieved.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
<db:para>The example can work with any of the available geo services plugins. However, some plugins may require additional <db:link xlink:href="qml-qtlocation-pluginparameter.xml">plugin parameters</db:link> in order to function correctly. <db:link xlink:href="qml-qtlocation-pluginparameter.xml">Plugin parameters</db:link> can be passed on the command line using the <db:code>--plugin</db:code> argument, which takes the form:</db:para>
<db:programlisting language="cpp" role="bad">--plugin.&lt;parameter name&gt; &lt;parameter value&gt;
</db:programlisting>
<db:para>Refer to the documentation for each of the geo services plugins for details on what plugin parameters they support. The default plugin used by this example is <db:link xlink:href="location-plugin-osm.xml">Qt Location Open Street Map Plugin</db:link>, which does not require any parameters.</db:para>
</db:section>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>The Places example presents an application window displaying a map. At the top of the window is a search box, which is used to enter a place search query. To search for a place enter a search term into the text box and click the magnifying glass icon. To search for a place by category, click the category icon to display the list of available categories and select the desired category. The place search query will be for places that are near the current location shown on the map.</db:para>
<db:para>For some plugins like <db:link xlink:href="location-plugin-here.xml">Qt Location HERE Plugin</db:link> the search box provides search term suggestions when three or more characters are entered. Selecting one of the suggestions will cause a place search to be performed with the selected search text.</db:para>
<db:para>Clicking on a search result will display details about the place. If a places has rich content (editorials, reviews and images), these can be accessed by the buttons on the details page. To find similar places click the &quot;Find similar&quot; button.</db:para>
<db:para>The geo service provider can be changed by accessing the &quot;Provider&quot; menu.</db:para>
</db:section>
<db:section xml:id="displaying-categories">
<db:title>Displaying Categories</db:title>
<db:para>Before search by category can be performed, the list of available categories needs to be retrieved. This is achieved by creating a <db:link xlink:href="qml-qtlocation-categorymodel.xml">CategoryModel</db:link>.</db:para>
<db:programlisting language="qml">CategoryModel {
    id: categoryModel
    hierarchical: true
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtlocation-categorymodel.xml">CategoryModel</db:link> type provides a model of the available categories. It can provide either a flat list or a hierarchical tree model. In this example, we use a hierarchical tree model, by setting the <db:link xlink:href="qml-qtlocation-categorymodel.xml#hierarchical-prop">hierarchical</db:link> property to <db:emphasis>true</db:emphasis>. The <db:link xlink:href="qml-qtlocation-categorymodel.xml#plugin-prop">plugin</db:link> property is set during example intalization.</db:para>
<db:para>Next we create a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> to display the category model.</db:para>
<db:programlisting language="qml">ListView {
    id: root
    property variant categoryModel
    property variant rootIndex

    signal searchCategory(variant category)
    signal showSubcategories(variant index)

    snapMode: ListView.SnapToItem

    model: DelegateModel {
        id: delegeteDataModel
        model: root.categoryModel
        rootIndex: root.rootIndex
        delegate: CategoryDelegate {
            onSearchCategory: root.searchCategory(category);
            onShowSubcategories: root.showSubcategories(delegeteDataModel.modelIndex(index))
        }
    }
}
</db:programlisting>
<db:para>Because a hierarchical model is being used, a <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link> is needed to provide navigation functionality. If flat list model was being used the view could use the <db:link xlink:href="qml-qtlocation-categorymodel.xml">CategoryModel</db:link> directly.</db:para>
<db:para>The <db:emphasis>rootIndex</db:emphasis> property sets the root index of the <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link>. Categories are displayed by the <db:emphasis>CategoryDelegate</db:emphasis>, which provides two signals. The <db:emphasis>onShowSubcategories</db:emphasis> emits the <db:emphasis role="bold">showSubcategories()</db:emphasis> signal with root index to the current index causing the sub categories of the selected category to be displayed. The <db:emphasis>onSearchCategory</db:emphasis> handler emits the <db:emphasis role="bold">searchCategory()</db:emphasis> signal with a category parameter indicating which specific category has been chosen.</db:para>
<db:para>The <db:emphasis>CategoryDelegate</db:emphasis> displays the category name and emits the <db:emphasis role="bold">searchCategory()</db:emphasis> signal when the <db:link xlink:href="qml-qtquick-controls-label.xml">Label</db:link> is clicked:</db:para>
<db:programlisting language="qml">Label {
    id: labelItem
    text: category.name
    anchors.left: icon.right
    anchors.verticalCenter: parent.verticalCenter
    anchors.right: arrow.left
}

MouseArea {
    id: mouse
    anchors.fill: parent
    onClicked: root.searchCategory()
}
</db:programlisting>
<db:para>The <db:emphasis>CategoryDelegate</db:emphasis> also displays <db:emphasis>arrow</db:emphasis> <db:link xlink:href="qml-qtquick-controls-toolbutton.xml">ToolButton</db:link> when <db:emphasis>hasModelChildren</db:emphasis> property is set.</db:para>
<db:programlisting language="qml">ToolButton {
    id: arrow
    anchors.right: parent.right
    anchors.verticalCenter: parent.verticalCenter
    anchors.rightMargin: 15
    visible: model.hasModelChildren
    iconSource: &quot;../../resources/right.png&quot;
    onClicked: root.showSubcategories()
}
</db:programlisting>
</db:section>
<db:section xml:id="presenting-search-suggestions">
<db:title>Presenting Search Suggestions</db:title>
<db:para>The <db:link xlink:href="qml-qtlocation-placesearchsuggestionmodel.xml">PlaceSearchSuggestionModel</db:link> type is used to fetch suggested search terms based on a partially entered search term.</db:para>
<db:para>A new suggestion search is triggered whenever the entered search term is changed.</db:para>
<db:programlisting language="qml">SearchBar {
    id: searchBar
    onSearchTextChanged: {
        if (searchText.length &gt;= 3 &amp;&amp; suggestionModel != null) {
            suggestionModel.searchTerm = searchText;
            suggestionModel.update();
        }
    }
}
</db:programlisting>
<db:para>Suggestions are only queried if the length of the search term is three or more characters.</db:para>
<db:para>When the status of the <db:link xlink:href="qml-qtlocation-placesearchsuggestionmodel.xml">PlaceSearchSuggestionModel</db:link> changes, search suggestions are displayed.</db:para>
<db:programlisting language="qml">PlaceSearchSuggestionModel {
    id: suggestionModel
    searchArea: searchRegion

    onStatusChanged: {
        if (status == PlaceSearchSuggestionModel.Ready)
            stackView.showSuggestions()
    }
}
</db:programlisting>
<db:para>The main object in the &quot;SuggestionsShown&quot; state is the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> showing the search suggestions.</db:para>
<db:programlisting language="qml">ListView {
    id: suggestionView
    property variant suggestionModel
    signal suggestionSelected(string text)

    model: suggestionModel
    delegate: Item {
        width: parent.width
        height: label.height * 1.5
        Label {
            id: label
            text: suggestion
        }
        MouseArea {
            anchors.fill: parent
            onClicked: suggestionSelected(suggestion)
        }
    }
}
</db:programlisting>
<db:para>A <db:link xlink:href="qml-qtquick-controls-label.xml">Label</db:link> object is used as the delegate to display the suggestion text. Clicking on the suggested search term updates the search term and triggers a place search using the search suggestion.</db:para>
</db:section>
<db:section xml:id="searching-for-places">
<db:title>Searching for Places</db:title>
<db:para>The <db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link> type is used to search for places.</db:para>
<db:programlisting language="qml">PlaceSearchModel {
    id: placeSearchModel
    searchArea: searchRegion

    function searchForCategory(category) {
        searchTerm = &quot;&quot;;
        categories = category;
        recommendationId = &quot;&quot;;
        searchArea = searchRegion
        limit = -1;
        update();
    }

    function searchForText(text) {
        searchTerm = text;
        categories = null;
        recommendationId = &quot;&quot;;
        searchArea = searchRegion
        limit = -1;
        update();
    }

    function searchForRecommendations(placeId) {
        searchTerm = &quot;&quot;;
        categories = null;
        recommendationId = placeId;
        searchArea = null;
        limit = -1;
        update();
    }

    onStatusChanged: {
        switch (status) {
        case PlaceSearchModel.Ready:
            if (count &gt; 0)
                stackView.showPlaces()
            else
                stackView.showMessage(qsTr(&quot;Search Place Error&quot;),qsTr(&quot;Place not found !&quot;))
            break;
        case PlaceSearchModel.Error:
            stackView.showMessage(qsTr(&quot;Search Place Error&quot;),errorString())
            break;
        }
    }
}
</db:programlisting>
<db:para>First some of the model's properties are set, which will be used to form the search request. The <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#searchArea-prop">searchArea</db:link> property is set to the <db:emphasis>searchRegion</db:emphasis> object which is a <db:link xlink:href="qml-geocircle.xml">geocircle</db:link> with a center that is linked to the current location displayed on the <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link>.</db:para>
<db:para>Finally, we define three helper functions <db:emphasis role="bold">searchForCategory()</db:emphasis>, <db:emphasis role="bold">searchForText()</db:emphasis> and <db:emphasis role="bold">searchForRecommendations()</db:emphasis> which set either the <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#categories-prop">categories</db:link> or <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#searchTerm-prop">searchTerm</db:link> or <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#recommendationId-prop">recommendationId</db:link> properties and invokes the <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#update-method">update</db:link>() method to start the place search. The search results are displayed in a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>.</db:para>
<db:programlisting language="qml">ListView {
    id: searchView
    width: parent.width
    height: parent.height

    property variant placeSearchModel
    signal showPlaceDetails(variant place, variant distance)
    signal showMap()

    model: placeSearchModel
    delegate: SearchResultDelegate {
        onShowPlaceDetails: searchView.showPlaceDetails(place, distance)
        onSearchFor: placeSearchModel.searchForText(query);
    }

    footer:

        RowLayout {
        width: parent.width

        Button {
            text: qsTr(&quot;Previous&quot;)
            enabled: placeSearchModel.previousPagesAvailable
            onClicked: placeSearchModel.previousPage()
            Layout.alignment: Qt.AlignHCenter
        }

        Button {
            text: qsTr(&quot;Clear&quot;)
            onClicked: {
                placeSearchModel.reset()
                showMap()
            }
            Layout.alignment: Qt.AlignHCenter
        }

        Button {
            text: qsTr(&quot;Next&quot;)
            enabled: placeSearchModel.nextPagesAvailable
            onClicked: placeSearchModel.nextPage()
            Layout.alignment: Qt.AlignHCenter
        }
    }
}
</db:programlisting>
<db:para>The delegate used in the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>, <db:emphasis>SearchResultDelegate</db:emphasis>, is designed to handle multiple search result types via a <db:link xlink:href="qml-qtquick-loader.xml">Loader</db:link> object. For results of type <db:emphasis>PlaceResult</db:emphasis> the delegate is:</db:para>
<db:programlisting language="qml">Component {
    id: placeComponent
    Item {
        id: placeRoot
        width: root.width
        height: Math.max(icon.height, 3 * placeName.height)

        Rectangle {
            anchors.fill: parent
            color: &quot;#44ffffff&quot;
            visible: mouse.pressed
        }

        Rectangle {
            anchors.fill: parent
            color: &quot;#dbffde&quot;
            visible: model.sponsored !== undefined ? model.sponsored : false

            Label {
                text: qsTr(&quot;Sponsored result&quot;)
                horizontalAlignment: Text.AlignRight
                anchors.right: parent.right
                anchors.bottom: parent.bottom
                font.pixelSize: 8
                visible: model.sponsored !== undefined ? model.sponsored : false
            }
        }

        GridLayout {
            rows: 2
            columns: 2
            anchors.fill: parent
            anchors.leftMargin: 30
            flow: GridLayout.TopToBottom

            Image {
                // anchors.verticalCenter: parent.verticalCenter
                id:icon
                source: place.favorite ? &quot;../../resources/star.png&quot; : place.icon.url()
                Layout.rowSpan: 2
            }

            Label {
                id: placeName
                text: place.favorite ? place.favorite.name : place.name
                Layout.fillWidth: true
            }

            Label {
                id: distanceText
                font.italic: true
                text: Helper.formatDistance(distance)
                Layout.fillWidth: true
            }
        }

        Rectangle {
            anchors.left: parent.left
            anchors.right: parent.right
            anchors.margins: 15
            height: 1
            color: &quot;#46a2da&quot;
        }

        MouseArea {
            id: mouse
            anchors.fill: parent
            onClicked: {
                if (model.type === undefined || type === PlaceSearchModel.PlaceResult) {
                    if (!place.detailsFetched)
                        place.getDetails();
                    root.showPlaceDetails(model.place, model.distance);
                }
            }
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="displaying-place-content">
<db:title>Displaying Place Content</db:title>
<db:para>Places can have additional rich content, including editorials, reviews and images. Rich content is accessed via a set of models. Content models are generally not created directly by the application developer, instead models are obtained from the <db:link xlink:href="qml-qtlocation-place.xml#editorialModel-prop">editorialModel</db:link>, <db:link xlink:href="qml-qtlocation-place.xml#reviewModel-prop">reviewModel</db:link> and <db:link xlink:href="qml-qtlocation-place.xml#imageModel-prop">imageModel</db:link> properties of the <db:link xlink:href="qml-qtlocation-place.xml">Place</db:link> type.</db:para>
<db:programlisting language="qml">ListView {
    id:view
    property Place place
    signal showEditorial(variant editorial)
    width: parent.width
    height: parent.height
    model: place.editorialModel
    delegate: EditorialDelegate {
        onShowEditorial: view.showEditorial(model)
    }
}
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="places/forms/Message.qml">places/forms/Message.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/forms/MessageForm.ui.qml">places/forms/MessageForm.ui.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/forms/PlaceDetails.qml">places/forms/PlaceDetails.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/forms/PlaceDetailsForm.ui.qml">places/forms/PlaceDetailsForm.ui.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/forms/SearchBoundingBox.qml">places/forms/SearchBoundingBox.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/forms/SearchBoundingBoxForm.ui.qml">places/forms/SearchBoundingBoxForm.ui.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/forms/SearchBoundingCircle.qml">places/forms/SearchBoundingCircle.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/forms/SearchBoundingCircleForm.ui.qml">places/forms/SearchBoundingCircleForm.ui.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/forms/SearchCenter.qml">places/forms/SearchCenter.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/forms/SearchCenterForm.ui.qml">places/forms/SearchCenterForm.ui.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/forms/SearchOptions.qml">places/forms/SearchOptions.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/forms/SearchOptionsForm.ui.qml">places/forms/SearchOptionsForm.ui.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/helper.js">places/helper.js</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/items/MainMenu.qml">places/items/MainMenu.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/items/MapComponent.qml">places/items/MapComponent.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/items/SearchBar.qml">places/items/SearchBar.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/main.cpp">places/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/places.pro">places/places.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/places.qml">places/places.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/places.qrc">places/places.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/views/CategoryDelegate.qml">places/views/CategoryDelegate.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/views/CategoryView.qml">places/views/CategoryView.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/views/EditorialDelegate.qml">places/views/EditorialDelegate.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/views/EditorialPage.qml">places/views/EditorialPage.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/views/EditorialView.qml">places/views/EditorialView.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/views/ImageView.qml">places/views/ImageView.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/views/RatingView.qml">places/views/RatingView.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/views/ReviewDelegate.qml">places/views/ReviewDelegate.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/views/ReviewPage.qml">places/views/ReviewPage.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/views/ReviewView.qml">places/views/ReviewView.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/views/SearchResultDelegate.qml">places/views/SearchResultDelegate.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/views/SearchResultView.qml">places/views/SearchResultView.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/views/SuggestionView.qml">places/views/SuggestionView.qml</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="places/resources/categories.png">places/resources/categories.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/resources/left.png">places/resources/left.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/resources/marker.png">places/resources/marker.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/resources/right.png">places/resources/right.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/resources/scale.png">places/resources/scale.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/resources/scale_end.png">places/resources/scale_end.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/resources/search.png">places/resources/search.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="places/resources/star.png">places/resources/star.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
