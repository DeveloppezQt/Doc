<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCryptographicHash Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link> class provides a way to generate cryptographic hashes.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCryptographicHash</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QCryptographicHash is part of <db:simplelist><db:member>tools</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link> can be used to generate cryptographic hashes of binary or text data.</db:para>
<db:para>Refer to the documentation of the <db:link xlink:href="qcryptographichash.xml#Algorithm-enum">QCryptographicHash::Algorithm</db:link> enum for a list of the supported algorithms.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Algorithm-enum">
<db:title>enum QCryptographicHash::Algorithm</db:title>
<db:enumsynopsis>
<db:enumname>Algorithm</db:enumname>
<db:enumitem>
<db:enumidentifier>Md4</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Md5</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Sha1</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Sha224</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Sha256</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Sha384</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Sha512</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Keccak_224</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Keccak_256</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Keccak_384</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Keccak_512</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RealSha3_224</db:enumidentifier>
<db:enumvalue>11</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RealSha3_256</db:enumidentifier>
<db:enumvalue>12</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RealSha3_384</db:enumidentifier>
<db:enumvalue>13</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RealSha3_512</db:enumidentifier>
<db:enumvalue>14</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Sha3_224</db:enumidentifier>
<db:enumvalue>RealSha3_224</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Sha3_256</db:enumidentifier>
<db:enumvalue>RealSha3_256</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Sha3_384</db:enumidentifier>
<db:enumvalue>RealSha3_384</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Sha3_512</db:enumidentifier>
<db:enumvalue>RealSha3_512</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Blake2b_160</db:enumidentifier>
<db:enumvalue>15</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Blake2b_256</db:enumidentifier>
<db:enumvalue>16</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Blake2b_384</db:enumidentifier>
<db:enumvalue>17</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Blake2b_512</db:enumidentifier>
<db:enumvalue>18</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Blake2s_128</db:enumidentifier>
<db:enumvalue>19</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Blake2s_160</db:enumidentifier>
<db:enumvalue>20</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Blake2s_224</db:enumidentifier>
<db:enumvalue>21</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Blake2s_256</db:enumidentifier>
<db:enumvalue>22</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NumAlgorithms</db:enumidentifier>
<db:enumvalue>23</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:note>
<db:para>In Qt versions before 5.9, when asked to generate a SHA3 hash sum, <db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link> actually calculated Keccak. If you need compatibility with SHA-3 hashes produced by those versions of Qt, use the Keccak_ enumerators. Alternatively, if source compatibility is required, define the macro QT_SHA3_KECCAK_COMPAT.</db:para>
</db:note>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Md4</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Generate an MD4 hash sum</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Md5</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Generate an MD5 hash sum</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Sha1</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Generate an SHA-1 hash sum</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Sha224</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Generate an SHA-224 hash sum (SHA-2). Introduced in Qt 5.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Sha256</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Generate an SHA-256 hash sum (SHA-2). Introduced in Qt 5.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Sha384</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Generate an SHA-384 hash sum (SHA-2). Introduced in Qt 5.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Sha512</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Generate an SHA-512 hash sum (SHA-2). Introduced in Qt 5.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Sha3_224</db:code></db:para>
</db:td>
<db:td><db:code>RealSha3_224</db:code></db:td>
<db:td>
<db:para>Generate an SHA3-224 hash sum. Introduced in Qt 5.1</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Sha3_256</db:code></db:para>
</db:td>
<db:td><db:code>RealSha3_256</db:code></db:td>
<db:td>
<db:para>Generate an SHA3-256 hash sum. Introduced in Qt 5.1</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Sha3_384</db:code></db:para>
</db:td>
<db:td><db:code>RealSha3_384</db:code></db:td>
<db:td>
<db:para>Generate an SHA3-384 hash sum. Introduced in Qt 5.1</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Sha3_512</db:code></db:para>
</db:td>
<db:td><db:code>RealSha3_512</db:code></db:td>
<db:td>
<db:para>Generate an SHA3-512 hash sum. Introduced in Qt 5.1</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Keccak_224</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Generate a Keccak-224 hash sum. Introduced in Qt 5.9.2</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Keccak_256</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Generate a Keccak-256 hash sum. Introduced in Qt 5.9.2</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Keccak_384</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Generate a Keccak-384 hash sum. Introduced in Qt 5.9.2</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Keccak_512</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>Generate a Keccak-512 hash sum. Introduced in Qt 5.9.2</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Blake2b_160</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
<db:td>
<db:para>Generate a BLAKE2b-160 hash sum. Introduced in Qt 6.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Blake2b_256</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td>
<db:para>Generate a BLAKE2b-256 hash sum. Introduced in Qt 6.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Blake2b_384</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
<db:td>
<db:para>Generate a BLAKE2b-384 hash sum. Introduced in Qt 6.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Blake2b_512</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
<db:td>
<db:para>Generate a BLAKE2b-512 hash sum. Introduced in Qt 6.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Blake2s_128</db:code></db:para>
</db:td>
<db:td><db:code>19</db:code></db:td>
<db:td>
<db:para>Generate a BLAKE2s-128 hash sum. Introduced in Qt 6.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Blake2s_160</db:code></db:para>
</db:td>
<db:td><db:code>20</db:code></db:td>
<db:td>
<db:para>Generate a BLAKE2s-160 hash sum. Introduced in Qt 6.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Blake2s_224</db:code></db:para>
</db:td>
<db:td><db:code>21</db:code></db:td>
<db:td>
<db:para>Generate a BLAKE2s-224 hash sum. Introduced in Qt 6.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:emphasis>::Blake2s_256</db:code></db:para>
</db:td>
<db:td><db:code>22</db:code></db:td>
<db:td>
<db:para>Generate a BLAKE2s-256 hash sum. Introduced in Qt 6.0</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCryptographicHash">
<db:title>[explicit] QCryptographicHash::QCryptographicHash(QCryptographicHash::Algorithm <db:emphasis>method</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QCryptographicHash</db:methodname>
<db:methodparam>
<db:type>QCryptographicHash::Algorithm</db:type>
<db:parameter>method</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCryptographicHash(QCryptographicHash::Algorithm method)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an object that can be used to create a cryptographic hash from data using <db:code role="parameter">method</db:code>.</db:para>
</db:section>
<db:section xml:id="QCryptographicHash-1">
<db:title>[since 6.5] QCryptographicHash::QCryptographicHash(QCryptographicHash &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QCryptographicHash</db:methodname>
<db:methodparam>
<db:type>QCryptographicHash &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCryptographicHash(QCryptographicHash &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a new <db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link> from <db:code role="parameter">other</db:code>.</db:para>
<db:note>
<db:para>The moved-from object <db:code role="parameter">other</db:code> is placed in a partially-formed state, in which the only valid operations are destruction and assignment of a new value.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="dtor.QCryptographicHash">
<db:title>QCryptographicHash::~QCryptographicHash()</db:title>
<db:destructorsynopsis>
<db:methodname>~QCryptographicHash</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCryptographicHash()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the object.</db:para>
</db:section>
<db:section xml:id="addData-1">
<db:title>void QCryptographicHash::addData(QByteArrayView <db:emphasis>bytes</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addData</db:methodname>
<db:methodparam>
<db:type>QByteArrayView</db:type>
<db:parameter>bytes</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void addData(QByteArrayView bytes)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the characters in <db:code role="parameter">bytes</db:code> to the cryptographic hash.</db:para>
<db:note>
<db:para>In Qt versions prior to 6.3, this function took <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, not <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="addData-2">
<db:title>bool QCryptographicHash::addData(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>addData</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool addData(QIODevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads the data from the open <db:link xlink:href="qiodevice.xml">QIODevice</db:link> <db:code role="parameter">device</db:code> until it ends and hashes it. Returns true if reading was successful.</db:para>
</db:section>
<db:section xml:id="algorithm">
<db:title>[since 6.5] QCryptographicHash::Algorithm QCryptographicHash::algorithm() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCryptographicHash::Algorithm</db:type>
<db:methodname>algorithm</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCryptographicHash::Algorithm algorithm() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the algorithm used to generate the cryptographic hash.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="hash">
<db:title>[static] QByteArray QCryptographicHash::hash(QByteArrayView <db:emphasis>data</db:emphasis>, QCryptographicHash::Algorithm <db:emphasis>method</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>hash</db:methodname>
<db:methodparam>
<db:type>QByteArrayView</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QCryptographicHash::Algorithm</db:type>
<db:parameter>method</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray hash(QByteArrayView data, QCryptographicHash::Algorithm method)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the hash of <db:code role="parameter">data</db:code> using <db:code role="parameter">method</db:code>.</db:para>
<db:note>
<db:para>In Qt versions prior to 6.3, this function took <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, not <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="hashLength">
<db:title>[static] int QCryptographicHash::hashLength(QCryptographicHash::Algorithm <db:emphasis>method</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>hashLength</db:methodname>
<db:methodparam>
<db:type>QCryptographicHash::Algorithm</db:type>
<db:parameter>method</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int hashLength(QCryptographicHash::Algorithm method)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size of the output of the selected hash <db:code role="parameter">method</db:code> in bytes.</db:para>
</db:section>
<db:section xml:id="reset">
<db:title>void QCryptographicHash::reset()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>reset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void reset()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets the object.</db:para>
</db:section>
<db:section xml:id="result">
<db:title>QByteArray QCryptographicHash::result() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>result</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray result() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the final hash value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcryptographichash.xml#resultView">resultView</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearray.xml#toHex">QByteArray::toHex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resultView">
<db:title>[since 6.3] QByteArrayView QCryptographicHash::resultView() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArrayView</db:type>
<db:methodname>resultView</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView resultView() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the final hash value.</db:para>
<db:para>Note that the returned view remains valid only as long as the <db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link> object is not modified by other means.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcryptographichash.xml#result">result</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportsAlgorithm">
<db:title>[static, since 6.5] bool QCryptographicHash::supportsAlgorithm(QCryptographicHash::Algorithm <db:emphasis>method</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>supportsAlgorithm</db:methodname>
<db:methodparam>
<db:type>QCryptographicHash::Algorithm</db:type>
<db:parameter>method</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool supportsAlgorithm(QCryptographicHash::Algorithm method)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the selected algorithm <db:code role="parameter">method</db:code> is supported and if <db:link xlink:href="qcryptographichash.xml#result">result</db:link>() will return a value when the <db:code role="parameter">method</db:code> is used.</db:para>
<db:note>
<db:para>OpenSSL will be responsible for providing this information when used as a provider, otherwise true will be returned as the non-OpenSSL implementation doesn't have any restrictions. We return false if we fail to query OpenSSL.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>[since 6.5] void QCryptographicHash::swap(QCryptographicHash &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QCryptographicHash &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QCryptographicHash &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps cryptographic hash <db:code role="parameter">other</db:code> with this cryptographic hash. This operation is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[since 6.5] QCryptographicHash &amp;QCryptographicHash::operator=(QCryptographicHash &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCryptographicHash &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QCryptographicHash &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QCryptographicHash &amp; operator=(QCryptographicHash &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link> instance.</db:para>
<db:note>
<db:para>The moved-from object <db:code role="parameter">other</db:code> is placed in a partially-formed state, in which the only valid operations are destruction and assignment of a new value.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.5.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QCryptographicHash</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="addData">
<db:title>void QCryptographicHash::addData(const char *<db:emphasis>data</db:emphasis>, qsizetype <db:emphasis>length</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addData</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addData(const char *data, qsizetype length)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Adds the first <db:code role="parameter">length</db:code> chars of <db:code role="parameter">data</db:code> to the cryptographic hash.</db:para>
<db:para>Use the <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> overload instead.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
