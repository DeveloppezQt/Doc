<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Reading and Writing Image Files</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="coordsys.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Coordinate System"/></db:extendedlink>
<db:abstract>
<db:para>Qt GUI Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>The Paint System</db:para>
<db:para>The most common way to read images is through <db:link xlink:href="qimage.xml">QImage</db:link> and <db:link xlink:href="qpixmap.xml">QPixmap</db:link>'s constructors, or by calling the <db:link xlink:href="qimage.xml#load">QImage::load</db:link>() and <db:link xlink:href="qpixmap.xml#load">QPixmap::load</db:link>() functions. In addition, Qt provides the <db:link xlink:href="qimagereader.xml">QImageReader</db:link> class which gives more control over the process. Depending on the underlying support in the image format, the functions provided by the class can save memory and speed up loading of images.</db:para>
<db:para>Likewise, Qt provides the <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> class which supports setting format specific options, such as the gamma level, compression level and quality, prior to storing the image. If you do not need such options, you can use <db:link xlink:href="qimage.xml#save">QImage::save</db:link>() or <db:link xlink:href="qpixmap.xml#save">QPixmap::save</db:link>() instead.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">QMovie</db:emphasis></db:para>
<db:para><db:link xlink:href="qmovie.xml">QMovie</db:link> is a convenience class for displaying animations, using the <db:link xlink:href="qimagereader.xml">QImageReader</db:link> class internally. Once created, the <db:link xlink:href="qmovie.xml">QMovie</db:link> class provides various functions for both running and controlling the given animation.</db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/paintsystem-movie.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:link xlink:href="qimagereader.xml">QImageReader</db:link> and <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> classes rely on the <db:link xlink:href="qimageiohandler.xml">QImageIOHandler</db:link> class which is the common image I/O interface for all image formats in Qt. <db:link xlink:href="qimageiohandler.xml">QImageIOHandler</db:link> objects are used internally by <db:link xlink:href="qimagereader.xml">QImageReader</db:link> and <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> to add support for different image formats to Qt.</db:para>
<db:para>A list of the supported file formats are available through the <db:link xlink:href="qimagereader.xml#supportedImageFormats">QImageReader::supportedImageFormats</db:link>() and <db:link xlink:href="qimagewriter.xml#supportedImageFormats">QImageWriter::supportedImageFormats</db:link>() functions. Qt supports several file formats by default, and in addition new formats can be added as plugins. The currently supported formats are listed in the <db:link xlink:href="qimagereader.xml">QImageReader</db:link> and <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> class documentation.</db:para>
<db:para>Qt's plugin mechanism can also be used to write a custom image format handler. This is done by deriving from the <db:link xlink:href="qimageiohandler.xml">QImageIOHandler</db:link> class, and creating a <db:link xlink:href="qimageioplugin.xml">QImageIOPlugin</db:link> object which is a factory for creating <db:link xlink:href="qimageiohandler.xml">QImageIOHandler</db:link> objects. When the plugin is installed, <db:link xlink:href="qimagereader.xml">QImageReader</db:link> and <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> will automatically load the plugin and start using it.</db:para>
</db:article>
