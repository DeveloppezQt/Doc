<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Controls - File System Browser Example</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An example for the <db:link xlink:href="qml-qtquick-controls-treeview.xml">TreeView</db:link> control.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QApplication&gt;
#include &lt;QQmlApplicationEngine&gt;
#include &lt;QtQml&gt;
#include &lt;QFileSystemModel&gt;
#include &lt;QDateTime&gt;
#include &lt;QDesktopServices&gt;
#include &lt;QUrl&gt;

static inline QString permissionString(const QFileInfo &amp;fi)
{
    const QFile::Permissions permissions = fi.permissions();
    QString result = QLatin1String(&quot;----------&quot;);
    if (fi.isSymLink())
        result[0] = QLatin1Char('l');
    else if (fi.isDir())
        result[0] = QLatin1Char('d');
    if (permissions &amp; QFileDevice::ReadUser)
        result[1] = QLatin1Char('r');
    if (permissions &amp; QFileDevice::WriteUser)
        result[2] = QLatin1Char('w');
    if (permissions &amp; QFileDevice::ExeUser)
        result[3] = QLatin1Char('x');
    if (permissions &amp; QFileDevice::ReadGroup)
        result[4] = QLatin1Char('r');
    if (permissions &amp; QFileDevice::WriteGroup)
        result[5] = QLatin1Char('w');
    if (permissions &amp; QFileDevice::ExeGroup)
        result[6] = QLatin1Char('x');
    if (permissions &amp; QFileDevice::ReadOther)
        result[7] = QLatin1Char('r');
    if (permissions &amp; QFileDevice::WriteOther)
        result[8] = QLatin1Char('w');
    if (permissions &amp; QFileDevice::ExeOther)
        result[9] = QLatin1Char('x');
    return result;
}

static inline QString sizeString(const QFileInfo &amp;fi)
{
    if (!fi.isFile())
        return QString();
    const qint64 size = fi.size();
    if (size &gt; 1024 * 1024 * 10)
        return QString::number(size / (1024 * 1024)) + QLatin1Char('M');
    if (size &gt; 1024 * 10)
        return QString::number(size / 1024) + QLatin1Char('K');
    return QString::number(size);
}

class DisplayFileSystemModel : public QFileSystemModel {
    Q_OBJECT
public:
    explicit DisplayFileSystemModel(QObject *parent = Q_NULLPTR)
        : QFileSystemModel(parent) {}

    enum Roles  {
        SizeRole = Qt::UserRole + 4,
        DisplayableFilePermissionsRole = Qt::UserRole + 5,
        LastModifiedRole = Qt::UserRole + 6,
        UrlStringRole = Qt::UserRole + 7
    };
    Q_ENUM(Roles)

    QVariant data(const QModelIndex &amp;index, int role = Qt::DisplayRole) const Q_DECL_OVERRIDE
    {
        if (index.isValid() &amp;&amp; role &gt;= SizeRole) {
            switch (role) {
            case SizeRole:
                return QVariant(sizeString(fileInfo(index)));
            case DisplayableFilePermissionsRole:
                return QVariant(permissionString(fileInfo(index)));
            case LastModifiedRole:
                return QVariant(fileInfo(index).lastModified().toString(Qt::SystemLocaleShortDate));
            case UrlStringRole:
                return QVariant(QUrl::fromLocalFile(filePath(index)).toString());
            default:
                break;
            }
        }
        return QFileSystemModel::data(index, role);
    }

    QHash&lt;int,QByteArray&gt; roleNames() const Q_DECL_OVERRIDE
    {
         QHash&lt;int, QByteArray&gt; result = QFileSystemModel::roleNames();
         result.insert(SizeRole, QByteArrayLiteral(&quot;size&quot;));
         result.insert(DisplayableFilePermissionsRole, QByteArrayLiteral(&quot;displayableFilePermissions&quot;));
         result.insert(LastModifiedRole, QByteArrayLiteral(&quot;lastModified&quot;));
         return result;
    }
};

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);

    QQmlApplicationEngine engine;
    qmlRegisterUncreatableType&lt;DisplayFileSystemModel&gt;(&quot;io.qt.examples.quick.controls.filesystembrowser&quot;, 1, 0,
                                                       &quot;FileSystemModel&quot;, &quot;Cannot create a FileSystemModel instance.&quot;);
    QFileSystemModel *fsm = new DisplayFileSystemModel(&amp;engine);
    fsm-&gt;setRootPath(QDir::homePath());
    fsm-&gt;setResolveSymlinks(true);
    engine.rootContext()-&gt;setContextProperty(&quot;fileSystemModel&quot;, fsm);
    engine.rootContext()-&gt;setContextProperty(&quot;rootPathIndex&quot;, fsm-&gt;index(fsm-&gt;rootPath()));
    engine.load(QUrl(QStringLiteral(&quot;qrc:///main.qml&quot;)));
    if (engine.rootObjects().isEmpty())
        return -1;

    return app.exec();
}

#include &quot;main.moc&quot;

</db:programlisting>
</db:article>
