<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>&lt;QOverload&gt;</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Core Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="qConstOverload">
<db:title>auto qConstOverload(T <db:emphasis>memberFunctionPointer</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>auto</db:type>
<db:methodname>qConstOverload</db:methodname>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>memberFunctionPointer</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">auto qConstOverload(T memberFunctionPointer)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:code role="parameter">memberFunctionPointer</db:code> pointer to a constant member function:</db:para>
<db:programlisting language="cpp">    struct Foo {
        void overloadedFunction(int, const QString &amp;amp;);
        void overloadedFunction(int, const QString &amp;amp;) const;
    };
    ... qConstOverload&amp;lt;int, const QString &amp;amp;&amp;gt;(&amp;amp;Foo::overloadedFunction)
    ... qNonConstOverload&amp;lt;int, const QString &amp;amp;&amp;gt;(&amp;amp;Foo::overloadedFunction)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoverload-proxy.xml#qOverload">qOverload</db:link></db:member>
<db:member><db:link xlink:href="qoverload-proxy.xml#qNonConstOverload">qNonConstOverload</db:link></db:member>
<db:member><db:link xlink:href="signalsandslots-syntaxes.xml">Differences between String-Based and Functor-Based Connections</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qNonConstOverload">
<db:title>auto qNonConstOverload(T <db:emphasis>memberFunctionPointer</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>auto</db:type>
<db:methodname>qNonConstOverload</db:methodname>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>memberFunctionPointer</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">auto qNonConstOverload(T memberFunctionPointer)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:code role="parameter">memberFunctionPointer</db:code> pointer to a non-constant member function:</db:para>
<db:programlisting language="cpp">    struct Foo {
        void overloadedFunction(int, const QString &amp;amp;);
        void overloadedFunction(int, const QString &amp;amp;) const;
    };
    ... qConstOverload&amp;lt;int, const QString &amp;amp;&amp;gt;(&amp;amp;Foo::overloadedFunction)
    ... qNonConstOverload&amp;lt;int, const QString &amp;amp;&amp;gt;(&amp;amp;Foo::overloadedFunction)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoverload-proxy.xml#qOverload">qOverload</db:link></db:member>
<db:member>qNonConstOverload</db:member>
<db:member><db:link xlink:href="signalsandslots-syntaxes.xml">Differences between String-Based and Functor-Based Connections</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qOverload">
<db:title>auto qOverload(T <db:emphasis>functionPointer</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>auto</db:type>
<db:methodname>qOverload</db:methodname>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>functionPointer</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">auto qOverload(T functionPointer)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to an overloaded function. The template parameter is the list of the argument types of the function. <db:code role="parameter">functionPointer</db:code> is the pointer to the (member) function:</db:para>
<db:programlisting language="cpp">    struct Foo {
        void overloadedFunction();
        void overloadedFunction(int, const QString &amp;amp;);
    };
    ... qOverload&amp;lt;&amp;gt;(&amp;amp;Foo::overloadedFunction)
    ... qOverload&amp;lt;int, const QString &amp;amp;&amp;gt;(&amp;amp;Foo::overloadedFunction)
</db:programlisting>
<db:para>If a member function is also const-overloaded <db:link xlink:href="qoverload-proxy.xml#qConstOverload">qConstOverload</db:link> and <db:link xlink:href="qoverload-proxy.xml#qNonConstOverload">qNonConstOverload</db:link> need to be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoverload-proxy.xml#qConstOverload">qConstOverload</db:link>()</db:member>
<db:member><db:link xlink:href="qoverload-proxy.xml#qNonConstOverload">qNonConstOverload</db:link>()</db:member>
<db:member><db:link xlink:href="signalsandslots-syntaxes.xml">Differences between String-Based and Functor-Based Connections</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
