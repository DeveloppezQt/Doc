<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>TestCase QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Represents a unit test case.</db:para>
<db:para>This type was introduced in Qt 4.8.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtTest 1.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-item.xml">Item</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>TestCase is part of <db:simplelist><db:member>qtquicktest</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:section xml:id="introduction-to-qml-test-cases">
<db:title>Introduction to QML test cases</db:title>
<db:para>Test cases are written as JavaScript functions within a <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> type:</db:para>
<db:programlisting language="cpp">import QtQuick 2.0
import QtTest 1.0

TestCase {
    name: &quot;MathTests&quot;

    function test_math() {
        compare(2 + 2, 4, &quot;2 + 2 = 4&quot;)
    }

    function test_fail() {
        compare(2 + 2, 5, &quot;2 + 2 = 5&quot;)
    }
}
</db:programlisting>
<db:para>Functions whose names start with &quot;test_&quot; are treated as test cases to be executed. The <db:link xlink:href="qml-qttest-testcase.xml#name-prop">name</db:link> property is used to prefix the functions in the output:</db:para>
<db:programlisting language="cpp">********* Start testing of MathTests *********
Config: Using QTest library 4.7.2, Qt 4.7.2
PASS   : MathTests::initTestCase()
FAIL!  : MathTests::test_fail() 2 + 2 = 5
   Actual (): 4
   Expected (): 5
   Loc: [/home/.../tst_math.qml(12)]
PASS   : MathTests::test_math()
PASS   : MathTests::cleanupTestCase()
Totals: 3 passed, 1 failed, 0 skipped
********* Finished testing of MathTests *********
</db:programlisting>
<db:para>Because of the way JavaScript properties work, the order in which the test functions are found is unpredictable. To assist with predictability, the test framework will sort the functions on ascending order of name. This can help when there are two tests that must be run in order.</db:para>
<db:para>Multiple <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> types can be supplied. The test program will exit once they have all completed. If a test case doesn't need to run (because a precondition has failed), then <db:link xlink:href="qml-qttest-testcase.xml#optional-prop">optional</db:link> can be set to true.</db:para>
</db:section>
<db:section xml:id="data-driven-tests">
<db:title>Data-driven tests</db:title>
<db:para>Table data can be provided to a test using a function name that ends with &quot;_data&quot;. Alternatively, the init_data() function can be used to provide default test data for all test functions in a <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> type:</db:para>
<db:programlisting language="cpp">import QtQuick 2.0
import QtTest 1.1

TestCase {
    name: &quot;DataTests&quot;

    function init_data() {
      return [
           {tag:&quot;init_data_1&quot;, a:1, b:2, answer: 3},
           {tag:&quot;init_data_2&quot;, a:2, b:4, answer: 6}
      ];
    }

    function test_table_data() {
        return [
            {tag: &quot;2 + 2 = 4&quot;, a: 2, b: 2, answer: 4 },
            {tag: &quot;2 + 6 = 8&quot;, a: 2, b: 6, answer: 8 },
        ]
    }

    function test_table(data) {
        //data comes from test_table_data
        compare(data.a + data.b, data.answer)
    }

    function test__default_table(data) {
        //data comes from init_data
        compare(data.a + data.b, data.answer)
    }
}
</db:programlisting>
<db:para>The test framework will iterate over all of the rows in the table and pass each row to the test function. As shown, the columns can be extracted for use in the test. The tag column is special - it is printed by the test framework when a row fails, to help the reader identify which case failed amongst a set of otherwise passing tests.</db:para>
</db:section>
<db:section xml:id="benchmarks">
<db:title>Benchmarks</db:title>
<db:para>Functions whose names start with &quot;benchmark_&quot; will be run multiple times with the Qt benchmark framework, with an average timing value reported for the runs. This is equivalent to using the QBENCHMARK macro in the C++ version of QTestLib.</db:para>
<db:programlisting language="cpp">TestCase {
    id: top
    name: &quot;CreateBenchmark&quot;

    function benchmark_create_component() {
        var component = Qt.createComponent(&quot;item.qml&quot;)
        var obj = component.createObject(top)
        obj.destroy()
        component.destroy()
    }
}

RESULT : CreateBenchmark::benchmark_create_component:
     0.23 msecs per iteration (total: 60, iterations: 256)
PASS   : CreateBenchmark::benchmark_create_component()
</db:programlisting>
<db:para>To get the effect of the QBENCHMARK_ONCE macro, prefix the test function name with &quot;benchmark_once_&quot;.</db:para>
</db:section>
<db:section xml:id="simulating-keyboard-and-mouse-events">
<db:title>Simulating keyboard and mouse events</db:title>
<db:para>The <db:link xlink:href="qml-qttest-testcase.xml#keyPress-method">keyPress</db:link>(), <db:link xlink:href="qml-qttest-testcase.xml#keyRelease-method">keyRelease</db:link>(), and <db:link xlink:href="qml-qttest-testcase.xml#keyClick-method">keyClick</db:link>() methods can be used to simulate keyboard events within unit tests. The events are delivered to the currently focused QML item. You can pass either a Qt.Key enum value or a latin1 char (string of length one)</db:para>
<db:programlisting language="cpp">Rectangle {
    width: 50; height: 50
    focus: true

    TestCase {
        name: &quot;KeyClick&quot;
        when: windowShown

        function test_key_click() {
            keyClick(Qt.Key_Left)
            keyClick(&quot;a&quot;)
            ...
        }
    }
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qttest-testcase.xml#mousePress-method">mousePress</db:link>(), <db:link xlink:href="qml-qttest-testcase.xml#mouseRelease-method">mouseRelease</db:link>(), <db:link xlink:href="qml-qttest-testcase.xml#mouseClick-method">mouseClick</db:link>(), <db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClick-method">mouseDoubleClick</db:link>(), <db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClickSequence-method">mouseDoubleClickSequence</db:link>() and <db:link xlink:href="qml-qttest-testcase.xml#mouseMove-method">mouseMove</db:link>() methods can be used to simulate mouse events in a similar fashion.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> keyboard and mouse events can only be delivered once the main window has been shown. Attempts to deliver events before then will fail. Use the <db:link xlink:href="qml-qttest-testcase.xml#when-prop">when</db:link> and <db:link xlink:href="qml-qttest-testcase.xml#windowShown-prop">windowShown</db:link> properties to track when the main window has been shown.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-signalspy.xml">SignalSpy</db:link></db:member>
<db:member><db:link xlink:href="qtquick-qtquicktest.xml">Qt Quick Test Reference Documentation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="completed-prop">
<db:title>completed : bool</db:title>
<db:para>This property will be set to true once the test case has completed execution. Test cases are only executed once. The initial value is false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#running-prop">running</db:link></db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#when-prop">when</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name-prop">
<db:title>name : string</db:title>
<db:para>This property defines the name of the test case for result reporting. The default value is an empty string.</db:para>
<db:programlisting language="cpp">TestCase {
    name: &quot;ButtonTests&quot;
    ...
}
</db:programlisting>
</db:section>
<db:section xml:id="optional-prop">
<db:title>optional : bool</db:title>
<db:para>Multiple <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> types can be supplied in a test application. The application will exit once they have all completed. If a test case does not need to run (because a precondition has failed), then this property can be set to true. The default value is false.</db:para>
<db:programlisting language="cpp">TestCase {
    when: false
    optional: true
    function test_not_run() {
        verify(false)
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#when-prop">when</db:link></db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#completed-prop">completed</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="running-prop">
<db:title>running : bool</db:title>
<db:para>This property will be set to true while the test case is running. The initial value is false, and the value will become false again once the test case completes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#completed-prop">completed</db:link></db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#when-prop">when</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="when-prop">
<db:title>when : bool</db:title>
<db:para>This property should be set to true when the application wants the test cases to run. The default value is true. In the following example, a test is run when the user presses the mouse button:</db:para>
<db:programlisting language="cpp">Rectangle {
    id: foo
    width: 640; height: 480
    color: &quot;cyan&quot;

    MouseArea {
        id: area
        anchors.fill: parent
    }

    property bool bar: true

    TestCase {
        name: &quot;ItemTests&quot;
        when: area.pressed
        id: test1

        function test_bar() {
            verify(bar)
        }
    }
}
</db:programlisting>
<db:para>The test application will exit once all <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> types have been triggered and have run. The <db:link xlink:href="qml-qttest-testcase.xml#optional-prop">optional</db:link> property can be used to exclude a <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#optional-prop">optional</db:link></db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#completed-prop">completed</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowShown-prop">
<db:title>windowShown : bool</db:title>
<db:para>This property will be set to true after the QML viewing window has been displayed. Normally test cases run as soon as the test application is loaded and before a window is displayed. If the test case involves visual types and behaviors, then it may need to be delayed until after the window is shown.</db:para>
<db:programlisting language="cpp">Button {
    id: button
    onClicked: text = &quot;Clicked&quot;
    TestCase {
        name: &quot;ClickTest&quot;
        when: windowShown
        function test_click() {
            button.clicked();
            compare(button.text, &quot;Clicked&quot;);
        }
    }
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="cleanup-method">
<db:title>cleanup()</db:title>
<db:para>This function is called after each test function that is executed in the <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> type. The default implementation does nothing. The application can provide its own implementation to perform cleanup after each test function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#init-method">init</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#cleanupTestCase-method">cleanupTestCase</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cleanupTestCase-method">
<db:title>cleanupTestCase()</db:title>
<db:para>This function is called after all other test functions in the <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> type have completed. The default implementation does nothing. The application can provide its own implementation to perform test case cleanup.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#initTestCase-method">initTestCase</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#cleanup-method">cleanup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compare-method">
<db:title>compare(<db:emphasis>actual</db:emphasis>, <db:emphasis>expected</db:emphasis>, <db:emphasis>message</db:emphasis> = &quot;&quot;)</db:title>
<db:para>Fails the current test case if <db:code role="parameter">actual</db:code> is not the same as <db:code role="parameter">expected</db:code>, and displays the optional <db:code role="parameter">message</db:code>. Similar to QCOMPARE(actual, expected) in C++.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#tryCompare-method">tryCompare</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#fuzzyCompare-method">fuzzyCompare</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="expectFail-method">
<db:title>expectFail(<db:emphasis>tag</db:emphasis>, <db:emphasis>message</db:emphasis>)</db:title>
<db:para>In a data-driven test, marks the row associated with <db:code role="parameter">tag</db:code> as expected to fail. When the fail occurs, display the <db:code role="parameter">message</db:code>, abort the test, and mark the test as passing. Similar to QEXPECT_FAIL(tag, message, Abort) in C++.</db:para>
<db:para>If the test is not data-driven, then <db:code role="parameter">tag</db:code> must be set to an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#expectFailContinue-method">expectFailContinue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="expectFailContinue-method">
<db:title>expectFailContinue(<db:emphasis>tag</db:emphasis>, <db:emphasis>message</db:emphasis>)</db:title>
<db:para>In a data-driven test, marks the row associated with <db:code role="parameter">tag</db:code> as expected to fail. When the fail occurs, display the <db:code role="parameter">message</db:code>, and then continue the test. Similar to QEXPECT_FAIL(tag, message, Continue) in C++.</db:para>
<db:para>If the test is not data-driven, then <db:code role="parameter">tag</db:code> must be set to an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#expectFail-method">expectFail</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fail-method">
<db:title>fail(<db:emphasis>message</db:emphasis> = &quot;&quot;)</db:title>
<db:para>Fails the current test case, with the optional <db:code role="parameter">message</db:code>. Similar to QFAIL(message) in C++.</db:para>
</db:section>
<db:section xml:id="findChild-method">
<db:title>[since 5.4] QtObject findChild(<db:emphasis>parent</db:emphasis>, <db:emphasis>objectName</db:emphasis>)</db:title>
<db:para>Returns the first child of <db:code role="parameter">parent</db:code> with <db:code role="parameter">objectName</db:code>, or null if no such item exists. Both visual and non-visual children are searched recursively, with visual children being searched first.</db:para>
<db:programlisting language="cpp">compare(findChild(item, &quot;childObject&quot;), expectedChildObject);
</db:programlisting>
<db:para>This method was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="fuzzyCompare-method">
<db:title>fuzzyCompare(<db:emphasis>actual</db:emphasis>, <db:emphasis>expected</db:emphasis>, <db:emphasis>delta</db:emphasis>, <db:emphasis>message</db:emphasis> = &quot;&quot;)</db:title>
<db:para>Fails the current test case if the difference betwen <db:code role="parameter">actual</db:code> and <db:code role="parameter">expected</db:code> is greater than <db:code role="parameter">delta</db:code>, and displays the optional <db:code role="parameter">message</db:code>. Similar to qFuzzyCompare(actual, expected) in C++ but with a required <db:code role="parameter">delta</db:code> value.</db:para>
<db:para>This function can also be used for color comparisons if both the <db:code role="parameter">actual</db:code> and <db:code role="parameter">expected</db:code> values can be converted into color values. If any of the differences for RGBA channel values are greater than <db:code role="parameter">delta</db:code>, the test fails.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#tryCompare-method">tryCompare</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#compare-method">compare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="grabImage-method">
<db:title>object grabImage(<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Returns a snapshot image object of the given <db:code role="parameter">item</db:code>.</db:para>
<db:para>The returned image object has the following methods:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>red(x, y) Returns the red channel value of the pixel at <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code> position</db:para>
</db:listitem>
<db:listitem>
<db:para>green(x, y) Returns the green channel value of the pixel at <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code> position</db:para>
</db:listitem>
<db:listitem>
<db:para>blue(x, y) Returns the blue channel value of the pixel at <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code> position</db:para>
</db:listitem>
<db:listitem>
<db:para>alpha(x, y) Returns the alpha channel value of the pixel at <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code> position</db:para>
</db:listitem>
<db:listitem>
<db:para>pixel(x, y) Returns the color value of the pixel at <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code> position</db:para>
</db:listitem>
<db:listitem>
<db:para>equals(image) Returns true if this image is identical to <db:code role="parameter">image</db:code> - see <db:link xlink:href="qimage.xml#operator-eq-eq">QImage::operator==</db:link> (since 5.6)</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">var image = grabImage(rect);
compare(image.red(10, 10), 255);
compare(image.pixel(20, 20), Qt.rgba(255, 0, 0, 255));

rect.width += 10;
var newImage = grabImage(rect);
verify(!newImage.equals(image));
</db:programlisting>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="ignoreWarning-method">
<db:title>ignoreWarning(<db:emphasis>message</db:emphasis>)</db:title>
<db:para>Marks <db:code role="parameter">message</db:code> as an ignored warning message. When it occurs, the warning will not be printed and the test passes. If the message does not occur, then the test will fail. Similar to QTest::ignoreMessage(QtWarningMsg, message) in C++.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#warn-method">warn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="init-method">
<db:title>init()</db:title>
<db:para>This function is called before each test function that is executed in the <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> type. The default implementation does nothing. The application can provide its own implementation to perform initialization before each test function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#cleanup-method">cleanup</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#initTestCase-method">initTestCase</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initTestCase-method">
<db:title>initTestCase()</db:title>
<db:para>This function is called before any other test functions in the <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> type. The default implementation does nothing. The application can provide its own implementation to perform test case initialization.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#cleanupTestCase-method">cleanupTestCase</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#init-method">init</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyClick-method">
<db:title>keyClick(<db:emphasis>key</db:emphasis>, <db:emphasis>modifiers</db:emphasis> = Qt.NoModifier, <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>Simulates clicking of <db:code role="parameter">key</db:code> with an optional <db:code role="parameter">modifier</db:code> on the currently focused item. If <db:code role="parameter">delay</db:code> is larger than 0, the test will wait for <db:code role="parameter">delay</db:code> milliseconds.</db:para>
<db:para>The event will be sent to the <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> window or, in case of multiple windows, to the current active window. See <db:link xlink:href="qguiapplication.xml#focusWindow">QGuiApplication::focusWindow</db:link>() for more details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#keyPress-method">keyPress</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#keyRelease-method">keyRelease</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyPress-method">
<db:title>keyPress(<db:emphasis>key</db:emphasis>, <db:emphasis>modifiers</db:emphasis> = Qt.NoModifier, <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>Simulates pressing a <db:code role="parameter">key</db:code> with an optional <db:code role="parameter">modifier</db:code> on the currently focused item. If <db:code role="parameter">delay</db:code> is larger than 0, the test will wait for <db:code role="parameter">delay</db:code> milliseconds.</db:para>
<db:para>The event will be sent to the <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> window or, in case of multiple windows, to the current active window. See <db:link xlink:href="qguiapplication.xml#focusWindow">QGuiApplication::focusWindow</db:link>() for more details.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> At some point you should release the key using <db:link xlink:href="qml-qttest-testcase.xml#keyRelease-method">keyRelease</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#keyRelease-method">keyRelease</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#keyClick-method">keyClick</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyRelease-method">
<db:title>keyRelease(<db:emphasis>key</db:emphasis>, <db:emphasis>modifiers</db:emphasis> = Qt.NoModifier, <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>Simulates releasing a <db:code role="parameter">key</db:code> with an optional <db:code role="parameter">modifier</db:code> on the currently focused item. If <db:code role="parameter">delay</db:code> is larger than 0, the test will wait for <db:code role="parameter">delay</db:code> milliseconds.</db:para>
<db:para>The event will be sent to the <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> window or, in case of multiple windows, to the current active window. See <db:link xlink:href="qguiapplication.xml#focusWindow">QGuiApplication::focusWindow</db:link>() for more details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#keyPress-method">keyPress</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#keyClick-method">keyClick</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseClick-method">
<db:title>mouseClick(<db:emphasis>item</db:emphasis>, <db:emphasis>x</db:emphasis> = item.width / 2, <db:emphasis>y</db:emphasis> = item.height / 2, <db:emphasis>button</db:emphasis> = Qt.LeftButton, <db:emphasis>modifiers</db:emphasis> = Qt.NoModifier, <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>Simulates clicking a mouse <db:code role="parameter">button</db:code> with an optional <db:code role="parameter">modifier</db:code> on an <db:code role="parameter">item</db:code>. The position of the click is defined by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code>. If <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> are not defined the position will be the center of <db:code role="parameter">item</db:code>. If <db:code role="parameter">delay</db:code> is specified, the test will wait for the specified amount of milliseconds before pressing and before releasing the button.</db:para>
<db:para>The position given by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> is transformed from the co-ordinate system of <db:code role="parameter">item</db:code> into window co-ordinates and then delivered. If <db:code role="parameter">item</db:code> is obscured by another item, or a child of <db:code role="parameter">item</db:code> occupies that position, then the event will be delivered to the other item instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mousePress-method">mousePress</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseRelease-method">mouseRelease</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClick-method">mouseDoubleClick</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClickSequence-method">mouseDoubleClickSequence</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseMove-method">mouseMove</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDrag-method">mouseDrag</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseWheel-method">mouseWheel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseDoubleClick-method">
<db:title>mouseDoubleClick(<db:emphasis>item</db:emphasis>, <db:emphasis>x</db:emphasis> = item.width / 2, <db:emphasis>y</db:emphasis> = item.height / 2, <db:emphasis>button</db:emphasis> = Qt.LeftButton, <db:emphasis>modifiers</db:emphasis> = Qt.NoModifier, <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>Simulates double-clicking a mouse <db:code role="parameter">button</db:code> with an optional <db:code role="parameter">modifier</db:code> on an <db:code role="parameter">item</db:code>. The position of the click is defined by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code>. If <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> are not defined the position will be the center of <db:code role="parameter">item</db:code>. If <db:code role="parameter">delay</db:code> is specified, the test will wait for the specified amount of milliseconds before pressing and before releasing the button.</db:para>
<db:para>The position given by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> is transformed from the co-ordinate system of <db:code role="parameter">item</db:code> into window co-ordinates and then delivered. If <db:code role="parameter">item</db:code> is obscured by another item, or a child of <db:code role="parameter">item</db:code> occupies that position, then the event will be delivered to the other item instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClickSequence-method">mouseDoubleClickSequence</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mousePress-method">mousePress</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseRelease-method">mouseRelease</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseClick-method">mouseClick</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseMove-method">mouseMove</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDrag-method">mouseDrag</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseWheel-method">mouseWheel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseDoubleClickSequence-method">
<db:title>mouseDoubleClickSequence(<db:emphasis>item</db:emphasis>, <db:emphasis>x</db:emphasis> = item.width / 2, <db:emphasis>y</db:emphasis> = item.height / 2, <db:emphasis>button</db:emphasis> = Qt.LeftButton, <db:emphasis>modifiers</db:emphasis> = Qt.NoModifier, <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>Simulates the full sequence of events generated by double-clicking a mouse <db:code role="parameter">button</db:code> with an optional <db:code role="parameter">modifier</db:code> on an <db:code role="parameter">item</db:code>.</db:para>
<db:para>This method reproduces the sequence of mouse events generated when a user makes a double click: Press-Release-Press-DoubleClick-Release.</db:para>
<db:para>The position of the click is defined by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code>. If <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> are not defined the position will be the center of <db:code role="parameter">item</db:code>. If <db:code role="parameter">delay</db:code> is specified, the test will wait for the specified amount of milliseconds before pressing and before releasing the button.</db:para>
<db:para>The position given by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> is transformed from the co-ordinate system of <db:code role="parameter">item</db:code> into window co-ordinates and then delivered. If <db:code role="parameter">item</db:code> is obscured by another item, or a child of <db:code role="parameter">item</db:code> occupies that position, then the event will be delivered to the other item instead.</db:para>
<db:para>This QML method was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClick-method">mouseDoubleClick</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mousePress-method">mousePress</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseRelease-method">mouseRelease</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseClick-method">mouseClick</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseMove-method">mouseMove</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDrag-method">mouseDrag</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseWheel-method">mouseWheel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseDrag-method">
<db:title>mouseDrag(<db:emphasis>item</db:emphasis>, <db:emphasis>x</db:emphasis>, <db:emphasis>y</db:emphasis>, <db:emphasis>dx</db:emphasis>, <db:emphasis>dy</db:emphasis>, <db:emphasis>button</db:emphasis> = Qt.LeftButton, <db:emphasis>modifiers</db:emphasis> = Qt.NoModifier, <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>Simulates dragging the mouse on an <db:code role="parameter">item</db:code> with <db:code role="parameter">button</db:code> pressed and an optional <db:code role="parameter">modifier</db:code>. The initial drag position is defined by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code>, and drag distance is defined by <db:code role="parameter">dx</db:code> and <db:code role="parameter">dy</db:code>. If <db:code role="parameter">delay</db:code> is specified, the test will wait for the specified amount of milliseconds before releasing the button.</db:para>
<db:para>The position given by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> is transformed from the co-ordinate system of <db:code role="parameter">item</db:code> into window co-ordinates and then delivered. If <db:code role="parameter">item</db:code> is obscured by another item, or a child of <db:code role="parameter">item</db:code> occupies that position, then the event will be delivered to the other item instead.</db:para>
<db:para>Note: this method does not imply a drop action, to make a drop, an additional <db:link xlink:href="qml-qttest-testcase.xml#mouseRelease-method">mouseRelease</db:link>(item, x + dx, y + dy) is needed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mousePress-method">mousePress</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseClick-method">mouseClick</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClick-method">mouseDoubleClick</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClickSequence-method">mouseDoubleClickSequence</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseMove-method">mouseMove</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseRelease-method">mouseRelease</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseWheel-method">mouseWheel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseMove-method">
<db:title>mouseMove(<db:emphasis>item</db:emphasis>, <db:emphasis>x</db:emphasis>, <db:emphasis>y</db:emphasis>, <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>Moves the mouse pointer to the position given by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> within <db:code role="parameter">item</db:code>. If a <db:code role="parameter">delay</db:code> (in milliseconds) is given, the test will wait before moving the mouse pointer.</db:para>
<db:para>The position given by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> is transformed from the co-ordinate system of <db:code role="parameter">item</db:code> into window co-ordinates and then delivered. If <db:code role="parameter">item</db:code> is obscured by another item, or a child of <db:code role="parameter">item</db:code> occupies that position, then the event will be delivered to the other item instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mousePress-method">mousePress</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseRelease-method">mouseRelease</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseClick-method">mouseClick</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClick-method">mouseDoubleClick</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClickSequence-method">mouseDoubleClickSequence</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDrag-method">mouseDrag</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseWheel-method">mouseWheel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mousePress-method">
<db:title>mousePress(<db:emphasis>item</db:emphasis>, <db:emphasis>x</db:emphasis> = item.width / 2, <db:emphasis>y</db:emphasis> = item.height / 2, <db:emphasis>button</db:emphasis> = Qt.LeftButton, <db:emphasis>modifiers</db:emphasis> = Qt.NoModifier, <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>Simulates pressing a mouse <db:code role="parameter">button</db:code> with an optional <db:code role="parameter">modifier</db:code> on an <db:code role="parameter">item</db:code>. The position is defined by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code>. If <db:code role="parameter">x</db:code> or <db:code role="parameter">y</db:code> are not defined the position will be the center of <db:code role="parameter">item</db:code>. If <db:code role="parameter">delay</db:code> is specified, the test will wait for the specified amount of milliseconds before the press.</db:para>
<db:para>The position given by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> is transformed from the co-ordinate system of <db:code role="parameter">item</db:code> into window co-ordinates and then delivered. If <db:code role="parameter">item</db:code> is obscured by another item, or a child of <db:code role="parameter">item</db:code> occupies that position, then the event will be delivered to the other item instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseRelease-method">mouseRelease</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseClick-method">mouseClick</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClick-method">mouseDoubleClick</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClickSequence-method">mouseDoubleClickSequence</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseMove-method">mouseMove</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDrag-method">mouseDrag</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseWheel-method">mouseWheel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseRelease-method">
<db:title>mouseRelease(<db:emphasis>item</db:emphasis>, <db:emphasis>x</db:emphasis> = item.width / 2, <db:emphasis>y</db:emphasis> = item.height / 2, <db:emphasis>button</db:emphasis> = Qt.LeftButton, <db:emphasis>modifiers</db:emphasis> = Qt.NoModifier, <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>Simulates releasing a mouse <db:code role="parameter">button</db:code> with an optional <db:code role="parameter">modifier</db:code> on an <db:code role="parameter">item</db:code>. The position of the release is defined by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code>. If <db:code role="parameter">x</db:code> or <db:code role="parameter">y</db:code> are not defined the position will be the center of <db:code role="parameter">item</db:code>. If <db:code role="parameter">delay</db:code> is specified, the test will wait for the specified amount of milliseconds before releasing the button.</db:para>
<db:para>The position given by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> is transformed from the co-ordinate system of <db:code role="parameter">item</db:code> into window co-ordinates and then delivered. If <db:code role="parameter">item</db:code> is obscured by another item, or a child of <db:code role="parameter">item</db:code> occupies that position, then the event will be delivered to the other item instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mousePress-method">mousePress</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseClick-method">mouseClick</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClick-method">mouseDoubleClick</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClickSequence-method">mouseDoubleClickSequence</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseMove-method">mouseMove</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDrag-method">mouseDrag</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseWheel-method">mouseWheel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseWheel-method">
<db:title>mouseWheel(<db:emphasis>item</db:emphasis>, <db:emphasis>x</db:emphasis>, <db:emphasis>y</db:emphasis>, <db:emphasis>xDelta</db:emphasis>, <db:emphasis>yDelta</db:emphasis>, <db:emphasis>button</db:emphasis> = Qt.LeftButton, <db:emphasis>modifiers</db:emphasis> = Qt.NoModifier, <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>Simulates rotating the mouse wheel on an <db:code role="parameter">item</db:code> with <db:code role="parameter">button</db:code> pressed and an optional <db:code role="parameter">modifier</db:code>. The position of the wheel event is defined by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code>. If <db:code role="parameter">delay</db:code> is specified, the test will wait for the specified amount of milliseconds before releasing the button.</db:para>
<db:para>The position given by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> is transformed from the co-ordinate system of <db:code role="parameter">item</db:code> into window co-ordinates and then delivered. If <db:code role="parameter">item</db:code> is obscured by another item, or a child of <db:code role="parameter">item</db:code> occupies that position, then the event will be delivered to the other item instead.</db:para>
<db:para>The <db:code role="parameter">xDelta</db:code> and <db:code role="parameter">yDelta</db:code> contain the wheel rotation distance in eighths of a degree. see <db:link xlink:href="qwheelevent.xml#angleDelta">QWheelEvent::angleDelta</db:link>() for more details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mousePress-method">mousePress</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseClick-method">mouseClick</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClick-method">mouseDoubleClick</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClickSequence-method">mouseDoubleClickSequence</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseMove-method">mouseMove</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseRelease-method">mouseRelease</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDrag-method">mouseDrag</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#angleDelta">QWheelEvent::angleDelta</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="skip-method">
<db:title>skip(<db:emphasis>message</db:emphasis> = &quot;&quot;)</db:title>
<db:para>Skips the current test case and prints the optional <db:code role="parameter">message</db:code>. If this is a data-driven test, then only the current row is skipped. Similar to QSKIP(message) in C++.</db:para>
</db:section>
<db:section xml:id="sleep-method">
<db:title>sleep(<db:emphasis>ms</db:emphasis>)</db:title>
<db:para>Sleeps for <db:code role="parameter">ms</db:code> milliseconds without processing Qt events.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#wait-method">wait</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#waitForRendering-method">waitForRendering</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tryCompare-method">
<db:title>tryCompare(<db:emphasis>obj</db:emphasis>, <db:emphasis>property</db:emphasis>, <db:emphasis>expected</db:emphasis>, <db:emphasis>timeout</db:emphasis> = 5000, <db:emphasis>message</db:emphasis> = &quot;&quot;)</db:title>
<db:para>Fails the current test case if the specified <db:code role="parameter">property</db:code> on <db:code role="parameter">obj</db:code> is not the same as <db:code role="parameter">expected</db:code>, and displays the optional <db:code role="parameter">message</db:code>. The test will be retried multiple times until the <db:code role="parameter">timeout</db:code> (in milliseconds) is reached.</db:para>
<db:para>This function is intended for testing applications where a property changes value based on asynchronous events. Use <db:link xlink:href="qml-qttest-testcase.xml#compare-method">compare</db:link>() for testing synchronous property changes.</db:para>
<db:programlisting language="cpp">tryCompare(img, &quot;status&quot;, BorderImage.Ready)
compare(img.width, 120)
compare(img.height, 120)
compare(img.horizontalTileMode, BorderImage.Stretch)
compare(img.verticalTileMode, BorderImage.Stretch)
</db:programlisting>
<db:para><db:link xlink:href="qml-qttest-signalspy.xml#wait-method">SignalSpy::wait</db:link>() provides an alternative method to wait for a signal to be emitted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#compare-method">compare</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-signalspy.xml#wait-method">SignalSpy::wait</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tryVerify-method">
<db:title>[since 5.8] tryVerify(<db:emphasis>function</db:emphasis>, <db:emphasis>timeout</db:emphasis> = 5000, <db:emphasis>message</db:emphasis> = &quot;&quot;)</db:title>
<db:para>Fails the current test case if <db:code role="parameter">function</db:code> does not evaluate to true before the specified <db:code role="parameter">timeout</db:code> (in milliseconds) has elapsed. The function is evaluated multiple times until the timeout is reached. An optional <db:code role="parameter">message</db:code> is displayed upon failure.</db:para>
<db:para>This function is intended for testing applications where a condition changes based on asynchronous events. Use <db:link xlink:href="qml-qttest-testcase.xml#verify-method">verify</db:link>() for testing synchronous condition changes, and <db:link xlink:href="qml-qttest-testcase.xml#tryCompare-method">tryCompare</db:link>() for testing asynchronous property changes.</db:para>
<db:para>For example, in the code below, it's not possible to use <db:link xlink:href="qml-qttest-testcase.xml#tryCompare-method">tryCompare</db:link>(), because the currentItem property might be null for a short period of time:</db:para>
<db:programlisting language="cpp">tryCompare(listView.currentItem, &quot;text&quot;, &quot;Hello&quot;);
</db:programlisting>
<db:para>Instead, we can use tryVerify() to first check that currentItem isn't null, and then use a regular compare afterwards:</db:para>
<db:programlisting language="cpp">tryVerify(function(){ return listView.currentItem })
compare(listView.currentItem.text, &quot;Hello&quot;)
</db:programlisting>
<db:para>This method was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#verify-method">verify</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#compare-method">compare</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#tryCompare-method">tryCompare</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-signalspy.xml#wait-method">SignalSpy::wait</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="verify-method">
<db:title>verify(<db:emphasis>condition</db:emphasis>, <db:emphasis>message</db:emphasis> = &quot;&quot;)</db:title>
<db:para>Fails the current test case if <db:code role="parameter">condition</db:code> is false, and displays the optional <db:code role="parameter">message</db:code>. Similar to QVERIFY(condition) or QVERIFY2(condition, message) in C++.</db:para>
</db:section>
<db:section xml:id="wait-method">
<db:title>wait(<db:emphasis>ms</db:emphasis>)</db:title>
<db:para>Waits for <db:code role="parameter">ms</db:code> milliseconds while processing Qt events.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#sleep-method">sleep</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#waitForRendering-method">waitForRendering</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="waitForRendering-method">
<db:title>waitForRendering(<db:emphasis>item</db:emphasis>, <db:emphasis>timeout</db:emphasis> = 5000)</db:title>
<db:para>Waits for <db:code role="parameter">timeout</db:code> milliseconds or until the <db:code role="parameter">item</db:code> is rendered by the renderer. Returns true if item is rendered in <db:code role="parameter">timeout</db:code> milliseconds, otherwise returns false. The default <db:code role="parameter">timeout</db:code> value is 5000.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#sleep-method">sleep</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#wait-method">wait</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="warn-method">
<db:title>warn(<db:emphasis>message</db:emphasis>)</db:title>
<db:para>Prints <db:code role="parameter">message</db:code> as a warning message. Similar to QWARN(message) in C++.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#ignoreWarning-method">ignoreWarning</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
