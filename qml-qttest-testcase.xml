<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>TestCase QML Type</db:title>
<db:productname>QtQmlTest</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Test Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Represents a unit test case.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtTest</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Item</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>TestCase is part of <db:simplelist><db:member>qtquicktest</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:section xml:id="introduction-to-qml-test-cases">
<db:title>Introduction to QML Test Cases</db:title>
<db:para>Test cases are written as JavaScript functions within a <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> type:</db:para>
<db:programlisting language="cpp">import QtQuick 2.0
import QtTest 1.2

TestCase {
    name: &quot;MathTests&quot;

    function test_math() {
        compare(2 + 2, 4, &quot;2 + 2 = 4&quot;)
    }

    function test_fail() {
        compare(2 + 2, 5, &quot;2 + 2 = 5&quot;)
    }
}
</db:programlisting>
<db:para>Functions whose names start with &quot;test_&quot; are treated as test cases to be executed. The <db:link xlink:href="qml-qttest-testcase.xml#name-prop">name</db:link> property is used to prefix the functions in the output:</db:para>
<db:programlisting language="cpp">********* Start testing of MathTests *********
Config: Using QTest library 4.7.2, Qt 4.7.2
PASS   : MathTests::initTestCase()
FAIL!  : MathTests::test_fail() 2 + 2 = 5
   Actual (): 4
   Expected (): 5
   Loc: [/home/.../tst_math.qml(12)]
PASS   : MathTests::test_math()
PASS   : MathTests::cleanupTestCase()
Totals: 3 passed, 1 failed, 0 skipped
********* Finished testing of MathTests *********
</db:programlisting>
<db:para>Because of the way JavaScript properties work, the order in which the test functions are found is unpredictable. To assist with predictability, the test framework will sort the functions on ascending order of name. This can help when there are two tests that must be run in order.</db:para>
<db:para>Multiple <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> types can be supplied. The test program will exit once they have all completed. If a test case doesn't need to run (because a precondition has failed), then <db:link xlink:href="qml-qttest-testcase.xml#optional-prop">optional</db:link> can be set to true.</db:para>
</db:section>
<db:section xml:id="data-driven-tests">
<db:title>Data-driven Tests</db:title>
<db:para>Table data can be provided to a test using a function name that ends with &quot;_data&quot;. Alternatively, the <db:code>init_data()</db:code> function can be used to provide default test data for all test functions in a <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> type:</db:para>
<db:programlisting language="cpp">import QtQuick 2.0
import QtTest 1.2

TestCase {
    name: &quot;DataTests&quot;

    function init_data() {
      return [
           {tag:&quot;init_data_1&quot;, a:1, b:2, answer: 3},
           {tag:&quot;init_data_2&quot;, a:2, b:4, answer: 6}
      ];
    }

    function test_table_data() {
        return [
            {tag: &quot;2 + 2 = 4&quot;, a: 2, b: 2, answer: 4 },
            {tag: &quot;2 + 6 = 8&quot;, a: 2, b: 6, answer: 8 },
        ]
    }

    function test_table(data) {
        //data comes from test_table_data
        compare(data.a + data.b, data.answer)
    }

    function test__default_table(data) {
        //data comes from init_data
        compare(data.a + data.b, data.answer)
    }
}
</db:programlisting>
<db:para>The test framework will iterate over all of the rows in the table and pass each row to the test function. As shown, the columns can be extracted for use in the test. The <db:code>tag</db:code> column is special - it is printed by the test framework when a row fails, to help the reader identify which case failed amongst a set of otherwise passing tests.</db:para>
</db:section>
<db:section xml:id="benchmarks">
<db:title>Benchmarks</db:title>
<db:para>Functions whose names start with &quot;benchmark_&quot; will be run multiple times with the Qt benchmark framework, with an average timing value reported for the runs. This is equivalent to using the <db:code>QBENCHMARK</db:code> macro in the C++ version of QTestLib.</db:para>
<db:programlisting language="cpp">TestCase {
    id: top
    name: &quot;CreateBenchmark&quot;

    function benchmark_create_component() {
        var component = Qt.createComponent(&quot;item.qml&quot;)
        var obj = component.createObject(top)
        obj.destroy()
        component.destroy()
    }
}

RESULT : CreateBenchmark::benchmark_create_component:
     0.23 msecs per iteration (total: 60, iterations: 256)
PASS   : CreateBenchmark::benchmark_create_component()
</db:programlisting>
<db:para>To get the effect of the <db:code>QBENCHMARK_ONCE</db:code> macro, prefix the test function name with &quot;benchmark_once_&quot;.</db:para>
</db:section>
<db:section xml:id="simulating-keyboard-and-mouse-events">
<db:title>Simulating Keyboard and Mouse Events</db:title>
<db:para>The <db:link xlink:href="qml-qttest-testcase.xml#keyPress-method">keyPress</db:link>(), <db:link xlink:href="qml-qttest-testcase.xml#keyRelease-method">keyRelease</db:link>(), and <db:link xlink:href="qml-qttest-testcase.xml#keyClick-method">keyClick</db:link>() methods can be used to simulate keyboard events within unit tests. The events are delivered to the currently focused QML item. You can pass either a Qt.Key enum value or a latin1 char (string of length one)</db:para>
<db:programlisting language="cpp">Rectangle {
    width: 50; height: 50
    focus: true

    TestCase {
        name: &quot;KeyClick&quot;
        when: windowShown

        function test_key_click() {
            keyClick(Qt.Key_Left)
            keyClick(&quot;a&quot;)
            ...
        }
    }
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qttest-testcase.xml#mousePress-method">mousePress</db:link>(), <db:link xlink:href="qml-qttest-testcase.xml#mouseRelease-method">mouseRelease</db:link>(), <db:link xlink:href="qml-qttest-testcase.xml#mouseClick-method">mouseClick</db:link>(), <db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClickSequence-method">mouseDoubleClickSequence</db:link>() and <db:link xlink:href="qml-qttest-testcase.xml#mouseMove-method">mouseMove</db:link>() methods can be used to simulate mouse events in a similar fashion.</db:para>
<db:para>If your test creates other windows, it's possible that those windows become active, stealing the focus from the <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link>'s window. To ensure that the <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link>'s window is active, use the following code:</db:para>
<db:programlisting language="cpp">testCase.Window.window.requestActivate()
tryCompare(testCase.Window.window, &quot;active&quot;, true)
</db:programlisting>
<db:para><db:emphasis role="bold">Note:</db:emphasis> keyboard and mouse events can only be delivered once the main window has been shown. Attempts to deliver events before then will fail. Use the <db:link xlink:href="qml-qttest-testcase.xml#when-prop">when</db:link> and <db:link xlink:href="qml-qttest-testcase.xml#windowShown-prop">windowShown</db:link> properties to track when the main window has been shown.</db:para>
</db:section>
<db:section xml:id="managing-dynamically-created-test-objects">
<db:title>Managing Dynamically Created Test Objects</db:title>
<db:para>A typical pattern with QML tests is to <db:link xlink:href="qtqml-javascript-dynamicobjectcreation.xml">dynamically create</db:link> an item and then destroy it at the end of the test function:</db:para>
<db:programlisting language="cpp">TestCase {
    id: testCase
    name: &quot;MyTest&quot;
    when: windowShown

    function test_click() {
        var item = Qt.createQmlObject(&quot;import QtQuick 2.0; Item {}&quot;, testCase);
        verify(item);

        // Test item...

        item.destroy();
    }
}
</db:programlisting>
<db:para>The problem with this pattern is that any failures in the test function will cause the call to <db:code>item.destroy()</db:code> to be skipped, leaving the item hanging around in the scene until the test case has finished. This can result in interference with future tests; for example, by blocking input events or producing unrelated debug output that makes it difficult to follow the code's execution.</db:para>
<db:para>By calling <db:link xlink:href="qml-qttest-testcase.xml#createTemporaryQmlObject-method">createTemporaryQmlObject</db:link>() instead, the object is guaranteed to be destroyed at the end of the test function:</db:para>
<db:programlisting language="cpp">TestCase {
    id: testCase
    name: &quot;MyTest&quot;
    when: windowShown

    function test_click() {
        var item = createTemporaryQmlObject(&quot;import QtQuick 2.0; Item {}&quot;, testCase);
        verify(item);

        // Test item...

        // Don't need to worry about destroying &quot;item&quot; here.
    }
}
</db:programlisting>
<db:para>For objects that are created via the <db:link xlink:href="qml-qtqml-component.xml#createObject-method">createObject</db:link>() function of <db:link xlink:href="qml-qtqml-component.xml">Component</db:link>, the <db:link xlink:href="qml-qttest-testcase.xml#createTemporaryObject-method">createTemporaryObject</db:link>() function can be used.</db:para>
</db:section>
<db:section xml:id="separating-tests-from-application-logic">
<db:title>Separating tests from application logic</db:title>
<db:para>In most cases, you would want to separate your tests from the application logic by splitting them into different projects and linking them.</db:para>
<db:para>For example, you could have the following project structure:</db:para>
<db:programlisting language="cpp" role="bad">.
| — CMakeLists.txt
| — src
|  | — main.cpp
| — qml
|  | — main.qml
| — modules
|  | — MyModule
|     | — MyButton.qml
|     | — CMakeLists.txt
| — tests
   | — UnitQMLTests
      | — tst_testqml.qml
      | — main.cpp
      | — setup.cpp
      | — setup.h
</db:programlisting>
<db:para>Now, to test the <db:code>modules/MyModule/MyButton.qml</db:code>, create a library for <db:code>MyModule</db:code> in <db:code>modules/MyModule/CMakeLists.txt</db:code> and link it to your test project, <db:code>tests/UnitQMLTests/CMakeLists.txt</db:code>:</db:para>
</db:section>
<db:section xml:id="add-library">
<db:title>Add library</db:title>
<db:programlisting language="cpp">    ...
qt_add_library(${MyModule} STATIC)

qt6_add_qml_module(${MyModule}
    URI ${MyModule}
    VERSION 1.0
    QML_FILES ${QML_SOURCES}
    # SOURCES ${CPP_SOURCES} ${HPP_SOURCES}
)
    ...
</db:programlisting>
</db:section>
<db:section xml:id="link-against-library">
<db:title>Link against library</db:title>
<db:programlisting language="cpp">    ...
add_executable(TestQML main.cpp
               setup.cpp setup.h)

add_test(NAME TestQML COMMAND TestQML)

target_link_libraries(
    TestQML
    PRIVATE Qt6::QuickTest
    PRIVATE Qt6::Qml
    PRIVATE MyModule
    PRIVATE MyModuleplugin
)
    ...
</db:programlisting>
<db:para>Then, in your <db:code>tests/UnitQMLTests/tst_testqml.qml</db:code>, you can import your <db:code>modules/MyModule/MyButton.qml</db:code>:</db:para>
</db:section>
<db:section xml:id="import-qml">
<db:title>Import QML</db:title>
<db:programlisting language="qml">import QtQuick
import QtQuick.Controls

import QtTest
import MyModule

Item {
    width: 800; height: 600

    MyButton {
        id: myButton
        anchors.centerIn: parent
    }

    TestCase {
        name: &quot;MyButton&quot;;
        when: windowShown;

        function test_clickToExpand() {
            const widthBeforeClick = myButton.width;
            mouseClick(myButton);
            const widthAfterClick = myButton.width;
            verify(widthBeforeClick &amp;lt; widthAfterClick);
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="define-qml-button">
<db:title>Define QML button</db:title>
<db:programlisting language="qml">import QtQuick
import QtQuick.Controls

Button {
    width: 50; height: 50
    onClicked: { width = 100; }
}
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-signalspy.xml">SignalSpy</db:link></db:member>
<db:member><db:link xlink:href="qtquicktest-index.xml">Qt Quick Test</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="completed-prop">
<db:title>completed : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>completed</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property will be set to true once the test case has completed execution. Test cases are only executed once. The initial value is false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#running-prop">running</db:link></db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#when-prop">when</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name-prop">
<db:title>name : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>name</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines the name of the test case for result reporting. The default value is an empty string.</db:para>
<db:programlisting language="cpp">TestCase {
    name: &quot;ButtonTests&quot;
    ...
}
</db:programlisting>
</db:section>
<db:section xml:id="optional-prop">
<db:title>optional : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>optional</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Multiple <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> types can be supplied in a test application. The application will exit once they have all completed. If a test case does not need to run (because a precondition has failed), then this property can be set to true. The default value is false.</db:para>
<db:programlisting language="cpp">TestCase {
    when: false
    optional: true
    function test_not_run() {
        verify(false)
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#when-prop">when</db:link></db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#completed-prop">completed</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="running-prop">
<db:title>running : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>running</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property will be set to true while the test case is running. The initial value is false, and the value will become false again once the test case completes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#completed-prop">completed</db:link></db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#when-prop">when</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="when-prop">
<db:title>when : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>when</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property should be set to true when the application wants the test cases to run. The default value is true. In the following example, a test is run when the user presses the mouse button:</db:para>
<db:programlisting language="cpp">Rectangle {
    id: foo
    width: 640; height: 480
    color: &quot;cyan&quot;

    MouseArea {
        id: area
        anchors.fill: parent
    }

    property bool bar: true

    TestCase {
        name: &quot;ItemTests&quot;
        when: area.pressed
        id: test1

        function test_bar() {
            verify(bar)
        }
    }
}
</db:programlisting>
<db:para>The test application will exit once all <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> types have been triggered and have run. The <db:link xlink:href="qml-qttest-testcase.xml#optional-prop">optional</db:link> property can be used to exclude a <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#optional-prop">optional</db:link></db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#completed-prop">completed</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowShown-prop">
<db:title>windowShown : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>windowShown</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property will be set to true after the QML viewing window has been displayed. Normally test cases run as soon as the test application is loaded and before a window is displayed. If the test case involves visual types and behaviors, then it may need to be delayed until after the window is shown.</db:para>
<db:programlisting language="cpp">Button {
    id: button
    onClicked: text = &quot;Clicked&quot;
    TestCase {
        name: &quot;ClickTest&quot;
        when: windowShown
        function test_click() {
            button.clicked();
            compare(button.text, &quot;Clicked&quot;);
        }
    }
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="cleanup-method">
<db:title>cleanup()</db:title>
<db:para>This function is called after each test function that is executed in the <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> type. The default implementation does nothing. The application can provide its own implementation to perform cleanup after each test function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#init-method">init</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#cleanupTestCase-method">cleanupTestCase</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cleanupTestCase-method">
<db:title>cleanupTestCase()</db:title>
<db:para>This function is called after all other test functions in the <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> type have completed. The default implementation does nothing. The application can provide its own implementation to perform test case cleanup.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#initTestCase-method">initTestCase</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#cleanup-method">cleanup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compare-method">
<db:title>compare(<db:emphasis>actual</db:emphasis>, <db:emphasis>expected</db:emphasis>, <db:emphasis>message</db:emphasis> = &quot;&quot;)</db:title>
<db:para>Fails the current test case if <db:code role="parameter">actual</db:code> is not the same as <db:code role="parameter">expected</db:code>, and displays the optional <db:code role="parameter">message</db:code>. Similar to <db:code>QCOMPARE(actual, expected)</db:code> in C++.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#tryCompare-method">tryCompare</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#fuzzyCompare-method">fuzzyCompare</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createTemporaryObject-method">
<db:title>object createTemporaryObject(Component <db:emphasis>component</db:emphasis>, object <db:emphasis>parent</db:emphasis>, object <db:emphasis>properties</db:emphasis>)</db:title>
<db:para>This function dynamically creates a QML object from the given <db:code role="parameter">component</db:code> with the specified optional <db:code role="parameter">parent</db:code> and <db:code role="parameter">properties</db:code>. The returned object will be destroyed (if it was not already) after <db:link xlink:href="qml-qttest-testcase.xml#cleanup-method">cleanup</db:link>() has finished executing, meaning that objects created with this function are guaranteed to be destroyed after each test, regardless of whether or not the tests fail.</db:para>
<db:para>If there was an error while creating the object, <db:code>null</db:code> will be returned.</db:para>
<db:para>This function calls <db:link xlink:href="qml-qtqml-component.xml#createObject-method">component.createObject</db:link>() internally.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#managing-dynamically-created-test-objects">Managing Dynamically Created Test Objects</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createTemporaryQmlObject-method">
<db:title>object createTemporaryQmlObject(string <db:emphasis>qml</db:emphasis>, object <db:emphasis>parent</db:emphasis>, string <db:emphasis>filePath</db:emphasis>)</db:title>
<db:para>This function dynamically creates a QML object from the given <db:code role="parameter">qml</db:code> string with the specified <db:code role="parameter">parent</db:code>. The returned object will be destroyed (if it was not already) after <db:link xlink:href="qml-qttest-testcase.xml#cleanup-method">cleanup</db:link>() has finished executing, meaning that objects created with this function are guaranteed to be destroyed after each test, regardless of whether or not the tests fail.</db:para>
<db:para>If there was an error while creating the object, <db:code>null</db:code> will be returned.</db:para>
<db:para>If <db:code role="parameter">filePath</db:code> is specified, it will be used for error reporting for the created object.</db:para>
<db:para>This function calls <db:link xlink:href="qml-qtqml-qt.xml#createQmlObject-method">Qt.createQmlObject</db:link>() internally.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#managing-dynamically-created-test-objects">Managing Dynamically Created Test Objects</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="expectFail-method">
<db:title>expectFail(<db:emphasis>tag</db:emphasis>, <db:emphasis>message</db:emphasis>)</db:title>
<db:para>In a data-driven test, marks the row associated with <db:code role="parameter">tag</db:code> as expected to fail. When the fail occurs, display the <db:code role="parameter">message</db:code>, abort the test, and mark the test as passing. Similar to <db:code>QEXPECT_FAIL(tag, message, Abort)</db:code> in C++.</db:para>
<db:para>If the test is not data-driven, then <db:code role="parameter">tag</db:code> must be set to an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#expectFailContinue-method">expectFailContinue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="expectFailContinue-method">
<db:title>expectFailContinue(<db:emphasis>tag</db:emphasis>, <db:emphasis>message</db:emphasis>)</db:title>
<db:para>In a data-driven test, marks the row associated with <db:code role="parameter">tag</db:code> as expected to fail. When the fail occurs, display the <db:code role="parameter">message</db:code>, and then continue the test. Similar to <db:code>QEXPECT_FAIL(tag, message, Continue)</db:code> in C++.</db:para>
<db:para>If the test is not data-driven, then <db:code role="parameter">tag</db:code> must be set to an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#expectFail-method">expectFail</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fail-method">
<db:title>fail(<db:emphasis>message</db:emphasis> = &quot;&quot;)</db:title>
<db:para>Fails the current test case, with the optional <db:code role="parameter">message</db:code>. Similar to <db:code>QFAIL(message)</db:code> in C++.</db:para>
</db:section>
<db:section xml:id="failOnWarning-method">
<db:title>[since 6.3] failOnWarning(<db:emphasis>message</db:emphasis>)</db:title>
<db:para>Appends a test failure to the test log for each warning that matches <db:code role="parameter">message</db:code>. The test function will continue execution when a failure is added.</db:para>
<db:para><db:code role="parameter">message</db:code> can be either a string, or a regular expression providing a pattern of messages. In the latter case, for each warning encountered, the first pattern that matches will cause a failure, and the remaining patterns will be ignored.</db:para>
<db:para>All patterns are cleared at the end of each test function.</db:para>
<db:para>For example, the following snippet will fail a test if a warning with the text &quot;Something bad happened&quot; is produced:</db:para>
<db:programlisting language="qml">failOnWarning(&quot;Something bad happened&quot;)
</db:programlisting>
<db:para>The following snippet will fail a test if any warning matching the given pattern is encountered:</db:para>
<db:programlisting language="qml">failOnWarning(/[0-9]+ bad things happened/)
</db:programlisting>
<db:para>To fail every test that triggers a given warning, pass a suitable regular expression to this function in <db:link xlink:href="qml-qttest-testcase.xml#init-method">init</db:link>():</db:para>
<db:programlisting language="qml">function init() {
    failOnWarning(/.?/)
}
</db:programlisting>
<db:note>
<db:para>Despite being a JavaScript RegExp object, it will not be interpreted as such; instead, the pattern will be passed to <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link>.</db:para>
</db:note>
<db:note>
<db:para>ignoreMessage() takes precedence over this function, so any warnings that match a pattern given to both <db:code>ignoreMessage()</db:code> and <db:code>failOnWarning()</db:code> will be ignored.</db:para>
</db:note>
<db:para>This method was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#failOnWarning">QTest::failOnWarning</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#warn-method">warn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findChild-method">
<db:title>QtObject findChild(<db:emphasis>parent</db:emphasis>, <db:emphasis>objectName</db:emphasis>)</db:title>
<db:para>Returns the first child of <db:code role="parameter">parent</db:code> with <db:code role="parameter">objectName</db:code>, or <db:code>null</db:code> if no such item exists. Both visual and non-visual children are searched recursively, with visual children being searched first.</db:para>
<db:programlisting language="cpp">compare(findChild(item, &quot;childObject&quot;), expectedChildObject);
</db:programlisting>
</db:section>
<db:section xml:id="fuzzyCompare-method">
<db:title>fuzzyCompare(<db:emphasis>actual</db:emphasis>, <db:emphasis>expected</db:emphasis>, <db:emphasis>delta</db:emphasis>, <db:emphasis>message</db:emphasis> = &quot;&quot;)</db:title>
<db:para>Fails the current test case if the difference betwen <db:code role="parameter">actual</db:code> and <db:code role="parameter">expected</db:code> is greater than <db:code role="parameter">delta</db:code>, and displays the optional <db:code role="parameter">message</db:code>. Similar to <db:code>qFuzzyCompare(actual, expected)</db:code> in C++ but with a required <db:code role="parameter">delta</db:code> value.</db:para>
<db:para>This function can also be used for color comparisons if both the <db:code role="parameter">actual</db:code> and <db:code role="parameter">expected</db:code> values can be converted into color values. If any of the differences for RGBA channel values are greater than <db:code role="parameter">delta</db:code>, the test fails.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#tryCompare-method">tryCompare</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#compare-method">compare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="grabImage-method">
<db:title>object grabImage(<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Returns a snapshot image object of the given <db:code role="parameter">item</db:code>.</db:para>
<db:para>The returned image object has the following properties:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>width Returns the width of the underlying image (since 5.10)</db:para>
</db:listitem>
<db:listitem>
<db:para>height Returns the height of the underlying image (since 5.10)</db:para>
</db:listitem>
<db:listitem>
<db:para>size Returns the size of the underlying image (since 5.10)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Additionally, the returned image object has the following methods:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>red(x, y)</db:code> Returns the red channel value of the pixel at <db:emphasis>x</db:emphasis>, <db:emphasis>y</db:emphasis> position</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>green(x, y)</db:code> Returns the green channel value of the pixel at <db:emphasis>x</db:emphasis>, <db:emphasis>y</db:emphasis> position</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>blue(x, y)</db:code> Returns the blue channel value of the pixel at <db:emphasis>x</db:emphasis>, <db:emphasis>y</db:emphasis> position</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>alpha(x, y)</db:code> Returns the alpha channel value of the pixel at <db:emphasis>x</db:emphasis>, <db:emphasis>y</db:emphasis> position</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>pixel(x, y)</db:code> Returns the color value of the pixel at <db:emphasis>x</db:emphasis>, <db:emphasis>y</db:emphasis> position</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>equals(image)</db:code> Returns <db:code>true</db:code> if this image is identical to <db:emphasis>image</db:emphasis> - see <db:link xlink:href="qimage.xml#operator-eq-eq">QImage::operator==</db:link> (since 5.6)</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">var image = grabImage(rect);
compare(image.red(10, 10), 255);
compare(image.pixel(20, 20), Qt.rgba(255, 0, 0, 255));

rect.width += 10;
var newImage = grabImage(rect);
verify(!newImage.equals(image));
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para><db:code>save(path)</db:code> Saves the image to the given <db:emphasis>path</db:emphasis>. If the image cannot be saved, an exception will be thrown. (since 5.10)</db:para>
<db:para>This can be useful to perform postmortem analysis on failing tests, for example:</db:para>
<db:programlisting language="cpp">var image = grabImage(rect);
try {
    compare(image.width, 100);
} catch (ex) {
    image.save(&quot;debug.png&quot;);
    throw ex;
}
</db:programlisting>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="ignoreWarning-method">
<db:title>ignoreWarning(<db:emphasis>message</db:emphasis>)</db:title>
<db:para>Marks <db:code role="parameter">message</db:code> as an ignored warning message. When it occurs, the warning will not be printed and the test passes. If the message does not occur, then the test will fail. Similar to <db:code>QTest::ignoreMessage(QtWarningMsg, message)</db:code> in C++.</db:para>
<db:para>Since Qt 5.12, <db:code role="parameter">message</db:code> can be either a string, or a regular expression providing a pattern of messages to ignore.</db:para>
<db:para>For example, the following snippet will ignore a string warning message:</db:para>
<db:programlisting language="qml">ignoreWarning(&quot;Something sort of bad happened&quot;)
</db:programlisting>
<db:para>And the following snippet will ignore a regular expression matching a number of possible warning messages:</db:para>
<db:programlisting language="qml">ignoreWarning(new RegExp(&quot;[0-9]+ bad things happened&quot;))
</db:programlisting>
<db:note>
<db:para>Despite being a JavaScript RegExp object, it will not be interpreted as such; instead, the pattern will be passed to <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#warn-method">warn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="init-method">
<db:title>init()</db:title>
<db:para>This function is called before each test function that is executed in the <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> type. The default implementation does nothing. The application can provide its own implementation to perform initialization before each test function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#cleanup-method">cleanup</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#initTestCase-method">initTestCase</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initTestCase-method">
<db:title>initTestCase()</db:title>
<db:para>This function is called before any other test functions in the <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> type. The default implementation does nothing. The application can provide its own implementation to perform test case initialization.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#cleanupTestCase-method">cleanupTestCase</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#init-method">init</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isPolishScheduled-method">
<db:title>bool isPolishScheduled(object <db:emphasis>itemOrWindow</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">itemOrWindow</db:code> is an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>, this function returns <db:code>true</db:code> if <db:link xlink:href="qquickitem.xml#updatePolish">updatePolish</db:link>() has not been called on it since the last call to <db:link xlink:href="qquickitem.xml#polish">polish</db:link>(), otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Since Qt 6.5, if <db:code role="parameter">itemOrWindow</db:code> is a <db:link xlink:href="qml-qtquick-window.xml">Window</db:link>, this function returns <db:code>true</db:code> if <db:link xlink:href="qquickitem.xml#updatePolish">updatePolish</db:link>() has not been called on any item it manages since the last call to <db:link xlink:href="qquickitem.xml#polish">polish</db:link>() on those items, otherwise returns <db:code>false</db:code>.</db:para>
<db:para>When assigning values to properties in QML, any layouting the item must do as a result of the assignment might not take effect immediately, but can instead be postponed until the item is polished. For these cases, you can use this function to ensure that items have been polished before the execution of the test continues. For example:</db:para>
<db:programlisting language="cpp">verify(isPolishScheduled(item))
verify(waitForItemPolished(item))
</db:programlisting>
<db:para>Without the call to <db:code>isPolishScheduled()</db:code> above, the call to <db:code>waitForItemPolished()</db:code> might see that no polish was scheduled and therefore pass instantly, assuming that the item had already been polished. This function makes it obvious why an item wasn't polished and allows tests to fail early under such circumstances.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#waitForPolish-method">waitForPolish</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#polish">QQuickItem::polish</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#updatePolish">QQuickItem::updatePolish</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyClick-method">
<db:title>keyClick(<db:emphasis>key</db:emphasis>, <db:emphasis>modifiers</db:emphasis> = Qt.NoModifier, <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>Simulates clicking of <db:code role="parameter">key</db:code> with optional <db:code role="parameter">modifiers</db:code> on the currently focused item. If <db:code role="parameter">delay</db:code> is larger than 0, the test will wait for <db:code role="parameter">delay</db:code> milliseconds.</db:para>
<db:para>The event will be sent to the <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> window or, in case of multiple windows, to the current active window. See <db:link xlink:href="qguiapplication.xml#focusWindow">QGuiApplication::focusWindow</db:link>() for more details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#keyPress-method">keyPress</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#keyRelease-method">keyRelease</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyPress-method">
<db:title>keyPress(<db:emphasis>key</db:emphasis>, <db:emphasis>modifiers</db:emphasis> = Qt.NoModifier, <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>Simulates pressing a <db:code role="parameter">key</db:code> with optional <db:code role="parameter">modifiers</db:code> on the currently focused item. If <db:code role="parameter">delay</db:code> is larger than 0, the test will wait for <db:code role="parameter">delay</db:code> milliseconds.</db:para>
<db:para>The event will be sent to the <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> window or, in case of multiple windows, to the current active window. See <db:link xlink:href="qguiapplication.xml#focusWindow">QGuiApplication::focusWindow</db:link>() for more details.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> At some point you should release the key using <db:link xlink:href="qml-qttest-testcase.xml#keyRelease-method">keyRelease</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#keyRelease-method">keyRelease</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#keyClick-method">keyClick</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyRelease-method">
<db:title>keyRelease(<db:emphasis>key</db:emphasis>, <db:emphasis>modifiers</db:emphasis> = Qt.NoModifier, <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>Simulates releasing a <db:code role="parameter">key</db:code> with optional <db:code role="parameter">modifiers</db:code> on the currently focused item. If <db:code role="parameter">delay</db:code> is larger than 0, the test will wait for <db:code role="parameter">delay</db:code> milliseconds.</db:para>
<db:para>The event will be sent to the <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> window or, in case of multiple windows, to the current active window. See <db:link xlink:href="qguiapplication.xml#focusWindow">QGuiApplication::focusWindow</db:link>() for more details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#keyPress-method">keyPress</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#keyClick-method">keyClick</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keySequence-method">
<db:title>keySequence(<db:emphasis>keySequence</db:emphasis>)</db:title>
<db:para>Simulates typing of <db:code role="parameter">keySequence</db:code>. The key sequence can be set to one of the <db:link xlink:href="qkeysequence.xml#StandardKey-enum">standard keyboard shortcuts</db:link>, or it can be described with a string containing a sequence of up to four key presses.</db:para>
<db:para>Each event shall be sent to the <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> window or, in case of multiple windows, to the current active window. See <db:link xlink:href="qguiapplication.xml#focusWindow">QGuiApplication::focusWindow</db:link>() for more details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#keyPress-method">keyPress</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#keyRelease-method">keyRelease</db:link>()</db:member>
<db:member><db:link xlink:href="qkeysequence.xml#gnu-emacs-style-key-sequences">GNU Emacs Style Key Sequences</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-shortcut.xml#sequence-prop">Shortcut.sequence</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseClick-method">
<db:title>mouseClick(<db:emphasis>item</db:emphasis>, <db:emphasis>x</db:emphasis> = item.width / 2, <db:emphasis>y</db:emphasis> = item.height / 2, <db:emphasis>button</db:emphasis> = Qt.LeftButton, <db:emphasis>modifiers</db:emphasis> = Qt.NoModifier, <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>Simulates clicking a mouse <db:code role="parameter">button</db:code> with optional <db:code role="parameter">modifiers</db:code> on an <db:code role="parameter">item</db:code>. The position of the click is defined by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code>. If <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> are not defined the position will be the center of <db:code role="parameter">item</db:code>. If <db:code role="parameter">delay</db:code> is specified, the test will wait for the specified amount of milliseconds before pressing and before releasing the button.</db:para>
<db:para>The position given by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> is transformed from the co-ordinate system of <db:code role="parameter">item</db:code> into window co-ordinates and then delivered. If <db:code role="parameter">item</db:code> is obscured by another item, or a child of <db:code role="parameter">item</db:code> occupies that position, then the event will be delivered to the other item instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mousePress-method">mousePress</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseRelease-method">mouseRelease</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClickSequence-method">mouseDoubleClickSequence</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseMove-method">mouseMove</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDrag-method">mouseDrag</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseWheel-method">mouseWheel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseDoubleClickSequence-method">
<db:title>mouseDoubleClickSequence(<db:emphasis>item</db:emphasis>, <db:emphasis>x</db:emphasis> = item.width / 2, <db:emphasis>y</db:emphasis> = item.height / 2, <db:emphasis>button</db:emphasis> = Qt.LeftButton, <db:emphasis>modifiers</db:emphasis> = Qt.NoModifier, <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>Simulates the full sequence of events generated by double-clicking a mouse <db:code role="parameter">button</db:code> with optional <db:code role="parameter">modifiers</db:code> on an <db:code role="parameter">item</db:code>.</db:para>
<db:para>This method reproduces the sequence of mouse events generated when a user makes a double click: Press-Release-Press-DoubleClick-Release.</db:para>
<db:para>The position of the click is defined by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code>. If <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> are not defined the position will be the center of <db:code role="parameter">item</db:code>. If <db:code role="parameter">delay</db:code> is specified, the test will wait for the specified amount of milliseconds before pressing and before releasing the button.</db:para>
<db:para>The position given by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> is transformed from the co-ordinate system of <db:code role="parameter">item</db:code> into window co-ordinates and then delivered. If <db:code role="parameter">item</db:code> is obscured by another item, or a child of <db:code role="parameter">item</db:code> occupies that position, then the event will be delivered to the other item instead.</db:para>
<db:para>This QML method was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mousePress-method">mousePress</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseRelease-method">mouseRelease</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseClick-method">mouseClick</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseMove-method">mouseMove</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDrag-method">mouseDrag</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseWheel-method">mouseWheel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseDrag-method">
<db:title>mouseDrag(<db:emphasis>item</db:emphasis>, <db:emphasis>x</db:emphasis>, <db:emphasis>y</db:emphasis>, <db:emphasis>dx</db:emphasis>, <db:emphasis>dy</db:emphasis>, <db:emphasis>button</db:emphasis> = Qt.LeftButton, <db:emphasis>modifiers</db:emphasis> = Qt.NoModifier, <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>Simulates dragging the mouse on an <db:code role="parameter">item</db:code> with <db:code role="parameter">button</db:code> pressed and optional <db:code role="parameter">modifiers</db:code> The initial drag position is defined by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code>, and drag distance is defined by <db:code role="parameter">dx</db:code> and <db:code role="parameter">dy</db:code>. If <db:code role="parameter">delay</db:code> is specified, the test will wait for the specified amount of milliseconds before releasing the button.</db:para>
<db:para>The position given by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> is transformed from the co-ordinate system of <db:code role="parameter">item</db:code> into window co-ordinates and then delivered. If <db:code role="parameter">item</db:code> is obscured by another item, or a child of <db:code role="parameter">item</db:code> occupies that position, then the event will be delivered to the other item instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mousePress-method">mousePress</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseClick-method">mouseClick</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClickSequence-method">mouseDoubleClickSequence</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseMove-method">mouseMove</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseRelease-method">mouseRelease</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseWheel-method">mouseWheel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseMove-method">
<db:title>mouseMove(<db:emphasis>item</db:emphasis>, <db:emphasis>x</db:emphasis> = item.width / 2, <db:emphasis>y</db:emphasis> = item.height / 2, <db:emphasis>delay</db:emphasis> = -1, <db:emphasis>buttons</db:emphasis> = Qt.NoButton)</db:title>
<db:para>Moves the mouse pointer to the position given by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> within <db:code role="parameter">item</db:code>, while holding <db:code role="parameter">buttons</db:code> if given. Since Qt 6.0, if <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> are not defined, the position will be the center of <db:code role="parameter">item</db:code>.</db:para>
<db:para>If a <db:code role="parameter">delay</db:code> (in milliseconds) is given, the test will wait before moving the mouse pointer.</db:para>
<db:para>The position given by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> is transformed from the co-ordinate system of <db:code role="parameter">item</db:code> into window co-ordinates and then delivered. If <db:code role="parameter">item</db:code> is obscured by another item, or a child of <db:code role="parameter">item</db:code> occupies that position, then the event will be delivered to the other item instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mousePress-method">mousePress</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseRelease-method">mouseRelease</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseClick-method">mouseClick</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClickSequence-method">mouseDoubleClickSequence</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDrag-method">mouseDrag</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseWheel-method">mouseWheel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mousePress-method">
<db:title>mousePress(<db:emphasis>item</db:emphasis>, <db:emphasis>x</db:emphasis> = item.width / 2, <db:emphasis>y</db:emphasis> = item.height / 2, <db:emphasis>button</db:emphasis> = Qt.LeftButton, <db:emphasis>modifiers</db:emphasis> = Qt.NoModifier, <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>Simulates pressing a mouse <db:code role="parameter">button</db:code> with optional <db:code role="parameter">modifiers</db:code> on an <db:code role="parameter">item</db:code>. The position is defined by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code>. If <db:code role="parameter">x</db:code> or <db:code role="parameter">y</db:code> are not defined the position will be the center of <db:code role="parameter">item</db:code>. If <db:code role="parameter">delay</db:code> is specified, the test will wait for the specified amount of milliseconds before the press.</db:para>
<db:para>The position given by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> is transformed from the co-ordinate system of <db:code role="parameter">item</db:code> into window co-ordinates and then delivered. If <db:code role="parameter">item</db:code> is obscured by another item, or a child of <db:code role="parameter">item</db:code> occupies that position, then the event will be delivered to the other item instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseRelease-method">mouseRelease</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseClick-method">mouseClick</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClickSequence-method">mouseDoubleClickSequence</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseMove-method">mouseMove</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDrag-method">mouseDrag</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseWheel-method">mouseWheel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseRelease-method">
<db:title>mouseRelease(<db:emphasis>item</db:emphasis>, <db:emphasis>x</db:emphasis> = item.width / 2, <db:emphasis>y</db:emphasis> = item.height / 2, <db:emphasis>button</db:emphasis> = Qt.LeftButton, <db:emphasis>modifiers</db:emphasis> = Qt.NoModifier, <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>Simulates releasing a mouse <db:code role="parameter">button</db:code> with optional <db:code role="parameter">modifiers</db:code> on an <db:code role="parameter">item</db:code>. The position of the release is defined by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code>. If <db:code role="parameter">x</db:code> or <db:code role="parameter">y</db:code> are not defined the position will be the center of <db:code role="parameter">item</db:code>. If <db:code role="parameter">delay</db:code> is specified, the test will wait for the specified amount of milliseconds before releasing the button.</db:para>
<db:para>The position given by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> is transformed from the co-ordinate system of <db:code role="parameter">item</db:code> into window co-ordinates and then delivered. If <db:code role="parameter">item</db:code> is obscured by another item, or a child of <db:code role="parameter">item</db:code> occupies that position, then the event will be delivered to the other item instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mousePress-method">mousePress</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseClick-method">mouseClick</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClickSequence-method">mouseDoubleClickSequence</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseMove-method">mouseMove</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDrag-method">mouseDrag</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseWheel-method">mouseWheel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseWheel-method">
<db:title>mouseWheel(<db:emphasis>item</db:emphasis>, <db:emphasis>x</db:emphasis>, <db:emphasis>y</db:emphasis>, <db:emphasis>xDelta</db:emphasis>, <db:emphasis>yDelta</db:emphasis>, <db:emphasis>button</db:emphasis> = Qt.LeftButton, <db:emphasis>modifiers</db:emphasis> = Qt.NoModifier, <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>Simulates rotating the mouse wheel on an <db:code role="parameter">item</db:code> with <db:code role="parameter">button</db:code> pressed and optional <db:code role="parameter">modifiers</db:code>. The position of the wheel event is defined by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code>. If <db:code role="parameter">delay</db:code> is specified, the test will wait for the specified amount of milliseconds before releasing the button.</db:para>
<db:para>The position given by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> is transformed from the co-ordinate system of <db:code role="parameter">item</db:code> into window co-ordinates and then delivered. If <db:code role="parameter">item</db:code> is obscured by another item, or a child of <db:code role="parameter">item</db:code> occupies that position, then the event will be delivered to the other item instead.</db:para>
<db:para>The <db:code role="parameter">xDelta</db:code> and <db:code role="parameter">yDelta</db:code> contain the wheel rotation distance in eighths of a degree. see <db:link xlink:href="qwheelevent.xml#angleDelta">QWheelEvent::angleDelta</db:link>() for more details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mousePress-method">mousePress</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseClick-method">mouseClick</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDoubleClickSequence-method">mouseDoubleClickSequence</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseMove-method">mouseMove</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseRelease-method">mouseRelease</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#mouseDrag-method">mouseDrag</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#angleDelta">QWheelEvent::angleDelta</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="skip-method">
<db:title>skip(<db:emphasis>message</db:emphasis> = &quot;&quot;)</db:title>
<db:para>Skips the current test case and prints the optional <db:code role="parameter">message</db:code>. If this is a data-driven test, then only the current row is skipped. Similar to <db:code>QSKIP(message)</db:code> in C++.</db:para>
</db:section>
<db:section xml:id="sleep-method">
<db:title>sleep(<db:emphasis>ms</db:emphasis>)</db:title>
<db:para>Sleeps for <db:code role="parameter">ms</db:code> milliseconds without processing Qt events.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#wait-method">wait</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#waitForRendering-method">waitForRendering</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="touchEvent-method">
<db:title>TouchEventSequence touchEvent(object <db:emphasis>item</db:emphasis>)</db:title>
<db:para>Begins a sequence of touch events through a simulated touchscreen (<db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link>). Events are delivered to the window containing <db:code role="parameter">item</db:code>.</db:para>
<db:para>The returned object is used to enumerate events to be delivered through a single <db:link xlink:href="qtouchevent.xml">QTouchEvent</db:link>. Touches are delivered to the window containing the <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> unless otherwise specified.</db:para>
<db:programlisting language="cpp">Rectangle {
    width: 640; height: 480

    MultiPointTouchArea {
        id: area
        anchors.fill: parent

        property bool touched: false

        onPressed: touched = true
    }

    TestCase {
        name: &quot;ItemTests&quot;
        when: windowShown
        id: test1

        function test_touch() {
            var touch = touchEvent(area);
            touch.press(0, area, 10, 10);
            touch.commit();
            verify(area.touched);
        }
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-toucheventsequence.xml#press-method">TouchEventSequence::press</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-toucheventsequence.xml#move-method">TouchEventSequence::move</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-toucheventsequence.xml#release-method">TouchEventSequence::release</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-toucheventsequence.xml#stationary-method">TouchEventSequence::stationary</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-toucheventsequence.xml#commit-method">TouchEventSequence::commit</db:link>()</db:member>
<db:member><db:link xlink:href="qinputdevice.xml#DeviceType-enum">QInputDevice::DeviceType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tryCompare-method">
<db:title>tryCompare(<db:emphasis>obj</db:emphasis>, <db:emphasis>property</db:emphasis>, <db:emphasis>expected</db:emphasis>, <db:emphasis>timeout</db:emphasis> = 5000, <db:emphasis>message</db:emphasis> = &quot;&quot;)</db:title>
<db:para>Fails the current test case if the specified <db:code role="parameter">property</db:code> on <db:code role="parameter">obj</db:code> is not the same as <db:code role="parameter">expected</db:code>, and displays the optional <db:code role="parameter">message</db:code>. The test will be retried multiple times until the <db:code role="parameter">timeout</db:code> (in milliseconds) is reached.</db:para>
<db:para>This function is intended for testing applications where a property changes value based on asynchronous events. Use <db:link xlink:href="qml-qttest-testcase.xml#compare-method">compare</db:link>() for testing synchronous property changes.</db:para>
<db:programlisting language="cpp">tryCompare(img, &quot;status&quot;, BorderImage.Ready)
compare(img.width, 120)
compare(img.height, 120)
compare(img.horizontalTileMode, BorderImage.Stretch)
compare(img.verticalTileMode, BorderImage.Stretch)
</db:programlisting>
<db:para><db:link xlink:href="qml-qttest-signalspy.xml#wait-method">SignalSpy::wait</db:link>() provides an alternative method to wait for a signal to be emitted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#compare-method">compare</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-signalspy.xml#wait-method">SignalSpy::wait</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tryVerify-method">
<db:title>tryVerify(<db:emphasis>function</db:emphasis>, <db:emphasis>timeout</db:emphasis> = 5000, <db:emphasis>message</db:emphasis> = &quot;&quot;)</db:title>
<db:para>Fails the current test case if <db:code role="parameter">function</db:code> does not evaluate to <db:code>true</db:code> before the specified <db:code role="parameter">timeout</db:code> (in milliseconds) has elapsed. The function is evaluated multiple times until the timeout is reached. An optional <db:code role="parameter">message</db:code> is displayed upon failure.</db:para>
<db:para>This function is intended for testing applications where a condition changes based on asynchronous events. Use <db:link xlink:href="qml-qttest-testcase.xml#verify-method">verify</db:link>() for testing synchronous condition changes, and <db:link xlink:href="qml-qttest-testcase.xml#tryCompare-method">tryCompare</db:link>() for testing asynchronous property changes.</db:para>
<db:para>For example, in the code below, it's not possible to use <db:link xlink:href="qml-qttest-testcase.xml#tryCompare-method">tryCompare</db:link>(), because the <db:code>currentItem</db:code> property might be <db:code>null</db:code> for a short period of time:</db:para>
<db:programlisting language="cpp">tryCompare(listView.currentItem, &quot;text&quot;, &quot;Hello&quot;);
</db:programlisting>
<db:para>Instead, we can use tryVerify() to first check that <db:code>currentItem</db:code> isn't <db:code>null</db:code>, and then use a regular compare afterwards:</db:para>
<db:programlisting language="cpp">tryVerify(function(){ return listView.currentItem })
compare(listView.currentItem.text, &quot;Hello&quot;)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#verify-method">verify</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#compare-method">compare</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#tryCompare-method">tryCompare</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-signalspy.xml#wait-method">SignalSpy::wait</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="verify-method">
<db:title>verify(<db:emphasis>condition</db:emphasis>, <db:emphasis>message</db:emphasis> = &quot;&quot;)</db:title>
<db:para>Fails the current test case if <db:code role="parameter">condition</db:code> is false, and displays the optional <db:code role="parameter">message</db:code>. Similar to <db:code>QVERIFY(condition)</db:code> or <db:code>QVERIFY2(condition, message)</db:code> in C++.</db:para>
</db:section>
<db:section xml:id="wait-method">
<db:title>wait(<db:emphasis>ms</db:emphasis>)</db:title>
<db:para>Waits for <db:code role="parameter">ms</db:code> milliseconds while processing Qt events.</db:para>
<db:note>
<db:para>This methods uses a precise timer to do the actual waiting. The event you are waiting for may not. In particular, any animations as well as the <db:link xlink:href="qml-qtqml-timer.xml">Timer</db:link> QML type can use either precise or coarse timers, depending on various factors. For a coarse timer you have to expect a drift of around 5% in relation to the precise timer used by TestCase::wait(). Qt cannot give hard guarantees on the drift, though, because the operating system usually doesn't offer hard guarantees on timers.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#sleep-method">sleep</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#waitForRendering-method">waitForRendering</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#TimerType-enum">Qt::TimerType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="waitForPolish-method">
<db:title>[since 6.5] bool waitForPolish(object <db:emphasis>windowOrItem</db:emphasis>, int <db:emphasis>timeout</db:emphasis> = 5000)</db:title>
<db:para>If <db:code role="parameter">windowOrItem</db:code> is an Item, this functions waits for <db:code role="parameter">timeout</db:code> milliseconds or until <db:code>isPolishScheduled(windowOrItem)</db:code> returns <db:code>false</db:code>. Returns <db:code>true</db:code> if <db:code>isPolishScheduled(windowOrItem)</db:code> returns <db:code>false</db:code> within <db:code role="parameter">timeout</db:code> milliseconds, otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code>windowOrItem</db:code> is a Window, this functions waits for <db:code>timeout</db:code> milliseconds or until <db:code>isPolishScheduled()</db:code> returns <db:code>false</db:code> for all items managed by the window. Returns <db:code>true</db:code> if <db:code>isPolishScheduled()</db:code> returns <db:code>false</db:code> for all items within <db:code role="parameter">timeout</db:code> milliseconds, otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This method was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#isPolishScheduled-method">isPolishScheduled</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#polish">QQuickItem::polish</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#updatePolish">QQuickItem::updatePolish</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="waitForRendering-method">
<db:title>waitForRendering(<db:emphasis>item</db:emphasis>, <db:emphasis>timeout</db:emphasis> = 5000)</db:title>
<db:para>Waits for <db:code role="parameter">timeout</db:code> milliseconds or until the <db:code role="parameter">item</db:code> is rendered by the renderer. Returns true if <db:code>item</db:code> is rendered in <db:code role="parameter">timeout</db:code> milliseconds, otherwise returns false. The default <db:code role="parameter">timeout</db:code> value is 5000.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#sleep-method">sleep</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttest-testcase.xml#wait-method">wait</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="warn-method">
<db:title>warn(<db:emphasis>message</db:emphasis>)</db:title>
<db:para>Prints <db:code role="parameter">message</db:code> as a warning message. Similar to <db:code>qWarning(message)</db:code> in C++.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#ignoreWarning-method">ignoreWarning</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for TestCase</db:title>
<db:para><db:emphasis role="bold">The following members of QML type <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-method-documentation">
<db:title>Obsolete Method Documentation</db:title>
<db:section xml:id="waitForItemPolished-method">
<db:title>bool waitForItemPolished(object <db:emphasis>item</db:emphasis>, int <db:emphasis>timeout</db:emphasis> = 5000)</db:title>
<db:para>This method is deprecated since 6.5. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qml-qttest-testcase.xml#waitForPolish-method">waitForPolish</db:link>() instead.</db:para>
<db:para>Waits for <db:code role="parameter">timeout</db:code> milliseconds or until <db:link xlink:href="qquickitem.xml#updatePolish">updatePolish</db:link>() has been called on <db:code role="parameter">item</db:code>.</db:para>
<db:para>Returns <db:code>true</db:code> if <db:code>updatePolish()</db:code> was called on <db:code role="parameter">item</db:code> within <db:code role="parameter">timeout</db:code> milliseconds, otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#isPolishScheduled-method">isPolishScheduled</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#polish">QQuickItem::polish</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#updatePolish">QQuickItem::updatePolish</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
