<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ScatterChart Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to create a simple scatter chart.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Charts module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;chartview.h&quot;
#include &amp;lt;QtCharts/QScatterSeries&amp;gt;
#include &amp;lt;QtCharts/QLegendMarker&amp;gt;
#include &amp;lt;QtGui/QImage&amp;gt;
#include &amp;lt;QtGui/QPainter&amp;gt;
#include &amp;lt;QtCore/QtMath&amp;gt;

ChartView::ChartView(QWidget *parent) :
    QChartView(new QChart(), parent)
{
    QScatterSeries *series0 = new QScatterSeries();
    series0-&amp;gt;setName(&quot;scatter1&quot;);
    series0-&amp;gt;setMarkerShape(QScatterSeries::MarkerShapeCircle);
    series0-&amp;gt;setMarkerSize(15.0);

    QScatterSeries *series1 = new QScatterSeries();
    series1-&amp;gt;setName(&quot;scatter2&quot;);
    series1-&amp;gt;setMarkerShape(QScatterSeries::MarkerShapeRectangle);
    series1-&amp;gt;setMarkerSize(20.0);

    QScatterSeries *series2 = new QScatterSeries();
    series2-&amp;gt;setName(&quot;scatter3&quot;);
    series2-&amp;gt;setMarkerShape(QScatterSeries::MarkerShapeRectangle);
    series2-&amp;gt;setMarkerSize(30.0);

    series0-&amp;gt;append(0, 6);
    series0-&amp;gt;append(2, 4);
    series0-&amp;gt;append(3, 8);
    series0-&amp;gt;append(7, 4);
    series0-&amp;gt;append(10, 5);

    *series1 &amp;lt;&amp;lt; QPointF(1, 1) &amp;lt;&amp;lt; QPointF(3, 3) &amp;lt;&amp;lt; QPointF(7, 6) &amp;lt;&amp;lt; QPointF(8, 3) &amp;lt;&amp;lt; QPointF(10, 2);
    *series2 &amp;lt;&amp;lt; QPointF(1, 5) &amp;lt;&amp;lt; QPointF(4, 6) &amp;lt;&amp;lt; QPointF(6, 3) &amp;lt;&amp;lt; QPointF(9, 5);

    QPainterPath starPath;
    starPath.moveTo(28, 15);
    for (int i = 1; i &amp;lt; 5; ++i) {
        starPath.lineTo(14 + 14 * qCos(0.8 * i * M_PI),
                        15 + 14 * qSin(0.8 * i * M_PI));
    }
    starPath.closeSubpath();

    QImage star(30, 30, QImage::Format_ARGB32);
    star.fill(Qt::transparent);

    QPainter painter(&amp;amp;star);
    painter.setRenderHint(QPainter::Antialiasing);
    painter.setPen(QRgb(0xf6a625));
    painter.setBrush(painter.pen().color());
    painter.drawPath(starPath);

    series2-&amp;gt;setBrush(star);
    series2-&amp;gt;setPen(QColor(Qt::transparent));

    setRenderHint(QPainter::Antialiasing);
    chart()-&amp;gt;addSeries(series0);
    chart()-&amp;gt;addSeries(series1);
    chart()-&amp;gt;addSeries(series2);

    chart()-&amp;gt;setTitle(&quot;Simple scatterchart example&quot;);
    chart()-&amp;gt;createDefaultAxes();
    chart()-&amp;gt;setDropShadowEnabled(false);

    chart()-&amp;gt;legend()-&amp;gt;setMarkerShape(QLegend::MarkerShapeFromSeries);
}

</db:programlisting>
</db:article>
