<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D: Audio Visualizer Example</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates combining Qt 3D rendering and Qt Quick 2 elements.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/audio-visualizer-qml-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Audio</db:emphasis> Visualizer demonstrates how to implement an application that combines the use of Qt 3D rendering with Qt Quick 2D elements. The example uses media player to play music and it visualizes the magnitude of the music as animated bars.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="qt-quick-2d-implementation">
<db:title>Qt Quick 2D Implementation</db:title>
<db:para>The Qt Quick Implementation in <db:code>audio-visualizer-qml/main.qml</db:code> of the example uses <db:code>MediaPlayer</db:code> to play audio content.</db:para>
<db:programlisting language="qml">MediaPlayer {
    id: mediaPlayer
    autoPlay: true
    volume: 0.5
    source: &quot;qrc:/music/tiltshifted_lost_neon_sun.mp3&quot;
</db:programlisting>
<db:para>The player is controlled with the <db:code>playButton</db:code> and c{stopButton}. Based on the clicked buttons the <db:code>state</db:code> of the <db:code>mainview</db:code> changes.</db:para>
<db:para>The 3D content is rendered using the <db:code>Scene3D</db:code> type. The state of the Audio Visualizer is maintained in the <db:code>mainview</db:code>. It's passed on to the <db:code>visualizer</db:code> as it's needed for the bar animations.</db:para>
<db:programlisting language="qml">Scene3D {
    anchors.fill: parent

    Visualizer {
        id: visualizer
        animationState: mainview.state
        numberOfBars: 120
        barRotationTimeMs: 8160 // 68 ms per bar
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="qt-3d-implementation">
<db:title>Qt 3D Implementation</db:title>
<db:para>The 3D elements of the example are created in <db:code>audio-visualizer-qml/Visualizer.qml</db:code>. The camera is set to a fixed position to show the visualized bars from a correct angle.</db:para>
<db:programlisting language="qml">Camera {
    id: camera
    projectionType: CameraLens.PerspectiveProjection
    fieldOfView: 45
    aspectRatio: 1820 / 1080
    nearPlane: 0.1
    farPlane: 1000.0
    position: Qt.vector3d(0.014, 0.956, 2.178)
    upVector: Qt.vector3d(0.0, 1.0, 0.0)
    viewCenter: Qt.vector3d(0.0, 0.7, 0.0)
}
</db:programlisting>
<db:para>A <db:code>NodeInstantiator</db:code> is used to create the bars that visualize the magnitude of the music.</db:para>
<db:programlisting language="qml">// Bars
CuboidMesh {
    id: barMesh
    xExtent: 0.1
    yExtent: 0.1
    zExtent: 0.1
}

NodeInstantiator {
    id: collection
    property int maxCount: parent.numberOfBars
    model: maxCount

    delegate: BarEntity {
        id: cubicEntity
        entityMesh: barMesh
        rotationTimeMs: sceneRoot.barRotationTimeMs
        entityIndex: index
        entityCount: sceneRoot.numberOfBars
        entityAnimationsState: animationState
        magnitude: 0
    }
}
</db:programlisting>
<db:para>The <db:code>visualizer</db:code> also contains an <db:code>Entity</db:code> to show the progress. This element has a curve shaped mesh and it's rotated on a level to show the progress based on the duration of the played track.</db:para>
<db:programlisting language="qml">// Progress
Mesh {
    id: progressMesh
    source: &quot;qrc:/meshes/progressbar.obj&quot;
}

Transform {
    id: progressTransform
    property real defaultStartAngle: -90
    property real progressAngle: defaultStartAngle
    rotationY: progressAngle
}

Entity {
    property Material progressMaterial: PhongMaterial {
        ambient: &quot;#80C342&quot;
        diffuse: &quot;black&quot;
    }

    components: [progressMesh, progressMaterial, progressTransform]
}
</db:programlisting>
<db:para>In <db:code>audio-visualizer-qml/BarEntity.qml</db:code> there are animations for rotating the bars and changing the bar color. The bars are rotated on a level following a ring form. At the same time the color of the bars is animated.</db:para>
<db:programlisting language="qml">QQ2.NumberAnimation {
    id: angleAnimation
    target: angleTransform
    property: &quot;barAngle&quot;
    duration: rotationTimeMs
    loops: QQ2.Animation.Infinite
    running: true
    from: startAngle
    to: 360 + startAngle
}
QQ2.SequentialAnimation on barColor {
    id: barColorAnimations
    running: false

    QQ2.ColorAnimation {
        from: lowColor
        to: highColor
        duration: animationDuration
    }

    QQ2.PauseAnimation {
        duration: animationDuration
    }

    QQ2.ColorAnimation {
        from: highColor
        to: lowColor
        duration: animationDuration
    }
}
</db:programlisting>
<db:para>The magnitude of each bar is read from a separate .raw file that is based on the track being played. As the bars rotate around the ring the height is scaled to highlight currently played position. After a full round of rotation, a new value is fetched for the bar.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qt3d.git/tree/examples/qt3d/audio-visualizer-qml?h=6.1">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
