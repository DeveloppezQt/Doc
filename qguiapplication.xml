<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGuiApplication Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> class manages the GUI application's control flow and main settings.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGuiApplication</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qcoreapplication.xml" xlink:role="class">QCoreApplication</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qapplication.xml" xlink:role="class">QApplication</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> contains the main event loop, where all events from the window system and other sources are processed and dispatched. It also handles the application's initialization and finalization, and provides session management. In addition, <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> handles most of the system-wide and application-wide settings.</db:para>
<db:para>For any GUI application using Qt, there is precisely <db:emphasis role="bold">one</db:emphasis> <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> object no matter whether the application has 0, 1, 2 or more windows at any given time. For non-GUI Qt applications, use <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> instead, as it does not depend on the Qt GUI module. For <db:link xlink:href="qwidget.xml">QWidget</db:link> based Qt applications, use <db:link xlink:href="qapplication.xml">QApplication</db:link> instead, as it provides some functionality needed for creating <db:link xlink:href="qwidget.xml">QWidget</db:link> instances.</db:para>
<db:para>The <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> object is accessible through the <db:link xlink:href="qcoreapplication.xml#instance">instance</db:link>() function, which returns a pointer equivalent to the global <db:link xlink:href="qapplication.xml#qApp">qApp</db:link> pointer.</db:para>
<db:para><db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link>'s main areas of responsibility are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>It initializes the application with the user's desktop settings, such as <db:link xlink:href="qguiapplication.xml#palette">palette</db:link>(), <db:link xlink:href="qguiapplication.xml#font">font</db:link>() and <db:link xlink:href="qguiapplication.xml#styleHints">styleHints</db:link>(). It keeps track of these properties in case the user changes the desktop globally, for example, through some kind of control panel.</db:para>
</db:listitem>
<db:listitem>
<db:para>It performs event handling, meaning that it receives events from the underlying window system and dispatches them to the relevant widgets. You can send your own events to windows by using <db:link xlink:href="qcoreapplication.xml#sendEvent">sendEvent</db:link>() and <db:link xlink:href="qcoreapplication.xml#postEvent">postEvent</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>It parses common command line arguments and sets its internal state accordingly. See the <db:link xlink:href="qguiapplication.xml#QGuiApplication">constructor documentation</db:link> below for more details.</db:para>
</db:listitem>
<db:listitem>
<db:para>It provides localization of strings that are visible to the user via <db:link xlink:href="qcoreapplication.xml#translate">translate</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>It provides some magical objects like the <db:link xlink:href="qguiapplication.xml#clipboard">clipboard</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>It knows about the application's windows. You can ask which window is at a certain position using <db:link xlink:href="qguiapplication.xml#topLevelAt">topLevelAt</db:link>(), get a list of <db:link xlink:href="qguiapplication.xml#topLevelWindows">topLevelWindows</db:link>(), etc.</db:para>
</db:listitem>
<db:listitem>
<db:para>It manages the application's mouse cursor handling, see <db:link xlink:href="qguiapplication.xml#setOverrideCursor">setOverrideCursor</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para>It provides support for sophisticated <db:link xlink:href="session.xml">session management</db:link>. This makes it possible for applications to terminate gracefully when the user logs out, to cancel a shutdown process if termination isn't possible and even to preserve the entire application's state for a future session. See <db:link xlink:href="qguiapplication.xml#isSessionRestored">isSessionRestored</db:link>(), <db:link xlink:href="qguiapplication.xml#sessionId">sessionId</db:link>() and <db:link xlink:href="qguiapplication.xml#commitDataRequest">commitDataRequest</db:link>() and <db:link xlink:href="qguiapplication.xml#saveStateRequest">saveStateRequest</db:link>() for details.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Since the <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> object does so much initialization, it <db:emphasis>must</db:emphasis> be created before any other objects related to the user interface are created. <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> also deals with common command line arguments. Hence, it is usually a good idea to create it <db:emphasis>before</db:emphasis> any interpretation or modification of <db:code>argv</db:code> is done in the application itself.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th colspan="2">
<db:para>Groups of functions</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>System settings</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qguiapplication.xml#desktopSettingsAware">desktopSettingsAware</db:link>(), <db:link xlink:href="qguiapplication.xml#setDesktopSettingsAware">setDesktopSettingsAware</db:link>(), <db:link xlink:href="qguiapplication.xml#styleHints">styleHints</db:link>(), <db:link xlink:href="qguiapplication.xml#palette">palette</db:link>(), <db:link xlink:href="qguiapplication.xml#setPalette">setPalette</db:link>(), <db:link xlink:href="qguiapplication.xml#font">font</db:link>(), <db:link xlink:href="qguiapplication.xml#setFont">setFont</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Event handling</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qguiapplication.xml#exec">exec</db:link>(), <db:link xlink:href="qcoreapplication.xml#processEvents">processEvents</db:link>(), <db:link xlink:href="qcoreapplication.xml#exit">exit</db:link>(), <db:link xlink:href="qcoreapplication.xml#quit">quit</db:link>(). <db:link xlink:href="qcoreapplication.xml#sendEvent">sendEvent</db:link>(), <db:link xlink:href="qcoreapplication.xml#postEvent">postEvent</db:link>(), <db:link xlink:href="qcoreapplication.xml#sendPostedEvents">sendPostedEvents</db:link>(), <db:link xlink:href="qcoreapplication.xml#removePostedEvents">removePostedEvents</db:link>(), <db:link xlink:href="qguiapplication.xml#notify">notify</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Windows</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qguiapplication.xml#allWindows">allWindows</db:link>(), <db:link xlink:href="qguiapplication.xml#topLevelWindows">topLevelWindows</db:link>(), <db:link xlink:href="qguiapplication.xml#focusWindow">focusWindow</db:link>(), <db:link xlink:href="qguiapplication.xml#clipboard">clipboard</db:link>(), <db:link xlink:href="qguiapplication.xml#topLevelAt">topLevelAt</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Advanced cursor handling</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qguiapplication.xml#overrideCursor">overrideCursor</db:link>(), <db:link xlink:href="qguiapplication.xml#setOverrideCursor">setOverrideCursor</db:link>(), <db:link xlink:href="qguiapplication.xml#restoreOverrideCursor">restoreOverrideCursor</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Session management</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qguiapplication.xml#isSessionRestored">isSessionRestored</db:link>(), <db:link xlink:href="qguiapplication.xml#sessionId">sessionId</db:link>(), <db:link xlink:href="qguiapplication.xml#commitDataRequest">commitDataRequest</db:link>(), <db:link xlink:href="qguiapplication.xml#saveStateRequest">saveStateRequest</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Miscellaneous</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qcoreapplication.xml#startingUp">startingUp</db:link>(), <db:link xlink:href="qcoreapplication.xml#closingDown">closingDown</db:link>().</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link></db:member>
<db:member><db:link xlink:href="qabstracteventdispatcher.xml">QAbstractEventDispatcher</db:link></db:member>
<db:member><db:link xlink:href="qeventloop.xml">QEventLoop</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="applicationDisplayName-prop">
<db:title>[since 5.0] applicationDisplayName : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>applicationDisplayName</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">applicationDisplayName</db:synopsisinfo>
<db:synopsisinfo role="setter">setApplicationDisplayName</db:synopsisinfo>
<db:synopsisinfo role="notifier">applicationDisplayNameChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the user-visible name of this application</db:para>
<db:para>This name is shown to the user, for instance in window titles. It can be translated, if necessary.</db:para>
<db:para>If not set, the application display name defaults to the application name.</db:para>
<db:para>This property was introduced in Qt 5.0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">applicationDisplayName</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setApplicationDisplayName</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>name</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">applicationDisplayNameChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#applicationName-prop">applicationName</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="desktopFileName-prop">
<db:title>[since 5.7] desktopFileName : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>desktopFileName</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">desktopFileName</db:synopsisinfo>
<db:synopsisinfo role="setter">setDesktopFileName</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the base name of the desktop entry for this application</db:para>
<db:para>This is the file name, without the full path, of the desktop entry that represents this application according to the freedesktop desktop entry specification.</db:para>
<db:para>This property gives a precise indication of what desktop entry represents the application and it is needed by the windowing system to retrieve such information without resorting to imprecise heuristics.</db:para>
<db:para>The latest version of the freedesktop desktop entry specification can be obtained <db:link xlink:href="http://standards.freedesktop.org/desktop-entry-spec/latest/">here</db:link>.</db:para>
<db:para>This property was introduced in Qt 5.7.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">desktopFileName</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDesktopFileName</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>name</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="layoutDirection-prop">
<db:title>layoutDirection : Qt::LayoutDirection</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::LayoutDirection</db:type>
<db:varname>layoutDirection</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">layoutDirection</db:synopsisinfo>
<db:synopsisinfo role="setter">setLayoutDirection</db:synopsisinfo>
<db:synopsisinfo role="notifier">layoutDirectionChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the default layout direction for this application</db:para>
<db:para>On system start-up, the default layout direction depends on the application's language.</db:para>
<db:para>The notifier signal was introduced in Qt 5.4.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#LayoutDirection-enum">Qt::LayoutDirection</db:link></db:type> <db:emphasis role="bold">layoutDirection</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLayoutDirection</db:emphasis>(<db:type><db:link xlink:href="qt.xml#LayoutDirection-enum">Qt::LayoutDirection</db:link></db:type> <db:emphasis>direction</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">layoutDirectionChanged</db:emphasis>(<db:type><db:link xlink:href="qt.xml#LayoutDirection-enum">Qt::LayoutDirection</db:link></db:type> <db:emphasis>direction</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#layoutDirection-prop">QWidget::layoutDirection</db:link></db:member>
<db:member><db:link xlink:href="qguiapplication.xml#isLeftToRight">isLeftToRight</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#isRightToLeft">isRightToLeft</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="platformName-prop">
<db:title>[read-only] platformName : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>platformName</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">platformName</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the name of the underlying platform plugin.</db:para>
<db:para>The QPA platform plugins are located in <db:code>qtbase\src\plugins\platforms</db:code>. At the time of writing, the following platform plugin names are supported:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>android</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>cocoa</db:code> is a platform plugin for macOS.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>directfb</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>eglfs</db:code> is a platform plugin for running Qt5 applications on top of EGL and OpenGL ES 2.0 without an actual windowing system (like X11 or Wayland). For more information, see <db:link xlink:href="embedded-linux.xml#eglfs">EGLFS</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>ios</db:code> (also used for tvOS)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>linuxfb</db:code> writes directly to the framebuffer. For more information, see <db:link xlink:href="embedded-linux.xml#linuxfb">LinuxFB</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>minimal</db:code> is provided as an examples for developers who want to write their own platform plugins. However, you can use the plugin to run GUI applications in environments without a GUI, such as servers.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>minimalegl</db:code> is an example plugin.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>offscreen</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>qnx</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>windows</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>wayland</db:code> is a platform plugin for modern Linux desktops and some embedded systems.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>xcb</db:code> is the X11 plugin used on regular desktop Linux platforms.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For more information about the platform plugins for embedded Linux devices, see <db:link xlink:href="embedded-linux.xml">Qt for Embedded Linux</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">platformName</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="primaryScreen-prop">
<db:title>[read-only] primaryScreen : QScreen* const</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QScreen*</db:type>
<db:varname>primaryScreen</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">primaryScreen</db:synopsisinfo>
<db:synopsisinfo role="notifier">primaryScreenChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the primary (or default) screen of the application.</db:para>
<db:para>This will be the screen where QWindows are initially shown, unless otherwise specified.</db:para>
<db:para>The primaryScreenChanged signal was introduced in Qt 5.6.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qscreen.xml">QScreen</db:link></db:type> *<db:emphasis role="bold">primaryScreen</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">primaryScreenChanged</db:emphasis>(<db:type><db:link xlink:href="qscreen.xml">QScreen</db:link></db:type> *<db:emphasis>screen</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#screens">screens</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="quitOnLastWindowClosed-prop">
<db:title>quitOnLastWindowClosed : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>quitOnLastWindowClosed</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">quitOnLastWindowClosed</db:synopsisinfo>
<db:synopsisinfo role="setter">setQuitOnLastWindowClosed</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the application implicitly quits when the last window is closed.</db:para>
<db:para>The default is <db:code>true</db:code>.</db:para>
<db:para>If this property is <db:code>true</db:code>, the applications quits when the last visible primary window (i.e. window with no parent) is closed.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">quitOnLastWindowClosed</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setQuitOnLastWindowClosed</db:emphasis>(<db:type>bool</db:type> <db:emphasis>quit</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#quit">quit</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#close">QWindow::close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowIcon-prop">
<db:title>windowIcon : QIcon</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QIcon</db:type>
<db:varname>windowIcon</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">windowIcon</db:synopsisinfo>
<db:synopsisinfo role="setter">setWindowIcon</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the default window icon</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qicon.xml">QIcon</db:link></db:type> <db:emphasis role="bold">windowIcon</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWindowIcon</db:emphasis>(const <db:type><db:link xlink:href="qicon.xml">QIcon</db:link></db:type> &amp;<db:emphasis>icon</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setIcon">QWindow::setIcon</db:link>()</db:member>
<db:member><db:link xlink:href="appicon.xml">Setting the Application Icon</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGuiApplication">
<db:title>QGuiApplication::QGuiApplication(int &amp;<db:emphasis>argc</db:emphasis>, char **<db:emphasis>argv</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGuiApplication</db:methodname>
<db:methodparam>
<db:type>int &amp;</db:type>
<db:parameter>argc</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>char **</db:type>
<db:parameter>argv</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGuiApplication(int &amp;argc, char **argv)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Initializes the window system and constructs an application object with <db:code role="parameter">argc</db:code> command line arguments in <db:code role="parameter">argv</db:code>.</db:para>
<db:warning>
<db:para>The data referred to by <db:code role="parameter">argc</db:code> and <db:code role="parameter">argv</db:code> must stay valid for the entire lifetime of the <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> object. In addition, <db:code role="parameter">argc</db:code> must be greater than zero and <db:code role="parameter">argv</db:code> must contain at least one valid character string.</db:para>
</db:warning>
<db:para>The global <db:code>qApp</db:code> pointer refers to this application object. Only one application object should be created.</db:para>
<db:para>This application object must be constructed before any <db:link xlink:href="qpaintdevice.xml">paint devices</db:link> (including pixmaps, bitmaps etc.).</db:para>
<db:note>
<db:para><db:code role="parameter">argc</db:code> and <db:code role="parameter">argv</db:code> might be changed as Qt removes command line arguments that it recognizes.</db:para>
</db:note>
<db:section xml:id="supported-command-line-options">
<db:title>Supported Command Line Options</db:title>
<db:para>All Qt programs automatically support a set of command-line options that allow modifying the way Qt will interact with the windowing system. Some of the options are also accessible via environment variables, which are the preferred form if the application can launch GUI sub-processes or other applications (environment variables will be inherited by child processes). When in doubt, use the environment variables.</db:para>
<db:para>The options currently supported are the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>-platform</db:code> <db:emphasis><db:link xlink:href="qguiapplication.xml#platformName-prop">platformName</db:link>[:options]</db:emphasis>, specifies the <db:link xlink:href="qpa.xml">Qt Platform Abstraction</db:link> (QPA) plugin.</db:para>
<db:para>Overrides the <db:code>QT_QPA_PLATFORM</db:code> environment variable.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-platformpluginpath</db:code> <db:emphasis>path</db:emphasis>, specifies the path to platform plugins.</db:para>
<db:para>Overrides the <db:code>QT_QPA_PLATFORM_PLUGIN_PATH</db:code> environment variable.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-platformtheme</db:code> <db:emphasis>platformTheme</db:emphasis>, specifies the platform theme.</db:para>
<db:para>Overrides the <db:code>QT_QPA_PLATFORMTHEME</db:code> environment variable.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-plugin</db:code> <db:emphasis>plugin</db:emphasis>, specifies additional plugins to load. The argument may appear multiple times.</db:para>
<db:para>Concatenated with the plugins in the <db:code>QT_QPA_GENERIC_PLUGINS</db:code> environment variable.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-qmljsdebugger=</db:code>, activates the QML/JS debugger with a specified port. The value must be of format <db:code>port:1234</db:code><db:emphasis>[,block]</db:emphasis>, where <db:emphasis>block</db:emphasis> is optional and will make the application wait until a debugger connects to it.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-qwindowgeometry</db:code> <db:emphasis>geometry</db:emphasis>, specifies window geometry for the main window using the X11-syntax. For example: <db:code>-qwindowgeometry 100x100+50+50</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-qwindowicon</db:code>, sets the default window icon</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-qwindowtitle</db:code>, sets the title of the first window</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-reverse</db:code>, sets the application's layout direction to <db:link xlink:href="qt.xml#LayoutDirection-enum">Qt::RightToLeft</db:link>. This option is intended to aid debugging and should not be used in production. The default value is automatically detected from the user's locale (see also <db:link xlink:href="qlocale.xml#textDirection">QLocale::textDirection</db:link>()).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-session</db:code> <db:emphasis>session</db:emphasis>, restores the application from an earlier <db:link xlink:href="session.xml">session</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The following standard command line options are available for X11:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>-display</db:code> <db:emphasis>hostname:screen_number</db:emphasis>, switches displays on X11.</db:para>
<db:para>Overrides the <db:code>DISPLAY</db:code> environment variable.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-geometry</db:code> <db:emphasis>geometry</db:emphasis>, same as <db:code>-qwindowgeometry</db:code>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="platform-specific-arguments">
<db:title>Platform-Specific Arguments</db:title>
<db:para>You can specify platform-specific arguments for the <db:code>-platform</db:code> option. Place them after the platform plugin name following a colon as a comma-separated list. For example, <db:code>-platform windows:dialogs=xp,fontengine=freetype</db:code>.</db:para>
<db:para>The following parameters are available for <db:code>-platform windows</db:code>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>altgr</db:code>, detect the key <db:code>AltGr</db:code> found on some keyboards as <db:link xlink:href="qt.xml#KeyboardModifier-enum">Qt::GroupSwitchModifier</db:link> (since Qt 5.12).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>darkmode=[1|2]</db:code> controls how Qt responds to the activation of the <db:emphasis>Dark Mode for applications</db:emphasis> introduced in Windows 10 1903 (since Qt 5.15).</db:para>
<db:para>A value of 1 causes Qt to switch the window borders to black when <db:emphasis>Dark Mode for applications</db:emphasis> is activated and no High Contrast Theme is in use. This is intended for applications that implement their own theming.</db:para>
<db:para>A value of 2 will in addition cause the Windows Vista style to be deactivated and switch to the Windows style using a simplified palette in dark mode. This is currently experimental pending the introduction of new style that properly adapts to dark mode.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>dialogs=[xp|none]</db:code>, <db:code>xp</db:code> uses XP-style native dialogs and <db:code>none</db:code> disables them.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>fontengine=freetype</db:code>, uses the FreeType font engine.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>fontengine=directwrite</db:code>, uses the experimental DirectWrite font database and defaults to using the DirectWrite font engine (which is otherwise only used for some font types or font properties.) This affects font selection and aims to provide font naming more consistent with other platforms, but does not support all font formats, such as Postscript Type-1 or Microsoft FNT fonts.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>menus=[native|none]</db:code>, controls the use of native menus.</db:para>
<db:para>Native menus are implemented using Win32 API and are simpler than <db:link xlink:href="qmenu.xml">QMenu</db:link>-based menus in for example that they do allow for placing widgets on them or changing properties like fonts and do not provide hover signals. They are mainly intended for Qt Quick. By default, they will be used if the application is not an instance of <db:link xlink:href="qapplication.xml">QApplication</db:link> or for Qt Quick Controls 2 applications (since Qt 5.10).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>nocolorfonts</db:code> Turn off DirectWrite Color fonts (since Qt 5.8).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>nodirectwrite</db:code> Turn off DirectWrite fonts (since Qt 5.8).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>nomousefromtouch</db:code> Ignores mouse events synthesized from touch events by the operating system.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>nowmpointer</db:code> Switches from Pointer Input Messages handling to legacy mouse handling (since Qt 5.12).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>reverse</db:code> Activates Right-to-left mode (experimental). Windows title bars will be shown accordingly in Right-to-left locales (since Qt 5.13).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>tabletabsoluterange=&lt;value&gt;</db:code> Sets a value for mouse mode detection of WinTab tablets (Legacy, since Qt 5.3).</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The following parameter is available for <db:code>-platform cocoa</db:code> (on macOS):</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>fontengine=freetype</db:code>, uses the FreeType font engine.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For more information about the platform-specific arguments available for embedded Linux platforms, see <db:link xlink:href="embedded-linux.xml">Qt for Embedded Linux</db:link>.</db:para>
</db:section>
<db:section>
<db:title>Notes</db:title>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#arguments">arguments</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#platformName-prop">QGuiApplication::platformName</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QGuiApplication">
<db:title>[virtual] QGuiApplication::~QGuiApplication()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QGuiApplication</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGuiApplication()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructs the application.</db:para>
</db:section>
<db:section xml:id="allWindows">
<db:title>[static] QWindowList QGuiApplication::allWindows()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWindowList</db:type>
<db:methodname>allWindows</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWindowList allWindows()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of all the windows in the application.</db:para>
<db:para>The list is empty if there are no windows.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#topLevelWindows">topLevelWindows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="applicationState">
<db:title>[static, since 5.2] Qt::ApplicationState QGuiApplication::applicationState()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>Qt::ApplicationState</db:type>
<db:methodname>applicationState</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::ApplicationState applicationState()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current state of the application.</db:para>
<db:para>You can react to application state changes to perform actions such as stopping/resuming CPU-intensive tasks, freeing/loading resources or saving/restoring application data.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="applicationStateChanged">
<db:title>[since 5.2] void QGuiApplication::applicationStateChanged(Qt::ApplicationState <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>applicationStateChanged</db:methodname>
<db:methodparam>
<db:type>Qt::ApplicationState</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void applicationStateChanged(Qt::ApplicationState state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the <db:code role="parameter">state</db:code> of the application changes.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#applicationState">applicationState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changeOverrideCursor">
<db:title>[static] void QGuiApplication::changeOverrideCursor(const QCursor &amp;<db:emphasis>cursor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>changeOverrideCursor</db:methodname>
<db:methodparam>
<db:type>const QCursor &amp;</db:type>
<db:parameter>cursor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void changeOverrideCursor(const QCursor &amp;cursor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes the currently active application override cursor to <db:code role="parameter">cursor</db:code>.</db:para>
<db:para>This function has no effect if <db:link xlink:href="qguiapplication.xml#setOverrideCursor">setOverrideCursor</db:link>() was not called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#setOverrideCursor">setOverrideCursor</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#overrideCursor">overrideCursor</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#restoreOverrideCursor">restoreOverrideCursor</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#cursor-prop">QWidget::setCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clipboard">
<db:title>[static] QClipboard *QGuiApplication::clipboard()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QClipboard *</db:type>
<db:methodname>clipboard</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QClipboard * clipboard()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the object for interacting with the clipboard.</db:para>
</db:section>
<db:section xml:id="commitDataRequest">
<db:title>void QGuiApplication::commitDataRequest(QSessionManager &amp;<db:emphasis>manager</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>commitDataRequest</db:methodname>
<db:methodparam>
<db:type>QSessionManager &amp;</db:type>
<db:parameter>manager</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void commitDataRequest(QSessionManager &amp;manager)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal deals with <db:link xlink:href="session.xml">session management</db:link>. It is emitted when the <db:link xlink:href="qsessionmanager.xml">QSessionManager</db:link> wants the application to commit all its data.</db:para>
<db:para>Usually this means saving all open files, after getting permission from the user. Furthermore you may want to provide a means by which the user can cancel the shutdown.</db:para>
<db:para>You should not exit the application within this signal. Instead, the session manager may or may not do this afterwards, depending on the context.</db:para>
<db:warning>
<db:para>Within this signal, no user interaction is possible, <db:emphasis>unless</db:emphasis> you ask the <db:code role="parameter">manager</db:code> for explicit permission. See <db:link xlink:href="qsessionmanager.xml#allowsInteraction">QSessionManager::allowsInteraction</db:link>() and <db:link xlink:href="qsessionmanager.xml#allowsErrorInteraction">QSessionManager::allowsErrorInteraction</db:link>() for details and example usage.</db:para>
</db:warning>
<db:note>
<db:para>You should use <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::DirectConnection</db:link> when connecting to this signal.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#isSessionRestored">isSessionRestored</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#sessionId">sessionId</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#saveStateRequest">saveStateRequest</db:link>()</db:member>
<db:member><db:link xlink:href="session.xml">Session Management</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="desktopSettingsAware">
<db:title>[static] bool QGuiApplication::desktopSettingsAware()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>desktopSettingsAware</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool desktopSettingsAware()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if Qt is set to use the system's standard colors, fonts, etc.; otherwise returns <db:code>false</db:code>. The default is <db:code>true</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#setDesktopSettingsAware">setDesktopSettingsAware</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="devicePixelRatio">
<db:title>qreal QGuiApplication::devicePixelRatio() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>devicePixelRatio</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal devicePixelRatio() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the highest screen device pixel ratio found on the system. This is the ratio between physical pixels and device-independent pixels.</db:para>
<db:para>Use this function only when you don't know which window you are targeting. If you do know the target window, use <db:link xlink:href="qwindow.xml#devicePixelRatio">QWindow::devicePixelRatio</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#devicePixelRatio">QWindow::devicePixelRatio</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QGuiApplication::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qcoreapplication.xml#event" role="function">QCoreApplication::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="exec">
<db:title>[static] int QGuiApplication::exec()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>exec</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int exec()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enters the main event loop and waits until <db:link xlink:href="qcoreapplication.xml#exit">exit</db:link>() is called, and then returns the value that was set to <db:link xlink:href="qcoreapplication.xml#exit">exit</db:link>() (which is 0 if <db:link xlink:href="qcoreapplication.xml#exit">exit</db:link>() is called via <db:link xlink:href="qcoreapplication.xml#quit">quit</db:link>()).</db:para>
<db:para>It is necessary to call this function to start event handling. The main event loop receives events from the window system and dispatches these to the application widgets.</db:para>
<db:para>Generally, no user interaction can take place before calling exec().</db:para>
<db:para>To make your application perform idle processing, e.g., executing a special function whenever there are no pending events, use a <db:link xlink:href="qtimer.xml">QTimer</db:link> with 0 timeout. More advanced idle processing schemes can be achieved using <db:link xlink:href="qcoreapplication.xml#processEvents">processEvents</db:link>().</db:para>
<db:para>We recommend that you connect clean-up code to the <db:link xlink:href="qcoreapplication.xml#aboutToQuit">aboutToQuit</db:link>() signal, instead of putting it in your application's <db:code>main()</db:code> function. This is because, on some platforms, the <db:link xlink:href="qapplication.xml#exec">QApplication::exec</db:link>() call may not return.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#quitOnLastWindowClosed-prop">quitOnLastWindowClosed</db:link></db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#quit">quit</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#exit">exit</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#processEvents">processEvents</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#exec">QCoreApplication::exec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusObject">
<db:title>[static] QObject *QGuiApplication::focusObject()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>focusObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * focusObject()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qobject.xml">QObject</db:link> in currently active window that will be final receiver of events tied to focus, such as key events.</db:para>
</db:section>
<db:section xml:id="focusObjectChanged">
<db:title>void QGuiApplication::focusObjectChanged(QObject *<db:emphasis>focusObject</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>focusObjectChanged</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>focusObject</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusObjectChanged(QObject *focusObject)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when final receiver of events tied to focus is changed. <db:code role="parameter">focusObject</db:code> is the new receiver.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#focusObject">focusObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusWindow">
<db:title>[static] QWindow *QGuiApplication::focusWindow()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWindow *</db:type>
<db:methodname>focusWindow</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWindow * focusWindow()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qwindow.xml">QWindow</db:link> that receives events tied to focus, such as key events.</db:para>
</db:section>
<db:section xml:id="focusWindowChanged">
<db:title>void QGuiApplication::focusWindowChanged(QWindow *<db:emphasis>focusWindow</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>focusWindowChanged</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>focusWindow</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusWindowChanged(QWindow *focusWindow)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the focused window changes. <db:code role="parameter">focusWindow</db:code> is the new focused window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#focusWindow">focusWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font">
<db:title>[static] QFont QGuiApplication::font()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QFont</db:type>
<db:methodname>font</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont font()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the default application font.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#setFont">setFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontDatabaseChanged">
<db:title>void QGuiApplication::fontDatabaseChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fontDatabaseChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fontDatabaseChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when application fonts are loaded or removed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdatabase.xml#addApplicationFont">QFontDatabase::addApplicationFont</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdatabase.xml#addApplicationFontFromData">QFontDatabase::addApplicationFontFromData</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdatabase.xml#removeAllApplicationFonts">QFontDatabase::removeAllApplicationFonts</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdatabase.xml#removeApplicationFont">QFontDatabase::removeApplicationFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="highDpiScaleFactorRoundingPolicy">
<db:title>[static, since 5.14] Qt::HighDpiScaleFactorRoundingPolicy QGuiApplication::highDpiScaleFactorRoundingPolicy()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>Qt::HighDpiScaleFactorRoundingPolicy</db:type>
<db:methodname>highDpiScaleFactorRoundingPolicy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::HighDpiScaleFactorRoundingPolicy highDpiScaleFactorRoundingPolicy()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the high-DPI scale factor rounding policy.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#setHighDpiScaleFactorRoundingPolicy">setHighDpiScaleFactorRoundingPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inputMethod">
<db:title>[static] QInputMethod *QGuiApplication::inputMethod()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QInputMethod *</db:type>
<db:methodname>inputMethod</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QInputMethod * inputMethod()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>returns the input method.</db:para>
<db:para>The input method returns properties about the state and position of the virtual keyboard. It also provides information about the position of the current focused input element.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethod.xml">QInputMethod</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isLeftToRight">
<db:title>[static] bool QGuiApplication::isLeftToRight()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>isLeftToRight</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isLeftToRight()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the application's layout direction is <db:link xlink:href="qt.xml#LayoutDirection-enum">Qt::LeftToRight</db:link>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#layoutDirection-prop">layoutDirection</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#isRightToLeft">isRightToLeft</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isRightToLeft">
<db:title>[static] bool QGuiApplication::isRightToLeft()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>isRightToLeft</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isRightToLeft()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the application's layout direction is <db:link xlink:href="qt.xml#LayoutDirection-enum">Qt::RightToLeft</db:link>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#layoutDirection-prop">layoutDirection</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#isLeftToRight">isLeftToRight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSavingSession">
<db:title>[since 5.0] bool QGuiApplication::isSavingSession() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSavingSession</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSavingSession() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the application is currently saving the <db:link xlink:href="session.xml">session</db:link>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This is <db:code>true</db:code> when <db:link xlink:href="qguiapplication.xml#commitDataRequest">commitDataRequest</db:link>() and <db:link xlink:href="qguiapplication.xml#saveStateRequest">saveStateRequest</db:link>() are emitted, but also when the windows are closed afterwards by session management.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#sessionId">sessionId</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#commitDataRequest">commitDataRequest</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#saveStateRequest">saveStateRequest</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSessionRestored">
<db:title>bool QGuiApplication::isSessionRestored() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSessionRestored</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSessionRestored() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the application has been restored from an earlier <db:link xlink:href="session.xml">session</db:link>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#sessionId">sessionId</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#commitDataRequest">commitDataRequest</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#saveStateRequest">saveStateRequest</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyboardModifiers">
<db:title>[static] Qt::KeyboardModifiers QGuiApplication::keyboardModifiers()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>Qt::KeyboardModifiers</db:type>
<db:methodname>keyboardModifiers</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::KeyboardModifiers keyboardModifiers()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current state of the modifier keys on the keyboard. The current state is updated sychronously as the event queue is emptied of events that will spontaneously change the keyboard state (<db:link xlink:href="qevent.xml#Type-enum">QEvent::KeyPress</db:link> and <db:link xlink:href="qevent.xml#Type-enum">QEvent::KeyRelease</db:link> events).</db:para>
<db:para>It should be noted this may not reflect the actual keys held on the input device at the time of calling but rather the modifiers as last reported in one of the above events. If no keys are being held <db:link xlink:href="qt.xml#KeyboardModifier-enum">Qt::NoModifier</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#mouseButtons">mouseButtons</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#queryKeyboardModifiers">queryKeyboardModifiers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastWindowClosed">
<db:title>void QGuiApplication::lastWindowClosed()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>lastWindowClosed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void lastWindowClosed()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted from <db:link xlink:href="qguiapplication.xml#exec">exec</db:link>() when the last visible primary window (i.e. window with no parent) is closed.</db:para>
<db:para>By default, <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> quits after this signal is emitted. This feature can be turned off by setting <db:link xlink:href="qguiapplication.xml#quitOnLastWindowClosed-prop">quitOnLastWindowClosed</db:link> to <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#close">QWindow::close</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#isTopLevel">QWindow::isTopLevel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="modalWindow">
<db:title>[static] QWindow *QGuiApplication::modalWindow()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWindow *</db:type>
<db:methodname>modalWindow</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWindow * modalWindow()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the most recently shown modal window. If no modal windows are visible, this function returns zero.</db:para>
<db:para>A modal window is a window which has its <db:link xlink:href="qwindow.xml#modality-prop">modality</db:link> property set to <db:link xlink:href="qt.xml#WindowModality-enum">Qt::WindowModal</db:link> or <db:link xlink:href="qt.xml#WindowModality-enum">Qt::ApplicationModal</db:link>. A modal window must be closed before the user can continue with other parts of the program.</db:para>
<db:para>Modal window are organized in a stack. This function returns the modal window at the top of the stack.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#WindowModality-enum">Qt::WindowModality</db:link></db:member>
<db:member><db:link xlink:href="qwindow.xml#modality-prop">QWindow::setModality</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseButtons">
<db:title>[static] Qt::MouseButtons QGuiApplication::mouseButtons()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>Qt::MouseButtons</db:type>
<db:methodname>mouseButtons</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::MouseButtons mouseButtons()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current state of the buttons on the mouse. The current state is updated synchronously as the event queue is emptied of events that will spontaneously change the mouse state (<db:link xlink:href="qevent.xml#Type-enum">QEvent::MouseButtonPress</db:link> and <db:link xlink:href="qevent.xml#Type-enum">QEvent::MouseButtonRelease</db:link> events).</db:para>
<db:para>It should be noted this may not reflect the actual buttons held on the input device at the time of calling but rather the mouse buttons as last reported in one of the above events. If no mouse buttons are being held <db:link xlink:href="qt.xml#MouseButton-enum">Qt::NoButton</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#keyboardModifiers">keyboardModifiers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="notify">
<db:title>[override virtual] bool QGuiApplication::notify(QObject *<db:emphasis>object</db:emphasis>, QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>notify</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool notify(QObject *object, QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qcoreapplication.xml#notify" role="function">QCoreApplication::notify(QObject *receiver, QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="overrideCursor">
<db:title>[static] QCursor *QGuiApplication::overrideCursor()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QCursor *</db:type>
<db:methodname>overrideCursor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCursor * overrideCursor()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the active application override cursor.</db:para>
<db:para>This function returns <db:code>nullptr</db:code> if no application cursor has been defined (i.e. the internal cursor stack is empty).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#setOverrideCursor">setOverrideCursor</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#restoreOverrideCursor">restoreOverrideCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="palette">
<db:title>[static] QPalette QGuiApplication::palette()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QPalette</db:type>
<db:methodname>palette</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPalette palette()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current application palette.</db:para>
<db:para>Roles that have not been explicitly set will reflect the system's platform theme.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#setPalette">setPalette</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="queryKeyboardModifiers">
<db:title>[static] Qt::KeyboardModifiers QGuiApplication::queryKeyboardModifiers()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>Qt::KeyboardModifiers</db:type>
<db:methodname>queryKeyboardModifiers</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::KeyboardModifiers queryKeyboardModifiers()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Queries and returns the state of the modifier keys on the keyboard. Unlike <db:link xlink:href="qguiapplication.xml#keyboardModifiers">keyboardModifiers</db:link>, this method returns the actual keys held on the input device at the time of calling the method.</db:para>
<db:para>It does not rely on the keypress events having been received by this process, which makes it possible to check the modifiers while moving a window, for instance. Note that in most cases, you should use <db:link xlink:href="qguiapplication.xml#keyboardModifiers">keyboardModifiers</db:link>(), which is faster and more accurate since it contains the state of the modifiers as they were when the currently processed event was received.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#keyboardModifiers">keyboardModifiers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="restoreOverrideCursor">
<db:title>[static] void QGuiApplication::restoreOverrideCursor()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>restoreOverrideCursor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void restoreOverrideCursor()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Undoes the last <db:link xlink:href="qguiapplication.xml#setOverrideCursor">setOverrideCursor</db:link>().</db:para>
<db:para>If <db:link xlink:href="qguiapplication.xml#setOverrideCursor">setOverrideCursor</db:link>() has been called twice, calling restoreOverrideCursor() will activate the first cursor set. Calling this function a second time restores the original widgets' cursors.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#setOverrideCursor">setOverrideCursor</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#overrideCursor">overrideCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="saveStateRequest">
<db:title>void QGuiApplication::saveStateRequest(QSessionManager &amp;<db:emphasis>manager</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>saveStateRequest</db:methodname>
<db:methodparam>
<db:type>QSessionManager &amp;</db:type>
<db:parameter>manager</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void saveStateRequest(QSessionManager &amp;manager)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal deals with <db:link xlink:href="session.xml">session management</db:link>. It is invoked when the <db:link xlink:href="qsessionmanager.xml">session manager</db:link> wants the application to preserve its state for a future session.</db:para>
<db:para>For example, a text editor would create a temporary file that includes the current contents of its edit buffers, the location of the cursor and other aspects of the current editing session.</db:para>
<db:para>You should never exit the application within this signal. Instead, the session manager may or may not do this afterwards, depending on the context. Furthermore, most session managers will very likely request a saved state immediately after the application has been started. This permits the session manager to learn about the application's restart policy.</db:para>
<db:warning>
<db:para>Within this signal, no user interaction is possible, <db:emphasis>unless</db:emphasis> you ask the <db:code role="parameter">manager</db:code> for explicit permission. See <db:link xlink:href="qsessionmanager.xml#allowsInteraction">QSessionManager::allowsInteraction</db:link>() and <db:link xlink:href="qsessionmanager.xml#allowsErrorInteraction">QSessionManager::allowsErrorInteraction</db:link>() for details.</db:para>
</db:warning>
<db:note>
<db:para>You should use <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::DirectConnection</db:link> when connecting to this signal.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#isSessionRestored">isSessionRestored</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#sessionId">sessionId</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#commitDataRequest">commitDataRequest</db:link>()</db:member>
<db:member><db:link xlink:href="session.xml">Session Management</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="screenAdded">
<db:title>void QGuiApplication::screenAdded(QScreen *<db:emphasis>screen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>screenAdded</db:methodname>
<db:methodparam>
<db:type>QScreen *</db:type>
<db:parameter>screen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void screenAdded(QScreen *screen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a new screen <db:code role="parameter">screen</db:code> has been added to the system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#screens">screens</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#primaryScreen-prop">primaryScreen</db:link></db:member>
<db:member><db:link xlink:href="qguiapplication.xml#screenRemoved">screenRemoved</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="screenAt">
<db:title>[static, since 5.10] QScreen *QGuiApplication::screenAt(const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QScreen *</db:type>
<db:methodname>screenAt</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QScreen * screenAt(const QPoint &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the screen at <db:code role="parameter">point</db:code>, or <db:code>nullptr</db:code> if outside of any screen.</db:para>
<db:para>The <db:code role="parameter">point</db:code> is in relation to the virtualGeometry() of each set of virtual siblings. If the point maps to more than one set of virtual siblings the first match is returned. If you wish to search only the virtual desktop siblings of a known screen (for example siblings of the screen of your application window <db:code>QWidget::windowHandle()-&gt;screen()</db:code>), use <db:link xlink:href="qscreen.xml#virtualSiblingAt">QScreen::virtualSiblingAt</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="screenRemoved">
<db:title>[since 5.4] void QGuiApplication::screenRemoved(QScreen *<db:emphasis>screen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>screenRemoved</db:methodname>
<db:methodparam>
<db:type>QScreen *</db:type>
<db:parameter>screen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void screenRemoved(QScreen *screen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a <db:code role="parameter">screen</db:code> is removed from the system. It provides an opportunity to manage the windows on the screen before Qt falls back to moving them to the primary screen.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#screens">screens</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#screenAdded">screenAdded</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#destroyed">QObject::destroyed</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#setScreen">QWindow::setScreen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="screens">
<db:title>[static] QList&lt;QScreen *&gt; QGuiApplication::screens()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;QScreen *&gt;</db:type>
<db:methodname>screens</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QScreen *&gt; screens()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of all the screens associated with the windowing system the application is connected to.</db:para>
</db:section>
<db:section xml:id="sessionId">
<db:title>QString QGuiApplication::sessionId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>sessionId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString sessionId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current <db:link xlink:href="session.xml">session's</db:link> identifier.</db:para>
<db:para>If the application has been restored from an earlier session, this identifier is the same as it was in that previous session. The session identifier is guaranteed to be unique both for different applications and for different instances of the same application.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#isSessionRestored">isSessionRestored</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#sessionKey">sessionKey</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#commitDataRequest">commitDataRequest</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#saveStateRequest">saveStateRequest</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sessionKey">
<db:title>QString QGuiApplication::sessionKey() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>sessionKey</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString sessionKey() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the session key in the current <db:link xlink:href="session.xml">session</db:link>.</db:para>
<db:para>If the application has been restored from an earlier session, this key is the same as it was when the previous session ended.</db:para>
<db:para>The session key changes every time the session is saved. If the shutdown process is cancelled, another session key will be used when shutting down again.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#isSessionRestored">isSessionRestored</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#sessionId">sessionId</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#commitDataRequest">commitDataRequest</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#saveStateRequest">saveStateRequest</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDesktopSettingsAware">
<db:title>[static] void QGuiApplication::setDesktopSettingsAware(bool <db:emphasis>on</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setDesktopSettingsAware</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>on</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDesktopSettingsAware(bool on)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether Qt should use the system's standard colors, fonts, etc., to <db:code role="parameter">on</db:code>. By default, this is <db:code>true</db:code>.</db:para>
<db:para>This function must be called before creating the <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> object, like this:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication::setDesktopSettingsAware(false);
    QApplication app(argc, argv);
    // ...
    return app.exec();
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#desktopSettingsAware">desktopSettingsAware</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFont">
<db:title>[static] void QGuiApplication::setFont(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setFont</db:methodname>
<db:methodparam>
<db:type>const QFont &amp;</db:type>
<db:parameter>font</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFont(const QFont &amp;font)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes the default application font to <db:code role="parameter">font</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#font">font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHighDpiScaleFactorRoundingPolicy">
<db:title>[static, since 5.14] void QGuiApplication::setHighDpiScaleFactorRoundingPolicy(Qt::HighDpiScaleFactorRoundingPolicy <db:emphasis>policy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setHighDpiScaleFactorRoundingPolicy</db:methodname>
<db:methodparam>
<db:type>Qt::HighDpiScaleFactorRoundingPolicy</db:type>
<db:parameter>policy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHighDpiScaleFactorRoundingPolicy(Qt::HighDpiScaleFactorRoundingPolicy policy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the high-DPI scale factor rounding policy for the application. The <db:code role="parameter">policy</db:code> decides how non-integer scale factors (such as Windows 150%) are handled.</db:para>
<db:para>The two principal options are whether fractional scale factors should be rounded to an integer or not. Keeping the scale factor as-is will make the user interface size match the OS setting exactly, but may cause painting errors, for example with the Windows style.</db:para>
<db:para>If rounding is wanted, then which type of rounding should be decided next. Mathematically correct rounding is supported but may not give the best visual results: Consider if you want to render 1.5x as 1x (&quot;small UI&quot;) or as 2x (&quot;large UI&quot;). See the <db:link xlink:href="qt.xml#HighDpiScaleFactorRoundingPolicy-enum">Qt::HighDpiScaleFactorRoundingPolicy</db:link> enum for a complete list of all options.</db:para>
<db:para>This function must be called before creating the application object. The <db:link xlink:href="qguiapplication.xml#highDpiScaleFactorRoundingPolicy">QGuiApplication::highDpiScaleFactorRoundingPolicy</db:link>() accessor will reflect the environment, if set.</db:para>
<db:para>The default value is <db:link xlink:href="qt.xml#HighDpiScaleFactorRoundingPolicy-enum">Qt::HighDpiScaleFactorRoundingPolicy::PassThrough</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#highDpiScaleFactorRoundingPolicy">highDpiScaleFactorRoundingPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOverrideCursor">
<db:title>[static] void QGuiApplication::setOverrideCursor(const QCursor &amp;<db:emphasis>cursor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setOverrideCursor</db:methodname>
<db:methodparam>
<db:type>const QCursor &amp;</db:type>
<db:parameter>cursor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOverrideCursor(const QCursor &amp;cursor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the application override cursor to <db:code role="parameter">cursor</db:code>.</db:para>
<db:para>Application override cursors are intended for showing the user that the application is in a special state, for example during an operation that might take some time.</db:para>
<db:para>This cursor will be displayed in all the application's widgets until <db:link xlink:href="qguiapplication.xml#restoreOverrideCursor">restoreOverrideCursor</db:link>() or another setOverrideCursor() is called.</db:para>
<db:para>Application cursors are stored on an internal stack. setOverrideCursor() pushes the cursor onto the stack, and <db:link xlink:href="qguiapplication.xml#restoreOverrideCursor">restoreOverrideCursor</db:link>() pops the active cursor off the stack. <db:link xlink:href="qguiapplication.xml#changeOverrideCursor">changeOverrideCursor</db:link>() changes the curently active application override cursor.</db:para>
<db:para>Every setOverrideCursor() must eventually be followed by a corresponding <db:link xlink:href="qguiapplication.xml#restoreOverrideCursor">restoreOverrideCursor</db:link>(), otherwise the stack will never be emptied.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QGuiApplication::setOverrideCursor(QCursor(Qt::WaitCursor));
calculateHugeMandelbrot();              // lunch time...
QGuiApplication::restoreOverrideCursor();
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#overrideCursor">overrideCursor</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#restoreOverrideCursor">restoreOverrideCursor</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#changeOverrideCursor">changeOverrideCursor</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#cursor-prop">QWidget::setCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPalette">
<db:title>[static] void QGuiApplication::setPalette(const QPalette &amp;<db:emphasis>pal</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setPalette</db:methodname>
<db:methodparam>
<db:type>const QPalette &amp;</db:type>
<db:parameter>pal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPalette(const QPalette &amp;pal)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes the application palette to <db:code role="parameter">pal</db:code>.</db:para>
<db:para>The color roles from this palette are combined with the system's platform theme to form the application's final palette.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#palette">palette</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="styleHints">
<db:title>[static] QStyleHints *QGuiApplication::styleHints()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QStyleHints *</db:type>
<db:methodname>styleHints</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStyleHints * styleHints()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the application's style hints.</db:para>
<db:para>The style hints encapsulate a set of platform dependent properties such as double click intervals, full width selection and others.</db:para>
<db:para>The hints can be used to integrate tighter with the underlying platform.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstylehints.xml">QStyleHints</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sync">
<db:title>[static, since 5.2] void QGuiApplication::sync()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>sync</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sync()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Function that can be used to sync Qt state with the Window Systems state.</db:para>
<db:para>This function will first empty Qts events by calling <db:link xlink:href="qcoreapplication.xml#processEvents">QCoreApplication::processEvents</db:link>(), then the platform plugin will sync up with the windowsystem, and finally Qts events will be delived by another call to <db:link xlink:href="qcoreapplication.xml#processEvents">QCoreApplication::processEvents</db:link>();</db:para>
<db:para>This function is timeconsuming and its use is discouraged.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="topLevelAt">
<db:title>[static] QWindow *QGuiApplication::topLevelAt(const QPoint &amp;<db:emphasis>pos</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWindow *</db:type>
<db:methodname>topLevelAt</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWindow * topLevelAt(const QPoint &amp;pos)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the top level window at the given position <db:code role="parameter">pos</db:code>, if any.</db:para>
</db:section>
<db:section xml:id="topLevelWindows">
<db:title>[static] QWindowList QGuiApplication::topLevelWindows()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWindowList</db:type>
<db:methodname>topLevelWindows</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWindowList topLevelWindows()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of the top-level windows in the application.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#allWindows">allWindows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="qGuiApp">
<db:title>qGuiApp</db:title>
<db:methodsynopsis>
<db:methodname>qGuiApp</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">qGuiApp</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>A global pointer referring to the unique application object. Only valid for use when that object is a <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#instance">QCoreApplication::instance</db:link>()</db:member>
<db:member><db:link xlink:href="qapplication.xml#qApp">qApp</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QGuiApplication</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="fontChanged">
<db:title>[since 5.11] void QGuiApplication::fontChanged(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fontChanged</db:methodname>
<db:methodparam>
<db:type>const QFont &amp;</db:type>
<db:parameter>font</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fontChanged(const QFont &amp;font)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This signal is emitted when the <db:code role="parameter">font</db:code> of the application changes. Use QEvent::ApplicationFontChanged instead.</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#font">font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paletteChanged">
<db:title>[since 5.4] void QGuiApplication::paletteChanged(const QPalette &amp;<db:emphasis>palette</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>paletteChanged</db:methodname>
<db:methodparam>
<db:type>const QPalette &amp;</db:type>
<db:parameter>palette</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paletteChanged(const QPalette &amp;palette)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This signal is emitted when the <db:code role="parameter">palette</db:code> of the application changes. Use QEvent::ApplicationPaletteChanged instead.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#palette">palette</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
