<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Third Party Libraries</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A guide to using third party libraries with Qt.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Using a third-party library with Qt is a simple process. Suppose you know of a cross-platform library that accepts audio samples of a cat's meows and translates them into English words. This library is named <db:code>CatWhisperer</db:code>, and has several files that it provides as part of its library. Your project, <db:code>MyQtApp</db:code>, stores these files in a folder named <db:code>3rdparty</db:code>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>MyQtApp/</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>MyQtApp.pro</db:para>
</db:listitem>
<db:listitem>
<db:para>src/</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>main.cpp</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>3rdparty/</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>CatWhisperer</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>include/</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>CatWhisperer.h</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>lib/</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>libCatWhisperer.so</db:para>
</db:listitem>
<db:listitem>
<db:para>CatWhisperer.lib</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>bin/</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>CatWhisperer.dll</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
<db:para>To use the <db:code>CatWhisperer</db:code> library in <db:code>MyQtApp</db:code>, <db:code>qmake</db:code> requires the location and names of the <db:code>CatWhisperer</db:code> libraries. Optionally, you can also:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Provide the location of the <db:code>CatWhisperer</db:code> source code so that you don't have to type out the full path to each file when you include them in your own code.</db:para>
</db:listitem>
<db:listitem>
<db:para>Choose the destination in which the <db:code>MyQtApp</db:code> executable will be created.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The information above is provided in the <db:code>.pro</db:code> file, so that <db:code>qmake</db:code> can parse it and produce makefiles. Makefiles contain all the information needed by your compiler and linker to produce output, whether it is an executable, another library file, etc. The next sections explain the syntax with which <db:code>qmake</db:code> expects you to provide this information.</db:para>
<db:section xml:id="source-code">
<db:title>Source Code</db:title>
<db:para>To be able to write</db:para>
<db:programlisting language="cpp">#include &lt;CatWhisperer.h&gt;
</db:programlisting>
<db:para>instead of</db:para>
<db:programlisting language="cpp">#include &lt;3rdparty/CatWhisperer/include/CatWhisperer.h&gt;
</db:programlisting>
<db:para>you can provide the path to the <db:code>CatWhisperer</db:code> <db:code>include</db:code> directory, using the <db:link xlink:href="qmake-variable-reference.xml#includepath">INCLUDEPATH</db:link> variable:</db:para>
<db:programlisting language="cpp">INCLUDEPATH += 3rdparty/CatWhisperer/include
</db:programlisting>
</db:section>
<db:section xml:id="library-files">
<db:title>Library Files</db:title>
<db:para>To let <db:code>qmake</db:code> know where to find the <db:code>CatWhisperer</db:code> library files, use the <db:link xlink:href="qmake-variable-reference.xml#libs">LIBS</db:link> variable:</db:para>
<db:programlisting language="cpp">LIBS += -L&quot;3rdparty/CatWhisperer/lib&quot; -lCatWhisperer
</db:programlisting>
<db:para>The first part of the expression lets the linker know in which directory it should look for the library files. The double quotes are only necessary when the path contains spaces, so we could have omitted them in this example.</db:para>
<db:para>The second part tells the linker which libraries to link against. We have two different library files for UNIX platforms and Windows, respectively: <db:code>libCatWhisperer.so</db:code> and <db:code>CatWhisperer.lib</db:code>. It is not necessary to specify the <db:code>.lib</db:code> extension, nor the <db:code>lib</db:code> prefix (on UNIX platforms).</db:para>
</db:section>
<db:section xml:id="destination-directory">
<db:title>Destination Directory</db:title>
<db:para>By default, <db:code>qmake</db:code> creates the executable in the same directory as the <db:code>.pro</db:code> file. We can choose our own directory using the <db:link xlink:href="qmake-variable-reference.xml#destdir">DESTDIR</db:link> variable:</db:para>
<db:programlisting language="cpp">DESTDIR = bin
</db:programlisting>
<db:para>That's it! You can now use the <db:code>CatWhisperer</db:code> library in your project. The final <db:code>.pro</db:code> file looks like this:</db:para>
<db:programlisting language="cpp">TARGET = MyQtApp

TEMPLATE = app

INCLUDEPATH += 3rdparty/CatWhisperer/include

SOURCES += src/main.cpp

LIBS += -L&quot;3rdparty/CatWhisperer/lib&quot; -lCatWhisperer
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmake-manual.xml">qmake Manual</db:link></db:member>
<db:member><db:link xlink:href="http://doc.qt.io/qtcreator/creator-project-qmake-libraries.html">Qt Creator: Adding Libraries to Projects</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
