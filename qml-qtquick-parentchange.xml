<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ParentChange QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Specifies how to reparent an Item in a state change.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>ParentChange is part of <db:simplelist><db:member>qtquick-states</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtquick-parentchange.xml">ParentChange</db:link> reparents an item while preserving its visual appearance (position, size, rotation, and scale) on screen. You can then specify a transition to move/resize/rotate/scale the item to its final intended appearance.</db:para>
<db:para><db:link xlink:href="qml-qtquick-parentchange.xml">ParentChange</db:link> can only preserve visual appearance if no complex transforms are involved. More specifically, it will not work if the transform property has been set for any items involved in the reparenting (i.e. items in the common ancestor tree for the original and new parent).</db:para>
<db:para>The example below displays a large red rectangle and a small blue rectangle, side by side. When the <db:code>blueRect</db:code> is clicked, it changes to the &quot;reparented&quot; state: its parent is changed to <db:code>redRect</db:code> and it is positioned at (10, 10) within the red rectangle, as specified in the <db:link xlink:href="qml-qtquick-parentchange.xml">ParentChange</db:link>.</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    width: 200; height: 100

    Rectangle {
        id: redRect
        width: 100; height: 100
        color: &quot;red&quot;
    }

    Rectangle {
        id: blueRect
        x: redRect.width
        width: 50; height: 50
        color: &quot;blue&quot;

        states: State {
            name: &quot;reparented&quot;
            ParentChange { target: blueRect; parent: redRect; x: 10; y: 10 }
        }

        MouseArea { anchors.fill: parent; onClicked: blueRect.state = &quot;reparented&quot; }
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/parentchange.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>You can specify at which point in a transition you want a <db:link xlink:href="qml-qtquick-parentchange.xml">ParentChange</db:link> to occur by using a <db:link xlink:href="qml-qtquick-parentanimation.xml">ParentAnimation</db:link>.</db:para>
<db:para>Note that unlike <db:link xlink:href="qml-qtquick-propertychanges.xml">PropertyChanges</db:link>, <db:link xlink:href="qml-qtquick-parentchange.xml">ParentChange</db:link> expects an Item-based target; it will not work with arbitrary objects (for example, you couldn't use it to reparent a Timer).</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="height-prop">
<db:title>height : real</db:title>
<db:bridgehead renderas="sect2">rotation : real</db:bridgehead><db:bridgehead renderas="sect2">scale : real</db:bridgehead><db:bridgehead renderas="sect2">width : real</db:bridgehead><db:bridgehead renderas="sect2">x : real</db:bridgehead><db:bridgehead renderas="sect2">y : real</db:bridgehead><db:para>These properties hold the new position, size, scale, and rotation for the item in this state.</db:para>
</db:section>
<db:section xml:id="parent-prop">
<db:title>parent : Item</db:title>
<db:para>This property holds the new parent for the item in this state.</db:para>
</db:section>
<db:section xml:id="target-prop">
<db:title>target : Item</db:title>
<db:para>This property holds the item to be reparented</db:para>
</db:section>
</db:section>
</db:article>
