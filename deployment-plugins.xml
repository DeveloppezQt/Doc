<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Deploying Plugins</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A guide to the plugin-specific aspects of deploying Qt and Qt Applications.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This topic explains how to deploy plugin libraries for Qt or your application to load at runtime. If you use <db:link xlink:href="plugins-howto.xml#static-plugins">static plugins</db:link>, then the plugin code is already part of your application executable and no separate deployment steps are required.</db:para>
<db:section xml:id="the-plugin-directory">
<db:title>The Plugin Directory</db:title>
<db:para>In Qt, when an application starts, the application's executable directory is the base directory where Qt searches for plugins.</db:para>
<db:para>For example, on Windows, if the application is in <db:code>C:\Program Files\MyApp</db:code> and it has a style plugin, Qt looks in <db:code>C:\Program Files\MyApp\styles</db:code>.</db:para>
<db:para>To find out where your application's executable is located, see <db:link xlink:href="qcoreapplication.xml#applicationDirPath">QCoreApplication::applicationDirPath</db:link>().</db:para>
<db:para>Qt also looks in the directory specified by <db:link xlink:href="qlibraryinfo.xml#path">QLibraryInfo::path</db:link>(<db:link xlink:href="qlibraryinfo.xml#LibraryPath-enum">QLibraryInfo::PluginsPath</db:link>), which typically is located in <db:code>QTDIR/plugins</db:code>; <db:code>QTDIR</db:code> is the directory where Qt is installed. If you want Qt to look in additional places you can add as many paths as you need with calls to <db:link xlink:href="qcoreapplication.xml#addLibraryPath">QCoreApplication::addLibraryPath</db:link>(). If you want to set your own path(s), you can use <db:link xlink:href="qcoreapplication.xml#setLibraryPaths">QCoreApplication::setLibraryPaths</db:link>().</db:para>
<db:para>Alternatively, you can use a <db:code>qt.conf</db:code> file to override the hard-coded paths that are compiled into the Qt library. For more information, see <db:link xlink:href="qt-conf.xml">Using qt.conf</db:link>.</db:para>
<db:para>Another possibility is to set the <db:code>QT_PLUGIN_PATH</db:code> environment variable before you run the application; multiple paths can be separated with a system path separator. When set, Qt looks for plugins in the paths specified in this variable.</db:para>
<db:note>
<db:para>Do not export <db:code>QT_PLUGIN_PATH</db:code> as a system-wide environment variable because it can interfere with other Qt installations.</db:para>
</db:note>
</db:section>
<db:section xml:id="loading-and-verifying-plugins-dynamically">
<db:title>Loading and Verifying Plugins Dynamically</db:title>
<db:para>When loading plugins, the Qt library does some sanity checking to determine whether the plugin can be loaded and used. This sanity check enables you to have multiple Qt versions and configurations installed side by side.</db:para>
<db:para>The following rules apply:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Plugins linked with a Qt library that has a higher minor version number will not be loaded by a library with a lower minor version number.</db:para>
<db:para><db:emphasis role="bold">Example:</db:emphasis> Qt 6.2.0 will <db:emphasis>not</db:emphasis> load a plugin built with Qt 6.3.0. <db:emphasis role="bold">Example:</db:emphasis> Qt 6.2.0 will load a plugin built with Qt 6.1.0. <db:emphasis role="bold">Example:</db:emphasis> Qt 6.2.0 will load a plugin built with Qt 6.2.1.</db:para>
</db:listitem>
<db:listitem>
<db:para>Plugins linked with a Qt library that has a lower major version number will not be loaded by a library with a higher major version number.</db:para>
<db:para><db:emphasis role="bold">Example:</db:emphasis> Qt 6.0.0 will <db:emphasis>not</db:emphasis> load a plugin built with Qt 5.15.0.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When building plugins to extend an application, it's important to ensure that the plugin is configured in the same way as the application. This means that if the application was built in release mode, plugins should be built in release mode, too. Except for Unix operating systems, where the plugin system will not load plugins built in a different mode from the application.</db:para>
</db:section>
<db:section xml:id="debugging-plugins">
<db:title>Debugging Plugins</db:title>
<db:para>There are a number of issues that may prevent correctly-written plugins from working with the applications that are designed to use them. Many of these are related to differences in the way that plugins and applications have been built, often arising from separate build systems and processes.</db:para>
<db:para>To obtain diagnostic information from Qt, about each plugin it tries to load, use the <db:code>QT_DEBUG_PLUGINS</db:code> environment variable. Set this variable to a non-zero value in the environment where your application is launched.</db:para>
<db:para>The following table describes the common causes of problems developers experience when creating plugins and possible solutions.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Problem</db:para>
</db:th>
<db:th>
<db:para>Cause</db:para>
</db:th>
<db:th>
<db:para>Solution</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Plugins silently fail to load even when opened directly by the application. <db:emphasis>Qt Designer</db:emphasis> shows the plugin libraries in its <db:guilabel>Help|About Plugins</db:guilabel> dialog, but no plugins are listed under each of them.</db:para>
</db:td>
<db:td>
<db:para>The application and its plugins are built in different modes.</db:para>
</db:td>
<db:td>
<db:para>Build the plugin in the same configuration as the executable.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:article>
