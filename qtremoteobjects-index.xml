<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Remote Objects</db:title>
<db:productname>QtRemoteObjects</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Remote Objects Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides APIs for inter-process communication.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="qt-remote-objects"/>
<db:section xml:id="remote-object-concepts">
<db:title>Remote Object Concepts</db:title>
<db:para>Qt Remote Objects (QtRO) is an Inter-Process Communication (IPC) module developed for Qt. This module extends Qt's existing functionalities to enable information exchange between processes or computers, easily.</db:para>
<db:para>One of Qt's key features, to enable this information exchange, is the distinction between an object's API (defined by its properties, signals, and slots) and the implementation of that API. QtRO's purpose is to meet that expected API, even if the true <db:link xlink:href="qobject.xml">QObject</db:link> is in a different process. A slot called on a copy of an object (the <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link> in QtRO) is forwarded to the true object (the <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> in QtRO) for handling. Every Replica receives updates to the Source, either property changes or emitted signals.</db:para>
<db:para>A <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link> is a light-weight proxy for the <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> object, but a Replica supports the same connections and behavior of QObjects, which makes it usable in the same way as any other <db:link xlink:href="qobject.xml">QObject</db:link> that Qt provides. Behind the scenes, QtRO handles everything that's necessary for the Replica to look like its Source.</db:para>
<db:para>Note that Remote Objects behave differently from traditional Remote Procedure Call (RPC) implementations, for example:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>In RPC, the client makes a request and waits for the response.</db:para>
</db:listitem>
<db:listitem>
<db:para>In RPC, the server doesn't push anything to the client unless it's in response to a request.</db:para>
</db:listitem>
<db:listitem>
<db:para>Often, the design of RPC is such that different clients are independent of each other: for instance, two clients can ask a mapping service for directions and get different results.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>While it is possible to implement this RPC-style behavior in QtRO, as Sources without properties, and slots that have return values, QtRO hides the fact that the processing is really remote. You let a node give you the Replica instead of creating it yourself, possibly use the status signals (<db:link xlink:href="qremoteobjectreplica.xml#isReplicaValid">isReplicaValid</db:link>()), but then interact with the object like you would with any other <db:link xlink:href="qobject.xml">QObject</db:link>-based type.</db:para>
</db:section>
<db:section xml:id="use-case-gps">
<db:title>Use Case: GPS</db:title>
<db:para>Consider a sensor such as a Global Positioning System (GPS) receiver. In QtRO terms:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> would be the process that directly interacts with the GPS hardware and derives your current location.</db:para>
</db:listitem>
<db:listitem>
<db:para>The location would be exposed as <db:link xlink:href="qobject.xml">QObject</db:link> properties; the periodic updates to the location would update these properties and emit property changed signals.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtremoteobjects-replica.xml#replica">Replicas</db:link> would be created in other processes and would always know your current location, but wouldn't need any of the logic to compute the location from the sensor data.</db:para>
</db:listitem>
<db:listitem>
<db:para>Connecting to the location changed signal on the Replica would work as expected: the signal emitted from the Source would trigger the signal emission on every Replica.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="use-case-printer-access">
<db:title>Use Case: Printer Access</db:title>
<db:para>Consider a service that provides access to a printer. In QtRO terms:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> would be the process controlling the printer directly.</db:para>
</db:listitem>
<db:listitem>
<db:para>The ink levels and printer status would be monitored by <db:link xlink:href="qobject.xml">QObject</db:link> properties. Updates to these properties would emit property changed signals.</db:para>
</db:listitem>
<db:listitem>
<db:para>The key feature – being able to print something – needs to be passed back to the printer. Incidentally, this aligns with the Qt slot mechanism, which QtRO uses as the way for <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replicas</db:link> to make calls on the Source. In effect, properties and signals go from Source to Replicas; slots go from Replica to Source.</db:para>
</db:listitem>
<db:listitem>
<db:para>When a print request is accepted, the printer status would change, triggering a change in the status property. This would then be reported to all Replicas.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="using-the-module">
<db:title>Using the Module</db:title>
<db:para>Using a Qt module requires linking against the module library, either directly or through other dependencies. Several build tools have dedicated support for this, including <db:link xlink:href="https://cmake.org/cmake/help/latest/">CMake</db:link> and <db:link xlink:href="qmake-manual.xml">qmake</db:link>.</db:para>
<db:section xml:id="building-with-cmake">
<db:title>Building with CMake</db:title>
<db:para>Use the <db:code>find_package()</db:code> command to locate the needed module components in the <db:code>Qt6</db:code> package:</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS RemoteObjects)
</db:programlisting>
<db:para>See also the <db:link xlink:href="cmake-manual.xml">Build with CMake</db:link> overview.</db:para>
</db:section>
<db:section xml:id="building-with-qmake">
<db:title>Building with qmake</db:title>
<db:para>To configure the module for building with qmake, add the module as a value of the <db:code>QT</db:code> variable in the project's .pro file:</db:para>
<db:programlisting language="cpp">QT       += remoteobjects
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="articles-and-guides">
<db:title>Articles and Guides</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtremoteobjects-gettingstarted.xml">Getting Started with Qt Remote Objects</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtremoteobjects-node.xml">Nodes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtremoteobjects-source.xml">Sources</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtremoteobjects-replica.xml">Replicas</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtremoteobjects-registry.xml">Registry</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>Using Custom Transports</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtremoteobjects-external-schemas.xml">External QIODevices</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtremoteobjects-custom-transport.xml">Implementing Custom Transport Backends</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtremoteobjects-repc.xml">Compiler</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtremoteobjects-interaction.xml#remote-object-interaction">Remote Object Interaction</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtremoteobjects-troubleshooting.xml">Troubleshooting</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtremoteobjects-compatibility.xml">Protocol Versioning</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtremoteobjects-examples.xml">Examples</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="api-reference">
<db:title>API Reference</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtremoteobjects-module.xml">Qt Remote Objects C++ Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtremoteobjects-qmlmodule.xml">Qt Remote Objects QML Types</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="licenses">
<db:title>Licenses</db:title>
<db:para>Qt Remote Objects is available under commercial licenses from <db:link xlink:href="http://www.qt.io/about-us/">The Qt Company</db:link>. In addition, it is available under the <db:link xlink:href="http://www.gnu.org/licenses/lgpl-3.0.html">GNU Lesser General Public License, version 3</db:link>, or the <db:link xlink:href="http://www.gnu.org/licenses/gpl-2.0.html">GNU General Public License, version 2</db:link>. See <db:link xlink:href="licensing.xml">Qt Licensing</db:link> for further details.</db:para>
</db:section>
</db:article>
