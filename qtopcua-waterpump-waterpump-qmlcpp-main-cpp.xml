<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Waterpump Example</db:title>
<db:productname>QtOpcUa</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>An OPC UA module for Qt</db:titleabbrev>
<db:abstract>
<db:para>Interacting with an OPC UA server to build a QML-based HMI for a simple machine.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">// Copyright (C) 2018 basysKom GmbH, opensource@basyskom.com
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

#include &quot;opcuamachinebackend.h&quot;

#include &amp;lt;QFile&amp;gt;
#include &amp;lt;QGuiApplication&amp;gt;
#include &amp;lt;QQmlApplicationEngine&amp;gt;
#include &amp;lt;QQmlContext&amp;gt;
#include &amp;lt;QProcess&amp;gt;
#include &amp;lt;QtOpcUa&amp;gt;

int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);

    QString serverExePath;
#ifdef Q_OS_WIN
    #ifdef EXAMPLES_CMAKE_SPECIFIC_PATH
        serverExePath = app.applicationDirPath().append(&quot;/../simulationserver/simulationserver.exe&quot;);
    #elif QT_DEBUG
        serverExePath = app.applicationDirPath().append(&quot;/../../simulationserver/debug/simulationserver.exe&quot;);
    #else
        serverExePath = app.applicationDirPath().append(&quot;/../../simulationserver/release/simulationserver.exe&quot;);
    #endif
#elif defined(Q_OS_MACOS)
    serverExePath = app.applicationDirPath().append(&quot;/../../../../simulationserver/simulationserver.app/Contents/MacOS/simulationserver&quot;);
#else
    serverExePath = app.applicationDirPath().append(&quot;/../simulationserver/simulationserver&quot;);
#endif

    if (!QFile::exists(serverExePath)) {
        qWarning() &amp;lt;&amp;lt; &quot;Could not find server executable:&quot; &amp;lt;&amp;lt; serverExePath;
        return EXIT_FAILURE;
    }

    QProcess serverProcess;

    serverProcess.start(serverExePath);
    if (!serverProcess.waitForStarted()) {
        qWarning() &amp;lt;&amp;lt; &quot;Could not start server:&quot; &amp;lt;&amp;lt; serverProcess.errorString();
        return EXIT_FAILURE;
    }

    OpcUaMachineBackend backend;

    QQmlApplicationEngine engine;
    engine.rootContext()-&amp;gt;setContextProperty(&quot;uaBackend&quot;, &amp;amp;backend);
    engine.load(QUrl(QStringLiteral(&quot;qrc:/main.qml&quot;)));
    if (engine.rootObjects().isEmpty())
        return EXIT_FAILURE;

    const int exitCode = QCoreApplication::exec();
    if (serverProcess.state() == QProcess::Running) {
#ifndef Q_OS_WIN
        serverProcess.terminate();
#else
        serverProcess.kill();
#endif
        serverProcess.waitForFinished();
    }
    return exitCode;
}

</db:programlisting>
</db:article>
