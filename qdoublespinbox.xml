<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDoubleSpinBox Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdoublespinbox.xml">QDoubleSpinBox</db:link> class provides a spin box widget that takes doubles.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDoubleSpinBox</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractspinbox.xml" xlink:role="class">QAbstractSpinBox</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDoubleSpinBox is part of <db:simplelist><db:member>basicwidgets</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qdoublespinbox.xml">QDoubleSpinBox</db:link> allows the user to choose a value by clicking the up and down buttons or by pressing Up or Down on the keyboard to increase or decrease the value currently displayed. The user can also type the value in manually. The spin box supports double values but can be extended to use different strings with <db:link xlink:href="qdoublespinbox.xml#validate">validate</db:link>(), <db:link xlink:href="qdoublespinbox.xml#textFromValue">textFromValue</db:link>() and <db:link xlink:href="qdoublespinbox.xml#valueFromText">valueFromText</db:link>().</db:para>
<db:para>Every time the value changes <db:link xlink:href="qdoublespinbox.xml">QDoubleSpinBox</db:link> emits <db:link xlink:href="qdoublespinbox.xml#valueChanged">valueChanged</db:link>() and <db:link xlink:href="qdoublespinbox.xml#textChanged">textChanged</db:link>() signals, the former providing a double and the latter a <db:link xlink:href="qstring.xml">QString</db:link>. The <db:link xlink:href="qdoublespinbox.xml#textChanged">textChanged</db:link>() signal provides the value with both <db:link xlink:href="qdoublespinbox.xml#prefix-prop">prefix</db:link>() and <db:link xlink:href="qdoublespinbox.xml#suffix-prop">suffix</db:link>(). The current value can be fetched with <db:link xlink:href="qdoublespinbox.xml#value-prop">value</db:link>() and set with <db:link xlink:href="qdoublespinbox.xml#value-prop">setValue</db:link>().</db:para>
<db:para>Note: <db:link xlink:href="qdoublespinbox.xml">QDoubleSpinBox</db:link> will round numbers so they can be displayed with the current precision. In a <db:link xlink:href="qdoublespinbox.xml">QDoubleSpinBox</db:link> with decimals set to 2, calling <db:link xlink:href="qdoublespinbox.xml#value-prop">setValue</db:link>(2.555) will cause <db:link xlink:href="qdoublespinbox.xml#value-prop">value</db:link>() to return 2.56.</db:para>
<db:para>Clicking the up and down buttons or using the keyboard accelerator's Up and Down arrows will increase or decrease the current value in steps of size <db:link xlink:href="qdoublespinbox.xml#singleStep-prop">singleStep</db:link>(). If you want to change this behavior you can reimplement the virtual function <db:link xlink:href="qabstractspinbox.xml#stepBy">stepBy</db:link>(). The minimum and maximum value and the step size can be set using one of the constructors, and can be changed later with <db:link xlink:href="qdoublespinbox.xml#minimum-prop">setMinimum</db:link>(), <db:link xlink:href="qdoublespinbox.xml#maximum-prop">setMaximum</db:link>() and <db:link xlink:href="qdoublespinbox.xml#singleStep-prop">setSingleStep</db:link>(). The spinbox has a default precision of 2 decimal places but this can be changed using <db:link xlink:href="qdoublespinbox.xml#decimals-prop">setDecimals</db:link>().</db:para>
<db:para>Most spin boxes are directional, but <db:link xlink:href="qdoublespinbox.xml">QDoubleSpinBox</db:link> can also operate as a circular spin box, i.e. if the range is 0.0-99.9 and the current value is 99.9, clicking &quot;up&quot; will give 0 if <db:link xlink:href="qabstractspinbox.xml#wrapping-prop">wrapping</db:link>() is set to true. Use <db:link xlink:href="qabstractspinbox.xml#wrapping-prop">setWrapping</db:link>() if you want circular behavior.</db:para>
<db:para>The displayed value can be prepended and appended with arbitrary strings indicating, for example, currency or the unit of measurement. See <db:link xlink:href="qdoublespinbox.xml#prefix-prop">setPrefix</db:link>() and <db:link xlink:href="qdoublespinbox.xml#suffix-prop">setSuffix</db:link>(). The text in the spin box is retrieved with <db:link xlink:href="qabstractspinbox.xml#text-prop">text</db:link>() (which includes any <db:link xlink:href="qdoublespinbox.xml#prefix-prop">prefix</db:link>() and <db:link xlink:href="qdoublespinbox.xml#suffix-prop">suffix</db:link>()), or with <db:link xlink:href="qdoublespinbox.xml#cleanText-prop">cleanText</db:link>() (which has no <db:link xlink:href="qdoublespinbox.xml#prefix-prop">prefix</db:link>(), no <db:link xlink:href="qdoublespinbox.xml#suffix-prop">suffix</db:link>() and no leading or trailing whitespace).</db:para>
<db:para>It is often desirable to give the user a special (often default) choice in addition to the range of numeric values. See <db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">setSpecialValueText</db:link>() for how to do this with <db:link xlink:href="qdoublespinbox.xml">QDoubleSpinBox</db:link>.</db:para>
<db:note>
<db:para>The displayed value of the <db:link xlink:href="qdoublespinbox.xml">QDoubleSpinBox</db:link> is limited to 18 characters in addition to eventual prefix and suffix content. This limitation is used to keep the double spin box usable even with extremely large values.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qspinbox.xml">QSpinBox</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link></db:member>
<db:member><db:link xlink:href="qslider.xml">QSlider</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-spinboxes-example.xml">Spin Boxes Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="cleanText-prop">
<db:title>[read-only] cleanText : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>cleanText</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">cleanText</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the text of the spin box excluding any prefix, suffix, or leading or trailing whitespace.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">cleanText</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractspinbox.xml#text-prop">text</db:link></db:member>
<db:member><db:link xlink:href="qdoublespinbox.xml#prefix-prop">QDoubleSpinBox::prefix</db:link></db:member>
<db:member><db:link xlink:href="qdoublespinbox.xml#suffix-prop">QDoubleSpinBox::suffix</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="decimals-prop">
<db:title>decimals : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>decimals</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">decimals</db:synopsisinfo>
<db:synopsisinfo role="setter">setDecimals</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the precision of the spin box, in decimals</db:para>
<db:para>Sets how many decimals the spinbox will use for displaying and interpreting doubles.</db:para>
<db:warning>
<db:para>The maximum value for <db:code role="parameter">decimals</db:code> is DBL_MAX_10_EXP + DBL_DIG (ie. 323) because of the limitations of the double type.</db:para>
</db:warning>
<db:para>Note: The maximum, minimum and value might change as a result of changing this property.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">decimals</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDecimals</db:emphasis>(<db:type>int</db:type> <db:emphasis>prec</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maximum-prop">
<db:title>maximum : double</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>double</db:type>
<db:varname>maximum</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">maximum</db:synopsisinfo>
<db:synopsisinfo role="setter">setMaximum</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the maximum value of the spin box</db:para>
<db:para>When setting this property the <db:link xlink:href="qdoublespinbox.xml#minimum-prop">minimum</db:link> is adjusted if necessary, to ensure that the range remains valid.</db:para>
<db:para>The default maximum value is 99.99.</db:para>
<db:para>Note: The maximum value will be rounded to match the decimals property.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>double</db:type> <db:emphasis role="bold">maximum</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMaximum</db:emphasis>(<db:type>double</db:type> <db:emphasis>max</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdoublespinbox.xml#decimals-prop">decimals</db:link></db:member>
<db:member><db:link xlink:href="qdoublespinbox.xml#setRange">setRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimum-prop">
<db:title>minimum : double</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>double</db:type>
<db:varname>minimum</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">minimum</db:synopsisinfo>
<db:synopsisinfo role="setter">setMinimum</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the minimum value of the spin box</db:para>
<db:para>When setting this property the <db:link xlink:href="qdoublespinbox.xml#maximum-prop">maximum</db:link> is adjusted if necessary to ensure that the range remains valid.</db:para>
<db:para>The default minimum value is 0.0.</db:para>
<db:para>Note: The minimum value will be rounded to match the decimals property.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>double</db:type> <db:emphasis role="bold">minimum</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMinimum</db:emphasis>(<db:type>double</db:type> <db:emphasis>min</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdoublespinbox.xml#decimals-prop">decimals</db:link></db:member>
<db:member><db:link xlink:href="qdoublespinbox.xml#setRange">setRange</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">specialValueText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="prefix-prop">
<db:title>prefix : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>prefix</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">prefix</db:synopsisinfo>
<db:synopsisinfo role="setter">setPrefix</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the spin box's prefix</db:para>
<db:para>The prefix is prepended to the start of the displayed value. Typical use is to display a unit of measurement or a currency symbol. For example:</db:para>
<db:programlisting language="cpp">spinbox-&amp;gt;setPrefix(&quot;$&quot;);
</db:programlisting>
<db:para>To turn off the prefix display, set this property to an empty string. The default is no prefix. The prefix is not displayed when <db:link xlink:href="qdoublespinbox.xml#value-prop">value</db:link>() == <db:link xlink:href="qdoublespinbox.xml#minimum-prop">minimum</db:link>() and <db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">specialValueText</db:link>() is set.</db:para>
<db:para>If no prefix is set, prefix() returns an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">prefix</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPrefix</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>prefix</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdoublespinbox.xml#suffix-prop">suffix</db:link>()</db:member>
<db:member><db:link xlink:href="qdoublespinbox.xml#suffix-prop">setSuffix</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">specialValueText</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">setSpecialValueText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="singleStep-prop">
<db:title>singleStep : double</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>double</db:type>
<db:varname>singleStep</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">singleStep</db:synopsisinfo>
<db:synopsisinfo role="setter">setSingleStep</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the step value</db:para>
<db:para>When the user uses the arrows to change the spin box's value the value will be incremented/decremented by the amount of the singleStep. The default value is 1.0. Setting a singleStep value of less than 0 does nothing.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>double</db:type> <db:emphasis role="bold">singleStep</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSingleStep</db:emphasis>(<db:type>double</db:type> <db:emphasis>val</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="stepType-prop">
<db:title>stepType : StepType</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>StepType</db:type>
<db:varname>stepType</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">stepType</db:synopsisinfo>
<db:synopsisinfo role="setter">setStepType</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the step type.</db:para>
<db:para>The step type can be single step or adaptive decimal step.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstractspinbox.xml#StepType-enum">QAbstractSpinBox::StepType</db:link></db:type> <db:emphasis role="bold">stepType</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qdoublespinbox.xml#setStepType">setStepType</db:link></db:emphasis>(<db:type><db:link xlink:href="qabstractspinbox.xml#StepType-enum">QAbstractSpinBox::StepType</db:link></db:type> <db:emphasis>stepType</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="suffix-prop">
<db:title>suffix : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>suffix</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">suffix</db:synopsisinfo>
<db:synopsisinfo role="setter">setSuffix</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the suffix of the spin box</db:para>
<db:para>The suffix is appended to the end of the displayed value. Typical use is to display a unit of measurement or a currency symbol. For example:</db:para>
<db:programlisting language="cpp">spinbox-&amp;gt;setSuffix(&quot; km&quot;);
</db:programlisting>
<db:para>To turn off the suffix display, set this property to an empty string. The default is no suffix. The suffix is not displayed for the <db:link xlink:href="qdoublespinbox.xml#minimum-prop">minimum</db:link>() if <db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">specialValueText</db:link>() is set.</db:para>
<db:para>If no suffix is set, suffix() returns an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">suffix</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSuffix</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>suffix</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdoublespinbox.xml#prefix-prop">prefix</db:link>()</db:member>
<db:member><db:link xlink:href="qdoublespinbox.xml#prefix-prop">setPrefix</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">specialValueText</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">setSpecialValueText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value-prop">
<db:title>value : double</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>double</db:type>
<db:varname>value</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">value</db:synopsisinfo>
<db:synopsisinfo role="setter">setValue</db:synopsisinfo>
<db:synopsisinfo role="notifier">valueChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the value of the spin box</db:para>
<db:para>setValue() will emit <db:link xlink:href="qdoublespinbox.xml#valueChanged">valueChanged</db:link>() if the new value is different from the old one. The value property has a second notifier signal which includes the spin box's prefix and suffix.</db:para>
<db:para>Note: The value will be rounded so it can be displayed with the current setting of decimals.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>double</db:type> <db:emphasis role="bold">value</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setValue</db:emphasis>(<db:type>double</db:type> <db:emphasis>val</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qdoublespinbox.xml#valueChanged">valueChanged</db:link></db:emphasis>(<db:type>double</db:type> <db:emphasis>d</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdoublespinbox.xml#decimals-prop">decimals</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDoubleSpinBox">
<db:title>[explicit] QDoubleSpinBox::QDoubleSpinBox(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QDoubleSpinBox</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QDoubleSpinBox(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a spin box with 0.0 as minimum value and 99.99 as maximum value, a step value of 1.0 and a precision of 2 decimal places. The value is initially set to 0.00. The spin box has the given <db:code role="parameter">parent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdoublespinbox.xml#minimum-prop">setMinimum</db:link>()</db:member>
<db:member><db:link xlink:href="qdoublespinbox.xml#maximum-prop">setMaximum</db:link>()</db:member>
<db:member><db:link xlink:href="qdoublespinbox.xml#singleStep-prop">setSingleStep</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QDoubleSpinBox">
<db:title>[virtual] QDoubleSpinBox::~QDoubleSpinBox()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QDoubleSpinBox</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QDoubleSpinBox()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="fixup">
<db:title>[override virtual] void QDoubleSpinBox::fixup(QString &amp;<db:emphasis>input</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>fixup</db:methodname>
<db:methodparam>
<db:type>QString &amp;</db:type>
<db:parameter>input</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fixup(QString &amp;input) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractspinbox.xml#fixup" role="function">QAbstractSpinBox::fixup(QString &amp;input) const</db:link>.</db:para>
</db:section>
<db:section xml:id="setRange">
<db:title>void QDoubleSpinBox::setRange(double <db:emphasis>minimum</db:emphasis>, double <db:emphasis>maximum</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRange</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>minimum</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>maximum</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRange(double minimum, double maximum)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function to set the <db:code role="parameter">minimum</db:code> and <db:code role="parameter">maximum</db:code> values with a single function call.</db:para>
<db:para>Note: The maximum and minimum values will be rounded to match the decimals property.</db:para>
<db:programlisting language="cpp">setRange(minimum, maximum);
</db:programlisting>
<db:para>is equivalent to:</db:para>
<db:programlisting language="cpp">setMinimum(minimum);
setMaximum(maximum);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdoublespinbox.xml#minimum-prop">minimum</db:link></db:member>
<db:member><db:link xlink:href="qdoublespinbox.xml#maximum-prop">maximum</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStepType">
<db:title>[since 5.12] void QDoubleSpinBox::setStepType(QAbstractSpinBox::StepType <db:emphasis>stepType</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStepType</db:methodname>
<db:methodparam>
<db:type>QAbstractSpinBox::StepType</db:type>
<db:parameter>stepType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">stepType</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStepType(QAbstractSpinBox::StepType stepType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the step type for the spin box to <db:code role="parameter">stepType</db:code>, which is single step or adaptive decimal step.</db:para>
<db:para>Adaptive decimal step means that the step size will continuously be adjusted to one power of ten below the current <db:link xlink:href="qdoublespinbox.xml#value-prop">value</db:link>. So when the value is 1100, the step is set to 100, so stepping up once increases it to 1200. For 1200 stepping up takes it to 1300. For negative values, stepping down from -1100 goes to -1200.</db:para>
<db:para>It also works for any decimal values, 0.041 is increased to 0.042 by stepping once.</db:para>
<db:para>Step direction is taken into account to handle edges cases, so that stepping down from 100 takes the value to 99 instead of 90. Thus a step up followed by a step down – or vice versa – always lands on the starting value; 99 -&gt; 100 -&gt; 99.</db:para>
<db:para>Setting this will cause the spin box to disregard the value of <db:link xlink:href="qdoublespinbox.xml#singleStep-prop">singleStep</db:link>, although it is preserved so that <db:link xlink:href="qdoublespinbox.xml#singleStep-prop">singleStep</db:link> comes into effect if adaptive decimal step is later turned off.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qdoublespinbox.xml#stepType-prop">stepType</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdoublespinbox.xml#stepType-prop">stepType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textChanged">
<db:title>[since 5.14] void QDoubleSpinBox::textChanged(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>textChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void textChanged(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the spin box's text is changed. The new text is passed in <db:code role="parameter">text</db:code> with <db:link xlink:href="qdoublespinbox.xml#prefix-prop">prefix</db:link>() and <db:link xlink:href="qdoublespinbox.xml#suffix-prop">suffix</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="textFromValue">
<db:title>[virtual] QString QDoubleSpinBox::textFromValue(double <db:emphasis>value</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>textFromValue</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString textFromValue(double value) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is used by the spin box whenever it needs to display the given <db:code role="parameter">value</db:code>. The default implementation returns a string containing <db:code role="parameter">value</db:code> printed using <db:link xlink:href="qwidget.xml#locale-prop">QWidget::locale</db:link>().toString(<db:code role="parameter">value</db:code>, <db:link xlink:href="qlatin1char.xml">QLatin1Char</db:link>('f'), <db:link xlink:href="qdoublespinbox.xml#decimals-prop">decimals</db:link>()) and will remove the thousand separator unless <db:link xlink:href="qabstractspinbox.xml#showGroupSeparator-prop">setGroupSeparatorShown</db:link>() is set. Reimplementations may return anything.</db:para>
<db:para>Note: <db:link xlink:href="qdoublespinbox.xml">QDoubleSpinBox</db:link> does not call this function for <db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">specialValueText</db:link>() and that neither <db:link xlink:href="qdoublespinbox.xml#prefix-prop">prefix</db:link>() nor <db:link xlink:href="qdoublespinbox.xml#suffix-prop">suffix</db:link>() should be included in the return value.</db:para>
<db:para>If you reimplement this, you may also need to reimplement <db:link xlink:href="qdoublespinbox.xml#valueFromText">valueFromText</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdoublespinbox.xml#valueFromText">valueFromText</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#groupSeparator">QLocale::groupSeparator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="validate">
<db:title>[override virtual] QValidator::State QDoubleSpinBox::validate(QString &amp;<db:emphasis>text</db:emphasis>, int &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QValidator::State</db:type>
<db:methodname>validate</db:methodname>
<db:methodparam>
<db:type>QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QValidator::State validate(QString &amp;text, int &amp;pos) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractspinbox.xml#validate" role="function">QAbstractSpinBox::validate(QString &amp;input, int &amp;pos) const</db:link>.</db:para>
</db:section>
<db:section xml:id="valueChanged">
<db:title>void QDoubleSpinBox::valueChanged(double <db:emphasis>d</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>valueChanged</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>d</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">value</db:synopsisinfo>
<db:synopsisinfo role="signature">void valueChanged(double d)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the spin box's value is changed. The new value is passed in <db:code role="parameter">d</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qdoublespinbox.xml#value-prop">value</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="valueFromText">
<db:title>[virtual] double QDoubleSpinBox::valueFromText(const QString &amp;<db:emphasis>text</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>double</db:type>
<db:methodname>valueFromText</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">double valueFromText(const QString &amp;text) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is used by the spin box whenever it needs to interpret <db:code role="parameter">text</db:code> entered by the user as a value.</db:para>
<db:para>Subclasses that need to display spin box values in a non-numeric way need to reimplement this function.</db:para>
<db:para>Note: <db:link xlink:href="qdoublespinbox.xml">QDoubleSpinBox</db:link> handles <db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">specialValueText</db:link>() separately; this function is only concerned with the other values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdoublespinbox.xml#textFromValue">textFromValue</db:link>()</db:member>
<db:member><db:link xlink:href="qdoublespinbox.xml#validate">validate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
