<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAudioSystemPlugin Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaudiosystemplugin.xml">QAudioSystemPlugin</db:link> class provides an abstract base for audio plugins.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAudioSystemPlugin</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link> and <db:link xlink:href="qaudiosystemfactoryinterface.xml" xlink:role="class">QAudioSystemFactoryInterface</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAudioSystemPlugin is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_audio</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Writing a audio plugin is achieved by subclassing this base class, reimplementing the pure virtual functions <db:link xlink:href="qaudiosystemplugin.xml#availableDevices">availableDevices</db:link>(), <db:link xlink:href="qaudiosystemplugin.xml#createInput">createInput</db:link>(), <db:link xlink:href="qaudiosystemplugin.xml#createOutput">createOutput</db:link>() and <db:link xlink:href="qaudiosystemplugin.xml#createDeviceInfo">createDeviceInfo</db:link>() then exporting the class with the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro.</db:para>
<db:para>The json file containing the meta data should contain a list of keys matching the plugin. Add &quot;default&quot; to your list of keys available to override the default audio device to be provided by your plugin.</db:para>
<db:programlisting language="cpp">{ &quot;Keys&quot;: [ &quot;default&quot; ] }
</db:programlisting>
<db:para>Unit tests are available to help in debugging new plugins.</db:para>
<db:para>Qt comes with plugins for Windows (WinMM and WASAPI), Linux (ALSA and PulseAudio), macOS / iOS (CoreAudio), Android (OpenSL ES) and QNX.</db:para>
<db:para>If no audio plugins are available, a fallback dummy backend will be used. This should print out warnings if this is the case when you try and use <db:link xlink:href="qaudioinput.xml">QAudioInput</db:link> or <db:link xlink:href="qaudiooutput.xml">QAudioOutput</db:link>. To fix this problem, make sure the dependencies for the Qt plugins are installed on the system and reconfigure Qt (e.g. alsa-devel package on Linux), or create your own plugin with a default key to always override the dummy fallback. The easiest way to determine if you have only a dummy backend is to get a list of available audio devices.</db:para>
<db:para><db:link xlink:href="qaudiodeviceinfo.xml#availableDevices">QAudioDeviceInfo::availableDevices</db:link>(<db:link xlink:href="qaudio.xml#Mode-enum">QAudio::AudioOutput</db:link>).<db:link xlink:href="qml-qtquick-controls2-stackview.xml#size">size()</db:link> = 0 (dummy backend)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractaudiodeviceinfo.xml">QAbstractAudioDeviceInfo</db:link></db:member>
<db:member><db:link xlink:href="qabstractaudiooutput.xml">QAbstractAudioOutput</db:link></db:member>
<db:member><db:link xlink:href="qabstractaudioinput.xml">QAbstractAudioInput</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAudioSystemPlugin">
<db:title>[explicit] QAudioSystemPlugin::QAudioSystemPlugin(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QAudioSystemPlugin</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioSystemPlugin(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new audio plugin with <db:code role="parameter">parent</db:code>. This is invoked automatically by the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro.</db:para>
</db:section>
<db:section xml:id="dtor.QAudioSystemPlugin">
<db:title>[virtual] QAudioSystemPlugin::~QAudioSystemPlugin()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAudioSystemPlugin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAudioSystemPlugin()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the audio plugin. You never have to call this explicitly. Qt destroys a plugin automatically when it is no longer used.</db:para>
</db:section>
<db:section xml:id="availableDevices">
<db:title>[override pure virtual] QList&lt;QByteArray&gt; QAudioSystemPlugin::availableDevices(QAudio::Mode <db:emphasis>mode</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QByteArray&gt;</db:type>
<db:methodname>availableDevices</db:methodname>
<db:methodparam>
<db:type>QAudio::Mode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QByteArray&gt; availableDevices(QAudio::Mode mode) const override = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of available audio devices for <db:code role="parameter">mode</db:code></db:para>
</db:section>
<db:section xml:id="createDeviceInfo">
<db:title>[override pure virtual] QAbstractAudioDeviceInfo *QAudioSystemPlugin::createDeviceInfo(const QByteArray &amp;<db:emphasis>device</db:emphasis>, QAudio::Mode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QAbstractAudioDeviceInfo *</db:type>
<db:methodname>createDeviceInfo</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAudio::Mode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractAudioDeviceInfo * createDeviceInfo(const QByteArray &amp;device, QAudio::Mode mode) override = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to a <db:link xlink:href="qabstractaudiodeviceinfo.xml">QAbstractAudioDeviceInfo</db:link> created using <db:code role="parameter">device</db:code> and <db:code role="parameter">mode</db:code></db:para>
</db:section>
<db:section xml:id="createInput">
<db:title>[override pure virtual] QAbstractAudioInput *QAudioSystemPlugin::createInput(const QByteArray &amp;<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QAbstractAudioInput *</db:type>
<db:methodname>createInput</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractAudioInput * createInput(const QByteArray &amp;device) override = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to a <db:link xlink:href="qabstractaudioinput.xml">QAbstractAudioInput</db:link> created using <db:code role="parameter">device</db:code> identifier</db:para>
</db:section>
<db:section xml:id="createOutput">
<db:title>[override pure virtual] QAbstractAudioOutput *QAudioSystemPlugin::createOutput(const QByteArray &amp;<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QAbstractAudioOutput *</db:type>
<db:methodname>createOutput</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractAudioOutput * createOutput(const QByteArray &amp;device) override = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to a <db:link xlink:href="qabstractaudiooutput.xml">QAbstractAudioOutput</db:link> created using <db:code role="parameter">device</db:code> identifier</db:para>
</db:section>
</db:section>
</db:article>
