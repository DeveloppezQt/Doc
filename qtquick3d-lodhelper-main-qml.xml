<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Level of Detail Helper Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates the use of level of detail helper.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2022 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick3D
import QtQuick3D.Helpers

Window {
    id: window
    width: 1280
    height: 720
    visible: true

    View3D {
        id: view
        anchors.fill: parent

        environment: SceneEnvironment {
            clearColor: &quot;black&quot;
            backgroundMode: SceneEnvironment.Color
            antialiasingMode: SceneEnvironment.MSAA
            antialiasingQuality: SceneEnvironment.High
        }

        PerspectiveCamera {
            id: camera
            position: Qt.vector3d(0, 10, 300)
            clipNear: 1.0
            NumberAnimation on z {
                from: 200
                to: -100
                duration: 40 * 1000
            }
        }

        DirectionalLight {
            eulerRotation.x: -30
            eulerRotation.y: -70
            ambientColor: Qt.rgba(0.5, 0.5, 0.5, 1.0)
        }

        RandomInstancing {
            id: randomInstancing
            instanceCount: 800

            position: InstanceRange {
                from: Qt.vector3d(-200, 0, -200)
                to: Qt.vector3d(200, 1, 200)
            }
            scale: InstanceRange {
                from: Qt.vector3d(10, 10, 10)
                to: Qt.vector3d(10, 10, 10)
            }
            rotation: InstanceRange {
                from: Qt.vector3d(0, 0, 0)
                to: Qt.vector3d(0, 0, 0)
            }
            color: InstanceRange {
                from: &quot;grey&quot;
                to: &quot;white&quot;
                proportional: true
            }

            randomSeed: 2021
        }

        PrincipledMaterial {
            id: marbleMaterial
            baseColorMap: Texture {
                source: &quot;maps/baseColor.png&quot;
                generateMipmaps: true
                mipFilter: Texture.Linear
            }
            opacityChannel: Material.A
            metalnessMap: Texture {
                source: &quot;maps/occlusionRoughnessMetallic.png&quot;
                generateMipmaps: true
                mipFilter: Texture.Linear
            }
            metalnessChannel: Material.B
            roughnessMap: Texture {
                source: &quot;maps/occlusionRoughnessMetallic.png&quot;
                generateMipmaps: true
                mipFilter: Texture.Linear
            }
            roughnessChannel: Material.G
            metalness: 1
            roughness: 1
            normalMap: Texture {
                source: &quot;maps/normal.png&quot;
                generateMipmaps: true
                mipFilter: Texture.Linear
            }
        }

        LodManager {
            camera: camera
            distances: [100, 140, 180]
            fadeDistance: 10

            Model {
                scale: Qt.vector3d(100, 100, 100);
                source: &quot;meshes/marble_bust_01_LOD_0.mesh&quot;
                materials: [ marbleMaterial ]
            }

            Model {
                scale: Qt.vector3d(100, 100, 100);
                source: &quot;meshes/marble_bust_01_LOD_1.mesh&quot;
                materials: [ marbleMaterial ]
            }

            Model {
                scale: Qt.vector3d(100, 100, 100);
                source: &quot;meshes/marble_bust_01_LOD_2.mesh&quot;
                materials: [ marbleMaterial ]
            }

            Model {
                scale: Qt.vector3d(100, 100, 100);
                source: &quot;meshes/marble_bust_01_LOD_3.mesh&quot;
                materials: [ marbleMaterial ]
            }
        }

        LodManager {
            camera: camera
            distances: [50, 100, 150]

            Model {
                instancing: randomInstancing
                source: &quot;#Sphere&quot;
                materials: [
                    PrincipledMaterial {
                        metalness: 0
                        roughness: 1
                        baseColor: &quot;red&quot;
                    }
                ]
                scale: Qt.vector3d(0.005, 0.005, 0.005)
            }

            Model {
                instancing: randomInstancing
                source: &quot;#Cylinder&quot;
                materials: [
                    PrincipledMaterial {
                        metalness: 0
                        roughness: 1
                        baseColor: &quot;orange&quot;
                    }
                ]
                scale: Qt.vector3d(0.005, 0.005, 0.005)
            }

            Model {
                instancing: randomInstancing
                source: &quot;#Cube&quot;
                materials: [
                    PrincipledMaterial {
                        metalness: 0
                        roughness: 1
                        baseColor: &quot;yellow&quot;
                    }
                ]
                scale: Qt.vector3d(0.005, 0.005, 0.005)
            }

            Model {
                instancing: randomInstancing
                source: &quot;#Rectangle&quot;
                materials: [
                    PrincipledMaterial {
                        metalness: 0
                        roughness: 1
                        baseColor: &quot;green&quot;
                    }
                ]
                scale: Qt.vector3d(0.005, 0.005, 0.005)
            }
        }
    }

    DebugView {
        source: view
    }
}

</db:programlisting>
</db:article>
