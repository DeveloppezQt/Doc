<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Tool Tips Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Tool Tips example shows how to provide static and dynamic tool tips for an application's widgets.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The simplest and most common way to set a widget's tool tip is by calling its <db:link xlink:href="qwidget.xml#toolTip-prop">QWidget::setToolTip</db:link>() function (static tool tips). Then the tool tip is shown whenever the cursor points at the widget. We show how to do this with our application's tool buttons. But it is also possible to show different tool tips depending on the cursor's position (dynamic tooltips). This approach uses mouse tracking and event handling to determine what widgets are located under the cursor at any point in time, and displays their tool tips. The tool tips for the shape items in our application are implemented using the latter approach.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/tooltips-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>With the Tooltips application the user can create new shape items with the provided tool buttons, and move the items around using the mouse. Tooltips are provided whenever the cursor is pointing to a shape item or one of the buttons.</db:para>
<db:para>The Tooltips example consists of two classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>ShapeItem is a custom widget representing one single shape item.</db:para>
</db:listitem>
<db:listitem>
<db:para>SortingBox inherits from <db:link xlink:href="qwidget.xml">QWidget</db:link> and is the application's main widget.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>First we will review the SortingBox class, then we will take a look at the ShapeItem class.</db:para>
<db:section xml:id="sortingbox-class-definition">
<db:title>SortingBox Class Definition</db:title>
<db:programlisting language="cpp">class SortingBox : public QWidget
{
    Q_OBJECT

public:
    SortingBox();

protected:
    bool event(QEvent *event) override;
    void resizeEvent(QResizeEvent *event) override;
    void paintEvent(QPaintEvent *event) override;
    void mousePressEvent(QMouseEvent *event) override;
    void mouseMoveEvent(QMouseEvent *event) override;
    void mouseReleaseEvent(QMouseEvent *event) override;

private slots:
    void createNewCircle();
    void createNewSquare();
    void createNewTriangle();
</db:programlisting>
<db:para>The SortingBox class inherits <db:link xlink:href="qwidget.xml">QWidget</db:link>, and it is the Tooltips application's main widget. We reimplement several of the event handlers.</db:para>
<db:para>The event() function provides tooltips, the resize() function makes sure the application appears consistently when the user resizes the main widget, and the paintEvent() function displays the shape items within the SortingBox widget. The mouse event handlers are reimplemented to make the user able to move the items around.</db:para>
<db:para>In addition we need three private slots to make the user able to create new shape items.</db:para>
<db:programlisting language="cpp">private:
    int updateButtonGeometry(QToolButton *button, int x, int y);
    void createShapeItem(const QPainterPath &amp;path, const QString &amp;toolTip,
                         const QPoint &amp;pos, const QColor &amp;color);
    int itemAt(const QPoint &amp;pos);
    void moveItemTo(const QPoint &amp;pos);
    QPoint initialItemPosition(const QPainterPath &amp;path);
    QPoint randomItemPosition();
    QColor initialItemColor();
    QColor randomItemColor();
    QToolButton *createToolButton(const QString &amp;toolTip, const QIcon &amp;icon,
</db:programlisting>
<db:para>We also create several private functions: We use the initialItemPosition(), initialItemColor() and createToolButton() functions when we are constructing the widget, and we use the updateButtonGeometry() function whenever the user is resizing the application's main widget.</db:para>
<db:para>The itemAt() function determines if there is a shape item at a particular position, and the moveItemTo() function moves an item to a new position. We use the createShapeItem(), randomItemPosition() and randomItemColor() functions to create new shape items.</db:para>
<db:programlisting language="cpp">    QList&lt;ShapeItem&gt; shapeItems;
    QPainterPath circlePath;
    QPainterPath squarePath;
    QPainterPath trianglePath;

    QPoint previousPosition;
    ShapeItem *itemInMotion;

    QToolButton *newCircleButton;
    QToolButton *newSquareButton;
    QToolButton *newTriangleButton;
};
</db:programlisting>
<db:para>We keep all the shape items in a <db:link xlink:href="qlist.xml">QList</db:link>, and we keep three <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> objects holding the shapes of a circle, a square and a triangle. We also need to have a pointer to an item when it is moving, and we need to know its previous position.</db:para>
</db:section>
<db:section xml:id="sortingbox-class-implementation">
<db:title>SortingBox Class Implementation</db:title>
<db:programlisting language="cpp">SortingBox::SortingBox()
{
</db:programlisting>
<db:para>In the constructor, we first set the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_StaticContents</db:link> attribute on the widget. This attribute indicates that the widget contents are north-west aligned and static. On resize, such a widget will receive paint events only for the newly visible part of itself.</db:para>
<db:programlisting language="cpp">    setMouseTracking(true);
</db:programlisting>
<db:para>To be able to show the appropriate tooltips while the user is moving the cursor around, we need to enable mouse tracking for the widget.</db:para>
<db:para>If mouse tracking is disabled (the default), the widget only receives mouse move events when at least one mouse button is pressed while the mouse is being moved. If mouse tracking is enabled, the widget receives mouse move events even if no buttons are pressed.</db:para>
<db:programlisting language="cpp">    setBackgroundRole(QPalette::Base);
</db:programlisting>
<db:para>A widget's background role defines the brush from the widget's palette that is used to render the background, and <db:link xlink:href="qpalette.xml#ColorRole-enum">QPalette::Base</db:link> is typically white.</db:para>
<db:programlisting language="cpp">    newCircleButton = createToolButton(tr(&quot;New Circle&quot;),
                                       QIcon(&quot;:/images/circle.png&quot;),
                                       SLOT(createNewCircle()));

    newSquareButton = createToolButton(tr(&quot;New Square&quot;),
                                       QIcon(&quot;:/images/square.png&quot;),
                                       SLOT(createNewSquare()));

    newTriangleButton = createToolButton(tr(&quot;New Triangle&quot;),
                                         QIcon(&quot;:/images/triangle.png&quot;),
                                         SLOT(createNewTriangle()));

    circlePath.addEllipse(QRect(0, 0, 100, 100));
    squarePath.addRect(QRect(0, 0, 100, 100));

    qreal x = trianglePath.currentPosition().x();
    qreal y = trianglePath.currentPosition().y();
    trianglePath.moveTo(x + 120 / 2, y);
    trianglePath.lineTo(0, 100);
    trianglePath.lineTo(120, 100);
    trianglePath.lineTo(x + 120 / 2, y);

</db:programlisting>
<db:para>After creating the application's tool buttons using the private createToolButton() function, we construct the shapes of a circle, a square and a triangle using <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link>.</db:para>
<db:para>The <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> class provides a container for painting operations, enabling graphical shapes to be constructed and reused. The main advantage of painter paths over normal drawing operations is that complex shapes only need to be created once, but they can be drawn many times using only calls to <db:link xlink:href="qpainter.xml#drawPath">QPainter::drawPath</db:link>().</db:para>
<db:programlisting language="cpp">    setWindowTitle(tr(&quot;Tool Tips&quot;));
    resize(500, 300);

    createShapeItem(circlePath, tr(&quot;Circle&quot;), initialItemPosition(circlePath),
                    initialItemColor());
    createShapeItem(squarePath, tr(&quot;Square&quot;), initialItemPosition(squarePath),
                    initialItemColor());
    createShapeItem(trianglePath, tr(&quot;Triangle&quot;),
                    initialItemPosition(trianglePath), initialItemColor());
}
</db:programlisting>
<db:para>Then we set the window title, resize the widget to a suitable size, and finally create three initial shape items using the private createShapeItem(), initialItemPosition() and initialItemColor() functions.</db:para>
<db:programlisting language="cpp">bool SortingBox::event(QEvent *event)
{
</db:programlisting>
<db:para><db:link xlink:href="qwidget.xml#event">QWidget::event</db:link>() is the main event handler and receives all the widget's events. Normally, we recommend reimplementing one of the specialized event handlers instead of this function. But here we want to catch the <db:link xlink:href="qevent.xml#Type-enum">QEvent::ToolTip</db:link> events, and since these are rather rare, there exists no specific event handler. For that reason we reimplement the main event handler, and the first thing we need to do is to determine the event's type:</db:para>
<db:programlisting language="cpp">    if (event-&gt;type() == QEvent::ToolTip) {
        QHelpEvent *helpEvent = static_cast&lt;QHelpEvent *&gt;(event);
        int index = itemAt(helpEvent-&gt;pos());
        if (index != -1) {
            QToolTip::showText(helpEvent-&gt;globalPos(), shapeItems[index].toolTip());
        } else {
            QToolTip::hideText();
            event-&gt;ignore();
        }

        return true;
    }
    return QWidget::event(event);
}
</db:programlisting>
<db:para>If the type is <db:link xlink:href="qevent.xml#Type-enum">QEvent::ToolTip</db:link>, we cast the event to a <db:link xlink:href="qhelpevent.xml">QHelpEvent</db:link>, otherwise we propagate the event using the <db:link xlink:href="qwidget.xml#event">QWidget::event</db:link>() function.</db:para>
<db:para>The <db:link xlink:href="qhelpevent.xml">QHelpEvent</db:link> class provides an event that is used to request helpful information about a particular point in a widget.</db:para>
<db:para>For example, the <db:link xlink:href="qhelpevent.xml#pos">QHelpEvent::pos</db:link>() function returns the event's position relative to the widget to which the event is dispatched. Here we use this information to determine if the position of the event is contained within the area of any of the shape items. If it is, we display the shape item's tooltip at the position of the event. If not, we hide the tooltip and explicitly ignore the event. This makes sure that the calling code does not start any tooltip specific modes as a result of the event. Note that the <db:link xlink:href="qtooltip.xml#showText">QToolTip::showText</db:link>() function needs the event's position in global coordinates provided by <db:link xlink:href="qhelpevent.xml#globalPos">QHelpEvent::globalPos</db:link>().</db:para>
<db:programlisting language="cpp">void SortingBox::resizeEvent(QResizeEvent * /* event */)
{
    int margin = style()-&gt;pixelMetric(QStyle::PM_DefaultTopLevelMargin);
    int x = width() - margin;
    int y = height() - margin;

    y = updateButtonGeometry(newCircleButton, x, y);
    y = updateButtonGeometry(newSquareButton, x, y);
    updateButtonGeometry(newTriangleButton, x, y);
}
</db:programlisting>
<db:para>The resizeEvent() function is reimplemented to receive the resize events dispatched to the widget. It makes sure that the tool buttons keep their position relative to the main widget when the widget is resized. We want the buttons to always be vertically aligned in the application's bottom right corner, so each time the main widget is resized we update the buttons geometry.</db:para>
<db:programlisting language="cpp">void SortingBox::paintEvent(QPaintEvent * /* event */)
{
    QPainter painter(this);
    painter.setRenderHint(QPainter::Antialiasing);
    foreach (ShapeItem shapeItem, shapeItems) {
</db:programlisting>
<db:para>The paintEvent() function is reimplemented to receive paint events for the widget. We create a <db:link xlink:href="qpainter.xml">QPainter</db:link> for the SortingBox widget, and run through the list of created shape items, drawing each item at its defined position.</db:para>
<db:programlisting language="cpp">        painter.translate(shapeItem.position());
</db:programlisting>
<db:para>The painter will by default draw all the shape items at position (0,0) in the SortingBox widget. The <db:link xlink:href="qpainter.xml#translate">QPainter::translate</db:link>() function translates the coordinate system by the given offset, making each shape item appear at its defined position. But remember to translate the coordinate system back when the item is drawn, otherwise the next shape item will appear at a position relative to the item we drawed last.</db:para>
<db:programlisting language="cpp">        painter.setBrush(shapeItem.color());
        painter.drawPath(shapeItem.path());
        painter.translate(-shapeItem.position());
    }
}
</db:programlisting>
<db:para>The <db:link xlink:href="qpainter.xml#setBrush">QPainter::setBrush</db:link>() function sets the current brush used by the painter. When the provided argument is a <db:link xlink:href="qcolor.xml">QColor</db:link>, the function calls the appropriate <db:link xlink:href="qbrush.xml">QBrush</db:link> constructor which creates a brush with the specified color and <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::SolidPattern</db:link> style. The <db:link xlink:href="qpainter.xml#drawPath">QPainter::drawPath</db:link>() function draws the given path using the current pen for outline and the current brush for filling.</db:para>
<db:programlisting language="cpp">void SortingBox::mousePressEvent(QMouseEvent *event)
{
    if (event-&gt;button() == Qt::LeftButton) {
        int index = itemAt(event-&gt;pos());
        if (index != -1) {
            itemInMotion = &amp;shapeItems[index];
            previousPosition = event-&gt;pos();
            shapeItems.move(index, shapeItems.size() - 1);
            update();
        }
    }
}
</db:programlisting>
<db:para>The mousePressEvent() function is reimplemented to receive the mouse press events dispatched to the widget. It determines if an event's position is contained within the area of any of the shape items, using the private itemAt() function.</db:para>
<db:para>If an item covers the position, we store a pointer to that item and the event's position. If several of the shape items cover the position, we store the pointer to the uppermost item. Finally, we move the shape item to the end of the list, and make a call to the <db:link xlink:href="qwidget.xml#update">QWidget::update</db:link>() function to make the item appear on top.</db:para>
<db:para>The <db:link xlink:href="qwidget.xml#update">QWidget::update</db:link>() function does not cause an immediate repaint; instead it schedules a paint event for processing when Qt returns to the main event loop.</db:para>
<db:programlisting language="cpp">void SortingBox::mouseMoveEvent(QMouseEvent *event)
{
    if ((event-&gt;buttons() &amp; Qt::LeftButton) &amp;&amp; itemInMotion)
        moveItemTo(event-&gt;pos());
}
</db:programlisting>
<db:para>The mouseMoveEvent() function is reimplemented to receive mouse move events for the widget. If the left mouse button is pressed and there exists a shape item in motion, we use the private moveItemTo() function to move the item with an offset corresponding to the offset between the positions of the current mouse event and the previous one.</db:para>
<db:programlisting language="cpp">void SortingBox::mouseReleaseEvent(QMouseEvent *event)
{
    if (event-&gt;button() == Qt::LeftButton &amp;&amp; itemInMotion) {
        moveItemTo(event-&gt;pos());
        itemInMotion = 0;
    }
}
</db:programlisting>
<db:para>The mouseReleaseEvent() function is reimplemented to receive the mouse release events dispatched to the widget. If the left mouse button is pressed and there exists a shape item in motion, we use the private moveItemTo() function to move the item like we did in mouseMoveEvent(). But then we remove the pointer to the item in motion, making the shape item's position final for now. To move the item further, the user will need to press the left mouse button again.</db:para>
<db:programlisting language="cpp">void SortingBox::createNewCircle()
{
    static int count = 1;
    createShapeItem(circlePath, tr(&quot;Circle &lt;%1&gt;&quot;).arg(++count),
                    randomItemPosition(), randomItemColor());
}

void SortingBox::createNewSquare()
{
    static int count = 1;
    createShapeItem(squarePath, tr(&quot;Square &lt;%1&gt;&quot;).arg(++count),
                    randomItemPosition(), randomItemColor());
}

void SortingBox::createNewTriangle()
{
    static int count = 1;
    createShapeItem(trianglePath, tr(&quot;Triangle &lt;%1&gt;&quot;).arg(++count),
                    randomItemPosition(), randomItemColor());
}
</db:programlisting>
<db:para>The createNewCircle(), createNewSquare() and createNewTriangle() slots simply create new shape items, using the private createShapeItem(), randomItemPosition() and randomItemColor() functions.</db:para>
<db:programlisting language="cpp">int SortingBox::itemAt(const QPoint &amp;pos)
{
    for (int i = shapeItems.size() - 1; i &gt;= 0; --i) {
        const ShapeItem &amp;item = shapeItems[i];
        if (item.path().contains(pos - item.position()))
            return i;
    }
    return -1;
}
</db:programlisting>
<db:para>In the itemAt() function, we run through the list of created shape items to check if the given position is contained within the area of any of the shape items.</db:para>
<db:para>For each shape item we use the <db:link xlink:href="qpainterpath.xml#contains">QPainterPath::contains</db:link>() function to find out if the item's painter path contains the position. If it does we return the index of the item, otherwise we return -1. We run through the list backwards to get the index of the uppermost shape item in case several items cover the position.</db:para>
<db:programlisting language="cpp">void SortingBox::moveItemTo(const QPoint &amp;pos)
{
    QPoint offset = pos - previousPosition;
    itemInMotion-&gt;setPosition(itemInMotion-&gt;position() + offset);
</db:programlisting>
<db:para>The moveItemTo() function moves the shape item in motion, and the parameter pos is the position of a mouse event. First we calculate the offset between the parameter pos and the previous mouse event position. Then we add the offset to the current position of the item in motion.</db:para>
<db:para>It is tempting to simply set the position of the item to be the parameter pos. But an item's position defines the top left corner of the item's bounding rectangle, and the parameter pos can be any point; The suggested shortcut would cause the item to jump to a position where the cursor is pointing to the bounding rectangle's top left corner, regardless of the item's previous position.</db:para>
<db:programlisting language="cpp">    previousPosition = pos;
    update();
}
</db:programlisting>
<db:para>Finally, we update the previous mouse event position, and make a call to the <db:link xlink:href="qwidget.xml#update">QWidget::update</db:link>() function to make the item appear at its new position.</db:para>
<db:programlisting language="cpp">int SortingBox::updateButtonGeometry(QToolButton *button, int x, int y)
{
    QSize size = button-&gt;sizeHint();
    button-&gt;setGeometry(x - size.rwidth(), y - size.rheight(),
                        size.rwidth(), size.rheight());

    return y - size.rheight()
           - style()-&gt;pixelMetric(QStyle::PM_DefaultLayoutSpacing);
}
</db:programlisting>
<db:para>In the updateButtonGeometry() function we set the geometry for the given button. The parameter coordinates define the bottom right corner of the button. We use these coordinates and the button's size hint to determine the position of the upper left corner. This position, and the button's width and height, are the arguments required by the <db:link xlink:href="qwidget.xml#geometry-prop">QWidget::setGeometry</db:link>() function.</db:para>
<db:para>In the end, we calculate and return the y-coordinate of the bottom right corner of the next button. We use the <db:link xlink:href="qwidget.xml#style">QWidget::style</db:link>() function to retrieve the widget's GUI style, and then <db:link xlink:href="qstyle.xml#pixelMetric">QStyle::pixelMetric</db:link>() to determine the widget's preferred default spacing between its child widgets.</db:para>
<db:programlisting language="cpp">void SortingBox::createShapeItem(const QPainterPath &amp;path,
                                 const QString &amp;toolTip, const QPoint &amp;pos,
                                 const QColor &amp;color)
{
    ShapeItem shapeItem;
    shapeItem.setPath(path);
    shapeItem.setToolTip(toolTip);
    shapeItem.setPosition(pos);
    shapeItem.setColor(color);
    shapeItems.append(shapeItem);
    update();
}
</db:programlisting>
<db:para>The createShapeItem() function creates a single shape item. It sets the path, tooltip, position and color, using the item's own functions. In the end, the function appends the new item to the list of shape items, and calls the <db:link xlink:href="qwidget.xml#update">QWidget::update</db:link>() function to make it appear with the other items within the SortingBox widget.</db:para>
<db:programlisting language="cpp">QToolButton *SortingBox::createToolButton(const QString &amp;toolTip,
                                          const QIcon &amp;icon, const char *member)
{
    QToolButton *button = new QToolButton(this);
    button-&gt;setToolTip(toolTip);
    button-&gt;setIcon(icon);
    button-&gt;setIconSize(QSize(32, 32));
    connect(button, SIGNAL(clicked()), this, member);

    return button;
}
</db:programlisting>
<db:para>The createToolButton() function is called from the SortingBox constructor. We create a tool button with the given tooltip and icon. The button's parent is the SortingBox widget, and its size is 32 x 32 pixels. Before we return the button, we connect it to the given slot.</db:para>
<db:programlisting language="cpp">QPoint SortingBox::initialItemPosition(const QPainterPath &amp;path)
{
    int x;
    int y = (height() - (int)path.controlPointRect().height()) / 2;
    if (shapeItems.size() == 0)
        x = ((3 * width()) / 2 - (int)path.controlPointRect().width()) / 2;
    else
        x = (width() / shapeItems.size()
             - (int)path.controlPointRect().width()) / 2;

    return QPoint(x, y);
}
</db:programlisting>
<db:para>The initialItemPosition() function is also called from the constructor. We want the three first items to initially be centered in the middle of the SortingBox widget, and we use this function to calculate their positions.</db:para>
<db:programlisting language="cpp">QPoint SortingBox::randomItemPosition()
{
    return QPoint(qrand() % (width() - 120), qrand() % (height() - 120));
}
</db:programlisting>
<db:para>Whenever the user creates a new shape item, we want the new item to appear at a random position, and we use the randomItemPosition() function to calculate such a position. We make sure that the item appears within the visible area of the SortingBox widget, using the widget's current width and height when calculating the random coordinates.</db:para>
<db:programlisting language="cpp">QColor SortingBox::initialItemColor()
{
    return QColor::fromHsv(((shapeItems.size() + 1) * 85) % 256, 255, 190);
}
</db:programlisting>
<db:para>As with initialItemPosition(), the initialItemColor() function is called from the constructor. The purposes of both functions are purely cosmetic: We want to control the initial position and color of the three first items.</db:para>
<db:programlisting language="cpp">QColor SortingBox::randomItemColor()
{
    return QColor::fromHsv(qrand() % 256, 255, 190);
}
</db:programlisting>
<db:para>Finally the randomItemColor() function is implemented to give the shape items the user creates, a random color.</db:para>
</db:section>
<db:section xml:id="shapeitem-class-definition">
<db:title>ShapeItem Class Definition</db:title>
<db:programlisting language="cpp">class ShapeItem
{
public:
    void setPath(const QPainterPath &amp;path);
    void setToolTip(const QString &amp;toolTip);
    void setPosition(const QPoint &amp;position);
    void setColor(const QColor &amp;color);

    QPainterPath path() const;
    QPoint position() const;
    QColor color() const;
    QString toolTip() const;

private:
    QPainterPath myPath;
    QPoint myPosition;
    QColor myColor;
    QString myToolTip;
};
</db:programlisting>
<db:para>The ShapeItem class is a custom widget representing one single shape item. The widget has a path, a position, a color and a tooltip. We need functions to set or modify these objects, as well as functions that return them. We make the latter functions const to prohibit any modifications of the objects, i.e. prohibiting unauthorized manipulation of the shape items appearance.</db:para>
</db:section>
<db:section xml:id="shapeitem-class-implementation">
<db:title>ShapeItem Class Implementation</db:title>
<db:programlisting language="cpp">QPainterPath ShapeItem::path() const
{
    return myPath;
}

QPoint ShapeItem::position() const
{
    return myPosition;
}

QColor ShapeItem::color() const
{
    return myColor;
}

QString ShapeItem::toolTip() const
{
    return myToolTip;
}
</db:programlisting>
<db:para>This first group of functions simply return the objects that are requested. The objects are returned as constants, i.e. they cannot be modified.</db:para>
<db:programlisting language="cpp">void ShapeItem::setPath(const QPainterPath &amp;path)
{
    myPath = path;
}

void ShapeItem::setToolTip(const QString &amp;toolTip)
{
    myToolTip = toolTip;
}

void ShapeItem::setPosition(const QPoint &amp;position)
{
    myPosition = position;
}

void ShapeItem::setColor(const QColor &amp;color)
{
    myColor = color;
}
</db:programlisting>
<db:para>The last group of functions set or modify the shape item's path, position, color and tooltip, respectively.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="widgets/tooltips/main.cpp">widgets/tooltips/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/tooltips/shapeitem.cpp">widgets/tooltips/shapeitem.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/tooltips/shapeitem.h">widgets/tooltips/shapeitem.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/tooltips/sortingbox.cpp">widgets/tooltips/sortingbox.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/tooltips/sortingbox.h">widgets/tooltips/sortingbox.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/tooltips/tooltips.pro">widgets/tooltips/tooltips.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/tooltips/tooltips.qrc">widgets/tooltips/tooltips.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="widgets/tooltips/images/circle.png">widgets/tooltips/images/circle.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/tooltips/images/square.png">widgets/tooltips/images/square.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/tooltips/images/triangle.png">widgets/tooltips/images/triangle.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
