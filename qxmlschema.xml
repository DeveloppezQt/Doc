<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QXmlSchema Class</db:title>
<db:productname>QtXmlPatterns</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Patterns Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxmlschema.xml">QXmlSchema</db:link> class provides loading and validation of a W3C XML Schema.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXmlSchema</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xmlpatterns</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QXmlSchema is part of <db:simplelist><db:member>xml-tools</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qxmlschema.xml">QXmlSchema</db:link> class loads, compiles and validates W3C XML Schema files that can be used further for validation of XML instance documents via <db:link xlink:href="qxmlschemavalidator.xml">QXmlSchemaValidator</db:link>.</db:para>
<db:para>The following example shows how to load a XML Schema file from the network and test whether it is a valid schema document:</db:para>
<db:programlisting language="cpp">    QUrl url(&quot;http://www.schema-example.org/myschema.xsd&quot;);

    QXmlSchema schema;
    if (schema.load(url) == true)
        qDebug() &lt;&lt; &quot;schema is valid&quot;;
    else
        qDebug() &lt;&lt; &quot;schema is invalid&quot;;
</db:programlisting>
<db:section xml:id="xml-schema-version">
<db:title>XML Schema Version</db:title>
<db:para>This class is used to represent schemas that conform to the <db:link xlink:href="http://www.w3.org/XML/Schema">XML Schema</db:link> 1.0 specification.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlschemavalidator.xml">QXmlSchemaValidator</db:link></db:member>
<db:member><db:link xlink:href="qtxmlpatterns-schema-example.xml">XML Schema Validation Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QXmlSchema">
<db:title>QXmlSchema::QXmlSchema()</db:title>
<db:para>Constructs an invalid, empty schema that cannot be used until <db:link xlink:href="qxmlschema.xml#load">load</db:link>() is called.</db:para>
</db:section>
<db:section xml:id="QXmlSchema-1">
<db:title>QXmlSchema::QXmlSchema(const QXmlSchema &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qxmlschema.xml">QXmlSchema</db:link> that is a copy of <db:code role="parameter">other</db:code>. The new instance will share resources with the existing schema to the extent possible.</db:para>
</db:section>
<db:section xml:id="dtor.QXmlSchema">
<db:title>[noexcept] QXmlSchema::~QXmlSchema()</db:title>
<db:para>Destroys this <db:link xlink:href="qxmlschema.xml">QXmlSchema</db:link>.</db:para>
</db:section>
<db:section xml:id="documentUri">
<db:title>QUrl QXmlSchema::documentUri() const</db:title>
<db:para>Returns the document URI of the schema or an empty URI if no schema has been set.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QXmlSchema::isValid() const</db:title>
<db:para>Returns true if this schema is valid. Examples of invalid schemas are ones that contain syntax errors or that do not conform the W3C XML Schema specification.</db:para>
</db:section>
<db:section xml:id="load">
<db:title>bool QXmlSchema::load(const QUrl &amp;<db:emphasis>source</db:emphasis>)</db:title>
<db:para>Sets this <db:link xlink:href="qxmlschema.xml">QXmlSchema</db:link> to a schema loaded from the <db:code role="parameter">source</db:code> URI.</db:para>
<db:para>If the schema <db:link xlink:href="qxmlschema.xml#isValid">is invalid</db:link>, <db:code>false</db:code> is returned and the behavior is undefined.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    QUrl url(&quot;http://www.schema-example.org/myschema.xsd&quot;);

    QXmlSchema schema;
    if (schema.load(url) == true)
        qDebug() &lt;&lt; &quot;schema is valid&quot;;
    else
        qDebug() &lt;&lt; &quot;schema is invalid&quot;;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlschema.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="load-1">
<db:title>bool QXmlSchema::load(QIODevice *<db:emphasis>source</db:emphasis>, const QUrl &amp;<db:emphasis>documentUri</db:emphasis> = QUrl())</db:title>
<db:para>Sets this <db:link xlink:href="qxmlschema.xml">QXmlSchema</db:link> to a schema read from the <db:code role="parameter">source</db:code> device. The device must have been opened with at least <db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">QIODevice::ReadOnly</db:link>.</db:para>
<db:para><db:code role="parameter">documentUri</db:code> represents the schema obtained from the <db:code role="parameter">source</db:code> device. It is the base URI of the schema, that is used internally to resolve relative URIs that appear in the schema, and for message reporting.</db:para>
<db:para>If <db:code role="parameter">source</db:code> is <db:code>null</db:code> or not readable, or if <db:code role="parameter">documentUri</db:code> is not a valid URI, behavior is undefined.</db:para>
<db:para>If the schema <db:link xlink:href="qxmlschema.xml#isValid">is invalid</db:link>, <db:code>false</db:code> is returned and the behavior is undefined.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    QFile file(&quot;myschema.xsd&quot;);
    file.open(QIODevice::ReadOnly);

    QXmlSchema schema;
    schema.load(&amp;file, QUrl::fromLocalFile(file.fileName()));

    if (schema.isValid())
        qDebug() &lt;&lt; &quot;schema is valid&quot;;
    else
        qDebug() &lt;&lt; &quot;schema is invalid&quot;;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlschema.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="load-2">
<db:title>bool QXmlSchema::load(const QByteArray &amp;<db:emphasis>data</db:emphasis>, const QUrl &amp;<db:emphasis>documentUri</db:emphasis> = QUrl())</db:title>
<db:para>Sets this <db:link xlink:href="qxmlschema.xml">QXmlSchema</db:link> to a schema read from the <db:code role="parameter">data</db:code></db:para>
<db:para><db:code role="parameter">documentUri</db:code> represents the schema obtained from the <db:code role="parameter">data</db:code>. It is the base URI of the schema, that is used internally to resolve relative URIs that appear in the schema, and for message reporting.</db:para>
<db:para>If <db:code role="parameter">documentUri</db:code> is not a valid URI, behavior is undefined.</db:para>
<db:para>If the schema <db:link xlink:href="qxmlschema.xml#isValid">is invalid</db:link>, <db:code>false</db:code> is returned and the behavior is undefined.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    QByteArray data( &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;&quot;
                     &quot;&lt;xsd:schema&quot;
                     &quot;        xmlns:xsd=\&quot;http://www.w3.org/2001/XMLSchema\&quot;&quot;
                     &quot;        xmlns=\&quot;http://www.qt-project.org/xmlschematest\&quot;&quot;
                     &quot;        targetNamespace=\&quot;http://www.qt-project.org/xmlschematest\&quot;&quot;
                     &quot;        version=\&quot;1.0\&quot;&quot;
                     &quot;        elementFormDefault=\&quot;qualified\&quot;&gt;&quot;
                     &quot;&lt;/xsd:schema&gt;&quot; );

    QXmlSchema schema;
    schema.load(data);

    if (schema.isValid())
        qDebug() &lt;&lt; &quot;schema is valid&quot;;
    else
        qDebug() &lt;&lt; &quot;schema is invalid&quot;;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlschema.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlschema.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="messageHandler">
<db:title>QAbstractMessageHandler *QXmlSchema::messageHandler() const</db:title>
<db:para>Returns the message handler that handles compile and validation messages for this <db:link xlink:href="qxmlschema.xml">QXmlSchema</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlschema.xml#setMessageHandler">setMessageHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="namePool">
<db:title>QXmlNamePool QXmlSchema::namePool() const</db:title>
<db:para>Returns the name pool used by this <db:link xlink:href="qxmlschema.xml">QXmlSchema</db:link> for constructing <db:link xlink:href="qxmlname.xml">names</db:link>. There is no setter for the name pool, because mixing name pools causes errors due to name confusion.</db:para>
</db:section>
<db:section xml:id="networkAccessManager">
<db:title>QNetworkAccessManager *QXmlSchema::networkAccessManager() const</db:title>
<db:para>Returns the network manager, or 0 if it has not been set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlschema.xml#setNetworkAccessManager">setNetworkAccessManager</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMessageHandler">
<db:title>void QXmlSchema::setMessageHandler(QAbstractMessageHandler *<db:emphasis>handler</db:emphasis>)</db:title>
<db:para>Changes the <db:link xlink:href="qabstractmessagehandler.xml">message handler</db:link> for this <db:link xlink:href="qxmlschema.xml">QXmlSchema</db:link> to <db:code role="parameter">handler</db:code>. The schema sends all compile and validation messages to this message handler. <db:link xlink:href="qxmlschema.xml">QXmlSchema</db:link> does not take ownership of <db:code role="parameter">handler</db:code>.</db:para>
<db:para>Normally, the default message handler is sufficient. It writes compile and validation messages to <db:emphasis>stderr</db:emphasis>. The default message handler includes color codes if <db:emphasis>stderr</db:emphasis> can render colors.</db:para>
<db:para>When <db:link xlink:href="qxmlschema.xml">QXmlSchema</db:link> calls <db:link xlink:href="qabstractmessagehandler.xml#message">QAbstractMessageHandler::message</db:link>(), the arguments are as follows:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>message() argument</db:para>
</db:th>
<db:th>
<db:para>Semantics</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtglobal.xml#QtMsgType-enum">QtMsgType</db:link> type</db:para>
</db:td>
<db:td>
<db:para>Only <db:link xlink:href="qtglobal.xml#QtMsgType-enum">QtWarningMsg</db:link> and <db:link xlink:href="qtglobal.xml#QtMsgType-enum">QtFatalMsg</db:link> are used. The former identifies a warning, while the latter identifies an error.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>const <db:link xlink:href="qstring.xml">QString</db:link> &amp; description</db:para>
</db:td>
<db:td>
<db:para>An XHTML document which is the actual message. It is translated into the current language.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>const <db:link xlink:href="qurl.xml">QUrl</db:link> &amp;identifier</db:para>
</db:td>
<db:td>
<db:para>Identifies the error with a URI, where the fragment is the error code, and the rest of the URI is the error namespace.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>const <db:link xlink:href="qsourcelocation.xml">QSourceLocation</db:link> &amp; sourceLocation</db:para>
</db:td>
<db:td>
<db:para>Identifies where the error occurred.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlschema.xml#messageHandler">messageHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNetworkAccessManager">
<db:title>void QXmlSchema::setNetworkAccessManager(QNetworkAccessManager *<db:emphasis>manager</db:emphasis>)</db:title>
<db:para>Sets the network manager to <db:code role="parameter">manager</db:code>. <db:link xlink:href="qxmlschema.xml">QXmlSchema</db:link> does not take ownership of <db:code role="parameter">manager</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlschema.xml#networkAccessManager">networkAccessManager</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUriResolver">
<db:title>void QXmlSchema::setUriResolver(const QAbstractUriResolver *<db:emphasis>resolver</db:emphasis>)</db:title>
<db:para>Sets the URI resolver to <db:code role="parameter">resolver</db:code>. <db:link xlink:href="qxmlschema.xml">QXmlSchema</db:link> does not take ownership of <db:code role="parameter">resolver</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlschema.xml#uriResolver">uriResolver</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uriResolver">
<db:title>const QAbstractUriResolver *QXmlSchema::uriResolver() const</db:title>
<db:para>Returns the schema's URI resolver. If no URI resolver has been set, Qt XML Patterns will use the URIs in schemas as they are.</db:para>
<db:para>The URI resolver provides a level of abstraction, or <db:emphasis>polymorphic URIs</db:emphasis>. A resolver can rewrite <db:emphasis>logical</db:emphasis> URIs to physical ones, or it can translate obsolete or invalid URIs to valid ones.</db:para>
<db:para>When Qt XML Patterns calls <db:link xlink:href="qabstracturiresolver.xml#resolve">QAbstractUriResolver::resolve</db:link>() the absolute URI is the URI mandated by the schema specification, and the relative URI is the URI specified by the user.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlschema.xml#setUriResolver">setUriResolver</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[since 5.4] QXmlSchema &amp;QXmlSchema::operator=(const QXmlSchema &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copies the resources of <db:code role="parameter">other</db:code> into this instance, sharing them to the extent possible.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
</db:section>
</db:article>
