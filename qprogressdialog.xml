<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QProgressDialog Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qprogressdialog.xml">QProgressDialog</db:link> class provides feedback on the progress of a slow operation.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QProgressDialog</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdialog.xml" xlink:role="class">QDialog</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QProgressDialog is part of <db:simplelist><db:member><db:link xlink:href="standard-dialogs.xml">Standard Dialogs</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A progress dialog is used to give the user an indication of how long an operation is going to take, and to demonstrate that the application has not frozen. It can also give the user an opportunity to abort the operation.</db:para>
<db:para>A common problem with progress dialogs is that it is difficult to know when to use them; operations take different amounts of time on different hardware. <db:link xlink:href="qprogressdialog.xml">QProgressDialog</db:link> offers a solution to this problem: it estimates the time the operation will take (based on time for steps), and only shows itself if that estimate is beyond minimumDuration() (4 seconds by default).</db:para>
<db:para>Use setMinimum() and setMaximum() or the constructor to set the number of &quot;steps&quot; in the operation and call setValue() as the operation progresses. The number of steps can be chosen arbitrarily. It can be the number of files copied, the number of bytes received, the number of iterations through the main loop of your algorithm, or some other suitable unit. Progress starts at the value set by setMinimum(), and the progress dialog shows that the operation has finished when you call setValue() with the value set by setMaximum() as its argument.</db:para>
<db:para>The dialog automatically resets and hides itself at the end of the operation. Use setAutoReset() and setAutoClose() to change this behavior. Note that if you set a new maximum (using setMaximum() or <db:link xlink:href="qprogressdialog.xml#setRange">setRange</db:link>()) that equals your current value(), the dialog will not close regardless.</db:para>
<db:para>There are two ways of using <db:link xlink:href="qprogressdialog.xml">QProgressDialog</db:link>: modal and modeless.</db:para>
<db:para>Compared to a modeless <db:link xlink:href="qprogressdialog.xml">QProgressDialog</db:link>, a modal <db:link xlink:href="qprogressdialog.xml">QProgressDialog</db:link> is simpler to use for the programmer. Do the operation in a loop, call <db:link xlink:href="">setValue()</db:link> at intervals, and check for cancellation with wasCanceled(). For example:</db:para>
<db:programlisting language="cpp">    QProgressDialog progress(&quot;Copying files...&quot;, &quot;Abort Copy&quot;, 0, numFiles, this);
    progress.setWindowModality(Qt::WindowModal);

    for (int i = 0; i &lt; numFiles; i++) {
        progress.setValue(i);

        if (progress.wasCanceled())
            break;
        //... copy one file
    }
    progress.setValue(numFiles);
</db:programlisting>
<db:para>A modeless progress dialog is suitable for operations that take place in the background, where the user is able to interact with the application. Such operations are typically based on <db:link xlink:href="qtimer.xml">QTimer</db:link> (or <db:link xlink:href="qobject.xml#timerEvent">QObject::timerEvent</db:link>()), <db:link xlink:href="qsocketnotifier.xml">QSocketNotifier</db:link>, or QUrlOperator; or performed in a separate thread. A <db:link xlink:href="qprogressbar.xml">QProgressBar</db:link> in the status bar of your main window is often an alternative to a modeless progress dialog.</db:para>
<db:para>You need to have an event loop to be running, connect the <db:link xlink:href="qprogressdialog.xml#canceled">canceled</db:link>() signal to a slot that stops the operation, and call <db:link xlink:href="">setValue()</db:link> at intervals. For example:</db:para>
<db:programlisting language="cpp">// Operation constructor
Operation::Operation(QObject *parent)
    : QObject(parent), steps(0)
{
    pd = new QProgressDialog(&quot;Operation in progress.&quot;, &quot;Cancel&quot;, 0, 100);
    connect(pd, SIGNAL(canceled()), this, SLOT(cancel()));
    t = new QTimer(this);
    connect(t, SIGNAL(timeout()), this, SLOT(perform()));
    t-&gt;start(0);
}

void Operation::perform()
{
    pd-&gt;setValue(steps);
    //... perform one percent of the operation
    steps++;
    if (steps &gt; pd-&gt;maximum())
        t-&gt;stop();
}

void Operation::cancel()
{
    t-&gt;stop();
    //... cleanup
}
</db:programlisting>
<db:para>In both modes the progress dialog may be customized by replacing the child widgets with custom widgets by using <db:link xlink:href="qprogressdialog.xml#setLabel">setLabel</db:link>(), <db:link xlink:href="qprogressdialog.xml#setBar">setBar</db:link>(), and <db:link xlink:href="qprogressdialog.xml#setCancelButton">setCancelButton</db:link>(). The functions setLabelText() and <db:link xlink:href="qprogressdialog.xml#setCancelButtonText">setCancelButtonText</db:link>() set the texts shown.</db:para>
<db:mediaobject>
<db:alt>A progress dialog shown in the Fusion widget style.</db:alt>
<db:imageobject>
<db:imagedata fileref="images/fusion-progressdialog.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdialog.xml">QDialog</db:link></db:member>
<db:member><db:link xlink:href="qprogressbar.xml">QProgressBar</db:link></db:member>
<db:member><db:link xlink:href="guibooks.xml#fowler">GUI Design Handbook: Progress Indicator</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-dialogs-findfiles-example.xml">Find Files Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-itemviews-pixelator-example.xml">Pixelator Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QProgressDialog">
<db:title>[explicit] QProgressDialog::QProgressDialog(QWidget *<db:emphasis>parent</db:emphasis> = 0, Qt::WindowFlags <db:emphasis>f</db:emphasis> = 0)</db:title>
<db:para>Constructs a progress dialog.</db:para>
<db:para>Default settings:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The label text is empty.</db:para>
</db:listitem>
<db:listitem>
<db:para>The cancel button text is (translated) &quot;Cancel&quot;.</db:para>
</db:listitem>
<db:listitem>
<db:para>minimum is 0;</db:para>
</db:listitem>
<db:listitem>
<db:para>maximum is 100</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:code role="parameter">parent</db:code> argument is dialog's parent widget. The widget flags, <db:code role="parameter">f</db:code>, are passed to the <db:link xlink:href="qdialog.xml#QDialog">QDialog::QDialog</db:link>() constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setLabelText()</db:link></db:member>
<db:member><db:link xlink:href="qprogressdialog.xml#setCancelButtonText">setCancelButtonText</db:link>()</db:member>
<db:member><db:link xlink:href="qprogressdialog.xml#setCancelButton">setCancelButton</db:link>()</db:member>
<db:member><db:link xlink:href="">setMinimum()</db:link></db:member>
<db:member><db:link xlink:href="">setMaximum()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QProgressDialog-1">
<db:title>QProgressDialog::QProgressDialog(const QString &amp;<db:emphasis>labelText</db:emphasis>, const QString &amp;<db:emphasis>cancelButtonText</db:emphasis>, int <db:emphasis>minimum</db:emphasis>, int <db:emphasis>maximum</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = 0, Qt::WindowFlags <db:emphasis>f</db:emphasis> = 0)</db:title>
<db:para>Constructs a progress dialog.</db:para>
<db:para>The <db:code role="parameter">labelText</db:code> is the text used to remind the user what is progressing.</db:para>
<db:para>The <db:code role="parameter">cancelButtonText</db:code> is the text to display on the cancel button. If QString() is passed then no cancel button is shown.</db:para>
<db:para>The <db:code role="parameter">minimum</db:code> and <db:code role="parameter">maximum</db:code> is the number of steps in the operation for which this progress dialog shows progress. For example, if the operation is to examine 50 files, this value minimum value would be 0, and the maximum would be 50. Before examining the first file, call setValue(0). As each file is processed call setValue(1), setValue(2), etc., finally calling setValue(50) after examining the last file.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> argument is the dialog's parent widget. The parent, <db:code role="parameter">parent</db:code>, and widget flags, <db:code role="parameter">f</db:code>, are passed to the <db:link xlink:href="qdialog.xml#QDialog">QDialog::QDialog</db:link>() constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setLabelText()</db:link></db:member>
<db:member><db:link xlink:href="qprogressdialog.xml#setLabel">setLabel</db:link>()</db:member>
<db:member><db:link xlink:href="qprogressdialog.xml#setCancelButtonText">setCancelButtonText</db:link>()</db:member>
<db:member><db:link xlink:href="qprogressdialog.xml#setCancelButton">setCancelButton</db:link>()</db:member>
<db:member><db:link xlink:href="">setMinimum()</db:link></db:member>
<db:member><db:link xlink:href="">setMaximum()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QProgressDialog">
<db:title>[virtual noexcept] QProgressDialog::~QProgressDialog()</db:title>
<db:para>Destroys the progress dialog.</db:para>
</db:section>
<db:section xml:id="cancel">
<db:title>void QProgressDialog::cancel()</db:title>
<db:para>Resets the progress dialog. wasCanceled() becomes true until the progress dialog is reset. The progress dialog becomes hidden.</db:para>
</db:section>
<db:section xml:id="canceled">
<db:title>void QProgressDialog::canceled()</db:title>
<db:para>This signal is emitted when the cancel button is clicked. It is connected to the <db:link xlink:href="qprogressdialog.xml#cancel">cancel</db:link>() slot by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">wasCanceled()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QProgressDialog::changeEvent(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="closeEvent">
<db:title>[override virtual protected] void QProgressDialog::closeEvent(QCloseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#closeEvent" role="function">QDialog::closeEvent(QCloseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="forceShow">
<db:title>[protected] void QProgressDialog::forceShow()</db:title>
<db:para>Shows the dialog if it is still hidden after the algorithm has been started and minimumDuration milliseconds have passed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setMinimumDuration()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open">
<db:title>[since 4.5] void QProgressDialog::open(QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>member</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Opens the dialog and connects its <db:link xlink:href="qprogressdialog.xml#canceled">canceled</db:link>() signal to the slot specified by <db:code role="parameter">receiver</db:code> and <db:code role="parameter">member</db:code>.</db:para>
<db:para>The signal will be disconnected from the slot when the dialog is closed.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="reset">
<db:title>void QProgressDialog::reset()</db:title>
<db:para>Resets the progress dialog. The progress dialog becomes hidden if autoClose() is true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setAutoClose()</db:link></db:member>
<db:member><db:link xlink:href="">setAutoReset()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QProgressDialog::resizeEvent(QResizeEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#resizeEvent" role="function">QDialog::resizeEvent(QResizeEvent *)</db:link>.</db:para>
</db:section>
<db:section xml:id="setBar">
<db:title>void QProgressDialog::setBar(QProgressBar *<db:emphasis>bar</db:emphasis>)</db:title>
<db:para>Sets the progress bar widget to <db:code role="parameter">bar</db:code>. The progress dialog resizes to fit. The progress dialog takes ownership of the progress <db:code role="parameter">bar</db:code> which will be deleted when necessary, so do not use a progress bar allocated on the stack.</db:para>
</db:section>
<db:section xml:id="setCancelButton">
<db:title>void QProgressDialog::setCancelButton(QPushButton *<db:emphasis>cancelButton</db:emphasis>)</db:title>
<db:para>Sets the cancel button to the push button, <db:code role="parameter">cancelButton</db:code>. The progress dialog takes ownership of this button which will be deleted when necessary, so do not pass the address of an object that is on the stack, i.e. use new() to create the button. If 0 is passed then no cancel button will be shown.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressdialog.xml#setCancelButtonText">setCancelButtonText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCancelButtonText">
<db:title>void QProgressDialog::setCancelButtonText(const QString &amp;<db:emphasis>cancelButtonText</db:emphasis>)</db:title>
<db:para>Sets the cancel button's text to <db:code role="parameter">cancelButtonText</db:code>. If the text is set to QString() then it will cause the cancel button to be hidden and deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressdialog.xml#setCancelButton">setCancelButton</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLabel">
<db:title>void QProgressDialog::setLabel(QLabel *<db:emphasis>label</db:emphasis>)</db:title>
<db:para>Sets the label to <db:code role="parameter">label</db:code>. The progress dialog resizes to fit. The label becomes owned by the progress dialog and will be deleted when necessary, so do not pass the address of an object on the stack.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setLabelText()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRange">
<db:title>void QProgressDialog::setRange(int <db:emphasis>minimum</db:emphasis>, int <db:emphasis>maximum</db:emphasis>)</db:title>
<db:para>Sets the progress dialog's minimum and maximum values to <db:code role="parameter">minimum</db:code> and <db:code role="parameter">maximum</db:code>, respectively.</db:para>
<db:para>If <db:code role="parameter">maximum</db:code> is smaller than <db:code role="parameter">minimum</db:code>, <db:code role="parameter">minimum</db:code> becomes the only legal value.</db:para>
<db:para>If the current value falls outside the new range, the progress dialog is reset with <db:link xlink:href="qprogressdialog.xml#reset">reset</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>minimum</db:member>
<db:member>maximum</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QProgressDialog::showEvent(QShowEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#showEvent" role="function">QDialog::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QProgressDialog::sizeHint() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#sizeHint" role="function">QDialog::sizeHint() const</db:link>.</db:para>
<db:para>Returns a size that fits the contents of the progress dialog. The progress dialog resizes itself as required, so you should not need to call this yourself.</db:para>
</db:section>
</db:section>
</db:article>
