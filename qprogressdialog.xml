<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QProgressDialog Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qprogressdialog.xml">QProgressDialog</db:link> class provides feedback on the progress of a slow operation.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QProgressDialog</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdialog.xml" xlink:role="class">QDialog</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QProgressDialog is part of <db:simplelist><db:member><db:link xlink:href="standard-dialogs.xml">Standard Dialogs</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A progress dialog is used to give the user an indication of how long an operation is going to take, and to demonstrate that the application has not frozen. It can also give the user an opportunity to abort the operation.</db:para>
<db:para>A common problem with progress dialogs is that it is difficult to know when to use them; operations take different amounts of time on different hardware. <db:link xlink:href="qprogressdialog.xml">QProgressDialog</db:link> offers a solution to this problem: it estimates the time the operation will take (based on time for steps), and only shows itself if that estimate is beyond <db:link xlink:href="qprogressdialog.xml#minimumDuration-prop">minimumDuration</db:link>() (4 seconds by default).</db:para>
<db:para>Use <db:link xlink:href="qprogressdialog.xml#minimum-prop">setMinimum</db:link>() and <db:link xlink:href="qprogressdialog.xml#maximum-prop">setMaximum</db:link>() or the constructor to set the number of &quot;steps&quot; in the operation and call <db:link xlink:href="qprogressdialog.xml#value-prop">setValue</db:link>() as the operation progresses. The number of steps can be chosen arbitrarily. It can be the number of files copied, the number of bytes received, the number of iterations through the main loop of your algorithm, or some other suitable unit. Progress starts at the value set by <db:link xlink:href="qprogressdialog.xml#minimum-prop">setMinimum</db:link>(), and the progress dialog shows that the operation has finished when you call <db:link xlink:href="qprogressdialog.xml#value-prop">setValue</db:link>() with the value set by <db:link xlink:href="qprogressdialog.xml#maximum-prop">setMaximum</db:link>() as its argument.</db:para>
<db:para>The dialog automatically resets and hides itself at the end of the operation. Use <db:link xlink:href="qprogressdialog.xml#autoReset-prop">setAutoReset</db:link>() and <db:link xlink:href="qprogressdialog.xml#autoClose-prop">setAutoClose</db:link>() to change this behavior. Note that if you set a new maximum (using <db:link xlink:href="qprogressdialog.xml#maximum-prop">setMaximum</db:link>() or <db:link xlink:href="qprogressdialog.xml#setRange">setRange</db:link>()) that equals your current <db:link xlink:href="qprogressdialog.xml#value-prop">value</db:link>(), the dialog will not close regardless.</db:para>
<db:para>There are two ways of using <db:link xlink:href="qprogressdialog.xml">QProgressDialog</db:link>: modal and modeless.</db:para>
<db:para>Compared to a modeless <db:link xlink:href="qprogressdialog.xml">QProgressDialog</db:link>, a modal <db:link xlink:href="qprogressdialog.xml">QProgressDialog</db:link> is simpler to use for the programmer. Do the operation in a loop, call <db:link xlink:href="qprogressdialog.xml#value-prop">setValue</db:link>() at intervals, and check for cancellation with <db:link xlink:href="qprogressdialog.xml#wasCanceled-prop">wasCanceled</db:link>(). For example:</db:para>
<db:programlisting language="cpp">    QProgressDialog progress(&quot;Copying files...&quot;, &quot;Abort Copy&quot;, 0, numFiles, this);
    progress.setWindowModality(Qt::WindowModal);

    for (int i = 0; i &amp;lt; numFiles; i++) {
        progress.setValue(i);

        if (progress.wasCanceled())
            break;
        //... copy one file
    }
    progress.setValue(numFiles);
</db:programlisting>
<db:para>A modeless progress dialog is suitable for operations that take place in the background, where the user is able to interact with the application. Such operations are typically based on <db:link xlink:href="qtimer.xml">QTimer</db:link> (or <db:link xlink:href="qobject.xml#timerEvent">QObject::timerEvent</db:link>()) or <db:link xlink:href="qsocketnotifier.xml">QSocketNotifier</db:link>; or performed in a separate thread. A <db:link xlink:href="qprogressbar.xml">QProgressBar</db:link> in the status bar of your main window is often an alternative to a modeless progress dialog.</db:para>
<db:para>You need to have an event loop to be running, connect the <db:link xlink:href="qprogressdialog.xml#canceled">canceled</db:link>() signal to a slot that stops the operation, and call <db:link xlink:href="qprogressdialog.xml#value-prop">setValue</db:link>() at intervals. For example:</db:para>
<db:programlisting language="cpp">// Operation constructor
Operation::Operation(QObject *parent)
    : QObject(parent), steps(0)
{
    pd = new QProgressDialog(&quot;Operation in progress.&quot;, &quot;Cancel&quot;, 0, 100);
    connect(pd, SIGNAL(canceled()), this, SLOT(cancel()));
    t = new QTimer(this);
    connect(t, SIGNAL(timeout()), this, SLOT(perform()));
    t-&amp;gt;start(0);
}

void Operation::perform()
{
    pd-&amp;gt;setValue(steps);
    //... perform one percent of the operation
    steps++;
    if (steps &amp;gt; pd-&amp;gt;maximum())
        t-&amp;gt;stop();
}

void Operation::cancel()
{
    t-&amp;gt;stop();
    //... cleanup
}
</db:programlisting>
<db:para>In both modes the progress dialog may be customized by replacing the child widgets with custom widgets by using <db:link xlink:href="qprogressdialog.xml#setLabel">setLabel</db:link>(), <db:link xlink:href="qprogressdialog.xml#setBar">setBar</db:link>(), and <db:link xlink:href="qprogressdialog.xml#setCancelButton">setCancelButton</db:link>(). The functions <db:link xlink:href="qprogressdialog.xml#labelText-prop">setLabelText</db:link>() and <db:link xlink:href="qprogressdialog.xml#setCancelButtonText">setCancelButtonText</db:link>() set the texts shown.</db:para>
<db:mediaobject>
<db:alt>A progress dialog shown in the Fusion widget style.</db:alt>
<db:imageobject>
<db:imagedata fileref="images/fusion-progressdialog.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdialog.xml">QDialog</db:link></db:member>
<db:member><db:link xlink:href="qprogressbar.xml">QProgressBar</db:link></db:member>
<db:member><db:link xlink:href="guibooks.xml#fowler">GUI Design Handbook: Progress Indicator</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-dialogs-findfiles-example.xml">Find Files Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-itemviews-pixelator-example.xml">Pixelator Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="autoClose-prop">
<db:title>autoClose : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>autoClose</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">autoClose</db:synopsisinfo>
<db:synopsisinfo role="setter">setAutoClose</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the dialog gets hidden by <db:link xlink:href="qprogressdialog.xml#reset">reset</db:link>()</db:para>
<db:para>The default is true.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">autoClose</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAutoClose</db:emphasis>(<db:type>bool</db:type> <db:emphasis>close</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressdialog.xml#autoReset-prop">setAutoReset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="autoReset-prop">
<db:title>autoReset : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>autoReset</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">autoReset</db:synopsisinfo>
<db:synopsisinfo role="setter">setAutoReset</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the progress dialog calls <db:link xlink:href="qprogressdialog.xml#reset">reset</db:link>() as soon as <db:link xlink:href="qprogressdialog.xml#value-prop">value</db:link>() equals <db:link xlink:href="qprogressdialog.xml#maximum-prop">maximum</db:link>()</db:para>
<db:para>The default is true.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">autoReset</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAutoReset</db:emphasis>(<db:type>bool</db:type> <db:emphasis>reset</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressdialog.xml#autoClose-prop">setAutoClose</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="labelText-prop">
<db:title>labelText : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>labelText</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">labelText</db:synopsisinfo>
<db:synopsisinfo role="setter">setLabelText</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the label's text</db:para>
<db:para>The default text is an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">labelText</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLabelText</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>text</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maximum-prop">
<db:title>maximum : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>maximum</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">maximum</db:synopsisinfo>
<db:synopsisinfo role="setter">setMaximum</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the highest value represented by the progress bar</db:para>
<db:para>The default is 100.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maximum</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMaximum</db:emphasis>(<db:type>int</db:type> <db:emphasis>maximum</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressdialog.xml#minimum-prop">minimum</db:link></db:member>
<db:member><db:link xlink:href="qprogressdialog.xml#setRange">setRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimum-prop">
<db:title>minimum : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>minimum</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">minimum</db:synopsisinfo>
<db:synopsisinfo role="setter">setMinimum</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the lowest value represented by the progress bar</db:para>
<db:para>The default is 0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">minimum</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMinimum</db:emphasis>(<db:type>int</db:type> <db:emphasis>minimum</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressdialog.xml#maximum-prop">maximum</db:link></db:member>
<db:member><db:link xlink:href="qprogressdialog.xml#setRange">setRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumDuration-prop">
<db:title>minimumDuration : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>minimumDuration</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">minimumDuration</db:synopsisinfo>
<db:synopsisinfo role="setter">setMinimumDuration</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the time that must pass before the dialog appears</db:para>
<db:para>If the expected duration of the task is less than the minimumDuration, the dialog will not appear at all. This prevents the dialog popping up for tasks that are quickly over. For tasks that are expected to exceed the minimumDuration, the dialog will pop up after the minimumDuration time or as soon as any progress is set.</db:para>
<db:para>If set to 0, the dialog is always shown as soon as any progress is set. The default is 4000 milliseconds.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">minimumDuration</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMinimumDuration</db:emphasis>(<db:type>int</db:type> <db:emphasis>ms</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="value-prop">
<db:title>value : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>value</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">value</db:synopsisinfo>
<db:synopsisinfo role="setter">setValue</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current amount of progress made.</db:para>
<db:para>For the progress dialog to work as expected, you should initially set this property to <db:link xlink:href="qprogressdialog.xml#minimum-prop">QProgressDialog::minimum</db:link>() and finally set it to <db:link xlink:href="qprogressdialog.xml#maximum-prop">QProgressDialog::maximum</db:link>(); you can call setValue() any number of times in-between.</db:para>
<db:warning>
<db:para>If the progress dialog is modal (see <db:link xlink:href="qprogressdialog.xml#QProgressDialog">QProgressDialog::QProgressDialog</db:link>()), setValue() calls <db:link xlink:href="qcoreapplication.xml#processEvents">QApplication::processEvents</db:link>(), so take care that this does not cause undesirable re-entrancy in your code. For example, don't use a <db:link xlink:href="qprogressdialog.xml">QProgressDialog</db:link> inside a <db:link xlink:href="qwidget.xml#paintEvent">paintEvent</db:link>()!</db:para>
</db:warning>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">value</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setValue</db:emphasis>(<db:type>int</db:type> <db:emphasis>progress</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressdialog.xml#minimum-prop">minimum</db:link></db:member>
<db:member><db:link xlink:href="qprogressdialog.xml#maximum-prop">maximum</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wasCanceled-prop">
<db:title>[read-only] wasCanceled : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>wasCanceled</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">wasCanceled</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the dialog was canceled</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">wasCanceled</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QProgressDialog">
<db:title>[explicit] QProgressDialog::QProgressDialog(QWidget *<db:emphasis>parent</db:emphasis> = nullptr, Qt::WindowFlags <db:emphasis>f</db:emphasis> = Qt::WindowFlags())</db:title>
<db:constructorsynopsis>
<db:methodname>QProgressDialog</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::WindowFlags</db:type>
<db:parameter>f</db:parameter>
<db:initializer>Qt::WindowFlags()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QProgressDialog(QWidget *parent, Qt::WindowFlags f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a progress dialog.</db:para>
<db:para>Default settings:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The label text is empty.</db:para>
</db:listitem>
<db:listitem>
<db:para>The cancel button text is (translated) &quot;Cancel&quot;.</db:para>
</db:listitem>
<db:listitem>
<db:para>minimum is 0;</db:para>
</db:listitem>
<db:listitem>
<db:para>maximum is 100</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:code role="parameter">parent</db:code> argument is dialog's parent widget. The widget flags, <db:code role="parameter">f</db:code>, are passed to the <db:link xlink:href="qdialog.xml#QDialog">QDialog::QDialog</db:link>() constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressdialog.xml#labelText-prop">setLabelText</db:link>()</db:member>
<db:member><db:link xlink:href="qprogressdialog.xml#setCancelButtonText">setCancelButtonText</db:link>()</db:member>
<db:member><db:link xlink:href="qprogressdialog.xml#setCancelButton">setCancelButton</db:link>()</db:member>
<db:member><db:link xlink:href="qprogressdialog.xml#minimum-prop">setMinimum</db:link>()</db:member>
<db:member><db:link xlink:href="qprogressdialog.xml#maximum-prop">setMaximum</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QProgressDialog-1">
<db:title>QProgressDialog::QProgressDialog(const QString &amp;<db:emphasis>labelText</db:emphasis>, const QString &amp;<db:emphasis>cancelButtonText</db:emphasis>, int <db:emphasis>minimum</db:emphasis>, int <db:emphasis>maximum</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr, Qt::WindowFlags <db:emphasis>f</db:emphasis> = Qt::WindowFlags())</db:title>
<db:constructorsynopsis>
<db:methodname>QProgressDialog</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>labelText</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>cancelButtonText</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>minimum</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>maximum</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::WindowFlags</db:type>
<db:parameter>f</db:parameter>
<db:initializer>Qt::WindowFlags()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QProgressDialog(const QString &amp;labelText, const QString &amp;cancelButtonText, int minimum, int maximum, QWidget *parent, Qt::WindowFlags f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a progress dialog.</db:para>
<db:para>The <db:code role="parameter">labelText</db:code> is the text used to remind the user what is progressing.</db:para>
<db:para>The <db:code role="parameter">cancelButtonText</db:code> is the text to display on the cancel button. If QString() is passed then no cancel button is shown.</db:para>
<db:para>The <db:code role="parameter">minimum</db:code> and <db:code role="parameter">maximum</db:code> is the number of steps in the operation for which this progress dialog shows progress. For example, if the operation is to examine 50 files, this value minimum value would be 0, and the maximum would be 50. Before examining the first file, call <db:link xlink:href="qprogressdialog.xml#value-prop">setValue</db:link>(0). As each file is processed call <db:link xlink:href="qprogressdialog.xml#value-prop">setValue</db:link>(1), <db:link xlink:href="qprogressdialog.xml#value-prop">setValue</db:link>(2), etc., finally calling <db:link xlink:href="qprogressdialog.xml#value-prop">setValue</db:link>(50) after examining the last file.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> argument is the dialog's parent widget. The parent, <db:code role="parameter">parent</db:code>, and widget flags, <db:code role="parameter">f</db:code>, are passed to the <db:link xlink:href="qdialog.xml#QDialog">QDialog::QDialog</db:link>() constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressdialog.xml#labelText-prop">setLabelText</db:link>()</db:member>
<db:member><db:link xlink:href="qprogressdialog.xml#setLabel">setLabel</db:link>()</db:member>
<db:member><db:link xlink:href="qprogressdialog.xml#setCancelButtonText">setCancelButtonText</db:link>()</db:member>
<db:member><db:link xlink:href="qprogressdialog.xml#setCancelButton">setCancelButton</db:link>()</db:member>
<db:member><db:link xlink:href="qprogressdialog.xml#minimum-prop">setMinimum</db:link>()</db:member>
<db:member><db:link xlink:href="qprogressdialog.xml#maximum-prop">setMaximum</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QProgressDialog">
<db:title>[virtual] QProgressDialog::~QProgressDialog()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QProgressDialog</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QProgressDialog()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the progress dialog.</db:para>
</db:section>
<db:section xml:id="cancel">
<db:title>void QProgressDialog::cancel()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>cancel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cancel()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets the progress dialog. <db:link xlink:href="qprogressdialog.xml#wasCanceled-prop">wasCanceled</db:link>() becomes true until the progress dialog is reset. The progress dialog becomes hidden.</db:para>
</db:section>
<db:section xml:id="canceled">
<db:title>void QProgressDialog::canceled()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>canceled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void canceled()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the cancel button is clicked. It is connected to the <db:link xlink:href="qprogressdialog.xml#cancel">cancel</db:link>() slot by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressdialog.xml#wasCanceled-prop">wasCanceled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QProgressDialog::changeEvent(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>changeEvent</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void changeEvent(QEvent *ev) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="closeEvent">
<db:title>[override virtual protected] void QProgressDialog::closeEvent(QCloseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>closeEvent</db:methodname>
<db:methodparam>
<db:type>QCloseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void closeEvent(QCloseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#closeEvent" role="function">QDialog::closeEvent(QCloseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="forceShow">
<db:title>[protected] void QProgressDialog::forceShow()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>forceShow</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void forceShow()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Shows the dialog if it is still hidden after the algorithm has been started and <db:link xlink:href="qprogressdialog.xml#minimumDuration-prop">minimumDuration</db:link> milliseconds have passed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressdialog.xml#minimumDuration-prop">setMinimumDuration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open">
<db:title>[since 4.5] void QProgressDialog::open(QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>member</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>open</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>receiver</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>member</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void open(QObject *receiver, const char *member)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Opens the dialog and connects its <db:link xlink:href="qprogressdialog.xml#canceled">canceled</db:link>() signal to the slot specified by <db:code role="parameter">receiver</db:code> and <db:code role="parameter">member</db:code>.</db:para>
<db:para>The signal will be disconnected from the slot when the dialog is closed.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="reset">
<db:title>void QProgressDialog::reset()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>reset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void reset()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets the progress dialog. The progress dialog becomes hidden if <db:link xlink:href="qprogressdialog.xml#autoClose-prop">autoClose</db:link>() is true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressdialog.xml#autoClose-prop">setAutoClose</db:link>()</db:member>
<db:member><db:link xlink:href="qprogressdialog.xml#autoReset-prop">setAutoReset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QProgressDialog::resizeEvent(QResizeEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>resizeEvent</db:methodname>
<db:methodparam>
<db:type>QResizeEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resizeEvent(QResizeEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#resizeEvent" role="function">QDialog::resizeEvent(QResizeEvent *)</db:link>.</db:para>
</db:section>
<db:section xml:id="setBar">
<db:title>void QProgressDialog::setBar(QProgressBar *<db:emphasis>bar</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBar</db:methodname>
<db:methodparam>
<db:type>QProgressBar *</db:type>
<db:parameter>bar</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBar(QProgressBar *bar)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the progress bar widget to <db:code role="parameter">bar</db:code>. The progress dialog resizes to fit. The progress dialog takes ownership of the progress <db:code role="parameter">bar</db:code> which will be deleted when necessary, so do not use a progress bar allocated on the stack.</db:para>
</db:section>
<db:section xml:id="setCancelButton">
<db:title>void QProgressDialog::setCancelButton(QPushButton *<db:emphasis>cancelButton</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCancelButton</db:methodname>
<db:methodparam>
<db:type>QPushButton *</db:type>
<db:parameter>cancelButton</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCancelButton(QPushButton *cancelButton)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the cancel button to the push button, <db:code role="parameter">cancelButton</db:code>. The progress dialog takes ownership of this button which will be deleted when necessary, so do not pass the address of an object that is on the stack, i.e. use new() to create the button. If nullptr is passed, no cancel button will be shown.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressdialog.xml#setCancelButtonText">setCancelButtonText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCancelButtonText">
<db:title>void QProgressDialog::setCancelButtonText(const QString &amp;<db:emphasis>cancelButtonText</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCancelButtonText</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>cancelButtonText</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCancelButtonText(const QString &amp;cancelButtonText)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the cancel button's text to <db:code role="parameter">cancelButtonText</db:code>. If the text is set to QString() then it will cause the cancel button to be hidden and deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressdialog.xml#setCancelButton">setCancelButton</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLabel">
<db:title>void QProgressDialog::setLabel(QLabel *<db:emphasis>label</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLabel</db:methodname>
<db:methodparam>
<db:type>QLabel *</db:type>
<db:parameter>label</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLabel(QLabel *label)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the label to <db:code role="parameter">label</db:code>. The progress dialog resizes to fit. The label becomes owned by the progress dialog and will be deleted when necessary, so do not pass the address of an object on the stack.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressdialog.xml#labelText-prop">setLabelText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRange">
<db:title>void QProgressDialog::setRange(int <db:emphasis>minimum</db:emphasis>, int <db:emphasis>maximum</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRange</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>minimum</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>maximum</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRange(int minimum, int maximum)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the progress dialog's minimum and maximum values to <db:code role="parameter">minimum</db:code> and <db:code role="parameter">maximum</db:code>, respectively.</db:para>
<db:para>If <db:code role="parameter">maximum</db:code> is smaller than <db:code role="parameter">minimum</db:code>, <db:code role="parameter">minimum</db:code> becomes the only legal value.</db:para>
<db:para>If the current value falls outside the new range, the progress dialog is reset with <db:link xlink:href="qprogressdialog.xml#reset">reset</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressdialog.xml#minimum-prop">minimum</db:link></db:member>
<db:member><db:link xlink:href="qprogressdialog.xml#maximum-prop">maximum</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QProgressDialog::showEvent(QShowEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>showEvent</db:methodname>
<db:methodparam>
<db:type>QShowEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void showEvent(QShowEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#showEvent" role="function">QDialog::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QProgressDialog::sizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#sizeHint" role="function">QDialog::sizeHint() const</db:link>.</db:para>
<db:para>Returns a size that fits the contents of the progress dialog. The progress dialog resizes itself as required, so you should not need to call this yourself.</db:para>
</db:section>
</db:section>
</db:article>
