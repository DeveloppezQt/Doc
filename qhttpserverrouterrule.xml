<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QHttpServerRouterRule Class</db:title>
<db:productname>QtHttpServer</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Lightweight HTTP Server Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qhttpserverrouterrule.xml">QHttpServerRouterRule</db:link> is the base class for <db:link xlink:href="qhttpserverrouter.xml">QHttpServerRouter</db:link> rules.</db:para>
<db:para>This class was introduced in Qt 6.4.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QHttpServerRouterRule</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS HttpServer)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::HttpServer)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += httpserver</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Use <db:link xlink:href="qhttpserverrouterrule.xml">QHttpServerRouterRule</db:link> to specify expected request parameters:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>path</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qurl.xml#path">QUrl::path</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>HTTP</db:para>
</db:td>
<db:td>
<db:para>methods <db:link xlink:href="qhttpserverrequest.xml#Method-enum">QHttpServerRequest::Methods</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>callback</db:para>
</db:td>
<db:td>
<db:para>User-defined response callback</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>This is a low level API, see <db:link xlink:href="qhttpserver.xml">QHttpServer</db:link> for higher level alternatives.</db:para>
</db:note>
<db:para>Example of <db:link xlink:href="qhttpserverrouterrule.xml">QHttpServerRouterRule</db:link> and <db:link xlink:href="qhttpserverrouter.xml">QHttpServerRouter</db:link> usage:</db:para>
<db:programlisting language="cpp">template&amp;lt;typename ViewHandler&amp;gt;
void route(const char *path, const QHttpServerRequest::Methods methods, ViewHandler &amp;amp;&amp;amp;viewHandler)
{
    auto rule = std::make_unique&amp;lt;QHttpServerRouterRule&amp;gt;(
            path, methods, [this, viewHandler = std::forward&amp;lt;ViewHandler&amp;gt;(viewHandler)]
                                               (QRegularExpressionMatch &amp;amp;match,
                                                const QHttpServerRequest &amp;amp;request,
                                                QHttpServerResponder &amp;amp;&amp;amp;responder) mutable {
        auto boundViewHandler = router.bindCaptured&amp;lt;ViewHandler&amp;gt;(
                std::move(viewHandler), match);
        // call viewHandler
        boundViewHandler();
    });

    // QHttpServerRouter
    router.addRule&amp;lt;ViewHandler&amp;gt;(std::move(rule));
}

// Valid:
route(&quot;/user/&quot;, [] (qint64 id) { } );                            // &quot;/user/1&quot;
                                                                 // &quot;/user/3&quot;
                                                                 //
route(&quot;/user/&amp;lt;arg&amp;gt;/history&quot;, [] (qint64 id) { } );               // &quot;/user/1/history&quot;
                                                                 // &quot;/user/2/history&quot;
                                                                 //
route(&quot;/user/&amp;lt;arg&amp;gt;/history/&quot;, [] (qint64 id, qint64 page) { } ); // &quot;/user/1/history/1&quot;
                                                                 // &quot;/user/2/history/2&quot;

// Invalid:
route(&quot;/user/&amp;lt;arg&amp;gt;&quot;, [] () { } );  // ERROR: path pattern has &amp;lt;arg&amp;gt;, but ViewHandler does not have any arguments
route(&quot;/user/\\d+&quot;, [] () { } );   // ERROR: path pattern does not support manual regexp
</db:programlisting>
<db:note>
<db:para>Regular expressions in the path pattern are not supported, but can be registered (to match a use of &quot;&lt;val&gt;&quot; to a specific type) using <db:link xlink:href="qhttpserverrouter.xml#addConverter">QHttpServerRouter::addConverter</db:link>().</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="RouterHandler-typedef">
<db:title>[alias] QHttpServerRouterRule::RouterHandler</db:title>
<db:typedefsynopsis>
<db:typedefname>RouterHandler</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Type alias for std::function&lt;void(const <db:link xlink:href="qregularexpressionmatch.xml">QRegularExpressionMatch</db:link> &amp;,const <db:link xlink:href="qhttpserverrequest.xml">QHttpServerRequest</db:link> &amp;, <db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link> &amp;&amp;)&gt;</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QHttpServerRouterRule-2">
<db:title>[explicit] QHttpServerRouterRule::QHttpServerRouterRule(const QString &amp;<db:emphasis>pathPattern</db:emphasis>, QHttpServerRouterRule::RouterHandler <db:emphasis>routerHandler</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QHttpServerRouterRule</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>pathPattern</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QHttpServerRouterRule::RouterHandler</db:type>
<db:parameter>routerHandler</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttpServerRouterRule(const QString &amp;pathPattern, QHttpServerRouterRule::RouterHandler routerHandler)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a rule with pathPattern <db:code role="parameter">pathPattern</db:code>, and routerHandler <db:code role="parameter">routerHandler</db:code>.</db:para>
<db:para>The rule accepts all HTTP methods by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttpserverrequest.xml#Method-enum">QHttpServerRequest::Methods</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QHttpServerRouterRule-3">
<db:title>[explicit] QHttpServerRouterRule::QHttpServerRouterRule(const QString &amp;<db:emphasis>pathPattern</db:emphasis>, const QHttpServerRequest::Methods <db:emphasis>methods</db:emphasis>, QHttpServerRouterRule::RouterHandler <db:emphasis>routerHandler</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QHttpServerRouterRule</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>pathPattern</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QHttpServerRequest::Methods</db:type>
<db:parameter>methods</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QHttpServerRouterRule::RouterHandler</db:type>
<db:parameter>routerHandler</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttpServerRouterRule(const QString &amp;pathPattern, const QHttpServerRequest::Methods methods, QHttpServerRouterRule::RouterHandler routerHandler)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a rule with pathPattern <db:code role="parameter">pathPattern</db:code>, methods <db:code role="parameter">methods</db:code> and routerHandler <db:code role="parameter">routerHandler</db:code>.</db:para>
<db:para>The rule accepts any combinations of available HTTP methods.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttpserverrequest.xml#Method-enum">QHttpServerRequest::Methods</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QHttpServerRouterRule">
<db:title>[virtual] QHttpServerRouterRule::~QHttpServerRouterRule()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QHttpServerRouterRule</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QHttpServerRouterRule()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a <db:link xlink:href="qhttpserverrouterrule.xml">QHttpServerRouterRule</db:link>.</db:para>
</db:section>
<db:section xml:id="exec">
<db:title>[protected] bool QHttpServerRouterRule::exec(const QHttpServerRequest &amp;<db:emphasis>request</db:emphasis>, QHttpServerResponder &amp;<db:emphasis>responder</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>exec</db:methodname>
<db:methodparam>
<db:type>const QHttpServerRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QHttpServerResponder &amp;</db:type>
<db:parameter>responder</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool exec(const QHttpServerRequest &amp;request, QHttpServerResponder &amp;responder) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Executes this rule for the given <db:code role="parameter">request</db:code>, if it matches.</db:para>
<db:para>This function is called by <db:link xlink:href="qhttpserverrouter.xml">QHttpServerRouter</db:link> when it receives a new request. If the given <db:code role="parameter">request</db:code> matches this rule, this function handles the request by delivering a response to the given <db:code role="parameter">responder</db:code>, then returns <db:code>true</db:code>. Otherwise, it returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="hasValidMethods">
<db:title>[protected] bool QHttpServerRouterRule::hasValidMethods() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasValidMethods</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasValidMethods() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the methods is valid</db:para>
</db:section>
<db:section xml:id="matches">
<db:title>[virtual protected] bool QHttpServerRouterRule::matches(const QHttpServerRequest &amp;<db:emphasis>request</db:emphasis>, QRegularExpressionMatch *<db:emphasis>match</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>matches</db:methodname>
<db:methodparam>
<db:type>const QHttpServerRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QRegularExpressionMatch *</db:type>
<db:parameter>match</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool matches(const QHttpServerRequest &amp;request, QRegularExpressionMatch *match) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Determines whether a given <db:code role="parameter">request</db:code> matches this rule.</db:para>
<db:para>This virtual function is called by <db:link xlink:href="qhttpserverrouterrule.xml#exec">exec</db:link>() to check if <db:code role="parameter">request</db:code> matches this rule. If a match is found, it is stored in the object pointed to by <db:code role="parameter">match</db:code> (which <db:emphasis>must not</db:emphasis> be <db:code>nullptr</db:code>) and this function returns <db:code>true</db:code>. Otherwise, it returns <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
