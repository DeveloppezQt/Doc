<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Native Interfaces</db:title>
<db:productname>QtPlatformIntegration</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Integrating Qt with the native platform</db:titleabbrev>
<db:abstract>
<db:para>Integrating Qt with the native platform.</db:para></db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The native interfaces provide access to native or platform specific APIs of the classes they extend.</db:para>
<db:para>The interfaces live in the <db:link xlink:href="qnativeinterface.xml">QNativeInterface</db:link> namespace, and cover use-cases such as accessing underlying native handles, adopting existing native handles, or providing platform specific APIs.</db:para>
<db:section xml:id="example-usage">
<db:title>Example Usage</db:title>
<db:section xml:id="accessing-underlying-native-handles">
<db:title>Accessing underlying native handles</db:title>
<db:para>In situations where a feature of the native platform is not exposed in Qt, it can be helpful to access the native handles maintained by Qt, and use those to call the native APIs instead.</db:para>
<db:para>For example, to access the underlying NSOpenGLContext of an <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> on macOS, via the <db:link xlink:href="qnativeinterface-qcocoaglcontext.xml">QNativeInterface::QCocoaGLContext</db:link> native interface:</db:para>
<db:programlisting language="cpp">using namespace QNativeInterface;
if (auto *cocoaGLContext = glContext-&amp;gt;nativeInterface&amp;lt;QCocoaGLContext&amp;gt;())
    [cocoaGLContext-&amp;gt;nativeContext() makeCurrentContext];
</db:programlisting>
<db:para>The native interface is accessed through the <db:link xlink:href="qopenglcontext.xml#nativeInterface">QOpenGLContext::nativeInterface</db:link>() accessor, which ensures that the requested interface is available, and otherwise returns <db:code>nullptr</db:code>. The underlying NSOpenGLContext is then accessed through the <db:link xlink:href="qnativeinterface-qcocoaglcontext.xml#nativeContext">nativeContext</db:link>() accessor.</db:para>
</db:section>
<db:section xml:id="adopting-existing-native-handles">
<db:title>Adopting existing native handles</db:title>
<db:para>Similarly to the <db:link xlink:href="platform-integration.xml#window-embedding">window embedding</db:link> use-case, there are situations where the native platform, or another toolkit, has created a native handle that you would like to pass on to Qt &#8212; wrapping the existing handle instead of creating a new one.</db:para>
<db:para>For example, to adopt an existing NSOpenGLContext, and use that to share resources with a context created by Qt:</db:para>
<db:programlisting language="cpp">using namespace QNativeInterface;
QOpenGLContext *adoptedContext = QCocoaGLContext::fromNativeContext(nsOpenGLContext);
anotherContext-&amp;gt;setShareContext(adoptedContext);
</db:programlisting>
<db:para>The adopted context is created by a platform specific factory function in the <db:link xlink:href="qnativeinterface-qcocoaglcontext.xml">QNativeInterface::QCocoaGLContext</db:link> native interface.</db:para>
</db:section>
<db:section xml:id="accessing-platform-specific-apis">
<db:title>Accessing platform specific APIs</db:title>
<db:para>In some cases an API is too platform specific to be included in the cross platform Qt classes, but is still useful to include. These APIs are available either in the same way as when accessing the underlying native handles, through the <db:link xlink:href="qopenglcontext.xml#nativeInterface">nativeInterface</db:link>() accessor, or directly as static function in the native interface.</db:para>
<db:para>For example, to pull out the OpenGL module handle on Windows:</db:para>
<db:programlisting language="cpp">using namespace QNativeInterface;
HMODULE moduleHandle = QWGLContext::openGLModuleHandle();
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="source-and-binary-compatibility">
<db:title>Source and Binary Compatibility</db:title>
<db:para>There are no source or binary compatibility guarantees for the native interface APIs, meaning that an application using these interfaces is only guaranteed to work with the Qt version it was developed against.</db:para>
</db:section>
<db:section xml:id="available-interfaces">
<db:title>Available Interfaces</db:title>
<db:para>For a list of all available interfaces, see the <db:link xlink:href="qnativeinterface.xml">QNativeInterface</db:link> namespace.</db:para>
<db:section xml:id="qopenglcontext">
<db:title>QOpenGLContext</db:title>
<db:para>Accessed through <db:link xlink:href="qopenglcontext.xml#nativeInterface">QOpenGLContext::nativeInterface</db:link>().</db:para>
<db:variablelist role="native-interfaces-qopenglcontext">
<db:varlistentry>
<db:term><db:link xlink:href="qnativeinterface-qcocoaglcontext.xml" xlink:role="class">QNativeInterface::QCocoaGLContext</db:link></db:term>
<db:listitem>
<db:para>Native interface to an NSOpenGLContext on macOS.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qnativeinterface-qeglcontext.xml" xlink:role="class">QNativeInterface::QEGLContext</db:link></db:term>
<db:listitem>
<db:para>Native interface to an EGL context.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qnativeinterface-qglxcontext.xml" xlink:role="class">QNativeInterface::QGLXContext</db:link></db:term>
<db:listitem>
<db:para>Native interface to a GLX context.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qnativeinterface-qwglcontext.xml" xlink:role="class">QNativeInterface::QWGLContext</db:link></db:term>
<db:listitem>
<db:para>Native interface to a WGL context on Windows.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qoffscreensurface">
<db:title>QOffscreenSurface</db:title>
<db:para>Accessed through <db:link xlink:href="qoffscreensurface.xml#nativeInterface">QOffscreenSurface::nativeInterface</db:link>().</db:para>
<db:variablelist role="native-interfaces-qoffscreensurface">
<db:varlistentry>
<db:term><db:link xlink:href="qnativeinterface-qandroidoffscreensurface.xml" xlink:role="class">QNativeInterface::QAndroidOffscreenSurface</db:link></db:term>
<db:listitem>
<db:para>Native interface to a offscreen surface on Android.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qsgtexture">
<db:title>QSGTexture</db:title>
<db:para>Accessed through <db:link xlink:href="qsgtexture.xml#nativeInterface">QSGTexture::nativeInterface</db:link>().</db:para>
<db:variablelist role="native-interfaces-qsgtexture">
<db:varlistentry>
<db:term><db:link xlink:href="qnativeinterface-qsgd3d11texture.xml" xlink:role="class">QNativeInterface::QSGD3D11Texture</db:link></db:term>
<db:listitem>
<db:para>Provides access to and enables adopting Direct3D 11 texture objects.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qnativeinterface-qsgmetaltexture.xml" xlink:role="class">QNativeInterface::QSGMetalTexture</db:link></db:term>
<db:listitem>
<db:para>Provides access to and enables adopting Metal texture objects.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qnativeinterface-qsgopengltexture.xml" xlink:role="class">QNativeInterface::QSGOpenGLTexture</db:link></db:term>
<db:listitem>
<db:para>Provides access to and enables adopting OpenGL texture objects.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qnativeinterface-qsgvulkantexture.xml" xlink:role="class">QNativeInterface::QSGVulkanTexture</db:link></db:term>
<db:listitem>
<db:para>Provides access to and enables adopting Vulkan image objects.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:section>
</db:article>
