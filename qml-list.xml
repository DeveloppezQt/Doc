<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>list QML Value Type</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>a list of QML objects.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The list type refers to a list of QML objects or values.</db:para>
<db:para>Properties of type list are empty by default.</db:para>
<db:para>A list can store QML objects or <db:link xlink:href="qtqml-typesystem-valuetypes.xml">value type</db:link> values.</db:para>
<db:para>When integrating with C++, note that any <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> value <db:link xlink:href="qtqml-cppintegration-data.xml">passed into QML from C++</db:link> is automatically converted into a list value, and vice-versa.</db:para>
<db:para>Similarly any QList&lt;T&gt; of a registered value type T is automatically converted into a list value, and vice-versa.</db:para>
<db:section xml:id="using-the-list-type">
<db:title>Using the list Type</db:title>
<db:para>For example, the <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> type has a <db:link xlink:href="qml-qtquick-item.xml#states-prop">states</db:link> list-type property that can be assigned to and used as follows:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    width: 100; height: 100

    states: [
        State { name: &quot;activated&quot; },
        State { name: &quot;deactivated&quot; }
    ]

    Component.onCompleted: {
        console.log(&quot;Name of first state:&quot;, states[0].name)
        for (var i = 0; i &amp;lt; states.length; i++)
            console.log(&quot;state&quot;, i, states[i].name)
    }
}
</db:programlisting>
<db:para>The defined <db:link xlink:href="qml-qtquick-state.xml">State</db:link> objects will be added to the states list in the order in which they are defined.</db:para>
<db:para>If the list only contains one object, the square brackets may be omitted:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    width: 100; height: 100
    states: State { name: &quot;activated&quot; }
}
</db:programlisting>
<db:para>You can also declare your own list properties in QML:</db:para>
<db:programlisting language="qml">import QtQml

QtObject {
    property list&amp;lt;int&amp;gt; intList: [1, 2, 3, 4]
    property list&amp;lt;QtObject&amp;gt; objectList
}
</db:programlisting>
<db:para>Lists can be used much like JavaScript arrays. For example:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Values are assigned using the [] square bracket syntax with comma-separated values</db:para>
</db:listitem>
<db:listitem>
<db:para>The length property provides the number of items in the list</db:para>
</db:listitem>
<db:listitem>
<db:para>Values in the list are accessed using the [index] syntax</db:para>
</db:listitem>
<db:listitem>
<db:para>You can use push() to append entries</db:para>
</db:listitem>
<db:listitem>
<db:para>You can set the length property of the list to truncate or extend it.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>However, you can <db:emphasis>not</db:emphasis> automatically extend the list by assigning to an index currently out of range. Furthermore, if you insert null values into a list of objects, those are converted to nullptr entries in the underlying <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link>.</db:para>
<db:para>A list of value types is different from a JavaScript array in one further important aspect: Growing it by setting its length does not produce undefined entries, but rather default-constructed instances of the value type.</db:para>
<db:para>Similarly, growing a list of object types this way produces null entries, rather than undefined entries.</db:para>
<db:para>This value type is provided by the QML language.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-typesystem-valuetypes.xml">QML Value Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
