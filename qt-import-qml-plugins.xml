<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_import_qml_plugins</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Ensures QML plugins needed by a target are imported for static builds.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="qt6-import-qml-plugins"/>
<db:para>This command was introduced in Qt 6.0.</db:para>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt_import_qml_plugins(target)
</db:programlisting>
<db:para>If <db:link xlink:href="cmake-qt5-and-qt6-compatibility.xml#versionless-commands">versionless commands</db:link> are disabled, use <db:code>qt6_import_qml_plugins()</db:code> instead. It supports the same set of arguments as this command.</db:para>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:note>
<db:para>This command only has any effect if Qt was built statically. If called using a non-static Qt, it will do nothing and return immediately.</db:para>
</db:note>
<db:para><db:code>qt_import_qml_plugins()</db:code> runs <db:code>qmlimportscanner</db:code> on the <db:code>target</db:code> immediately as part of the call (unless the <db:code>NO_IMPORT_SCAN</db:code> option was passed to <db:link xlink:href="qt-add-qml-module.xml#qt6-add-qml-module">qt_add_qml_module()</db:link> when defining the QML module). It finds the static QML plugins used by the <db:code>target</db:code> and links it to those plugins so that they are part of the executable or shared library that <db:code>target</db:code> represents. The search follows QML module imports recursively.</db:para>
<db:para>Because the call to <db:code>qmlimportscanner</db:code> runs at configure time rather than generation or build time, <db:code>qt_import_qml_plugins()</db:code> only knows about the information recorded on the <db:code>target</db:code> (or other targets it links or imports) at the time <db:code>qt_import_qml_plugins()</db:code> is called. Any linking or import relationships added after this call will not be considered. Therefore, this command should be called as late as possible in the <db:code>target</db:code>'s directory scope so that all the linking and import relationships are known.</db:para>
<db:para>If <db:code>target</db:code> was created using <db:link xlink:href="qt-add-executable.xml">qt_add_executable()</db:link>, projects would not normally need to call <db:code>qt_import_qml_plugins()</db:code> directly. When Qt is built statically, the command is called automatically as part of <db:link xlink:href="qt-add-executable.xml#finalization">target finalization</db:link> if <db:code>target</db:code> links to the Qml library. By default, this finalization occurs at the end of the same directory scope in which the <db:code>target</db:code> was created. If the <db:code>target</db:code> was created using the standard CMake <db:code>add_executable()</db:code> command instead, the project needs to call <db:code>qt_import_qml_plugins()</db:code> itself.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlengineextensionplugin.xml#Q_IMPORT_QML_PLUGIN">Q_IMPORT_QML_PLUGIN</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
