<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_import_qml_plugins</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Ensures QML plugins needed by a target are imported for static builds.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This command was introduced in Qt 6.0.</db:para>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt_import_qml_plugins(target)
</db:programlisting>
<db:para>If <db:link xlink:href="">versionless commands</db:link> are disabled, use qt6_import_qml_plugins() instead. It supports the same set of arguments as this command.</db:para>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:note>
<db:para>This command only has any effect if Qt was built statically. If called using a non-static Qt, it will do nothing and return immediately.</db:para>
</db:note>
<db:para>qt_import_qml_plugins() runs qmlimportscanner on the target immediately as part of the call (unless the NO_IMPORT_SCAN option was passed to <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module()</db:link> when defining the QML module). It finds the static QML plugins used by the target and links it to those plugins so that they are part of the executable or shared library that target represents. The search follows QML module imports recursively.</db:para>
<db:para>Because the call to qmlimportscanner runs at configure time rather than generation or build time, qt_import_qml_plugins() only knows about the information recorded on the target (or other targets it links or imports) at the time qt_import_qml_plugins() is called. Any linking or import relationships added after this call will not be considered. Therefore, this command should be called as late as possible in the target's directory scope so that all the linking and import relationships are known.</db:para>
<db:para>If target was created using <db:link xlink:href="qt-add-executable.xml">qt_add_executable()</db:link>, projects would not normally need to call qt_import_qml_plugins() directly. When Qt is built statically, the command is called automatically as part of <db:link xlink:href="qt-add-executable.xml#finalization">target finalization</db:link> if target links to the Qml library. By default, this finalization occurs at the end of the same directory scope in which the target was created. If the target was created using the standard CMake add_executable() command instead, the project needs to call qt_import_qml_plugins() itself.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlengineextensionplugin.xml#Q_IMPORT_QML_PLUGIN">Q_IMPORT_QML_PLUGIN</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
