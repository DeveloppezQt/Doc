<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D: Planets QML Example</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates combining Qt 3D rendering and Qt Quick 2 elements.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt3D module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

import QtQuick 2.0
import QtQuick.Window 2.2
import QtQuick.Scene3D 2.0
import &quot;planets.js&quot; as Planets

Item {
    id: mainview
    width: 1280
    height: 768
    visible: true
    property int focusedPlanet: 100
    property int oldPlanet: 0
    property int frames: 0
    property int sliderLength: (width &amp;lt; height) ? width / 2 : height / 2
    property real textSize: sliderLength / 20
    property real planetButtonSize: (height &amp;lt; 2200) ? (height / 13) : 200

    Connections {
        target: networkController

        onCommandAccepted: {
            var focusedItem = mainview.Window.window.activeFocusItem
            if (focusedItem &amp;amp;&amp;amp; focusedItem.panningEnabled) {
                focusedItem.panningEnabled = false
            }

            switch (command) {
            case &quot;selectPlanet&quot;:
                mainview.focusedPlanet = Planets.planetId(decodeURIComponent(value))
                planetButtonView.forceActiveFocus()
                planetButtonView.currentIndex = Planets.planetIndex(value)
                break
            case &quot;setRotationSpeed&quot;:
                rotationSpeedSlider.forceActiveFocus()
                rotationSpeedSlider.value = rotationSpeedSlider.minimumValue +
                        ((rotationSpeedSlider.maximumValue - rotationSpeedSlider.minimumValue) * value)
                break
            case &quot;setViewingDistance&quot;:
                viewingDistanceSlider.forceActiveFocus()
                viewingDistanceSlider.value = viewingDistanceSlider.minimumValue +
                        ((viewingDistanceSlider.maximumValue - viewingDistanceSlider.minimumValue) * value)
                break
            case &quot;setPlanetSize&quot;:
                planetSizeSlider.forceActiveFocus()
                planetSizeSlider.value = planetSizeSlider.minimumValue +
                        ((planetSizeSlider.maximumValue - planetSizeSlider.minimumValue) * value)
                break
            }
        }
    }

    Scene3D {
        anchors.fill: parent
        aspects: [&quot;render&quot;, &quot;logic&quot;, &quot;input&quot;]

        SolarSystem { id: solarsystem }
    }

    MouseArea {
        anchors.fill: parent
        acceptedButtons: Qt.LeftButton
        onClicked:
            focusedPlanet = 100
    }

    onFocusedPlanetChanged: {
        if (focusedPlanet == 100) {
            info.opacity = 0
            updatePlanetInfo()
        } else {
            updatePlanetInfo()
            info.opacity = 1
        }

        solarsystem.changePlanetFocus(oldPlanet, focusedPlanet)
        oldPlanet = focusedPlanet
    }

    ListModel {
        id: planetModel

        ListElement {
            name: &quot;Sun&quot;
            radius: &quot;109 x Earth&quot;
            temperature: &quot;5 778 K&quot;
            orbitalPeriod: &quot;&quot;
            distance: &quot;&quot;
            planetImageSource: &quot;qrc:/images/sun.png&quot;
            planetNumber: 0
        }
        ListElement {
            name: &quot;Mercury&quot;
            radius: &quot;0.3829 x Earth&quot;
            temperature: &quot;80-700 K&quot;
            orbitalPeriod: &quot;87.969 d&quot;
            distance: &quot;0.387 098 AU&quot;
            planetImageSource: &quot;qrc:/images/mercury.png&quot;
            planetNumber: 1
        }
        ListElement {
            name: &quot;Venus&quot;
            radius: &quot;0.9499 x Earth&quot;
            temperature: &quot;737 K&quot;
            orbitalPeriod: &quot;224.701 d&quot;
            distance: &quot;0.723 327 AU&quot;
            planetImageSource: &quot;qrc:/images/venus.png&quot;
            planetNumber: 2
        }
        ListElement {
            name: &quot;Earth&quot;
            radius: &quot;6 378.1 km&quot;
            temperature: &quot;184-330 K&quot;
            orbitalPeriod: &quot;365.256 d&quot;
            distance: &quot;149598261 km (1 AU)&quot;
            planetImageSource: &quot;qrc:/images/earth.png&quot;
            planetNumber: 3
        }
        ListElement {
            name: &quot;Mars&quot;
            radius: &quot;0.533 x Earth&quot;
            temperature: &quot;130-308 K&quot;
            orbitalPeriod: &quot;686.971 d&quot;
            distance: &quot;1.523679 AU&quot;
            planetImageSource: &quot;qrc:/images/mars.png&quot;
            planetNumber: 4
        }
        ListElement {
            name: &quot;Jupiter&quot;
            radius: &quot;11.209 x Earth&quot;
            temperature: &quot;112-165 K&quot;
            orbitalPeriod: &quot;4332.59 d&quot;
            distance: &quot;5.204267 AU&quot;
            planetImageSource: &quot;qrc:/images/jupiter.png&quot;
            planetNumber: 5
        }
        ListElement {
            name: &quot;Saturn&quot;
            radius: &quot;9.4492 x Earth&quot;
            temperature: &quot;84-134 K&quot;
            orbitalPeriod: &quot;10759.22 d&quot;
            distance: &quot;9.5820172 AU&quot;
            planetImageSource: &quot;qrc:/images/saturn.png&quot;
            planetNumber: 6
        }
        ListElement {
            name: &quot;Uranus&quot;
            radius: &quot;4.007 x Earth&quot;
            temperature: &quot;49-76 K&quot;
            orbitalPeriod: &quot;30687.15 d&quot;
            distance: &quot;19.189253 AU&quot;
            planetImageSource: &quot;qrc:/images/uranus.png&quot;
            planetNumber: 7
        }
        ListElement {
            name: &quot;Neptune&quot;
            radius: &quot;3.883 x Earth&quot;
            temperature: &quot;55-72 K&quot;
            orbitalPeriod: &quot;60190.03 d&quot;
            distance: &quot;30.070900 AU&quot;
            planetImageSource: &quot;qrc:/images/neptune.png&quot;
            planetNumber: 8
        }
        ListElement {
            name: &quot;Solar System&quot;
            planetImageSource: &quot;&quot;
            planetNumber: 100 // Defaults to solar system
        }
    }

    Component {
        id: planetButtonDelegate
        PlanetButton {
            source: planetImageSource
            text: name
            focusPlanet: planetNumber
            planetSelector: mainview
            buttonSize: planetButtonSize
            fontSize: textSize

            scale: activeFocus ? 1.4 : 1.0

            Behavior on scale {
                PropertyAnimation {
                    duration: 200
                }
            }

            signal swipeUp()
            signal swipeDown()
            signal swipeLeft()

            onSwipeUp: {
                if (planetButtonView.currentIndex &amp;gt; 0) {
                    planetButtonView.currentIndex--
                } else {
                    rotationSpeedSlider.forceActiveFocus()
                }
            }

            onSwipeDown: {
                if (planetButtonView.currentIndex &amp;lt; planetButtonView.count - 1) {
                    planetButtonView.currentIndex++
                } else {
                    planetSizeSlider.forceActiveFocus()
                }
            }

            onSwipeLeft: {
                if (index &amp;lt;= planetButtonView.count / 2) {
                    rotationSpeedSlider.forceActiveFocus()
                } else {
                    planetSizeSlider.forceActiveFocus()
                }
            }

            Keys.onPressed: {
                if (event.key === Qt.Key_Select) {
                    planetSelector.focusedPlanet = focusPlanet
                }
            }
        }
    }

    ListView {
        id: planetButtonView
        anchors.verticalCenter: parent.verticalCenter
        anchors.right: parent.right
        anchors.rightMargin: planetButtonSize / 2
        height: childrenRect.height
        spacing: planetButtonSize / 6
        width: planetButtonSize * 1.4
        interactive: false
        model: planetModel
        delegate: planetButtonDelegate
    }

    InfoSheet {
        id: info
        width: 400
        anchors.right: planetButtonView.left
        anchors.rightMargin: 40
        opacity: 1

        // Set initial information for Solar System
        planet: &quot;Solar System&quot;
        exampleDetails: &quot;This example shows a 3D model of the Solar&amp;lt;/p&amp;gt;&quot; +
                        &quot;&amp;lt;p&amp;gt;System comprised of the Sun and the eight&amp;lt;/p&amp;gt;&quot; +
                        &quot;&amp;lt;p&amp;gt;planets orbiting the Sun.&amp;lt;/p&amp;gt;&amp;lt;/br&amp;gt;&quot; +
                        &quot;&amp;lt;p&amp;gt;The example is implemented using Qt3D.&amp;lt;/p&amp;gt;&quot; +
                        &quot;&amp;lt;p&amp;gt;The textures and images used in the example&amp;lt;/p&amp;gt;&quot; +
                        &quot;&amp;lt;p&amp;gt;are Copyright (c) by James Hastings-Trew,&amp;lt;/p&amp;gt;&quot; +
                        &quot;&amp;lt;a href=\&quot;http://planetpixelemporium.com/planets.html\&quot;&amp;gt;&quot; +
                        &quot;http://planetpixelemporium.com/planets.html&amp;lt;/a&amp;gt;&quot;
    }

    function updatePlanetInfo() {
        info.width = 200

        if (focusedPlanet !== 100) {
            info.planet = planetModel.get(focusedPlanet).name
            info.radius = planetModel.get(focusedPlanet).radius
            info.temperature = planetModel.get(focusedPlanet).temperature
            info.orbitalPeriod = planetModel.get(focusedPlanet).orbitalPeriod
            info.distance = planetModel.get(focusedPlanet).distance
        }
    }

    Row {
        anchors.top: parent.top
        anchors.topMargin: 10
        anchors.horizontalCenter: parent.horizontalCenter

        spacing: 10
        scale: rotationSpeedSlider.activeFocus ? 1.4 : 1.0
        opacity: rotationSpeedSlider.activeFocus ? 1.0 : 0.5

        Behavior on scale {
            PropertyAnimation {
                duration: 200
            }
        }

        Text {
            anchors.verticalCenter: parent.verticalCenter

            font.family: &quot;Helvetica&quot;
            font.pixelSize: textSize
            font.weight: Font.Light
            color: rotationSpeedSlider.panningEnabled ? &quot;#80c342&quot; : &quot;#ffffff&quot;
            text: &quot;Rotation Speed&quot;
        }

        StyledSlider {
            id: rotationSpeedSlider
            anchors.verticalCenter: parent.verticalCenter
            width: sliderLength
            value: 0.2
            minimumValue: 0
            maximumValue: 1
            onValueChanged: solarsystem.changeSpeed(value)

            focus: Qt.platform.os === &quot;tvos&quot; ? true : false

            property bool panningEnabled: false
            signal swipeDown()
            signal swipeLeft()
            signal swipeRight()
            signal pannedHorizontally(real p)
            signal pannedVertically(real p)

            onSwipeDown: {
                planetSizeSlider.forceActiveFocus()
            }

            onSwipeLeft: {
                viewingDistanceSlider.forceActiveFocus()
            }

            onSwipeRight: {
                planetButtonView.currentIndex = 0
                planetButtonView.forceActiveFocus()
            }

            onPannedHorizontally: {
                var step = (maximumValue - minimumValue) / 30

                if (p &amp;gt; 0) {
                    value += step
                } else {
                    value -= step
                }
            }

            Keys.onPressed: {
                if (event.key === Qt.Key_Select) {
                    panningEnabled = !panningEnabled
                }
            }
        }
    }

    Column {
        anchors.left: parent.left
        anchors.leftMargin: 30
        anchors.verticalCenter: parent.verticalCenter

        spacing: 10
        scale: viewingDistanceSlider.activeFocus ? 1.4 : 1.0
        opacity: viewingDistanceSlider.activeFocus ? 1.0 : 0.5

        Behavior on scale {
            PropertyAnimation {
                duration: 200
            }
        }

        StyledSlider {
            id: viewingDistanceSlider

            anchors.horizontalCenter: parent.horizontalCenter
            orientation: Qt.Vertical
            height: sliderLength
            value: 1
            minimumValue: 1
            maximumValue: 2
            onValueChanged: solarsystem.changeCameraDistance(value)

            property bool panningEnabled: false
            signal swipeUp()
            signal swipeDown()
            signal swipeRight()
            signal pannedHorizontally(real p)
            signal pannedVertically(real p)

            onSwipeUp: {
                rotationSpeedSlider.forceActiveFocus()
            }

            onSwipeDown: {
                planetSizeSlider.forceActiveFocus()
            }

            onSwipeRight: {
                planetButtonView.currentIndex = 0
                planetButtonView.forceActiveFocus()
            }

            onPannedVertically: {
                var step = (maximumValue - minimumValue) / 30

                if (p &amp;gt; 0) {
                    value += step
                } else {
                    value -= step
                }
            }

            Keys.onPressed: {
                if (event.key === Qt.Key_Select) {
                    panningEnabled = !panningEnabled
                }
            }
        }

        Text {
            anchors.horizontalCenter: parent.horizontalCenter

            font.family: &quot;Helvetica&quot;
            font.pixelSize: textSize
            font.weight: Font.Light
            color: viewingDistanceSlider.panningEnabled ? &quot;#80c342&quot; : &quot;#ffffff&quot;
            text: &quot;Viewing\nDistance&quot;
        }
    }

    Row {
        anchors.bottom: parent.bottom
        anchors.bottomMargin: 10
        anchors.horizontalCenter: parent.horizontalCenter

        spacing: 10
        scale: planetSizeSlider.activeFocus ? 1.4 : 1.0
        opacity: planetSizeSlider.activeFocus ? 1.0 : 0.5

        Behavior on scale {
            PropertyAnimation {
                duration: 200
            }
        }

        Text {
            anchors.verticalCenter: parent.verticalCenter
            font.family: &quot;Helvetica&quot;
            font.pixelSize: textSize
            font.weight: Font.Light
            color: planetSizeSlider.panningEnabled ? &quot;#80c342&quot; : &quot;#ffffff&quot;
            text: &quot;Planet Size&quot;
        }

        StyledSlider {
            id: planetSizeSlider
            anchors.verticalCenter: parent.verticalCenter
            width: sliderLength
            value: 1200
            minimumValue: 1
            maximumValue: 2000
            onValueChanged: solarsystem.changeScale(value, false)

            property bool panningEnabled: false
            signal swipeUp()
            signal swipeLeft()
            signal swipeRight()
            signal pannedHorizontally(real p)
            signal pannedVertically(real p)

            onSwipeUp: {
                rotationSpeedSlider.forceActiveFocus()
            }

            onSwipeLeft: {
                viewingDistanceSlider.forceActiveFocus()
            }

            onSwipeRight: {
                planetButtonView.currentIndex = planetButtonView.count - 1
                planetButtonView.forceActiveFocus()
            }

            onPannedHorizontally: {
                var step = (maximumValue - minimumValue) / 30

                if (p &amp;gt; 0) {
                    value += step
                } else {
                    value -= step
                }
            }

            Keys.onPressed: {
                if (event.key === Qt.Key_Select) {
                    panningEnabled = !panningEnabled
                }
            }
        }
    }

    // FPS display, initially hidden, clicking will show it
    FpsDisplay {
        id: fpsDisplay
        anchors.left: parent.left
        anchors.bottom: parent.bottom
        width: 32
        height: 64
        hidden: true
    }

    Timer {
        interval: 1000
        repeat: true
        running: !fpsDisplay.hidden
        onTriggered: {
            fpsDisplay.fps = frames
            frames = 0
        }
        onRunningChanged: frames = 0
    }

    Loader {
        anchors.fill: parent

        source: Qt.platform.os === &quot;tvos&quot; ? &quot;AppleTVInput.qml&quot; : &quot;&quot;
    }
}

</db:programlisting>
</db:article>
