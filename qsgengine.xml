<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSGEngine Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsgengine.xml">QSGEngine</db:link> class allows low level rendering of a scene graph.</db:para>
<db:para>This class was introduced in Qt 5.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSGEngine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qsgengine.xml">QSGEngine</db:link> can be used to render a tree of <db:link xlink:href="qsgnode.xml">QSGNode</db:link> directly on a <db:link xlink:href="qwindow.xml">QWindow</db:link> or <db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link> without any integration with QML, <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> or <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> and the convenience that they provide.</db:para>
<db:para>This means that you must handle event propagation, animation timing, and node lifetime yourself.</db:para>
<db:note>
<db:para>This class is for very low level access to an independent scene graph. Most of the time you will instead want to subclass <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> and insert your <db:link xlink:href="qsgnode.xml">QSGNode</db:link> in a normal <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> scene by overriding <db:link xlink:href="qquickitem.xml#updatePaintNode">QQuickItem::updatePaintNode</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgabstractrenderer.xml">QSGAbstractRenderer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CreateTextureOption-enum">
<db:title>enum QSGEngine::CreateTextureOption</db:title>
<db:bridgehead renderas="sect2">flags QSGEngine::CreateTextureOptions</db:bridgehead>
<db:para>The CreateTextureOption enums are used to customize how a texture is wrapped.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgengine.xml">QSGEngine</db:link></db:emphasis>::TextureHasAlphaChannel</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>The texture has an alpha channel and should be drawn using blending.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgengine.xml">QSGEngine</db:link></db:emphasis>::TextureOwnsGLTexture</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para>The texture object owns the texture id and will delete the GL texture when the texture object is deleted.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgengine.xml">QSGEngine</db:link></db:emphasis>::TextureCanUseAtlas</db:code></db:para>
</db:td>
<db:td><db:code>0x0008</db:code></db:td>
<db:td>
<db:para>The image can be uploaded into a texture atlas.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>CreateTextureOptions</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;CreateTextureOption&gt;. </db:code>It stores an OR combination of <db:code>CreateTextureOption</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSGEngine">
<db:title>[explicit] QSGEngine::QSGEngine(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a new <db:link xlink:href="qsgengine.xml">QSGEngine</db:link> with its <db:code role="parameter">parent</db:code></db:para>
</db:section>
<db:section xml:id="dtor.QSGEngine">
<db:title>[virtual noexcept] QSGEngine::~QSGEngine()</db:title>
<db:para>Destroys the engine</db:para>
</db:section>
<db:section xml:id="createImageNode">
<db:title>[since 5.8] QSGImageNode *QSGEngine::createImageNode() const</db:title>
<db:para>Creates a simple image node. When the scenegraph is not initialized, the return value is null.</db:para>
<db:para>This is cross-backend alternative to constructing a QSGSimpleTextureNode directly.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgimagenode.xml">QSGImageNode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createNinePatchNode">
<db:title>[since 5.8] QSGNinePatchNode *QSGEngine::createNinePatchNode() const</db:title>
<db:para>Creates a nine patch node. When the scenegraph is not initialized, the return value is null.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
</db:section>
<db:section xml:id="createRectangleNode">
<db:title>[since 5.8] QSGRectangleNode *QSGEngine::createRectangleNode() const</db:title>
<db:para>Creates a simple rectangle node. When the scenegraph is not initialized, the return value is null.</db:para>
<db:para>This is cross-backend alternative to constructing a QSGSimpleRectNode directly.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgrectanglenode.xml">QSGRectangleNode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createRenderer">
<db:title>QSGAbstractRenderer *QSGEngine::createRenderer() const</db:title>
<db:para>Returns a renderer that can be used to render a <db:link xlink:href="qsgnode.xml">QSGNode</db:link> tree</db:para>
<db:para>You call <db:link xlink:href="qsgengine.xml#initialize">initialize</db:link>() first with the <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> that you want to use with this renderer. This will return a null renderer otherwise.</db:para>
</db:section>
<db:section xml:id="createTextureFromId">
<db:title>QSGTexture *QSGEngine::createTextureFromId(uint <db:emphasis>id</db:emphasis>, const QSize &amp;<db:emphasis>size</db:emphasis>, QSGEngine::CreateTextureOptions <db:emphasis>options</db:emphasis> = CreateTextureOption()) const</db:title>
<db:para>Creates a texture object that wraps the GL texture <db:code role="parameter">id</db:code> uploaded with <db:code role="parameter">size</db:code></db:para>
<db:para>Valid <db:code role="parameter">options</db:code> are <db:link xlink:href="qsgengine.xml#CreateTextureOption-enum">TextureHasAlphaChannel</db:link> and <db:link xlink:href="qsgengine.xml#CreateTextureOption-enum">TextureOwnsGLTexture</db:link></db:para>
<db:para>The caller takes ownership of the texture object and the texture should only be used with this engine.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgengine.xml#createTextureFromImage">createTextureFromImage</db:link>()</db:member>
<db:member><db:link xlink:href="qsgsimpletexturenode.xml#setOwnsTexture">QSGSimpleTextureNode::setOwnsTexture</db:link>()</db:member>
<db:member><db:link xlink:href="qquickwindow.xml#createTextureFromId">QQuickWindow::createTextureFromId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createTextureFromImage">
<db:title>QSGTexture *QSGEngine::createTextureFromImage(const QImage &amp;<db:emphasis>image</db:emphasis>, QSGEngine::CreateTextureOptions <db:emphasis>options</db:emphasis> = CreateTextureOption()) const</db:title>
<db:para>Creates a texture using the data of <db:code role="parameter">image</db:code></db:para>
<db:para>Valid <db:code role="parameter">options</db:code> are <db:link xlink:href="qsgengine.xml#CreateTextureOption-enum">TextureCanUseAtlas</db:link> and <db:link xlink:href="qsgengine.xml#CreateTextureOption-enum">TextureIsOpaque</db:link>.</db:para>
<db:para>The caller takes ownership of the texture and the texture should only be used with this engine.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgengine.xml#createTextureFromId">createTextureFromId</db:link>()</db:member>
<db:member><db:link xlink:href="qsgsimpletexturenode.xml#setOwnsTexture">QSGSimpleTextureNode::setOwnsTexture</db:link>()</db:member>
<db:member><db:link xlink:href="qquickwindow.xml#createTextureFromImage">QQuickWindow::createTextureFromImage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initialize">
<db:title>void QSGEngine::initialize(QOpenGLContext *<db:emphasis>context</db:emphasis>)</db:title>
<db:para>Initialize the engine with <db:code role="parameter">context</db:code>.</db:para>
<db:warning>
<db:para>You have to make sure that you call <db:link xlink:href="qopenglcontext.xml#makeCurrent">QOpenGLContext::makeCurrent</db:link>() on <db:code role="parameter">context</db:code> before calling this.</db:para>
</db:warning>
</db:section>
<db:section xml:id="invalidate">
<db:title>void QSGEngine::invalidate()</db:title>
<db:para>Invalidate the engine releasing its resources</db:para>
<db:para>You will have to call <db:link xlink:href="qsgengine.xml#initialize">initialize</db:link>() and <db:link xlink:href="qsgengine.xml#createRenderer">createRenderer</db:link>() if you want to use it again.</db:para>
</db:section>
<db:section xml:id="rendererInterface">
<db:title>[since 5.8] QSGRendererInterface *QSGEngine::rendererInterface() const</db:title>
<db:para>Returns the current renderer interface if there is one. Otherwise null is returned.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:member>
<db:member><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
