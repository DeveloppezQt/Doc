<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSortPolicy Class</db:title>
<db:subtitle>Qt3DRender::QSortPolicy</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides storage for the sort types to be used.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSortPolicy</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS 3drender)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::3drender)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3drender</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qt3d-render-sortpolicy.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-qframegraphnode.xml" xlink:role="class">Qt3DRender::QFrameGraphNode</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qt3drender-qsortpolicy.xml">Qt3DRender::QSortPolicy</db:link> class stores the sorting type used by the FrameGraph. The sort types determine how drawable entities are sorted before drawing to determine the drawing order. When <db:link xlink:href="qt3drender-qsortpolicy.xml">QSortPolicy</db:link> is present in the FrameGraph, the sorting mechanism is determined by the <db:link xlink:href="qt3drender-qsortpolicy.xml#sortTypes">sortTypes</db:link> list. Multiple sort types can be used simultaneously. If <db:link xlink:href="qt3drender-qsortpolicy.xml">QSortPolicy</db:link> is not present in the FrameGraph, entities are drawn in the order they appear in the entity hierarchy.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="SortType-enum">
<db:title>enum QSortPolicy::SortType</db:title>
<db:enumsynopsis>
<db:enumname>SortType</db:enumname>
<db:enumitem>
<db:enumidentifier>StateChangeCost</db:enumidentifier>
<db:enumvalue>(1 &lt;&lt; 0)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BackToFront</db:enumidentifier>
<db:enumvalue>(1 &lt;&lt; 1)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Material</db:enumidentifier>
<db:enumvalue>(1 &lt;&lt; 2)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FrontToBack</db:enumidentifier>
<db:enumvalue>(1 &lt;&lt; 3)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Texture</db:enumidentifier>
<db:enumvalue>(1 &lt;&lt; 4)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Uniform</db:enumidentifier>
<db:enumvalue>(1 &lt;&lt; 5)</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type describes the available sort types.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qsortpolicy.xml">QSortPolicy</db:link></db:emphasis>::StateChangeCost</db:code></db:para>
</db:td>
<db:td><db:code>(1 &lt;&lt; 0)</db:code></db:td>
<db:td>
<db:para>sort the objects so as to minimize the cost of changing from the currently rendered state</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qsortpolicy.xml">QSortPolicy</db:link></db:emphasis>::BackToFront</db:code></db:para>
</db:td>
<db:td><db:code>(1 &lt;&lt; 1)</db:code></db:td>
<db:td>
<db:para>sort the objects from back to front based on inverted z order. More accurately, the sorting key is the z component of the projection of the camera-to-object-center vector onto the camera's view vector.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qsortpolicy.xml">QSortPolicy</db:link></db:emphasis>::Material</db:code></db:para>
</db:td>
<db:td><db:code>(1 &lt;&lt; 2)</db:code></db:td>
<db:td>
<db:para>sort the objects based on their material (shader) value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qsortpolicy.xml">QSortPolicy</db:link></db:emphasis>::FrontToBack</db:code></db:para>
</db:td>
<db:td><db:code>(1 &lt;&lt; 3)</db:code></db:td>
<db:td>
<db:para>sort the objects from front to back. The opposite of BackToFront.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qsortpolicy.xml">QSortPolicy</db:link></db:emphasis>::Texture (since Qt 5.14)</db:code></db:para>
</db:td>
<db:td><db:code>(1 &lt;&lt; 4)</db:code></db:td>
<db:td>
<db:para>sort the objects to minimize texture changes.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qsortpolicy.xml">QSortPolicy</db:link></db:emphasis>::Uniform (since Qt 5.15)</db:code></db:para>
</db:td>
<db:td><db:code>(1 &lt;&lt; 5)</db:code></db:td>
<db:td>
<db:para>sort the objects to minimize uniform changes.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="sortTypes-prop">
<db:title>sortTypes : QList&lt;int&gt;</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QList&lt;int&gt;</db:type>
<db:varname>sortTypes</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">sortTypesInt</db:synopsisinfo>
<db:synopsisinfo role="setter">setSortTypes</db:synopsisinfo>
<db:synopsisinfo role="setter">setSortTypes</db:synopsisinfo>
<db:synopsisinfo role="notifier">sortTypesChanged</db:synopsisinfo>
<db:synopsisinfo role="notifier">sortTypesChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Specifies the sorting types to be used.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlist.xml">QList</db:link></db:type>&lt;<db:type>int</db:type>&gt; <db:emphasis role="bold">sortTypesInt</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSortTypes</db:emphasis>(const <db:type><db:link xlink:href="qlist.xml">QList</db:link></db:type>&lt;<db:type><db:link xlink:href="qt3drender-qsortpolicy.xml#SortType-enum">Qt3DRender::QSortPolicy::SortType</db:link></db:type>&gt; &amp;<db:emphasis>sortTypes</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSortTypes</db:emphasis>(const <db:type><db:link xlink:href="qlist.xml">QList</db:link></db:type>&lt;<db:type>int</db:type>&gt; &amp;<db:emphasis>sortTypesInt</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">sortTypesChanged</db:emphasis>(const <db:type><db:link xlink:href="qlist.xml">QList</db:link></db:type>&lt;<db:type><db:link xlink:href="qt3drender-qsortpolicy.xml#SortType-enum">Qt3DRender::QSortPolicy::SortType</db:link></db:type>&gt; &amp;<db:emphasis>sortTypes</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">sortTypesChanged</db:emphasis>(const <db:type><db:link xlink:href="qlist.xml">QList</db:link></db:type>&lt;<db:type>int</db:type>&gt; &amp;<db:emphasis>sortTypes</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSortPolicy">
<db:title>[explicit] QSortPolicy::QSortPolicy(Qt3DCore::QNode *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSortPolicy</db:methodname>
<db:methodparam>
<db:type>Qt3DCore::QNode *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSortPolicy(Qt3DCore::QNode *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs <db:link xlink:href="qt3drender-qsortpolicy.xml">QSortPolicy</db:link> with given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="sortTypes">
<db:title>QList&lt;Qt3DRender::QSortPolicy::SortType&gt; QSortPolicy::sortTypes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;Qt3DRender::QSortPolicy::SortType&gt;</db:type>
<db:methodname>sortTypes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;Qt3DRender::QSortPolicy::SortType&gt; sortTypes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current sort types in use</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qsortpolicy.xml#sortTypes-prop">setSortTypes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
