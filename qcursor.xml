<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCursor Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcursor.xml">QCursor</db:link> class provides a mouse cursor with an arbitrary shape.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCursor</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QCursor is part of <db:simplelist><db:member>appearance</db:member><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class is mainly used to create mouse cursors that are associated with particular widgets and to get and set the position of the mouse cursor.</db:para>
<db:para>Qt has a number of standard cursor shapes, but you can also make custom cursor shapes based on a <db:link xlink:href="qbitmap.xml">QBitmap</db:link>, a mask and a hotspot.</db:para>
<db:para>To associate a cursor with a widget, use <db:link xlink:href="qwidget.xml#cursor-prop">QWidget::setCursor</db:link>(). To associate a cursor with all widgets (normally for a short period of time), use <db:link xlink:href="qguiapplication.xml#setOverrideCursor">QGuiApplication::setOverrideCursor</db:link>().</db:para>
<db:para>To set a cursor shape use <db:link xlink:href="qcursor.xml#setShape">QCursor::setShape</db:link>() or use the <db:link xlink:href="qcursor.xml">QCursor</db:link> constructor which takes the shape as argument, or you can use one of the predefined cursors defined in the <db:link xlink:href="qt.xml#CursorShape-enum">Qt::CursorShape</db:link> enum.</db:para>
<db:para>If you want to create a cursor with your own bitmap, either use the <db:link xlink:href="qcursor.xml">QCursor</db:link> constructor which takes a bitmap and a mask or the constructor which takes a pixmap as arguments.</db:para>
<db:para>To set or get the position of the mouse cursor use the static methods <db:link xlink:href="qcursor.xml#pos">QCursor::pos</db:link>() and <db:link xlink:href="qcursor.xml#setPos">QCursor::setPos</db:link>().</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> It is possible to create a <db:link xlink:href="qcursor.xml">QCursor</db:link> before <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link>, but it is not useful except as a place-holder for a real <db:link xlink:href="qcursor.xml">QCursor</db:link> created after <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link>. Attempting to use a <db:link xlink:href="qcursor.xml">QCursor</db:link> that was created before <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> will result in a crash.</db:para>
<db:section xml:id="a-note-for-x11-users">
<db:title>A Note for X11 Users</db:title>
<db:para>On X11, Qt supports the <db:link xlink:href="http://www.xfree86.org/4.3.0/Xcursor.3.html">Xcursor</db:link> library, which allows for full color icon themes. The table below shows the cursor name used for each <db:link xlink:href="qt.xml#CursorShape-enum">Qt::CursorShape</db:link> value. If a cursor cannot be found using the name shown below, a standard X11 cursor will be used instead. Note: X11 does not provide appropriate cursors for all possible <db:link xlink:href="qt.xml#CursorShape-enum">Qt::CursorShape</db:link> values. It is possible that some cursors will be taken from the Xcursor theme, while others will use an internal bitmap cursor.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Shape</db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::CursorShape</db:link> Value</db:para>
</db:th>
<db:th>
<db:para>Cursor Name</db:para>
</db:th>
<db:th>
<db:para>Shape</db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::CursorShape</db:link> Value</db:para>
</db:th>
<db:th>
<db:para>Cursor Name</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/cursor-arrow.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::ArrowCursor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>left_ptr</db:code></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/cursor-sizev.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::SizeVerCursor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>size_ver</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/cursor-uparrow.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::UpArrowCursor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>up_arrow</db:code></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/cursor-sizeh.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::SizeHorCursor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>size_hor</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/cursor-cross.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::CrossCursor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>cross</db:code></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/cursor-sizeb.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::SizeBDiagCursor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>size_bdiag</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/cursor-ibeam.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::IBeamCursor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>ibeam</db:code></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/cursor-sizef.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::SizeFDiagCursor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>size_fdiag</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/cursor-wait.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::WaitCursor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>wait</db:code></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/cursor-sizeall.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::SizeAllCursor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>size_all</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/cursor-busy.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::BusyCursor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>left_ptr_watch</db:code></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/cursor-vsplit.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::SplitVCursor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>split_v</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/cursor-forbidden.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::ForbiddenCursor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>forbidden</db:code></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/cursor-hsplit.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::SplitHCursor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>split_h</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/cursor-hand.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::PointingHandCursor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>pointing_hand</db:code></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/cursor-openhand.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::OpenHandCursor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>openhand</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/cursor-whatsthis.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::WhatsThisCursor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>whats_this</db:code></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/cursor-closedhand.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::ClosedHandCursor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>closedhand</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::DragMoveCursor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>dnd-move</db:code> or <db:code>move</db:code></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::DragCopyCursor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>dnd-copy</db:code> or <db:code>copy</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CursorShape-enum">Qt::DragLinkCursor</db:link></db:para>
</db:td>
<db:td>
<db:para><db:code>dnd-link</db:code> or <db:code>link</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml">QWidget</db:link></db:member>
<db:member><db:link xlink:href="guibooks.xml#fowler">GUI Design Handbook: Cursors</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCursor">
<db:title>QCursor::QCursor()</db:title>
<db:constructorsynopsis>
<db:methodname>QCursor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCursor()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a cursor with the default arrow shape.</db:para>
</db:section>
<db:section xml:id="QCursor-1">
<db:title>QCursor::QCursor(Qt::CursorShape <db:emphasis>shape</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QCursor</db:methodname>
<db:methodparam>
<db:type>Qt::CursorShape</db:type>
<db:parameter>shape</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCursor(Qt::CursorShape shape)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a cursor with the specified <db:code role="parameter">shape</db:code>.</db:para>
<db:para>See <db:link xlink:href="qt.xml#CursorShape-enum">Qt::CursorShape</db:link> for a list of shapes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcursor.xml#setShape">setShape</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QCursor-2">
<db:title>QCursor::QCursor(const QBitmap &amp;<db:emphasis>bitmap</db:emphasis>, const QBitmap &amp;<db:emphasis>mask</db:emphasis>, int <db:emphasis>hotX</db:emphasis> = -1, int <db:emphasis>hotY</db:emphasis> = -1)</db:title>
<db:constructorsynopsis>
<db:methodname>QCursor</db:methodname>
<db:methodparam>
<db:type>const QBitmap &amp;</db:type>
<db:parameter>bitmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QBitmap &amp;</db:type>
<db:parameter>mask</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>hotX</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>hotY</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QCursor(const QBitmap &amp;bitmap, const QBitmap &amp;mask, int hotX, int hotY)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a custom bitmap cursor.</db:para>
<db:para><db:code role="parameter">bitmap</db:code> and <db:code role="parameter">mask</db:code> make up the bitmap. <db:code role="parameter">hotX</db:code> and <db:code role="parameter">hotY</db:code> define the cursor's hot spot.</db:para>
<db:para>If <db:code role="parameter">hotX</db:code> is negative, it is set to the <db:code>bitmap().width()/2</db:code>. If <db:code role="parameter">hotY</db:code> is negative, it is set to the <db:code>bitmap().height()/2</db:code>.</db:para>
<db:para>The cursor <db:code role="parameter">bitmap</db:code> (B) and <db:code role="parameter">mask</db:code> (M) bits are combined like this:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>B=1 and M=1 gives black.</db:para>
</db:listitem>
<db:listitem>
<db:para>B=0 and M=1 gives white.</db:para>
</db:listitem>
<db:listitem>
<db:para>B=0 and M=0 gives transparent.</db:para>
</db:listitem>
<db:listitem>
<db:para>B=1 and M=0 gives an XOR'd result under Windows, undefined results on all other platforms.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Use the global Qt color <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::color0</db:link> to draw 0-pixels and <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::color1</db:link> to draw 1-pixels in the bitmaps.</db:para>
<db:para>Valid cursor sizes depend on the display hardware (or the underlying window system). We recommend using 32 x 32 cursors, because this size is supported on all platforms. Some platforms also support 16 x 16, 48 x 48, and 64 x 64 cursors.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitmap.xml#QBitmap">QBitmap::QBitmap</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#setMask">QBitmap::setMask</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QCursor-3">
<db:title>[explicit] QCursor::QCursor(const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, int <db:emphasis>hotX</db:emphasis> = -1, int <db:emphasis>hotY</db:emphasis> = -1)</db:title>
<db:constructorsynopsis>
<db:methodname>QCursor</db:methodname>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>hotX</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>hotY</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QCursor(const QPixmap &amp;pixmap, int hotX, int hotY)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a custom pixmap cursor.</db:para>
<db:para><db:code role="parameter">pixmap</db:code> is the image. It is usual to give it a mask (set using <db:link xlink:href="qpixmap.xml#setMask">QPixmap::setMask</db:link>()). <db:code role="parameter">hotX</db:code> and <db:code role="parameter">hotY</db:code> define the cursor's hot spot.</db:para>
<db:para>If <db:code role="parameter">hotX</db:code> is negative, it is set to the <db:code>pixmap().width()/2</db:code>. If <db:code role="parameter">hotY</db:code> is negative, it is set to the <db:code>pixmap().height()/2</db:code>.</db:para>
<db:para>Valid cursor sizes depend on the display hardware (or the underlying window system). We recommend using 32 x 32 cursors, because this size is supported on all platforms. Some platforms also support 16 x 16, 48 x 48, and 64 x 64 cursors.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#QPixmap">QPixmap::QPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#setMask">QPixmap::setMask</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QCursor-4">
<db:title>QCursor::QCursor(const QCursor &amp;<db:emphasis>c</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QCursor</db:methodname>
<db:methodparam>
<db:type>const QCursor &amp;</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QCursor(const QCursor &amp;c)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of the cursor <db:code role="parameter">c</db:code>.</db:para>
</db:section>
<db:section xml:id="QCursor-5">
<db:title>[since 5.5] QCursor::QCursor(QCursor &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QCursor</db:methodname>
<db:methodparam>
<db:type>QCursor &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QCursor(QCursor &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a cursor from <db:code role="parameter">other</db:code>. After being moved from, the only valid operations on <db:code role="parameter">other</db:code> are destruction and (move and copy) assignment. The effects of calling any other member function on a moved-from instance are undefined.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="dtor.QCursor">
<db:title>QCursor::~QCursor()</db:title>
<db:destructorsynopsis>
<db:methodname>~QCursor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCursor()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the cursor.</db:para>
</db:section>
<db:section xml:id="bitmap-1">
<db:title>QBitmap QCursor::bitmap() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBitmap</db:type>
<db:methodname>bitmap</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitmap bitmap() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the cursor bitmap, or a null bitmap if it is one of the standard cursors.</db:para>
</db:section>
<db:section xml:id="hotSpot">
<db:title>QPoint QCursor::hotSpot() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>hotSpot</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint hotSpot() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the cursor hot spot, or (0, 0) if it is one of the standard cursors.</db:para>
</db:section>
<db:section xml:id="mask-1">
<db:title>QBitmap QCursor::mask() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBitmap</db:type>
<db:methodname>mask</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitmap mask() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the cursor bitmap mask, or a null bitmap if it is one of the standard cursors.</db:para>
</db:section>
<db:section xml:id="pixmap">
<db:title>QPixmap QCursor::pixmap() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPixmap</db:type>
<db:methodname>pixmap</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap pixmap() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the cursor pixmap. This is only valid if the cursor is a pixmap cursor.</db:para>
</db:section>
<db:section xml:id="pos">
<db:title>[static] QPoint QCursor::pos()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>pos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint pos()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position of the cursor (hot spot) of the primary screen in global screen coordinates.</db:para>
<db:para>You can call <db:link xlink:href="qwidget.xml#mapFromGlobal">QWidget::mapFromGlobal</db:link>() to translate it to widget coordinates.</db:para>
<db:note>
<db:para>The position is queried from the windowing system. If mouse events are generated via other means (e.g., via QWindowSystemInterface in a unit test), those fake mouse moves will not be reflected in the returned value.</db:para>
</db:note>
<db:note>
<db:para>On platforms where there is no windowing system or cursors are not available, the returned position is based on the mouse move events generated via QWindowSystemInterface.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcursor.xml#setPos">setPos</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#mapFromGlobal">QWidget::mapFromGlobal</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#mapToGlobal">QWidget::mapToGlobal</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#primaryScreen-prop">QGuiApplication::primaryScreen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pos-1">
<db:title>[static] QPoint QCursor::pos(const QScreen *<db:emphasis>screen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>pos</db:methodname>
<db:methodparam>
<db:type>const QScreen *</db:type>
<db:parameter>screen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint pos(const QScreen *screen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position of the cursor (hot spot) of the <db:code role="parameter">screen</db:code> in global screen coordinates.</db:para>
<db:para>You can call <db:link xlink:href="qwidget.xml#mapFromGlobal">QWidget::mapFromGlobal</db:link>() to translate it to widget coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcursor.xml#setPos">setPos</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#mapFromGlobal">QWidget::mapFromGlobal</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#mapToGlobal">QWidget::mapToGlobal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPos">
<db:title>[static] void QCursor::setPos(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setPos</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPos(int x, int y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the cursor (hot spot) of the primary screen to the global screen position (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
<db:para>You can call <db:link xlink:href="qwidget.xml#mapToGlobal">QWidget::mapToGlobal</db:link>() to translate widget coordinates to global screen coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcursor.xml#pos">pos</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#mapFromGlobal">QWidget::mapFromGlobal</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#mapToGlobal">QWidget::mapToGlobal</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#primaryScreen-prop">QGuiApplication::primaryScreen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPos-1">
<db:title>[static] void QCursor::setPos(QScreen *<db:emphasis>screen</db:emphasis>, int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setPos</db:methodname>
<db:methodparam>
<db:type>QScreen *</db:type>
<db:parameter>screen</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPos(QScreen *screen, int x, int y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the cursor (hot spot) of the <db:code role="parameter">screen</db:code> to the global screen position (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
<db:para>You can call <db:link xlink:href="qwidget.xml#mapToGlobal">QWidget::mapToGlobal</db:link>() to translate widget coordinates to global screen coordinates.</db:para>
<db:note>
<db:para>Calling this function results in changing the cursor position through the windowing system. The windowing system will typically respond by sending mouse events to the application's window. This means that the usage of this function should be avoided in unit tests and everywhere where fake mouse events are being injected via QWindowSystemInterface because the windowing system's mouse state (with regards to buttons for example) may not match the state in the application-generated events.</db:para>
</db:note>
<db:note>
<db:para>On platforms where there is no windowing system or cursors are not available, this function may do nothing.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcursor.xml#pos">pos</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#mapFromGlobal">QWidget::mapFromGlobal</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#mapToGlobal">QWidget::mapToGlobal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPos-2">
<db:title>[static] void QCursor::setPos(const QPoint &amp;<db:emphasis>p</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setPos</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPos(const QPoint &amp;p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Moves the cursor (hot spot) to the global screen position at point <db:code role="parameter">p</db:code>.</db:para>
</db:section>
<db:section xml:id="setPos-3">
<db:title>[static] void QCursor::setPos(QScreen *<db:emphasis>screen</db:emphasis>, const QPoint &amp;<db:emphasis>p</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setPos</db:methodname>
<db:methodparam>
<db:type>QScreen *</db:type>
<db:parameter>screen</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPos(QScreen *screen, const QPoint &amp;p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Moves the cursor (hot spot) to the global screen position of the <db:code role="parameter">screen</db:code> at point <db:code role="parameter">p</db:code>.</db:para>
</db:section>
<db:section xml:id="setShape">
<db:title>void QCursor::setShape(Qt::CursorShape <db:emphasis>shape</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setShape</db:methodname>
<db:methodparam>
<db:type>Qt::CursorShape</db:type>
<db:parameter>shape</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setShape(Qt::CursorShape shape)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the cursor to the shape identified by <db:code role="parameter">shape</db:code>.</db:para>
<db:para>See <db:link xlink:href="qt.xml#CursorShape-enum">Qt::CursorShape</db:link> for the list of cursor shapes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcursor.xml#shape">shape</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shape">
<db:title>Qt::CursorShape QCursor::shape() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::CursorShape</db:type>
<db:methodname>shape</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::CursorShape shape() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the cursor shape identifier. The return value is one of the <db:link xlink:href="qt.xml#CursorShape-enum">Qt::CursorShape</db:link> enum values (cast to an int).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcursor.xml#setShape">setShape</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.7] void QCursor::swap(QCursor &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QCursor &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QCursor &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this cursor with the <db:code role="parameter">other</db:code> cursor.</db:para>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QCursor::operator QVariant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>operator QVariant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant operator QVariant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the cursor as a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QCursor &amp;QCursor::operator=(const QCursor &amp;<db:emphasis>c</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCursor &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QCursor &amp;</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QCursor &amp; operator=(const QCursor &amp;c)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">c</db:code> to this cursor and returns a reference to this cursor.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>[since 5.2] QCursor &amp;QCursor::operator=(QCursor &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCursor &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QCursor &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCursor &amp; operator=(QCursor &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qcursor.xml">QCursor</db:link> instance.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>[since 5.10] bool operator!=(const QCursor &amp;<db:emphasis>lhs</db:emphasis>, const QCursor &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QCursor &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QCursor &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QCursor &amp;lhs, const QCursor &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inequality operator. Returns the equivalent of !(<db:code role="parameter">lhs</db:code> == <db:code role="parameter">rhs</db:code>).</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcursor.xml#operator-eq-eq">operator==</db:link>(const QCursor &amp;lhs, const QCursor &amp;rhs)</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QCursor &amp;<db:emphasis>cursor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QCursor &amp;</db:type>
<db:parameter>cursor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QCursor &amp;cursor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the <db:code role="parameter">cursor</db:code> to the <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[since 5.10] bool operator==(const QCursor &amp;<db:emphasis>lhs</db:emphasis>, const QCursor &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QCursor &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QCursor &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QCursor &amp;lhs, const QCursor &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Equality operator. Returns <db:code>true</db:code> if <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> have the same <db:link xlink:href="qcursor.xml#shape">shape</db:link>() and, in the case of <db:link xlink:href="qt.xml#CursorShape-enum">bitmap cursors</db:link>, the same <db:link xlink:href="qcursor.xml#hotSpot">hotSpot</db:link>() and either the same <db:link xlink:href="qcursor.xml#pixmap">pixmap</db:link>() or the same <db:link xlink:href="qcursor.xml#bitmap-1">bitmap</db:link>() and <db:link xlink:href="qcursor.xml#mask-1">mask</db:link>().</db:para>
<db:note>
<db:para>When comparing bitmap cursors, this function only compares the bitmaps' <db:link xlink:href="qpixmap.xml#cacheKey">cache keys</db:link>, not each pixel.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcursor.xml#operator-not-eq">operator!=</db:link>(const QCursor &amp;lhs, const QCursor &amp;rhs)</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QCursor &amp;<db:emphasis>cursor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QCursor &amp;</db:type>
<db:parameter>cursor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QCursor &amp;cursor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads the <db:code role="parameter">cursor</db:code> from the <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QCursor</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qcursor.xml">QCursor</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="bitmap">
<db:title>[since 5.15] QBitmap QCursor::bitmap(<db:emphasis>Qt::ReturnByValueConstant</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBitmap</db:type>
<db:methodname>bitmap</db:methodname>
<db:methodparam>
<db:type>Qt::ReturnByValueConstant</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitmap bitmap(Qt::ReturnByValueConstant) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use the overload without argument instead.</db:para>
<db:para>Returns the cursor bitmap, or a null bitmap if it is one of the standard cursors.</db:para>
<db:para>Previously, Qt provided a version of <db:code>bitmap()</db:code> which returned the bitmap by-pointer. That version is now removed. To maintain compatibility with old code, this function was provided to differentiate between the by-pointer function and the by-value function.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="mask">
<db:title>[since 5.15] QBitmap QCursor::mask(<db:emphasis>Qt::ReturnByValueConstant</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBitmap</db:type>
<db:methodname>mask</db:methodname>
<db:methodparam>
<db:type>Qt::ReturnByValueConstant</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitmap mask(Qt::ReturnByValueConstant) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use the overload without argument instead.</db:para>
<db:para>Returns the cursor bitmap mask, or a null bitmap if it is one of the standard cursors.</db:para>
<db:para>Previously, Qt provided a version of <db:code>mask()</db:code> which returned the bitmap by-pointer. That version is now removed. To maintain compatibility with old code, this function was provided to differentiate between the by-pointer function and the by-value function.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
