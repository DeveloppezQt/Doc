<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Custom Instanced Rendering</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates instancing with custom materials and a C++ instance table.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2020 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick3D
import InstancingExample

Window {
    id: window
    width: 1280
    height: 720
    visible: true

    View3D {
        id: view
        anchors.fill: parent

        environment: SceneEnvironment {
            clearColor: &quot;#8fafff&quot;
            backgroundMode: SceneEnvironment.Color
        }

        Node {
            id: cameraNode
            PerspectiveCamera {
                property vector3d basePos: Qt.vector3d(0, 0, 750)
                property vector3d halfZoomPos: Qt.vector3d(0, -300, 400)
                property vector3d zoomPos: Qt.vector3d(0, -300, 100)
                property vector3d otherZoomPos: Qt.vector3d(-200, -300, 400)
                id: camera
                position: basePos
                eulerRotation.x: -20
            }
        }

        property int zoomDuration: 4000
        property int rotationDuration: 7000

        SequentialAnimation {
            running: true
            PauseAnimation { duration: 1000 }
            NumberAnimation {
                from: 0; to: 90
                target: cameraNode; property: &quot;eulerRotation.y&quot;
                duration: view.rotationDuration
            }

            PauseAnimation { duration: 500 }
            Vector3dAnimation {
                from: camera.basePos; to: camera.halfZoomPos
                target: camera; property: &quot;position&quot;
                duration: view.zoomDuration
            }
            Vector3dAnimation {
                from: camera.halfZoomPos; to: camera.zoomPos
                target: camera; property: &quot;position&quot;
                duration: view.zoomDuration
            }
            PauseAnimation { duration: 1000 }
            Vector3dAnimation {
                from: camera.zoomPos; to: camera.basePos
                target: camera; property: &quot;position&quot;
                duration: view.zoomDuration
            }

            PauseAnimation { duration: 500 }
            NumberAnimation {
                from: 90; to: 180
                target: cameraNode; property: &quot;eulerRotation.y&quot;
                duration: view.rotationDuration
            }

            PauseAnimation { duration: 500 }
            Vector3dAnimation {
                from: camera.basePos; to: camera.halfZoomPos
                target: camera; property: &quot;position&quot;
                duration: view.zoomDuration
            }
            Vector3dAnimation {
                from: camera.halfZoomPos; to: camera.zoomPos
                target: camera; property: &quot;position&quot;
                duration: view.zoomDuration
            }
            PauseAnimation { duration: 1000 }
            Vector3dAnimation {
                from: camera.zoomPos; to: camera.basePos
                target: camera; property: &quot;position&quot;
                duration: view.zoomDuration
            }

            PauseAnimation { duration: 500 }
            NumberAnimation {
                from: 180; to: 360
                target: cameraNode; property: &quot;eulerRotation.y&quot;
                duration: view.rotationDuration
            }

            PauseAnimation { duration: 500 }
            Vector3dAnimation {
                from: camera.basePos; to: camera.otherZoomPos
                target: camera; property: &quot;position&quot;
                duration: view.zoomDuration
            }
            PauseAnimation { duration: 1000 }
            Vector3dAnimation {
                from: camera.otherZoomPos; to: camera.basePos
                target: camera; property: &quot;position&quot;
                duration: view.zoomDuration
            }

            loops: Animation.Infinite
        }

        DirectionalLight {
            eulerRotation.x: 250
            eulerRotation.y: -30
            brightness: 1.0
            ambientColor: &quot;#7f7f7f&quot;
        }

        CustomMaterial {
            id: cubeMaterial
            property real uTime: 0
            NumberAnimation on uTime {
                from: 0
                to: 1000000
                duration: 1000000
                loops: Animation.Infinite
            }
            vertexShader: &quot;cubeMaterial.vert&quot;
            fragmentShader: &quot;cubeMaterial.frag&quot;
        }

        Model {
            id: instancedCube
            property real cubeSize: 15
            scale: Qt.vector3d(cubeSize/100, cubeSize/100, cubeSize/100)
            source: &quot;#Cube&quot;
            instancing: CppInstanceTable {
                gridSize: 65
                gridSpacing: instancedCube.cubeSize
                randomSeed: 1522562186
            }
            materials: cubeMaterial
        }
    }
}

</db:programlisting>
</db:article>
