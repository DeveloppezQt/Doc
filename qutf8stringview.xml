<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QUtf8StringView Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> class provides a unified view on UTF-8 strings with a read-only subset of the <db:link xlink:href="qstring.xml">QString</db:link> API.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QUtf8StringView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QUtf8StringView is part of <db:simplelist><db:member>tools</db:member><db:member>string-processing</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> references a contiguous portion of a UTF-8 string it does not own. It acts as an interface type to all kinds of UTF-8 string, without the need to construct a <db:link xlink:href="qstring.xml">QString</db:link> or <db:link xlink:href="qbytearray.xml">QByteArray</db:link> first.</db:para>
<db:para>The UTF-8 string may be represented as an array (or an array-compatible data-structure such as std::basic_string, etc.) of <db:code>char8_t</db:code>, <db:code>char</db:code>, <db:code>signed char</db:code> or <db:code>unsigned char</db:code>.</db:para>
<db:para><db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> is designed as an interface type; its main use-case is as a function parameter type. When QUtf8StringViews are used as automatic variables or data members, care must be taken to ensure that the referenced string data (for example, owned by a std::u8string) outlives the <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> on all code paths, lest the string view ends up referencing deleted data.</db:para>
<db:para>When used as an interface type, <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> allows a single function to accept a wide variety of UTF-8 string data sources. One function accepting <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> thus replaces several function overloads (taking e.g. <db:link xlink:href="qbytearray.xml">QByteArray</db:link>), while at the same time enabling even more string data sources to be passed to the function, such as <db:code>u8&quot;Hello World&quot;</db:code>, a <db:code>char8_t</db:code> (C++20) or <db:code>char</db:code> (C++17) string literal. The <db:code>char8_t</db:code> incompatibility between C++17 and C++20 goes away when using <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link>.</db:para>
<db:para>Like all views, QUtf8StringViews should be passed by value, not by reference-to-const:</db:para>
<db:programlisting language="cpp">    void myfun1(QUtf8StringView sv);        // preferred
    void myfun2(const QUtf8StringView &amp;amp;sv); // compiles and works, but slower
</db:programlisting>
<db:para>If you want to give your users maximum freedom in what strings they can pass to your function, consider using <db:link xlink:href="qanystringview.xml">QAnyStringView</db:link> instead.</db:para>
<db:para><db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> can also be used as the return value of a function. If you call a function returning <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link>, take extra care to not keep the <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> around longer than the function promises to keep the referenced string data alive. If in doubt, obtain a strong reference to the data by calling <db:link xlink:href="qutf8stringview.xml#toString">toString</db:link>() to convert the <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> into a <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:para><db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> is a <db:emphasis>Literal Type</db:emphasis>.</db:para>
<db:section xml:id="compatible-character-types">
<db:title>Compatible Character Types</db:title>
<db:para><db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> accepts strings over a variety of character types:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>char</db:code> (both signed and unsigned)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>char8_t</db:code> (C++20 only)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="sizes-and-sub-strings">
<db:title>Sizes and Sub-Strings</db:title>
<db:para>All sizes and positions in <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> functions are in UTF-8 code points (that is, UTF-8 multibyte sequences count as two, three or four, depending on their length). <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> does not an attempt to detect or prevent slicing right through UTF-8 multibyte sequences. This is similar to the situation with <db:link xlink:href="qstringview.xml">QStringView</db:link> and surrogate pairs.</db:para>
</db:section>
<db:section xml:id="c-20-char8-t-and-qutf8stringview">
<db:title>C++20, char8_t, and QUtf8StringView</db:title>
<db:para>In C++20, <db:code>u8&quot;&quot;</db:code> string literals changed their type from <db:code>const char[]</db:code> to <db:code>const char8_t[]</db:code>. If Qt 6 could have depended on C++20, <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> would store <db:code>char8_t</db:code> natively, and the following functions and aliases would use (pointers to) <db:code>char8_t</db:code>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qutf8stringview.xml#storage_type-typedef">storage_type</db:link>, <db:link xlink:href="qutf8stringview.xml#value_type-typedef">value_type</db:link>, etc</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qutf8stringview.xml#begin">begin</db:link>(), <db:link xlink:href="qutf8stringview.xml#end">end</db:link>(), <db:link xlink:href="qutf8stringview.xml#data">data</db:link>(), etc</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qutf8stringview.xml#front">front</db:link>(), <db:link xlink:href="qutf8stringview.xml#back">back</db:link>(), <db:link xlink:href="qutf8stringview.xml#at">at</db:link>(), operator[]()</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This is what <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> is expected to look like in Qt 7, but for Qt 6, this was not possible. Instead of locking users into a C++17-era interface for the next decade, Qt provides two <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> classes, in different (inline) namespaces. The first, in namespace <db:code>q_no_char8_t</db:code>, has a <db:link xlink:href="qutf8stringview.xml#value_type-typedef">value_type</db:link> of <db:code>const char</db:code> and is universally available. The second, in namespace <db:code>q_has_char8_t</db:code>, has a <db:link xlink:href="qutf8stringview.xml#value_type-typedef">value_type</db:link> of <db:code>const char8_t</db:code> and is only available when compiling in C++20 mode.</db:para>
<db:para><db:code>q_no_char8_t</db:code> is an inline namespace regardless of C++ edition, to avoid accidental binary incompatibilities. To use the <db:code>char8_t</db:code> version, you need to name it explicitly with <db:code>q_has_char8_t::QUtf8StringView</db:code>.</db:para>
<db:para>Internally, both are instantiations of the same template class, QBasicUtf8StringView. Please do not use the template class's name in your source code.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml">QAnyStringView</db:link></db:member>
<db:member><db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link></db:member>
<db:member><db:link xlink:href="qstring.xml">QString</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="const_iterator-typedef">
<db:title>QUtf8StringView::const_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>const_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef provides an STL-style const iterator for <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#iterator-typedef">iterator</db:link></db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="const_pointer-typedef">
<db:title>QUtf8StringView::const_pointer</db:title>
<db:typedefsynopsis>
<db:typedefname>const_pointer</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>value_type *</db:code>. Provided for compatibility with the STL.</db:para>
</db:section>
<db:section xml:id="const_reference-typedef">
<db:title>QUtf8StringView::const_reference</db:title>
<db:typedefsynopsis>
<db:typedefname>const_reference</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>value_type &amp;</db:code>. Provided for compatibility with the STL.</db:para>
</db:section>
<db:section xml:id="const_reverse_iterator-typedef">
<db:title>QUtf8StringView::const_reverse_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>const_reverse_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef provides an STL-style const reverse iterator for <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#reverse_iterator-typedef">reverse_iterator</db:link></db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#const_iterator-typedef">const_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="difference_type-typedef">
<db:title>QUtf8StringView::difference_type</db:title>
<db:typedefsynopsis>
<db:typedefname>difference_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>std::ptrdiff_t</db:code>. Provided for compatibility with the STL.</db:para>
</db:section>
<db:section xml:id="iterator-typedef">
<db:title>QUtf8StringView::iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef provides an STL-style const iterator for <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link>.</db:para>
<db:para><db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> does not support mutable iterators, so this is the same as <db:link xlink:href="qutf8stringview.xml#const_iterator-typedef">const_iterator</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#const_iterator-typedef">const_iterator</db:link></db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#reverse_iterator-typedef">reverse_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointer-typedef">
<db:title>QUtf8StringView::pointer</db:title>
<db:typedefsynopsis>
<db:typedefname>pointer</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>value_type *</db:code>. Provided for compatibility with the STL.</db:para>
<db:para><db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> does not support mutable pointers, so this is the same as <db:link xlink:href="qutf8stringview.xml#const_pointer-typedef">const_pointer</db:link>.</db:para>
</db:section>
<db:section xml:id="reference-typedef">
<db:title>QUtf8StringView::reference</db:title>
<db:typedefsynopsis>
<db:typedefname>reference</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>value_type &amp;</db:code>. Provided for compatibility with the STL.</db:para>
<db:para><db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> does not support mutable references, so this is the same as <db:link xlink:href="qutf8stringview.xml#const_reference-typedef">const_reference</db:link>.</db:para>
</db:section>
<db:section xml:id="reverse_iterator-typedef">
<db:title>QUtf8StringView::reverse_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>reverse_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef provides an STL-style const reverse iterator for <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link>.</db:para>
<db:para><db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> does not support mutable reverse iterators, so this is the same as <db:link xlink:href="qutf8stringview.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link></db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#iterator-typedef">iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size_type-typedef">
<db:title>QUtf8StringView::size_type</db:title>
<db:typedefsynopsis>
<db:typedefname>size_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for qsizetype. Provided for compatibility with the STL.</db:para>
</db:section>
<db:section xml:id="storage_type-typedef">
<db:title>[alias] QUtf8StringView::storage_type</db:title>
<db:typedefsynopsis>
<db:typedefname>storage_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>char</db:code>.</db:para>
</db:section>
<db:section xml:id="value_type-typedef">
<db:title>QUtf8StringView::value_type</db:title>
<db:typedefsynopsis>
<db:typedefname>value_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>const char</db:code>. Provided for compatibility with the STL.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QUtf8StringView">
<db:title>[constexpr] QUtf8StringView::QUtf8StringView()</db:title>
<db:constructorsynopsis>
<db:methodname>QUtf8StringView</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null string view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QUtf8StringView-1">
<db:title>[constexpr] QUtf8StringView::QUtf8StringView(<db:emphasis>std::nullptr_t</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QUtf8StringView</db:methodname>
<db:methodparam>
<db:type>std::nullptr_t</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView(std::nullptr_t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null string view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QUtf8StringView-2">
<db:title>[constexpr] QUtf8StringView::QUtf8StringView(const Char *<db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>len</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QUtf8StringView</db:methodname>
<db:methodparam>
<db:type>const Char *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>len</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView(const Char *str, qsizetype len)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string view on <db:code role="parameter">str</db:code> with length <db:code role="parameter">len</db:code>.</db:para>
<db:para>The range <db:code>[str,len)</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>Passing <db:code>nullptr</db:code> as <db:code role="parameter">str</db:code> is safe if <db:code role="parameter">len</db:code> is 0, too, and results in a null string view.</db:para>
<db:para>The behavior is undefined if <db:code role="parameter">len</db:code> is negative or, when positive, if <db:code role="parameter">str</db:code> is <db:code>nullptr</db:code>.</db:para>
<db:para>This constructor only participates in overload resolution if <db:code>Char</db:code> is a compatible character type. The compatible character types are: <db:code>char8_t</db:code>, <db:code>char</db:code>, <db:code>signed char</db:code> and <db:code>unsigned char</db:code>.</db:para>
</db:section>
<db:section xml:id="QUtf8StringView-3">
<db:title>[constexpr] QUtf8StringView::QUtf8StringView(const Char *<db:emphasis>first</db:emphasis>, const Char *<db:emphasis>last</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QUtf8StringView</db:methodname>
<db:methodparam>
<db:type>const Char *</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const Char *</db:type>
<db:parameter>last</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView(const Char *first, const Char *last)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string view on <db:code role="parameter">first</db:code> with length (<db:code role="parameter">last</db:code> - <db:code role="parameter">first</db:code>).</db:para>
<db:para>The range <db:code>[first,last)</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>Passing <db:code>\nullptr</db:code> as <db:code role="parameter">first</db:code> is safe if <db:code role="parameter">last</db:code> is <db:code>nullptr</db:code>, too, and results in a null string view.</db:para>
<db:para>The behavior is undefined if <db:code role="parameter">last</db:code> precedes <db:code role="parameter">first</db:code>, or <db:code role="parameter">first</db:code> is <db:code>nullptr</db:code> and <db:code role="parameter">last</db:code> is not.</db:para>
<db:para>This constructor only participates in overload resolution if <db:code>Char</db:code> is a compatible character type. The compatible character types are: <db:code>char8_t</db:code>, <db:code>char</db:code>, <db:code>signed char</db:code> and <db:code>unsigned char</db:code>.</db:para>
</db:section>
<db:section xml:id="QUtf8StringView-4">
<db:title>[constexpr] QUtf8StringView::QUtf8StringView(const Char (&amp;)[N] <db:emphasis>string</db:emphasis> = N)</db:title>
<db:constructorsynopsis>
<db:methodname>QUtf8StringView</db:methodname>
<db:methodparam>
<db:type>const Char (&amp;)[N]</db:type>
<db:parameter>string</db:parameter>
<db:initializer>N</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView(const Char (&amp;)[N] string)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string view on the character string literal <db:code role="parameter">string</db:code>. The view covers the array until the first <db:code>Char(0)</db:code> is encountered, or <db:code>N</db:code>, whichever comes first. If you need the full array, use <db:link xlink:href="qutf8stringview.xml#fromArray">fromArray</db:link>() instead.</db:para>
<db:para><db:code role="parameter">string</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>This constructor only participates in overload resolution if <db:code role="parameter">string</db:code> is an actual array and if <db:code>Char</db:code> is a compatible character type. The compatible character types are: <db:code>char8_t</db:code>, <db:code>char</db:code>, <db:code>signed char</db:code> and <db:code>unsigned char</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#fromArray">fromArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QUtf8StringView-5">
<db:title>[constexpr] QUtf8StringView::QUtf8StringView(const Char *<db:emphasis>str</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QUtf8StringView</db:methodname>
<db:methodparam>
<db:type>const Char *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView(const Char *str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string view on <db:code role="parameter">str</db:code>. The length is determined by scanning for the first <db:code>Char(0)</db:code>.</db:para>
<db:para><db:code role="parameter">str</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>Passing <db:code>nullptr</db:code> as <db:code role="parameter">str</db:code> is safe and results in a null string view.</db:para>
<db:para>This constructor only participates in overload resolution if <db:code role="parameter">str</db:code> is not an array and if <db:code>Char</db:code> is a compatible character type. The compatible character types are: <db:code>char8_t</db:code>, <db:code>char</db:code>, <db:code>signed char</db:code> and <db:code>unsigned char</db:code>.</db:para>
</db:section>
<db:section xml:id="QUtf8StringView-8">
<db:title>[constexpr] QUtf8StringView::QUtf8StringView(const Container &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QUtf8StringView</db:methodname>
<db:methodparam>
<db:type>const Container &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView(const Container &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string view on <db:code role="parameter">str</db:code>. The length is taken from <db:code>str.size()</db:code>.</db:para>
<db:para><db:code>str.data()</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>This constructor only participates in overload resolution if <db:code>Container</db:code> is an instantiation of <db:code>std::basic_string</db:code> with a compatible character type. The compatible character types are: <db:code>char8_t</db:code>, <db:code>char</db:code>, <db:code>signed char</db:code> and <db:code>unsigned char</db:code>.</db:para>
<db:para>The string view will be empty if and only if <db:code>str.empty()</db:code>. It is unspecified whether this constructor can result in a null string view (<db:code>str.data()</db:code> would have to return <db:code>nullptr</db:code> for this).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="at">
<db:title>[constexpr] QUtf8StringView::storage_type QUtf8StringView::at(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUtf8StringView::storage_type</db:type>
<db:methodname>at</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView::storage_type at(qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the code point at position <db:code role="parameter">n</db:code> in this string view.</db:para>
<db:para>The behavior is undefined if <db:code role="parameter">n</db:code> is negative or not less than <db:link xlink:href="qutf8stringview.xml#size">size</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#operator-5b-5d">operator[]</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#front">front</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#back">back</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="back">
<db:title>[constexpr] QUtf8StringView::storage_type QUtf8StringView::back() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUtf8StringView::storage_type</db:type>
<db:methodname>back</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView::storage_type back() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the last code point in the string view. Same as <db:link xlink:href="qutf8stringview.xml#last">last</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:warning>
<db:para>Calling this function on an empty string view constitutes undefined behavior.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#front">front</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="begin">
<db:title>QUtf8StringView::const_iterator QUtf8StringView::begin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUtf8StringView::const_iterator</db:type>
<db:methodname>begin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView::const_iterator begin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the first code point in the string view.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#cbegin">cbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cbegin">
<db:title>QUtf8StringView::const_iterator QUtf8StringView::cbegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUtf8StringView::const_iterator</db:type>
<db:methodname>cbegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView::const_iterator cbegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qutf8stringview.xml#begin">begin</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#cend">cend</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#crbegin">crbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cend">
<db:title>QUtf8StringView::const_iterator QUtf8StringView::cend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUtf8StringView::const_iterator</db:type>
<db:methodname>cend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView::const_iterator cend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qutf8stringview.xml#end">end</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#cbegin">cbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#crend">crend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="chop">
<db:title>[constexpr] void QUtf8StringView::chop(qsizetype <db:emphasis>n</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>chop</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void chop(qsizetype n)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Truncates this string view by <db:code role="parameter">n</db:code> code points.</db:para>
<db:para>Same as <db:code>*this = first(size() - n)</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">n</db:code> &lt; 0 or <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qutf8stringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="chopped">
<db:title>[constexpr] QUtf8StringView QUtf8StringView::chopped(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUtf8StringView</db:type>
<db:methodname>chopped</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView chopped(qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the substring of length <db:link xlink:href="qutf8stringview.xml#size">size</db:link>() - <db:code role="parameter">n</db:code> starting at the beginning of this object.</db:para>
<db:para>Same as <db:code>first(size() - n)</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">n</db:code> &lt; 0 or <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qutf8stringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="crbegin">
<db:title>QUtf8StringView::const_reverse_iterator QUtf8StringView::crbegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUtf8StringView::const_reverse_iterator</db:type>
<db:methodname>crbegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView::const_reverse_iterator crbegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qutf8stringview.xml#rbegin">rbegin</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#crend">crend</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#cbegin">cbegin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="crend">
<db:title>QUtf8StringView::const_reverse_iterator QUtf8StringView::crend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUtf8StringView::const_reverse_iterator</db:type>
<db:methodname>crend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView::const_reverse_iterator crend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qutf8stringview.xml#rend">rend</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#crbegin">crbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#rend">rend</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#cend">cend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>QUtf8StringView::const_pointer QUtf8StringView::data() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUtf8StringView::const_pointer</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView::const_pointer data() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const pointer to the first code point in the string view.</db:para>
<db:note>
<db:para>The character array represented by the return value is <db:emphasis>not</db:emphasis> null-terminated.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="">utf8()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="empty">
<db:title>[constexpr] bool QUtf8StringView::empty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>empty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool empty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether this string view is empty - that is, whether <db:code>size() == 0</db:code>.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#length">length</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="end">
<db:title>QUtf8StringView::const_iterator QUtf8StringView::end() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUtf8StringView::const_iterator</db:type>
<db:methodname>end</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView::const_iterator end() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the imaginary code point after the last code point in the list.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#cend">cend</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#rend">rend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="first">
<db:title>[constexpr] QUtf8StringView QUtf8StringView::first(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUtf8StringView</db:type>
<db:methodname>first</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView first(qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string view that contains the first <db:code role="parameter">n</db:code> code points of this string view.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">n</db:code> &lt; 0 or <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qutf8stringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromArray">
<db:title>[static constexpr] QUtf8StringView QUtf8StringView::fromArray(const Char (&amp;)[Size] <db:emphasis>string</db:emphasis> = Size)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QUtf8StringView</db:type>
<db:methodname>fromArray</db:methodname>
<db:methodparam>
<db:type>const Char (&amp;)[Size]</db:type>
<db:parameter>string</db:parameter>
<db:initializer>Size</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView fromArray(const Char (&amp;)[Size] string)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Constructs a string view on the full character string literal <db:code role="parameter">string</db:code>, including any trailing <db:code>Char(0)</db:code>. If you don't want the null-terminator included in the view then you can <db:link xlink:href="qutf8stringview.xml#chop">chop</db:link>() it off when you are certain it is at the end. Alternatively you can use the constructor overload taking an array literal which will create a view up to, but not including, the first null-terminator in the data.</db:para>
<db:para><db:code role="parameter">string</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>This function will work with any array literal if <db:code>Char</db:code> is a compatible character type. The compatible character types are: <db:code>char8_t</db:code>, <db:code>char</db:code>, <db:code>signed char</db:code> and <db:code>unsigned char</db:code>.</db:para>
</db:section>
<db:section xml:id="front">
<db:title>[constexpr] QUtf8StringView::storage_type QUtf8StringView::front() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUtf8StringView::storage_type</db:type>
<db:methodname>front</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView::storage_type front() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the first code point in the string view. Same as <db:link xlink:href="qutf8stringview.xml#first">first</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:warning>
<db:para>Calling this function on an empty string view constitutes undefined behavior.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#back">back</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>[constexpr] bool QUtf8StringView::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether this string view is empty - that is, whether <db:code>size() == 0</db:code>.</db:para>
<db:para>This function is provided for compatibility with other Qt containers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#empty">empty</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#length">length</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>[constexpr] bool QUtf8StringView::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether this string view is null - that is, whether <db:code>data() == nullptr</db:code>.</db:para>
<db:para>This functions is provided for compatibility with other Qt containers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#empty">empty</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#length">length</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValidUtf8">
<db:title>[since 6.3] bool QUtf8StringView::isValidUtf8() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValidUtf8</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValidUtf8() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this string contains valid UTF-8 encoded data, or <db:code>false</db:code> otherwise.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="last">
<db:title>[constexpr] QUtf8StringView QUtf8StringView::last(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUtf8StringView</db:type>
<db:methodname>last</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView last(qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string view that contains the last <db:code role="parameter">n</db:code> code points of this string view.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">n</db:code> &lt; 0 or <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qutf8stringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="length">
<db:title>[constexpr] qsizetype QUtf8StringView::length() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>length</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype length() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qutf8stringview.xml#size">size</db:link>().</db:para>
<db:para>This function is provided for compatibility with other Qt containers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#empty">empty</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rbegin">
<db:title>QUtf8StringView::const_reverse_iterator QUtf8StringView::rbegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUtf8StringView::const_reverse_iterator</db:type>
<db:methodname>rbegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView::const_reverse_iterator rbegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style</db:link> reverse iterator pointing to the first code point in the string view, in reverse order.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#rend">rend</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#crbegin">crbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#begin">begin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rend">
<db:title>QUtf8StringView::const_reverse_iterator QUtf8StringView::rend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUtf8StringView::const_reverse_iterator</db:type>
<db:methodname>rend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView::const_reverse_iterator rend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="containers.xml#stl-style-iterators">STL-style</db:link> reverse iterator pointing to one past the last code point in the string view, in reverse order.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#crend">crend</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>[constexpr] qsizetype QUtf8StringView::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size of this string view, in UTF-8 code points (that is, multi-byte sequences count as more than one for the purposes of this function, the same as surrogate pairs in <db:link xlink:href="qstring.xml">QString</db:link> and <db:link xlink:href="qstringview.xml">QStringView</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#empty">empty</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#length">length</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliced">
<db:title>[constexpr] QUtf8StringView QUtf8StringView::sliced(qsizetype <db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUtf8StringView</db:type>
<db:methodname>sliced</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView sliced(qsizetype pos) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string view starting at position <db:code role="parameter">pos</db:code> in this object, and extending to its end.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">pos</db:code> &lt; 0 or <db:code role="parameter">pos</db:code> &gt; <db:link xlink:href="qutf8stringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliced-1">
<db:title>[constexpr] QUtf8StringView QUtf8StringView::sliced(qsizetype <db:emphasis>pos</db:emphasis>, qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUtf8StringView</db:type>
<db:methodname>sliced</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView sliced(qsizetype pos, qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string view containing <db:code role="parameter">n</db:code> code points of this string view, starting at position <db:code role="parameter">pos</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">pos</db:code> &lt; 0, <db:code role="parameter">n</db:code> &lt; 0, or <db:code role="parameter">pos</db:code> + <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qutf8stringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString">
<db:title>QString QUtf8StringView::toString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a deep copy of this string view's data as a <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:para>The return value will be a null <db:link xlink:href="qstring.xml">QString</db:link> if and only if this string view is null.</db:para>
</db:section>
<db:section xml:id="truncate">
<db:title>[constexpr] void QUtf8StringView::truncate(qsizetype <db:emphasis>n</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>truncate</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void truncate(qsizetype n)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Truncates this string view to <db:code role="parameter">n</db:code> code points.</db:para>
<db:para>Same as <db:code>*this = first(n)</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">n</db:code> &lt; 0 or <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qutf8stringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#chop">chop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>[constexpr] QUtf8StringView::storage_type QUtf8StringView::operator[](qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUtf8StringView::storage_type</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView::storage_type operator[](qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the code point at position <db:code role="parameter">n</db:code> in this string view.</db:para>
<db:para>The behavior is undefined if <db:code role="parameter">n</db:code> is negative or not less than <db:link xlink:href="qutf8stringview.xml#size">size</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#front">front</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#back">back</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QUtf8StringView</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="left">
<db:title>[constexpr] QUtf8StringView QUtf8StringView::left(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUtf8StringView</db:type>
<db:methodname>left</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView left(qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qutf8stringview.xml#first">first</db:link>() instead in new code.</db:para>
<db:para>Returns the substring of length <db:code role="parameter">n</db:code> starting at position 0 in this object.</db:para>
<db:para>The entire string view is returned if <db:code role="parameter">n</db:code> is greater than or equal to <db:link xlink:href="qutf8stringview.xml#size">size</db:link>(), or less than zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mid">
<db:title>[constexpr] QUtf8StringView QUtf8StringView::mid(qsizetype <db:emphasis>pos</db:emphasis>, qsizetype <db:emphasis>n</db:emphasis> = -1) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUtf8StringView</db:type>
<db:methodname>mid</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView mid(qsizetype pos, qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns the substring of length <db:code role="parameter">n</db:code> starting at position <db:code role="parameter">pos</db:code> in this object.</db:para>
<db:para>Use <db:link xlink:href="qutf8stringview.xml#sliced">sliced</db:link>() instead in new code.</db:para>
<db:para>Returns an empty string view if <db:code role="parameter">n</db:code> exceeds the length of the string view. If there are less than <db:code role="parameter">n</db:code> code points available in the string view starting at <db:code role="parameter">pos</db:code>, or if <db:code role="parameter">n</db:code> is negative (default), the function returns all code points that are available from <db:code role="parameter">pos</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="right">
<db:title>[constexpr] QUtf8StringView QUtf8StringView::right(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUtf8StringView</db:type>
<db:methodname>right</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtf8StringView right(qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qutf8stringview.xml#last">last</db:link>() instead in new code.</db:para>
<db:para>Returns the substring of length <db:code role="parameter">n</db:code> starting at position <db:link xlink:href="qutf8stringview.xml#size">size</db:link>() - <db:code role="parameter">n</db:code> in this object.</db:para>
<db:para>The entire string view is returned if <db:code role="parameter">n</db:code> is greater than or equal to <db:link xlink:href="qutf8stringview.xml#size">size</db:link>(), or less than zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qutf8stringview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
