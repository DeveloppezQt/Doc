<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSvgRenderer Class</db:title>
<db:productname>QtSvg</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt SVG Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsvgrenderer.xml">QSvgRenderer</db:link> class is used to draw the contents of SVG files onto paint devices.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSvgRenderer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Svg)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Svg)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += svg</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSvgRenderer is part of <db:simplelist><db:member>painting</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Using <db:link xlink:href="qsvgrenderer.xml">QSvgRenderer</db:link>, Scalable Vector Graphics (SVG) can be rendered onto any <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> subclass, including <db:link xlink:href="qwidget.xml">QWidget</db:link>, <db:link xlink:href="qimage.xml">QImage</db:link>, and QGLWidget.</db:para>
<db:para><db:link xlink:href="qsvgrenderer.xml">QSvgRenderer</db:link> provides an API that supports basic features of SVG rendering, such as loading and rendering of static drawings, and more interactive features like animation. Since the rendering is performed using <db:link xlink:href="qpainter.xml">QPainter</db:link>, SVG drawings can be rendered on any subclass of <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link>.</db:para>
<db:para>SVG drawings are either loaded when an <db:link xlink:href="qsvgrenderer.xml">QSvgRenderer</db:link> is constructed, or loaded later using the <db:link xlink:href="qsvgrenderer.xml#load">load</db:link>() functions. Data is either supplied directly as serialized XML, or indirectly using a file name. If a valid file has been loaded, either when the renderer is constructed or at some later time, <db:link xlink:href="qsvgrenderer.xml#isValid">isValid</db:link>() returns true; otherwise it returns false. <db:link xlink:href="qsvgrenderer.xml">QSvgRenderer</db:link> provides the <db:link xlink:href="qsvgrenderer.xml#render">render</db:link>() slot to render the current document, or the current frame of an animated document, using a given painter.</db:para>
<db:para>The <db:link xlink:href="qsvgrenderer.xml#defaultSize">defaultSize</db:link>() function provides information about the amount of space that is required to render the currently loaded SVG file. This is useful for paint devices, such as <db:link xlink:href="qwidget.xml">QWidget</db:link>, that often need to supply a size hint to their parent layout. The default size of a drawing may differ from its visible area, found using the <db:link xlink:href="qsvgrenderer.xml#viewBox">viewBox</db:link> property.</db:para>
<db:para>Animated SVG drawings are supported, and can be controlled with a simple collection of functions and properties:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:link xlink:href="qsvgrenderer.xml#animated">animated</db:link>() function indicates whether a drawing contains animation information.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:link xlink:href="qsvgrenderer.xml#framesPerSecond-prop">framesPerSecond</db:link> property contains the rate at which the animation plays.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Finally, the <db:link xlink:href="qsvgrenderer.xml">QSvgRenderer</db:link> class provides the <db:link xlink:href="qsvgrenderer.xml#repaintNeeded">repaintNeeded</db:link>() signal which is emitted whenever the rendering of the document needs to be updated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsvgwidget.xml">QSvgWidget</db:link></db:member>
<db:member><db:link xlink:href="qtsvg-module.xml">Qt SVG C++ Classes</db:link></db:member>
<db:member><db:link xlink:href="qtsvg-svgviewer-example.xml">SVG Viewer Example</db:link></db:member>
<db:member><db:link xlink:href="qpicture.xml">QPicture</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="aspectRatioMode-prop">
<db:title>[since 5.15] aspectRatioMode : Qt::AspectRatioMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::AspectRatioMode</db:type>
<db:varname>aspectRatioMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">aspectRatioMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setAspectRatioMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>how rendering adheres to the SVG view box aspect ratio</db:para>
<db:para>The accepted modes are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AspectRatioMode-enum">Qt::IgnoreAspectRatio</db:link> (the default): the aspect ratio is ignored and the rendering is stretched to the target bounds.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AspectRatioMode-enum">Qt::KeepAspectRatio</db:link>: rendering is centered and scaled as large as possible within the target bounds while preserving aspect ratio.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This property was introduced in Qt 5.15.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#AspectRatioMode-enum">Qt::AspectRatioMode</db:link></db:type> <db:emphasis role="bold">aspectRatioMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAspectRatioMode</db:emphasis>(<db:type><db:link xlink:href="qt.xml#AspectRatioMode-enum">Qt::AspectRatioMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="framesPerSecond-prop">
<db:title>framesPerSecond : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>framesPerSecond</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">framesPerSecond</db:synopsisinfo>
<db:synopsisinfo role="setter">setFramesPerSecond</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of frames per second to be shown</db:para>
<db:para>The number of frames per second is 0 if the current document is not animated.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">framesPerSecond</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFramesPerSecond</db:emphasis>(<db:type>int</db:type> <db:emphasis>num</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsvgrenderer.xml#animated">animated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="viewBox-prop">
<db:title>viewBox : QRectF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRectF</db:type>
<db:varname>viewBox</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">viewBoxF</db:synopsisinfo>
<db:synopsisinfo role="setter">setViewBox</db:synopsisinfo>
<db:synopsisinfo role="setter">setViewBox</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the rectangle specifying the visible area of the document in logical coordinates</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> <db:emphasis role="bold">viewBoxF</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setViewBox</db:emphasis>(const <db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> &amp;<db:emphasis>viewbox</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setViewBox</db:emphasis>(const <db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> &amp;<db:emphasis>viewbox</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSvgRenderer">
<db:title>QSvgRenderer::QSvgRenderer(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSvgRenderer</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSvgRenderer(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new renderer with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QSvgRenderer-1">
<db:title>QSvgRenderer::QSvgRenderer(const QString &amp;<db:emphasis>filename</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSvgRenderer</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filename</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSvgRenderer(const QString &amp;filename, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new renderer with the given <db:code role="parameter">parent</db:code> and loads the contents of the SVG file with the specified <db:code role="parameter">filename</db:code>.</db:para>
</db:section>
<db:section xml:id="QSvgRenderer-2">
<db:title>QSvgRenderer::QSvgRenderer(const QByteArray &amp;<db:emphasis>contents</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSvgRenderer</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>contents</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QSvgRenderer(const QByteArray &amp;contents, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new renderer with the given <db:code role="parameter">parent</db:code> and loads the SVG data from the byte array specified by <db:code role="parameter">contents</db:code>.</db:para>
</db:section>
<db:section xml:id="QSvgRenderer-3">
<db:title>QSvgRenderer::QSvgRenderer(QXmlStreamReader *<db:emphasis>contents</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSvgRenderer</db:methodname>
<db:methodparam>
<db:type>QXmlStreamReader *</db:type>
<db:parameter>contents</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QSvgRenderer(QXmlStreamReader *contents, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new renderer with the given <db:code role="parameter">parent</db:code> and loads the SVG data using the stream reader specified by <db:code role="parameter">contents</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSvgRenderer">
<db:title>[virtual] QSvgRenderer::~QSvgRenderer()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QSvgRenderer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSvgRenderer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the renderer.</db:para>
</db:section>
<db:section xml:id="animated">
<db:title>bool QSvgRenderer::animated() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>animated</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool animated() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the current document contains animated elements; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsvgrenderer.xml#framesPerSecond-prop">framesPerSecond</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundsOnElement">
<db:title>QRectF QSvgRenderer::boundsOnElement(const QString &amp;<db:emphasis>id</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>boundsOnElement</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF boundsOnElement(const QString &amp;id) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns bounding rectangle of the item with the given <db:code role="parameter">id</db:code>. The transformation matrix of parent elements is not affecting the bounds of the element.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsvgrenderer.xml#transformForElement">transformForElement</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultSize">
<db:title>QSize QSvgRenderer::defaultSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>defaultSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize defaultSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the default size of the document contents.</db:para>
</db:section>
<db:section xml:id="elementExists">
<db:title>bool QSvgRenderer::elementExists(const QString &amp;<db:emphasis>id</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>elementExists</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool elementExists(const QString &amp;id) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the element with the given <db:code role="parameter">id</db:code> exists in the currently parsed SVG file and is a renderable element.</db:para>
<db:para>Note: this method returns true only for elements that can be rendered. Which implies that elements that are considered part of the fill/stroke style properties, e.g. radialGradients even tough marked with &quot;id&quot; attributes will not be found by this method.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QSvgRenderer::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if there is a valid current document; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="load">
<db:title>bool QSvgRenderer::load(const QString &amp;<db:emphasis>filename</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>load</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filename</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool load(const QString &amp;filename)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Loads the SVG file specified by <db:code role="parameter">filename</db:code>, returning true if the content was successfully parsed; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="load-1">
<db:title>bool QSvgRenderer::load(const QByteArray &amp;<db:emphasis>contents</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>load</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>contents</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool load(const QByteArray &amp;contents)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Loads the specified SVG format <db:code role="parameter">contents</db:code>, returning true if the content was successfully parsed; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="load-2">
<db:title>bool QSvgRenderer::load(QXmlStreamReader *<db:emphasis>contents</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>load</db:methodname>
<db:methodparam>
<db:type>QXmlStreamReader *</db:type>
<db:parameter>contents</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool load(QXmlStreamReader *contents)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Loads the specified SVG in <db:code role="parameter">contents</db:code>, returning true if the content was successfully parsed; otherwise returns false.</db:para>
<db:para>The reader will be used from where it currently is positioned. If <db:code role="parameter">contents</db:code> is <db:code>null</db:code>, behavior is undefined.</db:para>
</db:section>
<db:section xml:id="render">
<db:title>void QSvgRenderer::render(QPainter *<db:emphasis>painter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>render</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void render(QPainter *painter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Renders the current document, or the current frame of an animated document, using the given <db:code role="parameter">painter</db:code>.</db:para>
</db:section>
<db:section xml:id="render-1">
<db:title>void QSvgRenderer::render(QPainter *<db:emphasis>painter</db:emphasis>, const QRectF &amp;<db:emphasis>bounds</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>render</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>bounds</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void render(QPainter *painter, const QRectF &amp;bounds)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Renders the current document, or the current frame of an animated document, using the given <db:code role="parameter">painter</db:code> on the specified <db:code role="parameter">bounds</db:code> within the painter. If <db:code role="parameter">bounds</db:code> is not empty, the output will be scaled to fill it, ignoring any aspect ratio implied by the SVG.</db:para>
</db:section>
<db:section xml:id="render-2">
<db:title>void QSvgRenderer::render(QPainter *<db:emphasis>painter</db:emphasis>, const QString &amp;<db:emphasis>elementId</db:emphasis>, const QRectF &amp;<db:emphasis>bounds</db:emphasis> = QRectF())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>render</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>elementId</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>bounds</db:parameter>
<db:initializer>QRectF()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void render(QPainter *painter, const QString &amp;elementId, const QRectF &amp;bounds)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Renders the given element with <db:code role="parameter">elementId</db:code> using the given <db:code role="parameter">painter</db:code> on the specified <db:code role="parameter">bounds</db:code>. If the bounding rectangle is not specified the SVG element is mapped to the whole paint device.</db:para>
</db:section>
<db:section xml:id="repaintNeeded">
<db:title>void QSvgRenderer::repaintNeeded()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>repaintNeeded</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void repaintNeeded()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the rendering of the document needs to be updated, usually for the purposes of animation.</db:para>
</db:section>
<db:section xml:id="transformForElement">
<db:title>[since 5.15] QTransform QSvgRenderer::transformForElement(const QString &amp;<db:emphasis>id</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTransform</db:type>
<db:methodname>transformForElement</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTransform transformForElement(const QString &amp;id) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the transformation matrix for the element with the given <db:code role="parameter">id</db:code>. The matrix is a product of the transformation of the element's parents. The transformation of the element itself is not included.</db:para>
<db:para>To find the bounding rectangle of the element in logical coordinates, you can apply the matrix on the rectangle returned from <db:link xlink:href="qsvgrenderer.xml#boundsOnElement">boundsOnElement</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsvgrenderer.xml#boundsOnElement">boundsOnElement</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="viewBox">
<db:title>QRect QSvgRenderer::viewBox() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>viewBox</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect viewBox() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:link xlink:href="qsvgrenderer.xml#viewBox-prop">viewBoxF</db:link>().toRect().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsvgrenderer.xml#viewBox-prop">setViewBox</db:link>()</db:member>
<db:member><db:link xlink:href="qsvgrenderer.xml#viewBox-prop">viewBoxF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
