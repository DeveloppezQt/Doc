<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QIterable Class</db:title>
<db:subtitle>template &lt;typename Container&gt; class QIterable</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qiterable.xml">QIterable</db:link> is a template class that is the base class for <db:link xlink:href="qsequentialiterable.xml">QSequentialIterable</db:link> and <db:link xlink:href="qassociativeiterable.xml">QAssociativeIterable</db:link>.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QIterable</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qassociativeiterable.xml" xlink:role="class">QAssociativeIterable</db:link> and <db:link xlink:href="qsequentialiterable.xml" xlink:role="class">QSequentialIterable</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="canForwardIterate">
<db:title>bool QIterable::canForwardIterate() const</db:title>
<db:para>Returns whether it is possible to iterate over the container in forward direction. This corresponds to the std::forward_iterator_tag iterator trait of the iterator and const_iterator of the container.</db:para>
</db:section>
<db:section xml:id="canInputIterate">
<db:title>bool QIterable::canInputIterate() const</db:title>
<db:para>Returns whether the container has an input iterator. This corresponds to the std::input_iterator_tag iterator trait of the iterator and const_iterator of the container.</db:para>
</db:section>
<db:section xml:id="canRandomAccessIterate">
<db:title>bool QIterable::canRandomAccessIterate() const</db:title>
<db:para>Returns whether it is possible to efficiently skip over multiple values using and iterator. This corresponds to the std::random_access_iterator_tag iterator trait of the iterator and const_iterator of the container.</db:para>
</db:section>
<db:section xml:id="canReverseIterate">
<db:title>bool QIterable::canReverseIterate() const</db:title>
<db:para>Returns whether it is possible to iterate over the container in reverse. This corresponds to the std::bidirectional_iterator_tag iterator trait of the const_iterator of the container.</db:para>
</db:section>
<db:section xml:id="constBegin">
<db:title>QConstIterator&lt;Container&gt; QIterable::constBegin() const</db:title>
<db:para>Returns a <db:link xlink:href="qconstiterator.xml">QConstIterator</db:link> for the beginning of the container. This can be used in stl-style iteration.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiterable.xml#constEnd">constEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qiterable.xml#mutableBegin">mutableBegin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constEnd">
<db:title>QConstIterator&lt;Container&gt; QIterable::constEnd() const</db:title>
<db:para>Returns a Qterable::QConstIterator for the end of the container. This can be used in stl-style iteration.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiterable.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qiterable.xml#mutableEnd">mutableEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mutableBegin">
<db:title>QIterator&lt;Container&gt; QIterable::mutableBegin()</db:title>
<db:para>Returns a <db:link xlink:href="qiterator.xml">QIterator</db:link> for the beginning of the container. This can be used in stl-style iteration.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiterable.xml#mutableEnd">mutableEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qiterable.xml#constBegin">constBegin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mutableEnd">
<db:title>QIterator&lt;Container&gt; QIterable::mutableEnd()</db:title>
<db:para>Returns a <db:link xlink:href="qsequentialiterable.xml#iterator-typedef">QSequentialIterable::iterator</db:link> for the end of the container. This can be used in stl-style iteration.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiterable.xml#mutableBegin">mutableBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qiterable.xml#constEnd">constEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>qsizetype QIterable::size() const</db:title>
<db:para>Returns the number of values in the container.</db:para>
</db:section>
</db:section>
</db:article>
