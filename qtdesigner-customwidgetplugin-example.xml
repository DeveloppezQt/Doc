<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Custom Widget Plugin Example</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>Creating a custom widget plugin for Qt Designer.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/customwidgetplugin-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>In this example, the custom widget used is based on the <db:link xlink:href="qtwidgets-widgets-analogclock-example.xml">Analog Clock example</db:link>, and does not provide any custom signals or slots.</db:para>
<db:section xml:id="preparation">
<db:title>Preparation</db:title>
<db:para>To provide a custom widget that can be used with <db:emphasis>Qt Designer</db:emphasis>, we need to supply a self-contained implementation and provide a plugin interface. In this example, we reuse the <db:link xlink:href="qtwidgets-widgets-analogclock-example.xml">Analog Clock example</db:link> for convenience.</db:para>
</db:section>
<db:section xml:id="project-files">
<db:title>Project files</db:title>
<db:section xml:id="cmake">
<db:title>CMake</db:title>
<db:para>The project files need to state that a plugin linking to the <db:emphasis>Qt Designer</db:emphasis> libraries is to be built:</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS Core Gui UiPlugin Widgets)

qt_add_plugin(customwidgetplugin)

target_link_libraries(customwidgetplugin PUBLIC
    Qt::Core
    Qt::Gui
    Qt::UiPlugin
    Qt::Widgets
)
</db:programlisting>
<db:para>The link libraries list specifies <db:code>Qt::UiPlugin</db:code>. This indicates that the plugin uses the abstract interfaces <db:link xlink:href="qdesignercustomwidgetinterface.xml">QDesignerCustomWidgetInterface</db:link> and <db:link xlink:href="qdesignercustomwidgetcollectioninterface.xml">QDesignerCustomWidgetCollectionInterface</db:link> only and has no linkage to the <db:emphasis>Qt Designer</db:emphasis> libraries. When accessing other interfaces of <db:emphasis>Qt Designer</db:emphasis> that have linkage, <db:code>Designer</db:code> should be used instead; this ensures that the plugin dynamically links to the <db:emphasis>Qt Designer</db:emphasis> libraries and has a run-time dependency on them.</db:para>
<db:para>The following example shows how to add the header and source files of the widget:</db:para>
<db:programlisting language="cpp">target_sources(customwidgetplugin PRIVATE
    analogclock.cpp analogclock.h
    customwidgetplugin.cpp customwidgetplugin.h
)
</db:programlisting>
<db:para>We provide an implementation of the plugin interface so that <db:emphasis>Qt Designer</db:emphasis> can use the custom widget.</db:para>
<db:para>It is also important to ensure that the plugin is installed in a location that is searched by <db:emphasis>Qt Designer</db:emphasis>. We do this by specifying a target path for the project and adding it to the list of items to install:</db:para>
<db:programlisting language="cpp">   set(INSTALL_EXAMPLEDIR &quot;${QT6_INSTALL_PREFIX}/${QT6_INSTALL_PLUGINS}/designer&quot;)
install(TARGETS customwidgetplugin
    RUNTIME DESTINATION &quot;${INSTALL_EXAMPLEDIR}&quot;
    BUNDLE DESTINATION &quot;${INSTALL_EXAMPLEDIR}&quot;
    LIBRARY DESTINATION &quot;${INSTALL_EXAMPLEDIR}&quot;
)
</db:programlisting>
<db:para>The custom widget is created as a library. It will be installed alongside the other <db:emphasis>Qt Designer</db:emphasis> plugins when the project is installed (using <db:code>ninja install</db:code> or an equivalent installation procedure).</db:para>
<db:para>For more information about plugins, see the <db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link> documentation.</db:para>
</db:section>
<db:section xml:id="qmake">
<db:title>qmake</db:title>
<db:para>The following example shows how to link a plugin to the <db:emphasis>Qt Designer</db:emphasis> libraries:</db:para>
<db:programlisting language="cpp">CONFIG      += plugin
TEMPLATE    = lib

QT          += widgets uiplugin
</db:programlisting>
<db:para>The <db:code>QT</db:code> variable contains the keyword <db:code>uiplugin</db:code>, which is the equivalent of the <db:code>Qt::UiPlugin</db:code> library.</db:para>
<db:para>The following example shows how to add the header and source files of the widget:</db:para>
<db:programlisting language="cpp">HEADERS     = analogclock.h \
              customwidgetplugin.h
SOURCES     = analogclock.cpp \
              customwidgetplugin.cpp
OTHER_FILES += analogclock.json
</db:programlisting>
<db:para>The following example shows how to install a plugin to the <db:emphasis>Qt Designer</db:emphasis>'s plugin path:</db:para>
<db:programlisting language="cpp">TARGET = $$qtLibraryTarget($$TARGET)

target.path = $$[QT_INSTALL_PLUGINS]/designer
INSTALLS += target
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="analogclock-class-definition-and-implementation">
<db:title>AnalogClock Class Definition and Implementation</db:title>
<db:para>The <db:code>AnalogClock</db:code> class is defined and implemented in exactly the same way as described in the <db:link xlink:href="qtwidgets-widgets-analogclock-example.xml">Analog Clock example</db:link>. Since the class is self-contained, and does not require any external configuration, it can be used without modification as a custom widget in <db:emphasis>Qt Designer</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="analogclockplugin-class-definition">
<db:title>AnalogClockPlugin Class Definition</db:title>
<db:para>The <db:code>AnalogClock</db:code> class is exposed to <db:emphasis>Qt Designer</db:emphasis> through the <db:code>AnalogClockPlugin</db:code> class. This class inherits from both <db:link xlink:href="qobject.xml">QObject</db:link> and the <db:link xlink:href="qdesignercustomwidgetinterface.xml">QDesignerCustomWidgetInterface</db:link> class, and implements an interface defined by <db:link xlink:href="qdesignercustomwidgetinterface.xml">QDesignerCustomWidgetInterface</db:link>.</db:para>
<db:para>To ensure that Qt recognizes the widget as a plugin, export relevant information about the widget by adding the <db:code>Q_PLUGIN_METADATA()</db:code> macro:</db:para>
<db:programlisting language="cpp">class AnalogClockPlugin : public QObject, public QDesignerCustomWidgetInterface
{
    Q_OBJECT
    Q_PLUGIN_METADATA(IID &quot;org.qt-project.Qt.QDesignerCustomWidgetInterface&quot;)
    Q_INTERFACES(QDesignerCustomWidgetInterface)
public:
    explicit AnalogClockPlugin(QObject *parent = nullptr);

    bool isContainer() const override;
    bool isInitialized() const override;
    QIcon icon() const override;
    QString domXml() const override;
    QString group() const override;
    QString includeFile() const override;
    QString name() const override;
    QString toolTip() const override;
    QString whatsThis() const override;
    QWidget *createWidget(QWidget *parent) override;
    void initialize(QDesignerFormEditorInterface *core) override;

private:
    bool initialized = false;
};
</db:programlisting>
<db:para>The functions provide information about the widget that <db:emphasis>Qt Designer</db:emphasis> can use in the <db:link xlink:href="designer-to-know.xml#widgetbox">widget box</db:link>. The <db:code>initialized</db:code> private member variable is used to record whether the plugin has been initialized by <db:emphasis>Qt Designer</db:emphasis>.</db:para>
<db:para>Note that the only part of the class definition that is specific to this particular custom widget is the class name.</db:para>
</db:section>
<db:section xml:id="analogclockplugin-implementation">
<db:title>AnalogClockPlugin Implementation</db:title>
<db:para>The class constructor simply calls the <db:link xlink:href="qobject.xml">QObject</db:link> base class constructor and sets the <db:code>initialized</db:code> variable to <db:code>false</db:code>.</db:para>
<db:programlisting language="cpp">AnalogClockPlugin::AnalogClockPlugin(QObject *parent)
    : QObject(parent)
{
}
</db:programlisting>
<db:para><db:emphasis>Qt Designer</db:emphasis> will initialize the plugin when it is required by calling the <db:code>initialize()</db:code> function:</db:para>
<db:programlisting language="cpp">void AnalogClockPlugin::initialize(QDesignerFormEditorInterface * /* core */)
{
    if (initialized)
        return;

    initialized = true;
}
</db:programlisting>
<db:para>In this example, the <db:code>initialized</db:code> private variable is tested, and only set to <db:code>true</db:code> if the plugin is not already initialized. Although, this plugin does not require any special code to be executed when it is initialized, we could include such code after the test for initialization.</db:para>
<db:para>The <db:code>isInitialized()</db:code> function lets <db:emphasis>Qt Designer</db:emphasis> know whether the plugin is ready for use:</db:para>
<db:programlisting language="cpp">bool AnalogClockPlugin::isInitialized() const
{
    return initialized;
}
</db:programlisting>
<db:para>Instances of the custom widget are supplied by the <db:code>createWidget()</db:code> function. The implementation for the analog clock is straightforward:</db:para>
<db:programlisting language="cpp">QWidget *AnalogClockPlugin::createWidget(QWidget *parent)
{
    return new AnalogClock(parent);
}
</db:programlisting>
<db:para>In this case, the custom widget only requires a <db:code>parent</db:code> to be specified. If other arguments need to be supplied to the widget, they can be introduced here.</db:para>
<db:para>The following functions provide information for <db:emphasis>Qt Designer</db:emphasis> to use to represent the widget in the widget box. The <db:code>name()</db:code> function returns the name of class that provides the custom widget:</db:para>
<db:programlisting language="cpp">QString AnalogClockPlugin::name() const
{
    return u&quot;AnalogClock&quot;_s;
}
</db:programlisting>
<db:para>The <db:code>group()</db:code> function is used to describe the type of widget that the custom widget belongs to:</db:para>
<db:programlisting language="cpp">QString AnalogClockPlugin::group() const
{
    return u&quot;Display Widgets [Examples]&quot;_s;
}
</db:programlisting>
<db:para>The widget plugin will be placed in a section identified by its group name in <db:emphasis>Qt Designer</db:emphasis>'s widget box. The icon used to represent the widget in the widget box is returned by the <db:code>icon()</db:code> function:</db:para>
<db:programlisting language="cpp">QIcon AnalogClockPlugin::icon() const
{
    return {};
}
</db:programlisting>
<db:para>In this case, we return a null icon to indicate that we have no icon that can be used to represent the widget.</db:para>
<db:para>A tool tip and &quot;What's This?&quot; help can be supplied for the custom widget's entry in the widget box. The <db:code>toolTip()</db:code> function should return a short message describing the widget:</db:para>
<db:programlisting language="cpp">QString AnalogClockPlugin::toolTip() const
{
    return {};
}
</db:programlisting>
<db:para>The <db:code>whatsThis()</db:code> function can return a longer description:</db:para>
<db:programlisting language="cpp">QString AnalogClockPlugin::whatsThis() const
{
    return {};
}
</db:programlisting>
<db:para>The <db:code>isContainer()</db:code> function tells <db:emphasis>Qt Designer</db:emphasis> whether the widget is supposed to be used as a container for other widgets. If not, <db:emphasis>Qt Designer</db:emphasis> will not allow the user to place widgets inside it.</db:para>
<db:programlisting language="cpp">bool AnalogClockPlugin::isContainer() const
{
    return false;
}
</db:programlisting>
<db:para>Most widgets in Qt can contain child widgets, but it only makes sense to use dedicated container widgets for this purpose in <db:emphasis>Qt Designer</db:emphasis>. By returning <db:code>false</db:code>, we indicate that the custom widget cannot hold other widgets; if we returned true, <db:emphasis>Qt Designer</db:emphasis> would allow other widgets to be placed inside the analog clock and a layout to be defined.</db:para>
<db:para>The <db:code>domXml()</db:code> function provides a way to include default settings for the widget in the standard XML format used by <db:emphasis>Qt Designer</db:emphasis>. In this case, we only specify the widget's geometry:</db:para>
<db:programlisting language="cpp">QString AnalogClockPlugin::domXml() const
{
    return uR&quot;(
&amp;lt;ui language=&quot;c++&quot;&amp;gt;
  &amp;lt;widget class=&quot;AnalogClock&quot; name=&quot;analogClock&quot;&amp;gt;
)&quot;
R&quot;(
    &amp;lt;property name=&quot;geometry&quot;&amp;gt;
      &amp;lt;rect&amp;gt;
        &amp;lt;x&amp;gt;0&amp;lt;/x&amp;gt;
        &amp;lt;y&amp;gt;0&amp;lt;/y&amp;gt;
        &amp;lt;width&amp;gt;100&amp;lt;/width&amp;gt;
        &amp;lt;height&amp;gt;100&amp;lt;/height&amp;gt;
      &amp;lt;/rect&amp;gt;
    &amp;lt;/property&amp;gt;
&quot;)
R&quot;(
    &amp;lt;property name=&quot;toolTip&quot;&amp;gt;
      &amp;lt;string&amp;gt;The current time&amp;lt;/string&amp;gt;
    &amp;lt;/property&amp;gt;
    &amp;lt;property name=&quot;whatsThis&quot;&amp;gt;
      &amp;lt;string&amp;gt;The analog clock widget displays the current time.&amp;lt;/string&amp;gt;
    &amp;lt;/property&amp;gt;
  &amp;lt;/widget&amp;gt;
&amp;lt;/ui&amp;gt;
)&quot;_s;
}
</db:programlisting>
<db:para>If the widget provides a reasonable size hint, it is not necessary to define it here. In addition, returning an empty string instead of a <db:code>&lt;widget&gt;</db:code> element will tell <db:emphasis>Qt Designer</db:emphasis> not to install the widget in the widget box.</db:para>
<db:para>To make the analog clock widget usable by applications, we implement the <db:code>includeFile()</db:code> function to return the name of the header file containing the custom widget class definition:</db:para>
<db:programlisting language="cpp">QString AnalogClockPlugin::includeFile() const
{
    return u&quot;analogclock.h&quot;_s;
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qttools.git/tree/examples/designer/customwidgetplugin?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
