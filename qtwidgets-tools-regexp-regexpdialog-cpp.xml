<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Regular Expressions Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Regular Expressions (RegExp) example shows how regular expressions in Qt are applied to text by providing an environment in which new regular expressions can be created and tested on custom text strings.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;regexpdialog.h&quot;

RegExpDialog::RegExpDialog(QWidget *parent)
    : QDialog(parent)
{
    patternComboBox = new QComboBox;
    patternComboBox-&gt;setEditable(true);
    patternComboBox-&gt;setSizePolicy(QSizePolicy::Expanding,
                                   QSizePolicy::Preferred);

    patternLabel = new QLabel(tr(&quot;&amp;Pattern:&quot;));
    patternLabel-&gt;setBuddy(patternComboBox);

    escapedPatternLineEdit = new QLineEdit;
    escapedPatternLineEdit-&gt;setReadOnly(true);
    QPalette palette = escapedPatternLineEdit-&gt;palette();
    palette.setBrush(QPalette::Base,
                     palette.brush(QPalette::Disabled, QPalette::Base));
    escapedPatternLineEdit-&gt;setPalette(palette);

    escapedPatternLabel = new QLabel(tr(&quot;&amp;Escaped Pattern:&quot;));
    escapedPatternLabel-&gt;setBuddy(escapedPatternLineEdit);

    syntaxComboBox = new QComboBox;
    syntaxComboBox-&gt;addItem(tr(&quot;Regular expression v1&quot;), QRegExp::RegExp);
    syntaxComboBox-&gt;addItem(tr(&quot;Regular expression v2&quot;), QRegExp::RegExp2);
    syntaxComboBox-&gt;addItem(tr(&quot;Wildcard&quot;), QRegExp::Wildcard);
    syntaxComboBox-&gt;addItem(tr(&quot;Fixed string&quot;), QRegExp::FixedString);
    syntaxComboBox-&gt;addItem(tr(&quot;W3C Xml Schema 1.1&quot;), QRegExp::W3CXmlSchema11);

    syntaxLabel = new QLabel(tr(&quot;&amp;Pattern Syntax:&quot;));
    syntaxLabel-&gt;setBuddy(syntaxComboBox);

    textComboBox = new QComboBox;
    textComboBox-&gt;setEditable(true);
    textComboBox-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Preferred);

    textLabel = new QLabel(tr(&quot;&amp;Text:&quot;));
    textLabel-&gt;setBuddy(textComboBox);

    caseSensitiveCheckBox = new QCheckBox(tr(&quot;Case &amp;Sensitive&quot;));
    caseSensitiveCheckBox-&gt;setChecked(true);
    minimalCheckBox = new QCheckBox(tr(&quot;&amp;Minimal&quot;));

    indexLabel = new QLabel(tr(&quot;Index of Match:&quot;));
    indexEdit = new QLineEdit;
    indexEdit-&gt;setReadOnly(true);

    matchedLengthLabel = new QLabel(tr(&quot;Matched Length:&quot;));
    matchedLengthEdit = new QLineEdit;
    matchedLengthEdit-&gt;setReadOnly(true);

    for (int i = 0; i &lt; MaxCaptures; ++i) {
        captureLabels[i] = new QLabel(tr(&quot;Capture %1:&quot;).arg(i));
        captureEdits[i] = new QLineEdit;
        captureEdits[i]-&gt;setReadOnly(true);
    }
    captureLabels[0]-&gt;setText(tr(&quot;Match:&quot;));

    QHBoxLayout *checkBoxLayout = new QHBoxLayout;
    checkBoxLayout-&gt;addWidget(caseSensitiveCheckBox);
    checkBoxLayout-&gt;addWidget(minimalCheckBox);
    checkBoxLayout-&gt;addStretch(1);

    QGridLayout *mainLayout = new QGridLayout;
    mainLayout-&gt;addWidget(patternLabel, 0, 0);
    mainLayout-&gt;addWidget(patternComboBox, 0, 1);
    mainLayout-&gt;addWidget(escapedPatternLabel, 1, 0);
    mainLayout-&gt;addWidget(escapedPatternLineEdit, 1, 1);
    mainLayout-&gt;addWidget(syntaxLabel, 2, 0);
    mainLayout-&gt;addWidget(syntaxComboBox, 2, 1);
    mainLayout-&gt;addLayout(checkBoxLayout, 3, 0, 1, 2);
    mainLayout-&gt;addWidget(textLabel, 4, 0);
    mainLayout-&gt;addWidget(textComboBox, 4, 1);
    mainLayout-&gt;addWidget(indexLabel, 5, 0);
    mainLayout-&gt;addWidget(indexEdit, 5, 1);
    mainLayout-&gt;addWidget(matchedLengthLabel, 6, 0);
    mainLayout-&gt;addWidget(matchedLengthEdit, 6, 1);

    for (int j = 0; j &lt; MaxCaptures; ++j) {
        mainLayout-&gt;addWidget(captureLabels[j], 7 + j, 0);
        mainLayout-&gt;addWidget(captureEdits[j], 7 + j, 1);
    }
    setLayout(mainLayout);

    connect(patternComboBox, SIGNAL(editTextChanged(QString)),
            this, SLOT(refresh()));
    connect(textComboBox, SIGNAL(editTextChanged(QString)),
            this, SLOT(refresh()));
    connect(caseSensitiveCheckBox, SIGNAL(toggled(bool)),
            this, SLOT(refresh()));
    connect(minimalCheckBox, SIGNAL(toggled(bool)), this, SLOT(refresh()));
    connect(syntaxComboBox, SIGNAL(currentIndexChanged(int)),
            this, SLOT(refresh()));

    patternComboBox-&gt;addItem(tr(&quot;[A-Za-z_]+([A-Za-z_0-9]*)&quot;));
    textComboBox-&gt;addItem(tr(&quot;(10 + delta4) * 32&quot;));

    setWindowTitle(tr(&quot;RegExp&quot;));
    setFixedHeight(sizeHint().height());
    refresh();
}

void RegExpDialog::refresh()
{
    setUpdatesEnabled(false);

    QString pattern = patternComboBox-&gt;currentText();
    QString text = textComboBox-&gt;currentText();

    QString escaped = pattern;
    escaped.replace(&quot;\\&quot;, &quot;\\\\&quot;);
    escaped.replace(&quot;\&quot;&quot;, &quot;\\\&quot;&quot;);
    escaped.prepend('&quot;');
    escaped.append('&quot;');
    escapedPatternLineEdit-&gt;setText(escaped);

    QRegExp rx(pattern);
    Qt::CaseSensitivity cs = Qt::CaseInsensitive;
    if (caseSensitiveCheckBox-&gt;isChecked())
        cs = Qt::CaseSensitive;
    rx.setCaseSensitivity(cs);
    rx.setMinimal(minimalCheckBox-&gt;isChecked());
    QRegExp::PatternSyntax syntax = QRegExp::PatternSyntax(
            syntaxComboBox-&gt;itemData(syntaxComboBox-&gt;currentIndex()).toInt());
    rx.setPatternSyntax(syntax);

    QPalette palette = patternComboBox-&gt;palette();
    if (rx.isValid()) {
        palette.setColor(QPalette::Text,
                         textComboBox-&gt;palette().color(QPalette::Text));
    } else {
        palette.setColor(QPalette::Text, Qt::red);
    }
    patternComboBox-&gt;setPalette(palette);

    indexEdit-&gt;setText(QString::number(rx.indexIn(text)));
    matchedLengthEdit-&gt;setText(QString::number(rx.matchedLength()));
    for (int i = 0; i &lt; MaxCaptures; ++i) {
        captureLabels[i]-&gt;setEnabled(i &lt;= rx.captureCount());
        captureEdits[i]-&gt;setEnabled(i &lt;= rx.captureCount());
        captureEdits[i]-&gt;setText(rx.cap(i));
    }

    setUpdatesEnabled(true);
}

</db:programlisting>
</db:article>
