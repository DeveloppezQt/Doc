<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRhiGraphicsPipeline Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Graphics pipeline state resource.</db:para>
<db:para>This class was introduced in Qt 6.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>rhi/qrhi.h</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::GuiPrivate)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui-private</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qrhiresource.xml" xlink:role="class">QRhiResource</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Represents a graphics pipeline. What exactly this map to in the underlying native graphics API, varies. Where there is a concept of pipeline objects, for example with Vulkan, the <db:link xlink:href="qrhi.xml">QRhi</db:link> backend will create such an object upon calling create(). Elsewhere, for example with OpenGL, the <db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link> may merely collect the various state, and create()'s main task is to set up the corresponding shader program, but deferring looking at any of the requested state to a later point.</db:para>
<db:para>As with all <db:link xlink:href="qrhiresource.xml">QRhiResource</db:link> subclasses, the two-phased initialization pattern applies: setting any values via the setters, for example setDepthTest(), is only effective after calling create(). Avoid changing any values once the <db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link> has been initialized via create(). To change some state, set the new value and call create() again. However, that will effectively release all underlying native resources and create new ones. As a result, it may be a heavy, expensive operation. Rather, prefer creating multiple pipelines with the different states, and <db:link xlink:href="qrhicommandbuffer.xml#setGraphicsPipeline">switch between them</db:link> when recording the render pass.</db:para>
<db:note>
<db:para>Setting the shader stages is mandatory. There must be at least one stage, and there must be a vertex stage.</db:para>
</db:note>
<db:note>
<db:para>Setting the shader resource bindings is mandatory. The referenced <db:link xlink:href="qrhishaderresourcebindings.xml">QRhiShaderResourceBindings</db:link> must already have create() called on it by the time create() is called. Associating with a <db:link xlink:href="qrhishaderresourcebindings.xml">QRhiShaderResourceBindings</db:link> that has no bindings is also valid, as long as no shader in any stage expects any resources. Using a <db:link xlink:href="qrhishaderresourcebindings.xml">QRhiShaderResourceBindings</db:link> object that does not specify any actual resources (i.e., the buffers, textures, etc. for the binding points are set to <db:code>nullptr</db:code>) is valid as well, as long as a <db:link xlink:href="qrhishaderresourcebindings.xml#isLayoutCompatible">layout-compatible</db:link> <db:link xlink:href="qrhishaderresourcebindings.xml">QRhiShaderResourceBindings</db:link>, that specifies resources for all the bindings, is going to be set via <db:link xlink:href="qrhicommandbuffer.xml#setShaderResources">setShaderResources</db:link>() when recording the render pass.</db:para>
</db:note>
<db:note>
<db:para>Setting the render pass descriptor is mandatory. To obtain a <db:link xlink:href="qrhirenderpassdescriptor.xml">QRhiRenderPassDescriptor</db:link> that can be passed to setRenderPassDescriptor(), use either QRhiTextureRenderTarget::newCompatibleRenderPassDescriptor() or QRhiSwapChain::newCompatibleRenderPassDescriptor().</db:para>
</db:note>
<db:note>
<db:para>Setting the vertex input layout is mandatory.</db:para>
</db:note>
<db:note>
<db:para>sampleCount() defaults to 1 and must match the sample count of the render target's color and depth stencil attachments.</db:para>
</db:note>
<db:note>
<db:para>The depth test, depth write, and stencil test are disabled by default. The face culling mode defaults to no culling.</db:para>
</db:note>
<db:note>
<db:para>stencilReadMask() and stencilWriteMask() apply to both faces. They both default to 0xFF.</db:para>
</db:note>
<db:section xml:id="example-usage">
<db:title>Example usage</db:title>
<db:para>All settings of a graphics pipeline have defaults which might be suitable to many applications. Therefore a minimal example of creating a graphics pipeline could be the following. This assumes that the vertex shader takes a single <db:code>vec3 position</db:code> input at the input location 0. With the <db:link xlink:href="qrhishaderresourcebindings.xml">QRhiShaderResourceBindings</db:link> and <db:link xlink:href="qrhirenderpassdescriptor.xml">QRhiRenderPassDescriptor</db:link> objects, plus the <db:link xlink:href="qshader.xml">QShader</db:link> collections for the vertex and fragment stages, a pipeline could be created like this:</db:para>
<db:programlisting language="cpp">QRhiShaderResourceBindings *srb;
QRhiRenderPassDescriptor *rpDesc;
QShader vs, fs;
// ...

QRhiVertexInputLayout inputLayout;
inputLayout.setBindings({ { 3 * sizeof(float) } });
inputLayout.setAttributes({ { 0, 0, QRhiVertexInputAttribute::Float3, 0 } });

QRhiGraphicsPipeline *ps = rhi-&gt;newGraphicsPipeline();
ps-&gt;setShaderStages({ { QRhiShaderStage::Vertex, vs }, { QRhiShaderStage::Fragment, fs } });
ps-&gt;setVertexInputLayout(inputLayout);
ps-&gt;setShaderResourceBindings(srb);
ps-&gt;setRenderPassDescriptor(rpDesc);
if (!ps-&gt;create()) { error(); }
</db:programlisting>
<db:para>The above code creates a pipeline object that uses the defaults for many settings and states. For example, it will use a <db:link xlink:href="qrhigraphicspipeline.xml#Topology-enum">Triangles</db:link> topology, no backface culling, blending is disabled but color write is enabled for all four channels, depth test/write are disabled, stencil operations are disabled.</db:para>
<db:note>
<db:para>This is a RHI API with limited compatibility guarantees, see <db:link xlink:href="qrhi.xml">QRhi</db:link> for details.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrhicommandbuffer.xml">QRhiCommandBuffer</db:link></db:member>
<db:member><db:link xlink:href="qrhi.xml">QRhi</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="BlendFactor-enum">
<db:title>enum QRhiGraphicsPipeline::BlendFactor</db:title>
<db:para>Specifies the blend factor</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Zero</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::One</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::SrcColor</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::OneMinusSrcColor</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::DstColor</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::OneMinusDstColor</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::SrcAlpha</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::OneMinusSrcAlpha</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::DstAlpha</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::OneMinusDstAlpha</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::ConstantColor</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::OneMinusConstantColor</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::ConstantAlpha</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::OneMinusConstantAlpha</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::SrcAlphaSaturate</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Src1Color</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::OneMinusSrc1Color</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Src1Alpha</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::OneMinusSrc1Alpha</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="BlendOp-enum">
<db:title>enum QRhiGraphicsPipeline::BlendOp</db:title>
<db:para>Specifies the blend operation</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Add</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Subtract</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::ReverseSubtract</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Min</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Max</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ColorMaskComponent-enum">
<db:title>enum QRhiGraphicsPipeline::ColorMaskComponent</db:title>
<db:bridgehead renderas="sect2">flags QRhiGraphicsPipeline::ColorMask</db:bridgehead>
<db:para>Flag values for specifying the color write mask</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::R</db:code></db:para>
</db:td>
<db:td><db:code>1 &lt;&lt; 0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::G</db:code></db:para>
</db:td>
<db:td><db:code>1 &lt;&lt; 1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::B</db:code></db:para>
</db:td>
<db:td><db:code>1 &lt;&lt; 2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::A</db:code></db:para>
</db:td>
<db:td><db:code>1 &lt;&lt; 3</db:code></db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>ColorMask</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;ColorMaskComponent&gt;. </db:code>It stores an OR combination of <db:code>ColorMaskComponent</db:code> values.</db:para>
</db:section>
<db:section xml:id="CompareOp-enum">
<db:title>enum QRhiGraphicsPipeline::CompareOp</db:title>
<db:para>Specifies the depth or stencil comparison function</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Never</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Less</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>(default for depth)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Equal</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::LessOrEqual</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Greater</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::NotEqual</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::GreaterOrEqual</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Always</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>(default for stencil)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="CullMode-enum">
<db:title>enum QRhiGraphicsPipeline::CullMode</db:title>
<db:para>Specifies the culling mode</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::None</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No culling (default)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Front</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Cull front faces</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Back</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Cull back faces</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Flag-enum">
<db:title>enum QRhiGraphicsPipeline::Flag</db:title>
<db:bridgehead renderas="sect2">flags QRhiGraphicsPipeline::Flags</db:bridgehead>
<db:para>Flag values for describing the dynamic state of the pipeline, and other options. The viewport is always dynamic.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::UsesBlendConstants</db:code></db:para>
</db:td>
<db:td><db:code>1 &lt;&lt; 0</db:code></db:td>
<db:td>
<db:para>Indicates that a blend color constant will be set via <db:link xlink:href="qrhicommandbuffer.xml#setBlendConstants">QRhiCommandBuffer::setBlendConstants</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::UsesStencilRef</db:code></db:para>
</db:td>
<db:td><db:code>1 &lt;&lt; 1</db:code></db:td>
<db:td>
<db:para>Indicates that a stencil reference value will be set via <db:link xlink:href="qrhicommandbuffer.xml#setStencilRef">QRhiCommandBuffer::setStencilRef</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::UsesScissor</db:code></db:para>
</db:td>
<db:td><db:code>1 &lt;&lt; 2</db:code></db:td>
<db:td>
<db:para>Indicates that a scissor rectangle will be set via <db:link xlink:href="qrhicommandbuffer.xml#setScissor">QRhiCommandBuffer::setScissor</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::CompileShadersWithDebugInfo</db:code></db:para>
</db:td>
<db:td><db:code>1 &lt;&lt; 3</db:code></db:td>
<db:td>
<db:para>Requests compiling shaders with debug information enabled. This is relevant only when runtime shader compilation from source code is involved, and only when the underlying infrastructure supports this. With concrete examples, this is not relevant with Vulkan and SPIR-V, because the GLSL-to-SPIR-V compilation does not happen at run time. On the other hand, consider Direct3D and HLSL, where there are multiple options: when the <db:link xlink:href="qshader.xml">QShader</db:link> packages ship with pre-compiled bytecode (<db:code>DXBC</db:code>), debug information is to be requested through the tool that generates the <db:code>.qsb</db:code> file, similarly to the case of Vulkan and SPIR-V. However, when having HLSL source code in the pre- or runtime-generated <db:link xlink:href="qshader.xml">QShader</db:link> packages, the first phase of compilation (HLSL source to intermediate format) happens at run time too, with this flag taken into account. Debug information is relevant in particular with tools like RenderDoc since it allows seeing the original source code when investigating the pipeline and when performing vertex or fragment shader debugging.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::UsesShadingRate</db:code></db:para>
</db:td>
<db:td><db:code>1 &lt;&lt; 4</db:code></db:td>
<db:td>
<db:para>Indicates that a per-draw (per-pipeline) shading rate value will be set via <db:link xlink:href="qrhicommandbuffer.xml#setShadingRate">QRhiCommandBuffer::setShadingRate</db:link>(). Not specifying this flag and still calling setShadingRate() may lead to varying, unexpected results depending on the underlying graphics API.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Flags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Flag&gt;. </db:code>It stores an OR combination of <db:code>Flag</db:code> values.</db:para>
</db:section>
<db:section xml:id="FrontFace-enum">
<db:title>enum QRhiGraphicsPipeline::FrontFace</db:title>
<db:para>Specifies the front face winding order</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::CCW</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Counter clockwise (default)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::CW</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Clockwise</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="PolygonMode-enum">
<db:title>enum QRhiGraphicsPipeline::PolygonMode</db:title>
<db:para>Specifies the polygon rasterization mode</db:para>
<db:para>Polygon Mode (Triangle Fill Mode in Metal, Fill Mode in D3D) specifies the fill mode used when rasterizing polygons. Polygons may be drawn as solids (Fill), or as a wire mesh (Line).</db:para>
<db:para>Support for non-fill polygon modes is optional and is indicated by the <db:link xlink:href="qrhi.xml#Feature-enum">QRhi::NonFillPolygonMode</db:link> feature. With OpenGL ES and some Vulkan implementations the feature will likely be reported as unsupported, which then means values other than Fill cannot be used.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Fill</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The interior of the polygon is filled (default)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Line</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Boundary edges of the polygon are drawn as line segments.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="StencilOp-enum">
<db:title>enum QRhiGraphicsPipeline::StencilOp</db:title>
<db:para>Specifies the stencil operation</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::StencilZero</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Keep</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>(default)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Replace</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::IncrementAndClamp</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::DecrementAndClamp</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Invert</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::IncrementAndWrap</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::DecrementAndWrap</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td/>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Topology-enum">
<db:title>enum QRhiGraphicsPipeline::Topology</db:title>
<db:para>Specifies the primitive topology</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Triangles</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>(default)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::TriangleStrip</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::TriangleFan</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>(only available if <db:link xlink:href="qrhi.xml#Feature-enum">QRhi::TriangleFanTopology</db:link> is supported)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Lines</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::LineStrip</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Points</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link></db:emphasis>::Patches</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>(only available if <db:link xlink:href="qrhi.xml#Feature-enum">QRhi::Tessellation</db:link> is supported, and requires the tessellation stages to be present in the pipeline)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="resourceType">
<db:title>[override virtual] QRhiResource::Type QRhiGraphicsPipeline::resourceType() const</db:title>
<db:para>Returns the resource type.</db:para>
</db:section>
</db:section>
</db:article>
