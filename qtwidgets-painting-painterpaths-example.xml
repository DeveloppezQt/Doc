<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Painter Paths Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Painter Paths example shows how painter paths can be used to beuild complex shapes for rendering.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/painterpaths-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> class provides a container for painting operations, enabling graphical shapes to be constructed and reused.</db:para>
<db:para>A painter path is an object composed of a number of graphical building blocks (such as rectangles, ellipses, lines, and curves), and can be used for filling, outlining, and clipping. The main advantage of painter paths over normal drawing operations is that complex shapes only need to be created once, but they can be drawn many times using only calls to <db:link xlink:href="qpainter.xml#drawPath">QPainter::drawPath</db:link>().</db:para>
<db:para>The example consists of two classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The RenderArea class which is a custom widget displaying a single painter path.</db:para>
</db:listitem>
<db:listitem>
<db:para>The Window class which is the applications main window displaying several RenderArea widgets, and allowing the user to manipulate the painter paths' filling, pen, color and rotation angle.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>First we will review the Window class, then we will take a look at the RenderArea class.</db:para>
<db:section xml:id="window-class-definition">
<db:title>Window Class Definition</db:title>
<db:para>The Window class inherits <db:link xlink:href="qwidget.xml">QWidget</db:link>, and is the applications main window displaying several RenderArea widgets, and allowing the user to manipulate the painter paths' filling, pen, color and rotation angle.</db:para>
<db:programlisting language="cpp">class Window : public QWidget
{
    Q_OBJECT

public:
    Window();

private slots:
    void fillRuleChanged();
    void fillGradientChanged();
    void penColorChanged();
</db:programlisting>
<db:para>We declare three private slots to respond to user input regarding filling and color: fillRuleChanged(), fillGradientChanged() and penColorChanged().</db:para>
<db:para>When the user changes the pen width and the rotation angle, the new value is passed directly on to the RenderArea widgets using the <db:link xlink:href="qspinbox.xml#valueChanged">QSpinBox::valueChanged</db:link>() signal. The reason why we must implement slots to update the filling and color, is that <db:link xlink:href="qcombobox.xml">QComboBox</db:link> doesn't provide a similar signal passing the new value as argument; so we need to retrieve the new value, or values, before we can update the RenderArea widgets.</db:para>
<db:programlisting language="cpp">private:
    void populateWithColors(QComboBox *comboBox);
    QVariant currentItemData(QComboBox *comboBox);
</db:programlisting>
<db:para>We also declare a couple of private convenience functions: populateWithColors() populates a given <db:link xlink:href="qcombobox.xml">QComboBox</db:link> with items corresponding to the color names Qt knows about, and currentItemData() returns the current item for a given <db:link xlink:href="qcombobox.xml">QComboBox</db:link>.</db:para>
<db:programlisting language="cpp">    QList&amp;lt;RenderArea*&amp;gt; renderAreas;
    QLabel *fillRuleLabel;
    QLabel *fillGradientLabel;
    QLabel *fillToLabel;
    QLabel *penWidthLabel;
    QLabel *penColorLabel;
    QLabel *rotationAngleLabel;
    QComboBox *fillRuleComboBox;
    QComboBox *fillColor1ComboBox;
    QComboBox *fillColor2ComboBox;
    QSpinBox *penWidthSpinBox;
    QComboBox *penColorComboBox;
    QSpinBox *rotationAngleSpinBox;
};
</db:programlisting>
<db:para>Then we declare the various components of the main window widget. We also declare a convenience constant specifying the number of RenderArea widgets.</db:para>
</db:section>
<db:section xml:id="window-class-implementation">
<db:title>Window Class Implementation</db:title>
<db:para>In the Window constructor, we define the various painter paths and create corresponding RenderArea widgets which will render the graphical shapes:</db:para>
<db:programlisting language="cpp">Window::Window()
{
    QPainterPath rectPath;
    rectPath.moveTo(20.0, 30.0);
    rectPath.lineTo(80.0, 30.0);
    rectPath.lineTo(80.0, 70.0);
    rectPath.lineTo(20.0, 70.0);
    rectPath.closeSubpath();
</db:programlisting>
<db:para>We construct a rectangle with sharp corners using the <db:link xlink:href="qpainterpath.xml#moveTo">QPainterPath::moveTo</db:link>() and <db:link xlink:href="qpainterpath.xml#lineTo">QPainterPath::lineTo</db:link>() functions.</db:para>
<db:para><db:link xlink:href="qpainterpath.xml#moveTo">QPainterPath::moveTo</db:link>() moves the current point to the point passed as argument. A painter path is an object composed of a number of graphical building blocks, i.e. subpaths. Moving the current point will also start a new subpath (implicitly closing the previously current path when the new one is started). The <db:link xlink:href="qpainterpath.xml#lineTo">QPainterPath::lineTo</db:link>() function adds a straight line from the current point to the given end point. After the line is drawn, the current point is updated to be at the end point of the line.</db:para>
<db:para>We first move the current point starting a new subpath, and we draw three of the rectangle's sides. Then we call the <db:link xlink:href="qpainterpath.xml#closeSubpath">QPainterPath::closeSubpath</db:link>() function which draws a line to the beginning of the current subpath. A new subpath is automatically begun when the current subpath is closed. The current point of the new path is (0, 0). We could also have called <db:link xlink:href="qpainterpath.xml#lineTo">QPainterPath::lineTo</db:link>() to draw the last line as well, and then explicitly start a new subpath using the <db:link xlink:href="qpainterpath.xml#moveTo">QPainterPath::moveTo</db:link>() function.</db:para>
<db:para><db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> also provide the <db:link xlink:href="qpainterpath.xml#addRect">QPainterPath::addRect</db:link>() convenience function, which adds a given rectangle to the path as a closed subpath. The rectangle is added as a clockwise set of lines. The painter path's current position after the rect has been added is at the top-left corner of the rectangle.</db:para>
<db:programlisting language="cpp">    QPainterPath roundRectPath;
    roundRectPath.moveTo(80.0, 35.0);
    roundRectPath.arcTo(70.0, 30.0, 10.0, 10.0, 0.0, 90.0);
    roundRectPath.lineTo(25.0, 30.0);
    roundRectPath.arcTo(20.0, 30.0, 10.0, 10.0, 90.0, 90.0);
    roundRectPath.lineTo(20.0, 65.0);
    roundRectPath.arcTo(20.0, 60.0, 10.0, 10.0, 180.0, 90.0);
    roundRectPath.lineTo(75.0, 70.0);
    roundRectPath.arcTo(70.0, 60.0, 10.0, 10.0, 270.0, 90.0);
    roundRectPath.closeSubpath();
</db:programlisting>
<db:para>Then we construct a rectangle with rounded corners. As before, we use the <db:link xlink:href="qpainterpath.xml#moveTo">QPainterPath::moveTo</db:link>() and <db:link xlink:href="qpainterpath.xml#lineTo">QPainterPath::lineTo</db:link>() functions to draw the rectangle's sides. To create the rounded corners we use the <db:link xlink:href="qpainterpath.xml#arcTo">QPainterPath::arcTo</db:link>() function.</db:para>
<db:para><db:link xlink:href="qpainterpath.xml#arcTo">QPainterPath::arcTo</db:link>() creates an arc that occupies the given rectangle (specified by a <db:link xlink:href="qrect.xml">QRect</db:link> or the rectangle's coordinates), beginning at the given start angle and extending the given degrees counter-clockwise. Angles are specified in degrees. Clockwise arcs can be specified using negative angles. The function connects the current point to the starting point of the arc if they are not already connected.</db:para>
<db:programlisting language="cpp">    QPainterPath ellipsePath;
    ellipsePath.moveTo(80.0, 50.0);
    ellipsePath.arcTo(20.0, 30.0, 60.0, 40.0, 0.0, 360.0);
</db:programlisting>
<db:para>We also use the <db:link xlink:href="qpainterpath.xml#arcTo">QPainterPath::arcTo</db:link>() function to construct the ellipse path. First we move the current point starting a new path. Then we call <db:link xlink:href="qpainterpath.xml#arcTo">QPainterPath::arcTo</db:link>() with starting angle 0.0 and 360.0 degrees as the last argument, creating an ellipse.</db:para>
<db:para>Again, <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> provides a convenience function ( <db:link xlink:href="qpainterpath.xml#addEllipse">QPainterPath::addEllipse</db:link>()) which creates an ellipse within a given bounding rectangle and adds it to the painter path. If the current subpath is closed, a new subpath is started. The ellipse is composed of a clockwise curve, starting and finishing at zero degrees (the 3 o'clock position).</db:para>
<db:programlisting language="cpp">    QPainterPath piePath;
    piePath.moveTo(50.0, 50.0);
    piePath.arcTo(20.0, 30.0, 60.0, 40.0, 60.0, 240.0);
    piePath.closeSubpath();
</db:programlisting>
<db:para>When constructing the pie chart path we continue to use a combination of the mentioned functions: First we move the current point, starting a new subpath. Then we create a line from the center of the chart to the arc, and the arc itself. When we close the subpath, we implicitly construct the last line back to the center of the chart.</db:para>
<db:programlisting language="cpp">    QPainterPath polygonPath;
    polygonPath.moveTo(10.0, 80.0);
    polygonPath.lineTo(20.0, 10.0);
    polygonPath.lineTo(80.0, 30.0);
    polygonPath.lineTo(90.0, 70.0);
    polygonPath.closeSubpath();
</db:programlisting>
<db:para>Constructing a polygon is equivalent to constructing a rectangle.</db:para>
<db:para><db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> also provide the <db:link xlink:href="qpainterpath.xml#addPolygon">QPainterPath::addPolygon</db:link>() convenience function which adds the given polygon to the path as a new subpath. Current position after the polygon has been added is the last point in polygon.</db:para>
<db:programlisting language="cpp">    QPainterPath groupPath;
    groupPath.moveTo(60.0, 40.0);
    groupPath.arcTo(20.0, 20.0, 40.0, 40.0, 0.0, 360.0);
    groupPath.moveTo(40.0, 40.0);
    groupPath.lineTo(40.0, 80.0);
    groupPath.lineTo(80.0, 80.0);
    groupPath.lineTo(80.0, 40.0);
    groupPath.closeSubpath();
</db:programlisting>
<db:para>Then we create a path consisting of a group of subpaths: First we move the current point, and create a circle using the <db:link xlink:href="qpainterpath.xml#arcTo">QPainterPath::arcTo</db:link>() function with starting angle 0.0, and 360 degrees as the last argument, as we did when we created the ellipse path. Then we move the current point again, starting a new subpath, and construct three sides of a square using the <db:link xlink:href="qpainterpath.xml#lineTo">QPainterPath::lineTo</db:link>() function.</db:para>
<db:para>Now, when we call the <db:link xlink:href="qpainterpath.xml#closeSubpath">QPainterPath::closeSubpath</db:link>() function the last side is created. Remember that the <db:link xlink:href="qpainterpath.xml#closeSubpath">QPainterPath::closeSubpath</db:link>() function draws a line to the beginning of the <db:emphasis>current</db:emphasis> subpath, i.e the square.</db:para>
<db:para><db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> provide a convenience function, <db:link xlink:href="qpainterpath.xml#addPath">QPainterPath::addPath</db:link>() which adds a given path to the path that calls the function.</db:para>
<db:programlisting language="cpp">    QPainterPath textPath;
    QFont timesFont(&quot;Times&quot;, 50);
    timesFont.setStyleStrategy(QFont::ForceOutline);
    textPath.addText(10, 70, timesFont, tr(&quot;Qt&quot;));
</db:programlisting>
<db:para>When creating the text path, we first create the font. Then we set the font's style strategy which tells the font matching algorithm what type of fonts should be used to find an appropriate default family. <db:link xlink:href="qfont.xml#StyleStrategy-enum">QFont::ForceOutline</db:link> forces the use of outline fonts.</db:para>
<db:para>To construct the text, we use the <db:link xlink:href="qpainterpath.xml#addText">QPainterPath::addText</db:link>() function which adds the given text to the path as a set of closed subpaths created from the supplied font. The subpaths are positioned so that the left end of the text's baseline lies at the specified point.</db:para>
<db:programlisting language="cpp">    QPainterPath bezierPath;
    bezierPath.moveTo(20, 30);
    bezierPath.cubicTo(80, 0, 50, 50, 80, 80);
</db:programlisting>
<db:para>To create the Bezier path, we use the <db:link xlink:href="qpainterpath.xml#cubicTo">QPainterPath::cubicTo</db:link>() function which adds a Bezier curve between the current point and the given end point with the given control point. After the curve is added, the current point is updated to be at the end point of the curve.</db:para>
<db:para>In this case we omit to close the subpath so that we only have a simple curve. But there is still a logical line from the curve's endpoint back to the beginning of the subpath; it becomes visible when filling the path as can be seen in the applications main window.</db:para>
<db:programlisting language="cpp">    QPainterPath starPath;
    starPath.moveTo(90, 50);
    for (int i = 1; i &amp;lt; 5; ++i) {
        starPath.lineTo(50 + 40 * std::cos(0.8 * i * M_PI),
                        50 + 40 * std::sin(0.8 * i * M_PI));
    }
    starPath.closeSubpath();
</db:programlisting>
<db:para>The final path that we construct shows that you can use <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> to construct rather complex shapes using only the previous mentioned <db:link xlink:href="qpainterpath.xml#moveTo">QPainterPath::moveTo</db:link>(), <db:link xlink:href="qpainterpath.xml#lineTo">QPainterPath::lineTo</db:link>() and <db:link xlink:href="qpainterpath.xml#closeSubpath">QPainterPath::closeSubpath</db:link>() functions.</db:para>
<db:programlisting language="cpp">    renderAreas.push_back(new RenderArea(rectPath));
    renderAreas.push_back(new RenderArea(roundRectPath));
    renderAreas.push_back(new RenderArea(ellipsePath));
    renderAreas.push_back(new RenderArea(piePath));
    renderAreas.push_back(new RenderArea(polygonPath));
    renderAreas.push_back(new RenderArea(groupPath));
    renderAreas.push_back(new RenderArea(textPath));
    renderAreas.push_back(new RenderArea(bezierPath));
    renderAreas.push_back(new RenderArea(starPath));
</db:programlisting>
<db:para>Now that we have created all the painter paths that we need, we create a corresponding RenderArea widget for each. In the end, we make sure that the number of render areas is correct using the <db:link xlink:href="qtglobal.xml#Q_ASSERT">Q_ASSERT</db:link>() macro.</db:para>
<db:programlisting language="cpp">    fillRuleComboBox = new QComboBox;
    fillRuleComboBox-&amp;gt;addItem(tr(&quot;Odd Even&quot;), Qt::OddEvenFill);
    fillRuleComboBox-&amp;gt;addItem(tr(&quot;Winding&quot;), Qt::WindingFill);

    fillRuleLabel = new QLabel(tr(&quot;Fill &amp;amp;Rule:&quot;));
    fillRuleLabel-&amp;gt;setBuddy(fillRuleComboBox);
</db:programlisting>
<db:para>Then we create the widgets associated with the painter paths' fill rule.</db:para>
<db:para>There are two available fill rules in Qt: The <db:link xlink:href="qt.xml#FillRule-enum">Qt::OddEvenFill</db:link> rule determine whether a point is inside the shape by drawing a horizontal line from the point to a location outside the shape, and count the number of intersections. If the number of intersections is an odd number, the point is inside the shape. This rule is the default.</db:para>
<db:para>The <db:link xlink:href="qt.xml#FillRule-enum">Qt::WindingFill</db:link> rule determine whether a point is inside the shape by drawing a horizontal line from the point to a location outside the shape. Then it determines whether the direction of the line at each intersection point is up or down. The winding number is determined by summing the direction of each intersection. If the number is non zero, the point is inside the shape.</db:para>
<db:para>The <db:link xlink:href="qt.xml#FillRule-enum">Qt::WindingFill</db:link> rule can in most cases be considered as the intersection of closed shapes.</db:para>
<db:programlisting language="cpp">    fillColor1ComboBox = new QComboBox;
    populateWithColors(fillColor1ComboBox);
    fillColor1ComboBox-&amp;gt;setCurrentIndex(fillColor1ComboBox-&amp;gt;findText(&quot;mediumslateblue&quot;));

    fillColor2ComboBox = new QComboBox;
    populateWithColors(fillColor2ComboBox);
    fillColor2ComboBox-&amp;gt;setCurrentIndex(fillColor2ComboBox-&amp;gt;findText(&quot;cornsilk&quot;));

    fillGradientLabel = new QLabel(tr(&quot;&amp;amp;Fill Gradient:&quot;));
    fillGradientLabel-&amp;gt;setBuddy(fillColor1ComboBox);

    fillToLabel = new QLabel(tr(&quot;to&quot;));
    fillToLabel-&amp;gt;setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed);

    penWidthSpinBox = new QSpinBox;
    penWidthSpinBox-&amp;gt;setRange(0, 20);

    penWidthLabel = new QLabel(tr(&quot;&amp;amp;Pen Width:&quot;));
    penWidthLabel-&amp;gt;setBuddy(penWidthSpinBox);

    penColorComboBox = new QComboBox;
    populateWithColors(penColorComboBox);
    penColorComboBox-&amp;gt;setCurrentIndex(penColorComboBox-&amp;gt;findText(&quot;darkslateblue&quot;));

    penColorLabel = new QLabel(tr(&quot;Pen &amp;amp;Color:&quot;));
    penColorLabel-&amp;gt;setBuddy(penColorComboBox);

    rotationAngleSpinBox = new QSpinBox;
    rotationAngleSpinBox-&amp;gt;setRange(0, 359);
    rotationAngleSpinBox-&amp;gt;setWrapping(true);
    rotationAngleSpinBox-&amp;gt;setSuffix(QLatin1String(&quot;\xB0&quot;));

    rotationAngleLabel = new QLabel(tr(&quot;&amp;amp;Rotation Angle:&quot;));
    rotationAngleLabel-&amp;gt;setBuddy(rotationAngleSpinBox);
</db:programlisting>
<db:para>We also create the other widgets associated with the filling, the pen and the rotation angle.</db:para>
<db:programlisting language="cpp">    connect(fillRuleComboBox, SIGNAL(activated(int)), this, SLOT(fillRuleChanged()));
    connect(fillColor1ComboBox, SIGNAL(activated(int)), this, SLOT(fillGradientChanged()));
    connect(fillColor2ComboBox, SIGNAL(activated(int)), this, SLOT(fillGradientChanged()));
    connect(penColorComboBox, SIGNAL(activated(int)), this, SLOT(penColorChanged()));

    for(QList&amp;lt;RenderArea*&amp;gt;::iterator it = renderAreas.begin(); it != renderAreas.end(); it++) {
        connect(penWidthSpinBox, SIGNAL(valueChanged(int)), *it, SLOT(setPenWidth(int)));
        connect(rotationAngleSpinBox, SIGNAL(valueChanged(int)), *it, SLOT(setRotationAngle(int)));
    }
</db:programlisting>
<db:para>We connect the comboboxes <db:link xlink:href="qcombobox.xml#activated">activated</db:link>() signals to the associated slots in the Window class, while we connect the spin boxes <db:link xlink:href="qspinbox.xml#valueChanged">valueChanged</db:link>() signal directly to the RenderArea widget's respective slots.</db:para>
<db:programlisting language="cpp">    QGridLayout *topLayout = new QGridLayout;

    int i=0;
    for(QList&amp;lt;RenderArea*&amp;gt;::iterator it = renderAreas.begin(); it != renderAreas.end(); it++, i++)
        topLayout-&amp;gt;addWidget(*it, i / 3, i % 3);

    QGridLayout *mainLayout = new QGridLayout;
    mainLayout-&amp;gt;addLayout(topLayout, 0, 0, 1, 4);
    mainLayout-&amp;gt;addWidget(fillRuleLabel, 1, 0);
    mainLayout-&amp;gt;addWidget(fillRuleComboBox, 1, 1, 1, 3);
    mainLayout-&amp;gt;addWidget(fillGradientLabel, 2, 0);
    mainLayout-&amp;gt;addWidget(fillColor1ComboBox, 2, 1);
    mainLayout-&amp;gt;addWidget(fillToLabel, 2, 2);
    mainLayout-&amp;gt;addWidget(fillColor2ComboBox, 2, 3);
    mainLayout-&amp;gt;addWidget(penWidthLabel, 3, 0);
    mainLayout-&amp;gt;addWidget(penWidthSpinBox, 3, 1, 1, 3);
    mainLayout-&amp;gt;addWidget(penColorLabel, 4, 0);
    mainLayout-&amp;gt;addWidget(penColorComboBox, 4, 1, 1, 3);
    mainLayout-&amp;gt;addWidget(rotationAngleLabel, 5, 0);
    mainLayout-&amp;gt;addWidget(rotationAngleSpinBox, 5, 1, 1, 3);
    setLayout(mainLayout);
</db:programlisting>
<db:para>We add the RenderArea widgets to a separate layout which we then add to the main layout along with the rest of the widgets.</db:para>
<db:programlisting language="cpp">    fillRuleChanged();
    fillGradientChanged();
    penColorChanged();
    penWidthSpinBox-&amp;gt;setValue(2);

    setWindowTitle(tr(&quot;Painter Paths&quot;));
}
</db:programlisting>
<db:para>Finally, we initialize the RenderArea widgets by calling the fillRuleChanged(), fillGradientChanged() and penColorChanged() slots, and we set the initial pen width and window title.</db:para>
<db:programlisting language="cpp">void Window::fillRuleChanged()
{
    Qt::FillRule rule = (Qt::FillRule)currentItemData(fillRuleComboBox).toInt();

    for (QList&amp;lt;RenderArea*&amp;gt;::iterator it = renderAreas.begin(); it != renderAreas.end(); ++it)
        (*it)-&amp;gt;setFillRule(rule);
}

void Window::fillGradientChanged()
{
    QColor color1 = qvariant_cast&amp;lt;QColor&amp;gt;(currentItemData(fillColor1ComboBox));
    QColor color2 = qvariant_cast&amp;lt;QColor&amp;gt;(currentItemData(fillColor2ComboBox));

    for (QList&amp;lt;RenderArea*&amp;gt;::iterator it = renderAreas.begin(); it != renderAreas.end(); ++it)
        (*it)-&amp;gt;setFillGradient(color1, color2);
}

void Window::penColorChanged()
{
    QColor color = qvariant_cast&amp;lt;QColor&amp;gt;(currentItemData(penColorComboBox));

    for (QList&amp;lt;RenderArea*&amp;gt;::iterator it = renderAreas.begin(); it != renderAreas.end(); ++it)
        (*it)-&amp;gt;setPenColor(color);
}
</db:programlisting>
<db:para>The private slots are implemented to retrieve the new value, or values, from the associated comboboxes and update the RenderArea widgets.</db:para>
<db:para>First we determine the new value, or values, using the private currentItemData() function and the <db:link xlink:href="qvariant.xml#qvariant_cast">qvariant_cast</db:link>() template function. Then we call the associated slot for each of the RenderArea widgets to update the painter paths.</db:para>
<db:programlisting language="cpp">void Window::populateWithColors(QComboBox *comboBox)
{
    QStringList colorNames = QColor::colorNames();
    foreach (QString name, colorNames)
        comboBox-&amp;gt;addItem(name, QColor(name));
}
</db:programlisting>
<db:para>The populateWithColors() function populates the given combobox with items corresponding to the color names Qt knows about provided by the static <db:link xlink:href="qcolor.xml#colorNames">QColor::colorNames</db:link>() function.</db:para>
<db:programlisting language="cpp">QVariant Window::currentItemData(QComboBox *comboBox)
{
    return comboBox-&amp;gt;itemData(comboBox-&amp;gt;currentIndex());
}
</db:programlisting>
<db:para>The currentItemData() function simply return the current item of the given combobox.</db:para>
</db:section>
<db:section xml:id="renderarea-class-definition">
<db:title>RenderArea Class Definition</db:title>
<db:para>The RenderArea class inherits <db:link xlink:href="qwidget.xml">QWidget</db:link>, and is a custom widget displaying a single painter path.</db:para>
<db:programlisting language="cpp">class RenderArea : public QWidget
{
    Q_OBJECT

public:
    explicit RenderArea(const QPainterPath &amp;amp;path, QWidget *parent = 0);

    QSize minimumSizeHint() const override;
    QSize sizeHint() const override;

public slots:
    void setFillRule(Qt::FillRule rule);
    void setFillGradient(const QColor &amp;amp;color1, const QColor &amp;amp;color2);
    void setPenWidth(int width);
    void setPenColor(const QColor &amp;amp;color);
    void setRotationAngle(int degrees);

protected:
    void paintEvent(QPaintEvent *event) override;
</db:programlisting>
<db:para>We declare several public slots updating the RenderArea widget's associated painter path. In addition we reimplement the <db:link xlink:href="qwidget.xml#minimumSizeHint-prop">QWidget::minimumSizeHint</db:link>() and <db:link xlink:href="qwidget.xml#sizeHint-prop">QWidget::sizeHint</db:link>() functions to give the RenderArea widget a reasonable size within our application, and we reimplement the <db:link xlink:href="qwidget.xml#paintEvent">QWidget::paintEvent</db:link>() event handler to draw its painter path.</db:para>
<db:programlisting language="cpp">private:
    QPainterPath path;
    QColor fillColor1;
    QColor fillColor2;
    int penWidth;
    QColor penColor;
    int rotationAngle;
};
</db:programlisting>
<db:para>Each instance of the RenderArea class has a <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link>, a couple of fill colors, a pen width, a pen color and a rotation angle.</db:para>
</db:section>
<db:section xml:id="renderarea-class-implementation">
<db:title>RenderArea Class Implementation</db:title>
<db:para>The constructor takes a <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> as argument (in addition to the optional <db:link xlink:href="qwidget.xml">QWidget</db:link> parent):</db:para>
<db:programlisting language="cpp">RenderArea::RenderArea(const QPainterPath &amp;amp;path, QWidget *parent)
    : QWidget(parent), path(path)
{
    penWidth = 1;
    rotationAngle = 0;
    setBackgroundRole(QPalette::Base);
}
</db:programlisting>
<db:para>In the constructor we initialize the RenderArea widget with the <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> parameter as well as initializing the pen width and rotation angle. We also set the widgets <db:link xlink:href="qwidget.xml#backgroundRole">background role</db:link>; <db:link xlink:href="qpalette.xml#ColorRole-enum">QPalette::Base</db:link> is typically white.</db:para>
<db:programlisting language="cpp">QSize RenderArea::minimumSizeHint() const
{
    return QSize(50, 50);
}

QSize RenderArea::sizeHint() const
{
    return QSize(100, 100);
}
</db:programlisting>
<db:para>Then we reimplement the <db:link xlink:href="qwidget.xml#minimumSizeHint-prop">QWidget::minimumSizeHint</db:link>() and <db:link xlink:href="qwidget.xml#sizeHint-prop">QWidget::sizeHint</db:link>() functions to give the RenderArea widget a reasonable size within our application.</db:para>
<db:programlisting language="cpp">void RenderArea::setFillRule(Qt::FillRule rule)
{
    path.setFillRule(rule);
    update();
}

void RenderArea::setFillGradient(const QColor &amp;amp;color1, const QColor &amp;amp;color2)
{
    fillColor1 = color1;
    fillColor2 = color2;
    update();
}

void RenderArea::setPenWidth(int width)
{
    penWidth = width;
    update();
}

void RenderArea::setPenColor(const QColor &amp;amp;color)
{
    penColor = color;
    update();
}

void RenderArea::setRotationAngle(int degrees)
{
    rotationAngle = degrees;
    update();
}
</db:programlisting>
<db:para>The various public slots updates the RenderArea widget's painter path by setting the associated property and make a call to the <db:link xlink:href="qwidget.xml#update">QWidget::update</db:link>() function, forcing a repaint of the widget with the new rendering preferences.</db:para>
<db:para>The <db:link xlink:href="qwidget.xml#update">QWidget::update</db:link>() slot does not cause an immediate repaint; instead it schedules a paint event for processing when Qt returns to the main event loop.</db:para>
<db:programlisting language="cpp">void RenderArea::paintEvent(QPaintEvent *)
{
    QPainter painter(this);
    painter.setRenderHint(QPainter::Antialiasing);
</db:programlisting>
<db:para>A paint event is a request to repaint all or parts of the widget. The paintEvent() function is an event handler that can be reimplemented to receive the widget's paint events. We reimplement the event handler to render the RenderArea widget's painter path.</db:para>
<db:para>First, we create a <db:link xlink:href="qpainter.xml">QPainter</db:link> for the RenderArea instance, and set the painter's render hints. The <db:link xlink:href="qpainter.xml#RenderHint-enum">QPainter::RenderHints</db:link> are used to specify flags to <db:link xlink:href="qpainter.xml">QPainter</db:link> that may, or may not, be respected by any given engine. <db:link xlink:href="qpainter.xml#RenderHint-enum">QPainter::Antialiasing</db:link> indicates that the engine should anti-alias the edges of primitives if possible, i.e. put additional pixels around the original ones to smooth the edges.</db:para>
<db:programlisting language="cpp">    painter.scale(width() / 100.0, height() / 100.0);
    painter.translate(50.0, 50.0);
    painter.rotate(-rotationAngle);
    painter.translate(-50.0, -50.0);
</db:programlisting>
<db:para>Then we scale the <db:link xlink:href="qpainter.xml">QPainter</db:link>'s coordinate system to ensure that the painter path is rendered in the right size, i.e that it grows with the RenderArea widget when the application is resized. When we constructed the various painter paths, they were all rnedered within a square with a 100 pixel width which is equivalent to RenderArea::sizeHint(). The <db:link xlink:href="qpainter.xml#scale">QPainter::scale</db:link>() function scales the coordinate system by the RenderArea widget's <db:emphasis>current</db:emphasis> width and height divided by 100.</db:para>
<db:para>Now, when we are sure that the painter path has the right size, we can translate the coordinate system to make the painter path rotate around the RenderArea widget's center. After we have performed the rotation, we must remember to translate the coordinate system back again.</db:para>
<db:programlisting language="cpp">    painter.setPen(QPen(penColor, penWidth, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin));
    QLinearGradient gradient(0, 0, 0, 100);
    gradient.setColorAt(0.0, fillColor1);
    gradient.setColorAt(1.0, fillColor2);
    painter.setBrush(gradient);
    painter.drawPath(path);
}
</db:programlisting>
<db:para>Then we set the <db:link xlink:href="qpainter.xml">QPainter</db:link>'s pen with the instance's rendering preferences. We create a <db:link xlink:href="qlineargradient.xml">QLinearGradient</db:link> and set its colors corresponding to the RenderArea widget's fill colors. Finally, we set the <db:link xlink:href="qpainter.xml">QPainter</db:link>'s brush (the gradient is automatically converted into a <db:link xlink:href="qbrush.xml">QBrush</db:link>), and draw the RenderArea widget's painter path using the <db:link xlink:href="qpainter.xml#drawPath">QPainter::drawPath</db:link>() function.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="painting/painterpaths/main.cpp">painting/painterpaths/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="painting/painterpaths/painterpaths.pro">painting/painterpaths/painterpaths.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="painting/painterpaths/renderarea.cpp">painting/painterpaths/renderarea.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="painting/painterpaths/renderarea.h">painting/painterpaths/renderarea.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="painting/painterpaths/window.cpp">painting/painterpaths/window.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="painting/painterpaths/window.h">painting/painterpaths/window.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
