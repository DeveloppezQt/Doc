<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Getting started with CMake</db:title>
<db:productname>QtCMake</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Using Qt with CMake</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="cmake-manual.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Build with CMake"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="cmake-build-on-cmdline.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Building projects on the command line"/></db:extendedlink>
<db:abstract>
<db:para>Using Qt with CMake.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:code>CMake</db:code> is a group of tools that allow to build, test, and package applications. Just like Qt, it is available on all major development platforms. It is also supported by various IDE's, including <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>.</db:para>
<db:para>In this section we will show the most basic way to use Qt in a CMake project. First, we create a basic console application. Then, we extend the project into a GUI application that uses <db:link xlink:href="qtwidgets-index.xml">Qt Widgets</db:link>.</db:para>
<db:para>If you want to know how to build an existing CMake project with Qt, see the documentation on <db:link xlink:href="cmake-build-on-cmdline.xml">how to build projects with CMake on the command line</db:link>.</db:para>
<db:section xml:id="building-a-c-console-application">
<db:title>Building a C++ console application</db:title>
<db:para>A <db:code>CMake</db:code> project is defined by files written in the CMake language. The main file is called <db:code>CMakeLists.txt</db:code>, and is usually placed in the same directory as the actual program sources.</db:para>
<db:para>Here is a typical <db:code>CMakeLists.txt</db:code> file for a console application written in C++ using Qt:</db:para>
<db:programlisting language="cpp">cmake_minimum_required(VERSION 3.16)

project(helloworld VERSION 1.0.0 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(Qt6 REQUIRED COMPONENTS Core)
qt_standard_project_setup()

qt_add_executable(helloworld
    main.cpp
)

target_link_libraries(helloworld PRIVATE Qt6::Core)
</db:programlisting>
<db:para>Let's go through the content.</db:para>
<db:programlisting language="cpp">cmake_minimum_required(VERSION 3.16)
</db:programlisting>
<db:para><db:code>cmake_minimum_required()</db:code> specifies the minimum CMake version that the application requires. Qt itself requires at least CMake version 3.16, except on Apple platforms, or for static builds of Qt - the default in <db:link xlink:href="ios.xml">Qt for iOS</db:link> and <db:link xlink:href="wasm.xml">Qt for WebAssembly</db:link> - where you need CMake 3.21.1 or newer.</db:para>
<db:programlisting language="cpp">project(helloworld VERSION 1.0.0 LANGUAGES CXX)
</db:programlisting>
<db:para><db:code>project()</db:code> sets a project name and the default project version. The <db:code>LANGUAGES</db:code> argument tells CMake that the program is written in C++.</db:para>
<db:programlisting language="cpp">set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
</db:programlisting>
<db:para>Qt 6 requires a compiler supporting C++ version 17 or newer. Enforcing this by setting the <db:code>CMAKE_CXX_STANDARD</db:code>, <db:code>CMAKE_CXX_STANDARD_REQUIRED</db:code> variables will let CMake print an error if the compiler is too old.</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS Core)
</db:programlisting>
<db:para>This tells CMake to look up Qt 6, and import the <db:code>Core</db:code> module. There is no point in continuing if <db:code>CMake</db:code> cannot locate the module, so we do set the <db:code>REQUIRED</db:code> flag to let CMake abort in this case.</db:para>
<db:para>If successful, the module will set some CMake variables documented in <db:link xlink:href="cmake-variable-reference.xml#module-variables">Module variables</db:link>. It furthermore imports the <db:code>Qt6::Core</db:code> target that we use below.</db:para>
<db:para>For <db:code>find_package</db:code> to be successful, <db:code>CMake</db:code> must find the Qt installation. There are different ways you can tell <db:code>CMake</db:code> about Qt, but the most common and recommended approach is to set the CMake cache variable <db:code>CMAKE_PREFIX_PATH</db:code> to include the Qt 6 installation prefix. Note that <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link> will handle this transparently for you.</db:para>
<db:programlisting language="cpp">qt_standard_project_setup()
</db:programlisting>
<db:para>The <db:link xlink:href="qt-standard-project-setup.xml">qt_standard_project_setup</db:link> command sets project-wide defaults for a typical Qt application.</db:para>
<db:para>Among other things, this command sets the <db:code>CMAKE_AUTOMOC</db:code> variable to <db:code>ON</db:code>, which instructs CMake to automatically set up rules so that Qt's <db:link xlink:href="moc.xml">Meta-Object Compiler (moc)</db:link> is called transparently, when required.</db:para>
<db:para>See <db:link xlink:href="qt-standard-project-setup.xml">qt_standard_project_setup</db:link>'s reference for details.</db:para>
<db:programlisting language="cpp">qt_add_executable(helloworld
    main.cpp
)
</db:programlisting>
<db:para><db:link xlink:href="qt-add-executable.xml">qt_add_executable()</db:link> tells CMake that we want to build an executable (so not a library) called <db:code>helloworld</db:code> as a target. It is a wrapper around the built-in <db:code>add_executable()</db:code> command, and provides additional logic to automatically handle things like linking of Qt plugins in static Qt builds, platform-specific customization of library names, and so on.</db:para>
<db:para>The target should be built from the C++ source file <db:code>main.cpp</db:code>.</db:para>
<db:para>Typically, you do not list header files here. This is different from <db:link xlink:href="qmake-manual.xml">qmake</db:link>, where header files need to be explicitly listed so that they are processed by the <db:link xlink:href="moc.xml">Meta-Object Compiler (moc)</db:link>.</db:para>
<db:para>For creating libraries, see <db:link xlink:href="qt-add-library.xml">qt_add_library</db:link>.</db:para>
<db:programlisting language="cpp">target_link_libraries(helloworld PRIVATE Qt6::Core)
</db:programlisting>
<db:para>Finally, <db:code>target_link_libraries</db:code> tells CMake that the <db:code>helloworld</db:code> executable makes use of <db:link xlink:href="qtcore-index.xml">Qt Core</db:link> by referencing the <db:code>Qt6::Core</db:code> target imported by the <db:code>find_package()</db:code> call above. This will not only add the right arguments to the linker, but also makes sure that the right include directories, compiler definitions are passed to the C++ compiler. The <db:code>PRIVATE</db:code> keyword is not strictly necessary for an executable target, but it is good practice to specify it. If <db:code>helloworld</db:code> was a library rather than an executable, then either <db:code>PRIVATE</db:code> or <db:code>PUBLIC</db:code> should be specified (<db:code>PUBLIC</db:code> if the library mentions anything from <db:code>Qt6::Core</db:code> in its headers, <db:code>PRIVATE</db:code> otherwise).</db:para>
</db:section>
<db:section xml:id="building-a-c-gui-application">
<db:title>Building a C++ GUI application</db:title>
<db:para>In the <db:link xlink:href="cmake-get-started.xml#building-a-c-console-application">last section</db:link> we showed the CMakeLists.txt file for a simple console application. We will now create a GUI application that uses the <db:link xlink:href="qtwidgets-index.xml">Qt Widgets</db:link> module.</db:para>
<db:para>This is the full project file:</db:para>
<db:programlisting language="cpp">cmake_minimum_required(VERSION 3.16)

project(helloworld VERSION 1.0.0 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(Qt6 REQUIRED COMPONENTS Widgets)
qt_standard_project_setup()

qt_add_executable(helloworld
    mainwindow.ui
    mainwindow.cpp
    main.cpp
)

target_link_libraries(helloworld PRIVATE Qt6::Widgets)

set_target_properties(helloworld PROPERTIES
    WIN32_EXECUTABLE ON
    MACOSX_BUNDLE ON
)
</db:programlisting>
<db:para>Let's walk through the changes we have made.</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS Widgets)
</db:programlisting>
<db:para>In the <db:code>find_package</db:code> call, we replace <db:code>Core</db:code> with <db:code>Widgets</db:code>. This will locate the <db:code>Qt6Widgets</db:code> module and provide the <db:code>Qt6::Widgets</db:code> targets we later link against.</db:para>
<db:para>Note that the application will still link against <db:code>Qt6::Core</db:code>, because <db:code>Qt6::Widgets</db:code> depends on it.</db:para>
<db:programlisting language="cpp">qt_standard_project_setup()
</db:programlisting>
<db:para>In addition to <db:code>CMAKE_AUTOMOC</db:code>, <db:link xlink:href="qt-standard-project-setup.xml">qt_standard_project_setup</db:link> sets the <db:code>CMAKE_AUTOUIC</db:code> variable to <db:code>ON</db:code>. This will automatically create rules to invoke Qt's <db:link xlink:href="uic.xml">User Interface Compiler (uic)</db:link> on <db:code>.ui</db:code> source files.</db:para>
<db:programlisting language="cpp">qt_add_executable(helloworld
    mainwindow.ui
    mainwindow.cpp
    main.cpp
)
</db:programlisting>
<db:para>We add a <db:link xlink:href="qtdesigner-index.xml">Qt Designer</db:link> file (<db:code>mainwindow.ui</db:code>) and its corresponding C++ source file (<db:code>mainwindow.cpp</db:code>) to the application target's sources.</db:para>
<db:programlisting language="cpp">target_link_libraries(helloworld PRIVATE Qt6::Widgets)
</db:programlisting>
<db:para>In the <db:code>target_link_libraries</db:code> command, we link against <db:code>Qt6::Widgets</db:code> instead of <db:code>Qt6::Core</db:code>.</db:para>
<db:programlisting language="cpp">set_target_properties(helloworld PROPERTIES
    WIN32_EXECUTABLE ON
    MACOSX_BUNDLE ON
)
</db:programlisting>
<db:para>Finally, we set properties on our application target with the following effects:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Prevent the creation of a console window on Windows.</db:para>
</db:listitem>
<db:listitem>
<db:para>Create an application bundle on macOS.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>See the <db:link xlink:href="https://cmake.org/cmake/help/latest/">CMake Documentation</db:link> for more information about these target properties.</db:para>
</db:section>
<db:section xml:id="structuring-projects">
<db:title>Structuring projects</db:title>
<db:para>Projects that contain more than just one target will benefit from a clear project file structure. We will use CMake's <db:link xlink:href="https://cmake.org/cmake/help/latest/command/add_subdirectory.html">subdirectory feature</db:link>.</db:para>
<db:para>As we plan to extend the project with more targets, we move the source files of the application into a subdirectory and create a new <db:code>CMakeLists.txt</db:code> in there.</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;project root&amp;gt;
├── CMakeLists.txt
└── src
    └── app
        ├── CMakeLists.txt
        ├── main.cpp
        ├── mainwindow.cpp
        ├── mainwindow.h
        └── mainwindow.ui
</db:programlisting>
<db:para>The top-level <db:code>CMakeLists.txt</db:code> contains the overall project setup, <db:code>find_package</db:code> and <db:code>add_subdirectory</db:code> calls:</db:para>
<db:programlisting language="cpp">cmake_minimum_required(VERSION 3.16)

project(helloworld VERSION 1.0.0 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(Qt6 REQUIRED COMPONENTS Widgets)
qt_standard_project_setup()

add_subdirectory(src/app)
</db:programlisting>
<db:para>Variables that are set in this file are visible in subdirectory project files.</db:para>
<db:para>The application's project file <db:code>src/app/CMakeLists.txt</db:code> contains the executable target:</db:para>
<db:programlisting language="cpp">qt_add_executable(helloworld
    mainwindow.ui
    mainwindow.cpp
    main.cpp
)

target_link_libraries(helloworld PRIVATE Qt6::Widgets)

set_target_properties(helloworld PROPERTIES
    WIN32_EXECUTABLE ON
    MACOSX_BUNDLE ON
)
</db:programlisting>
<db:para>Such a structure will make it easy to add more targets to the project such as libraries or unit tests.</db:para>
<db:note>
<db:para>Add your project build directory to the list of excluded directories of any anti-virus application that runs on your system.</db:para>
</db:note>
</db:section>
<db:section xml:id="building-libraries">
<db:title>Building libraries</db:title>
<db:para>As the project grows, you may want to turn parts of your application code into a library that is used by the application and possibly unit tests. This section shows how to create such a library.</db:para>
<db:para>Our application currently contains business logic directly in <db:code>main.cpp</db:code>. We extract the code into a new static library called <db:code>businesslogic</db:code> in the subdirectory <db:code>&quot;src/businesslogic&quot;</db:code> as explained in the <db:link xlink:href="cmake-get-started.xml#structuring-projects">previous section</db:link>.</db:para>
<db:para>For the sake of simplicity, the library consists of just one C++ source file and its corresponding header file that is included by the application's <db:code>main.cpp</db:code>:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;project root&amp;gt;
├── CMakeLists.txt
└── src
    ├── app
    │   ├── ...
    │   └── main.cpp
    └── businesslogic
        ├── CMakeLists.txt
        ├── businesslogic.cpp
        └── businesslogic.h
</db:programlisting>
<db:para>Let's have a look at the library's project file (<db:code>src/businesslogic/CMakeLists.txt</db:code>).</db:para>
<db:programlisting language="cpp">qt_add_library(businesslogic STATIC
    businesslogic.cpp
)
target_link_libraries(businesslogic PRIVATE Qt6::Core)
target_include_directories(businesslogic INTERFACE ${CMAKE_CURRENT_SOURCE_DIR})
</db:programlisting>
<db:para>Let's go through the content.</db:para>
<db:programlisting language="cpp">qt_add_library(businesslogic STATIC
    businesslogic.cpp
)
</db:programlisting>
<db:para>The <db:link xlink:href="https://cmake.org/cmake/help/latest/command/add_library.html">add_library</db:link> command creates the library <db:code>businesslogic</db:code>. Later, we will let the application link against this target.</db:para>
<db:para>The <db:code>STATIC</db:code> keyword denotes a static library. If we wanted to create a shared or dynamic library, we would use the <db:code>SHARED</db:code> keyword.</db:para>
<db:programlisting language="cpp">target_link_libraries(businesslogic PRIVATE Qt6::Core)
</db:programlisting>
<db:para>We have a static library and don't actually have to link other libraries. But as our library uses classes from <db:code>QtCore</db:code>, we add a link dependency to <db:code>Qt6::Core</db:code>. This pulls in the necessary <db:code>QtCore</db:code> include paths and preprocessor defines.</db:para>
<db:programlisting language="cpp">target_include_directories(businesslogic INTERFACE ${CMAKE_CURRENT_SOURCE_DIR})
</db:programlisting>
<db:para>The library API is defined in the header file <db:code>businesslogic/businesslogic.h</db:code>. By calling <db:link xlink:href="https://cmake.org/cmake/help/latest/command/target_include_directories.html">target_include_directories</db:link>, we make sure that the absolute path to the <db:code>businesslogic</db:code> directory is automatically added as an include path to all targets using our library.</db:para>
<db:para>This frees us in <db:code>main.cpp</db:code> from using relative paths to locate <db:code>businesslogic.h</db:code>. Instead, we can just write</db:para>
<db:programlisting language="cpp" role="bad">#include &amp;lt;businesslogic.h&amp;gt;
</db:programlisting>
<db:para>Last, we must add the library's subdirectory to the top-level project file:</db:para>
<db:programlisting language="cpp">add_subdirectory(src/app)
add_subdirectory(src/businesslogic)
</db:programlisting>
</db:section>
<db:section xml:id="using-libraries">
<db:title>Using libraries</db:title>
<db:para>To use the library we created in the <db:link xlink:href="cmake-get-started.xml#building-libraries">previous section</db:link>, we instruct CMake to link against it:</db:para>
<db:programlisting language="cpp">target_link_libraries(helloworld PRIVATE
    businesslogic
    Qt6::Widgets
)
</db:programlisting>
<db:para>This ensures that <db:code>businesslogic.h</db:code> is found when main.cpp is compiled. Furthermore, the businesslogic static library will become a part of the <db:code>helloworld</db:code> executable.</db:para>
<db:para>In CMake terms, the library <db:code>businesslogic</db:code> specifies <db:emphasis>usage requirements</db:emphasis> (the include path) that every consumer of our library (the application) has to satisfy. The <db:code>target_link_libraries</db:code> command takes care of that.</db:para>
</db:section>
<db:section xml:id="adding-resources">
<db:title>Adding resources</db:title>
<db:para>We want to display some images in our application, so we add them using the <db:link xlink:href="resources.xml">Qt Resource System</db:link>.</db:para>
<db:programlisting language="cpp">qt_add_resources(helloworld imageresources
    PREFIX &quot;/images&quot;
    FILES logo.png splashscreen.png
)
</db:programlisting>
<db:para>The <db:link xlink:href="qt-add-resources.xml">qt_add_resources</db:link> command automatically creates a Qt resource containing the referenced images. From the C++ source code, you can access the images by prepending the specified resource prefix:</db:para>
<db:programlisting language="cpp">logoLabel-&amp;gt;setPixmap(QPixmap(&quot;:/images/logo.png&quot;));
</db:programlisting>
<db:para>The <db:link xlink:href="qt-add-resources.xml">qt_add_resources</db:link> command takes as the first argument either a variable name or a target name. We recommend to use the target-based variant of this command as shown in the example above.</db:para>
</db:section>
<db:section xml:id="adding-translations">
<db:title>Adding translations</db:title>
<db:para>Translations of strings in a Qt project are encoded in <db:code>.ts</db:code> files. See <db:link xlink:href="internationalization.xml">Internationalization with Qt</db:link> for details.</db:para>
<db:para>To add <db:code>.ts</db:code> files to your project, use the <db:link xlink:href="qtlinguist-cmake-qt-add-translations.xml#qt6-add-translations">qt_add_translations</db:link> command.</db:para>
<db:para>The following example adds a German and a French translation file to the <db:code>helloworld</db:code> target:</db:para>
<db:programlisting language="cpp">qt_add_translations(helloworld
    TS_FILES helloworld_de.ts helloworld_fr.ts)
</db:programlisting>
<db:para>This creates build system rules to automatically generate <db:code>.qm</db:code> files from the <db:code>.ts</db:code> files. By default, the <db:code>.qm</db:code> files are embedded into a resource and are accessible under the <db:code>&quot;/i18n&quot;</db:code> resource prefix.</db:para>
<db:para>To update the entries in the <db:code>.ts</db:code> file, build the <db:code>update_translations</db:code> target:</db:para>
<db:programlisting language="cpp" role="bad">$ cmake --build . --target update_translations
</db:programlisting>
<db:para>To trigger the generation of the <db:code>.qm</db:code> files manually, build the <db:code>release_translations</db:code> target:</db:para>
<db:programlisting language="cpp" role="bad">$ cmake --build . --target release_translations
</db:programlisting>
<db:para>For more information about how to influence the handling of <db:code>.ts</db:code> files and the embedding into a resource, see the <db:link xlink:href="qtlinguist-cmake-qt-add-translations.xml#qt6-add-translations">qt_add_translations documentation</db:link>.</db:para>
<db:para>The <db:link xlink:href="qtlinguist-cmake-qt-add-translations.xml#qt6-add-translations">qt_add_translations</db:link> command is a convenience wrapper. For more fine-grained control of how <db:code>.ts</db:code> files and <db:code>.qm</db:code> files are handled, use the underlying commands <db:link xlink:href="qtlinguist-cmake-qt-add-lupdate.xml#qt6-add-lupdate">qt_add_lupdate</db:link> and <db:link xlink:href="qtlinguist-cmake-qt-add-lrelease.xml#qt6-add-lrelease">qt_add_lrelease</db:link>.</db:para>
</db:section>
<db:section xml:id="further-reading">
<db:title>Further reading</db:title>
<db:para>The official <db:link xlink:href="https://cmake.org/cmake/help/latest/">CMake Documentation</db:link> is an invaluable source for working with CMake.</db:para>
<db:para>The official <db:link xlink:href="https://cmake.org/cmake/help/latest/guide/tutorial/">CMake Tutorial</db:link> covers common build system tasks.</db:para>
<db:para>The book <db:link xlink:href="https://crascit.com/professional-cmake/">Professional CMake: A Practical Guide</db:link> provides a great introduction to the most relevant CMake features.</db:para>
</db:section>
</db:article>
