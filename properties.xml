<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>The Property System</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An overview of Qt's property system.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt provides a sophisticated property system similar to the ones supplied by some compiler vendors. However, as a compiler- and platform-independent library, Qt does not rely on non-standard compiler features like __property or [property]. The Qt solution works with <db:emphasis>any</db:emphasis> standard C++ compiler on every platform Qt supports. It is based on the <db:link xlink:href="metaobjects.xml">Meta-Object System</db:link> that also provides inter-object communication via <db:link xlink:href="signalsandslots.xml">signals and slots</db:link>.</db:para>
<db:section xml:id="requirements-for-declaring-properties">
<db:title>Requirements for Declaring Properties</db:title>
<db:para>To declare a property, use the <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link>() macro in a class that inherits <db:link xlink:href="qobject.xml">QObject</db:link>.</db:para>
<db:programlisting language="cpp">Q_PROPERTY(type name
           (READ getFunction [WRITE setFunction] |
            MEMBER memberName [(READ getFunction | WRITE setFunction)])
           [RESET resetFunction]
           [NOTIFY notifySignal]
           [REVISION int]
           [DESIGNABLE bool]
           [SCRIPTABLE bool]
           [STORED bool]
           [USER bool]
           [CONSTANT]
           [FINAL])
</db:programlisting>
<db:para>Here are some typical examples of property declarations taken from class <db:link xlink:href="qwidget.xml">QWidget</db:link>.</db:para>
<db:programlisting language="cpp">Q_PROPERTY(bool focus READ hasFocus)
Q_PROPERTY(bool enabled READ isEnabled WRITE setEnabled)
Q_PROPERTY(QCursor cursor READ cursor WRITE setCursor RESET unsetCursor)
</db:programlisting>
<db:para>Here is an example showing how to export member variables as Qt properties using the MEMBER keyword. Note that a NOTIFY signal must be specified to allow QML property bindings.</db:para>
<db:programlisting language="cpp">    Q_PROPERTY(QColor color MEMBER m_color NOTIFY colorChanged)
    Q_PROPERTY(qreal spacing MEMBER m_spacing NOTIFY spacingChanged)
    Q_PROPERTY(QString text MEMBER m_text NOTIFY textChanged)
    ...
signals:
    void colorChanged();
    void spacingChanged();
    void textChanged(const QString &amp;amp;newText);

private:
    QColor  m_color;
    qreal   m_spacing;
    QString m_text;
</db:programlisting>
<db:para>A property behaves like a class data member, but it has additional features accessible through the <db:link xlink:href="metaobjects.xml">Meta-Object System</db:link>.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A READ accessor function is required if no MEMBER variable was specified. It is for reading the property value. Ideally, a const function is used for this purpose, and it must return either the property's type or a const reference to that type. e.g., <db:link xlink:href="qwidget.xml#focus-prop">QWidget::focus</db:link> is a read-only property with READ function, <db:link xlink:href="qwidget.xml#focus-prop">QWidget::hasFocus</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>A WRITE accessor function is optional. It is for setting the property value. It must return void and must take exactly one argument, either of the property's type or a pointer or reference to that type. e.g., <db:link xlink:href="qwidget.xml#enabled-prop">QWidget::enabled</db:link> has the WRITE function <db:link xlink:href="qwidget.xml#enabled-prop">QWidget::setEnabled</db:link>(). Read-only properties do not need WRITE functions. e.g., <db:link xlink:href="qwidget.xml#focus-prop">QWidget::focus</db:link> has no WRITE function.</db:para>
</db:listitem>
<db:listitem>
<db:para>A MEMBER variable association is required if no READ accessor function is specified. This makes the given member variable readable and writable without the need of creating READ and WRITE accessor functions. It's still possible to use READ or WRITE accessor functions in addition to MEMBER variable association (but not both), if you need to control the variable access.</db:para>
</db:listitem>
<db:listitem>
<db:para>A RESET function is optional. It is for setting the property back to its context specific default value. e.g., <db:link xlink:href="qwidget.xml#cursor-prop">QWidget::cursor</db:link> has the typical READ and WRITE functions, <db:link xlink:href="qwidget.xml#cursor-prop">QWidget::cursor</db:link>() and <db:link xlink:href="qwidget.xml#cursor-prop">QWidget::setCursor</db:link>(), and it also has a RESET function, <db:link xlink:href="qwidget.xml#cursor-prop">QWidget::unsetCursor</db:link>(), since no call to <db:link xlink:href="qwidget.xml#cursor-prop">QWidget::setCursor</db:link>() can mean <db:emphasis>reset to the context specific cursor</db:emphasis>. The RESET function must return void and take no parameters.</db:para>
</db:listitem>
<db:listitem>
<db:para>A NOTIFY signal is optional. If defined, it should specify one existing signal in that class that is emitted whenever the value of the property changes. NOTIFY signals for MEMBER variables must take zero or one parameter, which must be of the same type as the property. The parameter will take the new value of the property. The NOTIFY signal should only be emitted when the property has really been changed, to avoid bindings being unnecessarily re-evaluated in QML, for example. Qt emits automatically that signal when needed for MEMBER properties that do not have an explicit setter.</db:para>
</db:listitem>
<db:listitem>
<db:para>A REVISION number is optional. If included, it defines the property and its notifier signal to be used in a particular revision of the API (usually for exposure to QML). If not included, it defaults to 0.</db:para>
</db:listitem>
<db:listitem>
<db:para>The DESIGNABLE attribute indicates whether the property should be visible in the property editor of GUI design tool (e.g., <db:link xlink:href="qtdesigner-manual.xml">Qt Designer</db:link>). Most properties are DESIGNABLE (default true). Instead of true or false, you can specify a boolean member function.</db:para>
</db:listitem>
<db:listitem>
<db:para>The SCRIPTABLE attribute indicates whether this property should be accessible by a scripting engine (default true). Instead of true or false, you can specify a boolean member function.</db:para>
</db:listitem>
<db:listitem>
<db:para>The STORED attribute indicates whether the property should be thought of as existing on its own or as depending on other values. It also indicates whether the property value must be saved when storing the object's state. Most properties are STORED (default true), but e.g., <db:link xlink:href="qwidget.xml#minimumWidth-prop">QWidget::minimumWidth</db:link>() has STORED false, because its value is just taken from the width component of property <db:link xlink:href="qwidget.xml#minimumSize-prop">QWidget::minimumSize</db:link>(), which is a <db:link xlink:href="qsize.xml">QSize</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>The USER attribute indicates whether the property is designated as the user-facing or user-editable property for the class. Normally, there is only one USER property per class (default false). e.g., <db:link xlink:href="qabstractbutton.xml#checked-prop">QAbstractButton::checked</db:link> is the user editable property for (checkable) buttons. Note that <db:link xlink:href="qitemdelegate.xml">QItemDelegate</db:link> gets and sets a widget's USER property.</db:para>
</db:listitem>
<db:listitem>
<db:para>The presence of the CONSTANT attribute indicates that the property value is constant. For a given object instance, the READ method of a constant property must return the same value every time it is called. This constant value may be different for different instances of the object. A constant property cannot have a WRITE method or a NOTIFY signal.</db:para>
</db:listitem>
<db:listitem>
<db:para>The presence of the FINAL attribute indicates that the property will not be overridden by a derived class. This can be used for performance optimizations in some cases, but is not enforced by moc. Care must be taken never to override a FINAL property.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The READ, WRITE, and RESET functions can be inherited. They can also be virtual. When they are inherited in classes where multiple inheritance is used, they must come from the first inherited class.</db:para>
<db:para>The property type can be any type supported by <db:link xlink:href="qvariant.xml">QVariant</db:link>, or it can be a user-defined type. In this example, class <db:link xlink:href="qdate.xml">QDate</db:link> is considered to be a user-defined type.</db:para>
<db:programlisting language="cpp">Q_PROPERTY(QDate date READ getDate WRITE setDate)
</db:programlisting>
<db:para>Because <db:link xlink:href="qdate.xml">QDate</db:link> is user-defined, you must include the &lt;QDate&gt; header file with the property declaration.</db:para>
<db:para>For historical reasons, <db:code role="parameter">QMap</db:code> and <db:code role="parameter">QList</db:code> as property types are synonym of <db:code role="parameter">QVariantMap</db:code> and <db:code role="parameter">QVariantList</db:code>.</db:para>
</db:section>
<db:section xml:id="reading-and-writing-properties-with-the-meta-object-system">
<db:title>Reading and Writing Properties with the Meta-Object System</db:title>
<db:para>A property can be read and written using the generic functions <db:link xlink:href="qobject.xml#property">QObject::property</db:link>() and <db:link xlink:href="qobject.xml#setProperty">QObject::setProperty</db:link>(), without knowing anything about the owning class except the property's name. In the code snippet below, the call to <db:link xlink:href="qabstractbutton.xml#down-prop">QAbstractButton::setDown</db:link>() and the call to <db:link xlink:href="qobject.xml#setProperty">QObject::setProperty</db:link>() both set property &quot;down&quot;.</db:para>
<db:programlisting language="cpp">QPushButton *button = new QPushButton;
QObject *object = button;

button-&amp;gt;setDown(true);
object-&amp;gt;setProperty(&quot;down&quot;, true);
</db:programlisting>
<db:para>Accessing a property through its WRITE accessor is the better of the two, because it is faster and gives better diagnostics at compile time, but setting the property this way requires that you know about the class at compile time. Accessing properties by name lets you access classes you don't know about at compile time. You can <db:emphasis>discover</db:emphasis> a class's properties at run time by querying its <db:link xlink:href="qobject.xml">QObject</db:link>, <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link>, and <db:link xlink:href="qmetaproperty.xml">QMetaProperties</db:link>.</db:para>
<db:programlisting language="cpp">QObject *object = ...
const QMetaObject *metaobject = object-&amp;gt;metaObject();
int count = metaobject-&amp;gt;propertyCount();
for (int i=0; i&amp;lt;count; ++i) {
    QMetaProperty metaproperty = metaobject-&amp;gt;property(i);
    const char *name = metaproperty.name();
    QVariant value = object-&amp;gt;property(name);
    ...
}
</db:programlisting>
<db:para>In the above snippet, <db:link xlink:href="qmetaobject.xml#property">QMetaObject::property</db:link>() is used to get <db:link xlink:href="qmetaproperty.xml">metadata</db:link> about each property defined in some unknown class. The property name is fetched from the metadata and passed to <db:link xlink:href="qobject.xml#property">QObject::property</db:link>() to get the <db:link xlink:href="qvariant.xml">value</db:link> of the property in the current <db:link xlink:href="qobject.xml">object</db:link>.</db:para>
</db:section>
<db:section xml:id="a-simple-example">
<db:title>A Simple Example</db:title>
<db:para>Suppose we have a class MyClass, which is derived from <db:link xlink:href="qobject.xml">QObject</db:link> and which uses the <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro in its private section. We want to declare a property in MyClass to keep track of a priority value. The name of the property will be <db:emphasis>priority</db:emphasis>, and its type will be an enumeration type named <db:emphasis>Priority</db:emphasis>, which is defined in MyClass.</db:para>
<db:para>We declare the property with the <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link>() macro in the private section of the class. The required READ function is named priority, and we include a WRITE function named setPriority. The enumeration type must be registered with the <db:link xlink:href="metaobjects.xml">Meta-Object System</db:link> using the <db:link xlink:href="qobject.xml#Q_ENUM">Q_ENUM</db:link>() macro. Registering an enumeration type makes the enumerator names available for use in calls to <db:link xlink:href="qobject.xml#setProperty">QObject::setProperty</db:link>(). We must also provide our own declarations for the READ and WRITE functions. The declaration of MyClass then might look like this:</db:para>
<db:programlisting language="cpp">class MyClass : public QObject
{
    Q_OBJECT
    Q_PROPERTY(Priority priority READ priority WRITE setPriority NOTIFY priorityChanged)

public:
    MyClass(QObject *parent = 0);
    ~MyClass();

    enum Priority { High, Low, VeryHigh, VeryLow };
    Q_ENUM(Priority)

    void setPriority(Priority priority)
    {
        m_priority = priority;
        emit priorityChanged(priority);
    }
    Priority priority() const
    { return m_priority; }

signals:
    void priorityChanged(Priority);

private:
    Priority m_priority;
};
</db:programlisting>
<db:para>The READ function is const and returns the property type. The WRITE function returns void and has exactly one parameter of the property type. The meta-object compiler enforces these requirements.</db:para>
<db:para>Given a pointer to an instance of MyClass or a pointer to a <db:link xlink:href="qobject.xml">QObject</db:link> that is an instance of MyClass, we have two ways to set its priority property:</db:para>
<db:programlisting language="cpp">MyClass *myinstance = new MyClass;
QObject *object = myinstance;

myinstance-&amp;gt;setPriority(MyClass::VeryHigh);
object-&amp;gt;setProperty(&quot;priority&quot;, &quot;VeryHigh&quot;);
</db:programlisting>
<db:para>In the example, the enumeration type that is the property type is declared in MyClass and registered with the <db:link xlink:href="metaobjects.xml">Meta-Object System</db:link> using the <db:link xlink:href="qobject.xml#Q_ENUM">Q_ENUM</db:link>() macro. This makes the enumeration values available as strings for use as in the call to <db:link xlink:href="qobject.xml#setProperty">setProperty</db:link>(). Had the enumeration type been declared in another class, its fully qualified name (i.e., OtherClass::Priority) would be required, and that other class would also have to inherit <db:link xlink:href="qobject.xml">QObject</db:link> and register the enumeration type there using the <db:link xlink:href="qobject.xml#Q_ENUM">Q_ENUM</db:link>() macro.</db:para>
<db:para>A similar macro, <db:link xlink:href="qobject.xml#Q_FLAG">Q_FLAG</db:link>(), is also available. Like <db:link xlink:href="qobject.xml#Q_ENUM">Q_ENUM</db:link>(), it registers an enumeration type, but it marks the type as being a set of <db:emphasis>flags</db:emphasis>, i.e. values that can be OR'd together. An I/O class might have enumeration values Read and Write and then <db:link xlink:href="qobject.xml#setProperty">QObject::setProperty</db:link>() could accept Read | Write. <db:link xlink:href="qobject.xml#Q_FLAG">Q_FLAG</db:link>() should be used to register this enumeration type.</db:para>
</db:section>
<db:section xml:id="dynamic-properties">
<db:title>Dynamic Properties</db:title>
<db:para><db:link xlink:href="qobject.xml#setProperty">QObject::setProperty</db:link>() can also be used to add <db:emphasis>new</db:emphasis> properties to an instance of a class at runtime. When it is called with a name and a value, if a property with the given name exists in the <db:link xlink:href="qobject.xml">QObject</db:link>, and if the given value is compatible with the property's type, the value is stored in the property, and true is returned. If the value is <db:emphasis>not</db:emphasis> compatible with the property's type, the property is <db:emphasis>not</db:emphasis> changed, and false is returned. But if the property with the given name doesn't exist in the <db:link xlink:href="qobject.xml">QObject</db:link> (i.e., if it wasn't declared with <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link>()), a new property with the given name and value is automatically added to the <db:link xlink:href="qobject.xml">QObject</db:link>, but false is still returned. This means that a return of false can't be used to determine whether a particular property was actually set, unless you know in advance that the property already exists in the <db:link xlink:href="qobject.xml">QObject</db:link>.</db:para>
<db:para>Note that <db:emphasis>dynamic</db:emphasis> properties are added on a per instance basis, i.e., they are added to <db:link xlink:href="qobject.xml">QObject</db:link>, not <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link>. A property can be removed from an instance by passing the property name and an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link> value to <db:link xlink:href="qobject.xml#setProperty">QObject::setProperty</db:link>(). The default constructor for <db:link xlink:href="qvariant.xml">QVariant</db:link> constructs an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>Dynamic properties can be queried with <db:link xlink:href="qobject.xml#property">QObject::property</db:link>(), just like properties declared at compile time with <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link>().</db:para>
</db:section>
<db:section xml:id="properties-and-custom-types">
<db:title>Properties and Custom Types</db:title>
<db:para>Custom types used by properties need to be registered using the <db:link xlink:href="qmetatype.xml#Q_DECLARE_METATYPE">Q_DECLARE_METATYPE</db:link>() macro so that their values can be stored in <db:link xlink:href="qvariant.xml">QVariant</db:link> objects. This makes them suitable for use with both static properties declared using the <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link>() macro in class definitions and dynamic properties created at run-time.</db:para>
</db:section>
<db:section xml:id="adding-additional-information-to-a-class">
<db:title>Adding Additional Information to a Class</db:title>
<db:para>Connected to the property system is an additional macro, <db:link xlink:href="qobject.xml#Q_CLASSINFO">Q_CLASSINFO</db:link>(), that can be used to attach additional <db:emphasis>name</db:emphasis>–<db:emphasis>value</db:emphasis> pairs to a class's meta-object, for example:</db:para>
<db:programlisting language="cpp">Q_CLASSINFO(&quot;Version&quot;, &quot;3.0.0&quot;)
</db:programlisting>
<db:para>Like other meta-data, class information is accessible at run-time through the meta-object; see <db:link xlink:href="qmetaobject.xml#classInfo">QMetaObject::classInfo</db:link>() for details.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="metaobjects.xml">Meta-Object System</db:link></db:member>
<db:member><db:link xlink:href="signalsandslots.xml">Signals and Slots</db:link></db:member>
<db:member><db:link xlink:href="qmetatype.xml#Q_DECLARE_METATYPE">Q_DECLARE_METATYPE</db:link>()</db:member>
<db:member><db:link xlink:href="qmetatype.xml">QMetaType</db:link></db:member>
<db:member><db:link xlink:href="qvariant.xml">QVariant</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
