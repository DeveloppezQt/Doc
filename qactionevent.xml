<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QActionEvent Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qactionevent.xml">QActionEvent</db:link> class provides an event that is generated when a <db:link xlink:href="qaction.xml">QAction</db:link> is added, removed, or changed.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QActionEvent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qevent.xml" xlink:role="class">QEvent</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QActionEvent is part of <db:simplelist><db:member>events</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Actions can be added to widgets using <db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>(). This generates an <db:link xlink:href="qevent.xml#Type-enum">ActionAdded</db:link> event, which you can handle to provide custom behavior. For example, <db:link xlink:href="qtoolbar.xml">QToolBar</db:link> reimplements <db:link xlink:href="qwidget.xml#actionEvent">QWidget::actionEvent</db:link>() to create <db:link xlink:href="qtoolbutton.xml">QToolButton</db:link>s for the actions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml">QAction</db:link></db:member>
<db:member><db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#removeAction">QWidget::removeAction</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#actions">QWidget::actions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QActionEvent">
<db:title>QActionEvent::QActionEvent(int <db:emphasis>type</db:emphasis>, QAction *<db:emphasis>action</db:emphasis>, QAction *<db:emphasis>before</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs an action event. The <db:code role="parameter">type</db:code> can be <db:link xlink:href="qevent.xml#Type-enum">ActionChanged</db:link>, <db:link xlink:href="qevent.xml#Type-enum">ActionAdded</db:link>, or <db:link xlink:href="qevent.xml#Type-enum">ActionRemoved</db:link>.</db:para>
<db:para><db:code role="parameter">action</db:code> is the action that is changed, added, or removed. If <db:code role="parameter">type</db:code> is ActionAdded, the action is to be inserted before the action <db:code role="parameter">before</db:code>. If <db:code role="parameter">before</db:code> is 0, the action is appended.</db:para>
</db:section>
<db:section xml:id="action">
<db:title>QAction *QActionEvent::action() const</db:title>
<db:para>Returns the action that is changed, added, or removed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qactionevent.xml#before">before</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="before">
<db:title>QAction *QActionEvent::before() const</db:title>
<db:para>If <db:link xlink:href="qevent.xml#type">type</db:link>() is <db:link xlink:href="qevent.xml#Type-enum">ActionAdded</db:link>, returns the action that should appear before <db:link xlink:href="qactionevent.xml#action">action</db:link>(). If this function returns 0, the action should be appended to already existing actions on the same widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qactionevent.xml#action">action</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#actions">QWidget::actions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
