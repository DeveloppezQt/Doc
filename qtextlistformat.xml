<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextListFormat Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtextlistformat.xml">QTextListFormat</db:link> class provides formatting information for lists in a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextListFormat</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qtextformat.xml" xlink:role="class">QTextFormat</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextListFormat is part of <db:simplelist><db:member><db:link xlink:href="richtext-processing.xml">Rich Text Processing APIs</db:link></db:member><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A list is composed of one or more items, represented as text blocks. The list's format specifies the appearance of items in the list. In particular, it determines the indentation and the style of each item.</db:para>
<db:para>The indentation of the items is an integer value that causes each item to be offset from the left margin by a certain amount. This value is read with <db:link xlink:href="qtextlistformat.xml#indent">indent</db:link>() and set with <db:link xlink:href="qtextlistformat.xml#setIndent">setIndent</db:link>().</db:para>
<db:para>The style used to decorate each item is set with <db:link xlink:href="qtextlistformat.xml#setStyle">setStyle</db:link>() and can be read with the <db:link xlink:href="qtextlistformat.xml#style">style</db:link>() function. The style controls the type of bullet points and numbering scheme used for items in the list. Note that lists that use the decimal numbering scheme begin counting at 1 rather than 0.</db:para>
<db:para>Style properties can be set to further configure the appearance of list items; for example, the ListNumberPrefix and ListNumberSuffix properties can be used to customize the numbers used in an ordered list so that they appear as (1), (2), (3), etc.:</db:para>
<db:programlisting language="cpp">QTextListFormat listFormat;

listFormat.setStyle(QTextListFormat::ListDecimal);
listFormat.setNumberPrefix(&quot;(&quot;);
listFormat.setNumberSuffix(&quot;)&quot;);

cursor.insertList(listFormat);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlist.xml">QTextList</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Style-enum">
<db:title>enum QTextListFormat::Style</db:title>
<db:para>This enum describes the symbols used to decorate list items:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextlistformat.xml">QTextListFormat</db:link></db:emphasis>::ListDisc</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>a filled circle</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextlistformat.xml">QTextListFormat</db:link></db:emphasis>::ListCircle</db:code></db:para>
</db:td>
<db:td><db:code>-2</db:code></db:td>
<db:td>
<db:para>an empty circle</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextlistformat.xml">QTextListFormat</db:link></db:emphasis>::ListSquare</db:code></db:para>
</db:td>
<db:td><db:code>-3</db:code></db:td>
<db:td>
<db:para>a filled square</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextlistformat.xml">QTextListFormat</db:link></db:emphasis>::ListDecimal</db:code></db:para>
</db:td>
<db:td><db:code>-4</db:code></db:td>
<db:td>
<db:para>decimal values in ascending order</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextlistformat.xml">QTextListFormat</db:link></db:emphasis>::ListLowerAlpha</db:code></db:para>
</db:td>
<db:td><db:code>-5</db:code></db:td>
<db:td>
<db:para>lower case Latin characters in alphabetical order</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextlistformat.xml">QTextListFormat</db:link></db:emphasis>::ListUpperAlpha</db:code></db:para>
</db:td>
<db:td><db:code>-6</db:code></db:td>
<db:td>
<db:para>upper case Latin characters in alphabetical order</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextlistformat.xml">QTextListFormat</db:link></db:emphasis>::ListLowerRoman</db:code></db:para>
</db:td>
<db:td><db:code>-7</db:code></db:td>
<db:td>
<db:para>lower case roman numerals (supports up to 4999 items only)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextlistformat.xml">QTextListFormat</db:link></db:emphasis>::ListUpperRoman</db:code></db:para>
</db:td>
<db:td><db:code>-8</db:code></db:td>
<db:td>
<db:para>upper case roman numerals (supports up to 4999 items only)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextListFormat">
<db:title>QTextListFormat::QTextListFormat()</db:title>
<db:para>Constructs a new list format object.</db:para>
</db:section>
<db:section xml:id="indent">
<db:title>int QTextListFormat::indent() const</db:title>
<db:para>Returns the list format's indentation. The indentation is multiplied by the <db:link xlink:href="qtextdocument.xml#indentWidth-prop">QTextDocument::indentWidth</db:link> property to get the effective indent in pixels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlistformat.xml#setIndent">setIndent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QTextListFormat::isValid() const</db:title>
<db:para>Returns <db:code>true</db:code> if this list format is valid; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="numberPrefix">
<db:title>[since 4.8] QString QTextListFormat::numberPrefix() const</db:title>
<db:para>Returns the list format's number prefix.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlistformat.xml#setNumberPrefix">setNumberPrefix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="numberSuffix">
<db:title>[since 4.8] QString QTextListFormat::numberSuffix() const</db:title>
<db:para>Returns the list format's number suffix.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlistformat.xml#setNumberSuffix">setNumberSuffix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIndent">
<db:title>void QTextListFormat::setIndent(int <db:emphasis>indentation</db:emphasis>)</db:title>
<db:para>Sets the list format's <db:code role="parameter">indentation</db:code>. The indentation is multiplied by the <db:link xlink:href="qtextdocument.xml#indentWidth-prop">QTextDocument::indentWidth</db:link> property to get the effective indent in pixels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlistformat.xml#indent">indent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNumberPrefix">
<db:title>[since 4.8] void QTextListFormat::setNumberPrefix(const QString &amp;<db:emphasis>numberPrefix</db:emphasis>)</db:title>
<db:para>Sets the list format's number prefix to the string specified by <db:code role="parameter">numberPrefix</db:code>. This can be used with all sorted list types. It does not have any effect on unsorted list types.</db:para>
<db:para>The default prefix is an empty string.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlistformat.xml#numberPrefix">numberPrefix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNumberSuffix">
<db:title>[since 4.8] void QTextListFormat::setNumberSuffix(const QString &amp;<db:emphasis>numberSuffix</db:emphasis>)</db:title>
<db:para>Sets the list format's number suffix to the string specified by <db:code role="parameter">numberSuffix</db:code>. This can be used with all sorted list types. It does not have any effect on unsorted list types.</db:para>
<db:para>The default suffix is &quot;.&quot;.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlistformat.xml#numberSuffix">numberSuffix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStyle">
<db:title>void QTextListFormat::setStyle(QTextListFormat::Style <db:emphasis>style</db:emphasis>)</db:title>
<db:para>Sets the list format's <db:code role="parameter">style</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlistformat.xml#style">style</db:link>()</db:member>
<db:member><db:link xlink:href="qtextlistformat.xml#Style-enum">Style</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="style">
<db:title>QTextListFormat::Style QTextListFormat::style() const</db:title>
<db:para>Returns the list format's style.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlistformat.xml#setStyle">setStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qtextlistformat.xml#Style-enum">Style</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
