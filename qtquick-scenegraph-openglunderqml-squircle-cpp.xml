<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Scene Graph - OpenGL Under QML</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to render OpenGL under a Qt Quick scene.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the demonstration applications of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL21$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file. Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** As a special exception, The Qt Company gives you certain additional
** rights. These rights are described in The Qt Company LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;squircle.h&quot;

#include &lt;QtQuick/qquickwindow.h&gt;
#include &lt;QtGui/QOpenGLShaderProgram&gt;
#include &lt;QtGui/QOpenGLContext&gt;

Squircle::Squircle()
    : m_t(0)
    , m_renderer(0)
{
    connect(this, SIGNAL(windowChanged(QQuickWindow*)), this, SLOT(handleWindowChanged(QQuickWindow*)));
}

void Squircle::setT(qreal t)
{
    if (t == m_t)
        return;
    m_t = t;
    emit tChanged();
    if (window())
        window()-&gt;update();
}

void Squircle::handleWindowChanged(QQuickWindow *win)
{
    if (win) {
        connect(win, SIGNAL(beforeSynchronizing()), this, SLOT(sync()), Qt::DirectConnection);
        connect(win, SIGNAL(sceneGraphInvalidated()), this, SLOT(cleanup()), Qt::DirectConnection);
        // If we allow QML to do the clearing, they would clear what we paint
        // and nothing would show.
        win-&gt;setClearBeforeRendering(false);
    }
}

void Squircle::cleanup()
{
    if (m_renderer) {
        delete m_renderer;
        m_renderer = 0;
    }
}

SquircleRenderer::~SquircleRenderer()
{
    delete m_program;
}

void Squircle::sync()
{
    if (!m_renderer) {
        m_renderer = new SquircleRenderer();
        connect(window(), SIGNAL(beforeRendering()), m_renderer, SLOT(paint()), Qt::DirectConnection);
    }
    m_renderer-&gt;setViewportSize(window()-&gt;size() * window()-&gt;devicePixelRatio());
    m_renderer-&gt;setT(m_t);
}

void SquircleRenderer::paint()
{
    if (!m_program) {
        initializeOpenGLFunctions();

        m_program = new QOpenGLShaderProgram();
        m_program-&gt;addShaderFromSourceCode(QOpenGLShader::Vertex,
                                           &quot;attribute highp vec4 vertices;&quot;
                                           &quot;varying highp vec2 coords;&quot;
                                           &quot;void main() {&quot;
                                           &quot;    gl_Position = vertices;&quot;
                                           &quot;    coords = vertices.xy;&quot;
                                           &quot;}&quot;);
        m_program-&gt;addShaderFromSourceCode(QOpenGLShader::Fragment,
                                           &quot;uniform lowp float t;&quot;
                                           &quot;varying highp vec2 coords;&quot;
                                           &quot;void main() {&quot;
                                           &quot;    lowp float i = 1. - (pow(abs(coords.x), 4.) + pow(abs(coords.y), 4.));&quot;
                                           &quot;    i = smoothstep(t - 0.8, t + 0.8, i);&quot;
                                           &quot;    i = floor(i * 20.) / 20.;&quot;
                                           &quot;    gl_FragColor = vec4(coords * .5 + .5, i, i);&quot;
                                           &quot;}&quot;);

        m_program-&gt;bindAttributeLocation(&quot;vertices&quot;, 0);
        m_program-&gt;link();

    }
    m_program-&gt;bind();

    m_program-&gt;enableAttributeArray(0);

    float values[] = {
        -1, -1,
        1, -1,
        -1, 1,
        1, 1
    };
    m_program-&gt;setAttributeArray(0, GL_FLOAT, values, 2);
    m_program-&gt;setUniformValue(&quot;t&quot;, (float) m_t);

    glViewport(0, 0, m_viewportSize.width(), m_viewportSize.height());

    glDisable(GL_DEPTH_TEST);

    glClearColor(0, 0, 0, 1);
    glClear(GL_COLOR_BUFFER_BIT);

    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE);

    glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);

    m_program-&gt;disableAttributeArray(0);
    m_program-&gt;release();
}

</db:programlisting>
</db:article>
