<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Publishing to Google Play</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="android-3rdparty-libs.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Third-party Android Libraries"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="android-emojis.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Supporting Google Emoji Font Policy"/></db:extendedlink>
<db:abstract>
<db:para>Provides instructions to prepare your application for publishing.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:link xlink:href="android.xml">Qt for Android</db:link> provides a complete solution to develop, build, and package your applications for Android. Most of these tasks, especially packaging and deployment, are handled by Qt Creator, providing a rich developer experience.</db:para>
<db:para>Every time you run the application using Qt Creator, an Android Application Package (APK) is created and deployed onto the target of your choice (device or emulator). With a few minor changes to packaging settings, you can publish your application on Google Play.</db:para>
<db:section xml:id="building-the-app">
<db:title>Building the App</db:title>
<db:para>Once your app has been developed and you want to move forward to publish it to Google Play, follow these instructions to create an .apk or .aab that can go live on Google Play:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Open your project with Qt Creator choosing a Release Build.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Projects</db:guilabel> &gt; <db:guilabel>Build</db:guilabel> &gt; <db:guilabel>Build Android APK</db:guilabel> &gt; <db:guilabel>Create Templates</db:guilabel> to create the Android package template files such as AndroidManifest.xml, which is the main file of concern here.</db:para>
</db:listitem>
<db:listitem>
<db:para>Check for the following settings in AndroidManifest.xml:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Set <db:guilabel>Application name</db:guilabel> and <db:guilabel>Application icon</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Set the app's name using android:label under the manifest's application section.</db:para>
</db:listitem>
<db:listitem>
<db:para>Set the app's version code and name via CMake's properties <db:link xlink:href="cmake-target-property-qt-android-version-name.xml">QT_ANDROID_VERSION_NAME</db:link> and <db:link xlink:href="cmake-target-property-qt-android-version-code.xml">QT_ANDROID_VERSION_CODE</db:link>. For qmake, use <db:link xlink:href="qmake-variable-reference.xml#android-version-name">ANDROID_VERSION_NAME</db:link> and <db:link xlink:href="qmake-variable-reference.xml#android-version-code">ANDROID_VERSION_CODE</db:link>. For qmake, we will use <db:link xlink:href="qmake-variable-reference.xml#android-version-code">ANDROID_VERSION_CODE</db:link> below, to work around publishing multi-ABIs apps.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>See <db:link xlink:href="android-manifest-file-configuration.xml">Qt Android Manifest File Configuration</db:link> for more information.</db:para>
</db:listitem>
<db:listitem>
<db:para>Set minimum and target SDK versions according to your app's needs. This can be done using the CMake properties <db:link xlink:href="cmake-target-property-qt-android-target-sdk-version.xml">QT_ANDROID_TARGET_SDK_VERSION</db:link> and <db:link xlink:href="cmake-target-property-qt-android-min-sdk-version.xml">QT_ANDROID_MIN_SDK_VERSION</db:link>. Or for qmake <db:link xlink:href="qmake-variable-reference.xml#android-target-sdk-version">ANDROID_TARGET_SDK_VERSION</db:link> <db:link xlink:href="qmake-variable-reference.xml#android-min-sdk-version">ANDROID_MIN_SDK_VERSION</db:link>.</db:para>
<db:note>
<db:para>As before with Qt 5.15, you can specify these settings in the AndroidManifest.xml. Be aware that the CMake and qmake properties mentioned above will override these if set there. See <db:link xlink:href="https://developer.android.com/studio/publish/versioning.html#appversioning">Android: App Versioning</db:link> for more information on setting these in build.gradle.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>Set up a <db:link xlink:href="https://developer.android.com/training/articles/keystore">keystore</db:link> to sign your package. You can create a new keystore if you do not have one. For more information, see <db:link xlink:href="http://doc.qt.io/qtcreator/creator-deploying-android.html#specifying-settings-for-packages">Signing Android Packages</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Locate the generated package:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>For APK packages, locate the .apk package at:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;build_path&amp;gt;/android-build/build/outputs/apk/release/android-build-release.apk
</db:programlisting>
<db:note>
<db:para>In Qt Creator, select <db:guilabel>Projects</db:guilabel> &gt; <db:guilabel>Build</db:guilabel> &gt; <db:guilabel>Build Steps</db:guilabel> &gt; <db:guilabel>Build Android APK</db:guilabel> &gt; <db:guilabel>Open package location after build</db:guilabel> to build the application's .apk and open the directory containing the package.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>For AAB packages, select <db:guilabel>Projects</db:guilabel> &gt; <db:guilabel>Build</db:guilabel> &gt; <db:guilabel>Build Steps</db:guilabel> &gt; <db:guilabel>Build Android APK</db:guilabel> &gt; <db:guilabel>Build .aab (Android App Bundle)</db:guilabel> for Qt Creator to generate the .aab file, then locate the package at:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;build_path&amp;gt;/android-build/build/outputs/bundle/release/android-build-release.aab
</db:programlisting>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:orderedlist>
</db:section>
<db:section xml:id="uploading-the-app-to-google-play-store">
<db:title>Uploading the App to Google Play Store</db:title>
<db:para>Log into the <db:link xlink:href="https://play.google.com/apps/publish">Google Play Developer Console</db:link> and upload the .aab files, along with a description and screen captures resembling the usage of your application.</db:para>
<db:section xml:id="multi-abi-bundles">
<db:title>Multi-ABI Bundles</db:title>
<db:para>Uploading one .aab with all the supported architectures is enough for Qt versions that support building a multi-ABI bundle. Qt 6.7 supports building multi-ABI bundles with <db:emphasis role="bold">only</db:emphasis> with CMake. For more information, see <db:link xlink:href="cmake-target-property-qt-android-abis.xml">QT_ANDROID_ABIS</db:link>.</db:para>
</db:section>
<db:section xml:id="single-abi-bundles">
<db:title>Single-ABI bundles</db:title>
<db:para>However, publishing your app requires additional steps for Qt versions that don't have the multi-ABI build support. qmake builds in Qt 6.7 fall into this category.</db:para>
<db:para>To publish your app that is built using a single ABI kit, you need to make sure that each ABI uses a different internal version code. The version code is an internal non-public identifier for your app's release. Build each one of the architectures you want to support and set a different version code for each ABI. This can be done as follows for qmake:</db:para>
<db:programlisting language="cpp" role="bad">ANDROID_VERSION_CODE = &amp;lt;unique_version&amp;gt;
</db:programlisting>
<db:para>The app developer can use a specific scheme for the version code. For example, the code could have chunks for the platform, the ABI, and the actual version. Then, a sample scheme would be &lt;Platform&gt;&lt;ABI&gt;&lt;AppVersion&gt;:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Platform:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>1 for Arm</db:para>
</db:listitem>
<db:listitem>
<db:para>2 for Intel</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>Architecture:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>32 for 32 bit</db:para>
</db:listitem>
<db:listitem>
<db:para>64 for 64 bit</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
<db:para>The resulting version code for release 1.0 for arm64-v8a ABI, would be 16410.</db:para>
<db:para>For more information, see Google's documentation on <db:link xlink:href="https://developer.android.com/studio/publish/versioning.html#appversioning">app versioning</db:link>.</db:para>
<db:para>The following screenshot shows an example of an app targeting 4 ABIs, while each package uses a unique version code, which is different from the version name that is the public version string.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/android-single-abis.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="deployment-android.xml">Deploying an Application on Android</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
