<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Extending QML - Object and List Property Types Example</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Exporting C++ Properties.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This example builds on:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtqml-referenceexamples-adding-example.xml">Extending QML - Adding Types Example</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The Object and List Property Types example shows how to add object and list properties in QML. This example adds a BirthdayParty type that specifies a birthday party, consisting of a celebrant and a list of guests. People are specified using the People QML type built in the previous example.</db:para>
<db:programlisting language="qml">BirthdayParty {
    host: Person {
        name: &quot;Bob Jones&quot;
        shoeSize: 12
    }
    guests: [
        Person { name: &quot;Leo Hodges&quot; },
        Person { name: &quot;Jack Smith&quot; },
        Person { name: &quot;Anne Brown&quot; }
    ]
}
</db:programlisting>
<db:section xml:id="declare-the-birthdayparty">
<db:title>Declare the BirthdayParty</db:title>
<db:para>The BirthdayParty class is declared like this:</db:para>
<db:programlisting language="cpp">class BirthdayParty : public QObject
{
    Q_OBJECT
    Q_PROPERTY(Person *host READ host WRITE setHost)
    Q_PROPERTY(QQmlListProperty&amp;lt;Person&amp;gt; guests READ guests)
    QML_ELEMENT
public:
    BirthdayParty(QObject *parent = nullptr);

    Person *host() const;
    void setHost(Person *);

    QQmlListProperty&amp;lt;Person&amp;gt; guests();
    void appendGuest(Person*);
    qsizetype guestCount() const;
    Person *guest(qsizetype) const;
    void clearGuests();
    void replaceGuest(qsizetype, Person*);
    void removeLastGuest();

private:
    static void appendGuest(QQmlListProperty&amp;lt;Person&amp;gt;*, Person*);
    static qsizetype guestCount(QQmlListProperty&amp;lt;Person&amp;gt;*);
    static Person* guest(QQmlListProperty&amp;lt;Person&amp;gt;*, qsizetype);
    static void clearGuests(QQmlListProperty&amp;lt;Person&amp;gt;*);
    static void replaceGuest(QQmlListProperty&amp;lt;Person&amp;gt;*, qsizetype, Person*);
    static void removeLastGuest(QQmlListProperty&amp;lt;Person&amp;gt;*);

    Person *m_host;
    QList&amp;lt;Person *&amp;gt; m_guests;
};
</db:programlisting>
<db:para>The class contains a member to store the celebrant object, and also a <db:link xlink:href="qlist.xml">QList</db:link>&lt;Person *&gt; member.</db:para>
<db:para>In QML, the type of a list properties - and the guests property is a list of people - are all of type <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link>&lt;T&gt;. <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> is simple value type that contains a set of function pointers. QML calls these function pointers whenever it needs to read from, write to or otherwise interact with the list. In addition to concrete lists like the people list used in this example, the use of <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> allows for &quot;virtual lists&quot; and other advanced scenarios.</db:para>
<db:section xml:id="define-the-birthdayparty">
<db:title>Define the BirthdayParty</db:title>
<db:para>The implementation of BirthdayParty property accessors is straight forward.</db:para>
<db:programlisting language="cpp">Person *BirthdayParty::host() const
{
    return m_host;
}

void BirthdayParty::setHost(Person *c)
{
    m_host = c;
}

QQmlListProperty&amp;lt;Person&amp;gt; BirthdayParty::guests()
{
    return {this, this,
             &amp;amp;BirthdayParty::appendGuest,
             &amp;amp;BirthdayParty::guestCount,
             &amp;amp;BirthdayParty::guest,
             &amp;amp;BirthdayParty::clearGuests,
             &amp;amp;BirthdayParty::replaceGuest,
             &amp;amp;BirthdayParty::removeLastGuest};
}

void BirthdayParty::appendGuest(Person* p) {
    m_guests.append(p);
}

qsizetype BirthdayParty::guestCount() const
{
    return m_guests.count();
}

Person *BirthdayParty::guest(qsizetype index) const
{
    return m_guests.at(index);
}

void BirthdayParty::clearGuests() {
    m_guests.clear();
}

void BirthdayParty::replaceGuest(qsizetype index, Person *p)
{
    m_guests[index] = p;
}

void BirthdayParty::removeLastGuest()
{
    m_guests.removeLast();
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>The main.cpp file in the example includes a simple shell application that loads and runs the QML snippet shown at the beginning of this page.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/qml/referenceexamples/properties?h=6.1">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
