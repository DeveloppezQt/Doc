<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoCodeReply Class</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeocodereply.xml">QGeoCodeReply</db:link> class manages an operation started by an instance of <db:link xlink:href="qgeocodingmanager.xml">QGeoCodingManager</db:link>.</db:para>
<db:para>This class was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoCodeReply</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += location</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGeoCodeReply is part of <db:simplelist><db:member>QtLocation-geocoding</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Instances of <db:link xlink:href="qgeocodereply.xml">QGeoCodeReply</db:link> manage the state and results of these operations.</db:para>
<db:para>The <db:link xlink:href="qgeocodereply.xml#isFinished">isFinished</db:link>(), <db:link xlink:href="qgeocodereply.xml#error">error</db:link>() and <db:link xlink:href="qgeocodereply.xml#errorString">errorString</db:link>() methods provide information on whether the operation has completed and if it completed successfully.</db:para>
<db:para>The <db:link xlink:href="qgeocodereply.xml#finished">finished</db:link>() and error(<db:link xlink:href="qgeocodereply.xml#Error-enum">QGeoCodeReply::Error</db:link>,<db:link xlink:href="qstring.xml">QString</db:link>) signals can be used to monitor the progress of the operation.</db:para>
<db:para>It is possible that a newly created <db:link xlink:href="qgeocodereply.xml">QGeoCodeReply</db:link> may be in a finished state, most commonly because an error has occurred. Since such an instance will never emit the <db:link xlink:href="qgeocodereply.xml#finished">finished</db:link>() or error(<db:link xlink:href="qgeocodereply.xml#Error-enum">QGeoCodeReply::Error</db:link>,<db:link xlink:href="qstring.xml">QString</db:link>) signals, it is important to check the result of <db:link xlink:href="qgeocodereply.xml#isFinished">isFinished</db:link>() before making the connections to the signals. The documentation for <db:link xlink:href="qgeocodingmanager.xml">QGeoCodingManager</db:link> demonstrates how this might be carried out.</db:para>
<db:para>If the operation completes successfully the results will be able to be accessed with <db:link xlink:href="qgeocodereply.xml#locations">locations</db:link>().</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QGeoCodeReply::Error</db:title>
<db:para>Describes an error which prevented the completion of the operation.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeocodereply.xml">QGeoCodeReply</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeocodereply.xml">QGeoCodeReply</db:link></db:emphasis>::EngineNotSetError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The geocoding manager that was used did not have a <db:link xlink:href="qgeocodingmanagerengine.xml">QGeoCodingManagerEngine</db:link> instance associated with it.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeocodereply.xml">QGeoCodeReply</db:link></db:emphasis>::CommunicationError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>An error occurred while communicating with the service provider.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeocodereply.xml">QGeoCodeReply</db:link></db:emphasis>::ParseError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The response from the service provider was in an unrecognizable format.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeocodereply.xml">QGeoCodeReply</db:link></db:emphasis>::UnsupportedOptionError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The requested operation or one of the options for the operation are not supported by the service provider.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeocodereply.xml">QGeoCodeReply</db:link></db:emphasis>::CombinationError</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>An error occurred while results where being combined from multiple sources.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeocodereply.xml">QGeoCodeReply</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>An error occurred which does not fit into any of the other categories.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGeoCodeReply">
<db:title>[explicit protected] QGeoCodeReply::QGeoCodeReply(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a geocode reply with the specified <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QGeoCodeReply-1">
<db:title>[explicit] QGeoCodeReply::QGeoCodeReply(QGeoCodeReply::Error <db:emphasis>error</db:emphasis>, const QString &amp;<db:emphasis>errorString</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a geocode reply with a given <db:code role="parameter">error</db:code> and <db:code role="parameter">errorString</db:code> and the specified <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGeoCodeReply">
<db:title>[virtual noexcept] QGeoCodeReply::~QGeoCodeReply()</db:title>
<db:para>Destroys this reply object.</db:para>
</db:section>
<db:section xml:id="abort">
<db:title>[virtual] void QGeoCodeReply::abort()</db:title>
<db:para>Cancels the operation immediately.</db:para>
<db:para>This will do nothing if the reply is finished.</db:para>
</db:section>
<db:section xml:id="addLocation">
<db:title>[protected] void QGeoCodeReply::addLocation(const QGeoLocation &amp;<db:emphasis>location</db:emphasis>)</db:title>
<db:para>Adds <db:code role="parameter">location</db:code> to the list of locations in this reply.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>QGeoCodeReply::Error QGeoCodeReply::error() const</db:title>
<db:para>Returns the error state of this reply.</db:para>
<db:para>If the result is <db:link xlink:href="qgeocodereply.xml#Error-enum">QGeoCodeReply::NoError</db:link> then no error has occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocodereply.xml#setError">setError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error-1">
<db:title>void QGeoCodeReply::error(QGeoCodeReply::Error <db:emphasis>error</db:emphasis>, const QString &amp;<db:emphasis>errorString</db:emphasis> = QString())</db:title>
<db:para>This signal is emitted when an error has been detected in the processing of this reply. The <db:link xlink:href="qgeocodereply.xml#finished">finished</db:link>() signal will probably follow.</db:para>
<db:para>The error will be described by the error code <db:code role="parameter">error</db:code>. If <db:code role="parameter">errorString</db:code> is not empty it will contain a textual description of the error.</db:para>
<db:para>This signal and <db:link xlink:href="qgeocodingmanager.xml#error">QGeoCodingManager::error</db:link>() will be emitted at the same time.</db:para>
<db:note>
<db:para>Do not delete this reply object in the slot connected to this signal. Use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() instead.</db:para>
</db:note>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QGeoCodeReply::errorString() const</db:title>
<db:para>Returns the textual representation of the error state of this reply.</db:para>
<db:para>If no error has occurred this will return an empty string. It is possible that an error occurred which has no associated textual representation, in which case this will also return an empty string.</db:para>
<db:para>To determine whether an error has occurred, check to see if <db:link xlink:href="qgeocodereply.xml#error">QGeoCodeReply::error</db:link>() is equal to <db:link xlink:href="qgeocodereply.xml#Error-enum">QGeoCodeReply::NoError</db:link>.</db:para>
</db:section>
<db:section xml:id="finished">
<db:title>void QGeoCodeReply::finished()</db:title>
<db:para>This signal is emitted when this reply has finished processing.</db:para>
<db:para>If <db:link xlink:href="qgeocodereply.xml#error">error</db:link>() equals <db:link xlink:href="qgeocodereply.xml#Error-enum">QGeoCodeReply::NoError</db:link> then the processing finished successfully.</db:para>
<db:para>This signal and <db:link xlink:href="qgeocodingmanager.xml#finished">QGeoCodingManager::finished</db:link>() will be emitted at the same time.</db:para>
<db:note>
<db:para>Do not delete this reply object in the slot connected to this signal. Use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() instead.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocodereply.xml#setFinished">setFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isFinished">
<db:title>bool QGeoCodeReply::isFinished() const</db:title>
<db:para>Return true if the operation completed successfully or encountered an error which cause the operation to come to a halt.</db:para>
</db:section>
<db:section xml:id="limit">
<db:title>int QGeoCodeReply::limit() const</db:title>
<db:para>Returns the limit on the number of responses from each data source.</db:para>
<db:para>If no limit was set this function will return -1.</db:para>
<db:para>This may be more than <db:link xlink:href="qgeocodereply.xml#locations">locations</db:link>().length() if the number of responses was less than the number requested.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocodereply.xml#setLimit">setLimit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="locations">
<db:title>QList&lt;QGeoLocation&gt; QGeoCodeReply::locations() const</db:title>
<db:para>Returns a list of locations.</db:para>
<db:para>The locations are the results of the operation corresponding to the <db:link xlink:href="qgeocodingmanager.xml">QGeoCodingManager</db:link> function which created this reply.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocodereply.xml#setLocations">setLocations</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="offset">
<db:title>int QGeoCodeReply::offset() const</db:title>
<db:para>Returns the offset into the entire result set at which to start fetching results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocodereply.xml#setOffset">setOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setError">
<db:title>[protected] void QGeoCodeReply::setError(QGeoCodeReply::Error <db:emphasis>error</db:emphasis>, const QString &amp;<db:emphasis>errorString</db:emphasis>)</db:title>
<db:para>Sets the error state of this reply to <db:code role="parameter">error</db:code> and the textual representation of the error to <db:code role="parameter">errorString</db:code>.</db:para>
<db:para>This will also cause <db:link xlink:href="qgeocodereply.xml#error">error</db:link>() and <db:link xlink:href="qgeocodereply.xml#finished">finished</db:link>() signals to be emitted, in that order.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocodereply.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFinished">
<db:title>[protected] void QGeoCodeReply::setFinished(bool <db:emphasis>finished</db:emphasis>)</db:title>
<db:para>Sets whether or not this reply has finished to <db:code role="parameter">finished</db:code>.</db:para>
<db:para>If <db:code role="parameter">finished</db:code> is true, this will cause the <db:link xlink:href="qgeocodereply.xml#finished">finished</db:link>() signal to be emitted.</db:para>
<db:para>If the operation completed successfully, <db:link xlink:href="qgeocodereply.xml#setLocations">QGeoCodeReply::setLocations</db:link>() should be called before this function. If an error occurred, <db:link xlink:href="qgeocodereply.xml#setError">QGeoCodeReply::setError</db:link>() should be used instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocodereply.xml#finished">finished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLimit">
<db:title>[protected] void QGeoCodeReply::setLimit(int <db:emphasis>limit</db:emphasis>)</db:title>
<db:para>Sets the limit on the number of responses from each data source to <db:code role="parameter">limit</db:code>.</db:para>
<db:para>If <db:code role="parameter">limit</db:code> is -1 then all available responses will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocodereply.xml#limit">limit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLocations">
<db:title>[protected] void QGeoCodeReply::setLocations(const QList&lt;QGeoLocation&gt; &amp;<db:emphasis>locations</db:emphasis>)</db:title>
<db:para>Sets the list of <db:code role="parameter">locations</db:code> in the reply.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocodereply.xml#locations">locations</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOffset">
<db:title>[protected] void QGeoCodeReply::setOffset(int <db:emphasis>offset</db:emphasis>)</db:title>
<db:para>Sets the offset in the entire result set at which to start fetching result to <db:code role="parameter">offset</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocodereply.xml#offset">offset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setViewport">
<db:title>[protected] void QGeoCodeReply::setViewport(const QGeoShape &amp;<db:emphasis>viewport</db:emphasis>)</db:title>
<db:para>Sets the viewport which contains the results to <db:code role="parameter">viewport</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocodereply.xml#viewport">viewport</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="viewport">
<db:title>QGeoShape QGeoCodeReply::viewport() const</db:title>
<db:para>Returns the viewport which contains the results.</db:para>
<db:para>This function will return 0 if no viewport bias was specified in the <db:link xlink:href="qgeocodingmanager.xml">QGeoCodingManager</db:link> function which created this reply.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocodereply.xml#setViewport">setViewport</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
