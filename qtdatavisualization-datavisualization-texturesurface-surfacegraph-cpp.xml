<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Textured Surface Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using texture with <db:link xlink:href="q3dsurface.xml">Q3DSurface</db:link>.</db:para>
<db:para>This documentation was introduced in QtDataVisualization 1.2.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Data Visualization module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;surfacegraph.h&quot;
#include &quot;topographicseries.h&quot;

#include &amp;lt;QtDataVisualization/QValue3DAxis&amp;gt;
#include &amp;lt;QtDataVisualization/Q3DTheme&amp;gt;

using namespace QtDataVisualization;

const float areaWidth = 8000.0f;
const float areaHeight = 8000.0f;
const float aspectRatio = 0.1389f;
const float minRange = areaWidth * 0.49f;

SurfaceGraph::SurfaceGraph(Q3DSurface *surface)
    : m_graph(surface)
{
    m_graph-&amp;gt;setAxisX(new QValue3DAxis);
    m_graph-&amp;gt;setAxisY(new QValue3DAxis);
    m_graph-&amp;gt;setAxisZ(new QValue3DAxis);
    m_graph-&amp;gt;axisX()-&amp;gt;setLabelFormat(&quot;%i&quot;);
    m_graph-&amp;gt;axisZ()-&amp;gt;setLabelFormat(&quot;%i&quot;);
    m_graph-&amp;gt;axisX()-&amp;gt;setRange(0.0f, areaWidth);
    m_graph-&amp;gt;axisY()-&amp;gt;setRange(100.0f, areaWidth * aspectRatio);
    m_graph-&amp;gt;axisZ()-&amp;gt;setRange(0.0f, areaHeight);
    m_graph-&amp;gt;axisX()-&amp;gt;setLabelAutoRotation(30);
    m_graph-&amp;gt;axisY()-&amp;gt;setLabelAutoRotation(90);
    m_graph-&amp;gt;axisZ()-&amp;gt;setLabelAutoRotation(30);
    m_graph-&amp;gt;activeTheme()-&amp;gt;setType(Q3DTheme::ThemePrimaryColors);

    QFont font = m_graph-&amp;gt;activeTheme()-&amp;gt;font();
    font.setPointSize(20);
    m_graph-&amp;gt;activeTheme()-&amp;gt;setFont(font);

    m_topography = new TopographicSeries();
    m_topography-&amp;gt;setTopographyFile(&quot;:/maps/topography&quot;, areaWidth, areaHeight);
    m_topography-&amp;gt;setItemLabelFormat(QStringLiteral(&quot;@yLabel m&quot;));

    m_highlight = new HighlightSeries();
    m_highlight-&amp;gt;setTopographicSeries(m_topography);
    m_highlight-&amp;gt;setMinHeight(minRange * aspectRatio);
    m_highlight-&amp;gt;handleGradientChange(areaWidth * aspectRatio);
    QObject::connect(m_graph-&amp;gt;axisY(), &amp;amp;QValue3DAxis::maxChanged,
                     m_highlight, &amp;amp;HighlightSeries::handleGradientChange);

    m_graph-&amp;gt;addSeries(m_topography);
    m_graph-&amp;gt;addSeries(m_highlight);

    m_inputHandler = new CustomInputHandler(m_graph);
    m_inputHandler-&amp;gt;setHighlightSeries(m_highlight);
    m_inputHandler-&amp;gt;setAxes(m_graph-&amp;gt;axisX(), m_graph-&amp;gt;axisY(), m_graph-&amp;gt;axisZ());
    m_inputHandler-&amp;gt;setLimits(0.0f, areaWidth, minRange);
    m_inputHandler-&amp;gt;setAspectRatio(aspectRatio);

    m_graph-&amp;gt;setActiveInputHandler(m_inputHandler);
}

SurfaceGraph::~SurfaceGraph()
{
    delete m_graph;
}

void SurfaceGraph::toggleSurfaceTexture(bool enable)
{
    if (enable)
        m_topography-&amp;gt;setTextureFile(&quot;:/maps/maptexture&quot;);
    else
        m_topography-&amp;gt;setTextureFile(&quot;&quot;);
}

</db:programlisting>
</db:article>
