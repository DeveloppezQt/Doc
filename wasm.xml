<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for WebAssembly</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Runs Qt applications in a secure sandbox in the browser.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>WebAssembly is a binary format that allows sand-boxed executable code in web pages. This format is nearly as fast as native machine code, and is now supported by all major web browsers.</db:para>
<db:para>Qt for WebAssembly is a <db:link xlink:href="qpa.xml">platform plugin</db:link> that lets you build Qt applications, which can be integrated into your web pages. It doesn't require any client-side installations and reduces the server-side resource usage.</db:para>
<db:section xml:id="getting-started-with-qt-for-webassembly">
<db:title>Getting Started with Qt for WebAssembly</db:title>
<db:section xml:id="install-emscripten">
<db:title>Install Emscripten</db:title>
<db:para><db:link xlink:href="https://emscripten.org/docs/introducing_emscripten/index.html">emscripten</db:link> is a toolchain for compiling to asm.js and WebAssembly. It lets you run Qt on the web at near-native speed without plugins.</db:para>
<db:para>Refer to the <db:link xlink:href="http://kripken.github.io/emscripten-site/docs/getting_started/index.html">emscripten documentation</db:link> for more information about checking out the Emscripten SDK and installing and activating Emscripten for your Qt version.</db:para>
<db:para>After installation, you should have emscripten in your path. Check this with the following command:</db:para>
<db:programlisting language="cpp" role="bad">em++ --version
</db:programlisting>
<db:para>Each minor release of Qt supports a known-good Emscripten version. That Emscripten version will be supported for the lifetime of that Qt version.</db:para>
<db:para>The known-good versions are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt 5.12: 1.38.16</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt 5.13: 1.38.27 (multithreading: 1.38.30)</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt 5.14: 1.38.27 (multithreading: 1.38.30)</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt 5.15: 1.39.8</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Use emsdk to install specific emscripten versions. For example, to install it for Qt 5.13, enter:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>./emsdk install sdk-fastcomp-1.38.27-64bit</db:para>
</db:listitem>
<db:listitem>
<db:para>./emsdk activate sdk-fastcomp-1.38.27-64bit</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>After installation, you should have emscripten in your path. Check this with the following command:</db:para>
<db:programlisting language="cpp" role="bad">em++ --version
</db:programlisting>
<db:section xml:id="download-the-binaries">
<db:title>Download the binaries</db:title>
<db:para>The binary builds can be downloaded in the Downloads section using your Qt account.</db:para>
</db:section>
<db:section xml:id="build-qt-from-the-sources">
<db:title>Build Qt from the sources</db:title>
<db:para>Alternatively, you could download the Qt sources in the Downloads section, and build Qt from it.</db:para>
<db:para>Configure Qt as a cross-compile build for the wasm-emscripten platform. This will implicitly set the &quot;-static&quot; and &quot;-no-feature-thread&quot; options. Pass the -compile-examples option to enable examples.</db:para>
<db:programlisting language="cpp" role="bad">./configure -xplatform wasm-emscripten -nomake examples -prefix $PWD/qtbase
</db:programlisting>
<db:para>On Windows, make sure you have MinGW as well as sed in your PATH and configure with the following:</db:para>
<db:programlisting language="cpp" role="bad">configure -no-warnings-are-errors -xplatform wasm-emscripten -platform win32-g++ -nomake examples -prefix %CD%\qtbase
</db:programlisting>
<db:para>Build required modules:</db:para>
<db:programlisting language="cpp" role="bad">make module-qtbase module-qtdeclarative [other modules]
</db:programlisting>
<db:para>The Qt build is a static build, and does not support threads.</db:para>
</db:section>
<db:section xml:id="build-and-run-your-application">
<db:title>Build and run your application</db:title>
<db:programlisting language="cpp" role="bad">$ /path/to/qt-wasm/qtbase/bin/qmake
$ make
</db:programlisting>
<db:para>This generates the following files:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Generated file</db:para>
</db:th>
<db:th>
<db:para>Brief Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>app.html</db:para>
</db:td>
<db:td>
<db:para>HTML container</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qtloader.js</db:para>
</db:td>
<db:td>
<db:para>JS API for loading Qt apps</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>app.js</db:para>
</db:td>
<db:td>
<db:para>JS API for loading Qt apps</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>app.wasm</db:para>
</db:td>
<db:td>
<db:para>emscripten app binary</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>When deploying the app, the compression is typically handled on the server side. We recommend to compress the wasm binaries because this typically reduces the size of the binary by 50 %.</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="test-run-your-application">
<db:title>Test-run your application</db:title>
<db:para>You can test-run your application in the following way:</db:para>
<db:programlisting language="cpp" role="bad">/path/to/emscripten/emrun --browser=firefox appname.html
</db:programlisting>
</db:section>
<db:section xml:id="some-examples">
<db:title>Some examples</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="http://example.qt.io/qt-webassembly/opengl/hellowindow/hellowindow.html">An example displaying a Qt logo using OpenGL calls</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://example.qt.io/qt-webassembly/SensorTagDemo/SensorTagDemo.html">An industry automation use case</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://example.qt.io/qt-webassembly/quickcontrols2/gallery/gallery.html">A gallery of available controls in Qt Quick Controls</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://example.qt.io/qt-webassembly/widgets/richtext/textedit/textedit.html">A simple text editor, written with Qt Widgets</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="limitations">
<db:title>Limitations</db:title>
<db:para>The most important limitation is that the Qt build is static, and does not support threads.</db:para>
<db:para>For further info, refer to <db:link xlink:href="https://wiki.qt.io/Qt_for_WebAssembly#Known_issues_and_platform_notes">Known_issues_and_platform_notes</db:link>.</db:para>
</db:section>
<db:section xml:id="external-resources">
<db:title>External resources</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="http://blog.qt.io/blog/2018/04/23/beta-qt-webassembly-technology-preview/">Qt for WebAssembly Technology Preview</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://blog.qt.io/blog/2018/05/22/qt-for-webassembly/">Qt and WebAssembly</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://wiki.qt.io/Qt_for_WebAssembly">Qt for WebAssembly wiki</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://blog.qt.io/blog/2018/11/19/getting-started-qt-webassembly/">Getting Started with Qt for WebAssembly</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://blog.qt.io/blog/2018/06/12/remote-uis-webgl-webassembly/">Remote UIs with WebGL and WebAssembly</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://webassembly.org">WebAssembly Resource site</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="licenses">
<db:title>Licenses</db:title>
<db:para>Qt for WebAssembly is available under commercial licenses from <db:link xlink:href="http://www.qt.io/about-us/">The Qt Company</db:link>. In addition, it is available under the <db:link xlink:href="http://www.gnu.org/licenses/gpl-3.0.html">GNU General Public License, version 3</db:link>. See <db:link xlink:href="licensing.xml">Qt Licensing</db:link> for further details.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="https://webassembly.org">WebAssembly Resource site</db:link></db:member>
<db:member><db:link xlink:href="http://blog.qt.io/blog/2018/11/19/getting-started-qt-webassembly/">Getting Started with Qt for WebAssembly</db:link></db:member>
<db:member><db:link xlink:href="http://blog.qt.io/blog/2018/06/12/remote-uis-webgl-webassembly/">Remote UIs with WebGL and WebAssembly</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
