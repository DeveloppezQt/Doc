<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SVG Viewer Example</db:title>
<db:productname>QtSvg</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt SVG Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt SVG Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;mainwindow.h&quot;
#include &quot;exportdialog.h&quot;

#include &amp;lt;QtWidgets&amp;gt;
#include &amp;lt;QSvgRenderer&amp;gt;

#include &quot;svgview.h&quot;

static inline QString picturesLocation()
{
    return QStandardPaths::standardLocations(QStandardPaths::PicturesLocation).value(0, QDir::currentPath());
}

MainWindow::MainWindow()
    : QMainWindow()
    , m_view(new SvgView)
    , m_zoomLabel(new QLabel)
{
    QToolBar *toolBar = new QToolBar(this);
    addToolBar(Qt::TopToolBarArea, toolBar);

    QMenu *fileMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;File&quot;));
    const QIcon openIcon = QIcon::fromTheme(&quot;document-open&quot;, QIcon(&quot;:/qt-project.org/styles/commonstyle/images/standardbutton-open-32.png&quot;));
    QAction *openAction = fileMenu-&amp;gt;addAction(openIcon, tr(&quot;&amp;amp;Open...&quot;), this, &amp;amp;MainWindow::openFile);
    openAction-&amp;gt;setShortcut(QKeySequence::Open);
    toolBar-&amp;gt;addAction(openAction);
    const QIcon exportIcon = QIcon::fromTheme(&quot;document-save&quot;, QIcon(&quot;:/qt-project.org/styles/commonstyle/images/standardbutton-save-32.png&quot;));
    QAction *exportAction = fileMenu-&amp;gt;addAction(exportIcon, tr(&quot;&amp;amp;Export...&quot;), this, &amp;amp;MainWindow::exportImage);
    exportAction-&amp;gt;setToolTip(tr(&quot;Export Image&quot;));
    exportAction-&amp;gt;setShortcut(Qt::CTRL + Qt::Key_E);
    toolBar-&amp;gt;addAction(exportAction);
    QAction *quitAction = fileMenu-&amp;gt;addAction(tr(&quot;E&amp;amp;xit&quot;), qApp, QCoreApplication::quit);
    quitAction-&amp;gt;setShortcuts(QKeySequence::Quit);

    QMenu *viewMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;View&quot;));
    m_backgroundAction = viewMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Background&quot;));
    m_backgroundAction-&amp;gt;setEnabled(false);
    m_backgroundAction-&amp;gt;setCheckable(true);
    m_backgroundAction-&amp;gt;setChecked(false);
    connect(m_backgroundAction, &amp;amp;QAction::toggled, m_view, &amp;amp;SvgView::setViewBackground);

    m_outlineAction = viewMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Outline&quot;));
    m_outlineAction-&amp;gt;setEnabled(false);
    m_outlineAction-&amp;gt;setCheckable(true);
    m_outlineAction-&amp;gt;setChecked(true);
    connect(m_outlineAction, &amp;amp;QAction::toggled, m_view, &amp;amp;SvgView::setViewOutline);

    viewMenu-&amp;gt;addSeparator();
    QAction *zoomAction = viewMenu-&amp;gt;addAction(tr(&quot;Zoom &amp;amp;In&quot;), m_view, &amp;amp;SvgView::zoomIn);
    zoomAction-&amp;gt;setShortcut(QKeySequence::ZoomIn);
    zoomAction = viewMenu-&amp;gt;addAction(tr(&quot;Zoom &amp;amp;Out&quot;), m_view, &amp;amp;SvgView::zoomOut);
    zoomAction-&amp;gt;setShortcut(QKeySequence::ZoomOut);
    zoomAction = viewMenu-&amp;gt;addAction(tr(&quot;Reset Zoom&quot;), m_view, &amp;amp;SvgView::resetZoom);
    zoomAction-&amp;gt;setShortcut(Qt::CTRL + Qt::Key_0);

    QMenu *rendererMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;Renderer&quot;));
    m_nativeAction = rendererMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Native&quot;));
    m_nativeAction-&amp;gt;setCheckable(true);
    m_nativeAction-&amp;gt;setChecked(true);
    m_nativeAction-&amp;gt;setData(int(SvgView::Native));
#ifndef QT_NO_OPENGL
    m_glAction = rendererMenu-&amp;gt;addAction(tr(&quot;&amp;amp;OpenGL&quot;));
    m_glAction-&amp;gt;setCheckable(true);
    m_glAction-&amp;gt;setData(int(SvgView::OpenGL));
#endif
    m_imageAction = rendererMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Image&quot;));
    m_imageAction-&amp;gt;setCheckable(true);
    m_imageAction-&amp;gt;setData(int(SvgView::Image));

    rendererMenu-&amp;gt;addSeparator();
    m_highQualityAntialiasingAction = rendererMenu-&amp;gt;addAction(tr(&quot;&amp;amp;High Quality Antialiasing&quot;));
    m_highQualityAntialiasingAction-&amp;gt;setEnabled(false);
    m_highQualityAntialiasingAction-&amp;gt;setCheckable(true);
    m_highQualityAntialiasingAction-&amp;gt;setChecked(false);
    connect(m_highQualityAntialiasingAction, &amp;amp;QAction::toggled, m_view, &amp;amp;SvgView::setHighQualityAntialiasing);
#ifdef QT_NO_OPENGL
    m_highQualityAntialiasingAction-&amp;gt;setVisible(false);
#endif

    QActionGroup *rendererGroup = new QActionGroup(this);
    rendererGroup-&amp;gt;addAction(m_nativeAction);
#ifndef QT_NO_OPENGL
    rendererGroup-&amp;gt;addAction(m_glAction);
#endif
    rendererGroup-&amp;gt;addAction(m_imageAction);

    menuBar()-&amp;gt;addMenu(rendererMenu);

    connect(rendererGroup, &amp;amp;QActionGroup::triggered,
            [this] (QAction *a) { setRenderer(a-&amp;gt;data().toInt()); });

    QMenu *help = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;Help&quot;));
    help-&amp;gt;addAction(tr(&quot;About Qt&quot;), qApp, &amp;amp;QApplication::aboutQt);

    setCentralWidget(m_view);

    m_zoomLabel-&amp;gt;setToolTip(tr(&quot;Use the mouse wheel to zoom&quot;));
    statusBar()-&amp;gt;addPermanentWidget(m_zoomLabel);
    updateZoomLabel();
    connect(m_view, &amp;amp;SvgView::zoomChanged, this, &amp;amp;MainWindow::updateZoomLabel);
}

void MainWindow::openFile()
{
    QFileDialog fileDialog(this);
    fileDialog.setAcceptMode(QFileDialog::AcceptOpen);
    fileDialog.setMimeTypeFilters(QStringList() &amp;lt;&amp;lt; &quot;image/svg+xml&quot; &amp;lt;&amp;lt; &quot;image/svg+xml-compressed&quot;);
    fileDialog.setWindowTitle(tr(&quot;Open SVG File&quot;));
    if (m_currentPath.isEmpty())
        fileDialog.setDirectory(picturesLocation());

    while (fileDialog.exec() == QDialog::Accepted &amp;amp;&amp;amp; !loadFile(fileDialog.selectedFiles().constFirst()))
        ;
}

bool MainWindow::loadFile(const QString &amp;amp;fileName)
{
    if (!QFileInfo::exists(fileName) || !m_view-&amp;gt;openFile(fileName)) {
        QMessageBox::critical(this, tr(&quot;Open SVG File&quot;),
                              tr(&quot;Could not open file '%1'.&quot;).arg(QDir::toNativeSeparators(fileName)));
        return false;
    }

    if (!fileName.startsWith(&quot;:/&quot;)) {
        m_currentPath = fileName;
        setWindowFilePath(fileName);
        const QSize size = m_view-&amp;gt;svgSize();
        const QString message =
            tr(&quot;Opened %1, %2x%3&quot;).arg(QFileInfo(fileName).fileName()).arg(size.width()).arg(size.width());
        statusBar()-&amp;gt;showMessage(message);
    }

    m_outlineAction-&amp;gt;setEnabled(true);
    m_backgroundAction-&amp;gt;setEnabled(true);

    const QSize availableSize = QApplication::desktop()-&amp;gt;availableGeometry(this).size();
    resize(m_view-&amp;gt;sizeHint().expandedTo(availableSize / 4) + QSize(80, 80 + menuBar()-&amp;gt;height()));

    return true;
}

void MainWindow::setRenderer(int renderMode)
{

    m_highQualityAntialiasingAction-&amp;gt;setEnabled(renderMode == SvgView::OpenGL);
    m_view-&amp;gt;setRenderer(static_cast&amp;lt;SvgView::RendererType&amp;gt;(renderMode));
}

void MainWindow::exportImage()
{
    ExportDialog exportDialog(this);
    exportDialog.setExportSize(m_view-&amp;gt;svgSize());
    QString fileName;
    if (m_currentPath.isEmpty()) {
        fileName = picturesLocation() + QLatin1String(&quot;/export.png&quot;);
    } else {
        const QFileInfo fi(m_currentPath);
        fileName = fi.absolutePath() + QLatin1Char('/') + fi.baseName() + QLatin1String(&quot;.png&quot;);
    }
    exportDialog.setExportFileName(fileName);

    while (true) {
        if (exportDialog.exec() != QDialog::Accepted)
            break;

        const QSize imageSize = exportDialog.exportSize();
        QImage image(imageSize, QImage::Format_ARGB32);
        image.fill(Qt::transparent);
        QPainter painter;
        painter.begin(&amp;amp;image);
        m_view-&amp;gt;renderer()-&amp;gt;render(&amp;amp;painter, QRectF(QPointF(), QSizeF(imageSize)));
        painter.end();

        const QString fileName = exportDialog.exportFileName();
        if (image.save(fileName)) {

            const QString message = tr(&quot;Exported %1, %2x%3, %4 bytes&quot;)
                .arg(QDir::toNativeSeparators(fileName)).arg(imageSize.width()).arg(imageSize.height())
                .arg(QFileInfo(fileName).size());
            statusBar()-&amp;gt;showMessage(message);
            break;
        } else {
            QMessageBox::critical(this, tr(&quot;Export Image&quot;),
                                  tr(&quot;Could not write file '%1'.&quot;).arg(QDir::toNativeSeparators(fileName)));
        }
    }
}

void MainWindow::updateZoomLabel()
{
    const int percent = qRound(m_view-&amp;gt;zoomFactor() * qreal(100));
    m_zoomLabel-&amp;gt;setText(QString::number(percent) + QLatin1Char('%'));
}

</db:programlisting>
</db:article>
