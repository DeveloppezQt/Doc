<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCameraViewfinderSettings Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcameraviewfindersettings.xml">QCameraViewfinderSettings</db:link> class provides a set of viewfinder settings.</db:para>
<db:para>This class was introduced in Qt 5.5.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCameraViewfinderSettings</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QCameraViewfinderSettings is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_camera</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A viewfinder settings object is used to specify the viewfinder settings used by <db:link xlink:href="qcamera.xml">QCamera</db:link>. Viewfinder settings are selected by constructing a <db:link xlink:href="qcameraviewfindersettings.xml">QCameraViewfinderSettings</db:link> object, setting the desired properties and then passing it to a <db:link xlink:href="qcamera.xml">QCamera</db:link> instance using the <db:link xlink:href="qcamera.xml#setViewfinderSettings">QCamera::setViewfinderSettings</db:link>() function.</db:para>
<db:programlisting language="cpp">QCameraViewfinderSettings viewfinderSettings;
viewfinderSettings.setResolution(640, 480);
viewfinderSettings.setMinimumFrameRate(15.0);
viewfinderSettings.setMaximumFrameRate(30.0);

camera-&gt;setViewfinderSettings(viewfinderSettings);
</db:programlisting>
<db:para>Different cameras may have different capabilities. The application should query the camera capabilities before setting parameters. For example, the application should call <db:link xlink:href="qcamera.xml#supportedViewfinderResolutions">QCamera::supportedViewfinderResolutions</db:link>() before calling <db:link xlink:href="qcameraviewfindersettings.xml#setResolution">setResolution</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml">QCamera</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCameraViewfinderSettings">
<db:title>QCameraViewfinderSettings::QCameraViewfinderSettings()</db:title>
<db:para>Constructs a null viewfinder settings object.</db:para>
</db:section>
<db:section xml:id="QCameraViewfinderSettings-1">
<db:title>QCameraViewfinderSettings::QCameraViewfinderSettings(const QCameraViewfinderSettings &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of the viewfinder settings object <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QCameraViewfinderSettings">
<db:title>[noexcept] QCameraViewfinderSettings::~QCameraViewfinderSettings()</db:title>
<db:para>Destroys a viewfinder settings object.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QCameraViewfinderSettings::isNull() const</db:title>
<db:para>Identifies if a viewfinder settings object is uninitalized.</db:para>
<db:para>Returns true if the settings are null, and false if they are not.</db:para>
</db:section>
<db:section xml:id="maximumFrameRate">
<db:title>qreal QCameraViewfinderSettings::maximumFrameRate() const</db:title>
<db:para>Returns the viewfinder maximum frame rate in frames per second.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraviewfindersettings.xml#setMaximumFrameRate">setMaximumFrameRate</db:link>()</db:member>
<db:member><db:link xlink:href="qcameraviewfindersettings.xml#minimumFrameRate">minimumFrameRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumFrameRate">
<db:title>qreal QCameraViewfinderSettings::minimumFrameRate() const</db:title>
<db:para>Returns the viewfinder minimum frame rate in frames per second.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraviewfindersettings.xml#setMinimumFrameRate">setMinimumFrameRate</db:link>()</db:member>
<db:member><db:link xlink:href="qcameraviewfindersettings.xml#maximumFrameRate">maximumFrameRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pixelAspectRatio">
<db:title>QSize QCameraViewfinderSettings::pixelAspectRatio() const</db:title>
<db:para>Returns the viewfinder pixel aspect ratio.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraviewfindersettings.xml#setPixelAspectRatio">setPixelAspectRatio</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pixelFormat">
<db:title>QVideoFrame::PixelFormat QCameraViewfinderSettings::pixelFormat() const</db:title>
<db:para>Returns the viewfinder pixel format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraviewfindersettings.xml#setPixelFormat">setPixelFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resolution">
<db:title>QSize QCameraViewfinderSettings::resolution() const</db:title>
<db:para>Returns the viewfinder resolution.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraviewfindersettings.xml#setResolution">setResolution</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMaximumFrameRate">
<db:title>void QCameraViewfinderSettings::setMaximumFrameRate(qreal <db:emphasis>rate</db:emphasis>)</db:title>
<db:para>Sets the viewfinder maximum frame <db:code role="parameter">rate</db:code> in frames per second.</db:para>
<db:para>If the maximum frame <db:code role="parameter">rate</db:code> is equal to the minimum frame rate, the frame rate is fixed. If not, the actual frame rate fluctuates between the minimum and the maximum.</db:para>
<db:para>If the given <db:code role="parameter">rate</db:code> equals to <db:code>0</db:code>, the backend makes an optimal choice based on the supported frame rates and the other viewfinder settings.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraviewfindersettings.xml#maximumFrameRate">maximumFrameRate</db:link>()</db:member>
<db:member><db:link xlink:href="qcameraviewfindersettings.xml#setMinimumFrameRate">setMinimumFrameRate</db:link>()</db:member>
<db:member><db:link xlink:href="qcamera.xml#supportedViewfinderFrameRateRanges">QCamera::supportedViewfinderFrameRateRanges</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMinimumFrameRate">
<db:title>void QCameraViewfinderSettings::setMinimumFrameRate(qreal <db:emphasis>rate</db:emphasis>)</db:title>
<db:para>Sets the viewfinder minimum frame <db:code role="parameter">rate</db:code> in frames per second.</db:para>
<db:para>If the minimum frame <db:code role="parameter">rate</db:code> is equal to the maximum frame rate, the frame rate is fixed. If not, the actual frame rate fluctuates between the minimum and the maximum.</db:para>
<db:para>If the given <db:code role="parameter">rate</db:code> equals to <db:code>0</db:code>, the backend makes an optimal choice based on the supported frame rates and the other viewfinder settings.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraviewfindersettings.xml#minimumFrameRate">minimumFrameRate</db:link>()</db:member>
<db:member><db:link xlink:href="qcameraviewfindersettings.xml#setMaximumFrameRate">setMaximumFrameRate</db:link>()</db:member>
<db:member><db:link xlink:href="qcamera.xml#supportedViewfinderFrameRateRanges">QCamera::supportedViewfinderFrameRateRanges</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPixelAspectRatio">
<db:title>void QCameraViewfinderSettings::setPixelAspectRatio(const QSize &amp;<db:emphasis>ratio</db:emphasis>)</db:title>
<db:para>Sets the viewfinder pixel aspect <db:code role="parameter">ratio</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraviewfindersettings.xml#pixelAspectRatio">pixelAspectRatio</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPixelAspectRatio-1">
<db:title>void QCameraViewfinderSettings::setPixelAspectRatio(int <db:emphasis>horizontal</db:emphasis>, int <db:emphasis>vertical</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the <db:code role="parameter">horizontal</db:code> and <db:code role="parameter">vertical</db:code> elements of the viewfinder's pixel aspect ratio.</db:para>
</db:section>
<db:section xml:id="setPixelFormat">
<db:title>void QCameraViewfinderSettings::setPixelFormat(QVideoFrame::PixelFormat <db:emphasis>format</db:emphasis>)</db:title>
<db:para>Sets the viewfinder pixel <db:code role="parameter">format</db:code>.</db:para>
<db:para>If the given <db:code role="parameter">format</db:code> is equal to <db:link xlink:href="qvideoframe.xml#PixelFormat-enum">QVideoFrame::Format_Invalid</db:link>, the backend uses the default format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraviewfindersettings.xml#pixelFormat">pixelFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qcamera.xml#supportedViewfinderPixelFormats">QCamera::supportedViewfinderPixelFormats</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setResolution">
<db:title>void QCameraViewfinderSettings::setResolution(const QSize &amp;<db:emphasis>resolution</db:emphasis>)</db:title>
<db:para>Sets the viewfinder <db:code role="parameter">resolution</db:code>.</db:para>
<db:para>If the given <db:code role="parameter">resolution</db:code> is empty, the backend makes an optimal choice based on the supported resolutions and the other viewfinder settings.</db:para>
<db:para>If the camera is used to capture videos or images, the viewfinder resolution might be ignored if it conflicts with the capture resolution.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraviewfindersettings.xml#resolution">resolution</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoencodersettings.xml#setResolution">QVideoEncoderSettings::setResolution</db:link>()</db:member>
<db:member><db:link xlink:href="qimageencodersettings.xml#setResolution">QImageEncoderSettings::setResolution</db:link>()</db:member>
<db:member><db:link xlink:href="qcamera.xml#supportedViewfinderResolutions">QCamera::supportedViewfinderResolutions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setResolution-1">
<db:title>void QCameraViewfinderSettings::setResolution(int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code> of the viewfinder resolution.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QCameraViewfinderSettings::swap(QCameraViewfinderSettings &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this viewfinder settings object with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[default] QCameraViewfinderSettings &amp;QCameraViewfinderSettings::operator=(QCameraViewfinderSettings &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Moves <db:code role="parameter">other</db:code> to this viewfinder settings object and returns a reference to this object.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QCameraViewfinderSettings &amp;QCameraViewfinderSettings::operator=(const QCameraViewfinderSettings &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns the value of <db:code role="parameter">other</db:code> to a viewfinder settings object.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>[noexcept, since 5.5] bool operator!=(const QCameraViewfinderSettings &amp;<db:emphasis>lhs</db:emphasis>, const QCameraViewfinderSettings &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Determines if <db:code role="parameter">lhs</db:code> is of equal value to <db:code role="parameter">rhs</db:code>.</db:para>
<db:para>Returns true if the settings objects are not of equal value, and false if they are of equal value.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
</db:section>
</db:article>
