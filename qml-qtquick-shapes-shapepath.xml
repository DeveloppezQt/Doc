<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ShapePath QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes a Path and associated properties for stroking and filling.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Shapes 1.9</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-path.xml">Path</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>ShapePath is part of <db:simplelist><db:member>qtquick-paths</db:member><db:member>qtquick-views</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qml-qtquick-shapes-shape.xml">Shape</db:link> contains one or more <db:link xlink:href="qml-qtquick-shapes-shapepath.xml">ShapePath</db:link> elements. At least one <db:link xlink:href="qml-qtquick-shapes-shapepath.xml">ShapePath</db:link> is necessary in order to have a Shape output anything visible. A <db:link xlink:href="qml-qtquick-shapes-shapepath.xml">ShapePath</db:link> itself is a <db:link xlink:href="qml-qtquick-path.xml">Path</db:link> with additional properties describing the stroking and filling parameters, such as the stroke width and color, the fill color or gradient, join and cap styles, and so on. As with ordinary <db:link xlink:href="qml-qtquick-path.xml">Path</db:link> objects, <db:link xlink:href="qml-qtquick-shapes-shapepath.xml">ShapePath</db:link> also contains a list of path elements like <db:link xlink:href="qml-qtquick-pathmove.xml">PathMove</db:link>, <db:link xlink:href="qml-qtquick-pathline.xml">PathLine</db:link>, <db:link xlink:href="qml-qtquick-pathcubic.xml">PathCubic</db:link>, <db:link xlink:href="qml-qtquick-pathquad.xml">PathQuad</db:link>, <db:link xlink:href="qml-qtquick-patharc.xml">PathArc</db:link>, together with a starting position.</db:para>
<db:para>Any property changes in these data sets will be bubble up and change the output of the Shape. This means that it is simple and easy to change, or even animate, the starting and ending position, control points, or any stroke or fill parameters using the usual QML bindings and animation types like <db:link xlink:href="qml-qtquick-numberanimation.xml">NumberAnimation</db:link>.</db:para>
<db:para>In the following example the line join style changes automatically based on the value of joinStyleIndex:</db:para>
<db:programlisting language="qml">ShapePath {
    strokeColor: &quot;black&quot;
    strokeWidth: 16
    fillColor: &quot;transparent&quot;
    capStyle: ShapePath.RoundCap

    property int joinStyleIndex: 0

    property variant styles: [
        ShapePath.BevelJoin,
        ShapePath.MiterJoin,
        ShapePath.RoundJoin
    ]

    joinStyle: styles[joinStyleIndex]

    startX: 30
    startY: 30
    PathLine { x: 100; y: 100 }
    PathLine { x: 30; y: 100 }
}
</db:programlisting>
<db:para>Once associated with a Shape, here is the output with a joinStyleIndex of 2 (<db:link xlink:href="qml-qtquick-shapes-shapepath.xml">ShapePath</db:link>.RoundJoin):</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/visualpath-code-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-quickshapes-shapes-example.xml">Qt Quick Examples - Shapes</db:link></db:member>
<db:member><db:link xlink:href="qtquick-quickshapes-weatherforecast-example.xml">Weather Forecast Example</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-shapes-shape.xml">Shape</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="capStyle-prop">
<db:title>capStyle : enumeration</db:title>
<db:para>This property defines how the end points of lines are drawn. The default value is ShapePath.SquareCap.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>ShapePath.FlatCap</db:para>
</db:td>
<db:td>
<db:para>A square line end that does not cover the end point of the line.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShapePath.SquareCap</db:para>
</db:td>
<db:td>
<db:para>A square line end that covers the end point and extends beyond it by half the line width.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShapePath.RoundCap</db:para>
</db:td>
<db:td>
<db:para>A rounded line end.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="dashOffset-prop">
<db:title>dashOffset : real</db:title>
<db:para>This property defines the starting point on the dash pattern, measured in units used to specify the dash pattern.</db:para>
<db:para>The default value is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#setDashOffset">QPen::setDashOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dashPattern-prop">
<db:title>dashPattern : list&lt;real&gt;</db:title>
<db:para>This property defines the dash pattern when <db:link xlink:href="qml-qtquick-shapes-shapepath.xml">ShapePath</db:link>.<db:link xlink:href="qml-qtquick-shapes-shapepath.xml#strokeStyle-prop">strokeStyle</db:link> is set to <db:link xlink:href="qml-qtquick-shapes-shapepath.xml">ShapePath</db:link>.DashLine. The pattern must be specified as an even number of positive entries where the entries 1, 3, 5... are the dashes and 2, 4, 6... are the spaces. The pattern is specified in units of the pen's width.</db:para>
<db:para>The default value is (4, 2), meaning a dash of 4 * <db:link xlink:href="qml-qtquick-shapes-shapepath.xml">ShapePath</db:link>.<db:link xlink:href="qml-qtquick-shapes-shapepath.xml#strokeWidth-prop">strokeWidth</db:link> pixels followed by a space of 2 * <db:link xlink:href="qml-qtquick-shapes-shapepath.xml">ShapePath</db:link>.<db:link xlink:href="qml-qtquick-shapes-shapepath.xml#strokeWidth-prop">strokeWidth</db:link> pixels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml#setDashPattern">QPen::setDashPattern</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fillColor-prop">
<db:title>fillColor : color</db:title>
<db:para>This property holds the fill color.</db:para>
<db:para>When set to transparent, no filling occurs.</db:para>
<db:para>The default value is white.</db:para>
<db:note>
<db:para>If either <db:link xlink:href="qml-qtquick-shapes-shapepath.xml#fillGradient-prop">fillGradient</db:link> or <db:link xlink:href="qml-qtquick-shapes-shapepath.xml#fillItem-prop">fillItem</db:link> are set to something other than null, these will take precedence over fillColor. The fillColor will be ignored in this case.</db:para>
</db:note>
</db:section>
<db:section xml:id="fillGradient-prop">
<db:title>fillGradient : ShapeGradient</db:title>
<db:para>This property defines the fill gradient. By default no gradient is enabled and the value is null. In this case the fill will either be based on the <db:link xlink:href="qml-qtquick-shapes-shapepath.xml#fillItem-prop">fillItem</db:link> property if it is set, and otherwise the <db:link xlink:href="qml-qtquick-shapes-shapepath.xml#fillColor-prop">fillColor</db:link> property will be used.</db:para>
<db:note>
<db:para>The Gradient type cannot be used here. Rather, prefer using one of the advanced subtypes, like <db:link xlink:href="qml-qtquick-shapes-lineargradient.xml">LinearGradient</db:link>.</db:para>
</db:note>
<db:note>
<db:para>If set to something other than null, the fillGradient will take precedence over both <db:link xlink:href="qml-qtquick-shapes-shapepath.xml#fillItem-prop">fillItem</db:link> and <db:link xlink:href="qml-qtquick-shapes-shapepath.xml#fillColor-prop">fillColor</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="fillItem-prop">
<db:title>[since 6.8] fillItem : Item</db:title>
<db:para>This property defines another Qt Quick Item to use as fill by the shape. The item must be texture provider (such as a <db:link xlink:href="qml-qtquick-item.xml#item-layers">layered item</db:link>, a <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> or an <db:link xlink:href="qml-qtquick-image.xml">Image</db:link>). If it is not a valid texture provider, this property will be ignored.</db:para>
<db:para>The visual parent of fillItem must be a Qt Quick <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>. In particular, since ShapePath is not an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>, its children cannot be used as fill items. Manually setting the fillItem's parent is needed when it is created as a child of the ShapePath.</db:para>
<db:para>For instance, creating an <db:link xlink:href="qml-qtquick-image.xml">Image</db:link> object directly in the fillItem property assignment will make it a child of the ShapePath. In this case, its parent must be set manually. In the following example we use the window's <db:link xlink:href="qml-qtquick-window.xml#contentItem-prop">contentItem</db:link> as the parent.</db:para>
<db:programlisting language="cpp">fillItem: Image {
    visible: false
    source: &quot;contents.png&quot;
    parent: window.contentItem
}
</db:programlisting>
<db:note>
<db:para>When using a layered item as a fillItem, you may see pixelation effects when transforming the fill. Setting the <db:link xlink:href="qml-qtquick-item.xml#layer.smooth-prop">layer.smooth</db:link> property to true will give better visual results in this case.</db:para>
</db:note>
<db:para>By default no fill item is set and the value is null.</db:para>
<db:note>
<db:para>If set to something other than null, the fillItem property takes precedence over <db:link xlink:href="qml-qtquick-shapes-shapepath.xml#fillColor-prop">fillColor</db:link>. The <db:link xlink:href="qml-qtquick-shapes-shapepath.xml#fillGradient-prop">fillGradient</db:link> property in turn takes precedence over both fillItem and <db:link xlink:href="qml-qtquick-shapes-shapepath.xml#fillColor-prop">fillColor</db:link>.</db:para>
</db:note>
<db:para>This property was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="fillRule-prop">
<db:title>fillRule : enumeration</db:title>
<db:para>This property holds the fill rule. The default value is ShapePath.OddEvenFill. For an explanation on fill rules, see <db:link xlink:href="qpainterpath.xml#setFillRule">QPainterPath::setFillRule</db:link>().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>ShapePath.OddEvenFill</db:para>
</db:td>
<db:td>
<db:para>Odd-even fill rule.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShapePath.WindingFill</db:para>
</db:td>
<db:td>
<db:para>Non-zero winding fill rule.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="fillTransform-prop">
<db:title>[since 6.8] fillTransform : matrix4x4</db:title>
<db:para>This property defines a transform to be applied to the path's fill pattern (<db:link xlink:href="qml-qtquick-shapes-shapepath.xml#fillGradient-prop">fillGradient</db:link> or <db:link xlink:href="qml-qtquick-shapes-shapepath.xml#fillItem-prop">fillItem</db:link>). It has no effect if the fill is a solid color or transparent. By default no fill transform is enabled and the value of this property is the identity matrix.</db:para>
<db:para>This example displays a rectangle filled with the contents of myImageItem rotated 45 degrees around the center point of myShape:</db:para>
<db:programlisting language="qml">ShapePath {
    fillItem: myImageItem
    fillTransform: PlanarTransform.fromRotate(45, myShape.width / 2, myShape.height / 2)
    PathRectangle { x: 10; y: 10; width: myShape.width - 20; height: myShape.height - 20 }
}
</db:programlisting>
<db:para>This property was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="joinStyle-prop">
<db:title>joinStyle : enumeration</db:title>
<db:para>This property defines how joins between two connected lines are drawn. The default value is ShapePath.BevelJoin.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>ShapePath.MiterJoin</db:para>
</db:td>
<db:td>
<db:para>The outer edges of the lines are extended to meet at an angle, and this area is filled.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShapePath.BevelJoin</db:para>
</db:td>
<db:td>
<db:para>The triangular notch between the two lines is filled.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShapePath.RoundJoin</db:para>
</db:td>
<db:td>
<db:para>A circular arc between the two lines is filled.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="miterLimit-prop">
<db:title>miterLimit : int</db:title>
<db:para>When <db:link xlink:href="qml-qtquick-shapes-shapepath.xml#joinStyle-prop">joinStyle</db:link> is set to ShapePath.MiterJoin, this property specifies how far the miter join can extend from the join point.</db:para>
<db:para>The default value is 2.</db:para>
</db:section>
<db:section xml:id="pathHints-prop">
<db:title>[since 6.7] pathHints : PathHints</db:title>
<db:para>This property describes characteristics of the shape. If set, these hints may allow optimized rendering. By default, no hints are set. It can be a combination of the following values:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>ShapePath.PathLinear</db:para>
</db:td>
<db:td>
<db:para>The path only has straight lines, no curves.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShapePath.PathQuadratic</db:para>
</db:td>
<db:td>
<db:para>The path does not have any cubic curves: only lines and quadratic Bezier curves.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShapePath.PathConvex</db:para>
</db:td>
<db:td>
<db:para>The path does not have any dents or holes. All straight lines between two points inside the shape will be completely inside the shape.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShapePath.PathFillOnRight</db:para>
</db:td>
<db:td>
<db:para>The path follows the TrueType convention where outlines around solid fill have their control points ordered clockwise, and outlines around holes in the shape have their control points ordered counter-clockwise.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShapePath.PathSolid</db:para>
</db:td>
<db:td>
<db:para>The path has no holes, or mathematically speaking it is <db:emphasis>simply connected</db:emphasis>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShapePath.PathNonIntersecting</db:para>
</db:td>
<db:td>
<db:para>The path outline does not cross itself.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShapePath.PathNonOverlappingControlPointTriangles</db:para>
</db:td>
<db:td>
<db:para>The triangles defined by the curve control points do not overlap with each other, or with any of the line segments. Also, no line segments intersect. This implies PathNonIntersecting.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Not all hints are logically independent, but the dependencies are not enforced. For example, PathLinear implies PathQuadratic, but it is valid to have PathLinear without PathQuadratic.</db:para>
<db:para>The pathHints property describes a set of statements known to be true; the absence of a hint does not necessarily mean that the corresponding statement is false.</db:para>
<db:para>This property was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="strokeColor-prop">
<db:title>strokeColor : color</db:title>
<db:para>This property holds the stroking color.</db:para>
<db:para>When set to transparent, no stroking occurs.</db:para>
<db:para>The default value is white.</db:para>
</db:section>
<db:section xml:id="strokeStyle-prop">
<db:title>strokeStyle : enumeration</db:title>
<db:para>This property defines the style of stroking. The default value is <db:link xlink:href="qml-qtquick-shapes-shapepath.xml">ShapePath</db:link>.SolidLine.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>ShapePath.SolidLine</db:para>
</db:td>
<db:td>
<db:para>A plain line.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShapePath.DashLine</db:para>
</db:td>
<db:td>
<db:para>Dashes separated by a few pixels.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="strokeWidth-prop">
<db:title>strokeWidth : real</db:title>
<db:para>This property holds the stroke width.</db:para>
<db:para>When set to a negative value, no stroking occurs.</db:para>
<db:para>The default value is 1.</db:para>
</db:section>
</db:section>
</db:article>
