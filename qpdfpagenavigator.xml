<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPdfPageNavigator Class</db:title>
<db:productname>QtPdf</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Pdf Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Navigation history within a PDF document.</db:para>
<db:para>This class was introduced in Qt 6.4.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPdfPageNavigator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qpdfpagenavigator.xml">QPdfPageNavigator</db:link> class remembers which destinations the user has visited in a PDF document, and provides the ability to traverse backward and forward. It is used to implement back and forward actions similar to the back and forward buttons in a web browser.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="backAvailable-prop">
<db:title>[read-only] backAvailable : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>backAvailable</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">backAvailable</db:synopsisinfo>
<db:synopsisinfo role="notifier">backAvailableChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds <db:code>true</db:code> if a <db:emphasis>back</db:emphasis> destination is available in the history: that is, if push() or <db:link xlink:href="qpdfpagenavigator.xml#forward">forward</db:link>() has been called.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">backAvailable</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">backAvailableChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>available</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="currentLocation-prop">
<db:title>[read-only] currentLocation : const QPointF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPointF</db:type>
<db:varname>currentLocation</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">currentLocation</db:synopsisinfo>
<db:synopsisinfo role="notifier">currentLocationChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current location on the page that is being viewed (the location that was last given to <db:link xlink:href="qpdfpagenavigator.xml#jump">jump</db:link>() or <db:link xlink:href="qpdfpagenavigator.xml#update">update</db:link>()). The default is <db:code>0, 0</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> <db:emphasis role="bold">currentLocation</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">currentLocationChanged</db:emphasis>(<db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> <db:emphasis>location</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="currentPage-prop">
<db:title>[read-only] currentPage : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>currentPage</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">currentPage</db:synopsisinfo>
<db:synopsisinfo role="notifier">currentPageChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current page that is being viewed. The default is <db:code>0</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">currentPage</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">currentPageChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>page</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="currentZoom-prop">
<db:title>[read-only] currentZoom : const qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>currentZoom</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">currentZoom</db:synopsisinfo>
<db:synopsisinfo role="notifier">currentZoomChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the magnification scale (1 logical pixel = 1 point) on the page that is being viewed. The default is <db:code>1</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>qreal</db:type> <db:emphasis role="bold">currentZoom</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">currentZoomChanged</db:emphasis>(<db:type>qreal</db:type> <db:emphasis>zoom</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="forwardAvailable-prop">
<db:title>[read-only] forwardAvailable : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>forwardAvailable</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">forwardAvailable</db:synopsisinfo>
<db:synopsisinfo role="notifier">forwardAvailableChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds <db:code>true</db:code> if a <db:emphasis>forward</db:emphasis> destination is available in the history: that is, if <db:link xlink:href="qpdfpagenavigator.xml#back">back</db:link>() has been previously called.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">forwardAvailable</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">forwardAvailableChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>available</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPdfPageNavigator-1">
<db:title>[explicit] QPdfPageNavigator::QPdfPageNavigator(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPdfPageNavigator</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPdfPageNavigator(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a page navigation stack with parent object <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QPdfPageNavigator">
<db:title>[override virtual] QPdfPageNavigator::~QPdfPageNavigator()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QPdfPageNavigator</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPdfPageNavigator() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the page navigation stack.</db:para>
</db:section>
<db:section xml:id="back">
<db:title>void QPdfPageNavigator::back()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>back</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void back()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Pops the stack, updates the <db:link xlink:href="qpdfpagenavigator.xml#currentPage-prop">currentPage</db:link>, <db:link xlink:href="qpdfpagenavigator.xml#currentLocation-prop">currentLocation</db:link> and <db:link xlink:href="qpdfpagenavigator.xml#currentZoom-prop">currentZoom</db:link> properties to the most-recently-viewed destination, and then emits the <db:link xlink:href="qpdfpagenavigator.xml#jumped">jumped</db:link>() signal.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QPdfPageNavigator::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clear the history and restore <db:link xlink:href="qpdfpagenavigator.xml#currentPage-prop">currentPage</db:link>, <db:link xlink:href="qpdfpagenavigator.xml#currentLocation-prop">currentLocation</db:link> and <db:link xlink:href="qpdfpagenavigator.xml#currentZoom-prop">currentZoom</db:link> to their default values.</db:para>
</db:section>
<db:section xml:id="forward">
<db:title>void QPdfPageNavigator::forward()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>forward</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void forward()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Goes back to the page, location and zoom level that was being viewed before <db:link xlink:href="qpdfpagenavigator.xml#back">back</db:link>() was called, and then emits the <db:link xlink:href="qpdfpagenavigator.xml#jumped">jumped</db:link>() signal.</db:para>
<db:para>If a new destination was pushed since the last time <db:link xlink:href="qpdfpagenavigator.xml#back">back</db:link>() was called, the forward() function does nothing, because there is a branch in the timeline which causes the &quot;future&quot; to be lost.</db:para>
</db:section>
<db:section xml:id="jump">
<db:title>void QPdfPageNavigator::jump(QPdfLink <db:emphasis>destination</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>jump</db:methodname>
<db:methodparam>
<db:type>QPdfLink</db:type>
<db:parameter>destination</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void jump(QPdfLink destination)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the given <db:code role="parameter">destination</db:code> to the history of visited locations.</db:para>
<db:para>In this case, PDF views respond to the <db:link xlink:href="qpdfpagenavigator.xml#jumped">jumped</db:link> signal by scrolling to place <db:code>destination.rectangles</db:code> in the viewport, as opposed to placing <db:code>destination.location</db:code> in the viewport. So it's appropriate to call this method to jump to a search result from <db:link xlink:href="qpdfsearchmodel.xml">QPdfSearchModel</db:link> (because the rectangles cover the region of text found). To jump to a hyperlink destination, call jump(page, location, zoom) instead, because in that case the <db:link xlink:href="qpdflink.xml">QPdfLink</db:link> object's <db:code>rectangles</db:code> cover the hyperlink origin location rather than the destination.</db:para>
</db:section>
<db:section xml:id="jump-1">
<db:title>void QPdfPageNavigator::jump(int <db:emphasis>page</db:emphasis>, const QPointF &amp;<db:emphasis>location</db:emphasis>, qreal <db:emphasis>zoom</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>jump</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>page</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>zoom</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void jump(int page, const QPointF &amp;location, qreal zoom)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the given destination, consisting of <db:code role="parameter">page</db:code>, <db:code role="parameter">location</db:code>, and <db:code role="parameter">zoom</db:code>, to the history of visited locations.</db:para>
<db:para>The <db:code role="parameter">zoom</db:code> argument represents magnification (where <db:code>1</db:code> is the default scale, 1 logical pixel = 1 point). If <db:code role="parameter">zoom</db:code> is not given or is <db:code>0</db:code>, <db:link xlink:href="qpdfpagenavigator.xml#currentZoom-prop">currentZoom</db:link> keeps its existing value, and <db:link xlink:href="qpdfpagenavigator.xml#currentZoom-prop">currentZoomChanged</db:link> is not emitted.</db:para>
<db:para>The <db:code role="parameter">location</db:code> should be the same as <db:link xlink:href="qpdflink.xml#location-prop">QPdfLink::location</db:link>() if the user is following a link; and since that is specified as the upper-left corner of the destination, it is best for consistency to always use the location visible in the upper-left corner of the viewport, in points.</db:para>
<db:para>If <db:link xlink:href="qpdfpagenavigator.xml#forwardAvailable-prop">forwardAvailable</db:link> is <db:code>true</db:code>, calling this function represents a branch in the timeline which causes the &quot;future&quot; to be lost, and therefore <db:link xlink:href="qpdfpagenavigator.xml#forwardAvailable-prop">forwardAvailable</db:link> will change to <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="jumped">
<db:title>void QPdfPageNavigator::jumped(QPdfLink <db:emphasis>current</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>jumped</db:methodname>
<db:methodparam>
<db:type>QPdfLink</db:type>
<db:parameter>current</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void jumped(QPdfLink current)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when an abrupt jump occurs, to the <db:code role="parameter">current</db:code> page index, location on the page, and zoom level; but <db:emphasis>not</db:emphasis> when simply scrolling through the document one page at a time. That is, <db:link xlink:href="qpdfpagenavigator.xml#jump">jump</db:link>(), <db:link xlink:href="qpdfpagenavigator.xml#forward">forward</db:link>() and <db:link xlink:href="qpdfpagenavigator.xml#back">back</db:link>() emit this signal, but <db:link xlink:href="qpdfpagenavigator.xml#update">update</db:link>() does not.</db:para>
<db:para>If <db:code>current.rectangles.length &gt; 0</db:code>, they are rectangles that cover a specific destination area: a search result that should be made visible; otherwise, <db:code>current.location</db:code> is the destination location on the <db:code>page</db:code> (a hyperlink destination, or during forward/back navigation).</db:para>
</db:section>
<db:section xml:id="update">
<db:title>void QPdfPageNavigator::update(int <db:emphasis>page</db:emphasis>, const QPointF &amp;<db:emphasis>location</db:emphasis>, qreal <db:emphasis>zoom</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>update</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>page</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>zoom</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void update(int page, const QPointF &amp;location, qreal zoom)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Modifies the current destination, consisting of <db:code role="parameter">page</db:code>, <db:code role="parameter">location</db:code> and <db:code role="parameter">zoom</db:code>.</db:para>
<db:para>This can be called periodically while the user is manually moving around the document, so that after <db:link xlink:href="qpdfpagenavigator.xml#back">back</db:link>() is called, <db:link xlink:href="qpdfpagenavigator.xml#forward">forward</db:link>() will jump back to the most-recently-viewed destination rather than the destination that was last specified by push().</db:para>
<db:para>The <db:code>currentZoomChanged</db:code>, <db:code>currentPageChanged</db:code> and <db:code>currentLocationChanged</db:code> signals will be emitted if the respective properties are actually changed. The <db:link xlink:href="qpdfpagenavigator.xml#jumped">jumped</db:link> signal is not emitted, because this operation represents smooth movement rather than a navigational jump.</db:para>
</db:section>
</db:section>
</db:article>
