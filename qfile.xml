<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFile Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qfile.xml">QFile</db:link> class provides an interface for reading from and writing to files.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFile</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFile is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qfile.xml">QFile</db:link> is an I/O device for reading and writing text and binary files and <db:link xlink:href="resources.xml">resources</db:link>. A <db:link xlink:href="qfile.xml">QFile</db:link> may be used by itself or, more conveniently, with a <db:link xlink:href="qtextstream.xml">QTextStream</db:link> or <db:link xlink:href="qdatastream.xml">QDataStream</db:link>.</db:para>
<db:para>The file name is usually passed in the constructor, but it can be set at any time using <db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>(). <db:link xlink:href="qfile.xml">QFile</db:link> expects the file separator to be '/' regardless of operating system. The use of other separators (e.g., '\') is not supported.</db:para>
<db:para>You can check for a file's existence using <db:link xlink:href="qfile.xml#exists-1">exists</db:link>(), and remove a file using <db:link xlink:href="qfile.xml#remove">remove</db:link>(). (More advanced file system related operations are provided by <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> and <db:link xlink:href="qdir.xml">QDir</db:link>.)</db:para>
<db:para>The file is opened with <db:link xlink:href="qfile.xml#open">open</db:link>(), closed with close(), and flushed with <db:link xlink:href="qtextstream.xml#flush-1">flush</db:link>(). Data is usually read and written using <db:link xlink:href="qdatastream.xml">QDataStream</db:link> or <db:link xlink:href="qtextstream.xml">QTextStream</db:link>, but you can also call the <db:link xlink:href="qiodevice.xml">QIODevice</db:link>-inherited functions read(), readLine(), readAll(), write(). <db:link xlink:href="qfile.xml">QFile</db:link> also inherits getChar(), putChar(), and ungetChar(), which work one character at a time.</db:para>
<db:para>The size of the file is returned by <db:link xlink:href="qfile.xml#size">size</db:link>(). You can get the current file position using pos(), or move to a new file position using seek(). If you've reached the end of the file, atEnd() returns <db:code>true</db:code>.</db:para>
<db:section xml:id="reading-files-directly">
<db:title>Reading Files Directly</db:title>
<db:para>The following example reads a text file line by line:</db:para>
<db:programlisting language="cpp">    QFile file(&quot;in.txt&quot;);
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
        return;

    while (!file.atEnd()) {
        QByteArray line = file.readLine();
        process_line(line);
    }
</db:programlisting>
<db:para>The QIODevice::Text flag passed to <db:link xlink:href="qfile.xml#open">open</db:link>() tells Qt to convert Windows-style line terminators (&quot;\r\n&quot;) into C++-style terminators (&quot;\n&quot;). By default, <db:link xlink:href="qfile.xml">QFile</db:link> assumes binary, i.e. it doesn't perform any conversion on the bytes stored in the file.</db:para>
</db:section>
<db:section xml:id="using-streams-to-read-files">
<db:title>Using Streams to Read Files</db:title>
<db:para>The next example uses <db:link xlink:href="qtextstream.xml">QTextStream</db:link> to read a text file line by line:</db:para>
<db:programlisting language="cpp">    QFile file(&quot;in.txt&quot;);
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
        return;

    QTextStream in(&amp;file);
    while (!in.atEnd()) {
        QString line = in.readLine();
        process_line(line);
    }
</db:programlisting>
<db:para><db:link xlink:href="qtextstream.xml">QTextStream</db:link> takes care of converting the 8-bit data stored on disk into a 16-bit Unicode <db:link xlink:href="qstring.xml">QString</db:link>. By default, it assumes that the user system's local 8-bit encoding is used (e.g., UTF-8 on most unix based operating systems; see QTextCodec::codecForLocale() for details). This can be changed using <db:link xlink:href="">QTextStream::setCodec()</db:link>.</db:para>
<db:para>To write text, we can use operator&lt;&lt;(), which is overloaded to take a <db:link xlink:href="qtextstream.xml">QTextStream</db:link> on the left and various data types (including <db:link xlink:href="qstring.xml">QString</db:link>) on the right:</db:para>
<db:programlisting language="cpp">    QFile file(&quot;out.txt&quot;);
    if (!file.open(QIODevice::WriteOnly | QIODevice::Text))
        return;

    QTextStream out(&amp;file);
    out &lt;&lt; &quot;The magic number is: &quot; &lt;&lt; 49 &lt;&lt; &quot;\n&quot;;
</db:programlisting>
<db:para><db:link xlink:href="qdatastream.xml">QDataStream</db:link> is similar, in that you can use operator&lt;&lt;() to write data and operator&gt;&gt;() to read it back. See the class documentation for details.</db:para>
<db:para>When you use <db:link xlink:href="qfile.xml">QFile</db:link>, <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>, and <db:link xlink:href="qdir.xml">QDir</db:link> to access the file system with Qt, you can use Unicode file names. On Unix, these file names are converted to an 8-bit encoding. If you want to use standard C++ APIs (<db:code>&lt;cstdio&gt;</db:code> or <db:code>&lt;iostream&gt;</db:code>) or platform-specific APIs to access files instead of <db:link xlink:href="qfile.xml">QFile</db:link>, you can use the <db:link xlink:href="qfile.xml#encodeName">encodeName</db:link>() and <db:link xlink:href="qfile.xml#decodeName">decodeName</db:link>() functions to convert between Unicode file names and 8-bit file names.</db:para>
<db:para>On Unix, there are some special system files (e.g. in <db:code>/proc</db:code>) for which <db:link xlink:href="qfile.xml#size">size</db:link>() will always return 0, yet you may still be able to read more data from such a file; the data is generated in direct response to you calling read(). In this case, however, you cannot use atEnd() to determine if there is more data to read (since atEnd() will return true for a file that claims to have size 0). Instead, you should either call readAll(), or call read() or readLine() repeatedly until no more data can be read. The next example uses <db:link xlink:href="qtextstream.xml">QTextStream</db:link> to read <db:code>/proc/modules</db:code> line by line:</db:para>
<db:programlisting language="cpp">    QFile file(&quot;/proc/modules&quot;);
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
        return;

    QTextStream in(&amp;file);
    QString line = in.readLine();
    while (!line.isNull()) {
        process_line(line);
        line = in.readLine();
    }
</db:programlisting>
</db:section>
<db:section xml:id="signals">
<db:title>Signals</db:title>
<db:para>Unlike other <db:link xlink:href="qiodevice.xml">QIODevice</db:link> implementations, such as QTcpSocket, <db:link xlink:href="qfile.xml">QFile</db:link> does not emit the aboutToClose(), bytesWritten(), or readyRead() signals. This implementation detail means that <db:link xlink:href="qfile.xml">QFile</db:link> is not suitable for reading and writing certain types of files, such as device files on Unix platforms.</db:para>
</db:section>
<db:section xml:id="platform-specific-issues">
<db:title>Platform Specific Issues</db:title>
<db:para>File permissions are handled differently on Unix-like systems and Windows. In a non writable directory on Unix-like systems, files cannot be created. This is not always the case on Windows, where, for instance, the 'My Documents' directory usually is not writable, but it is still possible to create files in it.</db:para>
<db:para>Qt's understanding of file permissions is limited, which affects especially the <db:link xlink:href="">QFile::setPermissions()</db:link> function. On Windows, Qt will set only the legacy read-only flag, and that only when none of the Write* flags are passed. Qt does not manipulate access control lists (ACLs), which makes this function mostly useless for NTFS volumes. It may still be of use for USB sticks that use VFAT file systems. POSIX ACLs are not manipulated, either.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:member>
<db:member><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:member>
<db:member><db:link xlink:href="qfileinfo.xml">QFileInfo</db:link></db:member>
<db:member><db:link xlink:href="qdir.xml">QDir</db:link></db:member>
<db:member><db:link xlink:href="resources.xml">The Qt Resource System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFile">
<db:title>[explicit] QFile::QFile(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Constructs a new file object with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QFile-1">
<db:title>QFile::QFile(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Constructs a new file object to represent the file with the given <db:code role="parameter">name</db:code>.</db:para>
</db:section>
<db:section xml:id="QFile-2">
<db:title>QFile::QFile(const QString &amp;<db:emphasis>name</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Constructs a new file object with the given <db:code role="parameter">parent</db:code> to represent the file with the specified <db:code role="parameter">name</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QFile">
<db:title>[noexcept] QFile::~QFile()</db:title>
<db:para>Destroys the file object, closing it if necessary.</db:para>
</db:section>
<db:section xml:id="copy">
<db:title>bool QFile::copy(const QString &amp;<db:emphasis>newName</db:emphasis>)</db:title>
<db:para>Copies the file currently specified by <db:link xlink:href="qfile.xml#fileName">fileName</db:link>() to a file called <db:code role="parameter">newName</db:code>. Returns <db:code>true</db:code> if successful; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Note that if a file with the name <db:code role="parameter">newName</db:code> already exists, copy() returns <db:code>false</db:code> (i.e. <db:link xlink:href="qfile.xml">QFile</db:link> will not overwrite it).</db:para>
<db:para>The source file is closed before it is copied.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="copy-1">
<db:title>[static] bool QFile::copy(const QString &amp;<db:emphasis>fileName</db:emphasis>, const QString &amp;<db:emphasis>newName</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Copies the file <db:code role="parameter">fileName</db:code> to <db:code role="parameter">newName</db:code>. Returns <db:code>true</db:code> if successful; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If a file with the name <db:code role="parameter">newName</db:code> already exists, <db:link xlink:href="qfile.xml#copy">copy</db:link>() returns <db:code>false</db:code> (i.e., <db:link xlink:href="qfile.xml">QFile</db:link> will not overwrite it).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#rename">rename</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="decodeName">
<db:title>[static] QString QFile::decodeName(const QByteArray &amp;<db:emphasis>localFileName</db:emphasis>)</db:title>
<db:para>This does the reverse of QFile::encodeName() using <db:code role="parameter">localFileName</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#encodeName">encodeName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="decodeName-1">
<db:title>[static] QString QFile::decodeName(const char *<db:emphasis>localFileName</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the Unicode version of the given <db:code role="parameter">localFileName</db:code>. See <db:link xlink:href="qfile.xml#encodeName">encodeName</db:link>() for details.</db:para>
</db:section>
<db:section xml:id="encodeName">
<db:title>[static] QByteArray QFile::encodeName(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>Converts <db:code role="parameter">fileName</db:code> to the local 8-bit encoding determined by the user's locale. This is sufficient for file names that the user chooses. File names hard-coded into the application should only use 7-bit ASCII filename characters.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#decodeName">decodeName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exists">
<db:title>[static] bool QFile::exists(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if the file specified by <db:code role="parameter">fileName</db:code> exists; otherwise returns <db:code>false</db:code>.</db:para>
<db:note>
<db:para>If <db:code role="parameter">fileName</db:code> is a symlink that points to a non-existing file, false is returned.</db:para>
</db:note>
</db:section>
<db:section xml:id="exists-1">
<db:title>bool QFile::exists() const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the file specified by <db:link xlink:href="qfile.xml#fileName">fileName</db:link>() exists; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileName">
<db:title>QString QFile::fileName() const</db:title>
<db:para>Returns the name set by <db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>() or to the <db:link xlink:href="qfile.xml">QFile</db:link> constructors.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>()</db:member>
<db:member><db:link xlink:href="">QFileInfo::fileName()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="link">
<db:title>bool QFile::link(const QString &amp;<db:emphasis>linkName</db:emphasis>)</db:title>
<db:para>Creates a link named <db:code role="parameter">linkName</db:code> that points to the file currently specified by <db:link xlink:href="qfile.xml#fileName">fileName</db:link>(). What a link is depends on the underlying filesystem (be it a shortcut on Windows or a symbolic link on Unix). Returns <db:code>true</db:code> if successful; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function will not overwrite an already existing entity in the file system; in this case, <db:code>link()</db:code> will return false and set <db:link xlink:href="">error()</db:link> to return RenameError.</db:para>
<db:note>
<db:para>To create a valid link on Windows, <db:code role="parameter">linkName</db:code> must have a <db:code>.lnk</db:code> file extension.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="link-1">
<db:title>[static] bool QFile::link(const QString &amp;<db:emphasis>fileName</db:emphasis>, const QString &amp;<db:emphasis>linkName</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a link named <db:code role="parameter">linkName</db:code> that points to the file <db:code role="parameter">fileName</db:code>. What a link is depends on the underlying filesystem (be it a shortcut on Windows or a symbolic link on Unix). Returns <db:code>true</db:code> if successful; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#link">link</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open">
<db:title>bool QFile::open(int <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Opens the file using OpenMode <db:code role="parameter">mode</db:code>, returning true if successful; otherwise false.</db:para>
<db:para>The <db:code role="parameter">mode</db:code> must be QIODevice::ReadOnly, QIODevice::WriteOnly, or QIODevice::ReadWrite. It may also have additional flags, such as QIODevice::Text and QIODevice::Unbuffered.</db:para>
<db:note>
<db:para>In WriteOnly or ReadWrite mode, if the relevant file does not already exist, this function will try to create a new file before opening it.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QIODevice::OpenMode</db:link></db:member>
<db:member><db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open-1">
<db:title>bool QFile::open(FILE *<db:emphasis>fh</db:emphasis>, int <db:emphasis>mode</db:emphasis>, int <db:emphasis>handleFlags</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Opens the existing file handle <db:code role="parameter">fh</db:code> in the given <db:code role="parameter">mode</db:code>. <db:code role="parameter">handleFlags</db:code> may be used to specify additional options. Returns <db:code>true</db:code> if successful; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">#include &lt;stdio.h&gt;

void printError(const char* msg)
{
    QFile file;
    file.open(stderr, QIODevice::WriteOnly);
    file.write(msg, qstrlen(msg));        // write to stderr
    file.close();
}
</db:programlisting>
<db:para>When a <db:link xlink:href="qfile.xml">QFile</db:link> is opened using this function, behaviour of close() is controlled by the AutoCloseHandle flag. If AutoCloseHandle is specified, and this function succeeds, then calling close() closes the adopted handle. Otherwise, close() does not actually close the file, but only flushes it.</db:para>
<db:para><db:emphasis role="bold">Warning:</db:emphasis></db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>If <db:code role="parameter">fh</db:code> does not refer to a regular file, e.g., it is <db:code>stdin</db:code>, <db:code>stdout</db:code>, or <db:code>stderr</db:code>, you may not be able to seek(). <db:link xlink:href="qfile.xml#size">size</db:link>() returns <db:code>0</db:code> in those cases. See QIODevice::isSequential() for more information.</db:para>
</db:listitem>
<db:listitem>
<db:para>Since this function opens the file without specifying the file name, you cannot use this <db:link xlink:href="qfile.xml">QFile</db:link> with a <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>.</db:para>
</db:listitem>
</db:orderedlist>
<db:note>
<db:para>For Windows CE you may not be able to call <db:link xlink:href="qfile.xml#resize">resize</db:link>().</db:para>
</db:note>
<db:para><db:emphasis role="bold">Note for the Windows Platform</db:emphasis></db:para>
<db:para><db:code role="parameter">fh</db:code> must be opened in binary mode (i.e., the mode string must contain 'b', as in &quot;rb&quot; or &quot;wb&quot;) when accessing files and other random-access devices. Qt will translate the end-of-line characters if you pass QIODevice::Text to <db:code role="parameter">mode</db:code>. Sequential devices, such as stdin and stdout, are unaffected by this limitation.</db:para>
<db:para>You need to enable support for console applications in order to use the stdin, stdout and stderr streams at the console. To do this, add the following declaration to your application's project file:</db:para>
<db:programlisting language="cpp">CONFIG += console
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">close()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open-2">
<db:title>bool QFile::open(int <db:emphasis>fd</db:emphasis>, int <db:emphasis>mode</db:emphasis>, int <db:emphasis>handleFlags</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Opens the existing file descriptor <db:code role="parameter">fd</db:code> in the given <db:code role="parameter">mode</db:code>. <db:code role="parameter">handleFlags</db:code> may be used to specify additional options. Returns <db:code>true</db:code> if successful; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>When a <db:link xlink:href="qfile.xml">QFile</db:link> is opened using this function, behaviour of close() is controlled by the AutoCloseHandle flag. If AutoCloseHandle is specified, and this function succeeds, then calling close() closes the adopted handle. Otherwise, close() does not actually close the file, but only flushes it.</db:para>
<db:para>The <db:link xlink:href="qfile.xml">QFile</db:link> that is opened using this function is automatically set to be in raw mode; this means that the file input/output functions are slow. If you run into performance issues, you should try to use one of the other open functions.</db:para>
<db:warning>
<db:para>If <db:code role="parameter">fd</db:code> is not a regular file, e.g, it is 0 (<db:code>stdin</db:code>), 1 (<db:code>stdout</db:code>), or 2 (<db:code>stderr</db:code>), you may not be able to seek(). In those cases, <db:link xlink:href="qfile.xml#size">size</db:link>() returns <db:code>0</db:code>. See QIODevice::isSequential() for more information.</db:para>
</db:warning>
<db:warning>
<db:para>For Windows CE you may not be able to call seek(), and <db:link xlink:href="qfile.xml#size">size</db:link>() returns <db:code>0</db:code>.</db:para>
</db:warning>
<db:warning>
<db:para>Since this function opens the file without specifying the file name, you cannot use this <db:link xlink:href="qfile.xml">QFile</db:link> with a <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">close()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="permissions">
<db:title>int QFile::permissions() const</db:title>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#setPermissions">setPermissions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="permissions-1">
<db:title>[static] int QFile::permissions(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the complete OR-ed together combination of QFile::Permission for <db:code role="parameter">fileName</db:code>.</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>bool QFile::remove()</db:title>
<db:para>Removes the file specified by <db:link xlink:href="qfile.xml#fileName">fileName</db:link>(). Returns <db:code>true</db:code> if successful; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>The file is closed before it is removed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove-1">
<db:title>[static] bool QFile::remove(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Removes the file specified by the <db:code role="parameter">fileName</db:code> given.</db:para>
<db:para>Returns <db:code>true</db:code> if successful; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rename">
<db:title>bool QFile::rename(const QString &amp;<db:emphasis>newName</db:emphasis>)</db:title>
<db:para>Renames the file currently specified by <db:link xlink:href="qfile.xml#fileName">fileName</db:link>() to <db:code role="parameter">newName</db:code>. Returns <db:code>true</db:code> if successful; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If a file with the name <db:code role="parameter">newName</db:code> already exists, rename() returns <db:code>false</db:code> (i.e., <db:link xlink:href="qfile.xml">QFile</db:link> will not overwrite it).</db:para>
<db:para>The file is closed before it is renamed.</db:para>
<db:para>If the rename operation fails, Qt will attempt to copy this file's contents to <db:code role="parameter">newName</db:code>, and then remove this file, keeping only <db:code role="parameter">newName</db:code>. If that copy operation fails or this file can't be removed, the destination file <db:code role="parameter">newName</db:code> is removed to restore the old state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rename-1">
<db:title>[static] bool QFile::rename(const QString &amp;<db:emphasis>oldName</db:emphasis>, const QString &amp;<db:emphasis>newName</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Renames the file <db:code role="parameter">oldName</db:code> to <db:code role="parameter">newName</db:code>. Returns <db:code>true</db:code> if successful; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If a file with the name <db:code role="parameter">newName</db:code> already exists, <db:link xlink:href="qfile.xml#rename">rename</db:link>() returns <db:code>false</db:code> (i.e., <db:link xlink:href="qfile.xml">QFile</db:link> will not overwrite it).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#rename">rename</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resize">
<db:title>bool QFile::resize(qint64 <db:emphasis>sz</db:emphasis>)</db:title>
</db:section>
<db:section xml:id="resize-1">
<db:title>[static] bool QFile::resize(const QString &amp;<db:emphasis>fileName</db:emphasis>, qint64 <db:emphasis>sz</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets <db:code role="parameter">fileName</db:code> to size (in bytes) <db:code role="parameter">sz</db:code>. Returns <db:code>true</db:code> if the file if the resize succeeds; false otherwise. If <db:code role="parameter">sz</db:code> is larger than <db:code role="parameter">fileName</db:code> currently is the new bytes will be set to 0, if <db:code role="parameter">sz</db:code> is smaller the file is simply truncated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#resize">resize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFileName">
<db:title>void QFile::setFileName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">name</db:code> of the file. The name can have no path, a relative path, or an absolute path.</db:para>
<db:para>Do not call this function if the file has already been opened.</db:para>
<db:para>If the file name has no path or a relative path, the path used will be the application's current directory path <db:emphasis>at the time of the <db:link xlink:href="qfile.xml#open">open</db:link>()</db:emphasis> call.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFile file;
QDir::setCurrent(&quot;/tmp&quot;);
file.setFileName(&quot;readme.txt&quot;);
QDir::setCurrent(&quot;/home&quot;);
file.open(QIODevice::ReadOnly);      // opens &quot;/home/readme.txt&quot; under Unix
</db:programlisting>
<db:para>Note that the directory separator &quot;/&quot; works for all operating systems supported by Qt.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml">QFileInfo</db:link></db:member>
<db:member><db:link xlink:href="qdir.xml">QDir</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPermissions">
<db:title>bool QFile::setPermissions(int <db:emphasis>permissions</db:emphasis>)</db:title>
<db:para>Sets the permissions for the file to the <db:code role="parameter">permissions</db:code> specified. Returns <db:code>true</db:code> if successful, or <db:code>false</db:code> if the permissions cannot be modified.</db:para>
<db:warning>
<db:para>This function does not manipulate ACLs, which may limit its effectiveness.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#permissions">permissions</db:link>()</db:member>
<db:member><db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPermissions-1">
<db:title>[static] bool QFile::setPermissions(const QString &amp;<db:emphasis>fileName</db:emphasis>, int <db:emphasis>permissions</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the permissions for <db:code role="parameter">fileName</db:code> file to <db:code role="parameter">permissions</db:code>.</db:para>
</db:section>
<db:section xml:id="size">
<db:title>qint64 QFile::size() const</db:title>
</db:section>
<db:section xml:id="symLinkTarget">
<db:title>[static, since 4.2] QString QFile::symLinkTarget(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>Returns the absolute path of the file or directory referred to by the symlink (or shortcut on Windows) specified by <db:code role="parameter">fileName</db:code>, or returns an empty string if the <db:code role="parameter">fileName</db:code> does not correspond to a symbolic link.</db:para>
<db:para>This name may not represent an existing file; it is only a string. QFile::exists() returns <db:code>true</db:code> if the symlink points to an existing file.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="symLinkTarget-1">
<db:title>[since 4.2] QString QFile::symLinkTarget() const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the absolute path of the file or directory a symlink (or shortcut on Windows) points to, or a an empty string if the object isn't a symbolic link.</db:para>
<db:para>This name may not represent an existing file; it is only a string. QFile::exists() returns <db:code>true</db:code> if the symlink points to an existing file.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QFile</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qfile.xml">QFile</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="readLink">
<db:title>[deprecated] QString QFile::readLink() const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qfile.xml#symLinkTarget-1">symLinkTarget</db:link>() instead.</db:para>
</db:section>
<db:section xml:id="readLink-1">
<db:title>[static, deprecated] QString QFile::readLink(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qfile.xml#symLinkTarget-1">symLinkTarget</db:link>() instead.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
