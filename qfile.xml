<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFile Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qfile.xml">QFile</db:link> class provides an interface for reading from and writing to files.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFile</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qfiledevice.xml" xlink:role="class">QFileDevice</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qtemporaryfile.xml" xlink:role="class">QTemporaryFile</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFile is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qfile.xml">QFile</db:link> is an I/O device for reading and writing text and binary files and <db:link xlink:href="resources.xml">resources</db:link>. A <db:link xlink:href="qfile.xml">QFile</db:link> may be used by itself or, more conveniently, with a <db:link xlink:href="qtextstream.xml">QTextStream</db:link> or <db:link xlink:href="qdatastream.xml">QDataStream</db:link>.</db:para>
<db:para>The file name is usually passed in the constructor, but it can be set at any time using <db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>(). <db:link xlink:href="qfile.xml">QFile</db:link> expects the file separator to be '/' regardless of operating system. The use of other separators (e.g., '\') is not supported.</db:para>
<db:para>You can check for a file's existence using <db:link xlink:href="qfile.xml#exists-1">exists</db:link>(), and remove a file using <db:link xlink:href="qfile.xml#remove">remove</db:link>(). (More advanced file system related operations are provided by <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> and <db:link xlink:href="qdir.xml">QDir</db:link>.)</db:para>
<db:para>The file is opened with <db:link xlink:href="qfile.xml#open">open</db:link>(), closed with <db:link xlink:href="qfiledevice.xml#close">close</db:link>(), and flushed with <db:link xlink:href="qfiledevice.xml#flush">flush</db:link>(). Data is usually read and written using <db:link xlink:href="qdatastream.xml">QDataStream</db:link> or <db:link xlink:href="qtextstream.xml">QTextStream</db:link>, but you can also call the <db:link xlink:href="qiodevice.xml">QIODevice</db:link>-inherited functions <db:link xlink:href="qiodevice.xml#read">read</db:link>(), <db:link xlink:href="qiodevice.xml#readLine">readLine</db:link>(), <db:link xlink:href="qiodevice.xml#readAll">readAll</db:link>(), <db:link xlink:href="qiodevice.xml#write">write</db:link>(). <db:link xlink:href="qfile.xml">QFile</db:link> also inherits <db:link xlink:href="qiodevice.xml#getChar">getChar</db:link>(), <db:link xlink:href="qiodevice.xml#putChar">putChar</db:link>(), and <db:link xlink:href="qiodevice.xml#ungetChar">ungetChar</db:link>(), which work one character at a time.</db:para>
<db:para>The size of the file is returned by <db:link xlink:href="qfile.xml#size">size</db:link>(). You can get the current file position using <db:link xlink:href="qfiledevice.xml#pos">pos</db:link>(), or move to a new file position using <db:link xlink:href="qfiledevice.xml#seek">seek</db:link>(). If you've reached the end of the file, <db:link xlink:href="qfiledevice.xml#atEnd">atEnd</db:link>() returns true.</db:para>
<db:section xml:id="reading-files-directly">
<db:title>Reading Files Directly</db:title>
<db:para>The following example reads a text file line by line:</db:para>
<db:programlisting language="cpp">    QFile file(&quot;in.txt&quot;);
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
        return;

    while (!file.atEnd()) {
        QByteArray line = file.readLine();
        process_line(line);
    }
</db:programlisting>
<db:para>The QIODevice::Text flag passed to <db:link xlink:href="qfile.xml#open">open</db:link>() tells Qt to convert Windows-style line terminators (&quot;\r\n&quot;) into C++-style terminators (&quot;\n&quot;). By default, <db:link xlink:href="qfile.xml">QFile</db:link> assumes binary, i.e. it doesn't perform any conversion on the bytes stored in the file.</db:para>
</db:section>
<db:section xml:id="using-streams-to-read-files">
<db:title>Using Streams to Read Files</db:title>
<db:para>The next example uses <db:link xlink:href="qtextstream.xml">QTextStream</db:link> to read a text file line by line:</db:para>
<db:programlisting language="cpp">    QFile file(&quot;in.txt&quot;);
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
        return;

    QTextStream in(&amp;amp;file);
    while (!in.atEnd()) {
        QString line = in.readLine();
        process_line(line);
    }
</db:programlisting>
<db:para><db:link xlink:href="qtextstream.xml">QTextStream</db:link> takes care of converting the 8-bit data stored on disk into a 16-bit Unicode <db:link xlink:href="qstring.xml">QString</db:link>. By default, it assumes that the file is encoded in UTF-8. This can be changed using <db:link xlink:href="qtextstream.xml#setEncoding">QTextStream::setEncoding</db:link>().</db:para>
<db:para>To write text, we can use operator&lt;&lt;(), which is overloaded to take a <db:link xlink:href="qtextstream.xml">QTextStream</db:link> on the left and various data types (including <db:link xlink:href="qstring.xml">QString</db:link>) on the right:</db:para>
<db:programlisting language="cpp">    QFile file(&quot;out.txt&quot;);
    if (!file.open(QIODevice::WriteOnly | QIODevice::Text))
        return;

    QTextStream out(&amp;amp;file);
    out &amp;lt;&amp;lt; &quot;The magic number is: &quot; &amp;lt;&amp;lt; 49 &amp;lt;&amp;lt; &quot;\n&quot;;
</db:programlisting>
<db:para><db:link xlink:href="qdatastream.xml">QDataStream</db:link> is similar, in that you can use operator&lt;&lt;() to write data and operator&gt;&gt;() to read it back. See the class documentation for details.</db:para>
<db:para>When you use <db:link xlink:href="qfile.xml">QFile</db:link>, <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>, and <db:link xlink:href="qdir.xml">QDir</db:link> to access the file system with Qt, you can use Unicode file names. On Unix, these file names are converted to an 8-bit encoding. If you want to use standard C++ APIs (&lt;cstdio&gt; or &lt;iostream&gt;) or platform-specific APIs to access files instead of <db:link xlink:href="qfile.xml">QFile</db:link>, you can use the <db:link xlink:href="qfile.xml#encodeName">encodeName</db:link>() and <db:link xlink:href="qfile.xml#decodeName">decodeName</db:link>() functions to convert between Unicode file names and 8-bit file names.</db:para>
<db:para>On Unix, there are some special system files (e.g. in /proc) for which <db:link xlink:href="qfile.xml#size">size</db:link>() will always return 0, yet you may still be able to read more data from such a file; the data is generated in direct response to you calling <db:link xlink:href="qiodevice.xml#read">read</db:link>(). In this case, however, you cannot use <db:link xlink:href="qfiledevice.xml#atEnd">atEnd</db:link>() to determine if there is more data to read (since <db:link xlink:href="qfiledevice.xml#atEnd">atEnd</db:link>() will return true for a file that claims to have size 0). Instead, you should either call <db:link xlink:href="qiodevice.xml#readAll">readAll</db:link>(), or call <db:link xlink:href="qiodevice.xml#read">read</db:link>() or <db:link xlink:href="qiodevice.xml#readLine">readLine</db:link>() repeatedly until no more data can be read. The next example uses <db:link xlink:href="qtextstream.xml">QTextStream</db:link> to read /proc/modules line by line:</db:para>
<db:programlisting language="cpp">    QFile file(&quot;/proc/modules&quot;);
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
        return;

    QTextStream in(&amp;amp;file);
    QString line = in.readLine();
    while (!line.isNull()) {
        process_line(line);
        line = in.readLine();
    }
</db:programlisting>
</db:section>
<db:section xml:id="signals">
<db:title>Signals</db:title>
<db:para>Unlike other <db:link xlink:href="qiodevice.xml">QIODevice</db:link> implementations, such as QTcpSocket, <db:link xlink:href="qfile.xml">QFile</db:link> does not emit the <db:link xlink:href="qiodevice.xml#aboutToClose">aboutToClose</db:link>(), <db:link xlink:href="qiodevice.xml#bytesWritten">bytesWritten</db:link>(), or <db:link xlink:href="qiodevice.xml#readyRead">readyRead</db:link>() signals. This implementation detail means that <db:link xlink:href="qfile.xml">QFile</db:link> is not suitable for reading and writing certain types of files, such as device files on Unix platforms.</db:para>
</db:section>
<db:section xml:id="platform-specific-issues">
<db:title>Platform Specific Issues</db:title>
<db:para>File permissions are handled differently on Unix-like systems and Windows. In a non <db:link xlink:href="qiodevice.xml#isWritable">writable</db:link> directory on Unix-like systems, files cannot be created. This is not always the case on Windows, where, for instance, the 'My Documents' directory usually is not writable, but it is still possible to create files in it.</db:para>
<db:para>Qt's understanding of file permissions is limited, which affects especially the <db:link xlink:href="qfile.xml#setPermissions">QFile::setPermissions</db:link>() function. On Windows, Qt will set only the legacy read-only flag, and that only when none of the Write* flags are passed. Qt does not manipulate access control lists (ACLs), which makes this function mostly useless for NTFS volumes. It may still be of use for USB sticks that use VFAT file systems. POSIX ACLs are not manipulated, either.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:member>
<db:member><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:member>
<db:member><db:link xlink:href="qfileinfo.xml">QFileInfo</db:link></db:member>
<db:member><db:link xlink:href="qdir.xml">QDir</db:link></db:member>
<db:member><db:link xlink:href="resources.xml">The Qt Resource System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFile">
<db:title>QFile::QFile()</db:title>
<db:constructorsynopsis>
<db:methodname>QFile</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QFile()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qfile.xml">QFile</db:link> object.</db:para>
</db:section>
<db:section xml:id="QFile-1">
<db:title>QFile::QFile(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QFile</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QFile(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new file object to represent the file with the given <db:code role="parameter">name</db:code>.</db:para>
</db:section>
<db:section xml:id="QFile-2">
<db:title>[since 6.0] QFile::QFile(const std::filesystem::path &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QFile</db:methodname>
<db:methodparam>
<db:type>const std::filesystem::path &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QFile(const std::filesystem::path &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new file object to represent the file with the given <db:code role="parameter">name</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="QFile-3">
<db:title>[explicit] QFile::QFile(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QFile</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QFile(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new file object with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QFile-4">
<db:title>QFile::QFile(const QString &amp;<db:emphasis>name</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QFile</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QFile(const QString &amp;name, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new file object with the given <db:code role="parameter">parent</db:code> to represent the file with the specified <db:code role="parameter">name</db:code>.</db:para>
</db:section>
<db:section xml:id="QFile-5">
<db:title>[since 6.0] QFile::QFile(const std::filesystem::path &amp;<db:emphasis>name</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QFile</db:methodname>
<db:methodparam>
<db:type>const std::filesystem::path &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QFile(const std::filesystem::path &amp;name, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new file object with the given <db:code role="parameter">parent</db:code> to represent the file with the specified <db:code role="parameter">name</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="dtor.QFile">
<db:title>[virtual] QFile::~QFile()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QFile</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QFile()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the file object, closing it if necessary.</db:para>
</db:section>
<db:section xml:id="copy">
<db:title>bool QFile::copy(const QString &amp;<db:emphasis>newName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>copy</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>newName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool copy(const QString &amp;newName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copies the file named <db:link xlink:href="qfile.xml#fileName">fileName</db:link>() to <db:code role="parameter">newName</db:code>.</db:para>
<db:para>This file is closed before it is copied.</db:para>
<db:para>If the copied file is a symbolic link (symlink), the file it refers to is copied, not the link itself. With the exception of permissions, which are copied, no other file metadata is copied.</db:para>
<db:para>Returns true if successful; otherwise returns false.</db:para>
<db:para>Note that if a file with the name <db:code role="parameter">newName</db:code> already exists, copy() returns false. This means <db:link xlink:href="qfile.xml">QFile</db:link> will not overwrite it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="copy-1">
<db:title>[static] bool QFile::copy(const QString &amp;<db:emphasis>fileName</db:emphasis>, const QString &amp;<db:emphasis>newName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>copy</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>newName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool copy(const QString &amp;fileName, const QString &amp;newName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Copies the file named <db:code role="parameter">fileName</db:code> to <db:code role="parameter">newName</db:code>.</db:para>
<db:para>This file is closed before it is copied.</db:para>
<db:para>If the copied file is a symbolic link (symlink), the file it refers to is copied, not the link itself. With the exception of permissions, which are copied, no other file metadata is copied.</db:para>
<db:para>Returns true if successful; otherwise returns false.</db:para>
<db:para>Note that if a file with the name <db:code role="parameter">newName</db:code> already exists, <db:link xlink:href="qfile.xml#copy">copy</db:link>() returns false. This means <db:link xlink:href="qfile.xml">QFile</db:link> will not overwrite it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#rename">rename</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="copy-2">
<db:title>[since 6.0] bool QFile::copy(const std::filesystem::path &amp;<db:emphasis>newName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>copy</db:methodname>
<db:methodparam>
<db:type>const std::filesystem::path &amp;</db:type>
<db:parameter>newName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool copy(const std::filesystem::path &amp;newName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="decodeName">
<db:title>[static] QString QFile::decodeName(const QByteArray &amp;<db:emphasis>localFileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>decodeName</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>localFileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString decodeName(const QByteArray &amp;localFileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This does the reverse of <db:link xlink:href="qfile.xml#encodeName">QFile::encodeName</db:link>() using <db:code role="parameter">localFileName</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#encodeName">encodeName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="decodeName-1">
<db:title>[static] QString QFile::decodeName(const char *<db:emphasis>localFileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>decodeName</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>localFileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString decodeName(const char *localFileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the Unicode version of the given <db:code role="parameter">localFileName</db:code>. See <db:link xlink:href="qfile.xml#encodeName">encodeName</db:link>() for details.</db:para>
</db:section>
<db:section xml:id="encodeName">
<db:title>[static] QByteArray QFile::encodeName(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>encodeName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray encodeName(const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts <db:code role="parameter">fileName</db:code> to the local 8-bit encoding determined by the user's locale. This is sufficient for file names that the user chooses. File names hard-coded into the application should only use 7-bit ASCII filename characters.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#decodeName">decodeName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exists">
<db:title>[static] bool QFile::exists(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>exists</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool exists(const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the file specified by <db:code role="parameter">fileName</db:code> exists; otherwise returns false.</db:para>
<db:note>
<db:para>If <db:code role="parameter">fileName</db:code> is a symlink that points to a non-existing file, false is returned.</db:para>
</db:note>
</db:section>
<db:section xml:id="exists-1">
<db:title>bool QFile::exists() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>exists</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool exists() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns true if the file specified by <db:link xlink:href="qfile.xml#fileName">fileName</db:link>() exists; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileName">
<db:title>[override virtual] QString QFile::fileName() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>fileName</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fileName() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qfiledevice.xml#fileName" role="function">QFileDevice::fileName() const</db:link>.</db:para>
<db:para>Returns the name set by <db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>() or to the <db:link xlink:href="qfile.xml">QFile</db:link> constructors.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml#fileName">QFileInfo::fileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesystemFileName">
<db:title>[since 6.0] std::filesystem::path QFile::filesystemFileName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>std::filesystem::path</db:type>
<db:methodname>filesystemFileName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::filesystem::path filesystemFileName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:link xlink:href="qfile.xml#fileName">fileName</db:link>() as std::filesystem::path.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="filesystemSymLinkTarget">
<db:title>[since 6.3] std::filesystem::path QFile::filesystemSymLinkTarget() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>std::filesystem::path</db:type>
<db:methodname>filesystemSymLinkTarget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::filesystem::path filesystemSymLinkTarget() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:link xlink:href="qfile.xml#symLinkTarget-1">symLinkTarget</db:link>() as std::filesystem::path.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="filesystemSymLinkTarget-1">
<db:title>[static, since 6.3] std::filesystem::path QFile::filesystemSymLinkTarget(const std::filesystem::path &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>std::filesystem::path</db:type>
<db:methodname>filesystemSymLinkTarget</db:methodname>
<db:methodparam>
<db:type>const std::filesystem::path &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">std::filesystem::path filesystemSymLinkTarget(const std::filesystem::path &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:link xlink:href="qfile.xml#symLinkTarget-1">symLinkTarget</db:link>() as std::filesystem::path of <db:code role="parameter">fileName</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="link">
<db:title>bool QFile::link(const QString &amp;<db:emphasis>linkName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>link</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>linkName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool link(const QString &amp;linkName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a link named <db:code role="parameter">linkName</db:code> that points to the file currently specified by <db:link xlink:href="qfile.xml#fileName">fileName</db:link>(). What a link is depends on the underlying filesystem (be it a shortcut on Windows or a symbolic link on Unix). Returns true if successful; otherwise returns false.</db:para>
<db:para>This function will not overwrite an already existing entity in the file system; in this case, link() will return false and set <db:link xlink:href="qfiledevice.xml#error">error</db:link>() to return <db:link xlink:href="qfiledevice.xml#FileError-enum">RenameError</db:link>.</db:para>
<db:note>
<db:para>To create a valid link on Windows, <db:code role="parameter">linkName</db:code> must have a .lnk file extension.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="link-1">
<db:title>[static] bool QFile::link(const QString &amp;<db:emphasis>fileName</db:emphasis>, const QString &amp;<db:emphasis>linkName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>link</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>linkName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool link(const QString &amp;fileName, const QString &amp;linkName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a link named <db:code role="parameter">linkName</db:code> that points to the file <db:code role="parameter">fileName</db:code>. What a link is depends on the underlying filesystem (be it a shortcut on Windows or a symbolic link on Unix). Returns true if successful; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#link">link</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="link-2">
<db:title>[since 6.0] bool QFile::link(const std::filesystem::path &amp;<db:emphasis>newName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>link</db:methodname>
<db:methodparam>
<db:type>const std::filesystem::path &amp;</db:type>
<db:parameter>newName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool link(const std::filesystem::path &amp;newName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="moveToTrash">
<db:title>[since 5.15] bool QFile::moveToTrash()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>moveToTrash</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool moveToTrash()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the file specified by <db:link xlink:href="qfile.xml#fileName">fileName</db:link>() to the trash. Returns true if successful, and sets the <db:link xlink:href="qfile.xml#fileName">fileName</db:link>() to the path at which the file can be found within the trash; otherwise returns false.</db:para>
<db:note>
<db:para>On systems where the system API doesn't report the location of the file in the trash, <db:link xlink:href="qfile.xml#fileName">fileName</db:link>() will be set to the null string once the file has been moved. On systems that don't have a trash can, this function always returns false.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="moveToTrash-1">
<db:title>[static, since 5.15] bool QFile::moveToTrash(const QString &amp;<db:emphasis>fileName</db:emphasis>, QString *<db:emphasis>pathInTrash</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>moveToTrash</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>pathInTrash</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool moveToTrash(const QString &amp;fileName, QString *pathInTrash)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Moves the file specified by <db:link xlink:href="qfile.xml#fileName">fileName</db:link>() to the trash. Returns true if successful, and sets <db:code role="parameter">pathInTrash</db:code> (if provided) to the path at which the file can be found within the trash; otherwise returns false.</db:para>
<db:note>
<db:para>On systems where the system API doesn't report the path of the file in the trash, <db:code role="parameter">pathInTrash</db:code> will be set to the null string once the file has been moved. On systems that don't have a trash can, this function always returns false.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="open">
<db:title>[override virtual] bool QFile::open(QIODeviceBase::OpenMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>open</db:methodname>
<db:methodparam>
<db:type>QIODeviceBase::OpenMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool open(QIODeviceBase::OpenMode mode) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#open" role="function">QIODevice::open(QIODeviceBase::OpenMode mode)</db:link>.</db:para>
<db:para>Opens the file using OpenMode <db:code role="parameter">mode</db:code>, returning true if successful; otherwise false.</db:para>
<db:para>The <db:code role="parameter">mode</db:code> must be QIODevice::ReadOnly, QIODevice::WriteOnly, or QIODevice::ReadWrite. It may also have additional flags, such as QIODevice::Text and QIODevice::Unbuffered.</db:para>
<db:note>
<db:para>In <db:link xlink:href="qiodevicebase.xml#OpenModeFlag-enum">WriteOnly</db:link> or <db:link xlink:href="qiodevicebase.xml#OpenModeFlag-enum">ReadWrite</db:link> mode, if the relevant file does not already exist, this function will try to create a new file before opening it. The file will be created with mode 0666 masked by the umask on POSIX systems, and with permissions inherited from the parent directory on Windows.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiodevicebase.xml#OpenModeFlag-enum">QIODevice::OpenMode</db:link></db:member>
<db:member><db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open-1">
<db:title>[since 6.3] bool QFile::open(QIODeviceBase::OpenMode <db:emphasis>mode</db:emphasis>, QFileDevice::Permissions <db:emphasis>permissions</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>open</db:methodname>
<db:methodparam>
<db:type>QIODeviceBase::OpenMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QFileDevice::Permissions</db:type>
<db:parameter>permissions</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool open(QIODeviceBase::OpenMode mode, QFileDevice::Permissions permissions)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>If the file does not exist and <db:code role="parameter">mode</db:code> implies creating it, it is created with the specified <db:code role="parameter">permissions</db:code>.</db:para>
<db:para>On POSIX systems the actual permissions are influenced by the value of umask.</db:para>
<db:para>On Windows the permissions are emulated using ACLs. These ACLs may be in non-canonical order when the group is granted less permissions than others. Files and directories with such permissions will generate warnings when the Security tab of the Properties dialog is opened. Granting the group all permissions granted to others avoids such warnings.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiodevicebase.xml#OpenModeFlag-enum">QIODevice::OpenMode</db:link></db:member>
<db:member><db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open-2">
<db:title>bool QFile::open(FILE *<db:emphasis>fh</db:emphasis>, QIODeviceBase::OpenMode <db:emphasis>mode</db:emphasis>, QFileDevice::FileHandleFlags <db:emphasis>handleFlags</db:emphasis> = DontCloseHandle)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>open</db:methodname>
<db:methodparam>
<db:type>FILE *</db:type>
<db:parameter>fh</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QIODeviceBase::OpenMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QFileDevice::FileHandleFlags</db:type>
<db:parameter>handleFlags</db:parameter>
<db:initializer>DontCloseHandle</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool open(FILE *fh, QIODeviceBase::OpenMode mode, QFileDevice::FileHandleFlags handleFlags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Opens the existing file handle <db:code role="parameter">fh</db:code> in the given <db:code role="parameter">mode</db:code>. <db:code role="parameter">handleFlags</db:code> may be used to specify additional options. Returns true if successful; otherwise returns false.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">#include &amp;lt;stdio.h&amp;gt;

void printError(const char* msg)
{
    QFile file;
    file.open(stderr, QIODevice::WriteOnly);
    file.write(msg, qstrlen(msg));        // write to stderr
    file.close();
}
</db:programlisting>
<db:para>When a <db:link xlink:href="qfile.xml">QFile</db:link> is opened using this function, behaviour of <db:link xlink:href="qfiledevice.xml#close">close</db:link>() is controlled by the AutoCloseHandle flag. If AutoCloseHandle is specified, and this function succeeds, then calling <db:link xlink:href="qfiledevice.xml#close">close</db:link>() closes the adopted handle. Otherwise, <db:link xlink:href="qfiledevice.xml#close">close</db:link>() does not actually close the file, but only flushes it.</db:para>
<db:para><db:emphasis role="bold">Warning:</db:emphasis></db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>If <db:code role="parameter">fh</db:code> does not refer to a regular file, e.g., it is stdin, stdout, or stderr, you may not be able to <db:link xlink:href="qfiledevice.xml#seek">seek</db:link>(). <db:link xlink:href="qfile.xml#size">size</db:link>() returns 0 in those cases. See <db:link xlink:href="qiodevice.xml#isSequential">QIODevice::isSequential</db:link>() for more information.</db:para>
</db:listitem>
<db:listitem>
<db:para>Since this function opens the file without specifying the file name, you cannot use this <db:link xlink:href="qfile.xml">QFile</db:link> with a <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>.</db:para>
</db:listitem>
</db:orderedlist>
<db:para><db:emphasis role="bold">Note for the Windows Platform</db:emphasis></db:para>
<db:para><db:code role="parameter">fh</db:code> must be opened in binary mode (i.e., the mode string must contain 'b', as in &quot;rb&quot; or &quot;wb&quot;) when accessing files and other random-access devices. Qt will translate the end-of-line characters if you pass QIODevice::Text to <db:code role="parameter">mode</db:code>. Sequential devices, such as stdin and stdout, are unaffected by this limitation.</db:para>
<db:para>You need to enable support for console applications in order to use the stdin, stdout and stderr streams at the console. To do this, add the following declaration to your application's project file:</db:para>
<db:programlisting language="cpp">CONFIG += console
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledevice.xml#close">close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open-3">
<db:title>bool QFile::open(int <db:emphasis>fd</db:emphasis>, QIODeviceBase::OpenMode <db:emphasis>mode</db:emphasis>, QFileDevice::FileHandleFlags <db:emphasis>handleFlags</db:emphasis> = DontCloseHandle)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>open</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>fd</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QIODeviceBase::OpenMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QFileDevice::FileHandleFlags</db:type>
<db:parameter>handleFlags</db:parameter>
<db:initializer>DontCloseHandle</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool open(int fd, QIODeviceBase::OpenMode mode, QFileDevice::FileHandleFlags handleFlags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Opens the existing file descriptor <db:code role="parameter">fd</db:code> in the given <db:code role="parameter">mode</db:code>. <db:code role="parameter">handleFlags</db:code> may be used to specify additional options. Returns true if successful; otherwise returns false.</db:para>
<db:para>When a <db:link xlink:href="qfile.xml">QFile</db:link> is opened using this function, behaviour of <db:link xlink:href="qfiledevice.xml#close">close</db:link>() is controlled by the AutoCloseHandle flag. If AutoCloseHandle is specified, and this function succeeds, then calling <db:link xlink:href="qfiledevice.xml#close">close</db:link>() closes the adopted handle. Otherwise, <db:link xlink:href="qfiledevice.xml#close">close</db:link>() does not actually close the file, but only flushes it.</db:para>
<db:warning>
<db:para>If <db:code role="parameter">fd</db:code> is not a regular file, e.g, it is 0 (stdin), 1 (stdout), or 2 (stderr), you may not be able to <db:link xlink:href="qfiledevice.xml#seek">seek</db:link>(). In those cases, <db:link xlink:href="qfile.xml#size">size</db:link>() returns 0. See <db:link xlink:href="qiodevice.xml#isSequential">QIODevice::isSequential</db:link>() for more information.</db:para>
</db:warning>
<db:warning>
<db:para>Since this function opens the file without specifying the file name, you cannot use this <db:link xlink:href="qfile.xml">QFile</db:link> with a <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfiledevice.xml#close">close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="permissions">
<db:title>[override virtual] QFileDevice::Permissions QFile::permissions() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QFileDevice::Permissions</db:type>
<db:methodname>permissions</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFileDevice::Permissions permissions() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qfiledevice.xml#permissions" role="function">QFileDevice::permissions() const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#setPermissions">setPermissions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="permissions-1">
<db:title>[static] QFileDevice::Permissions QFile::permissions(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QFileDevice::Permissions</db:type>
<db:methodname>permissions</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QFileDevice::Permissions permissions(const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the complete OR-ed together combination of QFile::Permission for <db:code role="parameter">fileName</db:code>.</db:para>
</db:section>
<db:section xml:id="permissions-2">
<db:title>[static, since 6.0] QFileDevice::Permissions QFile::permissions(const std::filesystem::path &amp;<db:emphasis>filename</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QFileDevice::Permissions</db:type>
<db:methodname>permissions</db:methodname>
<db:methodparam>
<db:type>const std::filesystem::path &amp;</db:type>
<db:parameter>filename</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QFileDevice::Permissions permissions(const std::filesystem::path &amp;filename)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>bool QFile::remove()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>remove</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool remove()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the file specified by <db:link xlink:href="qfile.xml#fileName">fileName</db:link>(). Returns true if successful; otherwise returns false.</db:para>
<db:para>The file is closed before it is removed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove-1">
<db:title>[static] bool QFile::remove(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool remove(const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Removes the file specified by the <db:code role="parameter">fileName</db:code> given.</db:para>
<db:para>Returns true if successful; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rename">
<db:title>bool QFile::rename(const QString &amp;<db:emphasis>newName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>rename</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>newName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool rename(const QString &amp;newName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Renames the file currently specified by <db:link xlink:href="qfile.xml#fileName">fileName</db:link>() to <db:code role="parameter">newName</db:code>. Returns true if successful; otherwise returns false.</db:para>
<db:para>If a file with the name <db:code role="parameter">newName</db:code> already exists, rename() returns false (i.e., <db:link xlink:href="qfile.xml">QFile</db:link> will not overwrite it).</db:para>
<db:para>The file is closed before it is renamed.</db:para>
<db:para>If the rename operation fails, Qt will attempt to copy this file's contents to <db:code role="parameter">newName</db:code>, and then remove this file, keeping only <db:code role="parameter">newName</db:code>. If that copy operation fails or this file can't be removed, the destination file <db:code role="parameter">newName</db:code> is removed to restore the old state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rename-1">
<db:title>[static] bool QFile::rename(const QString &amp;<db:emphasis>oldName</db:emphasis>, const QString &amp;<db:emphasis>newName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>rename</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>oldName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>newName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool rename(const QString &amp;oldName, const QString &amp;newName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Renames the file <db:code role="parameter">oldName</db:code> to <db:code role="parameter">newName</db:code>. Returns true if successful; otherwise returns false.</db:para>
<db:para>If a file with the name <db:code role="parameter">newName</db:code> already exists, <db:link xlink:href="qfile.xml#rename">rename</db:link>() returns false (i.e., <db:link xlink:href="qfile.xml">QFile</db:link> will not overwrite it).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#rename">rename</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rename-2">
<db:title>[since 6.0] bool QFile::rename(const std::filesystem::path &amp;<db:emphasis>newName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>rename</db:methodname>
<db:methodparam>
<db:type>const std::filesystem::path &amp;</db:type>
<db:parameter>newName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool rename(const std::filesystem::path &amp;newName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="resize">
<db:title>[override virtual] bool QFile::resize(qint64 <db:emphasis>sz</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>resize</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>sz</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool resize(qint64 sz) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qfiledevice.xml#resize" role="function">QFileDevice::resize(qint64 sz)</db:link>.</db:para>
</db:section>
<db:section xml:id="resize-1">
<db:title>[static] bool QFile::resize(const QString &amp;<db:emphasis>fileName</db:emphasis>, qint64 <db:emphasis>sz</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>resize</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>sz</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool resize(const QString &amp;fileName, qint64 sz)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets <db:code role="parameter">fileName</db:code> to size (in bytes) <db:code role="parameter">sz</db:code>. Returns true if the resize succeeds; false otherwise. If <db:code role="parameter">sz</db:code> is larger than <db:code role="parameter">fileName</db:code> currently is the new bytes will be set to 0, if <db:code role="parameter">sz</db:code> is smaller the file is simply truncated.</db:para>
<db:warning>
<db:para>This function can fail if the file doesn't exist.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#resize">resize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFileName">
<db:title>void QFile::setFileName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFileName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFileName(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">name</db:code> of the file. The name can have no path, a relative path, or an absolute path.</db:para>
<db:para>Do not call this function if the file has already been opened.</db:para>
<db:para>If the file name has no path or a relative path, the path used will be the application's current directory path <db:emphasis>at the time of the <db:link xlink:href="qfile.xml#open">open</db:link>()</db:emphasis> call.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QFile file;
QDir::setCurrent(&quot;/tmp&quot;);
file.setFileName(&quot;readme.txt&quot;);
QDir::setCurrent(&quot;/home&quot;);
file.open(QIODevice::ReadOnly);      // opens &quot;/home/readme.txt&quot; under Unix
</db:programlisting>
<db:para>Note that the directory separator &quot;/&quot; works for all operating systems supported by Qt.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfileinfo.xml">QFileInfo</db:link></db:member>
<db:member><db:link xlink:href="qdir.xml">QDir</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFileName-1">
<db:title>[since 6.0] void QFile::setFileName(const std::filesystem::path &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFileName</db:methodname>
<db:methodparam>
<db:type>const std::filesystem::path &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFileName(const std::filesystem::path &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="setPermissions">
<db:title>[override virtual] bool QFile::setPermissions(QFileDevice::Permissions <db:emphasis>permissions</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setPermissions</db:methodname>
<db:methodparam>
<db:type>QFileDevice::Permissions</db:type>
<db:parameter>permissions</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setPermissions(QFileDevice::Permissions permissions) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qfiledevice.xml#setPermissions" role="function">QFileDevice::setPermissions(QFileDevice::Permissions permissions)</db:link>.</db:para>
<db:para>Sets the permissions for the file to the <db:code role="parameter">permissions</db:code> specified. Returns true if successful, or false if the permissions cannot be modified.</db:para>
<db:warning>
<db:para>This function does not manipulate ACLs, which may limit its effectiveness.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#permissions">permissions</db:link>()</db:member>
<db:member><db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPermissions-1">
<db:title>[static] bool QFile::setPermissions(const QString &amp;<db:emphasis>fileName</db:emphasis>, QFileDevice::Permissions <db:emphasis>permissions</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>setPermissions</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QFileDevice::Permissions</db:type>
<db:parameter>permissions</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setPermissions(const QString &amp;fileName, QFileDevice::Permissions permissions)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the permissions for <db:code role="parameter">fileName</db:code> file to <db:code role="parameter">permissions</db:code>.</db:para>
</db:section>
<db:section xml:id="setPermissions-2">
<db:title>[static, since 6.0] bool QFile::setPermissions(const std::filesystem::path &amp;<db:emphasis>filename</db:emphasis>, QFileDevice::Permissions <db:emphasis>permissionSpec</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>setPermissions</db:methodname>
<db:methodparam>
<db:type>const std::filesystem::path &amp;</db:type>
<db:parameter>filename</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QFileDevice::Permissions</db:type>
<db:parameter>permissionSpec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setPermissions(const std::filesystem::path &amp;filename, QFileDevice::Permissions permissionSpec)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="size">
<db:title>[override virtual] qint64 QFile::size() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 size() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qfiledevice.xml#size" role="function">QFileDevice::size() const</db:link>.</db:para>
</db:section>
<db:section xml:id="symLinkTarget">
<db:title>[static] QString QFile::symLinkTarget(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>symLinkTarget</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString symLinkTarget(const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the absolute path of the file or directory referred to by the symlink (or shortcut on Windows) specified by <db:code role="parameter">fileName</db:code>, or returns an empty string if the <db:code role="parameter">fileName</db:code> does not correspond to a symbolic link.</db:para>
<db:para>This name may not represent an existing file; it is only a string. <db:link xlink:href="qfile.xml#exists-1">QFile::exists</db:link>() returns true if the symlink points to an existing file.</db:para>
</db:section>
<db:section xml:id="symLinkTarget-1">
<db:title>QString QFile::symLinkTarget() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>symLinkTarget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString symLinkTarget() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the absolute path of the file or directory a symlink (or shortcut on Windows) points to, or a an empty string if the object isn't a symbolic link.</db:para>
<db:para>This name may not represent an existing file; it is only a string. <db:link xlink:href="qfile.xml#exists-1">QFile::exists</db:link>() returns true if the symlink points to an existing file.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qfile.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
