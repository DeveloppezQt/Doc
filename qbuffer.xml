<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QBuffer Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbuffer.xml">QBuffer</db:link> class provides a <db:link xlink:href="qiodevice.xml">QIODevice</db:link> interface for a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBuffer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qiodevice.xml" xlink:role="class">QIODevice</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QBuffer is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qbuffer.xml">QBuffer</db:link> allows you to access a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> using the <db:link xlink:href="qiodevice.xml">QIODevice</db:link> interface. The <db:link xlink:href="qbytearray.xml">QByteArray</db:link> is treated just as a standard random-accessed file. Example:</db:para>
<db:programlisting language="cpp">    QBuffer buffer;
    char ch;

    buffer.open(QBuffer::ReadWrite);
    buffer.write(&quot;Qt rocks!&quot;);
    buffer.seek(0);
    buffer.getChar(&amp;amp;ch);  // ch == 'Q'
    buffer.getChar(&amp;amp;ch);  // ch == 't'
    buffer.getChar(&amp;amp;ch);  // ch == ' '
    buffer.getChar(&amp;amp;ch);  // ch == 'r'
</db:programlisting>
<db:para>By default, an internal <db:link xlink:href="qbytearray.xml">QByteArray</db:link> buffer is created for you when you create a <db:link xlink:href="qbuffer.xml">QBuffer</db:link>. You can access this buffer directly by calling <db:link xlink:href="qbuffer.xml#buffer">buffer</db:link>(). You can also use <db:link xlink:href="qbuffer.xml">QBuffer</db:link> with an existing <db:link xlink:href="qbytearray.xml">QByteArray</db:link> by calling <db:link xlink:href="qbuffer.xml#setBuffer">setBuffer</db:link>(), or by passing your array to <db:link xlink:href="qbuffer.xml">QBuffer</db:link>'s constructor.</db:para>
<db:para>Call <db:link xlink:href="qbuffer.xml#open">open</db:link>() to open the buffer. Then call <db:link xlink:href="qiodevice.xml#write">write</db:link>() or <db:link xlink:href="qiodevice.xml#putChar">putChar</db:link>() to write to the buffer, and <db:link xlink:href="qiodevice.xml#read">read</db:link>(), <db:link xlink:href="qiodevice.xml#readLine">readLine</db:link>(), <db:link xlink:href="qiodevice.xml#readAll">readAll</db:link>(), or <db:link xlink:href="qiodevice.xml#getChar">getChar</db:link>() to read from it. <db:link xlink:href="qbuffer.xml#size">size</db:link>() returns the current size of the buffer, and you can seek to arbitrary positions in the buffer by calling <db:link xlink:href="qbuffer.xml#seek">seek</db:link>(). When you are done with accessing the buffer, call <db:link xlink:href="qbuffer.xml#close">close</db:link>().</db:para>
<db:para>The following code snippet shows how to write data to a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> using <db:link xlink:href="qdatastream.xml">QDataStream</db:link> and <db:link xlink:href="qbuffer.xml">QBuffer</db:link>:</db:para>
<db:programlisting language="cpp">    QByteArray byteArray;
    QBuffer buffer(&amp;amp;byteArray);
    buffer.open(QIODevice::WriteOnly);

    QDataStream out(&amp;amp;buffer);
    out &amp;lt;&amp;lt; QApplication::palette();
</db:programlisting>
<db:para>Effectively, we convert the application's <db:link xlink:href="qpalette.xml">QPalette</db:link> into a byte array. Here's how to read the data from the <db:link xlink:href="qbytearray.xml">QByteArray</db:link>:</db:para>
<db:programlisting language="cpp">    QPalette palette;
    QBuffer buffer(&amp;amp;byteArray);
    buffer.open(QIODevice::ReadOnly);

    QDataStream in(&amp;amp;buffer);
    in &amp;gt;&amp;gt; palette;
</db:programlisting>
<db:para><db:link xlink:href="qtextstream.xml">QTextStream</db:link> and <db:link xlink:href="qdatastream.xml">QDataStream</db:link> also provide convenience constructors that take a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> and that create a <db:link xlink:href="qbuffer.xml">QBuffer</db:link> behind the scenes.</db:para>
<db:para><db:link xlink:href="qbuffer.xml">QBuffer</db:link> emits <db:link xlink:href="qiodevice.xml#readyRead">readyRead</db:link>() when new data has arrived in the buffer. By connecting to this signal, you can use <db:link xlink:href="qbuffer.xml">QBuffer</db:link> to store temporary data before processing it. <db:link xlink:href="qbuffer.xml">QBuffer</db:link> also emits <db:link xlink:href="qiodevice.xml#bytesWritten">bytesWritten</db:link>() every time new data has been written to the buffer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml">QFile</db:link></db:member>
<db:member><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:member>
<db:member><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QBuffer">
<db:title>[explicit] QBuffer::QBuffer(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QBuffer</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QBuffer(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty buffer with the given <db:code role="parameter">parent</db:code>. You can call <db:link xlink:href="qbuffer.xml#setData">setData</db:link>() to fill the buffer with data, or you can open it in write mode and use <db:link xlink:href="qiodevice.xml#write">write</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuffer.xml#open">open</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QBuffer-1">
<db:title>QBuffer::QBuffer(QByteArray *<db:emphasis>byteArray</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QBuffer</db:methodname>
<db:methodparam>
<db:type>QByteArray *</db:type>
<db:parameter>byteArray</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QBuffer(QByteArray *byteArray, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qbuffer.xml">QBuffer</db:link> that uses the <db:link xlink:href="qbytearray.xml">QByteArray</db:link> pointed to by <db:code role="parameter">byteArray</db:code> as its internal buffer, and with the given <db:code role="parameter">parent</db:code>. The caller is responsible for ensuring that <db:code role="parameter">byteArray</db:code> remains valid until the <db:link xlink:href="qbuffer.xml">QBuffer</db:link> is destroyed, or until <db:link xlink:href="qbuffer.xml#setBuffer">setBuffer</db:link>() is called to change the buffer. <db:link xlink:href="qbuffer.xml">QBuffer</db:link> doesn't take ownership of the <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>If you open the buffer in write-only mode or read-write mode and write something into the <db:link xlink:href="qbuffer.xml">QBuffer</db:link>, <db:code role="parameter">byteArray</db:code> will be modified.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    QByteArray byteArray(&quot;abc&quot;);
    QBuffer buffer(&amp;amp;byteArray);
    buffer.open(QIODevice::WriteOnly);
    buffer.seek(3);
    buffer.write(&quot;def&quot;, 3);
    buffer.close();
    // byteArray == &quot;abcdef&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuffer.xml#open">open</db:link>()</db:member>
<db:member><db:link xlink:href="qbuffer.xml#setBuffer">setBuffer</db:link>()</db:member>
<db:member><db:link xlink:href="qbuffer.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QBuffer">
<db:title>[virtual] QBuffer::~QBuffer()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QBuffer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QBuffer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the buffer.</db:para>
</db:section>
<db:section xml:id="atEnd">
<db:title>[override virtual] bool QBuffer::atEnd() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>atEnd</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool atEnd() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#atEnd" role="function">QIODevice::atEnd() const</db:link>.</db:para>
</db:section>
<db:section xml:id="buffer">
<db:title>QByteArray &amp;QBuffer::buffer()</db:title>
<db:methodsynopsis>
<db:type>QByteArray &amp;</db:type>
<db:methodname>buffer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray &amp; buffer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the <db:link xlink:href="qbuffer.xml">QBuffer</db:link>'s internal buffer. You can use it to modify the <db:link xlink:href="qbytearray.xml">QByteArray</db:link> behind the <db:link xlink:href="qbuffer.xml">QBuffer</db:link>'s back.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuffer.xml#setBuffer">setBuffer</db:link>()</db:member>
<db:member><db:link xlink:href="qbuffer.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="buffer-1">
<db:title>const QByteArray &amp;QBuffer::buffer() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QByteArray &amp;</db:type>
<db:methodname>buffer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const QByteArray &amp; buffer() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This is the same as <db:link xlink:href="qbuffer.xml#data">data</db:link>().</db:para>
</db:section>
<db:section xml:id="canReadLine">
<db:title>[override virtual] bool QBuffer::canReadLine() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>canReadLine</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool canReadLine() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#canReadLine" role="function">QIODevice::canReadLine() const</db:link>.</db:para>
</db:section>
<db:section xml:id="close">
<db:title>[override virtual] void QBuffer::close()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>close</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void close() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#close" role="function">QIODevice::close()</db:link>.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>const QByteArray &amp;QBuffer::data() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QByteArray &amp;</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QByteArray &amp; data() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the data contained in the buffer.</db:para>
<db:para>This is the same as <db:link xlink:href="qbuffer.xml#buffer">buffer</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuffer.xml#setData">setData</db:link>()</db:member>
<db:member><db:link xlink:href="qbuffer.xml#setBuffer">setBuffer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open">
<db:title>[override virtual] bool QBuffer::open(QIODeviceBase::OpenMode <db:emphasis>flags</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>open</db:methodname>
<db:methodparam>
<db:type>QIODeviceBase::OpenMode</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool open(QIODeviceBase::OpenMode flags) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#open" role="function">QIODevice::open(QIODeviceBase::OpenMode mode)</db:link>.</db:para>
<db:para>Unlike <db:link xlink:href="qfile.xml">QFile</db:link>, opening a <db:link xlink:href="qbuffer.xml">QBuffer</db:link> QIODevice::WriteOnly does not truncate it. However, <db:link xlink:href="qbuffer.xml#pos">pos</db:link>() is set to 0. Use QIODevice::Append or QIODevice::Truncate to change either behavior.</db:para>
</db:section>
<db:section xml:id="pos">
<db:title>[override virtual] qint64 QBuffer::pos() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>pos</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 pos() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#pos" role="function">QIODevice::pos() const</db:link>.</db:para>
</db:section>
<db:section xml:id="readData">
<db:title>[override virtual protected] qint64 QBuffer::readData(char *<db:emphasis>data</db:emphasis>, qint64 <db:emphasis>len</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>qint64</db:type>
<db:methodname>readData</db:methodname>
<db:methodparam>
<db:type>char *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>len</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 readData(char *data, qint64 len) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#readData" role="function">QIODevice::readData(char *data, qint64 maxSize)</db:link>.</db:para>
</db:section>
<db:section xml:id="seek">
<db:title>[override virtual] bool QBuffer::seek(qint64 <db:emphasis>pos</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>seek</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool seek(qint64 pos) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#seek" role="function">QIODevice::seek(qint64 pos)</db:link>.</db:para>
</db:section>
<db:section xml:id="setBuffer">
<db:title>void QBuffer::setBuffer(QByteArray *<db:emphasis>byteArray</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBuffer</db:methodname>
<db:methodparam>
<db:type>QByteArray *</db:type>
<db:parameter>byteArray</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBuffer(QByteArray *byteArray)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes <db:link xlink:href="qbuffer.xml">QBuffer</db:link> use the <db:link xlink:href="qbytearray.xml">QByteArray</db:link> pointed to by <db:code role="parameter">byteArray</db:code> as its internal buffer. The caller is responsible for ensuring that <db:code role="parameter">byteArray</db:code> remains valid until the <db:link xlink:href="qbuffer.xml">QBuffer</db:link> is destroyed, or until setBuffer() is called to change the buffer. <db:link xlink:href="qbuffer.xml">QBuffer</db:link> doesn't take ownership of the <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>Does nothing if <db:link xlink:href="qiodevice.xml#isOpen">isOpen</db:link>() is true.</db:para>
<db:para>If you open the buffer in write-only mode or read-write mode and write something into the <db:link xlink:href="qbuffer.xml">QBuffer</db:link>, <db:code role="parameter">byteArray</db:code> will be modified.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    QByteArray byteArray(&quot;abc&quot;);
    QBuffer buffer;
    buffer.setBuffer(&amp;amp;byteArray);
    buffer.open(QIODevice::WriteOnly);
    buffer.seek(3);
    buffer.write(&quot;def&quot;, 3);
    buffer.close();
    // byteArray == &quot;abcdef&quot;
</db:programlisting>
<db:para>If <db:code role="parameter">byteArray</db:code> is nullptr, the buffer creates its own internal <db:link xlink:href="qbytearray.xml">QByteArray</db:link> to work on. This byte array is initially empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuffer.xml#buffer">buffer</db:link>()</db:member>
<db:member><db:link xlink:href="qbuffer.xml#setData">setData</db:link>()</db:member>
<db:member><db:link xlink:href="qbuffer.xml#open">open</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData">
<db:title>void QBuffer::setData(const QByteArray &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(const QByteArray &amp;data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the contents of the internal buffer to be <db:code role="parameter">data</db:code>. This is the same as assigning <db:code role="parameter">data</db:code> to <db:link xlink:href="qbuffer.xml#buffer">buffer</db:link>().</db:para>
<db:para>Does nothing if <db:link xlink:href="qiodevice.xml#isOpen">isOpen</db:link>() is true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuffer.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qbuffer.xml#setBuffer">setBuffer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData-1">
<db:title>void QBuffer::setData(const char *<db:emphasis>data</db:emphasis>, qsizetype <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(const char *data, qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the contents of the internal buffer to be the first <db:code role="parameter">size</db:code> bytes of <db:code role="parameter">data</db:code>.</db:para>
<db:note>
<db:para>In Qt versions prior to 6.5, this function took the length as an int parameter, potentially truncating sizes.</db:para>
</db:note>
</db:section>
<db:section xml:id="size">
<db:title>[override virtual] qint64 QBuffer::size() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 size() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#size" role="function">QIODevice::size() const</db:link>.</db:para>
</db:section>
<db:section xml:id="writeData">
<db:title>[override virtual protected] qint64 QBuffer::writeData(const char *<db:emphasis>data</db:emphasis>, qint64 <db:emphasis>len</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>qint64</db:type>
<db:methodname>writeData</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>len</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 writeData(const char *data, qint64 len) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#writeData" role="function">QIODevice::writeData(const char *data, qint64 maxSize)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
