<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QMouseEventTransition Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmouseeventtransition.xml">QMouseEventTransition</db:link> class provides a transition for mouse events.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMouseEventTransition</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qeventtransition.xml" xlink:role="class">QEventTransition</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMouseEventTransition is part of <db:simplelist><db:member>statemachine</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmouseeventtransition.xml">QMouseEventTransition</db:link> is part of <db:link xlink:href="statemachine-api.xml">The State Machine Framework</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstate.xml#addTransition">QState::addTransition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMouseEventTransition">
<db:title>QMouseEventTransition::QMouseEventTransition(QState *<db:emphasis>sourceState</db:emphasis> = 0)</db:title>
<db:para>Constructs a new mouse event transition with the given <db:code role="parameter">sourceState</db:code>.</db:para>
</db:section>
<db:section xml:id="QMouseEventTransition-1">
<db:title>QMouseEventTransition::QMouseEventTransition(QObject *<db:emphasis>object</db:emphasis>, QEvent::Type <db:emphasis>type</db:emphasis>, Qt::MouseButton <db:emphasis>button</db:emphasis>, QState *<db:emphasis>sourceState</db:emphasis> = 0)</db:title>
<db:para>Constructs a new mouse event transition for events of the given <db:code role="parameter">type</db:code> for the given <db:code role="parameter">object</db:code>, with the given <db:code role="parameter">button</db:code> and <db:code role="parameter">sourceState</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QMouseEventTransition">
<db:title>[virtual noexcept] QMouseEventTransition::~QMouseEventTransition()</db:title>
<db:para>Destroys this mouse event transition.</db:para>
</db:section>
<db:section xml:id="button">
<db:title>Qt::MouseButton QMouseEventTransition::button() const</db:title>
<db:para>Returns the button that this mouse event transition checks for.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmouseeventtransition.xml#setButton">setButton</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="eventTest">
<db:title>[override virtual protected] bool QMouseEventTransition::eventTest(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qeventtransition.xml#eventTest" role="function">QEventTransition::eventTest(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="hitTestPath">
<db:title>QPainterPath QMouseEventTransition::hitTestPath() const</db:title>
<db:para>Returns the hit test path for this mouse event transition.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmouseeventtransition.xml#setHitTestPath">setHitTestPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="modifierMask">
<db:title>Qt::KeyboardModifiers QMouseEventTransition::modifierMask() const</db:title>
<db:para>Returns the keyboard modifier mask that this mouse event transition checks for.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmouseeventtransition.xml#setModifierMask">setModifierMask</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="onTransition">
<db:title>[override virtual protected] void QMouseEventTransition::onTransition(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qeventtransition.xml#onTransition" role="function">QEventTransition::onTransition(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="setButton">
<db:title>void QMouseEventTransition::setButton(Qt::MouseButton <db:emphasis>button</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">button</db:code> that this mouse event transition will check for.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmouseeventtransition.xml#button">button</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHitTestPath">
<db:title>void QMouseEventTransition::setHitTestPath(const QPainterPath &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Sets the hit test path for this mouse event transition to <db:code role="parameter">path</db:code>. If a valid path has been set, the transition will only trigger if the mouse event position (<db:link xlink:href="qmouseevent.xml#pos">QMouseEvent::pos</db:link>()) is inside the path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmouseeventtransition.xml#hitTestPath">hitTestPath</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#contains">QPainterPath::contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setModifierMask">
<db:title>void QMouseEventTransition::setModifierMask(Qt::KeyboardModifiers <db:emphasis>modifierMask</db:emphasis>)</db:title>
<db:para>Sets the keyboard modifier mask that this mouse event transition will check for to <db:code role="parameter">modifierMask</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmouseeventtransition.xml#modifierMask">modifierMask</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
