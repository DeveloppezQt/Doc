<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_query_qml_module</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Retrieve information about a QML module.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="qt6-query-qml-module"/>
<db:para>Retrieve information about a QML module.</db:para>
<db:para>The command is defined in the <db:code>Qml</db:code> component of the <db:code>Qt6</db:code> package, which can be loaded like so:</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 REQUIRED COMPONENTS Qml)
</db:programlisting>
<db:para>This command was introduced in Qt 6.3.</db:para>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt_query_qml_module(
    target
    [URI uri_var]
    [VERSION version_var]
    [PLUGIN_TARGET plugin_target_var]
    [TARGET_PATH target_path_var]
    [MODULE_RESOURCE_PATH module_resource_path_var]
    [QMLDIR qmldir_var]
    [TYPEINFO typeinfo_var]
    [QML_FILES qml_files_var]
    [QML_FILES_DEPLOY_PATHS qml_files_deploy_paths_var]
    [QML_FILES_PREFIX_OVERRIDES qml_files_prefix_overrides_var]
    [RESOURCES resources_var]
    [RESOURCES_DEPLOY_PATHS resources_deploy_paths_var]
    [RESOURCES_PREFIX_OVERRIDES resources_prefix_overrides_var]
)
</db:programlisting>
<db:para>If <db:link xlink:href="cmake-qt5-and-qt6-compatibility.xml#versionless-commands">versionless commands</db:link> are disabled, use <db:code>qt6_query_qml_module()</db:code> instead. It supports the same set of arguments as this command.</db:para>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para>This command is used to obtain information about a QML module <db:code>target</db:code>. That <db:code>target</db:code> must have previously been created by or passed to an earlier call to <db:link xlink:href="qt-add-qml-module.xml#qt6-add-qml-module">qt_add_qml_module()</db:link>. The <db:code>target</db:code> cannot be an imported target.</db:para>
<db:para>The information provided by this command enables the caller to deploy all parts of a single QML module. The project should install the <db:code>target</db:code> and the associated plugin target (if the module has one and it is separate from the backing <db:code>target</db:code>) using the standard <db:link xlink:href="https://cmake.org/cmake/help/latest/command/install.html#targets">install(TARGETS)</db:link> command. Everything else can be deployed with <db:link xlink:href="https://cmake.org/cmake/help/latest/command/install.html#files">install(FILES)</db:link>.</db:para>
</db:section>
<db:section xml:id="arguments">
<db:title>Arguments</db:title>
<db:para>Each of the optional arguments specifies the name of a variable in which to store the corresponding QML module property.</db:para>
<db:para><db:code>URI</db:code> and <db:code>VERSION</db:code> provide the module's uri and version respectively.</db:para>
<db:para><db:code>PLUGIN_TARGET</db:code> can be used to obtain the name of the plugin target for the QML module. Not all QML modules have a plugin, so the value returned for this option could be an empty string. If the QML module has no separate backing target, then <db:code>target</db:code> will be the same as the plugin target.</db:para>
<db:para><db:code>TARGET_PATH</db:code> is the <db:code>URI</db:code> with dots (.) replaced by forward slashes (/). It represents the path below the base QML module installation directory where this QML module's <db:code>qmldir</db:code> file (and possibly others) should be deployed. The QML module installation directory serves as a QML import path where the QML engine will look for QML modules. The default base QML module installation directory used by <db:link xlink:href="qt-generate-deploy-qml-app-script.xml#qt6-generate-deploy-qml-app-script">qt_generate_deploy_qml_app_script()</db:link> is <db:code>qml</db:code>. A project using a deployment script can use <db:link xlink:href="cmake-variable-qt-deploy-qml-dir.xml">QT_DEPLOY_QML_DIR</db:link> rather than hard-coding this location (also see <db:link xlink:href="cmake-variable-qt-deploy-prefix.xml">QT_DEPLOY_PREFIX</db:link>).</db:para>
<db:para><db:code>MODULE_RESOURCE_PATH</db:code> provides the resource path under which the QML module's compiled-in files can be found. It is formed from <db:link xlink:href="qt-add-qml-module.xml#qt6-add-qml-module">qt_add_qml_module()</db:link>'s <db:code>RESOURCE_PREFIX</db:code> concatenated with the module's <db:code>TARGET_PATH</db:code>. The queried value should not be used for deployment, but may be helpful in matching up resource paths with file system locations, if needed.</db:para>
<db:para><db:code>QMLDIR</db:code> provides the path to the <db:code>qmldir</db:code> file. When deploying the QML module, this file should be copied to the target path. In a deployment script, this location can be obtained using <db:code>${QT_DEPLOY_PREFIX}/${QT_DEPLOY_QML_DIR}</db:code>.</db:para>
<db:para><db:code>TYPEINFO</db:code> provides the path to the module's typeinfo file, if it has one. It will be an empty string if the module has no typeinfo file. The typeinfo file should be deployed to the same path as the <db:code>qmldir</db:code> file.</db:para>
<db:para><db:code>QML_FILES</db:code> provides a list of all files added to the QML module through one of the following methods:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>As <db:code>QML_FILES</db:code> arguments in <db:link xlink:href="qt-add-qml-module.xml#qt6-add-qml-module">qt_add_qml_module()</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>As <db:code>FILES</db:code> arguments in <db:link xlink:href="qt-target-qml-sources.xml#qt6-target-qml-sources">qt_target_qml_sources()</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>All files will be recorded with absolute paths.</db:para>
<db:para><db:code>QML_FILES_DEPLOY_PATHS</db:code> provides a list with exactly the same number of elements as <db:code>QML_FILES</db:code>. Each element of the <db:code>QML_FILES_DEPLOY_PATHS</db:code> list is the path below the target path where the corresponding element of <db:code>QML_FILES</db:code> should be deployed. The paths in <db:code>QML_FILES_DEPLOY_PATHS</db:code> include the file name, since this could be different to the file name in <db:code>QML_FILES</db:code> due to the use of resource aliases (see <db:link xlink:href="qt-target-qml-sources.xml#qt-resource-alias">QT_RESOURCE_ALIAS</db:link>).</db:para>
<db:para>Entries in <db:code>QML_FILES_DEPLOY_PATHS</db:code> can also be an empty string. Any file added using <db:link xlink:href="qt-target-qml-sources.xml#qt6-target-qml-sources">qt_target_qml_sources()</db:link> with a custom <db:code>PREFIX</db:code> will have no deploy path, since using a custom prefix typically means the file sits outside of the QML module's target path.</db:para>
<db:para><db:code>QML_FILES_PREFIX_OVERRIDES</db:code> provides another list with exactly the same number of elements as <db:code>QML_FILES</db:code>. Where a file has been added with a custom prefix as described in the preceding paragraph, its corresponding entry in the <db:code>QML_FILES_PREFIX_OVERRIDES</db:code> list will contain the custom prefix used. For all other files, their list entries will be an empty string.</db:para>
<db:note>
<db:para>As a special case, if there is only one file in the <db:code>QML_FILES</db:code> list, then <db:code>QML_FILES_DEPLOY_PATHS</db:code> or <db:code>QML_FILES_PREFIX_OVERRIDES</db:code> may be an empty string depending on whether that file has a custom prefix. This is because CMake's way of representing lists and strings means that it is impossible to distinguish between an empty string and a list with a single empty element.</db:para>
</db:note>
<db:para>The <db:code>RESOURCES</db:code>, <db:code>RESOURCES_DEPLOY_PATHS</db:code>, and <db:code>RESOURCES_PREFIX_OVERRIDES</db:code> options are analogous to those for <db:code>QML_FILES</db:code> discussed above. <db:code>RESOURCES</db:code> provides a list of all files added to the QML module as <db:code>RESOURCES</db:code> arguments to either <db:link xlink:href="qt-add-qml-module.xml#qt6-add-qml-module">qt_add_qml_module()</db:link> or <db:link xlink:href="qt-target-qml-sources.xml#qt6-target-qml-sources">qt_target_qml_sources()</db:link>. All paths will be absolute. The meaning and usage of <db:code>RESOURCES_DEPLOY_PATHS</db:code> and <db:code>RESOURCES_PREFIX_OVERRIDES</db:code> follows the same patterns as <db:code>QML_FILES_DEPLOY_PATHS</db:code> and <db:code>QML_FILES_PREFIX_OVERRIDES</db:code> respectively.</db:para>
</db:section>
<db:section xml:id="example">
<db:title>Example</db:title>
<db:programlisting language="cpp" role="bad">cmake_minimum_required(VERSION 3.16...3.22)
project(MyThings)

find_package(Qt6 6.3 REQUIRED COMPONENTS Core Qml)

set(module_name &quot;MyThings&quot;)
qt_add_qml_module(${module_name}
    URI My.Things
    VERSION 1.3
    RESOURCE_PREFIX org.mycompany/imports
    QML_FILES
        First.qml
        Second.qml
    RESOURCES
        Third.txt
)

qt_query_qml_module(${module_name}
    URI module_uri
    VERSION module_version
    PLUGIN_TARGET module_plugin_target
    TARGET_PATH module_target_path
    QMLDIR module_qmldir
    TYPEINFO module_typeinfo
    QML_FILES module_qml_files
    QML_FILES_DEPLOY_PATHS qml_files_deploy_paths
    RESOURCES module_resources
    RESOURCES_DEPLOY_PATHS resources_deploy_paths
)

message(&quot;My QML module URI is: ${module_uri}&quot;)
message(&quot;My QML module version is: ${module_version}&quot;)

# Install the QML module backing library
set(staging_prefix &quot;staging&quot;)
install(TARGETS ${module_name}
    ARCHIVE DESTINATION &quot;${staging_prefix}/${CMAKE_INSTALL_LIBDIR}&quot;
    LIBRARY DESTINATION &quot;${staging_prefix}/${CMAKE_INSTALL_LIBDIR}&quot;
    RUNTIME DESTINATION &quot;${staging_prefix}/${CMAKE_INSTALL_BINDIR}&quot;
)
set(module_dir &quot;${staging_prefix}/qml/${module_target_path}&quot;)

# Install the QML module runtime loadable plugin
install(TARGETS &quot;${module_plugin_target}&quot;
    LIBRARY DESTINATION &quot;${module_dir}&quot;
    RUNTIME DESTINATION &quot;${module_dir}&quot;
)

# Install the QML module meta information.
install(FILES &quot;${module_qmldir}&quot;   DESTINATION &quot;${module_dir}&quot;)
install(FILES &quot;${module_typeinfo}&quot; DESTINATION &quot;${module_dir}&quot;)

# Install QML files, possibly renamed.
list(LENGTH module_qml_files num_files)
math(EXPR last_index &quot;${num_files} - 1&quot;)
foreach(i RANGE 0 ${last_index})
    list(GET module_qml_files       ${i} src_file)
    list(GET qml_files_deploy_paths ${i} deploy_path)
    get_filename_component(dst_name &quot;${deploy_path}&quot; NAME)
    get_filename_component(dest_dir &quot;${deploy_path}&quot; DIRECTORY)
    install(FILES &quot;${src_file}&quot; DESTINATION &quot;${module_dir}/${dest_dir}&quot; RENAME &quot;${dst_name}&quot;)
endforeach()

# Install resources, possibly renamed.
list(LENGTH module_resources num_files)
math(EXPR last_index &quot;${num_files} - 1&quot;)
foreach(i RANGE 0 ${last_index})
    list(GET module_resources       ${i} src_file)
    list(GET resources_deploy_paths ${i} deploy_path)
    get_filename_component(dst_name &quot;${deploy_path}&quot; NAME)
    get_filename_component(dest_dir &quot;${deploy_path}&quot; DIRECTORY)
    install(FILES &quot;${src_file}&quot; DESTINATION &quot;${module_dir}/${dest_dir}&quot; RENAME &quot;${dst_name}&quot;)
endforeach()
</db:programlisting>
</db:section>
</db:article>
