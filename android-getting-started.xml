<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Getting Started with Qt for Android</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides instructions to install and configure your development environment.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="installing-the-prerequisites">
<db:title>Installing the Prerequisites</db:title>
<db:para>In order to use <db:link xlink:href="android.xml">Qt for Android</db:link>, you need the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="http://developer.android.com/sdk/index.html">The Android SDK Tools</db:link></db:para>
<db:note>
<db:para>If your Qt version is earlier than v5.9, use the SDK tools package v25.2.5 or earlier.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://developer.android.com/tools/sdk/ndk/index.html">The Android NDK</db:link></db:para>
<db:note>
<db:para>Using Qt for Android with the GCC toolchain requires Android NDK version <db:emphasis>r10e</db:emphasis>. For Qt 5.12 or later, use the latest available version of NDK with <db:emphasis>android-clang</db:emphasis> toolchain.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html">Java SE Development Kit</db:link> (JDK) v6 or later. You can also use <db:link xlink:href="http://openjdk.java.net">OpenJDK</db:link> on Linux.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>After installing these tools, update the Android SDK by installing the API and build tools packages required for development. You can install these packages either through Android Studio or using the command line tools package you installed earlier. For more details, refer to the <db:link xlink:href="https://developer.android.com/studio/intro/update.html">Android Studio</db:link> documentation.</db:para>
<db:section xml:id="updating-the-android-sdk">
<db:title>Updating the Android SDK</db:title>
<db:para>The command line tools provided by the Android SDK Tools package also enables updating the SDK, but without a GUI. For example, the following command on Ubuntu updates the SDK by installing the latest build-tools, platform-tools, emulator, and patcher packages:</db:para>
<db:programlisting language="cpp" role="bad">./bin/sdkmanager --update
</db:programlisting>
<db:para>To install a specific package, use sdkmanager from &lt;ANDROID_SDK_ROOT&gt;/tools/bin. For example, the following command installs the android-10 platforms package on Ubuntu:</db:para>
<db:programlisting language="cpp" role="bad">./sdkmanager &quot;platforms;android-10&quot;
</db:programlisting>
<db:para>For more details, refer to the <db:link xlink:href="https://developer.android.com/studio/command-line/sdkmanager.html">sdkmanager</db:link> documentation.</db:para>
</db:section>
</db:section>
<db:section xml:id="configuring-your-development-host">
<db:title>Configuring Your Development Host</db:title>
<db:section xml:id="windows">
<db:title>Windows</db:title>
<db:para>The default USB driver on Windows does not allow debugging using Android Debug Bridge (ADB) tool. You must install the additional USB driver provided by the <db:emphasis>extras</db:emphasis> Android SDK package. Use the following command from the Windows command prompt to install the extras package:</db:para>
<db:programlisting language="cpp" role="bad">sdkmanager.bat &quot;extras;google;usb_driver&quot;
</db:programlisting>
<db:para>After the package installation is complete, install the driver from &lt;ANDROID_SDK_ROOT&gt;/extras/google/usb_driver. Try running a few basic <db:link xlink:href="http://developer.android.com/tools/help/adb.html">adb</db:link> commands now and check whether your Android device responds to it.</db:para>
</db:section>
<db:section xml:id="A64-bit-linux">
<db:title>64-bit Linux</db:title>
<db:para>If you're developing on a 64-bit Linux machine, you must install the following dependencies in order to run 32-bit executables like adb, which allows Qt Creator to find devices to deploy to:</db:para>
<db:programlisting language="cpp" role="bad">sudo apt-get install libstdc++6:i386 libgcc1:i386 zlib1g:i386 libncurses5:i386
</db:programlisting>
<db:para>To run the emulator, the following dependencies are also necessary:</db:para>
<db:programlisting language="cpp">sudo apt-get install libsdl1.2debian:i386
</db:programlisting>
</db:section>
<db:section xml:id="qt-creator-ide">
<db:title>Qt Creator IDE</db:title>
<db:para>The Qt Creator IDE that came with the Qt 5 installation on your development host, must be configured to enable developing applications for Android. Launch Qt Creator and select <db:guilabel>Tools</db:guilabel> &gt; <db:guilabel>Options</db:guilabel> &gt; <db:guilabel>Devices</db:guilabel> &gt; <db:guilabel>Android</db:guilabel> to add the Android NDK and SDK paths. For more details, refer to <db:link xlink:href="http://doc.qt.io/qtcreator/creator-developing-android.html">Qt Creator Manual</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="testing-your-setup">
<db:title>Testing Your Setup</db:title>
<db:para>Now you can test your development setup by running the examples that came with the Qt 5 installation. You can browse these examples in Qt Creator <db:guilabel>Welcome</db:guilabel> mode. Use the android filter in the search field to list all the examples tested on Android.</db:para>
<db:para>To develop a simple application from scratch, see <db:link xlink:href="http://doc.qt.io/qtcreator/qt-creator-accelbubble-example.html">Creating a Mobile Application</db:link>.</db:para>
</db:section>
</db:article>
