<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Custom Shaders Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates the use of custom vertex and fragment shaders.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2019 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick3D
import QtQuick.Controls

Window {
    id: window
    width: 1280
    height: 720
    visible: true
    color: &quot;#848895&quot;

    MaterialControl {
        id: control
        anchors.top: parent.top
        anchors.horizontalCenter: parent.horizontalCenter
    }

    View3D {
        anchors.fill: parent
        camera: camera

        PerspectiveCamera {
            id: camera
            position: Qt.vector3d(0, 200, 300)
            eulerRotation.x: -30
        }

        Model {
            position: Qt.vector3d(0, 0, 0)
            NumberAnimation on eulerRotation.y {
                from: 0
                to: 360
                duration: 3000
                loops: -1
                running: control.animateRotation
            }
            scale: Qt.vector3d(2, 2, 2)
            source: &quot;#Sphere&quot;
            materials: [
                ExampleMaterial {
                    id: exampleMaterial
                    time: control.time
                    amplitude: control.amplitude
                    alpha: control.alpha
                    texturing: control.texturing
                    textureFromItem: control.textureFromItem
                    texSrc: Rectangle {
                        layer.enabled: true
                        layer.textureMirroring: ShaderEffectSource.NoMirroring
                        visible: false
                        SequentialAnimation on color {
                            ColorAnimation { from: &quot;black&quot;; to: &quot;yellow&quot;; duration: 2000 }
                            ColorAnimation { from: &quot;yellow&quot;; to: &quot;cyan&quot;; duration: 1000 }
                            ColorAnimation { from: &quot;cyan&quot;; to: &quot;black&quot;; duration: 500 }
                            loops: -1
                        }
                        width: 512
                        height: 512
                        Image {
                            source: &quot;qt_logo.png&quot;
                            anchors.centerIn: parent
                        }
                    }
                }
            ]
        }
    }
}

</db:programlisting>
</db:article>
