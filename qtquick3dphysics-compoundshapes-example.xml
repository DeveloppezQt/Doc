<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D Physics - Compound Shapes Example</db:title>
<db:productname>QtQuick3DPhysics</db:productname>
<db:edition>Qt Quick 3D Physics | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Physics Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates using complex collision shapes.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/compoundshapes-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example demonstrates how to use more than one collision shape to create complex objects for collision detection. The scene consists of a green static plane and a series of links connected to each other. At the beginning, the simulation is disabled. After some time or when the user press the space key, the simulation will start. An animation will start that causes the leftmost and rightmost links to move horizontally back and forth.</db:para>
<db:section xml:id="setup">
<db:title>Setup</db:title>
<db:para>As usual we need to add our <db:link xlink:href="qml-qtquick3d-physics-physicsworld.xml">PhysicsWorld</db:link>:</db:para>
<db:programlisting language="qml">PhysicsWorld {
    id: physicsWorld
    enableCCD: true
    maximumTimestep: 20
    scene: viewport.scene
}
</db:programlisting>
<db:para>We do the usual setup where we have an environment, camera and lights:</db:para>
<db:programlisting language="qml">environment: SceneEnvironment {
    antialiasingMode: SceneEnvironment.MSAA
    backgroundMode: SceneEnvironment.Color
    clearColor: &quot;lightblue&quot;
}

focus: true

PerspectiveCamera {
    id: camera
    position: Qt.vector3d(0, 900, 1500)
    eulerRotation: Qt.vector3d(-10, 0, 0)
    clipFar: 15500
    clipNear: 1
}

DirectionalLight {
    eulerRotation.x: -45
    eulerRotation.y: 45
    castsShadow: true
    brightness: 1.5
    shadowFactor: 15
    shadowFilter: 10
    shadowMapFar: 100
    shadowBias: -0.01
    shadowMapQuality: Light.ShadowMapQualityVeryHigh
}
</db:programlisting>
</db:section>
<db:section xml:id="physical-objects">
<db:title>Physical objects</db:title>
<db:para>We have our regular static plane:</db:para>
<db:programlisting language="qml">StaticRigidBody {
    position: Qt.vector3d(0, -100, 0)
    eulerRotation: Qt.vector3d(-90, 0, 0)
    collisionShapes: PlaneShape {}
    Model {
        source: &quot;#Rectangle&quot;
        scale: Qt.vector3d(500, 500, 1)
        materials: DefaultMaterial {
            diffuseColor: &quot;green&quot;
        }
        castsShadows: false
        receivesShadows: true
    }
}
</db:programlisting>
<db:para>Then we make instances of our links.</db:para>
<db:programlisting language="qml">MeshLink {
    id: leftLink
    isKinematic: true
    property vector3d startPos: Qt.vector3d(-6 * viewport.ringDistance,
                                            viewport.ringY,
                                            0)
    property vector3d startRot: Qt.vector3d(90, 0, 0)
    kinematicPosition: startPos
    position: startPos
    kinematicEulerRotation: startRot
    eulerRotation: startRot
    color: &quot;red&quot;
}

CapsuleLink {
    position: Qt.vector3d(-5 * viewport.ringDistance, viewport.ringY, 0)
    eulerRotation: Qt.vector3d(90, 0, 0)
}

MeshLink {
    position: Qt.vector3d(-4 * viewport.ringDistance, viewport.ringY, 0)
    eulerRotation: Qt.vector3d(90, 0, 0)
}

MeshLink {
    position: Qt.vector3d(-3 * viewport.ringDistance, viewport.ringY, 0)
    eulerRotation: Qt.vector3d(0, 90, 0)
}

MeshLink {
    position: Qt.vector3d(-2 * viewport.ringDistance, viewport.ringY, 0)
    eulerRotation: Qt.vector3d(90, 0, 0)
}

MeshLink {
    position: Qt.vector3d(-1 * viewport.ringDistance, viewport.ringY, 0)
    eulerRotation: Qt.vector3d(0, 90, 0)
}

CapsuleLink {
    position: Qt.vector3d(0, viewport.ringY, 0)
}

MeshLink {
    position: Qt.vector3d(1 * viewport.ringDistance, viewport.ringY, 0)
    eulerRotation: Qt.vector3d(0, 90, 0)
}

MeshLink {
    position: Qt.vector3d(2 * viewport.ringDistance, viewport.ringY, 0)
    eulerRotation: Qt.vector3d(90, 0, 0)
}

MeshLink {
    position: Qt.vector3d(3 * viewport.ringDistance, viewport.ringY, 0)
    eulerRotation: Qt.vector3d(0, 90, 0)
}

MeshLink {
    position: Qt.vector3d(4 * viewport.ringDistance, viewport.ringY, 0)
    eulerRotation: Qt.vector3d(90, 0, 0)
}

CapsuleLink {
    position: Qt.vector3d(5 * viewport.ringDistance, viewport.ringY, 0)
    eulerRotation: Qt.vector3d(90, 0, 0)
}

MeshLink {
    id: rightLink
    isKinematic: true
    property vector3d startPos: Qt.vector3d(6 * viewport.ringDistance,
                                            viewport.ringY,
                                            0)
    property vector3d startRot: Qt.vector3d(90, 0, 0)
    kinematicPosition: startPos
    position: startPos
    kinematicEulerRotation: startRot
    eulerRotation: startRot
    color: &quot;red&quot;
}
</db:programlisting>
<db:para>The first link which is on the left has its <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#isKinematic-prop">isKinematic</db:link> property set to <db:code>true</db:code> so that we can control it via animation. Since it is a kinematic object we need to set the <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicPosition-prop">kinematicPosition</db:link> and <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicRotation-prop">kinematicRotation</db:link> properties. We animate it by animating the <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicPosition-prop">kinematicPosition</db:link> property. The other links are instanced with some spacing between them.</db:para>
<db:para>To get a smooth animation that follows the physical simulation exactly we use an <db:link xlink:href="qml-qtquick-animationcontroller.xml">AnimationController</db:link> which we connect to the <db:code>onFrameDone</db:code> signal on the <db:link xlink:href="qml-qtquick3d-physics-physicsworld.xml">PhysicsWorld</db:link>. This way, if there were to be any frame drops slowing down the simulation the animation will slow down accordingly. We use a <db:link xlink:href="qml-qtquick-sequentialanimation.xml">SequentialAnimation</db:link> with four <db:link xlink:href="qml-qtquick-numberanimation.xml">NumberAnimation</db:link> to move the leftmost and rightmost rings back and forth. This is the QML code for the animation:</db:para>
<db:programlisting language="qml">Connections {
    target: physicsWorld
    property real totalAnimationTime: 12000
    function onFrameDone(timeStep) {
        let progressStep = timeStep / totalAnimationTime
        animationController.progress += progressStep
        if (animationController.progress &amp;gt;= 1) {
            animationController.completeToEnd()
            animationController.reload()
            animationController.progress = 0
        }
    }
}

AnimationController {
    id: animationController
    animation: SequentialAnimation {
        NumberAnimation {
            target: leftLink
            property: &quot;kinematicPosition.x&quot;
            to: 3 * viewport.ringDistance
            from: -6 * viewport.ringDistance
            easing.type: Easing.InOutCubic
            duration: 1000
        }
        NumberAnimation {
            target: leftLink
            property: &quot;kinematicPosition.x&quot;
            from: 3 * viewport.ringDistance
            to: -6 * viewport.ringDistance
            easing.type: Easing.InOutCubic
            duration: 1000
        }
        NumberAnimation {
            target: rightLink
            property: &quot;kinematicPosition.x&quot;
            to: -3 * viewport.ringDistance
            from: 6 * viewport.ringDistance
            easing.type: Easing.InOutCubic
            duration: 1000
        }
        NumberAnimation {
            target: rightLink
            property: &quot;kinematicPosition.x&quot;
            from: -3 * viewport.ringDistance
            to: 6 * viewport.ringDistance
            easing.type: Easing.InOutCubic
            duration: 1000
        }
    }
}
</db:programlisting>
<db:para>The interesting part is what is happening inside the Mesh and Capsule Links files. Let's take a look at each one of them.</db:para>
</db:section>
<db:section xml:id="mesh-link">
<db:title>Mesh Link</db:title>
<db:programlisting language="qml">DynamicRigidBody {
    scale: Qt.vector3d(100, 100, 100)
    property color color: &quot;white&quot;
    PrincipledMaterial {
        id: _material
        baseColor: color
        metalness: 1.0
        roughness: 0.5
    }

    Model {
        source: &quot;meshes/ring.mesh&quot;
        materials: [_material]
    }

    collisionShapes: [
        ConvexMeshShape {
            source: &quot;meshes/segmentedRing_001.mesh&quot;
        },
        ConvexMeshShape {
            source: &quot;meshes/segmentedRing_002.mesh&quot;
        },
        ConvexMeshShape {
            source: &quot;meshes/segmentedRing_003.mesh&quot;
        },
        ConvexMeshShape {
            source: &quot;meshes/segmentedRing_004.mesh&quot;
        },
        ConvexMeshShape {
            source: &quot;meshes/segmentedRing_005.mesh&quot;
        },
        ConvexMeshShape {
            source: &quot;meshes/segmentedRing_006.mesh&quot;
        },
        ConvexMeshShape {
            source: &quot;meshes/segmentedRing_007.mesh&quot;
        },
        ConvexMeshShape {
            source: &quot;meshes/segmentedRing_008.mesh&quot;
        },
        ConvexMeshShape {
            source: &quot;meshes/segmentedRing_009.mesh&quot;
        },
        ConvexMeshShape {
            source: &quot;meshes/segmentedRing_010.mesh&quot;
        },
        ConvexMeshShape {
            source: &quot;meshes/segmentedRing_011.mesh&quot;
        },
        ConvexMeshShape {
            source: &quot;meshes/segmentedRing_012.mesh&quot;
        }
    ]
}
</db:programlisting>
<db:para>The Mesh Link is a Dynamic Rigid Body with a model and a material. The model loads the mesh from a mesh file. We also have a list of collision shapes that together are combined and form a compound shape for collision detection. Each shape is a Convex Mesh shape which loads the mesh from a source file. A convex shape is basically a shape where the line between any two points within the shape is always inside the shape.</db:para>
<db:para>If we take a closer look when the debug mode is enabled, this is how the collision shapes form the compound collision shape:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/compoundshapes-example-meshlink.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="capsule-link">
<db:title>Capsule Link</db:title>
<db:programlisting language="qml">DynamicRigidBody {
    property real len: 170
    property real w: 17
    PrincipledMaterial {
        id: material3
        baseColor: &quot;yellow&quot;
        metalness: 1.0
        roughness: 0.5
    }
    Node {
        opacity: 1
        Model {
            materials: material3
            source: &quot;#Cylinder&quot;
            scale: Qt.vector3d(w / 100, len / 100, w / 100)
            eulerRotation.z: 90
            y: -len / 2
        }
        Model {
            materials: material3
            source: &quot;#Cylinder&quot;
            scale: Qt.vector3d(w / 100, len / 100, w / 100)
            eulerRotation.z: 90
            y: len / 2
        }
        Model {
            materials: material3
            source: &quot;#Cylinder&quot;
            scale: Qt.vector3d(w / 100, len / 100, w / 100)
            x: len / 2
        }
        Model {
            materials: material3
            source: &quot;#Cylinder&quot;
            scale: Qt.vector3d(w / 100, len / 100, w / 100)
            x: -len / 2
        }
        Model {
            materials: material3
            source: &quot;#Sphere&quot;
            scale: Qt.vector3d(w / 100, w / 100, w / 100)
            x: -len / 2
            y: -len / 2
        }
        Model {
            materials: material3
            source: &quot;#Sphere&quot;
            scale: Qt.vector3d(w / 100, w / 100, w / 100)
            x: -len / 2
            y: len / 2
        }
        Model {
            materials: material3
            source: &quot;#Sphere&quot;
            scale: Qt.vector3d(w / 100, w / 100, w / 100)
            x: len / 2
            y: -len / 2
        }
        Model {
            materials: material3
            source: &quot;#Sphere&quot;
            scale: Qt.vector3d(w / 100, w / 100, w / 100)
            x: len / 2
            y: len / 2
        }
    }
    collisionShapes: [
        CapsuleShape {
            y: -len / 2
            height: len
            diameter: w
        },
        CapsuleShape {
            y: len / 2
            height: len
            diameter: w
        },
        CapsuleShape {
            x: -len / 2
            eulerRotation.z: 90
            height: len
            diameter: w
        },
        CapsuleShape {
            x: len / 2
            eulerRotation.z: 90
            height: len
            diameter: w
        }
    ]
}
</db:programlisting>
<db:para>The Capsule Link is a Dynamic Rigid Body with some models that share the same material. This link is formed from several cylinders and spheres. Like the Mesh Link we have a list of collision shapes. This time each shape is a Capsule Shape.</db:para>
<db:para>If we take a closer look when the debug mode is enabled, this is how the collision shapes form the compound collision shape.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/compoundshapes-example-capsulelink.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="compoundshapes/CMakeLists.txt">compoundshapes/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="compoundshapes/CapsuleLink.qml">compoundshapes/CapsuleLink.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="compoundshapes/MeshLink.qml">compoundshapes/MeshLink.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="compoundshapes/compoundshapes.pro">compoundshapes/compoundshapes.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="compoundshapes/main.cpp">compoundshapes/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="compoundshapes/main.qml">compoundshapes/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="compoundshapes/qml.qrc">compoundshapes/qml.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="compoundshapes/resources.qrc">compoundshapes/resources.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
