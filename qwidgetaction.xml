<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWidgetAction Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwidgetaction.xml">QWidgetAction</db:link> class extends <db:link xlink:href="qaction.xml">QAction</db:link> by an interface for inserting custom widgets into action based containers, such as toolbars.</db:para>
<db:para>This class was introduced in Qt 4.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWidgetAction</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qaction.xml" xlink:role="class">QAction</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QWidgetAction is part of <db:simplelist><db:member>mainwindow-classes</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Most actions in an application are represented as items in menus or buttons in toolbars. However sometimes more complex widgets are necessary. For example a zoom action in a word processor may be realized using a <db:link xlink:href="qcombobox.xml">QComboBox</db:link> in a <db:link xlink:href="qtoolbar.xml">QToolBar</db:link>, presenting a range of different zoom levels. <db:link xlink:href="qtoolbar.xml">QToolBar</db:link> provides <db:link xlink:href="qtoolbar.xml#insertWidget">QToolBar::insertWidget</db:link>() as convenience function for inserting a single widget. However if you want to implement an action that uses custom widgets for visualization in multiple containers then you have to subclass <db:link xlink:href="qwidgetaction.xml">QWidgetAction</db:link>.</db:para>
<db:para>If a <db:link xlink:href="qwidgetaction.xml">QWidgetAction</db:link> is added for example to a <db:link xlink:href="qtoolbar.xml">QToolBar</db:link> then <db:link xlink:href="qwidgetaction.xml#createWidget">QWidgetAction::createWidget</db:link>() is called. Reimplementations of that function should create a new custom widget with the specified parent.</db:para>
<db:para>If the action is removed from a container widget then <db:link xlink:href="qwidgetaction.xml#deleteWidget">QWidgetAction::deleteWidget</db:link>() is called with the previously created custom widget as argument. The default implementation hides the widget and deletes it using <db:link xlink:href="qobject.xml#deleteLater">QObject::deleteLater</db:link>().</db:para>
<db:para>If you have only one single custom widget then you can set it as default widget using <db:link xlink:href="qwidgetaction.xml#setDefaultWidget">setDefaultWidget</db:link>(). That widget will then be used if the action is added to a <db:link xlink:href="qtoolbar.xml">QToolBar</db:link>, or in general to an action container that supports <db:link xlink:href="qwidgetaction.xml">QWidgetAction</db:link>. If a <db:link xlink:href="qwidgetaction.xml">QWidgetAction</db:link> with only a default widget is added to two toolbars at the same time then the default widget is shown only in the first toolbar the action was added to. <db:link xlink:href="qwidgetaction.xml">QWidgetAction</db:link> takes over ownership of the default widget.</db:para>
<db:para>Note that it is up to the widget to activate the action, for example by reimplementing mouse event handlers and calling <db:link xlink:href="qaction.xml#trigger">QAction::trigger</db:link>().</db:para>
<db:para><db:emphasis role="bold">macOS</db:emphasis>: If you add a widget to a menu in the application's menu bar on macOS, the widget will be added and it will function but with some limitations:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>The widget is reparented away from the <db:link xlink:href="qmenu.xml">QMenu</db:link> to the native menu view. If you show the menu in some other place (e.g. as a popup menu), the widget will not be there.</db:para>
</db:listitem>
<db:listitem>
<db:para>Focus/Keyboard handling of the widget is not possible.</db:para>
</db:listitem>
<db:listitem>
<db:para>Due to Apple's design, mouse tracking on the widget currently does not work.</db:para>
</db:listitem>
<db:listitem>
<db:para>Connecting the <db:link xlink:href="qaction.xml#triggered">triggered</db:link>() signal to a slot that opens a modal dialog will cause a crash in macOS 10.4 (known bug acknowledged by Apple), a workaround is to use a QueuedConnection instead of a DirectConnection.</db:para>
</db:listitem>
</db:orderedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml">QAction</db:link></db:member>
<db:member><db:link xlink:href="qactiongroup.xml">QActionGroup</db:link></db:member>
<db:member><db:link xlink:href="qwidget.xml">QWidget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWidgetAction">
<db:title>[explicit] QWidgetAction::QWidgetAction(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Constructs an action with <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QWidgetAction">
<db:title>[virtual noexcept] QWidgetAction::~QWidgetAction()</db:title>
<db:para>Destroys the object and frees allocated resources.</db:para>
</db:section>
<db:section xml:id="createWidget">
<db:title>[virtual protected] QWidget *QWidgetAction::createWidget(QWidget *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>This function is called whenever the action is added to a container widget that supports custom widgets. If you don't want a custom widget to be used as representation of the action in the specified <db:code role="parameter">parent</db:code> widget then 0 should be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidgetaction.xml#deleteWidget">deleteWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createdWidgets">
<db:title>[protected] QList&lt;QWidget *&gt; QWidgetAction::createdWidgets() const</db:title>
<db:para>Returns the list of widgets that have been using <db:link xlink:href="qwidgetaction.xml#createWidget">createWidget</db:link>() and are currently in use by widgets the action has been added to.</db:para>
</db:section>
<db:section xml:id="defaultWidget">
<db:title>QWidget *QWidgetAction::defaultWidget() const</db:title>
<db:para>Returns the default widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidgetaction.xml#setDefaultWidget">setDefaultWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deleteWidget">
<db:title>[virtual protected] void QWidgetAction::deleteWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>This function is called whenever the action is removed from a container widget that displays the action using a custom <db:code role="parameter">widget</db:code> previously created using <db:link xlink:href="qwidgetaction.xml#createWidget">createWidget</db:link>(). The default implementation hides the <db:code role="parameter">widget</db:code> and schedules it for deletion using <db:link xlink:href="qobject.xml#deleteLater">QObject::deleteLater</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidgetaction.xml#createWidget">createWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QWidgetAction::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qaction.xml#event" role="function">QAction::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="eventFilter">
<db:title>[override virtual protected] bool QWidgetAction::eventFilter(QObject *<db:emphasis>obj</db:emphasis>, QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#eventFilter" role="function">QObject::eventFilter(QObject *watched, QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="releaseWidget">
<db:title>void QWidgetAction::releaseWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Releases the specified <db:code role="parameter">widget</db:code>.</db:para>
<db:para>Container widgets that support actions call this function when a widget action is removed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidgetaction.xml#requestWidget">requestWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qwidgetaction.xml#deleteWidget">deleteWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qwidgetaction.xml#defaultWidget">defaultWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requestWidget">
<db:title>QWidget *QWidgetAction::requestWidget(QWidget *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Returns a widget that represents the action, with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Container widgets that support actions can call this function to request a widget as visual representation of the action.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidgetaction.xml#releaseWidget">releaseWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qwidgetaction.xml#createWidget">createWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qwidgetaction.xml#defaultWidget">defaultWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDefaultWidget">
<db:title>void QWidgetAction::setDefaultWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">widget</db:code> to be the default widget. The ownership is transferred to <db:link xlink:href="qwidgetaction.xml">QWidgetAction</db:link>. Unless <db:link xlink:href="qwidgetaction.xml#createWidget">createWidget</db:link>() is reimplemented by a subclass to return a new widget the default widget is used when a container widget requests a widget through <db:link xlink:href="qwidgetaction.xml#requestWidget">requestWidget</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidgetaction.xml#defaultWidget">defaultWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
