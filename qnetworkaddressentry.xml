<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNetworkAddressEntry Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link> class stores one IP address supported by a network interface, along with its associated netmask and broadcast address.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNetworkAddressEntry</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNetworkAddressEntry is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Each network interface can contain zero or more IP addresses, which in turn can be associated with a netmask and/or a broadcast address (depending on support from the operating system).</db:para>
<db:para>This class represents one such group.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DnsEligibilityStatus-enum">
<db:title>[since 5.11] enum QNetworkAddressEntry::DnsEligibilityStatus</db:title>
<db:enumsynopsis>
<db:enumname>DnsEligibilityStatus</db:enumname>
<db:enumitem>
<db:enumidentifier>DnsEligibilityUnknown</db:enumidentifier>
<db:enumvalue>-1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DnsIneligible</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DnsEligible</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum indicates whether a given host address is eligible to be published in the Domain Name System (DNS) or other similar name resolution mechanisms. In general, an address is suitable for publication if it is an address this machine will be reached at for an indeterminate amount of time, though it need not be permanent. For example, addresses obtained via DHCP are often eligible, but cryptographically-generated temporary IPv6 addresses are not.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link></db:emphasis>::DnsEligibilityUnknown</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>Qt and the operating system could not determine whether this address should be published or not. The application may need to apply further heuristics if it cannot find any eligible addresses.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link></db:emphasis>::DnsEligible</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This address is eligible for publication in DNS.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link></db:emphasis>::DnsIneligible</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>This address should not be published in DNS and should not be transmitted to other parties, except maybe as the source address of an outgoing packet.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#dnsEligibility">dnsEligibility</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#setDnsEligibility">setDnsEligibility</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNetworkAddressEntry">
<db:title>QNetworkAddressEntry::QNetworkAddressEntry()</db:title>
<db:constructorsynopsis>
<db:methodname>QNetworkAddressEntry</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkAddressEntry()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty <db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link> object.</db:para>
</db:section>
<db:section xml:id="QNetworkAddressEntry-1">
<db:title>QNetworkAddressEntry::QNetworkAddressEntry(const QNetworkAddressEntry &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QNetworkAddressEntry</db:methodname>
<db:methodparam>
<db:type>const QNetworkAddressEntry &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkAddressEntry(const QNetworkAddressEntry &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link> object that is a copy of the object <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QNetworkAddressEntry">
<db:title>QNetworkAddressEntry::~QNetworkAddressEntry()</db:title>
<db:destructorsynopsis>
<db:methodname>~QNetworkAddressEntry</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QNetworkAddressEntry()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this <db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link> object.</db:para>
</db:section>
<db:section xml:id="broadcast">
<db:title>QHostAddress QNetworkAddressEntry::broadcast() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QHostAddress</db:type>
<db:methodname>broadcast</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHostAddress broadcast() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the broadcast address associated with the IPv4 address and netmask. It can usually be derived from those two by setting to 1 the bits of the IP address where the netmask contains a 0. (In other words, by bitwise-OR'ing the IP address with the inverse of the netmask)</db:para>
<db:para>This member is always empty for IPv6 addresses, since the concept of broadcast has been abandoned in that system in favor of multicast. In particular, the group of hosts corresponding to all the nodes in the local network can be reached by the &quot;all-nodes&quot; special multicast group (address FF02::1).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#setBroadcast">setBroadcast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearAddressLifetime">
<db:title>[since 5.11] void QNetworkAddressEntry::clearAddressLifetime()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearAddressLifetime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearAddressLifetime()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets both the preferred and valid lifetimes for this address. After this call, <db:link xlink:href="qnetworkaddressentry.xml#isLifetimeKnown">isLifetimeKnown</db:link>() will return false.</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#preferredLifetime">preferredLifetime</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#validityLifetime">validityLifetime</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#isLifetimeKnown">isLifetimeKnown</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#setAddressLifetime">setAddressLifetime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dnsEligibility">
<db:title>[since 5.11] QNetworkAddressEntry::DnsEligibilityStatus QNetworkAddressEntry::dnsEligibility() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QNetworkAddressEntry::DnsEligibilityStatus</db:type>
<db:methodname>dnsEligibility</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkAddressEntry::DnsEligibilityStatus dnsEligibility() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether this address is eligible for publication in the Domain Name System (DNS) or similar name resolution mechanisms.</db:para>
<db:para>In general, an address is suitable for publication if it is an address this machine will be reached at for an indeterminate amount of time, though it need not be permanent. For example, addresses obtained via DHCP are often eligible, but cryptographically-generated temporary IPv6 addresses are not.</db:para>
<db:para>On some systems, <db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> will need to heuristically determine which addresses are eligible.</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#isLifetimeKnown">isLifetimeKnown</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#isPermanent">isPermanent</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#setDnsEligibility">setDnsEligibility</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ip">
<db:title>QHostAddress QNetworkAddressEntry::ip() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QHostAddress</db:type>
<db:methodname>ip</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHostAddress ip() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns one IPv4 or IPv6 address found, that was found in a network interface.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#setIp">setIp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isLifetimeKnown">
<db:title>[since 5.11] bool QNetworkAddressEntry::isLifetimeKnown() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isLifetimeKnown</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isLifetimeKnown() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the address lifetime is known, false if not. If the lifetime is not known, both <db:link xlink:href="qnetworkaddressentry.xml#preferredLifetime">preferredLifetime</db:link>() and <db:link xlink:href="qnetworkaddressentry.xml#validityLifetime">validityLifetime</db:link>() will return <db:link xlink:href="qdeadlinetimer.xml#ForeverConstant-enum">QDeadlineTimer::Forever</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#preferredLifetime">preferredLifetime</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#validityLifetime">validityLifetime</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#setAddressLifetime">setAddressLifetime</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#clearAddressLifetime">clearAddressLifetime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isPermanent">
<db:title>[since 5.11] bool QNetworkAddressEntry::isPermanent() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isPermanent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isPermanent() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this address is permanent on this interface, false if it's temporary. A permanent address is one which has no expiration time and is often static (manually configured).</db:para>
<db:para>If this information could not be determined, this function returns true.</db:para>
<db:note>
<db:para>Depending on the operating system and the networking configuration tool, it is possible for a temporary address to be interpreted as permanent, if the tool did not inform the details correctly to the operating system.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#isLifetimeKnown">isLifetimeKnown</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#validityLifetime">validityLifetime</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#isTemporary">isTemporary</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isTemporary">
<db:title>[since 5.11] bool QNetworkAddressEntry::isTemporary() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isTemporary</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isTemporary() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this address is temporary on this interface, false if it's permanent.</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#isLifetimeKnown">isLifetimeKnown</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#validityLifetime">validityLifetime</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#isPermanent">isPermanent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="netmask">
<db:title>QHostAddress QNetworkAddressEntry::netmask() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QHostAddress</db:type>
<db:methodname>netmask</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHostAddress netmask() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the netmask associated with the IP address. The netmask is expressed in the form of an IP address, such as 255.255.0.0.</db:para>
<db:para>For IPv6 addresses, the prefix length is converted to an address where the number of bits set to 1 is equal to the prefix length. For a prefix length of 64 bits (the most common value), the netmask will be expressed as a <db:link xlink:href="qhostaddress.xml">QHostAddress</db:link> holding the address FFFF:FFFF:FFFF:FFFF::</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#setNetmask">setNetmask</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#prefixLength">prefixLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="preferredLifetime">
<db:title>[since 5.11] QDeadlineTimer QNetworkAddressEntry::preferredLifetime() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDeadlineTimer</db:type>
<db:methodname>preferredLifetime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDeadlineTimer preferredLifetime() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the deadline when this address becomes deprecated (no longer preferred), if known. If the address lifetime is not known (see <db:link xlink:href="qnetworkaddressentry.xml#isLifetimeKnown">isLifetimeKnown</db:link>()), this function always returns <db:link xlink:href="qdeadlinetimer.xml#ForeverConstant-enum">QDeadlineTimer::Forever</db:link>.</db:para>
<db:para>While an address is preferred, it may be used by the operating system as the source address for new, outgoing packets. After it becomes deprecated, it will remain valid for incoming packets for a while longer until finally removed (see <db:link xlink:href="qnetworkaddressentry.xml#validityLifetime">validityLifetime</db:link>()).</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#validityLifetime">validityLifetime</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#isLifetimeKnown">isLifetimeKnown</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#setAddressLifetime">setAddressLifetime</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#clearAddressLifetime">clearAddressLifetime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="prefixLength">
<db:title>int QNetworkAddressEntry::prefixLength() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>prefixLength</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int prefixLength() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the prefix length of this IP address. The prefix length matches the number of bits set to 1 in the netmask (see <db:link xlink:href="qnetworkaddressentry.xml#netmask">netmask</db:link>()). For IPv4 addresses, the value is between 0 and 32. For IPv6 addresses, it's contained between 0 and 128 and is the preferred form of representing addresses.</db:para>
<db:para>This function returns -1 if the prefix length could not be determined (i.e., <db:link xlink:href="qnetworkaddressentry.xml#netmask">netmask</db:link>() returns a null QHostAddress()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#setPrefixLength">setPrefixLength</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#netmask">netmask</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAddressLifetime">
<db:title>[since 5.11] void QNetworkAddressEntry::setAddressLifetime(QDeadlineTimer <db:emphasis>preferred</db:emphasis>, QDeadlineTimer <db:emphasis>validity</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAddressLifetime</db:methodname>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>preferred</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>validity</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAddressLifetime(QDeadlineTimer preferred, QDeadlineTimer validity)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets both the preferred and valid lifetimes for this address to the <db:code role="parameter">preferred</db:code> and <db:code role="parameter">validity</db:code> deadlines, respectively. After this call, <db:link xlink:href="qnetworkaddressentry.xml#isLifetimeKnown">isLifetimeKnown</db:link>() will return true, even if both parameters are <db:link xlink:href="qdeadlinetimer.xml#ForeverConstant-enum">QDeadlineTimer::Forever</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#preferredLifetime">preferredLifetime</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#validityLifetime">validityLifetime</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#isLifetimeKnown">isLifetimeKnown</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#clearAddressLifetime">clearAddressLifetime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBroadcast">
<db:title>void QNetworkAddressEntry::setBroadcast(const QHostAddress &amp;<db:emphasis>newBroadcast</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBroadcast</db:methodname>
<db:methodparam>
<db:type>const QHostAddress &amp;</db:type>
<db:parameter>newBroadcast</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBroadcast(const QHostAddress &amp;newBroadcast)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the broadcast IP address of this <db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link> object to <db:code role="parameter">newBroadcast</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#broadcast">broadcast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDnsEligibility">
<db:title>[since 5.11] void QNetworkAddressEntry::setDnsEligibility(QNetworkAddressEntry::DnsEligibilityStatus <db:emphasis>status</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDnsEligibility</db:methodname>
<db:methodparam>
<db:type>QNetworkAddressEntry::DnsEligibilityStatus</db:type>
<db:parameter>status</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDnsEligibility(QNetworkAddressEntry::DnsEligibilityStatus status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the DNS eligibility flag for this address to <db:code role="parameter">status</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#dnsEligibility">dnsEligibility</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIp">
<db:title>void QNetworkAddressEntry::setIp(const QHostAddress &amp;<db:emphasis>newIp</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setIp</db:methodname>
<db:methodparam>
<db:type>const QHostAddress &amp;</db:type>
<db:parameter>newIp</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setIp(const QHostAddress &amp;newIp)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the IP address the <db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link> object contains to <db:code role="parameter">newIp</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#ip">ip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNetmask">
<db:title>void QNetworkAddressEntry::setNetmask(const QHostAddress &amp;<db:emphasis>newNetmask</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setNetmask</db:methodname>
<db:methodparam>
<db:type>const QHostAddress &amp;</db:type>
<db:parameter>newNetmask</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setNetmask(const QHostAddress &amp;newNetmask)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the netmask that this <db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link> object contains to <db:code role="parameter">newNetmask</db:code>. Setting the netmask also sets the prefix length to match the new netmask.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#netmask">netmask</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#setPrefixLength">setPrefixLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPrefixLength">
<db:title>void QNetworkAddressEntry::setPrefixLength(int <db:emphasis>length</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPrefixLength</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPrefixLength(int length)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the prefix length of this IP address to <db:code role="parameter">length</db:code>. The value of <db:code role="parameter">length</db:code> must be valid for this type of IP address: between 0 and 32 for IPv4 addresses, between 0 and 128 for IPv6 addresses. Setting to any invalid value is equivalent to setting to -1, which means &quot;no prefix length&quot;.</db:para>
<db:para>Setting the prefix length also sets the netmask (see <db:link xlink:href="qnetworkaddressentry.xml#netmask">netmask</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#prefixLength">prefixLength</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#setNetmask">setNetmask</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.0] void QNetworkAddressEntry::swap(QNetworkAddressEntry &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QNetworkAddressEntry &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QNetworkAddressEntry &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this network address entry instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="validityLifetime">
<db:title>[since 5.11] QDeadlineTimer QNetworkAddressEntry::validityLifetime() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDeadlineTimer</db:type>
<db:methodname>validityLifetime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDeadlineTimer validityLifetime() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the deadline when this address becomes invalid and will be removed from the networking stack, if known. If the address lifetime is not known (see <db:link xlink:href="qnetworkaddressentry.xml#isLifetimeKnown">isLifetimeKnown</db:link>()), this function always returns <db:link xlink:href="qdeadlinetimer.xml#ForeverConstant-enum">QDeadlineTimer::Forever</db:link>.</db:para>
<db:para>While an address is valid, it will be accepted by the operating system as a valid destination address for this machine. Whether it is used as a source address for new, outgoing packets is controlled by, among other rules, the preferred lifetime (see <db:link xlink:href="qnetworkaddressentry.xml#preferredLifetime">preferredLifetime</db:link>()).</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#preferredLifetime">preferredLifetime</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#isLifetimeKnown">isLifetimeKnown</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#setAddressLifetime">setAddressLifetime</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#clearAddressLifetime">clearAddressLifetime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QNetworkAddressEntry::operator!=(const QNetworkAddressEntry &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QNetworkAddressEntry &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QNetworkAddressEntry &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this network address entry is different from <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QNetworkAddressEntry &amp;QNetworkAddressEntry::operator=(const QNetworkAddressEntry &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QNetworkAddressEntry &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QNetworkAddressEntry &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkAddressEntry &amp; operator=(const QNetworkAddressEntry &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes a copy of the <db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link> object <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QNetworkAddressEntry::operator==(const QNetworkAddressEntry &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QNetworkAddressEntry &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QNetworkAddressEntry &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this network address entry is the same as <db:code role="parameter">other</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt">
<db:title>[since 6.2] QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QNetworkAddressEntry &amp;<db:emphasis>entry</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>debug</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QNetworkAddressEntry &amp;</db:type>
<db:parameter>entry</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug debug, const QNetworkAddressEntry &amp;entry)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the <db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link> <db:code role="parameter">entry</db:code> to the stream and returns a reference to the <db:code role="parameter">debug</db:code> stream.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
</db:section>
</db:article>
