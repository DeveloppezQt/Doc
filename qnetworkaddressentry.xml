<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNetworkAddressEntry Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link> class stores one IP address supported by a network interface, along with its associated netmask and broadcast address.</db:para>
<db:para>This class was introduced in Qt 4.2.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNetworkAddressEntry</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNetworkAddressEntry is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Each network interface can contain zero or more IP addresses, which in turn can be associated with a netmask and/or a broadcast address (depending on support from the operating system).</db:para>
<db:para>This class represents one such group.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNetworkAddressEntry">
<db:title>QNetworkAddressEntry::QNetworkAddressEntry()</db:title>
<db:para>Constructs an empty <db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link> object.</db:para>
</db:section>
<db:section xml:id="QNetworkAddressEntry-1">
<db:title>QNetworkAddressEntry::QNetworkAddressEntry(const QNetworkAddressEntry &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link> object that is a copy of the object <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QNetworkAddressEntry">
<db:title>[noexcept] QNetworkAddressEntry::~QNetworkAddressEntry()</db:title>
<db:para>Destroys this <db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link> object.</db:para>
</db:section>
<db:section xml:id="broadcast">
<db:title>QHostAddress QNetworkAddressEntry::broadcast() const</db:title>
<db:para>Returns the broadcast address associated with the IPv4 address and netmask. It can usually be derived from those two by setting to 1 the bits of the IP address where the netmask contains a 0. (In other words, by bitwise-OR'ing the IP address with the inverse of the netmask)</db:para>
<db:para>This member is always empty for IPv6 addresses, since the concept of broadcast has been abandoned in that system in favor of multicast. In particular, the group of hosts corresponding to all the nodes in the local network can be reached by the &quot;all-nodes&quot; special multicast group (address FF02::1).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#setBroadcast">setBroadcast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ip">
<db:title>QHostAddress QNetworkAddressEntry::ip() const</db:title>
<db:para>This function returns one IPv4 or IPv6 address found, that was found in a network interface.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#setIp">setIp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="netmask">
<db:title>QHostAddress QNetworkAddressEntry::netmask() const</db:title>
<db:para>Returns the netmask associated with the IP address. The netmask is expressed in the form of an IP address, such as 255.255.0.0.</db:para>
<db:para>For IPv6 addresses, the prefix length is converted to an address where the number of bits set to 1 is equal to the prefix length. For a prefix length of 64 bits (the most common value), the netmask will be expressed as a <db:link xlink:href="qhostaddress.xml">QHostAddress</db:link> holding the address FFFF:FFFF:FFFF:FFFF::</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#setNetmask">setNetmask</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#prefixLength">prefixLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="prefixLength">
<db:title>[since 4.5] int QNetworkAddressEntry::prefixLength() const</db:title>
<db:para>Returns the prefix length of this IP address. The prefix length matches the number of bits set to 1 in the netmask (see <db:link xlink:href="qnetworkaddressentry.xml#netmask">netmask</db:link>()). For IPv4 addresses, the value is between 0 and 32. For IPv6 addresses, it's contained between 0 and 128 and is the preferred form of representing addresses.</db:para>
<db:para>This function returns -1 if the prefix length could not be determined (i.e., <db:link xlink:href="qnetworkaddressentry.xml#netmask">netmask</db:link>() returns a null QHostAddress()).</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#setPrefixLength">setPrefixLength</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#netmask">netmask</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBroadcast">
<db:title>void QNetworkAddressEntry::setBroadcast(const QHostAddress &amp;<db:emphasis>newBroadcast</db:emphasis>)</db:title>
<db:para>Sets the broadcast IP address of this <db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link> object to <db:code role="parameter">newBroadcast</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#broadcast">broadcast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIp">
<db:title>void QNetworkAddressEntry::setIp(const QHostAddress &amp;<db:emphasis>newIp</db:emphasis>)</db:title>
<db:para>Sets the IP address the <db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link> object contains to <db:code role="parameter">newIp</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#ip">ip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNetmask">
<db:title>void QNetworkAddressEntry::setNetmask(const QHostAddress &amp;<db:emphasis>newNetmask</db:emphasis>)</db:title>
<db:para>Sets the netmask that this <db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link> object contains to <db:code role="parameter">newNetmask</db:code>. Setting the netmask also sets the prefix length to match the new netmask.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#netmask">netmask</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#setPrefixLength">setPrefixLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPrefixLength">
<db:title>[since 4.5] void QNetworkAddressEntry::setPrefixLength(int <db:emphasis>length</db:emphasis>)</db:title>
<db:para>Sets the prefix length of this IP address to <db:code role="parameter">length</db:code>. The value of <db:code role="parameter">length</db:code> must be valid for this type of IP address: between 0 and 32 for IPv4 addresses, between 0 and 128 for IPv6 addresses. Setting to any invalid value is equivalent to setting to -1, which means &quot;no prefix length&quot;.</db:para>
<db:para>Setting the prefix length also sets the netmask (see <db:link xlink:href="qnetworkaddressentry.xml#netmask">netmask</db:link>()).</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml#prefixLength">prefixLength</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaddressentry.xml#setNetmask">setNetmask</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept, since 5.0] void QNetworkAddressEntry::swap(QNetworkAddressEntry &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this network address entry instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QNetworkAddressEntry::operator!=(const QNetworkAddressEntry &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this network address entry is different from <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QNetworkAddressEntry &amp;QNetworkAddressEntry::operator=(const QNetworkAddressEntry &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Makes a copy of the <db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link> object <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QNetworkAddressEntry::operator==(const QNetworkAddressEntry &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this network address entry is the same as <db:code role="parameter">other</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
