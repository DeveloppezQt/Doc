<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ShaderEffect QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Applies custom shaders to a rectangle.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick 2.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-item.xml">Item</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>ShaderEffect is part of <db:simplelist><db:member>qtquick-effects</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> type applies a custom OpenGL <db:link xlink:href="qml-qtquick-shadereffect.xml#vertexShader-prop">vertex</db:link> and <db:link xlink:href="qml-qtquick-shadereffect.xml#fragmentShader-prop">fragment</db:link> shader to a rectangle. It allows you to write effects such as drop shadow, blur, colorize and page curl directly in QML.</db:para>
<db:para>There are two types of input to the <db:link xlink:href="qml-qtquick-shadereffect.xml#vertexShader-prop">vertexShader</db:link>: uniform variables and attributes. Some are predefined:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>uniform mat4 qt_Matrix - combined transformation matrix, the product of the matrices from the root item to this <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>, and an orthogonal projection.</db:para>
</db:listitem>
<db:listitem>
<db:para>uniform float qt_Opacity - combined opacity, the product of the opacities from the root item to this <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>attribute vec4 qt_Vertex - vertex position, the top-left vertex has position (0, 0), the bottom-right (<db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link>, <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link>).</db:para>
</db:listitem>
<db:listitem>
<db:para>attribute vec2 qt_MultiTexCoord0 - texture coordinate, the top-left coordinate is (0, 0), the bottom-right (1, 1). If <db:link xlink:href="qml-qtquick-shadereffect.xml#supportsAtlasTextures-prop">supportsAtlasTextures</db:link> is true, coordinates will be based on position in the atlas instead.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In addition, any property that can be mapped to an OpenGL Shading Language (GLSL) type is available as a uniform variable. The following list shows how properties are mapped to GLSL uniform variables:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>bool, int, qreal -&gt; bool, int, float - If the type in the shader is not the same as in QML, the value is converted automatically.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qcolor.xml">QColor</db:link> -&gt; vec4 - When colors are passed to the shader, they are first premultiplied. Thus Qt.rgba(0.2, 0.6, 1.0, 0.5) becomes vec4(0.1, 0.3, 0.5, 0.5) in the shader, for example.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qrect.xml">QRect</db:link>, <db:link xlink:href="qrectf.xml">QRectF</db:link> -&gt; vec4 - Qt.rect(x, y, w, h) becomes vec4(x, y, w, h) in the shader.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpoint.xml">QPoint</db:link>, <db:link xlink:href="qpointf.xml">QPointF</db:link>, <db:link xlink:href="qsize.xml">QSize</db:link>, <db:link xlink:href="qsizef.xml">QSizeF</db:link> -&gt; vec2</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qvector3d.xml">QVector3D</db:link> -&gt; vec3</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qvector4d.xml">QVector4D</db:link> -&gt; vec4</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtransform.xml">QTransform</db:link> -&gt; mat3</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmatrix4x4.xml">QMatrix4x4</db:link> -&gt; mat4</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qquaternion.xml">QQuaternion</db:link> -&gt; vec4, scalar value is <db:code>w</db:code>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-image.xml">Image</db:link> -&gt; sampler2D - Origin is in the top-left corner, and the color values are premultiplied. The texture is provided as is, excluding the Image item's fillMode. To include fillMode, use a <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> or Image::layer::enabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> -&gt; sampler2D - Origin is in the top-left corner, and the color values are premultiplied.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The QML scene graph back-end may choose to allocate textures in texture atlases. If a texture allocated in an atlas is passed to a <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>, it is by default copied from the texture atlas into a stand-alone texture so that the texture coordinates span from 0 to 1, and you get the expected wrap modes. However, this will increase the memory usage. To avoid the texture copy, set <db:link xlink:href="qml-qtquick-shadereffect.xml#supportsAtlasTextures-prop">supportsAtlasTextures</db:link> for simple shaders using qt_MultiTexCoord0, or for each &quot;uniform sampler2D &lt;name&gt;&quot; declare a &quot;uniform vec4 qt_SubRect_&lt;name&gt;&quot; which will be assigned the texture's normalized source rectangle. For stand-alone textures, the source rectangle is [0, 1]x[0, 1]. For textures in an atlas, the source rectangle corresponds to the part of the texture atlas where the texture is stored. The correct way to calculate the texture coordinate for a texture called &quot;source&quot; within a texture atlas is &quot;qt_SubRect_source.xy + qt_SubRect_source.zw * qt_MultiTexCoord0&quot;.</db:para>
<db:para>The output from the <db:link xlink:href="qml-qtquick-shadereffect.xml#fragmentShader-prop">fragmentShader</db:link> should be premultiplied. If <db:link xlink:href="qml-qtquick-shadereffect.xml#blending-prop">blending</db:link> is enabled, source-over blending is used. However, additive blending can be achieved by outputting zero in the alpha channel.</db:para>
<db:informaltable style="generic" width="70%">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-shadereffectitem.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    width: 200; height: 100
    Row {
        Image { id: img;
                sourceSize { width: 100; height: 100 } source: &quot;qt-logo.png&quot; }
        ShaderEffect {
            width: 100; height: 100
            property variant src: img
            vertexShader: &quot;
                uniform highp mat4 qt_Matrix;
                attribute highp vec4 qt_Vertex;
                attribute highp vec2 qt_MultiTexCoord0;
                varying highp vec2 coord;
                void main() {
                    coord = qt_MultiTexCoord0;
                    gl_Position = qt_Matrix * qt_Vertex;
                }&quot;
            fragmentShader: &quot;
                varying highp vec2 coord;
                uniform sampler2D src;
                uniform lowp float qt_Opacity;
                void main() {
                    lowp vec4 tex = texture2D(src, coord);
                    gl_FragColor = vec4(vec3(dot(tex.rgb,
                                        vec3(0.344, 0.5, 0.156))),
                                             tex.a) * qt_Opacity;
                }&quot;
        }
    }
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>By default, the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> consists of four vertices, one for each corner. For non-linear vertex transformations, like page curl, you can specify a fine grid of vertices by specifying a <db:link xlink:href="qml-qtquick-shadereffect.xml#mesh-prop">mesh</db:link> resolution.</db:para>
<db:section xml:id="shadereffect-and-item-layers">
<db:title>ShaderEffect and Item Layers</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> type can be combined with <db:link xlink:href="qml-qtquick-item.xml#item-layers">layered items</db:link>.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Layer with effect disabled</db:emphasis> <db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-shadereffect-nolayereffect.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Layer with effect enabled</db:emphasis> <db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-shadereffect-layereffect.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">Item {
    id: layerRoot
    layer.enabled: true
    layer.effect: ShaderEffect {
        fragmentShader: &quot;
            uniform lowp sampler2D source; // this item
            uniform lowp float qt_Opacity; // inherited opacity of this item
            varying highp vec2 qt_TexCoord0;
            void main() {
                lowp vec4 p = texture2D(source, qt_TexCoord0);
                lowp float g = dot(p.xyz, vec3(0.344, 0.5, 0.156));
                gl_FragColor = vec4(g, g, g, p.a) * qt_Opacity;
            }&quot;
    }
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>It is also possible to combine multiple layered items:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-shadereffect-opacitymask.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">    Rectangle {
        id: gradientRect;
        width: 10
        height: 10
        gradient: Gradient {
            GradientStop { position: 0; color: &quot;white&quot; }
            GradientStop { position: 1; color: &quot;steelblue&quot; }
        }
        visible: false; // should not be visible on screen.
        layer.enabled: true;
        layer.smooth: true
    }

    Text {
        id: textItem
        font.pixelSize: 48
        text: &quot;Gradient Text&quot;
        anchors.centerIn: parent
        layer.enabled: true
        // This item should be used as the 'mask'
        layer.samplerName: &quot;maskSource&quot;
        layer.effect: ShaderEffect {
            property var colorSource: gradientRect;
            fragmentShader: &quot;
                uniform lowp sampler2D colorSource;
                uniform lowp sampler2D maskSource;
                uniform lowp float qt_Opacity;
                varying highp vec2 qt_TexCoord0;
                void main() {
                    gl_FragColor =
                        texture2D(colorSource, qt_TexCoord0)
                        * texture2D(maskSource, qt_TexCoord0).a
                        * qt_Opacity;
                }
            &quot;
        }
    }
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:link xlink:href="qtgraphicaleffects-index.xml">Qt Graphical Effects</db:link> module contains several ready-made effects for using with Qt Quick applications.</db:para>
<db:note>
<db:para>Scene Graph textures have origin in the top-left corner rather than bottom-left which is common in OpenGL.</db:para>
</db:note>
<db:para>For information about the GLSL version being used, see <db:link xlink:href="qml-qtquick-openglinfo.xml">QtQuick::OpenGLInfo</db:link>.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#item-layers">Item Layers</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="blending-prop">
<db:title>blending : bool</db:title>
<db:para>If this property is true, the output from the <db:link xlink:href="qml-qtquick-shadereffect.xml#fragmentShader-prop">fragmentShader</db:link> is blended with the background using source-over blend mode. If false, the background is disregarded. Blending decreases the performance, so you should set this property to false when blending is not needed. The default value is true.</db:para>
</db:section>
<db:section xml:id="cullMode-prop">
<db:title>cullMode : enumeration</db:title>
<db:para>This property defines which sides of the item should be visible.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.NoCulling - Both sides are visible</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.BackFaceCulling - only front side is visible</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.FrontFaceCulling - only back side is visible</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The default is NoCulling.</db:para>
</db:section>
<db:section xml:id="fragmentShader-prop">
<db:title>fragmentShader : string</db:title>
<db:para>This property holds the fragment shader's GLSL source code. The default shader expects the texture coordinate to be passed from the vertex shader as &quot;varying highp vec2 qt_TexCoord0&quot;, and it samples from a sampler2D named &quot;source&quot;.</db:para>
</db:section>
<db:section xml:id="log-prop">
<db:title>[read-only] log : string</db:title>
<db:para>This property holds a log of warnings and errors from the latest attempt at compiling and linking the OpenGL shader program. It is updated at the same time <db:link xlink:href="qml-qtquick-shadereffect.xml#status-prop">status</db:link> is set to Compiled or Error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-shadereffect.xml#status-prop">status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mesh-prop">
<db:title>mesh : variant</db:title>
<db:para>This property defines the mesh used to draw the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>. It can hold any <db:link xlink:href="qml-qtquick-gridmesh.xml">GridMesh</db:link> object. If a size value is assigned to this property, the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> implicitly uses a <db:link xlink:href="qml-qtquick-gridmesh.xml">GridMesh</db:link> with the value as <db:link xlink:href="qml-qtquick-gridmesh.xml#resolution-prop">mesh resolution</db:link>. By default, this property is the size 1x1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-gridmesh.xml">GridMesh</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : enumeration</db:title>
<db:para>This property tells the current status of the OpenGL shader program.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.Compiled - the shader program was successfully compiled and linked.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.Uncompiled - the shader program has not yet been compiled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.Error - the shader program failed to compile or link.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When setting the fragment or vertex shader source code, the status will become Uncompiled. The first time the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> is rendered with new shader source code, the shaders are compiled and linked, and the status is updated to Compiled or Error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-shadereffect.xml#log-prop">log</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportsAtlasTextures-prop">
<db:title>[since QtQuick 2.4] supportsAtlasTextures : bool</db:title>
<db:para>Set this property true to confirm that your shader code doesn't rely on qt_MultiTexCoord0 ranging from (0,0) to (1,1) relative to the mesh. In this case the range of qt_MultiTexCoord0 will rather be based on the position of the texture within the atlas. This property currently has no effect if there is less, or more, than one sampler uniform used as input to your shader.</db:para>
<db:para>This differs from providing qt_SubRect_&lt;name&gt; uniforms in that the latter allows drawing one or more textures from the atlas in a single <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> item, while supportsAtlasTextures allows multiple instances of a <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> component using a different source image from the atlas to be batched in a single draw. Both prevent a texture from being copied out of the atlas when referenced by a <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.</db:para>
<db:para>The default value is false.</db:para>
<db:para>This property was introduced in QtQuick 2.4.</db:para>
</db:section>
<db:section xml:id="vertexShader-prop">
<db:title>vertexShader : string</db:title>
<db:para>This property holds the vertex shader's GLSL source code. The default shader passes the texture coordinate along to the fragment shader as &quot;varying highp vec2 qt_TexCoord0&quot;.</db:para>
</db:section>
</db:section>
</db:article>
