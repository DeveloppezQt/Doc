<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ShaderEffect QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Applies custom shaders to a rectangle.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick 2.13</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Item</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>ShaderEffect is part of <db:simplelist><db:member>qtquick-effects</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> type applies a custom <db:link xlink:href="qml-qtquick-shadereffect.xml#vertexShader-prop">vertex</db:link> and <db:link xlink:href="qml-qtquick-shadereffect.xml#fragmentShader-prop">fragment (pixel)</db:link> shader to a rectangle. It allows you to write effects such as drop shadow, blur, colorize and page curl directly in QML.</db:para>
<db:note>
<db:para>Depending on the Qt Quick scenegraph backend in use, the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> type may not be supported (for example, with the software backend), or may use a different shading language with rules and expectations different from OpenGL and GLSL.</db:para>
</db:note>
<db:section xml:id="opengl-and-glsl">
<db:title>OpenGL and GLSL</db:title>
<db:para>There are two types of input to the <db:link xlink:href="qml-qtquick-shadereffect.xml#vertexShader-prop">vertexShader</db:link>: uniform variables and attributes. Some are predefined:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>uniform mat4 qt_Matrix - combined transformation matrix, the product of the matrices from the root item to this <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>, and an orthogonal projection.</db:para>
</db:listitem>
<db:listitem>
<db:para>uniform float qt_Opacity - combined opacity, the product of the opacities from the root item to this <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>attribute vec4 qt_Vertex - vertex position, the top-left vertex has position (0, 0), the bottom-right (<db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link>, <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link>).</db:para>
</db:listitem>
<db:listitem>
<db:para>attribute vec2 qt_MultiTexCoord0 - texture coordinate, the top-left coordinate is (0, 0), the bottom-right (1, 1). If <db:link xlink:href="qml-qtquick-shadereffect.xml#supportsAtlasTextures-prop">supportsAtlasTextures</db:link> is true, coordinates will be based on position in the atlas instead.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In addition, any property that can be mapped to an OpenGL Shading Language (GLSL) type is available as a uniform variable. The following list shows how properties are mapped to GLSL uniform variables:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>bool, int, qreal -&gt; bool, int, float - If the type in the shader is not the same as in QML, the value is converted automatically.</db:para>
</db:listitem>
<db:listitem>
<db:para>QColor -&gt; vec4 - When colors are passed to the shader, they are first premultiplied. Thus Qt.rgba(0.2, 0.6, 1.0, 0.5) becomes vec4(0.1, 0.3, 0.5, 0.5) in the shader, for example.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qrect.xml">QRect</db:link>, <db:link xlink:href="qrectf.xml">QRectF</db:link> -&gt; vec4 - Qt.rect(x, y, w, h) becomes vec4(x, y, w, h) in the shader.</db:para>
</db:listitem>
<db:listitem>
<db:para>QPoint, QPointF, QSize, QSizeF -&gt; vec2</db:para>
</db:listitem>
<db:listitem>
<db:para>QVector3D -&gt; vec3</db:para>
</db:listitem>
<db:listitem>
<db:para>QVector4D -&gt; vec4</db:para>
</db:listitem>
<db:listitem>
<db:para>QTransform -&gt; mat3</db:para>
</db:listitem>
<db:listitem>
<db:para>QMatrix4x4 -&gt; mat4</db:para>
</db:listitem>
<db:listitem>
<db:para>QQuaternion -&gt; vec4, scalar value is <db:code>w</db:code>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-image.xml">Image</db:link> -&gt; sampler2D - Origin is in the top-left corner, and the color values are premultiplied. The texture is provided as is, excluding the Image item's fillMode. To include fillMode, use a <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> or Image::layer::enabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> -&gt; sampler2D - Origin is in the top-left corner, and the color values are premultiplied.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The QML scene graph back-end may choose to allocate textures in texture atlases. If a texture allocated in an atlas is passed to a <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>, it is by default copied from the texture atlas into a stand-alone texture so that the texture coordinates span from 0 to 1, and you get the expected wrap modes. However, this will increase the memory usage. To avoid the texture copy, set <db:link xlink:href="qml-qtquick-shadereffect.xml#supportsAtlasTextures-prop">supportsAtlasTextures</db:link> for simple shaders using qt_MultiTexCoord0, or for each &quot;uniform sampler2D &lt;name&gt;&quot; declare a &quot;uniform vec4 qt_SubRect_&lt;name&gt;&quot; which will be assigned the texture's normalized source rectangle. For stand-alone textures, the source rectangle is [0, 1]x[0, 1]. For textures in an atlas, the source rectangle corresponds to the part of the texture atlas where the texture is stored. The correct way to calculate the texture coordinate for a texture called &quot;source&quot; within a texture atlas is &quot;qt_SubRect_source.xy + qt_SubRect_source.zw * qt_MultiTexCoord0&quot;.</db:para>
<db:para>The output from the <db:link xlink:href="qml-qtquick-shadereffect.xml#fragmentShader-prop">fragmentShader</db:link> should be premultiplied. If <db:link xlink:href="qml-qtquick-shadereffect.xml#blending-prop">blending</db:link> is enabled, source-over blending is used. However, additive blending can be achieved by outputting zero in the alpha channel.</db:para>
<db:informaltable style="generic" width="70%">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-shadereffectitem.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    width: 200; height: 100
    Row {
        Image { id: img;
                sourceSize { width: 100; height: 100 } source: &quot;qt-logo.png&quot; }
        ShaderEffect {
            width: 100; height: 100
            property variant src: img
            vertexShader: &quot;
                uniform highp mat4 qt_Matrix;
                attribute highp vec4 qt_Vertex;
                attribute highp vec2 qt_MultiTexCoord0;
                varying highp vec2 coord;
                void main() {
                    coord = qt_MultiTexCoord0;
                    gl_Position = qt_Matrix * qt_Vertex;
                }&quot;
            fragmentShader: &quot;
                varying highp vec2 coord;
                uniform sampler2D src;
                uniform lowp float qt_Opacity;
                void main() {
                    lowp vec4 tex = texture2D(src, coord);
                    gl_FragColor = vec4(vec3(dot(tex.rgb,
                                        vec3(0.344, 0.5, 0.156))),
                                             tex.a) * qt_Opacity;
                }&quot;
        }
    }
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>Scene Graph textures have origin in the top-left corner rather than bottom-left which is common in OpenGL.</db:para>
</db:note>
<db:para>For information about the GLSL version being used, see <db:link xlink:href="qml-qtquick-graphicsinfo.xml">QtQuick::GraphicsInfo</db:link>.</db:para>
<db:para>Starting from Qt 5.8 <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> also supports reading the GLSL source code from files. Whenever the <db:link xlink:href="qml-qtquick-shadereffect.xml#fragmentShader-prop">fragmentShader</db:link> or <db:link xlink:href="qml-qtquick-shadereffect.xml#vertexShader-prop">vertexShader</db:link> property value is a URL with the <db:code>file</db:code> or <db:code>qrc</db:code> schema, it is treated as a file reference and the source code is read from the specified file.</db:para>
</db:section>
<db:section xml:id="direct3d-and-hlsl">
<db:title>Direct3D and HLSL</db:title>
<db:para>Direct3D backends provide <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> support with HLSL. The Direct3D 12 backend requires using at least Shader Model 5.0 both for vertex and pixel shaders. When necessary, <db:link xlink:href="qml-qtquick-graphicsinfo.xml">GraphicsInfo</db:link>.shaderType can be used to decide at runtime what kind of value to assign to <db:link xlink:href="qml-qtquick-shadereffect.xml#fragmentShader-prop">fragmentShader</db:link> or <db:link xlink:href="qml-qtquick-shadereffect.xml#vertexShader-prop">vertexShader</db:link>.</db:para>
<db:para>All concepts described above for OpenGL and GLSL apply to Direct3D and HLSL as well. There are however a number of notable practical differences, which are the following:</db:para>
<db:para>Instead of uniforms, HLSL shaders are expected to use a single constant buffer, assigned to register <db:code>b0</db:code>. The special names <db:code>qt_Matrix</db:code>, <db:code>qt_Opacity</db:code>, and <db:code>qt_SubRect_&lt;name&gt;</db:code> function the same way as with GLSL. All other members of the buffer are expected to map to properties in the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> item.</db:para>
<db:note>
<db:para>The buffer layout must be compatible for both shaders. This means that application-provided shaders must make sure <db:code>qt_Matrix</db:code> and <db:code>qt_Opacity</db:code> are included in the buffer, starting at offset 0, when custom code is provided for one type of shader only, leading to <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> providing the other shader. This is due to <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>'s built-in shader code declaring a constant buffer containing <db:code>float4x4 qt_Matrix; float qt_Opacity;</db:code>.</db:para>
</db:note>
<db:para>Unlike GLSL's attributes, no names are used for vertex input elements. Therefore qt_Vertex and qt_MultiTexCoord0 are not relevant. Instead, the standard Direct3D semantics, <db:code>POSITION</db:code> and <db:code>TEXCOORD</db:code> (or <db:code>TEXCOORD0</db:code>) are used for identifying the correct input layout.</db:para>
<db:para>Unlike GLSL's samplers, texture and sampler objects are separate in HLSL. Shaders are expected to expect 2D, non-array, non-multisample textures. Both the texture and sampler binding points are expected to be sequential and start from 0 (meaning registers <db:code>t0, t1, ...</db:code>, and <db:code>s0, s1, ...</db:code>, respectively). Unlike with OpenGL, samplers are not mapped to Qt Quick item properties and therefore the name of the sampler is not relevant. Instead, it is the textures that map to properties referencing <db:link xlink:href="qml-qtquick-image.xml">Image</db:link> or <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> items.</db:para>
<db:para>Unlike OpenGL, backends for modern APIs will typically prefer offline compilation and shipping pre-compiled bytecode with applications instead of inlined shader source strings. In this case the string properties for vertex and fragment shaders are treated as URLs referring to local files or files shipped via the Qt resource system.</db:para>
<db:para>To check at runtime what is supported, use the <db:link xlink:href="qml-qtquick-graphicsinfo.xml">GraphicsInfo</db:link>.shaderSourceType and <db:link xlink:href="qml-qtquick-graphicsinfo.xml">GraphicsInfo</db:link>.shaderCompilationType properties. Note that these are bitmasks, because some backends may support multiple approaches.</db:para>
<db:para>In case of Direct3D 12, all combinations are supported. If the <db:link xlink:href="qml-qtquick-shadereffect.xml#vertexShader-prop">vertexShader</db:link> and <db:link xlink:href="qml-qtquick-shadereffect.xml#fragmentShader-prop">fragmentShader</db:link> properties form a valid URL with the <db:code>file</db:code> or <db:code>qrc</db:code> schema, the bytecode or HLSL source code is read from the specified file. The type of the file contents is detected automatically. Otherwise, the string is treated as HLSL source code and is compiled at runtime, assuming Shader Model 5.0 and an entry point of <db:code>&quot;main&quot;</db:code>. This allows dynamically constructing shader strings. However, whenever the shader source code is static, it is strongly recommended to pre-compile to bytecode using the <db:code>fxc</db:code> tool and refer to these files from QML. This will be a lot more efficient at runtime and allows catching syntax errors in the shaders at compile time.</db:para>
<db:para>Unlike OpenGL, the Direct3D backend is able to perform runtime shader compilation on dedicated threads. This is managed transparently to the applications, and means that <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> items that contain HLSL source strings do not block the rendering or other parts of the application until the bytecode is ready.</db:para>
<db:para>Using files with bytecode is more flexible also when it comes to the entry point name (it can be anything, not limited to <db:code>main</db:code>) and the shader model (it can be something newer than 5.0, for instance 5.1).</db:para>
<db:informaltable style="generic" width="70%">
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    width: 200; height: 100
    Row {
        Image { id: img;
                sourceSize { width: 100; height: 100 } source: &quot;qt-logo.png&quot; }
        ShaderEffect {
            width: 100; height: 100
            property variant src: img
            fragmentShader: &quot;qrc:/effect_ps.cso&quot;
        }
    }
}
</db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>where <db:code>effect_ps.cso</db:code> is the compiled bytecode for the following HLSL shader:</db:para>
<db:programlisting language="cpp">cbuffer ConstantBuffer : register(b0)
{
    float4x4 qt_Matrix;
    float qt_Opacity;
};
Texture2D src : register(t0);
SamplerState srcSampler : register(s0);
float4 ExamplePixelShader(float4 position : SV_POSITION, float2 coord : TEXCOORD0) : SV_TARGET
{
    float4 tex = src.Sample(srcSampler, coord);
    float3 col = dot(tex.rgb, float3(0.344, 0.5, 0.156));
    return float4(col, tex.a) * qt_Opacity;
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The above is equivalent to the OpenGL example presented earlier. The vertex shader is provided implicitly by <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>. Note that the output of the pixel shader is using premultiplied alpha and that <db:code>qt_Matrix</db:code> is present in the constant buffer at offset 0, even though the pixel shader does not use the value.</db:para>
<db:para>If desired, the HLSL source code can be placed directly into the QML source, similarly to how its done with GLSL. The only difference in this case is the entry point name, which must be <db:code>main</db:code> when using inline source strings.</db:para>
<db:para>Alternatively, we could also have referred to a file containing the source of the effect instead of the compiled bytecode version.</db:para>
<db:para>Some effects will want to provide a vertex shader as well. Below is a similar effect with both the vertex and fragment shader provided by the application. This time the colorization factor is provided by the QML item instead of hardcoding it in the shader. This can allow, among others, animating the value using QML's and Qt Quick's standard facilities.</db:para>
<db:informaltable style="generic" width="70%">
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    width: 200; height: 100
    Row {
        Image { id: img;
                sourceSize { width: 100; height: 100 } source: &quot;qt-logo.png&quot; }
        ShaderEffect {
            width: 100; height: 100
            property variant src: img
            property variant color: Qt.vector3d(0.344, 0.5, 0.156)
            vertexShader: &quot;qrc:/effect_vs.cso&quot;
            fragmentShader: &quot;qrc:/effect_ps.cso&quot;
        }
    }
}
</db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>where <db:code>effect_vs.cso</db:code> and <db:code>effect_ps.cso</db:code> are the compiled bytecode for <db:code>ExampleVertexShader</db:code> and <db:code>ExamplePixelShader</db:code>. The source code is presented as one snippet here, the shaders can however be placed in separate source files as well.</db:para>
<db:programlisting language="cpp">cbuffer ConstantBuffer : register(b0)
{
    float4x4 qt_Matrix;
    float qt_Opacity;
    float3 color;
};
Texture2D src : register(t0);
SamplerState srcSampler : register(s0);
struct PSInput
{
    float4 position : SV_POSITION;
    float2 coord : TEXCOORD0;
};
PSInput ExampleVertexShader(float4 position : POSITION, float2 coord : TEXCOORD0)
{
    PSInput result;
    result.position = mul(qt_Matrix, position);
    result.coord = coord;
    return result;
}
float4 ExamplePixelShader(PSInput input) : SV_TARGET
{
    float4 tex = src.Sample(srcSampler, coord);
    float3 col = dot(tex.rgb, color);
    return float4(col, tex.a) * qt_Opacity;
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>With OpenGL the <db:code>y</db:code> coordinate runs from bottom to top whereas with Direct 3D it goes top to bottom. For shader effect sources Qt Quick hides the difference by treating QtQuick::ShaderEffectSource::textureMirroring as appropriate, meaning texture coordinates in HLSL version of the shaders will not need any adjustments compared to the equivalent GLSL code.</db:para>
</db:note>
</db:section>
<db:section xml:id="cross-platform-cross-api-shadereffect-items">
<db:title>Cross-platform, Cross-API ShaderEffect Items</db:title>
<db:para>Some applications will want to be functional with multiple accelerated graphics backends. This has consequences for <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> items because the supported shading languages may vary from backend to backend.</db:para>
<db:para>There are two approaches to handle this: either write conditional property values based on <db:link xlink:href="qml-qtquick-graphicsinfo.xml">GraphicsInfo</db:link>.shaderType, or use file selectors. In practice the latter is strongly recommended as it leads to more concise and cleaner application code. The only case it is not suitable is when the source strings are constructed dynamically.</db:para>
<db:informaltable style="generic" width="70%">
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">import QtQuick 2.8 // for GraphicsInfo

Rectangle {
    width: 200; height: 100
    Row {
        Image { id: img;
                sourceSize { width: 100; height: 100 } source: &quot;qt-logo.png&quot; }
        ShaderEffect {
            width: 100; height: 100
            property variant src: img
            property variant color: Qt.vector3d(0.344, 0.5, 0.156)
            fragmentShader: GraphicsInfo.shaderType === GraphicsInfo.GLSL ?
                &quot;varying highp vec2 coord;
                uniform sampler2D src;
                uniform lowp float qt_Opacity;
                void main() {
                    lowp vec4 tex = texture2D(src, coord);
                    gl_FragColor = vec4(vec3(dot(tex.rgb,
                                        vec3(0.344, 0.5, 0.156))),
                                             tex.a) * qt_Opacity;&quot;
            : GraphicsInfo.shaderType === GraphicsInfo.HLSL ?
                &quot;cbuffer ConstantBuffer : register(b0)
                {
                    float4x4 qt_Matrix;
                    float qt_Opacity;
                };
                Texture2D src : register(t0);
                SamplerState srcSampler : register(s0);
                float4 ExamplePixelShader(float4 position : SV_POSITION, float2 coord : TEXCOORD0) : SV_TARGET
                {
                    float4 tex = src.Sample(srcSampler, coord);
                    float3 col = dot(tex.rgb, float3(0.344, 0.5, 0.156));
                    return float4(col, tex.a) * qt_Opacity;
                }&quot;
            : &quot;&quot;
        }
    }
}
</db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>This is the first approach based on <db:link xlink:href="qml-qtquick-graphicsinfo.xml">GraphicsInfo</db:link>. Note that the value reported by <db:link xlink:href="qml-qtquick-graphicsinfo.xml">GraphicsInfo</db:link> is not up-to-date until the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> item gets associated with a QQuickWindow. Before that, the reported value is <db:link xlink:href="qml-qtquick-graphicsinfo.xml">GraphicsInfo</db:link>.UnknownShadingLanguage. The alternative is to place the GLSL source code and the compiled D3D bytecode into the files <db:code>shaders/effect.frag</db:code> and <db:code>shaders/+hlsl/effect.frag</db:code>, include them in the Qt resource system, and let the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>'s internal QFileSelector do its job. The selector-less version is the GLSL source, while the <db:code>hlsl</db:code> selector is used when running on the D3D12 backend. The file under <db:code>+hlsl</db:code> can then contain either HLSL source code or compiled bytecode from the <db:code>fxc</db:code> tool. Additionally, when using a version 3.2 or newer core profile context with OpenGL, GLSL sources with a core profile compatible syntax can be placed under <db:code>+glslcore</db:code>.</db:para>
<db:programlisting language="qml">import QtQuick 2.8 // for GraphicsInfo

Rectangle {
    width: 200; height: 100
    Row {
        Image { id: img;
                sourceSize { width: 100; height: 100 } source: &quot;qt-logo.png&quot; }
        ShaderEffect {
            width: 100; height: 100
            property variant src: img
            property variant color: Qt.vector3d(0.344, 0.5, 0.156)
            fragmentShader: &quot;qrc:shaders/effect.frag&quot; // selects the correct variant automatically
        }
    }
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="shadereffect-and-item-layers">
<db:title>ShaderEffect and Item Layers</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> type can be combined with <db:link xlink:href="qml-qtquick-item.xml#item-layers">layered items</db:link>.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Layer with effect disabled</db:emphasis> <db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-shadereffect-nolayereffect.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Layer with effect enabled</db:emphasis> <db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-shadereffect-layereffect.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">Item {
    id: layerRoot
    layer.enabled: true
    layer.effect: ShaderEffect {
        fragmentShader: &quot;
            uniform lowp sampler2D source; // this item
            uniform lowp float qt_Opacity; // inherited opacity of this item
            varying highp vec2 qt_TexCoord0;
            void main() {
                lowp vec4 p = texture2D(source, qt_TexCoord0);
                lowp float g = dot(p.xyz, vec3(0.344, 0.5, 0.156));
                gl_FragColor = vec4(g, g, g, p.a) * qt_Opacity;
            }&quot;
    }
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>It is also possible to combine multiple layered items:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-shadereffect-opacitymask.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">    Rectangle {
        id: gradientRect;
        width: 10
        height: 10
        gradient: Gradient {
            GradientStop { position: 0; color: &quot;white&quot; }
            GradientStop { position: 1; color: &quot;steelblue&quot; }
        }
        visible: false; // should not be visible on screen.
        layer.enabled: true;
        layer.smooth: true
    }

    Text {
        id: textItem
        font.pixelSize: 48
        text: &quot;Gradient Text&quot;
        anchors.centerIn: parent
        layer.enabled: true
        // This item should be used as the 'mask'
        layer.samplerName: &quot;maskSource&quot;
        layer.effect: ShaderEffect {
            property var colorSource: gradientRect;
            fragmentShader: &quot;
                uniform lowp sampler2D colorSource;
                uniform lowp sampler2D maskSource;
                uniform lowp float qt_Opacity;
                varying highp vec2 qt_TexCoord0;
                void main() {
                    gl_FragColor =
                        texture2D(colorSource, qt_TexCoord0)
                        * texture2D(maskSource, qt_TexCoord0).a
                        * qt_Opacity;
                }
            &quot;
        }
    }
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="other-notes">
<db:title>Other Notes</db:title>
<db:para>By default, the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> consists of four vertices, one for each corner. For non-linear vertex transformations, like page curl, you can specify a fine grid of vertices by specifying a <db:link xlink:href="qml-qtquick-shadereffect.xml#mesh-prop">mesh</db:link> resolution.</db:para>
<db:para>The <db:link xlink:href="qtgraphicaleffects-index.xml">Qt Graphical Effects</db:link> module contains several ready-made effects for using with Qt Quick applications.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#item-layers">Item Layers</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="blending-prop">
<db:title>blending : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>blending</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If this property is true, the output from the <db:link xlink:href="qml-qtquick-shadereffect.xml#fragmentShader-prop">fragmentShader</db:link> is blended with the background using source-over blend mode. If false, the background is disregarded. Blending decreases the performance, so you should set this property to false when blending is not needed. The default value is true.</db:para>
</db:section>
<db:section xml:id="cullMode-prop">
<db:title>cullMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>cullMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines which sides of the item should be visible.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.NoCulling - Both sides are visible</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.BackFaceCulling - only front side is visible</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.FrontFaceCulling - only back side is visible</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The default is NoCulling.</db:para>
</db:section>
<db:section xml:id="fragmentShader-prop">
<db:title>fragmentShader : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>fragmentShader</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the fragment (pixel) shader's source code or a reference to the pre-compiled bytecode. Some APIs, like OpenGL, always support runtime compilation and therefore the traditional Qt Quick way of inlining shader source strings is functional. Qt Quick backends for other APIs may however limit support to pre-compiled bytecode like SPIR-V or D3D shader bytecode. There the string is simply a filename, which may be a file in the filesystem or bundled with the executable via Qt's resource system.</db:para>
<db:para>With GLSL the default shader expects the texture coordinate to be passed from the vertex shader as <db:code>varying highp vec2 qt_TexCoord0</db:code>, and it samples from a sampler2D named <db:code>source</db:code>. With HLSL the texture is named <db:code>source</db:code>, while the vertex shader is expected to provide <db:code>float2 coord : TEXCOORD0</db:code> in its output in addition to <db:code>float4 position : SV_POSITION</db:code> (names can differ since linking is done based on the semantics).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-shadereffect.xml#vertexShader-prop">vertexShader</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-graphicsinfo.xml">GraphicsInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="log-prop">
<db:title>log : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>log</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds a log of warnings and errors from the latest attempt at compiling and linking the OpenGL shader program. It is updated at the same time <db:link xlink:href="qml-qtquick-shadereffect.xml#status-prop">status</db:link> is set to Compiled or Error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-shadereffect.xml#status-prop">status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mesh-prop">
<db:title>mesh : variant</db:title>
<db:fieldsynopsis>
<db:type>variant</db:type>
<db:varname>mesh</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines the mesh used to draw the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>. It can hold any <db:link xlink:href="qml-qtquick-gridmesh.xml">GridMesh</db:link> object. If a size value is assigned to this property, the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> implicitly uses a <db:link xlink:href="qml-qtquick-gridmesh.xml">GridMesh</db:link> with the value as <db:link xlink:href="qml-qtquick-gridmesh.xml#resolution-prop">mesh resolution</db:link>. By default, this property is the size 1x1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-gridmesh.xml">GridMesh</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="status-prop">
<db:title>status : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>status</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property tells the current status of the OpenGL shader program.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.Compiled - the shader program was successfully compiled and linked.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.Uncompiled - the shader program has not yet been compiled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.Error - the shader program failed to compile or link.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When setting the fragment or vertex shader source code, the status will become Uncompiled. The first time the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> is rendered with new shader source code, the shaders are compiled and linked, and the status is updated to Compiled or Error.</db:para>
<db:para>When runtime compilation is not in use and the shader properties refer to files with bytecode, the status is always Compiled. The contents of the shader is not examined (apart from basic reflection to discover vertex input elements and constant buffer data) until later in the rendering pipeline so potential errors (like layout or root signature mismatches) will only be detected at a later point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-shadereffect.xml#log-prop">log</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportsAtlasTextures-prop">
<db:title>[since QtQuick 2.4] supportsAtlasTextures : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>supportsAtlasTextures</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Set this property true to confirm that your shader code doesn't rely on qt_MultiTexCoord0 ranging from (0,0) to (1,1) relative to the mesh. In this case the range of qt_MultiTexCoord0 will rather be based on the position of the texture within the atlas. This property currently has no effect if there is less, or more, than one sampler uniform used as input to your shader.</db:para>
<db:para>This differs from providing qt_SubRect_&lt;name&gt; uniforms in that the latter allows drawing one or more textures from the atlas in a single <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> item, while supportsAtlasTextures allows multiple instances of a <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> component using a different source image from the atlas to be batched in a single draw. Both prevent a texture from being copied out of the atlas when referenced by a <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.</db:para>
<db:para>The default value is false.</db:para>
<db:para>This property was introduced in QtQuick 2.4.</db:para>
</db:section>
<db:section xml:id="vertexShader-prop">
<db:title>vertexShader : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>vertexShader</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the vertex shader's source code or a reference to the pre-compiled bytecode. Some APIs, like OpenGL, always support runtime compilation and therefore the traditional Qt Quick way of inlining shader source strings is functional. Qt Quick backends for other APIs may however limit support to pre-compiled bytecode like SPIR-V or D3D shader bytecode. There the string is simply a filename, which may be a file in the filesystem or bundled with the executable via Qt's resource system.</db:para>
<db:para>With GLSL the default shader passes the texture coordinate along to the fragment shader as <db:code>varying highp vec2 qt_TexCoord0</db:code>. With HLSL it is enough to use the standard <db:code>TEXCOORD0</db:code> semantic, for example <db:code>float2 coord : TEXCOORD0</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-shadereffect.xml#fragmentShader-prop">fragmentShader</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-graphicsinfo.xml">GraphicsInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
