<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ShaderEffect QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Applies custom shaders to a rectangle.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Item</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>ShaderEffect is part of <db:simplelist><db:member>qtquick-effects</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> type applies a custom <db:link xlink:href="qml-qtquick-shadereffect.xml#vertexShader-prop">vertex</db:link> and <db:link xlink:href="qml-qtquick-shadereffect.xml#fragmentShader-prop">fragment (pixel)</db:link> shader to a rectangle. It allows adding effects such as drop shadow, blur, colorize and page curl into the QML scene.</db:para>
<db:note>
<db:para>Depending on the Qt Quick scenegraph backend in use, the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> type may not be supported. For example, with the <db:code>software</db:code> backend effects will not be rendered at all.</db:para>
</db:note>
<db:section xml:id="shaders">
<db:title>Shaders</db:title>
<db:para>In Qt 5, effects were provided in form of GLSL (OpenGL Shading Language) source code, often embedded as strings into QML. Starting with Qt 5.8, referring to files, either local ones or in the Qt resource system, became possible as well.</db:para>
<db:para>In Qt 6, Qt Quick has support for graphics APIs, such as Vulkan, Metal, and Direct3D 11 as well. Therefore, working with GLSL source strings is no longer feasible. Rather, the new shader pipeline is based on compiling Vulkan-compatible GLSL code into <db:link xlink:href="https://www.khronos.org/spir/">SPIR-V</db:link>, followed by gathering reflection information and translating into other shading languages, such as HLSL, the Metal Shading Language, and various GLSL versions. The resulting assets are packed together into a single package, typically stored in files with an extension of <db:code>.qsb</db:code>. This process is done offline or at application build time at latest. At run time, the scene graph and the underlying graphics abstraction consumes these <db:code>.qsb</db:code> files. Therefore, <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> expects file (local or qrc) references in Qt 6 in place of inline shader code.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick-shadereffect.xml#vertexShader-prop">vertexShader</db:link> and <db:link xlink:href="qml-qtquick-shadereffect.xml#fragmentShader-prop">fragmentShader</db:link> properties are URLs in Qt 6, and work very similarly to <db:link xlink:href="qml-qtquick-image.xml#source-prop">Image.source</db:link>, for example. Only the <db:code>file</db:code> and <db:code>qrc</db:code> schemes are supported with <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>, however. It is also possible to omit the <db:code>file</db:code> scheme, allowing to specify a relative path in a convenient way. Such a path is resolved relative to the component's (the <db:code>.qml</db:code> file's) location.</db:para>
</db:section>
<db:section xml:id="shader-inputs-and-resources">
<db:title>Shader Inputs and Resources</db:title>
<db:para>There are two types of input to the <db:link xlink:href="qml-qtquick-shadereffect.xml#vertexShader-prop">vertexShader</db:link>: uniforms and vertex inputs.</db:para>
<db:para>The following inputs are predefined:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>vec4 qt_Vertex with location 0 - vertex position, the top-left vertex has position (0, 0), the bottom-right (<db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link>, <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link>).</db:para>
</db:listitem>
<db:listitem>
<db:para>vec2 qt_MultiTexCoord0 with location 1 - texture coordinate, the top-left coordinate is (0, 0), the bottom-right (1, 1). If <db:link xlink:href="qml-qtquick-shadereffect.xml#supportsAtlasTextures-prop">supportsAtlasTextures</db:link> is true, coordinates will be based on position in the atlas instead.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>It is only the vertex input location that matters in practice. The names are freely changeable, while the location must always be <db:code>0</db:code> for vertex position, <db:code>1</db:code> for texture coordinates. However, be aware that this applies to vertex inputs only, and is not necessarily true for output variables from the vertex shader that are then used as inputs in the fragment shader (typically, the interpolated texture coordinates).</db:para>
</db:note>
<db:para>The following uniforms are predefined:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>mat4 qt_Matrix - combined transformation matrix, the product of the matrices from the root item to this <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>, and an orthogonal projection.</db:para>
</db:listitem>
<db:listitem>
<db:para>float qt_Opacity - combined opacity, the product of the opacities from the root item to this <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Vulkan-style GLSL has no separate uniform variables. Instead, shaders must always use a uniform block with a binding point of <db:code>0</db:code>.</db:para>
</db:note>
<db:note>
<db:para>The uniform block layout qualifier must always be <db:code>std140</db:code>.</db:para>
</db:note>
<db:note>
<db:para>Unlike vertex inputs, the predefined names (qt_Matrix, qt_Opacity) must not be changed.</db:para>
</db:note>
<db:para>In addition, any property that can be mapped to a GLSL type can be made available to the shaders. The following list shows how properties are mapped:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>bool, int, qreal -&gt; bool, int, float - If the type in the shader is not the same as in QML, the value is converted automatically.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qcolor.xml">QColor</db:link> -&gt; vec4 - When colors are passed to the shader, they are first premultiplied. Thus Qt.rgba(0.2, 0.6, 1.0, 0.5) becomes vec4(0.1, 0.3, 0.5, 0.5) in the shader, for example.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qrect.xml">QRect</db:link>, <db:link xlink:href="qrectf.xml">QRectF</db:link> -&gt; vec4 - Qt.rect(x, y, w, h) becomes vec4(x, y, w, h) in the shader.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpoint.xml">QPoint</db:link>, <db:link xlink:href="qpointf.xml">QPointF</db:link>, <db:link xlink:href="qsize.xml">QSize</db:link>, <db:link xlink:href="qsizef.xml">QSizeF</db:link> -&gt; vec2</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qvector3d.xml">QVector3D</db:link> -&gt; vec3</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qvector4d.xml">QVector4D</db:link> -&gt; vec4</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtransform.xml">QTransform</db:link> -&gt; mat3</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmatrix4x4.xml">QMatrix4x4</db:link> -&gt; mat4</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qquaternion.xml">QQuaternion</db:link> -&gt; vec4, scalar value is <db:code>w</db:code>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-image.xml">Image</db:link> -&gt; sampler2D - Origin is in the top-left corner, and the color values are premultiplied. The texture is provided as is, excluding the Image item's fillMode. To include fillMode, use a <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> or Image::layer::enabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> -&gt; sampler2D - Origin is in the top-left corner, and the color values are premultiplied.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Samplers are still declared as separate uniform variables in the shader code. The shaders are free to choose any binding point for these, except for <db:code>0</db:code> because that is reserved for the uniform block.</db:para>
<db:para>Some shading languages and APIs have a concept of separate image and sampler objects. Qt Quick always works with combined image sampler objects in shaders, as supported by SPIR-V. Therefore shaders supplied for <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> should always use <db:code>layout(binding = 1) uniform sampler2D tex;</db:code> style sampler declarations. The underlying abstraction layer and the shader pipeline takes care of making this work for all the supported APIs and shading languages, transparently to the applications.</db:para>
<db:para>The QML scene graph back-end may choose to allocate textures in texture atlases. If a texture allocated in an atlas is passed to a <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>, it is by default copied from the texture atlas into a stand-alone texture so that the texture coordinates span from 0 to 1, and you get the expected wrap modes. However, this will increase the memory usage. To avoid the texture copy, set <db:link xlink:href="qml-qtquick-shadereffect.xml#supportsAtlasTextures-prop">supportsAtlasTextures</db:link> for simple shaders using qt_MultiTexCoord0, or for each &quot;uniform sampler2D &lt;name&gt;&quot; declare a &quot;uniform vec4 qt_SubRect_&lt;name&gt;&quot; which will be assigned the texture's normalized source rectangle. For stand-alone textures, the source rectangle is [0, 1]x[0, 1]. For textures in an atlas, the source rectangle corresponds to the part of the texture atlas where the texture is stored. The correct way to calculate the texture coordinate for a texture called &quot;source&quot; within a texture atlas is &quot;qt_SubRect_source.xy + qt_SubRect_source.zw * qt_MultiTexCoord0&quot;.</db:para>
<db:para>The output from the <db:link xlink:href="qml-qtquick-shadereffect.xml#fragmentShader-prop">fragmentShader</db:link> should be premultiplied. If <db:link xlink:href="qml-qtquick-shadereffect.xml#blending-prop">blending</db:link> is enabled, source-over blending is used. However, additive blending can be achieved by outputting zero in the alpha channel.</db:para>
<db:informaltable style="generic" width="70%">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-shadereffectitem.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    width: 200; height: 100
    Row {
        Image { id: img;
                sourceSize { width: 100; height: 100 } source: &quot;qt-logo.png&quot; }
        ShaderEffect {
            width: 100; height: 100
            property variant src: img
            vertexShader: &quot;myeffect.vert.qsb&quot;
            fragmentShader: &quot;myeffect.frag.qsb&quot;
        }
    }
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The example assumes <db:code>myeffect.vert</db:code> and <db:code>myeffect.frag</db:code> contain Vulkan-style GLSL code, processed by the <db:code>qsb</db:code> tool in order to generate the <db:code>.qsb</db:code> files.</db:para>
<db:programlisting language="cpp" role="bad">#version 440
layout(location = 0) in vec4 qt_Vertex;
layout(location = 1) in vec2 qt_MultiTexCoord0;
layout(location = 0) out vec2 coord;
layout(std140, binding = 0) uniform buf {
    mat4 qt_Matrix;
    float qt_Opacity;
};
void main() {
    coord = qt_MultiTexCoord0;
    gl_Position = qt_Matrix * qt_Vertex;
}
</db:programlisting>
<db:programlisting language="cpp" role="bad">#version 440
layout(location = 0) in vec2 coord;
layout(location = 0) out vec4 fragColor;
layout(std140, binding = 0) uniform buf {
    mat4 qt_Matrix;
    float qt_Opacity;
};
layout(binding = 1) uniform sampler2D src;
void main() {
    vec4 tex = texture(src, coord);
    fragColor = vec4(vec3(dot(tex.rgb, vec3(0.344, 0.5, 0.156))), tex.a) * qt_Opacity;
}
</db:programlisting>
<db:note>
<db:para>Scene Graph textures have origin in the top-left corner rather than bottom-left which is common in OpenGL.</db:para>
</db:note>
</db:section>
<db:section xml:id="having-one-shader-only">
<db:title>Having One Shader Only</db:title>
<db:para>Specifying both <db:link xlink:href="qml-qtquick-shadereffect.xml#vertexShader-prop">vertexShader</db:link> and <db:link xlink:href="qml-qtquick-shadereffect.xml#fragmentShader-prop">fragmentShader</db:link> is not mandatory. Many <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> implementations will want to provide a fragment shader only in practice, while relying on the default, built-in vertex shader.</db:para>
<db:para>The default vertex shader passes the texture coordinate along to the fragment shader as <db:code>vec2 qt_TexCoord0</db:code> at location <db:code>0</db:code>.</db:para>
<db:para>The default fragment shader expects the texture coordinate to be passed from the vertex shader as <db:code>vec2 qt_TexCoord0</db:code> at location <db:code>0</db:code>, and it samples from a sampler2D named <db:code>source</db:code> at binding point <db:code>1</db:code>.</db:para>
<db:warning>
<db:para>When only one of the shaders is specified, the writer of the shader must be aware of the uniform block layout expected by the default shaders: qt_Matrix must always be at offset 0, followed by qt_Opacity at offset 64. Any custom uniforms must be placed after these two. This is mandatory even when the application-provided shader does not use the matrix or the opacity, because at run time there is one single uniform buffer that is exposed to both the vertex and fragment shader.</db:para>
</db:warning>
<db:warning>
<db:para>Unlike with vertex inputs, passing data between the vertex and fragment shader may, depending on the underlying graphics API, require the same names to be used, a matching location is not always sufficient. Most prominently, when specifying a fragment shader while relying on the default, built-in vertex shader, the texture coordinates are passed on as <db:code>qt_TexCoord0</db:code> at location <db:code>0</db:code>, and therefore it is strongly advised that the fragment shader declares the input with the same name (qt_TexCoord0). Failing to do so may lead to issues on some platforms, for example when running with a non-core profile OpenGL context where the underlying GLSL shader source code has no location qualifiers and matching is based on the variable names during to shader linking process.</db:para>
</db:warning>
</db:section>
<db:section xml:id="shadereffect-and-item-layers">
<db:title>ShaderEffect and Item Layers</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> type can be combined with <db:link xlink:href="qml-qtquick-item.xml#item-layers">layered items</db:link>.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Layer with effect disabled</db:emphasis> <db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-shadereffect-nolayereffect.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Layer with effect enabled</db:emphasis> <db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-shadereffect-layereffect.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">Item {
    id: layerRoot
    layer.enabled: true
    layer.effect: ShaderEffect {
       fragmentShader: &quot;effect.frag.qsb&quot;
    }
}
</db:programlisting>
<db:programlisting language="cpp" role="bad">#version 440
layout(location = 0) in vec2 qt_TexCoord0;
layout(location = 0) out vec4 fragColor;
layout(std140, binding = 0) uniform buf {
    mat4 qt_Matrix;
    float qt_Opacity;
};
layout(binding = 1) uniform sampler2D source;
void main() {
    vec4 p = texture(source, qt_TexCoord0);
    float g = dot(p.xyz, vec3(0.344, 0.5, 0.156));
    fragColor = vec4(g, g, g, p.a) * qt_Opacity;
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>It is also possible to combine multiple layered items:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-shadereffect-opacitymask.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">Rectangle {
    id: gradientRect;
    width: 10
    height: 10
    gradient: Gradient {
        GradientStop { position: 0; color: &quot;white&quot; }
        GradientStop { position: 1; color: &quot;steelblue&quot; }
    }
    visible: false; // should not be visible on screen.
    layer.enabled: true;
    layer.smooth: true
 }
 Text {
    id: textItem
    font.pixelSize: 48
    text: &quot;Gradient Text&quot;
    anchors.centerIn: parent
    layer.enabled: true
    // This item should be used as the 'mask'
    layer.samplerName: &quot;maskSource&quot;
    layer.effect: ShaderEffect {
        property var colorSource: gradientRect;
        fragmentShader: &quot;mask.frag.qsb&quot;
    }
}
</db:programlisting>
<db:programlisting language="cpp" role="bad">#version 440
layout(location = 0) in vec2 qt_TexCoord0;
layout(location = 0) out vec4 fragColor;
layout(std140, binding = 0) uniform buf {
    mat4 qt_Matrix;
    float qt_Opacity;
};
layout(binding = 1) uniform sampler2D colorSource;
layout(binding = 2) uniform sampler2D maskSource;
void main() {
    fragColor = texture(colorSource, qt_TexCoord0)
                    * texture(maskSource, qt_TexCoord0).a
                    * qt_Opacity;
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="other-notes">
<db:title>Other Notes</db:title>
<db:para>By default, the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> consists of four vertices, one for each corner. For non-linear vertex transformations, like page curl, you can specify a fine grid of vertices by specifying a <db:link xlink:href="qml-qtquick-shadereffect.xml#mesh-prop">mesh</db:link> resolution.</db:para>
</db:section>
<db:section xml:id="migrating-from-qt-5">
<db:title>Migrating From Qt 5</db:title>
<db:para>For Qt 5 applications with <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> items the migration to Qt 6 involves:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Moving the shader code to separate <db:code>.vert</db:code> and <db:code>.frag</db:code> files,</db:para>
</db:listitem>
<db:listitem>
<db:para>updating the shaders to Vulkan-compatible GLSL,</db:para>
</db:listitem>
<db:listitem>
<db:para>running the <db:code>qsb</db:code> tool on them,</db:para>
</db:listitem>
<db:listitem>
<db:para>including the resulting <db:code>.qsb</db:code> files in the executable with the Qt resource system,</db:para>
</db:listitem>
<db:listitem>
<db:para>and referencing the file in the <db:link xlink:href="qml-qtquick-shadereffect.xml#vertexShader-prop">vertexShader</db:link> and <db:link xlink:href="qml-qtquick-shadereffect.xml#fragmentShader-prop">fragmentShader</db:link> properties.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>As described in the <db:link xlink:href="qtshadertools-index.xml">Qt Shader Tools</db:link> module some of these steps can be automated by letting CMake invoke the <db:code>qsb</db:code> tool at build time. See <db:link xlink:href="qtshadertools-build.xml">Qt Shader Tools Build System Integration</db:link> for more information and examples.</db:para>
<db:para>When it comes to updating the shader code, below is an overview of the commonly required changes.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Vertex shader in Qt 5</db:para>
</db:th>
<db:th>
<db:para>Vertex shader in Qt 6</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:programlisting language="cpp" role="bad">attribute highp vec4 qt_Vertex;
attribute highp vec2 qt_MultiTexCoord0;
varying highp vec2 coord;
uniform highp mat4 qt_Matrix;
void main() {
    coord = qt_MultiTexCoord0;
    gl_Position = qt_Matrix * qt_Vertex;
}
</db:programlisting>
</db:td>
<db:td>
<db:programlisting language="cpp" role="bad">#version 440
layout(location = 0) in vec4 qt_Vertex;
layout(location = 1) in vec2 qt_MultiTexCoord0;
layout(location = 0) out vec2 coord;
layout(std140, binding = 0) uniform buf {
    mat4 qt_Matrix;
    float qt_Opacity;
};
void main() {
    coord = qt_MultiTexCoord0;
    gl_Position = qt_Matrix * qt_Vertex;
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The conversion process mostly involves updating the code to be compatible with <db:link xlink:href="https://github.com/KhronosGroup/GLSL/blob/master/extensions/khr/GL_KHR_vulkan_glsl.txt">GL_KHR_vulkan_glsl</db:link>. It is worth noting that Qt Quick uses a subset of the features provided by GLSL and Vulkan, and therefore the conversion process for typical <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> shaders is usually straightforward.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:code>version</db:code> directive should state <db:code>440</db:code> or <db:code>450</db:code>, although specifying other GLSL version may work too, because the <db:link xlink:href="https://github.com/KhronosGroup/GLSL/blob/master/extensions/khr/GL_KHR_vulkan_glsl.txt">GL_KHR_vulkan_glsl</db:link> extension is written for GLSL 140 and higher.</db:para>
</db:listitem>
<db:listitem>
<db:para>Inputs and outputs must use the modern GLSL <db:code>in</db:code> and <db:code>out</db:code> keywords. In addition, specifying a location is required. The input and output location namespaces are separate, and therefore assigning locations starting from 0 for both is safe.</db:para>
</db:listitem>
<db:listitem>
<db:para>When it comes to vertex shader inputs, the only possibilities with <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> are location <db:code>0</db:code> for vertex position (traditionally named <db:code>qt_Vertex</db:code>) and location <db:code>1</db:code> for texture coordinates (traditionally named <db:code>qt_MultiTexCoord0</db:code>).</db:para>
</db:listitem>
<db:listitem>
<db:para>The vertex shader outputs and fragment shader inputs are up to the shader code to define. The fragment shader must have a <db:code>vec4</db:code> output at location 0 (typically called <db:code>fragColor</db:code>). For maximum portability, vertex outputs and fragment inputs should use both the same location number and the same name. When specifying only a fragment shader, the texture coordinates are passed in from the built-in vertex shader as <db:code>vec2 qt_TexCoord0</db:code> at location <db:code>0</db:code>, as shown in the example snippets above.</db:para>
</db:listitem>
<db:listitem>
<db:para>Uniform variables outside a uniform block are not legal. Rather, uniform data must be declared in a uniform block with binding point <db:code>0</db:code>.</db:para>
</db:listitem>
<db:listitem>
<db:para>The uniform block is expected to use the std140 qualifier.</db:para>
</db:listitem>
<db:listitem>
<db:para>At run time, the vertex and fragment shader will get the same uniform buffer bound to binding point 0. Therefore, as a general rule, the uniform block declarations must be identical between the shaders. This also includes members that are not used in one of the shaders. The member names must match, because with some graphics APIs the uniform block is converted to a traditional struct uniform, transparently to the application.</db:para>
</db:listitem>
<db:listitem>
<db:para>When providing one of the shaders only, watch out for the fact that the built-in shaders expect <db:code>qt_Matrix</db:code> and <db:code>qt_Opacity</db:code> at the top of the uniform block. (more precisely, at offset 0 and 64, respectively) As a general rule, always include these as the first and second members in the block.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the example the uniform block specifies the block name <db:code>buf</db:code>. This name can be changed freely, but must match between the shaders. Using an instance name, such as <db:code>layout(...) uniform buf { ... } instance_name;</db:code> is optional. When specified, all accesses to the members must be qualified with instance_name.</db:para>
</db:listitem>
</db:itemizedlist>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Fragment shader in Qt 5</db:para>
</db:th>
<db:th>
<db:para>Fragment shader in Qt 6</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:programlisting language="cpp" role="bad">varying highp vec2 coord;
uniform lowp float qt_Opacity;
uniform sampler2D src;
void main() {
    lowp vec4 tex = texture2D(src, coord);
    gl_FragColor = vec4(vec3(dot(tex.rgb,
                        vec3(0.344, 0.5, 0.156))),
                             tex.a) * qt_Opacity;
}
</db:programlisting>
</db:td>
<db:td>
<db:programlisting language="cpp" role="bad">#version 440
layout(location = 0) in vec2 coord;
layout(location = 0) out vec4 fragColor;
layout(std140, binding = 0) uniform buf {
    mat4 qt_Matrix;
    float qt_Opacity;
};
layout(binding = 1) uniform sampler2D src;
void main() {
    vec4 tex = texture(src, coord);
    fragColor = vec4(vec3(dot(tex.rgb,
                     vec3(0.344, 0.5, 0.156))),
                          tex.a) * qt_Opacity;
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:itemizedlist>
<db:listitem>
<db:para>Precision qualifiers (<db:code>lowp</db:code>, <db:code>mediump</db:code>, <db:code>highp</db:code>) are not currently used.</db:para>
</db:listitem>
<db:listitem>
<db:para>Calling built-in GLSL functions must follow the modern GLSL names, most prominently, <db:code>texture()</db:code> instead of <db:code>texture2D()</db:code>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Samplers must use binding points starting from 1.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#item-layers">Item Layers</db:link></db:member>
<db:member><db:link xlink:href="qtshadertools-qsb.xml">QSB Manual</db:link></db:member>
<db:member><db:link xlink:href="qtshadertools-build.xml">Qt Shader Tools Build System Integration</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="blending-prop">
<db:title>blending : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>blending</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If this property is true, the output from the <db:link xlink:href="qml-qtquick-shadereffect.xml#fragmentShader-prop">fragmentShader</db:link> is blended with the background using source-over blend mode. If false, the background is disregarded. Blending decreases the performance, so you should set this property to false when blending is not needed. The default value is true.</db:para>
</db:section>
<db:section xml:id="cullMode-prop">
<db:title>cullMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>cullMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines which sides of the item should be visible.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.NoCulling - Both sides are visible</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.BackFaceCulling - only front side is visible</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.FrontFaceCulling - only back side is visible</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The default is NoCulling.</db:para>
</db:section>
<db:section xml:id="fragmentShader-prop">
<db:title>fragmentShader : url</db:title>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>fragmentShader</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property contains a reference to a file with the preprocessed fragment shader package, typically with an extension of <db:code>.qsb</db:code>. The value is treated as a <db:link xlink:href="qurl.xml">URL</db:link>, similarly to other QML types, such as Image. It must either be a local file or use the qrc scheme to access files embedded via the Qt resource system. The URL may be absolute, or relative to the URL of the component.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-shadereffect.xml#vertexShader-prop">vertexShader</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="log-prop">
<db:title>[read-only] log : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>log</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds a log of warnings and errors from the latest attempt at compiling the shaders. It is updated at the same time <db:link xlink:href="qml-qtquick-shadereffect.xml#status-prop">status</db:link> is set to Compiled or Error.</db:para>
<db:note>
<db:para>In Qt 6, the shader pipeline promotes compiling and translating the Vulkan-style GLSL shaders offline, or at build time at latest. This does not necessarily mean there is no shader compilation happening at run time, but even if there is, <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> is not involved in that, and syntax and similar errors should not occur anymore at that stage. Therefore the value of this property is typically empty.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-shadereffect.xml#status-prop">status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mesh-prop">
<db:title>mesh : variant</db:title>
<db:fieldsynopsis>
<db:type>variant</db:type>
<db:varname>mesh</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines the mesh used to draw the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>. It can hold any <db:link xlink:href="qml-qtquick-gridmesh.xml">GridMesh</db:link> object. If a size value is assigned to this property, the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> implicitly uses a <db:link xlink:href="qml-qtquick-gridmesh.xml">GridMesh</db:link> with the value as <db:link xlink:href="qml-qtquick-gridmesh.xml#resolution-prop">mesh resolution</db:link>. By default, this property is the size 1x1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-gridmesh.xml">GridMesh</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>status</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property tells the current status of the shaders.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.Compiled - the shader program was successfully compiled and linked.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.Uncompiled - the shader program has not yet been compiled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.Error - the shader program failed to compile or link.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When setting the fragment or vertex shader source code, the status will become Uncompiled. The first time the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> is rendered with new shader source code, the shaders are compiled and linked, and the status is updated to Compiled or Error.</db:para>
<db:para>When runtime compilation is not in use and the shader properties refer to files with bytecode, the status is always Compiled. The contents of the shader is not examined (apart from basic reflection to discover vertex input elements and constant buffer data) until later in the rendering pipeline so potential errors (like layout or root signature mismatches) will only be detected at a later point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-shadereffect.xml#log-prop">log</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportsAtlasTextures-prop">
<db:title>[since QtQuick 2.4] supportsAtlasTextures : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>supportsAtlasTextures</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Set this property true to confirm that your shader code doesn't rely on qt_MultiTexCoord0 ranging from (0,0) to (1,1) relative to the mesh. In this case the range of qt_MultiTexCoord0 will rather be based on the position of the texture within the atlas. This property currently has no effect if there is less, or more, than one sampler uniform used as input to your shader.</db:para>
<db:para>This differs from providing qt_SubRect_&lt;name&gt; uniforms in that the latter allows drawing one or more textures from the atlas in a single <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> item, while supportsAtlasTextures allows multiple instances of a <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> component using a different source image from the atlas to be batched in a single draw. Both prevent a texture from being copied out of the atlas when referenced by a <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.</db:para>
<db:para>The default value is false.</db:para>
<db:para>This property was introduced in QtQuick 2.4.</db:para>
</db:section>
<db:section xml:id="vertexShader-prop">
<db:title>vertexShader : url</db:title>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>vertexShader</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property contains a reference to a file with the preprocessed vertex shader package, typically with an extension of <db:code>.qsb</db:code>. The value is treated as a <db:link xlink:href="qurl.xml">URL</db:link>, similarly to other QML types, such as Image. It must either be a local file or use the qrc scheme to access files embedded via the Qt resource system. The URL may be absolute, or relative to the URL of the component.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-shadereffect.xml#fragmentShader-prop">fragmentShader</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
