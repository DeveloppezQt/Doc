<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>TouchEventSequence QML Type</db:title>
<db:productname>QtQmlTest</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Test Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qml-qttest-toucheventsequence.xml">TouchEventSequence</db:link> is used to build and dispatch touch events for testing.</db:para>
<db:para>This type was introduced in Qt 5.9.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtTest</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.9</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>TouchEventSequence is part of <db:simplelist><db:member>qtquicktest</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qml-qttest-toucheventsequence.xml">TouchEventSequence</db:link> is created by calling <db:link xlink:href="qml-qttest-testcase.xml#touchEvent-method">TestCase.touchEvent</db:link>(). The type can not be directly instantiated. Each method provided by the type returns the same object, allowing chained calls.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">touchEvent(item).press(0).commit();
</db:programlisting>
<db:para>is equivalent to:</db:para>
<db:programlisting language="cpp">var sequence = touchEvent(item);
sequence.press(0);
sequence.commit();
</db:programlisting>
<db:para>Events are delivered to the window which contains the item specified in touchEvent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttest-testcase.xml#touchEvent-method">TestCase::touchEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="commit-method">
<db:title>TouchEventSequence commit()</db:title>
<db:para>Sends the touch event composed by prior use of <db:link xlink:href="qml-qttest-toucheventsequence.xml#press-method">press</db:link>(), <db:link xlink:href="qml-qttest-toucheventsequence.xml#move-method">move</db:link>(), <db:link xlink:href="qml-qttest-toucheventsequence.xml#release-method">release</db:link>(), and <db:link xlink:href="qml-qttest-toucheventsequence.xml#stationary-method">stationary</db:link>(). Following commit's return, the <db:link xlink:href="qml-qttest-toucheventsequence.xml">TouchEventSequence</db:link> can be used to compose a new event.</db:para>
<db:programlisting language="cpp">var sequence = touchEvent(target);
// Touch the middle of target with 1 point
sequence.press(1);
sequence.commit();

// Begin a new event
// Move the point to target's upper left corner
sequence.move(1, target, 0, 0);
sequence.commit();
</db:programlisting>
<db:para>Commit is automatically invoked when the <db:link xlink:href="qml-qttest-toucheventsequence.xml">TouchEventSequence</db:link> object is destroyed.</db:para>
</db:section>
<db:section xml:id="move-method">
<db:title>TouchEventSequence move(int <db:emphasis>touchId</db:emphasis>, object <db:emphasis>item</db:emphasis>, real <db:emphasis>x</db:emphasis> = item.width / 2, real <db:emphasis>y</db:emphasis> = item.height / 2)</db:title>
<db:para>Moves <db:code role="parameter">touchId</db:code> to the point indicated by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> relative to <db:code role="parameter">item</db:code>.</db:para>
<db:para>Item defaults to the value provided via touchEvent(). X and y default to the midpoint of the item.</db:para>
</db:section>
<db:section xml:id="press-method">
<db:title>TouchEventSequence press(int <db:emphasis>touchId</db:emphasis>, object <db:emphasis>item</db:emphasis>, real <db:emphasis>x</db:emphasis> = item.width / 2, real <db:emphasis>y</db:emphasis> = item.height / 2)</db:title>
<db:para>Creates a new point identified as <db:code role="parameter">touchId</db:code>, at the point indicated by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> relative to <db:code role="parameter">item</db:code>. Further use of the same touch point should maintain the same touchId.</db:para>
<db:para>Item defaults to the value provided via touchEvent(). X and y default to the midpoint of the item.</db:para>
</db:section>
<db:section xml:id="release-method">
<db:title>TouchEventSequence release(int <db:emphasis>touchId</db:emphasis>, object <db:emphasis>item</db:emphasis>, real <db:emphasis>x</db:emphasis> = item.width / 2, real <db:emphasis>y</db:emphasis> = item.height / 2)</db:title>
<db:para>Removes <db:code role="parameter">touchId</db:code> at the point indicated by <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> relative to <db:code role="parameter">item</db:code>.</db:para>
<db:para>Item defaults to the value provided via touchEvent(). X and y default to the midpoint of the item.</db:para>
</db:section>
<db:section xml:id="stationary-method">
<db:title>TouchEventSequence stationary(int <db:emphasis>touchId</db:emphasis>)</db:title>
<db:para>Indicates that <db:code role="parameter">touchId</db:code> is present but otherwise unchanged from prior events.</db:para>
</db:section>
</db:section>
</db:article>
