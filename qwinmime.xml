<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWinMime Class</db:title>
<db:productname>QtWinExtras</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Windows Extras Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwinmime.xml">QWinMime</db:link> class maps open-standard MIME to Window Clipboard formats.</db:para>
<db:para>This class was introduced in Qt 5.4.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWinMime</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += winextras</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Qt's drag-and-drop and clipboard facilities use the MIME standard. On X11, this maps trivially to the Xdnd protocol, but on Windows although some applications use MIME types to describe clipboard formats, others use arbitrary non-standardized naming conventions, or unnamed built-in formats of Windows.</db:para>
<db:para>By instantiating subclasses of <db:link xlink:href="qwinmime.xml">QWinMime</db:link> that provide conversions between Windows Clipboard and MIME formats, you can convert proprietary clipboard formats to MIME formats.</db:para>
<db:para>Qt has predefined support for the following Windows Clipboard formats:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Windows Format</db:para>
</db:th>
<db:th>
<db:para>Equivalent MIME type</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>CF_UNICODETEXT</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>text/plain</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>CF_TEXT</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>text/plain</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>CF_DIB</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>image/xyz</db:code>, where <db:code>xyz</db:code> is a <db:link xlink:href="qimagewriter.xml#supportedImageFormats">Qt image format</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>CF_HDROP</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>text/uri-list</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>CF_INETURL</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>text/uri-list</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>CF_HTML</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>text/html</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>An example use of this class would be to map the Windows Metafile clipboard format (<db:code>CF_METAFILEPICT</db:code>) to and from the MIME type <db:code>image/x-wmf</db:code>. This conversion might simply be adding or removing a header, or even just passing on the data. See <db:link xlink:href="dnd.xml">Drag and Drop</db:link> for more information on choosing and definition MIME types.</db:para>
<db:para>You can check if a MIME type is convertible using <db:link xlink:href="qwinmime.xml#canConvertFromMime">canConvertFromMime</db:link>() and can perform conversions with <db:link xlink:href="qwinmime.xml#convertToMime">convertToMime</db:link>() and <db:link xlink:href="qwinmime.xml#convertFromMime">convertFromMime</db:link>().</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWinMime-1">
<db:title>QWinMime::QWinMime()</db:title>
<db:constructorsynopsis>
<db:methodname>QWinMime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QWinMime()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new conversion object, adding it to the globally accessed list of available converters.</db:para>
</db:section>
<db:section xml:id="dtor.QWinMime">
<db:title>[virtual] QWinMime::~QWinMime()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QWinMime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QWinMime()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a conversion object, removing it from the global list of available converters.</db:para>
</db:section>
<db:section xml:id="canConvertFromMime">
<db:title>[pure virtual] bool QWinMime::canConvertFromMime(const FORMATETC &amp;<db:emphasis>formatetc</db:emphasis>, const QMimeData *<db:emphasis>mimeData</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>canConvertFromMime</db:methodname>
<db:methodparam>
<db:type>const FORMATETC &amp;</db:type>
<db:parameter>formatetc</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMimeData *</db:type>
<db:parameter>mimeData</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool canConvertFromMime(const FORMATETC &amp;formatetc, const QMimeData *mimeData) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the converter can convert from the <db:code role="parameter">mimeData</db:code> to the format specified in <db:code role="parameter">formatetc</db:code>.</db:para>
<db:para>All subclasses must reimplement this pure virtual function.</db:para>
</db:section>
<db:section xml:id="canConvertToMime">
<db:title>[pure virtual] bool QWinMime::canConvertToMime(const QString &amp;<db:emphasis>mimeType</db:emphasis>, IDataObject *<db:emphasis>pDataObj</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>canConvertToMime</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>mimeType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>IDataObject *</db:type>
<db:parameter>pDataObj</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool canConvertToMime(const QString &amp;mimeType, IDataObject *pDataObj) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the converter can convert to the <db:code role="parameter">mimeType</db:code> from the available formats in <db:code role="parameter">pDataObj</db:code>.</db:para>
<db:para>All subclasses must reimplement this pure virtual function.</db:para>
</db:section>
<db:section xml:id="convertFromMime">
<db:title>[pure virtual] bool QWinMime::convertFromMime(const FORMATETC &amp;<db:emphasis>formatetc</db:emphasis>, const QMimeData *<db:emphasis>mimeData</db:emphasis>, STGMEDIUM *<db:emphasis>pmedium</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>convertFromMime</db:methodname>
<db:methodparam>
<db:type>const FORMATETC &amp;</db:type>
<db:parameter>formatetc</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMimeData *</db:type>
<db:parameter>mimeData</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>STGMEDIUM *</db:type>
<db:parameter>pmedium</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool convertFromMime(const FORMATETC &amp;formatetc, const QMimeData *mimeData, STGMEDIUM *pmedium) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convert the <db:code role="parameter">mimeData</db:code> to the format specified in <db:code role="parameter">formatetc</db:code>. The converted data should then be placed in <db:code role="parameter">pmedium</db:code> structure.</db:para>
<db:para>Return true if the conversion was successful.</db:para>
<db:para>All subclasses must reimplement this pure virtual function.</db:para>
</db:section>
<db:section xml:id="convertToMime">
<db:title>[pure virtual] QVariant QWinMime::convertToMime(const QString &amp;<db:emphasis>mimeType</db:emphasis>, IDataObject *<db:emphasis>pDataObj</db:emphasis>, QVariant::Type <db:emphasis>preferredType</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>convertToMime</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>mimeType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>IDataObject *</db:type>
<db:parameter>pDataObj</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVariant::Type</db:type>
<db:parameter>preferredType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant convertToMime(const QString &amp;mimeType, IDataObject *pDataObj, QVariant::Type preferredType) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qvariant.xml">QVariant</db:link> containing the converted data for <db:code role="parameter">mimeType</db:code> from <db:code role="parameter">pDataObj</db:code>. If possible the <db:link xlink:href="qvariant.xml">QVariant</db:link> should be of the <db:code role="parameter">preferredType</db:code> to avoid needless conversions.</db:para>
<db:para>All subclasses must reimplement this pure virtual function.</db:para>
</db:section>
<db:section xml:id="formatsForMime">
<db:title>[pure virtual] QVector&lt;FORMATETC&gt; QWinMime::formatsForMime(const QString &amp;<db:emphasis>mimeType</db:emphasis>, const QMimeData *<db:emphasis>mimeData</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVector&lt;FORMATETC&gt;</db:type>
<db:methodname>formatsForMime</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>mimeType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMimeData *</db:type>
<db:parameter>mimeData</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector&lt;FORMATETC&gt; formatsForMime(const QString &amp;mimeType, const QMimeData *mimeData) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qvector.xml">QVector</db:link> of FORMATETC structures representing the different windows clipboard formats that can be provided for the <db:code role="parameter">mimeType</db:code> from the <db:code role="parameter">mimeData</db:code>.</db:para>
<db:para>All subclasses must reimplement this pure virtual function.</db:para>
</db:section>
<db:section xml:id="mimeForFormat">
<db:title>[pure virtual] QString QWinMime::mimeForFormat(const FORMATETC &amp;<db:emphasis>formatetc</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>mimeForFormat</db:methodname>
<db:methodparam>
<db:type>const FORMATETC &amp;</db:type>
<db:parameter>formatetc</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString mimeForFormat(const FORMATETC &amp;formatetc) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the mime type that will be created form the format specified in <db:code role="parameter">formatetc</db:code>, or an empty string if this converter does not support <db:code role="parameter">formatetc</db:code>.</db:para>
<db:para>All subclasses must reimplement this pure virtual function.</db:para>
</db:section>
<db:section xml:id="registerMimeType">
<db:title>[static] int QWinMime::registerMimeType(const QString &amp;<db:emphasis>mime</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>registerMimeType</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>mime</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int registerMimeType(const QString &amp;mime)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers the MIME type <db:code role="parameter">mime</db:code>, and returns an ID number identifying the format on Windows.</db:para>
</db:section>
</db:section>
</db:article>
