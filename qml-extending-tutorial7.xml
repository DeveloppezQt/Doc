<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Chapter 7: In Summary</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt QML Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>In this tutorial, we've shown the basic steps for creating a QML extension:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Define new QML types by subclassing <db:link xlink:href="qobject.xml">QObject</db:link> and registering them with <db:link xlink:href="qqmlengine.xml#qmlRegisterType">qmlRegisterType</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para>Add callable methods using <db:link xlink:href="qobject.xml#Q_INVOKABLE">Q_INVOKABLE</db:link> or Qt slots, and connect to Qt signals with an <db:code>onSignal</db:code> syntax</db:para>
</db:listitem>
<db:listitem>
<db:para>Add property bindings by defining <db:link xlink:href="properties.xml#qt-s-property-system">NOTIFY</db:link> signals</db:para>
</db:listitem>
<db:listitem>
<db:para>Define custom property types if the built-in types are not sufficient</db:para>
</db:listitem>
<db:listitem>
<db:para>Define list property types using <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>Create a plugin library by defining a Qt plugin and writing a <db:code>qmldir</db:code> file</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:link xlink:href="qtqml-cppintegration-topic.xml">Integrating QML and C++</db:link> documentation shows other useful features that can be added to QML extensions. For example, we could use <db:link xlink:href="qtqml-syntax-objectattributes.xml#default-properties">default properties</db:link> to allow slices to be added without using the <db:code>slices</db:code> property:</db:para>
<db:programlisting language="cpp">PieChart {
    PieSlice { ... }
    PieSlice { ... }
    PieSlice { ... }
}
</db:programlisting>
<db:para>Or randomly add and remove slices from time to time using <db:link xlink:href="qtqml-cppintegration-definetypes.xml#property-value-sources">property value sources</db:link>:</db:para>
<db:programlisting language="cpp">PieChart {
    PieSliceRandomizer on slices {}
}
</db:programlisting>
<db:para>See the <db:link xlink:href="qtqml-cppintegration-topic.xml">Integrating QML and C++</db:link> documentation for more information.</db:para>
</db:article>
