<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QLowEnergyController Class</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link> class provides access to Bluetooth Low Energy Devices.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QLowEnergyController</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += bluetooth</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link> acts as the entry point for Bluetooth Low Energy development.</db:para>
<db:para>Bluetooth Low Energy defines two types of devices; the peripheral and the central. Each role performs a different task. The peripheral device provides data which is utilized by central devices. An example might be a humidity sensor which measures the moisture in a winter garden. A device such as a mobile phone might read the sensor's value and display it to the user in the greater context of all sensors in the same environment. In this case the sensor is the peripheral device and the mobile phone acts as the central device.</db:para>
<db:para>A controller in the central role is created via the <db:link xlink:href="qlowenergycontroller.xml#createCentral">createCentral</db:link>() factory method. Such an object essentially acts as a placeholder towards a remote Low Energy peripheral device, enabling features such as service discovery and state tracking.</db:para>
<db:para>After having created a controller object in the central role, the first step is to establish a connection via <db:link xlink:href="qlowenergycontroller.xml#connectToDevice">connectToDevice</db:link>(). Once the connection has been established, the controller's <db:link xlink:href="qlowenergycontroller.xml#state">state</db:link>() changes to <db:link xlink:href="qlowenergycontroller.xml#ControllerState-enum">QLowEnergyController::ConnectedState</db:link> and the <db:link xlink:href="qlowenergycontroller.xml#connected">connected</db:link>() signal is emitted. It is important to mention that some platforms such as a BlueZ based Linux cannot maintain two connected instances of <db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link> to the same remote device. In such cases the second call to <db:link xlink:href="qlowenergycontroller.xml#connectToDevice">connectToDevice</db:link>() may fail. This limitation may disappear at some stage in the future. The <db:link xlink:href="qlowenergycontroller.xml#disconnectFromDevice">disconnectFromDevice</db:link>() function is used to break the existing connection.</db:para>
<db:para>The second step after establishing the connection is to discover the services offered by the remote peripheral device. This process is started via <db:link xlink:href="qlowenergycontroller.xml#discoverServices">discoverServices</db:link>() and has finished once the <db:link xlink:href="qlowenergycontroller.xml#discoveryFinished">discoveryFinished</db:link>() signal has been emitted. The discovered services can be enumerated via <db:link xlink:href="qlowenergycontroller.xml#services">services</db:link>().</db:para>
<db:para>The last step is to create service objects. The <db:link xlink:href="qlowenergycontroller.xml#createServiceObject">createServiceObject</db:link>() function acts as factory for each service object and expects the service UUID as parameter. The calling context should take ownership of the returned <db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link> instance.</db:para>
<db:para>Any <db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link>, <db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link> or <db:link xlink:href="qlowenergydescriptor.xml">QLowEnergyDescriptor</db:link> instance which is later created from this controller's connection becomes invalid as soon as the controller disconnects from the remote Bluetooth Low Energy device.</db:para>
<db:para>A controller in the peripheral role is created via the <db:link xlink:href="qlowenergycontroller.xml#createPeripheral">createPeripheral</db:link>() factory method. Such an object acts as a peripheral device itself, enabling features such as advertising services and allowing clients to get notified about changes to characteristic values.</db:para>
<db:para>After having created a controller object in the peripheral role, the first step is to populate the set of GATT services offered to client devices via calls to <db:link xlink:href="qlowenergycontroller.xml#addService">addService</db:link>(). Afterwards, one would call <db:link xlink:href="qlowenergycontroller.xml#startAdvertising">startAdvertising</db:link>() to let the device broadcast some data and, depending on the type of advertising being done, also listen for incoming connections from GATT clients.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:member>
<db:member><db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link></db:member>
<db:member><db:link xlink:href="qlowenergydescriptor.xml">QLowEnergyDescriptor</db:link></db:member>
<db:member><db:link xlink:href="qlowenergyadvertisingparameters.xml">QLowEnergyAdvertisingParameters</db:link></db:member>
<db:member><db:link xlink:href="qlowenergyadvertisingdata.xml">QLowEnergyAdvertisingData</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ControllerState-enum">
<db:title>enum QLowEnergyController::ControllerState</db:title>
<db:enumsynopsis>
<db:enumname>ControllerState</db:enumname>
<db:enumitem>
<db:enumidentifier>UnconnectedState</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ConnectingState</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ConnectedState</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DiscoveringState</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DiscoveredState</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ClosingState</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AdvertisingState</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Indicates the state of the controller object.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::UnconnectedState</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The controller is not connected to a remote device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::ConnectingState</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The controller is attempting to connect to a remote device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::ConnectedState</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The controller is connected to a remote device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::DiscoveringState</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The controller is retrieving the list of services offered by the remote device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::DiscoveredState</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The controller has discovered all services offered by the remote device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::ClosingState</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The controller is about to be disconnected from the remote device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::AdvertisingState (since Qt 5.7)</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The controller is currently advertising data.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Error-enum">
<db:title>enum QLowEnergyController::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownRemoteDeviceError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NetworkError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InvalidBluetoothAdapterError</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ConnectionError</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AdvertisingError</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RemoteHostClosedError</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AuthorizationError</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MissingPermissionsError</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RssiReadError</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Indicates all possible error conditions found during the controller's existence.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An unknown error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::UnknownRemoteDeviceError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The remote Bluetooth Low Energy device with the address passed to the constructor of this class cannot be found.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::NetworkError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The attempt to read from or write to the remote device failed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::InvalidBluetoothAdapterError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The local Bluetooth device with the address passed to the constructor of this class cannot be found or there is no local Bluetooth device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::ConnectionError (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The attempt to connect to the remote device failed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::AdvertisingError (since Qt 5.7)</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The attempt to start advertising failed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::RemoteHostClosedError (since Qt 5.10)</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The remote device closed the connection.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::AuthorizationError (since Qt 5.14)</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>The local Bluetooth device closed the connection due to insufficient authorization.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::MissingPermissionsError (since Qt 6.4)</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>The operating system requests permissions which were not granted by the user.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::RssiReadError (since Qt 6.5)</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>An attempt to read RSSI (received signal strength indicator) of a remote device finished with error.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="RemoteAddressType-enum">
<db:title>enum QLowEnergyController::RemoteAddressType</db:title>
<db:enumsynopsis>
<db:enumname>RemoteAddressType</db:enumname>
<db:enumitem>
<db:enumidentifier>PublicAddress</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RandomAddress</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Indicates what type of Bluetooth address the remote device uses.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::PublicAddress</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The remote device uses a public Bluetooth address.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::RandomAddress</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A random address is a Bluetooth Low Energy security feature. Peripherals using such addresses may frequently change their Bluetooth address. This information is needed when trying to connect to a peripheral.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Role-enum">
<db:title>enum QLowEnergyController::Role</db:title>
<db:enumsynopsis>
<db:enumname>Role</db:enumname>
<db:enumitem>
<db:enumidentifier>CentralRole</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PeripheralRole</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Indicates the role of the controller object.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::CentralRole</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The controller acts as a client interacting with a remote device which is in the peripheral role. The controller can initiate connections, discover services and read and write characteristics.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::PeripheralRole</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The controller can be used to advertise services and handle incoming connections and client requests, acting as a GATT server. A remote device connected to the controller is in the central role.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>The peripheral role is not supported on Windows. In addition on Linux, handling the &quot;Signed Write&quot; ATT command on the server side requires BlueZ 5 and kernel version 3.7 or newer.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#createCentral">QLowEnergyController::createCentral</db:link>()</db:member>
<db:member><db:link xlink:href="qlowenergycontroller.xml#createPeripheral">QLowEnergyController::createPeripheral</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QLowEnergyController">
<db:title>[virtual] QLowEnergyController::~QLowEnergyController()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QLowEnergyController</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QLowEnergyController()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link> instance.</db:para>
</db:section>
<db:section xml:id="addService">
<db:title>QLowEnergyService *QLowEnergyController::addService(const QLowEnergyServiceData &amp;<db:emphasis>service</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:type>QLowEnergyService *</db:type>
<db:methodname>addService</db:methodname>
<db:methodparam>
<db:type>const QLowEnergyServiceData &amp;</db:type>
<db:parameter>service</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLowEnergyService * addService(const QLowEnergyServiceData &amp;service, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Constructs and returns a <db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link> object with <db:code role="parameter">parent</db:code> from <db:code role="parameter">service</db:code>. The controller must be in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">PeripheralRole</db:link> and in the <db:link xlink:href="qlowenergycontroller.xml#ControllerState-enum">UnconnectedState</db:link>. The <db:code role="parameter">service</db:code> object must be valid.</db:para>
<db:note>
<db:para>Once the peripheral instance is disconnected from the remote central device or if <db:link xlink:href="qlowenergycontroller.xml#disconnectFromDevice">disconnectFromDevice</db:link>() is manually called, every service definition that was previously added via this function is removed from the peripheral. Therefore this function must be called again before re-advertising this peripheral controller instance. The described behavior is connection specific and therefore not dependent on whether <db:link xlink:href="qlowenergycontroller.xml#stopAdvertising">stopAdvertising</db:link>() was called.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#stopAdvertising">stopAdvertising</db:link>()</db:member>
<db:member><db:link xlink:href="qlowenergycontroller.xml#disconnectFromDevice">disconnectFromDevice</db:link>()</db:member>
<db:member><db:link xlink:href="qlowenergyservicedata.xml#addIncludedService">QLowEnergyServiceData::addIncludedService</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connectToDevice">
<db:title>void QLowEnergyController::connectToDevice()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>connectToDevice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void connectToDevice()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Connects to the remote Bluetooth Low Energy device.</db:para>
<db:para>This function does nothing if the controller's <db:link xlink:href="qlowenergycontroller.xml#state">state</db:link>() is not equal to <db:link xlink:href="qlowenergycontroller.xml#ControllerState-enum">UnconnectedState</db:link>. The <db:link xlink:href="qlowenergycontroller.xml#connected">connected</db:link>() signal is emitted once the connection is successfully established.</db:para>
<db:para>On Linux/BlueZ systems, it is not possible to connect to the same remote device using two instances of this class. The second call to this function may fail with an error. This limitation may be removed in future releases.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#disconnectFromDevice">disconnectFromDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connected">
<db:title>void QLowEnergyController::connected()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>connected</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void connected()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the controller successfully connects to the remote Low Energy device (if the controller is in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">CentralRole</db:link>) or if a remote Low Energy device connected to the controller (if the controller is in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">PeripheralRole</db:link>). On iOS, macOS, and Android this signal is not reliable if the controller is in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">PeripheralRole</db:link>. On iOS and macOS the controller only guesses that some central connected to our peripheral as soon as this central tries to write/read a characteristic/descriptor. On Android the controller monitors all connected GATT devices. On Linux BlueZ DBus peripheral backend the remote is considered connected when it first reads/writes a characteristic or a descriptor.</db:para>
</db:section>
<db:section xml:id="connectionUpdated">
<db:title>void QLowEnergyController::connectionUpdated(const QLowEnergyConnectionParameters &amp;<db:emphasis>newParameters</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>connectionUpdated</db:methodname>
<db:methodparam>
<db:type>const QLowEnergyConnectionParameters &amp;</db:type>
<db:parameter>newParameters</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void connectionUpdated(const QLowEnergyConnectionParameters &amp;newParameters)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the connection parameters change. This can happen as a result of calling <db:link xlink:href="qlowenergycontroller.xml#requestConnectionUpdate">requestConnectionUpdate</db:link>() or due to other reasons, for instance because the other side of the connection requested new parameters. The new values can be retrieved from <db:code role="parameter">newParameters</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#requestConnectionUpdate">requestConnectionUpdate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createCentral">
<db:title>[static] QLowEnergyController *QLowEnergyController::createCentral(const QBluetoothDeviceInfo &amp;<db:emphasis>remoteDevice</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QLowEnergyController *</db:type>
<db:methodname>createCentral</db:methodname>
<db:methodparam>
<db:type>const QBluetoothDeviceInfo &amp;</db:type>
<db:parameter>remoteDevice</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLowEnergyController * createCentral(const QBluetoothDeviceInfo &amp;remoteDevice, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new object of this class that is in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">CentralRole</db:link> and has the parent object <db:code role="parameter">parent</db:code>. The <db:code role="parameter">remoteDevice</db:code> refers to the device that a connection will be established to later.</db:para>
<db:para>The controller uses the local default Bluetooth adapter for the connection management.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#Role-enum">QLowEnergyController::CentralRole</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createCentral-1">
<db:title>[static] QLowEnergyController *QLowEnergyController::createCentral(const QBluetoothDeviceInfo &amp;<db:emphasis>remoteDevice</db:emphasis>, const QBluetoothAddress &amp;<db:emphasis>localDevice</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QLowEnergyController *</db:type>
<db:methodname>createCentral</db:methodname>
<db:methodparam>
<db:type>const QBluetoothDeviceInfo &amp;</db:type>
<db:parameter>remoteDevice</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QBluetoothAddress &amp;</db:type>
<db:parameter>localDevice</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QLowEnergyController * createCentral(const QBluetoothDeviceInfo &amp;remoteDevice, const QBluetoothAddress &amp;localDevice, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new instance of this class with <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The <db:code role="parameter">remoteDevice</db:code> must contain the address of the remote Bluetooth Low Energy device to which this object should attempt to connect later on.</db:para>
<db:para>The connection is established via <db:code role="parameter">localDevice</db:code>. If <db:code role="parameter">localDevice</db:code> is invalid, the local default device is automatically selected. If <db:code role="parameter">localDevice</db:code> specifies a local device that is not a local Bluetooth adapter, <db:link xlink:href="qlowenergycontroller.xml#error">error</db:link>() is set to <db:link xlink:href="qlowenergycontroller.xml#Error-enum">InvalidBluetoothAdapterError</db:link> once <db:link xlink:href="qlowenergycontroller.xml#connectToDevice">connectToDevice</db:link>() is called.</db:para>
<db:para>Note that specifying the local device to be used for the connection is only possible when using BlueZ. All other platforms do not support this feature.</db:para>
</db:section>
<db:section xml:id="createPeripheral">
<db:title>[static, since 6.2] QLowEnergyController *QLowEnergyController::createPeripheral(const QBluetoothAddress &amp;<db:emphasis>localDevice</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QLowEnergyController *</db:type>
<db:methodname>createPeripheral</db:methodname>
<db:methodparam>
<db:type>const QBluetoothAddress &amp;</db:type>
<db:parameter>localDevice</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLowEnergyController * createPeripheral(const QBluetoothAddress &amp;localDevice, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new object of this class that is in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">PeripheralRole</db:link> and has the parent object <db:code role="parameter">parent</db:code> and is using <db:code role="parameter">localDevice</db:code>. Typically, the next steps are to add some services and finally call <db:link xlink:href="qlowenergycontroller.xml#startAdvertising">startAdvertising</db:link>() on the returned object.</db:para>
<db:para>The peripheral is created on <db:code role="parameter">localDevice</db:code>. If <db:code role="parameter">localDevice</db:code> is invalid, the local default device is automatically selected. If <db:code role="parameter">localDevice</db:code> specifies a local device that is not a local Bluetooth adapter, <db:link xlink:href="qlowenergycontroller.xml#error">error</db:link>() is set to <db:link xlink:href="qlowenergycontroller.xml#Error-enum">InvalidBluetoothAdapterError</db:link>.</db:para>
<db:para>Selecting <db:code role="parameter">localDevice</db:code> is only supported on Linux. On other platform, the parameter is ignored.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#Role-enum">QLowEnergyController::PeripheralRole</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createPeripheral-1">
<db:title>[static] QLowEnergyController *QLowEnergyController::createPeripheral(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QLowEnergyController *</db:type>
<db:methodname>createPeripheral</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QLowEnergyController * createPeripheral(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new object of this class that is in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">PeripheralRole</db:link> and has the parent object <db:code role="parameter">parent</db:code>. Typically, the next steps are to add some services and finally call <db:link xlink:href="qlowenergycontroller.xml#startAdvertising">startAdvertising</db:link>() on the returned object.</db:para>
<db:para>The controller uses the local default Bluetooth adapter for the connection management.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#Role-enum">QLowEnergyController::PeripheralRole</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createServiceObject">
<db:title>QLowEnergyService *QLowEnergyController::createServiceObject(const QBluetoothUuid &amp;<db:emphasis>serviceUuid</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:type>QLowEnergyService *</db:type>
<db:methodname>createServiceObject</db:methodname>
<db:methodparam>
<db:type>const QBluetoothUuid &amp;</db:type>
<db:parameter>serviceUuid</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLowEnergyService * createServiceObject(const QBluetoothUuid &amp;serviceUuid, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates an instance of the service represented by <db:code role="parameter">serviceUuid</db:code>. The <db:code role="parameter">serviceUuid</db:code> parameter must have been obtained via <db:link xlink:href="qlowenergycontroller.xml#services">services</db:link>().</db:para>
<db:para>The caller takes ownership of the returned pointer and may pass a <db:code role="parameter">parent</db:code> parameter as default owner.</db:para>
<db:para>This function returns a null pointer if no service with <db:code role="parameter">serviceUuid</db:code> can be found on the remote device or the controller is disconnected.</db:para>
<db:para>This function can return instances for secondary services too. The include relationships between services can be expressed via <db:link xlink:href="qlowenergyservice.xml#includedServices">QLowEnergyService::includedServices</db:link>().</db:para>
<db:para>If this function is called multiple times using the same service UUID, the returned <db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link> instances share their internal data. Therefore if one of the instances initiates the discovery of the service details, the other instances automatically transition into the discovery state too.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#services">services</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="disconnectFromDevice">
<db:title>void QLowEnergyController::disconnectFromDevice()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>disconnectFromDevice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void disconnectFromDevice()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disconnects from the remote device.</db:para>
<db:para>Any <db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link>, <db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link> or <db:link xlink:href="qlowenergydescriptor.xml">QLowEnergyDescriptor</db:link> instance that resulted from the current connection is automatically invalidated. Once any of those objects become invalid they remain invalid even if this controller object reconnects.</db:para>
<db:para>This function does nothing if the controller is in the <db:link xlink:href="qlowenergycontroller.xml#ControllerState-enum">UnconnectedState</db:link>.</db:para>
<db:para>If the controller is in the peripheral role, it stops advertising and removes all services which have previously been added via <db:link xlink:href="qlowenergycontroller.xml#addService">addService</db:link>(). To reuse the <db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link> instance the application must re-add services and restart the advertising mode by calling <db:link xlink:href="qlowenergycontroller.xml#startAdvertising">startAdvertising</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#connectToDevice">connectToDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="disconnected">
<db:title>void QLowEnergyController::disconnected()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>disconnected</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void disconnected()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the controller disconnects from the remote Low Energy device or vice versa. On iOS and macOS this signal is unreliable if the controller is in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">PeripheralRole</db:link>. On Android the signal is emitted when the last connected device is disconnected. On BlueZ DBus backend the controller is considered disconnected when last client which has accessed the attributes has disconnected.</db:para>
</db:section>
<db:section xml:id="discoverServices">
<db:title>void QLowEnergyController::discoverServices()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>discoverServices</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void discoverServices()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initiates the service discovery process.</db:para>
<db:para>The discovery progress is indicated via the <db:link xlink:href="qlowenergycontroller.xml#serviceDiscovered">serviceDiscovered</db:link>() signal. The <db:link xlink:href="qlowenergycontroller.xml#discoveryFinished">discoveryFinished</db:link>() signal is emitted when the process has finished.</db:para>
<db:para>If the controller instance is not connected or the controller has performed the service discovery already this function will do nothing.</db:para>
<db:note>
<db:para>Some platforms internally cache the service list of a device which was discovered in the past. This can be problematic if the remote device changed its list of services or their inclusion tree. If this behavior is a problem, the best workaround is to temporarily turn Bluetooth off. This causes a reset of the cache data. Currently Android exhibits such a cache behavior.</db:para>
</db:note>
</db:section>
<db:section xml:id="discoveryFinished">
<db:title>void QLowEnergyController::discoveryFinished()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>discoveryFinished</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void discoveryFinished()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the running service discovery finishes. The signal is not emitted if the discovery process finishes with an error.</db:para>
<db:para>This signal can only be emitted if the controller is in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">CentralRole</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#discoverServices">discoverServices</db:link>()</db:member>
<db:member><db:link xlink:href="qlowenergycontroller.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>QLowEnergyController::Error QLowEnergyController::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLowEnergyController::Error</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLowEnergyController::Error error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the last occurred error or <db:link xlink:href="qlowenergycontroller.xml#Error-enum">NoError</db:link>.</db:para>
</db:section>
<db:section xml:id="errorOccurred">
<db:title>[since 6.2] void QLowEnergyController::errorOccurred(QLowEnergyController::Error <db:emphasis>newError</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>errorOccurred</db:methodname>
<db:methodparam>
<db:type>QLowEnergyController::Error</db:type>
<db:parameter>newError</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void errorOccurred(QLowEnergyController::Error newError)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when an error occurs. The <db:code role="parameter">newError</db:code> parameter describes the error that occurred.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qlowenergycontroller.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QLowEnergyController::errorString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>errorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString errorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a textual representation of the last occurred error. The string is translated.</db:para>
</db:section>
<db:section xml:id="localAddress">
<db:title>QBluetoothAddress QLowEnergyController::localAddress() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBluetoothAddress</db:type>
<db:methodname>localAddress</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBluetoothAddress localAddress() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the address of the local Bluetooth adapter being used for the communication.</db:para>
<db:para>If this class instance was requested to use the default adapter but there was no default adapter when creating this class instance, the returned <db:link xlink:href="qbluetoothaddress.xml">QBluetoothAddress</db:link> will be null.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothaddress.xml#isNull">QBluetoothAddress::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mtu">
<db:title>[since 6.2] int QLowEnergyController::mtu() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>mtu</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int mtu() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the MTU size.</db:para>
<db:para>During connection setup, the ATT MTU size is negotiated. This method provides the result of this negotiation. It can be used to optimize packet sizes in some situations. The maximum amount of data which can be transferred in a single packet is <db:emphasis role="bold">mtu-3</db:emphasis> bytes. 3 bytes are required for the ATT protocol header.</db:para>
<db:para>Before the connection setup and MTU negotiation, the default value of <db:code>23</db:code> will be returned.</db:para>
<db:para>Not every platform exposes the MTU value. On those platforms (e.g. Linux) this function always returns <db:code>-1</db:code>.</db:para>
<db:para>If the controller is in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">PeripheralRole</db:link>, there might be several central devices connected to it. In those cases this function returns the MTU of the last connection that was negotiated.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="mtuChanged">
<db:title>void QLowEnergyController::mtuChanged(int <db:emphasis>mtu</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mtuChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mtu</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mtuChanged(int mtu)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted as a result of a successful MTU change. <db:code role="parameter">mtu</db:code> represents the new value.</db:para>
<db:note>
<db:para>If the controller is in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">PeripheralRole</db:link>, the MTU value is negotiated for each client/central device individually. Therefore this signal can be emitted several times in a row for one or several devices.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#mtu">mtu</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readRssi">
<db:title>[since 6.5] void QLowEnergyController::readRssi()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>readRssi</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void readRssi()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>readRssi() reads RSSI (received signal strength indicator) for a connected remote device. If the read was successful, the RSSI is then reported by <db:link xlink:href="qlowenergycontroller.xml#rssiRead">rssiRead</db:link>() signal.</db:para>
<db:note>
<db:para>Prior to calling readRssi(), this controller must be connected to a peripheral. This controller must be created using <db:link xlink:href="qlowenergycontroller.xml#createCentral">createCentral</db:link>().</db:para>
</db:note>
<db:note>
<db:para>In case Bluetooth backend you are using does not support reading RSSI, the <db:link xlink:href="qlowenergycontroller.xml#errorOccurred">errorOccurred</db:link>() signal is emitted with an error code <db:link xlink:href="qlowenergycontroller.xml#Error-enum">QLowEnergyController::RssiReadError</db:link>. At the moment platforms supporting reading RSSI include Android, iOS and macOS.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#rssiRead">rssiRead</db:link>()</db:member>
<db:member><db:link xlink:href="qlowenergycontroller.xml#connectToDevice">connectToDevice</db:link>()</db:member>
<db:member><db:link xlink:href="qlowenergycontroller.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qlowenergycontroller.xml#createCentral">createCentral</db:link>()</db:member>
<db:member><db:link xlink:href="qlowenergycontroller.xml#errorOccurred">errorOccurred</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remoteAddress">
<db:title>QBluetoothAddress QLowEnergyController::remoteAddress() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBluetoothAddress</db:type>
<db:methodname>remoteAddress</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBluetoothAddress remoteAddress() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the address of the remote Bluetooth Low Energy device.</db:para>
<db:para>For a controller in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">CentralRole</db:link>, this value will always be the one passed in when the controller object was created. For a controller in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">PeripheralRole</db:link>, this value is one of the currently connected client device addresses. This address will be invalid if the controller is not currently in the <db:link xlink:href="qlowenergycontroller.xml#ControllerState-enum">ConnectedState</db:link>.</db:para>
</db:section>
<db:section xml:id="remoteAddressType">
<db:title>QLowEnergyController::RemoteAddressType QLowEnergyController::remoteAddressType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLowEnergyController::RemoteAddressType</db:type>
<db:methodname>remoteAddressType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLowEnergyController::RemoteAddressType remoteAddressType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of <db:link xlink:href="qlowenergycontroller.xml#remoteAddress">remoteAddress</db:link>(). By default, this value is initialized to <db:link xlink:href="qlowenergycontroller.xml#RemoteAddressType-enum">PublicAddress</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#setRemoteAddressType">setRemoteAddressType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remoteDeviceUuid">
<db:title>QBluetoothUuid QLowEnergyController::remoteDeviceUuid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBluetoothUuid</db:type>
<db:methodname>remoteDeviceUuid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBluetoothUuid remoteDeviceUuid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the unique identifier of the remote Bluetooth Low Energy device.</db:para>
<db:para>On macOS/iOS/tvOS CoreBluetooth does not expose/accept hardware addresses for LE devices; instead developers are supposed to use unique 128-bit UUIDs, generated by CoreBluetooth. These UUIDS will stay constant for the same central &lt;-&gt; peripheral pair and we use them when connecting to a remote device. For a controller in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">CentralRole</db:link>, this value will always be the one passed in when the controller object was created. For a controller in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">PeripheralRole</db:link>, this value is invalid.</db:para>
</db:section>
<db:section xml:id="remoteName">
<db:title>QString QLowEnergyController::remoteName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>remoteName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString remoteName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the remote Bluetooth Low Energy device, if the controller is in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">CentralRole</db:link>. Otherwise the result is unspecified.</db:para>
</db:section>
<db:section xml:id="requestConnectionUpdate">
<db:title>void QLowEnergyController::requestConnectionUpdate(const QLowEnergyConnectionParameters &amp;<db:emphasis>parameters</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>requestConnectionUpdate</db:methodname>
<db:methodparam>
<db:type>const QLowEnergyConnectionParameters &amp;</db:type>
<db:parameter>parameters</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void requestConnectionUpdate(const QLowEnergyConnectionParameters &amp;parameters)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Requests the controller to update the connection according to <db:code role="parameter">parameters</db:code>. If the request is successful, the <db:link xlink:href="qlowenergycontroller.xml#connectionUpdated">connectionUpdated</db:link>() signal will be emitted with the actual new parameters. See the <db:link xlink:href="qlowenergyconnectionparameters.xml">QLowEnergyConnectionParameters</db:link> class for more information on connection parameters.</db:para>
<db:para>Android only indirectly permits the adjustment of this parameter set. The connection parameters are separated into three categories (high, low &amp; balanced priority). Each category implies a pre-configured set of values for <db:link xlink:href="qlowenergyconnectionparameters.xml#minimumInterval">QLowEnergyConnectionParameters::minimumInterval</db:link>(), <db:link xlink:href="qlowenergyconnectionparameters.xml#maximumInterval">QLowEnergyConnectionParameters::maximumInterval</db:link>() and <db:link xlink:href="qlowenergyconnectionparameters.xml#latency">QLowEnergyConnectionParameters::latency</db:link>(). Although the connection request is an asynchronous operation, Android does not provide a callback stating the result of the request. This is an acknowledged Android bug. Due to this bug Android does not emit the <db:link xlink:href="qlowenergycontroller.xml#connectionUpdated">connectionUpdated</db:link>() signal.</db:para>
<db:note>
<db:para>Currently, this functionality is only implemented on Linux kernel backend and Android.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#connectionUpdated">connectionUpdated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="role">
<db:title>QLowEnergyController::Role QLowEnergyController::role() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLowEnergyController::Role</db:type>
<db:methodname>role</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLowEnergyController::Role role() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the role that this controller object is in.</db:para>
<db:para>The role is determined when constructing a <db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link> instance using <db:link xlink:href="qlowenergycontroller.xml#createCentral">createCentral</db:link>() or <db:link xlink:href="qlowenergycontroller.xml#createPeripheral">createPeripheral</db:link>().</db:para>
</db:section>
<db:section xml:id="rssiRead">
<db:title>[since 6.5] void QLowEnergyController::rssiRead(qint16 <db:emphasis>rssi</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>rssiRead</db:methodname>
<db:methodparam>
<db:type>qint16</db:type>
<db:parameter>rssi</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void rssiRead(qint16 rssi)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after successful read of RSSI (received signal strength indicator) for a connected remote device. <db:code role="parameter">rssi</db:code> parameter represents the new value.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#readRssi">readRssi</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="serviceDiscovered">
<db:title>void QLowEnergyController::serviceDiscovered(const QBluetoothUuid &amp;<db:emphasis>newService</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>serviceDiscovered</db:methodname>
<db:methodparam>
<db:type>const QBluetoothUuid &amp;</db:type>
<db:parameter>newService</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void serviceDiscovered(const QBluetoothUuid &amp;newService)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted each time a new service is discovered. The <db:code role="parameter">newService</db:code> parameter contains the UUID of the found service.</db:para>
<db:para>This signal can only be emitted if the controller is in the <db:code>CentralRole</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#discoverServices">discoverServices</db:link>()</db:member>
<db:member><db:link xlink:href="qlowenergycontroller.xml#discoveryFinished">discoveryFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="services">
<db:title>QList&lt;QBluetoothUuid&gt; QLowEnergyController::services() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QBluetoothUuid&gt;</db:type>
<db:methodname>services</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QBluetoothUuid&gt; services() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of services offered by the remote device, if the controller is in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">CentralRole</db:link>. Otherwise, the result is unspecified.</db:para>
<db:para>The list contains all primary and secondary services.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#createServiceObject">createServiceObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRemoteAddressType">
<db:title>void QLowEnergyController::setRemoteAddressType(QLowEnergyController::RemoteAddressType <db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRemoteAddressType</db:methodname>
<db:methodparam>
<db:type>QLowEnergyController::RemoteAddressType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRemoteAddressType(QLowEnergyController::RemoteAddressType type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the remote address <db:code role="parameter">type</db:code>. The type is required to connect to the remote Bluetooth Low Energy device.</db:para>
<db:para>This attribute is only required to be set on Linux/BlueZ systems with older Linux kernels (v3.3 or lower), or if CAP_NET_ADMIN is not set for the executable. The default value of the attribute is <db:link xlink:href="qlowenergycontroller.xml#RemoteAddressType-enum">RandomAddress</db:link>.</db:para>
<db:note>
<db:para>All other platforms handle this flag transparently and therefore applications can ignore it entirely. On Linux, the address type flag is not directly exposed by BlueZ although some use cases do require this information. The only way to detect the flag is via the Linux kernel's Bluetooth Management API (kernel version 3.4+ required). This API requires CAP_NET_ADMIN capabilities though. If the local <db:link xlink:href="qtbluetooth-module.xml">QtBluetooth</db:link> process has this capability set <db:link xlink:href="qtbluetooth-module.xml">QtBluetooth</db:link> will use the API. This assumes that <db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link> was used prior to calling <db:link xlink:href="qlowenergycontroller.xml#connectToDevice">QLowEnergyController::connectToDevice</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#remoteAddressType">remoteAddressType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startAdvertising">
<db:title>void QLowEnergyController::startAdvertising(const QLowEnergyAdvertisingParameters &amp;<db:emphasis>parameters</db:emphasis>, const QLowEnergyAdvertisingData &amp;<db:emphasis>advertisingData</db:emphasis>, const QLowEnergyAdvertisingData &amp;<db:emphasis>scanResponseData</db:emphasis> = QLowEnergyAdvertisingData())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>startAdvertising</db:methodname>
<db:methodparam>
<db:type>const QLowEnergyAdvertisingParameters &amp;</db:type>
<db:parameter>parameters</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QLowEnergyAdvertisingData &amp;</db:type>
<db:parameter>advertisingData</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QLowEnergyAdvertisingData &amp;</db:type>
<db:parameter>scanResponseData</db:parameter>
<db:initializer>QLowEnergyAdvertisingData()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void startAdvertising(const QLowEnergyAdvertisingParameters &amp;parameters, const QLowEnergyAdvertisingData &amp;advertisingData, const QLowEnergyAdvertisingData &amp;scanResponseData)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts advertising the data given in <db:code role="parameter">advertisingData</db:code> and <db:code role="parameter">scanResponseData</db:code>, using the parameters set in <db:code role="parameter">parameters</db:code>. The controller has to be in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">PeripheralRole</db:link>. If <db:code role="parameter">parameters</db:code> indicates that the advertisement should be connectable, then this function also starts listening for incoming client connections.</db:para>
<db:para>Providing <db:code role="parameter">scanResponseData</db:code> is not required, as it is not applicable for certain configurations of <db:code>parameters</db:code>. <db:code role="parameter">advertisingData</db:code> and <db:code role="parameter">scanResponseData</db:code> are limited to 31 byte user data. If, for example, several 128bit uuids are added to <db:code role="parameter">advertisingData</db:code>, the advertised packets may not contain all uuids. The existing limit may have caused the truncation of uuids. In such cases <db:code role="parameter">scanResponseData</db:code> may be used for additional information.</db:para>
<db:para>On BlueZ DBus backend BlueZ decides if, and which data, to use in a scan response. Therefore all advertisement data is recommended to set in the main <db:code role="parameter">advertisingData</db:code> parameter. If both advertisement and scan response data is set, the scan response data is given precedence.</db:para>
<db:para>If this object is currently not in the <db:link xlink:href="qlowenergycontroller.xml#ControllerState-enum">UnconnectedState</db:link>, nothing happens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#stopAdvertising">stopAdvertising</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state">
<db:title>QLowEnergyController::ControllerState QLowEnergyController::state() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLowEnergyController::ControllerState</db:type>
<db:methodname>state</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLowEnergyController::ControllerState state() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current state of the controller.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#stateChanged">stateChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QLowEnergyController::stateChanged(QLowEnergyController::ControllerState <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stateChanged</db:methodname>
<db:methodparam>
<db:type>QLowEnergyController::ControllerState</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stateChanged(QLowEnergyController::ControllerState state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the controller's state changes. The new <db:code role="parameter">state</db:code> can also be retrieved via <db:link xlink:href="qlowenergycontroller.xml#state">state</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stopAdvertising">
<db:title>void QLowEnergyController::stopAdvertising()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stopAdvertising</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stopAdvertising()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stops advertising, if this object is currently in the advertising state.</db:para>
<db:para>The controller has to be in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">PeripheralRole</db:link> for this function to work. It does not invalidate services which have previously been added via <db:link xlink:href="qlowenergycontroller.xml#addService">addService</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#startAdvertising">startAdvertising</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
