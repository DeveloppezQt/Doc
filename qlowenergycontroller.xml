<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QLowEnergyController Class</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link> class provides access to Bluetooth Low Energy Devices.</db:para>
<db:para>This class was introduced in Qt 5.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QLowEnergyController</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += bluetooth</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link> acts as the entry point for Bluetooth Low Energy development. Each <db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link> instance acts as placeholder towards a remote Low Energy device enabling connection control, service discovery and state tracking.</db:para>
<db:para>Bluetooth Low Energy defines two types of devices; the peripheral and the central. Each role performs a different task. The peripheral device provides data which is utilized by central devices. An example might be a humidity sensor which measures the moisture in a winter garden. A device such as a mobile phone might read the sensor's value and display it to the user in the greater context of all sensors in the same environment. In this case the sensor is the peripheral device and the mobile phone acts as the central device.</db:para>
<db:para>At the moment Qt only supports the central role and therefore the remote device can only be a device acting as a peripheral. This implies that the local device acts within the boundaries of the central role as per the Bluetooth 4.0 specification.</db:para>
<db:para>The first step is to establish a connection via <db:link xlink:href="qlowenergycontroller.xml#connectToDevice">connectToDevice</db:link>(). Once the connection has been established, the controller's <db:link xlink:href="qlowenergycontroller.xml#state">state</db:link>() changes to <db:link xlink:href="qlowenergycontroller.xml#ControllerState-enum">QLowEnergyController::ConnectedState</db:link> and the <db:link xlink:href="qlowenergycontroller.xml#connected">connected</db:link>() signal is emitted. It is important to mention that some platforms such as a BlueZ based Linux cannot maintain two connected instances of <db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link> to the same remote device. In such cases the second call to <db:link xlink:href="qlowenergycontroller.xml#connectToDevice">connectToDevice</db:link>() may fail. This limitation may disappear at some stage in the future. The <db:link xlink:href="qlowenergycontroller.xml#disconnectFromDevice">disconnectFromDevice</db:link>() function is used to break the existing connection.</db:para>
<db:para>The second step after establishing the connection is to discover the services offered by the remote peripheral device. This process is started via <db:link xlink:href="qlowenergycontroller.xml#discoverServices">discoverServices</db:link>() and has finished once the <db:link xlink:href="qlowenergycontroller.xml#discoveryFinished">discoveryFinished</db:link>() signal has been emitted. The discovered services can be enumerated via <db:link xlink:href="qlowenergycontroller.xml#services">services</db:link>().</db:para>
<db:para>The last step is to create service objects. The <db:link xlink:href="qlowenergycontroller.xml#createServiceObject">createServiceObject</db:link>() function acts as factory for each service object and expects the service UUID as parameter. The calling context should take ownership of the returned <db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link> instance.</db:para>
<db:para>Any <db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link>, <db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link> or <db:link xlink:href="qlowenergydescriptor.xml">QLowEnergyDescriptor</db:link> instance which is later created from this controller's connection becomes invalid as soon as the controller disconnects from the remote Bluetooth Low Energy device.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:member>
<db:member><db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link></db:member>
<db:member><db:link xlink:href="qlowenergydescriptor.xml">QLowEnergyDescriptor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ControllerState-enum">
<db:title>enum QLowEnergyController::ControllerState</db:title>
<db:para>Indicates the state of the controller object.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::UnconnectedState</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The controller is not connected to a remote device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::ConnectingState</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The controller is attempting to connect to a remote device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::ConnectedState</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The controller is connected to a remote device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::DiscoveringState</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The controller is retrieving the list of services offered by the remote device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::DiscoveredState</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The controller has discovered all services offered by the remote device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::ClosingState</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The controller is about to be disconnected from the remote device.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Error-enum">
<db:title>enum QLowEnergyController::Error</db:title>
<db:para>Indicates all possible error conditions found during the controller's existence.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An unknown error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::UnknownRemoteDeviceError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The remote Bluetooth Low Energy device with the address passed to the constructor of this class cannot be found.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::NetworkError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The attempt to read from or write to the remote device failed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::InvalidBluetoothAdapterError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The local Bluetooth device with the address passed to the constructor of this class cannot be found or there is no local Bluetooth device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::ConnectionError</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The attempt to connect to the remote device failed. This value was introduced by Qt 5.5.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="RemoteAddressType-enum">
<db:title>enum QLowEnergyController::RemoteAddressType</db:title>
<db:para>Indicates what type of Bluetooth address the remote device uses.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::PublicAddress</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The peripheral uses a public Bluetooth address.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:emphasis>::RandomAddress</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A random address is a Bluetooth Low Energy security feature. Peripherals using such addresses may frequently change their Bluetooth address. This information is needed when trying to connect to a peripheral.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QLowEnergyController-1">
<db:title>[explicit, since 5.5] QLowEnergyController::QLowEnergyController(const QBluetoothDeviceInfo &amp;<db:emphasis>remoteDeviceInfo</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a new instance of this class with <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The <db:code role="parameter">remoteDeviceInfo</db:code> must contain the details of the remote Bluetooth Low Energy device to which this object should attempt to connect later on.</db:para>
<db:para>The controller uses the local default Bluetooth adapter for the connection management.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="dtor.QLowEnergyController">
<db:title>[virtual noexcept] QLowEnergyController::~QLowEnergyController()</db:title>
<db:para>Destroys the <db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link> instance.</db:para>
</db:section>
<db:section xml:id="connectToDevice">
<db:title>void QLowEnergyController::connectToDevice()</db:title>
<db:para>Connects to the remote Bluetooth Low Energy device.</db:para>
<db:para>This function does nothing if the controller's <db:link xlink:href="qlowenergycontroller.xml#state">state</db:link>() is not equal to <db:link xlink:href="qlowenergycontroller.xml#ControllerState-enum">UnconnectedState</db:link>. The <db:link xlink:href="qlowenergycontroller.xml#connected">connected</db:link>() signal is emitted once the connection is successfully established.</db:para>
<db:para>On Linux/BlueZ systems, it is not possible to connect to the same remote device using two instances of this class. The second call to this function may fail with an error. This limitation may be removed in future releases.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#disconnectFromDevice">disconnectFromDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connected">
<db:title>void QLowEnergyController::connected()</db:title>
<db:para>This signal is emitted when the controller successfully connects to the remote Low Energy device.</db:para>
</db:section>
<db:section xml:id="createServiceObject">
<db:title>QLowEnergyService *QLowEnergyController::createServiceObject(const QBluetoothUuid &amp;<db:emphasis>serviceUuid</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Creates an instance of the service represented by <db:code role="parameter">serviceUuid</db:code>. The <db:code role="parameter">serviceUuid</db:code> parameter must have been obtained via <db:link xlink:href="qlowenergycontroller.xml#services">services</db:link>().</db:para>
<db:para>The caller takes ownership of the returned pointer and may pass a <db:code role="parameter">parent</db:code> parameter as default owner.</db:para>
<db:para>This function returns a null pointer if no service with <db:code role="parameter">serviceUuid</db:code> can be found on the remote device or the controller is disconnected.</db:para>
<db:para>This function can return instances for secondary services too. The include relationships between services can be expressed via <db:link xlink:href="qlowenergyservice.xml#includedServices">QLowEnergyService::includedServices</db:link>().</db:para>
<db:para>If this function is called multiple times using the same service UUID, the returned <db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link> instances share their internal data. Therefore if one of the instances initiates the discovery of the service details, the other instances automatically transition into the discovery state too.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#services">services</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="disconnectFromDevice">
<db:title>void QLowEnergyController::disconnectFromDevice()</db:title>
<db:para>Disconnects from the remote device.</db:para>
<db:para>Any <db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link>, <db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link> or <db:link xlink:href="qlowenergydescriptor.xml">QLowEnergyDescriptor</db:link> instance that resulted from the current connection is automatically invalidated. Once any of those objects become invalid they remain invalid even if this controller object reconnects.</db:para>
<db:para>This function does nothing if the controller is in the <db:link xlink:href="qlowenergycontroller.xml#ControllerState-enum">UnconnectedState</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#connectToDevice">connectToDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="disconnected">
<db:title>void QLowEnergyController::disconnected()</db:title>
<db:para>This signal is emitted when the controller disconnects from the remote Low Energy device.</db:para>
</db:section>
<db:section xml:id="discoverServices">
<db:title>void QLowEnergyController::discoverServices()</db:title>
<db:para>Initiates the service discovery process.</db:para>
<db:para>The discovery progress is indicated via the <db:link xlink:href="qlowenergycontroller.xml#serviceDiscovered">serviceDiscovered</db:link>() signal. The <db:link xlink:href="qlowenergycontroller.xml#discoveryFinished">discoveryFinished</db:link>() signal is emitted when the process has finished.</db:para>
<db:para>If the controller instance is not connected or the controller has performed the service discovery already this function will do nothing.</db:para>
<db:note>
<db:para>Some platforms internally cache the service list of a device which was discovered in the past. This can be problematic if the remote device changed its list of services or their inclusion tree. If this behavior is a problem, the best workaround is to temporarily turn Bluetooth off. This causes a reset of the cache data. Currently Android exhibits such a cache behavior.</db:para>
</db:note>
</db:section>
<db:section xml:id="discoveryFinished">
<db:title>void QLowEnergyController::discoveryFinished()</db:title>
<db:para>This signal is emitted when the running service discovery finishes. The signal is not emitted if the discovery process finishes with an error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#discoverServices">discoverServices</db:link>()</db:member>
<db:member><db:link xlink:href="qlowenergycontroller.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>QLowEnergyController::Error QLowEnergyController::error() const</db:title>
<db:para>Returns the last occurred error or <db:link xlink:href="qlowenergycontroller.xml#Error-enum">NoError</db:link>.</db:para>
</db:section>
<db:section xml:id="error-1">
<db:title>void QLowEnergyController::error(QLowEnergyController::Error <db:emphasis>newError</db:emphasis>)</db:title>
<db:para>This signal is emitted when an error occurs. The <db:code role="parameter">newError</db:code> parameter describes the error that occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qlowenergycontroller.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QLowEnergyController::errorString() const</db:title>
<db:para>Returns a textual representation of the last occurred error. The string is translated.</db:para>
</db:section>
<db:section xml:id="localAddress">
<db:title>QBluetoothAddress QLowEnergyController::localAddress() const</db:title>
<db:para>Returns the address of the local Bluetooth adapter being used for the communication.</db:para>
<db:para>If this class instance was requested to use the default adapter but there was no default adapter when creating this class instance, the returned <db:link xlink:href="qbluetoothaddress.xml">QBluetoothAddress</db:link> will be null.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothaddress.xml#isNull">QBluetoothAddress::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remoteAddress">
<db:title>QBluetoothAddress QLowEnergyController::remoteAddress() const</db:title>
<db:para>Returns the address of the remote Bluetooth Low Energy device.</db:para>
</db:section>
<db:section xml:id="remoteAddressType">
<db:title>QLowEnergyController::RemoteAddressType QLowEnergyController::remoteAddressType() const</db:title>
<db:para>Returns the type of <db:link xlink:href="qlowenergycontroller.xml#remoteAddress">remoteAddress</db:link>(). By default, this value is initialized to <db:link xlink:href="qlowenergycontroller.xml#RemoteAddressType-enum">PublicAddress</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#setRemoteAddressType">setRemoteAddressType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remoteName">
<db:title>[since 5.5] QString QLowEnergyController::remoteName() const</db:title>
<db:para>Returns the name of the remote Bluetooth Low Energy device.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="serviceDiscovered">
<db:title>void QLowEnergyController::serviceDiscovered(const QBluetoothUuid &amp;<db:emphasis>newService</db:emphasis>)</db:title>
<db:para>This signal is emitted each time a new service is discovered. The <db:code role="parameter">newService</db:code> parameter contains the UUID of the found service.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#discoverServices">discoverServices</db:link>()</db:member>
<db:member><db:link xlink:href="qlowenergycontroller.xml#discoveryFinished">discoveryFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="services">
<db:title>QList&lt;QBluetoothUuid&gt; QLowEnergyController::services() const</db:title>
<db:para>Returns the list of services offered by the remote device.</db:para>
<db:para>The list contains all primary and secondary services.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#createServiceObject">createServiceObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRemoteAddressType">
<db:title>void QLowEnergyController::setRemoteAddressType(QLowEnergyController::RemoteAddressType <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Sets the remote address <db:code role="parameter">type</db:code>. The type is required to connect to the remote Bluetooth Low Energy device.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#remoteAddressType">remoteAddressType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state">
<db:title>QLowEnergyController::ControllerState QLowEnergyController::state() const</db:title>
<db:para>Returns the current state of the controller.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#stateChanged">stateChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QLowEnergyController::stateChanged(QLowEnergyController::ControllerState <db:emphasis>state</db:emphasis>)</db:title>
<db:para>This signal is emitted when the controller's state changes. The new <db:code role="parameter">state</db:code> can also be retrieved via <db:link xlink:href="qlowenergycontroller.xml#state">state</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QLowEnergyController</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="QLowEnergyController">
<db:title>[explicit, deprecated] QLowEnergyController::QLowEnergyController(const QBluetoothAddress &amp;<db:emphasis>remoteDevice</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Constructs a new instance of this class with <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The <db:code role="parameter">remoteDevice</db:code> must contain the address of the remote Bluetooth Low Energy device to which this object should attempt to connect later on.</db:para>
<db:para>The controller uses the local default Bluetooth adapter for the connection management.</db:para>
</db:section>
<db:section xml:id="QLowEnergyController-2">
<db:title>[explicit, deprecated] QLowEnergyController::QLowEnergyController(const QBluetoothAddress &amp;<db:emphasis>remoteDevice</db:emphasis>, const QBluetoothAddress &amp;<db:emphasis>localDevice</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Constructs a new instance of this class with <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The <db:code role="parameter">remoteDevice</db:code> must contain the address of the remote Bluetooth Low Energy device to which this object should attempt to connect later on.</db:para>
<db:para>The connection is established via <db:code role="parameter">localDevice</db:code>. If <db:code role="parameter">localDevice</db:code> is invalid, the local default device is automatically selected. If <db:code role="parameter">localDevice</db:code> specifies a local device that is not a local Bluetooth adapter, <db:link xlink:href="qlowenergycontroller.xml#error">error</db:link>() is set to <db:link xlink:href="qlowenergycontroller.xml#Error-enum">InvalidBluetoothAdapterError</db:link> once <db:link xlink:href="qlowenergycontroller.xml#connectToDevice">connectToDevice</db:link>() is called.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
