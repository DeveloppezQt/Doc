<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Controls - Contact List</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A QML app using Qt Quick Controls and a C++ class that implements a simple contact list.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The <db:emphasis>Contact List Example</db:emphasis> shows how to integrate a C++ backend in a way that is compatible with Qt Quick Designer. For the declarative parts of the UI, .ui.qml files are used that can be edited visually in the Qt Quick Designer.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-contactlist.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="c-backend">
<db:title>C++ Backend</db:title>
<db:para>The contact list application allows the user to add, edit, and remove contacts. The actual implementation is done in C++ and exposed as a <db:link xlink:href="qabstractlistmodel.xml">QAbstractListModel</db:link>.</db:para>
<db:para>The ContactModel C++ class is registered under a namespace and later imported and instantiated by <db:emphasis>MainForm.ui.qml</db:emphasis>. For more information about registering C++ classes as QML types, see <db:link xlink:href="qtqml-cppintegration-definetypes.xml">Defining QML Types from C++</db:link>.</db:para>
<db:programlisting language="cpp">#include &amp;lt;QtQml/qqml.h&amp;gt;
...
qmlRegisterType&amp;lt;ContactModel&amp;gt;(&quot;Backend&quot;, 1, 0, &quot;ContactModel&quot;);
...
</db:programlisting>
</db:section>
<db:section xml:id="designer-support">
<db:title>Designer Support</db:title>
<db:para>In the designer subdirectory, we create a plugin that replaces the ContactModel in Qt Quick Designer. For this to work we add the following line to <db:emphasis>contactlist.pro</db:emphasis>.</db:para>
<db:programlisting language="cpp">QML_DESIGNER_IMPORT_PATH = $$PWD/designer
</db:programlisting>
<db:para>Because Qt Quick Designer cannot instantiate the ContactModel C++ class, we define a mockup using a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link>. This ensures that the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> using the model shows something in Qt Quick Designer.</db:para>
</db:section>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quickcontrols/contactlist?h=6.6">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
