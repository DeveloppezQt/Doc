<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Event Transitions Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Event Transitions example shows how to use event transitions, a feature of <db:link xlink:href="statemachine-api.xml">The State Machine Framework</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">class Window : public QWidget
{
public:
    Window(QWidget *parent = 0)
        : QWidget(parent)
    {
        QPushButton *button = new QPushButton(this);
        button-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);

        QVBoxLayout *layout = new QVBoxLayout;
        layout-&gt;addWidget(button);
        layout-&gt;setContentsMargins(80, 80, 80, 80);
        setLayout(layout);
</db:programlisting>
<db:para>The Window class's constructors begins by creating a button.</db:para>
<db:programlisting language="cpp">        QStateMachine *machine = new QStateMachine(this);

        QState *s1 = new QState();
        s1-&gt;assignProperty(button, &quot;text&quot;, &quot;Outside&quot;);

        QState *s2 = new QState();
        s2-&gt;assignProperty(button, &quot;text&quot;, &quot;Inside&quot;);
</db:programlisting>
<db:para>Two states, s1 and s2, are created; upon entry they will assign &quot;Outside&quot; and &quot;Inside&quot; to the button's text, respectively.</db:para>
<db:programlisting language="cpp">        QEventTransition *enterTransition = new QEventTransition(button, QEvent::Enter);
        enterTransition-&gt;setTargetState(s2);
        s1-&gt;addTransition(enterTransition);
</db:programlisting>
<db:para>When the button receives an event of type <db:link xlink:href="qevent.xml#Type-enum">QEvent::Enter</db:link> and the state machine is in state s1, the machine will transition to state s2.</db:para>
<db:programlisting language="cpp">        QEventTransition *leaveTransition = new QEventTransition(button, QEvent::Leave);
        leaveTransition-&gt;setTargetState(s1);
        s2-&gt;addTransition(leaveTransition);
</db:programlisting>
<db:para>When the button receives an event of type <db:link xlink:href="qevent.xml#Type-enum">QEvent::Leave</db:link> and the state machine is in state s2, the machine will transition back to state s1.</db:para>
<db:programlisting language="cpp">        QState *s3 = new QState();
        s3-&gt;assignProperty(button, &quot;text&quot;, &quot;Pressing...&quot;);

        QEventTransition *pressTransition = new QEventTransition(button, QEvent::MouseButtonPress);
        pressTransition-&gt;setTargetState(s3);
        s2-&gt;addTransition(pressTransition);

        QEventTransition *releaseTransition = new QEventTransition(button, QEvent::MouseButtonRelease);
        releaseTransition-&gt;setTargetState(s2);
        s3-&gt;addTransition(releaseTransition);
</db:programlisting>
<db:para>Next, the state s3 is created. s3 will be entered when the button receives an event of type <db:link xlink:href="qevent.xml#Type-enum">QEvent::MouseButtonPress</db:link> and the state machine is in state s2. When the button receives an event of type <db:link xlink:href="qevent.xml#Type-enum">QEvent::MouseButtonRelease</db:link> and the state machine is in state s3, the machine will transition back to state s2.</db:para>
<db:programlisting language="cpp">        machine-&gt;addState(s1);
        machine-&gt;addState(s2);
        machine-&gt;addState(s3);

        machine-&gt;setInitialState(s1);
        machine-&gt;start();
    }
};
</db:programlisting>
<db:para>Finally, the states are added to the machine as top-level states, the initial state is set to be s1 (&quot;Outside&quot;), and the machine is started.</db:para>
<db:programlisting language="cpp">int main(int argc, char **argv)
{
    QApplication app(argc, argv);
    Window window;
    window.resize(300, 300);
    window.show();

    return app.exec();
}
</db:programlisting>
<db:para>The main() function constructs a Window object and shows it.</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="statemachine/eventtransitions/eventtransitions.pro">statemachine/eventtransitions/eventtransitions.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="statemachine/eventtransitions/main.cpp">statemachine/eventtransitions/main.cpp</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
