<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Quick Items Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates the use of Qt Quick Items in Quick 3D scene.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2020 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick3D

Window {
    width: 800
    height: 480
    visible: true
    title: qsTr(&quot;Quick Items Example&quot;)

    View3D {
        anchors.fill: parent
        environment: SceneEnvironment {
            clearColor: &quot;#808080&quot;
            backgroundMode: SceneEnvironment.Color
            antialiasingMode: SceneEnvironment.MSAA
            antialiasingQuality: SceneEnvironment.High
        }

        PerspectiveCamera {
            id: camera
            property real cameraAnimation: 1
            SequentialAnimation {
                loops: Animation.Infinite
                running: true
                NumberAnimation {
                    target: camera
                    property: &quot;cameraAnimation&quot;
                    to: -1
                    duration: 5000
                    easing.type: Easing.InOutQuad
                }
                NumberAnimation {
                    target: camera
                    property: &quot;cameraAnimation&quot;
                    to: 1
                    duration: 5000
                    easing.type: Easing.InOutQuad
                }
            }
            position: Qt.vector3d(200 * cameraAnimation, 300, 500)
            eulerRotation.x: -20
            eulerRotation.y: 20 * cameraAnimation
        }

        DirectionalLight {
            eulerRotation: Qt.vector3d(-135, -110, 0)
            brightness: 1
        }

        SpotLight {
            position: Qt.vector3d(0, 500, 600)
            eulerRotation.x: -45
            brightness: 30
        }

        Model {
            source: &quot;#Rectangle&quot;
            y: -500
            scale: Qt.vector3d(12, 12, 12)
            eulerRotation.x: -90
            materials: DefaultMaterial {
                diffuseColor: Qt.rgba(0.5, 0.5, 0.5, 1.0)
            }
        }
        Model {
            source: &quot;#Rectangle&quot;
            x: -600
            scale: Qt.vector3d(12, 10, 12)
            eulerRotation.y: 90
            materials: DefaultMaterial {
                diffuseColor: Qt.rgba(0.8, 0.8, 0.6, 1.0)
            }
        }
        Model {
            source: &quot;#Rectangle&quot;
            z: -600
            scale: Qt.vector3d(12, 10, 12)
            materials: DefaultMaterial {
                diffuseColor: Qt.rgba(0.8, 0.8, 0.6, 1.0)
            }
        }

        Node {
            position: Qt.vector3d(0, 100, -120)
            Item {
                width: 400
                height: 400
                anchors.centerIn: parent
                Rectangle {
                    anchors.fill: parent
                    opacity: 0.4
                    color: &quot;#202020&quot;
                    radius: 10
                    border.width: 2
                    border.color: &quot;#f0f0f0&quot;
                }
                Text {
                    anchors.top: parent.top
                    anchors.topMargin: 10
                    anchors.horizontalCenter: parent.horizontalCenter
                    font.pixelSize: 20
                    color: &quot;#e0e0e0&quot;
                    style: Text.Raised
                    text: qsTr(&quot;Background Item&quot;)
                }
                Image {
                    anchors.centerIn: parent
                    source: &quot;Built_with_Qt_RGB_logo_vertical&quot;
                }
            }
        }

        Node {
            position: Qt.vector3d(0, 150, 100)
            SequentialAnimation on x {
                loops: Animation.Infinite
                NumberAnimation {
                    to: -200
                    duration: 1500
                    easing.type: Easing.InOutQuad
                }
                NumberAnimation {
                    to: 200
                    duration: 1500
                    easing.type: Easing.InOutQuad
                }
            }
            NumberAnimation on eulerRotation.z {
                loops: Animation.Infinite
                from: 0
                to: 360
                duration: 4000
                easing.type: Easing.InOutBack
            }
            Item {
                width: 400
                height: 400
                anchors.centerIn: parent
                // This allows rendering into offscreen surface and caching it.
                layer.enabled: true
                Rectangle {
                    x: 150
                    y: 100
                    width: 100
                    height: 100
                    radius: 50
                    color: &quot;#80808020&quot;
                    border.color: &quot;black&quot;
                    border.width: 2
                }
                Rectangle {
                    x: 90
                    y: 200
                    width: 100
                    height: 100
                    radius: 50
                    color: &quot;#80808020&quot;
                    border.color: &quot;black&quot;
                    border.width: 2
                }
                Rectangle {
                    x: 210
                    y: 200
                    width: 100
                    height: 100
                    radius: 50
                    color: &quot;#80808020&quot;
                    border.color: &quot;black&quot;
                    border.width: 2
                }
            }
        }

        Node {
            position: Qt.vector3d(0, 80, 250)
            Text {
                anchors.centerIn: parent
                width: 300
                wrapMode: Text.WordWrap
                horizontalAlignment: Text.AlignJustify
                font.pixelSize: 14
                color: &quot;#e0e0e0&quot;
                style: Text.Raised
                text: &quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod &quot; +
                      &quot;tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim &quot; +
                      &quot;veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea &quot; +
                      &quot;commodo consequat.&quot;
                SequentialAnimation on opacity {
                    loops: Animation.Infinite
                    NumberAnimation {
                        to: 0
                        duration: 1500
                        easing.type: Easing.InOutQuad
                    }
                    NumberAnimation {
                        to: 1
                        duration: 1500
                        easing.type: Easing.InOutQuad
                    }
                }
            }
        }

        Node {
            position: Qt.vector3d(0, 800, 0)
            SequentialAnimation on eulerRotation.x {
                loops: Animation.Infinite
                NumberAnimation {
                    to: 20
                    duration: 3500
                    easing.type: Easing.InOutQuad
                }
                NumberAnimation {
                    to: -20
                    duration: 3500
                    easing.type: Easing.InOutQuad
                }
            }
            Model {
                source: &quot;#Cylinder&quot;
                y: -300
                scale: Qt.vector3d(0.1, 6.1, 0.1)
                materials: DefaultMaterial {
                    diffuseColor: Qt.rgba(0.9, 0.9, 0.9, 1.0)
                }
            }
            Model {
                source: &quot;#Sphere&quot;
                y: -700
                scale: Qt.vector3d(2, 2, 2)
                materials: DefaultMaterial {
                    diffuseColor: Qt.rgba(0.4, 0.4, 0.4, 1.0)
                }
            }
        }
    }
}

</db:programlisting>
</db:article>
