<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_add_executable</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Creates and finalizes an application target of a platform-specific type.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="qt6-add-executable"/>
<db:note>
<db:para>This command is in technology preview and may change in future releases.</db:para>
</db:note>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt_add_executable(target
                  [WIN32] [MACOSX_BUNDLE]
                  [MANUAL_FINALIZATION]
                  sources...)

qt6_add_executable(target
                   [WIN32] [MACOSX_BUNDLE]
                   [MANUAL_FINALIZATION]
                   sources...)
</db:programlisting>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para>This command performs the following tasks:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Create a CMake target of the appropriate type for the target platform.</db:para>
</db:listitem>
<db:listitem>
<db:para>Link the target to the Qt::Core library.</db:para>
</db:listitem>
<db:listitem>
<db:para>Handle finalization of the CMake target.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="target-creation">
<db:title>Target Creation</db:title>
<db:para>On all platforms except Android, an executable target will be created. All arguments will be passed through to the standard CMake add_executable() command, except MANUAL_FINALIZATION (if present). On Android, a MODULE library will be created and any WIN32 or MACOSX_BUNDLE options will be ignored. Some target properties will also be set for Android:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The SUFFIX target property will be set to give the library file name an architecture-specific suffix.</db:para>
</db:listitem>
<db:listitem>
<db:para>Various &lt;lang&gt;_VISIBILITY_PRESET target properties will be set to default to ensure that the main() function is visible in the resultant binary.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="linking-qt-core">
<db:title>Linking Qt::Core</db:title>
<db:para>Since all Qt applications need to link to the Qt::Core library, this is done for you as a convenience.</db:para>
</db:section>
<db:section xml:id="finalization">
<db:title>Finalization</db:title>
<db:para>After a target is created, further processing or <db:emphasis>finalization</db:emphasis> steps are commonly needed. The steps to perform depend on the platform and on various properties of the target. The finalization processing is implemented by the <db:link xlink:href="qt-finalize-executable.xml#qt6-finalize-executable">qt_finalize_executable()</db:link> command.</db:para>
<db:para>Finalization can occur either as part of this call or be deferred to sometime after this command returns. When using CMake 3.19 or later, finalization is automatically deferred to the end of the current directory scope. This gives the caller an opportunity to modify properties of the created target before it is finalized. When using CMake versions earlier than 3.19, automatic deferral isn't supported. In that case, finalization is performed immediately before this command returns.</db:para>
<db:para>Regardless of the CMake version, the MANUAL_FINALIZATION keyword can be given to indicate that you will explicitly call <db:link xlink:href="qt-finalize-executable.xml#qt6-finalize-executable">qt_finalize_executable()</db:link> yourself instead at some later time. In general, MANUAL_FINALIZATION should not be needed unless the project has to support CMake 3.18 or earlier.</db:para>
</db:section>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:para>In the following simple case, finalization is handled automatically. If using a CMake version earlier than 3.19, finalization will be performed immediately as part of the call. When using CMake 3.19 or later, finalization will occur at the end of the current directory scope.</db:para>
<db:programlisting language="cpp">qt_add_executable(simpleapp main.cpp)
</db:programlisting>
<db:para>The following example shows a scenario where finalization must be deferred. The OUTPUT_NAME target property affects deployment settings on Android, but those settings are written out as part of finalizing the target. In order to support using CMake versions earlier than 3.19, we take over responsibility for finalizing the target by adding the MANUAL_FINALIZATION keyword.</db:para>
<db:programlisting language="cpp">qt_add_executable(complexapp MANUAL_FINALIZATION complex.cpp)
set_target_properties(complexapp PROPERTIES OUTPUT_NAME Complexify)
qt_finalize_executable(complexapp)
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt-finalize-executable.xml#qt6-finalize-executable">qt_finalize_executable()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
