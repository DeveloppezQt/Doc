<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAnyStringView Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qanystringview.xml">QAnyStringView</db:link> class provides a unified view on Latin-1, UTF-8, or UTF-16 strings with a read-only subset of the <db:link xlink:href="qstring.xml">QString</db:link> API.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAnyStringView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAnyStringView is part of <db:simplelist><db:member>tools</db:member><db:member>string-processing</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qanystringview.xml">QAnyStringView</db:link> references a contiguous portion of a string it does not own. It acts as an interface type to all kinds of strings, without the need to construct a <db:link xlink:href="qstring.xml">QString</db:link> first.</db:para>
<db:para>Unlike <db:link xlink:href="qstringview.xml">QStringView</db:link> and <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link>, <db:link xlink:href="qanystringview.xml">QAnyStringView</db:link> can hold strings of any of the following encodings: UTF-8, UTF-16, and Latin-1. The latter is supported because Latin-1, unlike UTF-8, can be efficiently compared to UTF-16 data: a length mismatch already means the strings cannot be equal. This is not true for UTF-8/UTF-16 comparisons, because UTF-8 is a variable-length encoding.</db:para>
<db:para>The string may be represented as an array (or an array-compatible data-structure such as <db:link xlink:href="qstring.xml">QString</db:link>, std::basic_string, etc.) of <db:code>char</db:code>, <db:code>char8_t</db:code>, <db:link xlink:href="qchar.xml">QChar</db:link>, <db:code>ushort</db:code>, <db:code>char16_t</db:code> or (on platforms, such as Windows, where it is a 16-bit type) <db:code>wchar_t</db:code>.</db:para>
<db:para><db:link xlink:href="qanystringview.xml">QAnyStringView</db:link> is designed as an interface type; its main use-case is as a function parameter type. When QAnyStringViews are used as automatic variables or data members, care must be taken to ensure that the referenced string data (for example, owned by a <db:link xlink:href="qstring.xml">QString</db:link>) outlives the <db:link xlink:href="qanystringview.xml">QAnyStringView</db:link> on all code paths, lest the string view ends up referencing deleted data.</db:para>
<db:para>When used as an interface type, <db:link xlink:href="qanystringview.xml">QAnyStringView</db:link> allows a single function to accept a wide variety of string data sources. One function accepting <db:link xlink:href="qanystringview.xml">QAnyStringView</db:link> thus replaces five function overloads (taking <db:link xlink:href="qstring.xml">QString</db:link>, <db:code>(const QChar*, qsizetype)</db:code>, <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link>, <db:link xlink:href="qlatin1stringview.xml">QLatin1StringView</db:link> (but see above), and <db:link xlink:href="qchar.xml">QChar</db:link>), while at the same time enabling even more string data sources to be passed to the function, such as <db:code>u8&quot;Hello World&quot;</db:code>, a <db:code>char8_t</db:code> string literal.</db:para>
<db:para>Like elsewhere in Qt, <db:link xlink:href="qanystringview.xml">QAnyStringView</db:link> assumes <db:code>char</db:code> data is encoded in UTF-8, unless it is presented as a <db:link xlink:href="qlatin1stringview.xml">QLatin1StringView</db:link>.</db:para>
<db:para>Since Qt 6.4, however, UTF-8 string literals that are pure US-ASCII are automatically stored as Latin-1. This is a compile-time check with no runtime overhead. The feature requires compiling in C++20, or with a recent GCC.</db:para>
<db:para>QAnyStringViews should be passed by value, not by reference-to-const:</db:para>
<db:programlisting language="cpp">    void myfun1(QAnyStringView sv);        // preferred
    void myfun2(const QAnyStringView &amp;amp;sv); // compiles and works, but slower
</db:programlisting>
<db:para><db:link xlink:href="qanystringview.xml">QAnyStringView</db:link> can also be used as the return value of a function, but this is not recommended. <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link> or <db:link xlink:href="qstringview.xml">QStringView</db:link> are better suited as function return values. If you call a function returning <db:link xlink:href="qanystringview.xml">QAnyStringView</db:link>, take extra care to not keep the <db:link xlink:href="qanystringview.xml">QAnyStringView</db:link> around longer than the function promises to keep the referenced string data alive. If in doubt, obtain a strong reference to the data by calling <db:link xlink:href="qanystringview.xml#toString">toString</db:link>() to convert the <db:link xlink:href="qanystringview.xml">QAnyStringView</db:link> into a <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:para><db:link xlink:href="qanystringview.xml">QAnyStringView</db:link> is a <db:emphasis>Literal Type</db:emphasis>.</db:para>
<db:section xml:id="compatible-character-types">
<db:title>Compatible Character Types</db:title>
<db:para><db:link xlink:href="qanystringview.xml">QAnyStringView</db:link> accepts strings over a variety of character types:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>char</db:code> (both signed and unsigned)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>char8_t</db:code> (C++20 only)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>char16_t</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>wchar_t</db:code> (where it's a 16-bit type, e.g. Windows)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>ushort</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QChar</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The 8-bit character types are interpreted as UTF-8 data (except when presented as a <db:link xlink:href="qlatin1stringview.xml">QLatin1StringView</db:link>) while the 16-bit character types are interpreted as UTF-16 data in host byte order (the same as <db:link xlink:href="qstring.xml">QString</db:link>).</db:para>
</db:section>
<db:section xml:id="sizes-and-sub-strings">
<db:title>Sizes and Sub-Strings</db:title>
<db:para>All sizes and positions in <db:link xlink:href="qanystringview.xml">QAnyStringView</db:link> functions are in the encoding's code units (that is, UTF-16 surrogate pairs count as two for the purposes of these functions, the same as in <db:link xlink:href="qstring.xml">QString</db:link>, and UTF-8 multibyte sequences count as two, three or four, depending on their length).</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link></db:member>
<db:member><db:link xlink:href="qstringview.xml">QStringView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="difference_type-typedef">
<db:title>QAnyStringView::difference_type</db:title>
<db:typedefsynopsis>
<db:typedefname>difference_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>std::ptrdiff_t</db:code>. Provided for compatibility with the STL.</db:para>
</db:section>
<db:section xml:id="size_type-typedef">
<db:title>QAnyStringView::size_type</db:title>
<db:typedefsynopsis>
<db:typedefname>size_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for qsizetype. Provided for compatibility with the STL.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAnyStringView-1">
<db:title>[constexpr] QAnyStringView::QAnyStringView()</db:title>
<db:constructorsynopsis>
<db:methodname>QAnyStringView</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QAnyStringView()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null string view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QAnyStringView-2">
<db:title>[constexpr] QAnyStringView::QAnyStringView(<db:emphasis>std::nullptr_t</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAnyStringView</db:methodname>
<db:methodparam>
<db:type>std::nullptr_t</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QAnyStringView(std::nullptr_t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null string view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QAnyStringView-3">
<db:title>[constexpr] QAnyStringView::QAnyStringView(const Char *<db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>len</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAnyStringView</db:methodname>
<db:methodparam>
<db:type>const Char *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>len</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QAnyStringView(const Char *str, qsizetype len)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string view on <db:code role="parameter">str</db:code> with length <db:code role="parameter">len</db:code>.</db:para>
<db:para>The range <db:code>[str,len)</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>Passing <db:code>nullptr</db:code> as <db:code role="parameter">str</db:code> is safe if <db:code role="parameter">len</db:code> is 0, too, and results in a null string view.</db:para>
<db:para>The behavior is undefined if <db:code role="parameter">len</db:code> is negative or, when positive, if <db:code role="parameter">str</db:code> is <db:code>nullptr</db:code>.</db:para>
<db:para>This constructor only participates in overload resolution if <db:code>Char</db:code> is a compatible character type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#compatible-character-types">Compatible Character Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QAnyStringView-4">
<db:title>[constexpr] QAnyStringView::QAnyStringView(const Char *<db:emphasis>first</db:emphasis>, const Char *<db:emphasis>last</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAnyStringView</db:methodname>
<db:methodparam>
<db:type>const Char *</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const Char *</db:type>
<db:parameter>last</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QAnyStringView(const Char *first, const Char *last)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string view on <db:code role="parameter">first</db:code> with length (<db:code role="parameter">last</db:code> - <db:code role="parameter">first</db:code>).</db:para>
<db:para>The range <db:code>[first,last)</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>Passing <db:code>nullptr</db:code> as <db:code role="parameter">first</db:code> is safe if <db:code role="parameter">last</db:code> is <db:code>nullptr</db:code>, too, and results in a null string view.</db:para>
<db:para>The behavior is undefined if <db:code role="parameter">last</db:code> precedes <db:code role="parameter">first</db:code>, or <db:code role="parameter">first</db:code> is <db:code>nullptr</db:code> and <db:code role="parameter">last</db:code> is not.</db:para>
<db:para>This constructor only participates in overload resolution if <db:code>Char</db:code> is a compatible character type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#compatible-character-types">Compatible Character Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QAnyStringView-5">
<db:title>[constexpr] QAnyStringView::QAnyStringView(const Char (&amp;)[N] <db:emphasis>string</db:emphasis> = N)</db:title>
<db:constructorsynopsis>
<db:methodname>QAnyStringView</db:methodname>
<db:methodparam>
<db:type>const Char (&amp;)[N]</db:type>
<db:parameter>string</db:parameter>
<db:initializer>N</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QAnyStringView(const Char (&amp;)[N] string)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string view on the character string literal <db:code role="parameter">string</db:code>. The view covers the array until the first <db:code>Char(0)</db:code> is encountered, or <db:code>N</db:code>, whichever comes first. If you need the full array, use fromArray() instead.</db:para>
<db:para><db:code role="parameter">string</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>This constructor only participates in overload resolution if <db:code role="parameter">string</db:code> is an actual array and <db:code>Char</db:code> is a compatible character type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#compatible-character-types">Compatible Character Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QAnyStringView-6">
<db:title>[constexpr] QAnyStringView::QAnyStringView(const Char *<db:emphasis>str</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAnyStringView</db:methodname>
<db:methodparam>
<db:type>const Char *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QAnyStringView(const Char *str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string view on <db:code role="parameter">str</db:code>. The length is determined by scanning for the first <db:code>Char(0)</db:code>.</db:para>
<db:para><db:code role="parameter">str</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>Passing <db:code>nullptr</db:code> as <db:code role="parameter">str</db:code> is safe and results in a null string view.</db:para>
<db:para>This constructor only participates in overload resolution if <db:code role="parameter">str</db:code> is not an array and if <db:code>Char</db:code> is a compatible character type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#compatible-character-types">Compatible Character Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QAnyStringView-7">
<db:title>QAnyStringView::QAnyStringView(const QByteArray &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAnyStringView</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QAnyStringView(const QByteArray &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string view on <db:code role="parameter">str</db:code>. The data in <db:code role="parameter">str</db:code> is interpreted as UTF-8.</db:para>
<db:para><db:code>str.data()</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>The string view will be null if and only if <db:code>str.isNull()</db:code>.</db:para>
</db:section>
<db:section xml:id="QAnyStringView-8">
<db:title>QAnyStringView::QAnyStringView(const QString &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAnyStringView</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">QAnyStringView(const QString &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string view on <db:code role="parameter">str</db:code>.</db:para>
<db:para><db:code>str.data()</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>The string view will be null if and only if <db:code>str.isNull()</db:code>.</db:para>
</db:section>
<db:section xml:id="QAnyStringView-10">
<db:title>[constexpr] QAnyStringView::QAnyStringView(const Container &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAnyStringView</db:methodname>
<db:methodparam>
<db:type>const Container &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">QAnyStringView(const Container &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string view on <db:code role="parameter">str</db:code>. The length is taken from <db:code>std::size(str)</db:code>.</db:para>
<db:para><db:code>std::data(str)</db:code> must remain valid for the lifetime of this string view object.</db:para>
<db:para>This constructor only participates in overload resolution if <db:code>Container</db:code> is a container with a compatible character type as <db:code>value_type</db:code>.</db:para>
<db:para>The string view will be empty if and only if <db:code>std::size(str) == 0</db:code>. It is unspecified whether this constructor can result in a null string view (<db:code>std::data(str)</db:code> would have to return <db:code>nullptr</db:code> for this).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="back">
<db:title>[constexpr] QChar QAnyStringView::back() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QChar</db:type>
<db:methodname>back</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QChar back() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the last character in the string view.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:warning>
<db:para>Calling this function on an empty string view constitutes undefined behavior.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#front">front</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#sizes-and-sub-strings">Sizes and Sub-Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="chop">
<db:title>[constexpr, since 6.5] void QAnyStringView::chop(qsizetype <db:emphasis>n</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>chop</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void chop(qsizetype n)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Truncates this string view by <db:code role="parameter">n</db:code> code points.</db:para>
<db:para>Same as <db:code>*this = first(size() - n)</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">n</db:code> &lt; 0 or <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qanystringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#truncate">truncate</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#sizes-and-sub-strings">Sizes and Sub-Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="chopped">
<db:title>[constexpr, since 6.5] QAnyStringView QAnyStringView::chopped(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAnyStringView</db:type>
<db:methodname>chopped</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAnyStringView chopped(qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the substring of length <db:link xlink:href="qanystringview.xml#size">size</db:link>() - <db:code role="parameter">n</db:code> starting at the beginning of this object.</db:para>
<db:para>Same as <db:code>first(size() - n)</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">n</db:code> &lt; 0 or <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qanystringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#truncate">truncate</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#sizes-and-sub-strings">Sizes and Sub-Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compare">
<db:title>[static] int QAnyStringView::compare(QAnyStringView <db:emphasis>lhs</db:emphasis>, QAnyStringView <db:emphasis>rhs</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>compare</db:methodname>
<db:methodparam>
<db:type>QAnyStringView</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAnyStringView</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int compare(QAnyStringView lhs, QAnyStringView rhs, Qt::CaseSensitivity cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Compares the string view <db:code role="parameter">lhs</db:code> with the string view <db:code role="parameter">rhs</db:code> and returns a negative integer if <db:code role="parameter">lhs</db:code> is less than <db:code role="parameter">rhs</db:code>, a positive integer if it is greater than <db:code role="parameter">rhs</db:code>, and zero if they are equal.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the comparison is case sensitive; otherwise the comparison is case-insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#operator-eq-eq">operator==</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#operator-lt">operator&lt;</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#operator-gt">operator&gt;</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>[constexpr] const void *QAnyStringView::data() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const void *</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const void * data() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const pointer to the first character in the string view.</db:para>
<db:note>
<db:para>The character array represented by the return value is <db:emphasis>not</db:emphasis> null-terminated.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#size_bytes">size_bytes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="empty">
<db:title>[constexpr] bool QAnyStringView::empty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>empty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool empty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether this string view is empty - that is, whether <db:code>size() == 0</db:code>.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="first">
<db:title>[constexpr, since 6.5] QAnyStringView QAnyStringView::first(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAnyStringView</db:type>
<db:methodname>first</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAnyStringView first(qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string view that contains the first <db:code role="parameter">n</db:code> code points of this string view.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">n</db:code> &lt; 0 or <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qanystringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#truncate">truncate</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#sizes-and-sub-strings">Sizes and Sub-Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="front">
<db:title>[constexpr] QChar QAnyStringView::front() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QChar</db:type>
<db:methodname>front</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QChar front() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the first character in the string view.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:warning>
<db:para>Calling this function on an empty string view constitutes undefined behavior.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#back">back</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#sizes-and-sub-strings">Sizes and Sub-Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>[constexpr] bool QAnyStringView::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether this string view is empty - that is, whether <db:code>size() == 0</db:code>.</db:para>
<db:para>This function is provided for compatibility with other Qt containers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#empty">empty</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>[constexpr] bool QAnyStringView::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether this string view is null - that is, whether <db:code>data() == nullptr</db:code>.</db:para>
<db:para>This functions is provided for compatibility with other Qt containers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#empty">empty</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="last">
<db:title>[constexpr, since 6.5] QAnyStringView QAnyStringView::last(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAnyStringView</db:type>
<db:methodname>last</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAnyStringView last(qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string view that contains the last <db:code role="parameter">n</db:code> code points of this string view.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">n</db:code> &lt; 0 or <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qanystringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#truncate">truncate</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#sizes-and-sub-strings">Sizes and Sub-Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="length">
<db:title>[constexpr] qsizetype QAnyStringView::length() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>length</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype length() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qanystringview.xml#size">size</db:link>().</db:para>
<db:para>This function is provided for compatibility with other Qt containers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>[constexpr] qsizetype QAnyStringView::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size of this string view, in the encoding's code points.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#empty">empty</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#size_bytes">size_bytes</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#sizes-and-sub-strings">Sizes and Sub-Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size_bytes">
<db:title>[constexpr] qsizetype QAnyStringView::size_bytes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>size_bytes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype size_bytes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size of this string view, but in bytes, not code-points.</db:para>
<db:para>You can use this function together with <db:link xlink:href="qanystringview.xml#data">data</db:link>() for hashing or serialization.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliced">
<db:title>[constexpr, since 6.5] QAnyStringView QAnyStringView::sliced(qsizetype <db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAnyStringView</db:type>
<db:methodname>sliced</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAnyStringView sliced(qsizetype pos) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string view starting at position <db:code role="parameter">pos</db:code> in this object, and extending to its end.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">pos</db:code> &lt; 0 or <db:code role="parameter">pos</db:code> &gt; <db:link xlink:href="qanystringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#truncate">truncate</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#sizes-and-sub-strings">Sizes and Sub-Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliced-1">
<db:title>[constexpr, since 6.5] QAnyStringView QAnyStringView::sliced(qsizetype <db:emphasis>pos</db:emphasis>, qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAnyStringView</db:type>
<db:methodname>sliced</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QAnyStringView sliced(qsizetype pos, qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string view containing <db:code role="parameter">n</db:code> code points of this string view, starting at position <db:code role="parameter">pos</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">pos</db:code> &lt; 0, <db:code role="parameter">n</db:code> &lt; 0, or <db:code role="parameter">pos</db:code> + <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qanystringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#truncate">truncate</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#sizes-and-sub-strings">Sizes and Sub-Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString">
<db:title>QString QAnyStringView::toString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a deep copy of this string view's data as a <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:para>The return value will be a null <db:link xlink:href="qstring.xml">QString</db:link> if and only if this string view is null.</db:para>
</db:section>
<db:section xml:id="truncate">
<db:title>[constexpr, since 6.5] void QAnyStringView::truncate(qsizetype <db:emphasis>n</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>truncate</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void truncate(qsizetype n)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Truncates this string view to <db:code role="parameter">n</db:code> code points.</db:para>
<db:para>Same as <db:code>*this = first(n)</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">n</db:code> &lt; 0 or <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qanystringview.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#sizes-and-sub-strings">Sizes and Sub-Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visit">
<db:title>[constexpr] decltype(auto) QAnyStringView::visit(Visitor &amp;&amp;<db:emphasis>v</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>decltype(auto)</db:type>
<db:methodname>visit</db:methodname>
<db:methodparam>
<db:type>Visitor &amp;&amp;</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">decltype(auto) visit(Visitor &amp;&amp;v) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls <db:code role="parameter">v</db:code> with either a <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link>, <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link>, or <db:link xlink:href="qstringview.xml">QStringView</db:link>, depending on the encoding of the string data this string-view references.</db:para>
<db:para>This is how most functions taking <db:link xlink:href="qanystringview.xml">QAnyStringView</db:link> fork off into per-encoding functions:</db:para>
<db:programlisting language="cpp">void processImpl(QLatin1String s) { ~~~ }
void processImpl(QUtf8StringView s) { ~~~ }
void processImpl(QStringView s) { ~~~ }

void process(QAnyStringView s)
{
    s.visit([](auto s) { processImpl(s); });
}
</db:programlisting>
<db:para>Here, we're reusing the same name, <db:code>s</db:code>, for both the <db:link xlink:href="qanystringview.xml">QAnyStringView</db:link> object, as well as the lambda's parameter. This is idiomatic code and helps track the identity of the objects through visit() calls, for example in more complex situations such as</db:para>
<db:programlisting language="cpp">bool equal(QAnyStringView lhs, QAnyStringView rhs)
{
    // assuming operator==(QAnyStringView, QAnyStringView) didn't, yet, exist:
    return lhs.visit([rhs](auto lhs) {
        rhs.visit([lhs](auto rhs) {
            return lhs == rhs;
        });
    });
}
</db:programlisting>
<db:para>visit() requires that all lambda instantiations have the same return type. If they differ, you get a compile error, even if there is a common type. To fix, you can use explicit return types on the lambda, or cast in the return statements:</db:para>
<db:programlisting language="cpp">// wrong:
QAnyStringView firstHalf(QAnyStringView input)
{
    return input.visit([](auto input) {   // ERROR: lambdas return different types
        return input.sliced(0, input.size() / 2);
    });
}
// correct:
QAnyStringView firstHalf(QAnyStringView input)
{
    return input.visit([](auto input) -&amp;gt; QAnyStringView { // OK, explicit return type
        return input.sliced(0, input.size() / 2);
    });
}
// also correct:
QAnyStringView firstHalf(QAnyStringView input)
{
    return input.visit([](auto input) {
        return QAnyStringView(input.sliced(0, input.size() / 2)); // OK, cast to common type
    });
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(QAnyStringView <db:emphasis>lhs</db:emphasis>, QAnyStringView <db:emphasis>rhs</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-lt">bool operator&lt;(QAnyStringView <db:emphasis>lhs</db:emphasis>, QAnyStringView <db:emphasis>rhs</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-lt-eq">bool operator&lt;=(QAnyStringView <db:emphasis>lhs</db:emphasis>, QAnyStringView <db:emphasis>rhs</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-eq-eq">bool operator==(QAnyStringView <db:emphasis>lhs</db:emphasis>, QAnyStringView <db:emphasis>rhs</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-gt">bool operator&gt;(QAnyStringView <db:emphasis>lhs</db:emphasis>, QAnyStringView <db:emphasis>rhs</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-gt-eq">bool operator&gt;=(QAnyStringView <db:emphasis>lhs</db:emphasis>, QAnyStringView <db:emphasis>rhs</db:emphasis>)</db:bridgehead>
<db:para>Operators that compare <db:code role="parameter">lhs</db:code> to <db:code role="parameter">rhs</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#compare">compare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QAnyStringView</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qanystringview.xml">QAnyStringView</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="left">
<db:title>[constexpr, since 6.5] QAnyStringView QAnyStringView::left(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAnyStringView</db:type>
<db:methodname>left</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAnyStringView left(qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qanystringview.xml#first">first</db:link>() instead in new code.</db:para>
<db:para>Returns the substring of length <db:code role="parameter">n</db:code> starting at position 0 in this object.</db:para>
<db:para>The entire string view is returned if <db:code role="parameter">n</db:code> is greater than or equal to <db:link xlink:href="qanystringview.xml#size">size</db:link>(), or less than zero.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#truncate">truncate</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#sizes-and-sub-strings">Sizes and Sub-Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mid">
<db:title>[constexpr, since 6.5] QAnyStringView QAnyStringView::mid(qsizetype <db:emphasis>pos</db:emphasis>, qsizetype <db:emphasis>n</db:emphasis> = -1) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAnyStringView</db:type>
<db:methodname>mid</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAnyStringView mid(qsizetype pos, qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns the substring of length <db:code role="parameter">n</db:code> starting at position <db:code role="parameter">pos</db:code> in this object.</db:para>
<db:para>Use <db:link xlink:href="qanystringview.xml#sliced">sliced</db:link>() instead in new code.</db:para>
<db:para>Returns an empty string view if <db:code role="parameter">n</db:code> exceeds the length of the string view. If there are less than <db:code role="parameter">n</db:code> code points available in the string view starting at <db:code role="parameter">pos</db:code>, or if <db:code role="parameter">n</db:code> is negative (default), the function returns all code points that are available from <db:code role="parameter">pos</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#truncate">truncate</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#sizes-and-sub-strings">Sizes and Sub-Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="right">
<db:title>[constexpr, since 6.5] QAnyStringView QAnyStringView::right(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAnyStringView</db:type>
<db:methodname>right</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAnyStringView right(qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qanystringview.xml#last">last</db:link>() instead in new code.</db:para>
<db:para>Returns the substring of length <db:code role="parameter">n</db:code> starting at position <db:link xlink:href="qanystringview.xml#size">size</db:link>() - <db:code role="parameter">n</db:code> in this object.</db:para>
<db:para>The entire string view is returned if <db:code role="parameter">n</db:code> is greater than or equal to <db:link xlink:href="qanystringview.xml#size">size</db:link>(), or less than zero.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanystringview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#truncate">truncate</db:link>()</db:member>
<db:member><db:link xlink:href="qanystringview.xml#sizes-and-sub-strings">Sizes and Sub-Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
