<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D Physics - Material Example</db:title>
<db:productname>QtQuick3DPhysics</db:productname>
<db:edition>Qt Quick 3D Physics | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Physics Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates using physical materials.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2022 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause
import QtQuick
import QtQuick3D
import QtQuick3D.Physics
import QtQuick3D.Helpers
import QtQuick.Controls
import QtQuick.Layouts

Window {
    id: appWindow
    width: 800
    height: 600
    visible: true
    title: qsTr(&quot;Qt Quick 3D Physics - Material example&quot;)

    DynamicsWorld {}

    View3D {
        id: viewport
        anchors.fill: parent

        environment: SceneEnvironment {
            antialiasingMode: SceneEnvironment.MSAA
            backgroundMode: SceneEnvironment.Color
            clearColor: &quot;#f0f0f0&quot;
        }

        PerspectiveCamera {
            position: Qt.vector3d(0, 500, 1500)
            eulerRotation : Qt.vector3d(-20, 0, 0)
            clipFar: 10000
            clipNear: 10
        }

        DirectionalLight {
            eulerRotation: Qt.vector3d(-45, 45, 0)
            castsShadow: true
            brightness: 1
            shadowFactor: 100
            shadowMapQuality: Light.ShadowMapQualityVeryHigh
        }

        PhysicsMaterial {
            id: physicsMaterial
            staticFriction: staticFrictionSlider.value
            dynamicFriction: dynamicFrictionSlider.value
            restitution: restitutionSlider.value
        }

        StaticRigidBody {
            eulerRotation: Qt.vector3d(-79, -90, 0)
            scale: Qt.vector3d(20, 30, 100)
            physicsMaterial: physicsMaterial
            collisionShapes: PlaneShape {}
            Model {
                source: &quot;#Rectangle&quot;
                materials: DefaultMaterial {
                    diffuseColor: &quot;green&quot;
                }
            }
        }

        DynamicRigidBody {
            id: box
            physicsMaterial: physicsMaterial
            density: 10
            property var startPosition: Qt.vector3d(700, 300, 0)
            position: startPosition
            Model {
                source: &quot;#Cube&quot;
                materials: PrincipledMaterial {
                    baseColor: &quot;red&quot;
                }
            }
            collisionShapes: BoxShape {}
        }
    }

    Frame {
        background: Rectangle {
            color: &quot;#c0c0c0&quot;
            border.color: &quot;#202020&quot;
        }
        anchors.top: parent.top
        anchors.left: parent.left
        anchors.margins: 10

        ColumnLayout {
            Label {
                text: &quot;Static friction: &quot; + staticFrictionSlider.value.toFixed(2)
            }
            Slider {
                id: staticFrictionSlider
                focusPolicy: Qt.NoFocus
                from: 0
                to: 1
                value: 0.1
            }
            Label {
                text: &quot;Dynamic friction: &quot; + dynamicFrictionSlider.value.toFixed(2)
            }
            Slider {
                id: dynamicFrictionSlider
                focusPolicy: Qt.NoFocus
                from: 0
                to: 1
                value: 0.1
            }
            Label {
                text: &quot;Restitution: &quot; + restitutionSlider.value.toFixed(2)
            }
            Slider {
                id: restitutionSlider
                focusPolicy: Qt.NoFocus
                from: 0
                to: 1
                value: 0.1
            }
            Button {
                id: resetButton
                Layout.alignment: Qt.AlignHCenter
                text: &quot;Reset box&quot;
                onClicked: box.reset(box.startPosition, Qt.vector3d(0, 0, 0))
            }
        }
    }
}

</db:programlisting>
</db:article>
