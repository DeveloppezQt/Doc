<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D Level of Detail</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An overview of the usages of Level of Detail in Qt Quick 3D.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="level-of-detail-lod">
<db:title>Level of Detail (LoD)</db:title>
<db:para>Level of Detail (LoD) refers to the technique of using alternative versions of a 3D model at different distances from the camera. The goal of doing this is to optimize resource usage by using simpler versions of the model when it is far away or a small share of the screen, while using more detailed versions when it is closer or larger portion of screen space. This approach allows for efficient use of GPU resources while maintaining visual fidelity.</db:para>
<db:para>Qt Quick 3D provides both an automatic as well as an explicit level of detail system. The automatic system is based on using a single mesh with multiple levels of detail stored in the mesh file. The explicit system is based on using a <db:link xlink:href="qml-qtquick3d-helpers-lodmanager.xml">LodManager</db:link> component to specify the different levels of detail as child models.</db:para>
</db:section>
<db:section xml:id="automatic-level-of-detail">
<db:title>Automatic Level of Detail</db:title>
<db:para>The primary way to use the the automatic level of detail support is by importing content with the <db:link xlink:href="qtquick3d-tool-balsam.xml">Balsam Asset Import Tool</db:link>. By using the flag <db:code>--generateMeshLevelsOfDetail</db:code> when importing assets, the tool will generate levels of detail for each mesh when possible. This is done by trying to simplify the geometry of the original mesh, while still maintaining the overall features. What results is additional geometry as well as new index values for each additional level of detail, as well as a distance factor used to determine which mesh to use for a given render size. This distance factor is related to the distance of the object being rendered to the camera, but the most important thing is having a good ratio of geometry per pixel. This data is written to the .mesh file and will be used automatically when used by a Model.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/lod_balsamui.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A tradeoff to the automatic system, and the reason why it is not enabled by default is that it is possible that when the geometry is reduced, visual artifacts can also be introduced. The geometry simplification algorithm used attempts to preserve the features of the model, but in some cases it may be necessary to recalculate the normals of the mesh to maintain the intended visual appearance. This can be done by using the <db:code>--recalculateLodNormals</db:code> flag when importing the asset. The normal recalculation process can be further tuned by passing euler angle values to the arguments <db:code>--recalculateLodNormalsMergeAngle</db:code> and <db:code>--recalculateLodNormalsSplitAngle</db:code> to control the angle at which normals are merged or split respectively.</db:para>
<db:para>The main advantage of the automatic system is that it is easy to use once the asset has been imported with the appropriate settings. No additional code is required to use the automatic system and any Models that reference the generated mesh files containing levels of detail geometry will automatically choose the appropriate geometry based on how many pixels the model takes up on the screen.</db:para>
<db:para>It is possible to tweak automatic level of detail selection behavior either at the <db:link xlink:href="qml-qtquick3d-camera.xml#levelOfDetailBias-prop">global level</db:link> or at the <db:link xlink:href="qml-qtquick3d-model.xml#levelOfDetailBias-prop">per-model level</db:link> by using the <db:code>levelOfDetailBias</db:code> property of either <db:link xlink:href="qml-qtquick3d-camera.xml">Camera</db:link> or <db:link xlink:href="qml-qtquick3d-model.xml">Model</db:link>. The default level of 1.0 of each of these bias properties means to trust the value calculated by the automatic system. This value is a bias to the ideal value such that a value smaller than 1.0 will require an even smaller rendered size before switching to a lesser level of detail. Values above 1.0 will lead to lower levels of detail being used sooner. A value of 0.0 will disable the usage of levels of detail completely and always use the original mesh geometry.</db:para>
<db:para>The automatic system is not as flexible as the explicit system. For example the automatic system always uses the same material for all levels of detail, which may not always be desirable. Another potential downside is that there is not transition between the different levels of detail which ideally should not be necessary with automatic level of detail, but may be desireable for certain use cases.</db:para>
</db:section>
<db:section xml:id="explicit-level-of-detail">
<db:title>Explicit Level of Detail</db:title>
<db:para>The Explicit level of detail system is more flexible than the automatic system, but requires more work to use. The explicit system is based on using a <db:link xlink:href="qml-qtquick3d-helpers-lodmanager.xml">LodManager</db:link> component to specify the different levels of detail as child <db:link xlink:href="qml-qtquick3d-model.xml">Model</db:link> components. Any children of the <db:link xlink:href="qml-qtquick3d-helpers-lodmanager.xml">LodManager</db:link> that are instances of Model will be considered a level of detail. This is quite powerful because each level of detail can be a completely custom model, with it's own geometries and materials.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick3d-helpers-lodmanager.xml">LodManager</db:link> component also has a <db:link xlink:href="qml-qtquick3d-helpers-lodmanager.xml#distances-prop">distances</db:link> property which is used to determine which child <db:link xlink:href="qml-qtquick3d-model.xml">Model</db:link> to use. The <db:link xlink:href="qml-qtquick3d-helpers-lodmanager.xml">LodManager</db:link> node will transition to the next child <db:link xlink:href="qml-qtquick3d-model.xml">Model</db:link> as the camera distance approach each distance boundary. The <db:link xlink:href="qml-qtquick3d-helpers-lodmanager.xml#fadeDistance-prop">fadeDistance</db:link> property can be used to set at which distance the cross fade transition begins and ends around the distances boundaries.</db:para>
<db:para>This is an <db:link xlink:href="qtquick3d-lodhelper-example.xml">example</db:link> of how to use the explicit level of detail system:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/lodhelper-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>In the referenced example the <db:link xlink:href="qml-qtquick3d-helpers-lodmanager.xml">LodManager</db:link> is used to explicitly specify different mesh files for each level of detail of the marble bust.</db:para>
<db:programlisting language="qml">LodManager {
    camera: camera
    distances: [100, 140, 180]
    fadeDistance: 10

    Model {
        scale: Qt.vector3d(100, 100, 100);
        source: &quot;meshes/marble_bust_01_LOD_0.mesh&quot;
        materials: [ marbleMaterial ]
    }

    Model {
        scale: Qt.vector3d(100, 100, 100);
        source: &quot;meshes/marble_bust_01_LOD_1.mesh&quot;
        materials: [ marbleMaterial ]
    }

    Model {
        scale: Qt.vector3d(100, 100, 100);
        source: &quot;meshes/marble_bust_01_LOD_2.mesh&quot;
        materials: [ marbleMaterial ]
    }

    Model {
        scale: Qt.vector3d(100, 100, 100);
        source: &quot;meshes/marble_bust_01_LOD_3.mesh&quot;
        materials: [ marbleMaterial ]
    }
}
</db:programlisting>
<db:para>For this code this is a diagram of what is being defined which points out how the distances list is used to define where the boundaries between the different levels of detail as well as the fadeDistance property which is used to define the cross fade transition.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/lodmanager_diagram.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
</db:article>
