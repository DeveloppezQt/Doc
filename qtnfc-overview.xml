<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt NFC Overview</db:title>
<db:productname>QtNfc</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt NFC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides access to NFC enabled devices.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>With the Qt NFC API typical use cases are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Detecting NFC tags.</db:para>
</db:listitem>
<db:listitem>
<db:para>Reading and writing NDEF messages.</db:para>
</db:listitem>
<db:listitem>
<db:para>Registering NDEF message handlers.</db:para>
</db:listitem>
<db:listitem>
<db:para>Sharing files and messages.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The following sections describe how to use Qt NFC C++ classes and QML types for the above use cases.</db:para>
<db:note>
<db:para>On Android, the detection of new NFC tags only works in foreground applications. Android services do not support this because of API limitations on the Android side. The only way to use a <db:link xlink:href="https://developer.android.com/reference/android/nfc/Tag">Tag</db:link> in a service is to provide an <db:link xlink:href="https://developer.android.com/guide/components/aidl">AIDL</db:link> interface accepting the Tag and forward it to Qt as shown in the following example.</db:para>
</db:note>
<db:programlisting language="cpp">public void setTag(Tag pTag) {
    Intent newIntent = new Intent();
    newIntent.putExtra(NfcAdapter.EXTRA_TAG, pTag);
    QtNative.onNewIntent(newIntent);
}
</db:programlisting>
<db:section xml:id="c-overview">
<db:title>C++ Overview</db:title>
<db:para>The C++ API provides access to the full feature set of the Qt NFC API. This section introduces the major features available to developers.</db:para>
<db:section xml:id="detecting-nfc-tags">
<db:title>Detecting NFC Tags</db:title>
<db:para>The <db:link xlink:href="qnearfieldmanager.xml">QNearFieldManager</db:link> class is responsible for the detection of new NFC tags coming into range of the device. The <db:link xlink:href="qnearfieldmanager.xml#targetDetected">QNearFieldManager::targetDetected</db:link>() and <db:link xlink:href="qnearfieldmanager.xml#targetLost">QNearFieldManager::targetLost</db:link>() signals are emitted when a tag comes into or leaves the range. The passed <db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link> parameter acts as primary interaction point for each detected tag. The detection does not actually start though until <db:link xlink:href="qnearfieldmanager.xml#startTargetDetection">QNearFieldManager::startTargetDetection</db:link>() has been called.</db:para>
<db:programlisting language="cpp">m_manager = new QNearFieldManager(this);
connect(m_manager, &amp;amp;QNearFieldManager::targetDetected,
        this, &amp;amp;MainWindow::targetDetected);
connect(m_manager, &amp;amp;QNearFieldManager::targetLost,
        this, &amp;amp;MainWindow::targetLost);
m_manager-&amp;gt;startTargetDetection(QNearFieldTarget::NdefAccess);
</db:programlisting>
<db:para>Finally the detection can be stopped:</db:para>
<db:programlisting language="cpp">m_manager-&amp;gt;stopTargetDetection();
</db:programlisting>
<db:para>Although each <db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link> instance is owned by its related <db:link xlink:href="qnearfieldmanager.xml">QNearFieldManager</db:link> instance it can be beneficial to manually delete each instance. Otherwise they would continue to exist until the <db:link xlink:href="qnearfieldmanager.xml">QNearFieldManager</db:link> instance is deleted. The best way to do that would be in response to the <db:link xlink:href="qnearfieldmanager.xml#targetLost">QNearFieldManager::targetLost</db:link>() signal:</db:para>
<db:programlisting language="cpp">void MainWindow::targetLost(QNearFieldTarget *target)
{
    target-&amp;gt;deleteLater();
}
</db:programlisting>
<db:note>
<db:para>The target object should only be deleted via deleteLater() if it is deleted inside the slot.</db:para>
</db:note>
</db:section>
<db:section xml:id="connecting-nfc-tags">
<db:title>Connecting NFC Tags</db:title>
<db:para>All functions of <db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link> that require a connection will create one by its own. An active connection will prevent other instances to create a connection because only one connection at the time is allowed.</db:para>
<db:para>Qt 5 disconnected the tag at the end of the functions to allow other instances to connect. QNearFieldManager::setKeepConnection() allowed to change this behavior.</db:para>
<db:para>Since Qt 6, <db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link> keeps the connection by default. The connection is only closed when the <db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link> is destroyed or <db:link xlink:href="qobject.xml#disconnect">QNearFieldManager::disconnect</db:link>() is called.</db:para>
</db:section>
<db:section xml:id="reading-and-writing-ndef-messages">
<db:title>Reading and Writing NDEF Messages</db:title>
<db:para>The <db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link> instance returned by <db:link xlink:href="qnearfieldmanager.xml#targetDetected">QNearFieldManager::targetDetected</db:link>() signal is used to interact with the tag. Reading and writing a message is an asynchronous operation. The <db:link xlink:href="qnearfieldtarget-requestid.xml">QNearFieldTarget::RequestId</db:link> class associates individual operations and their results.</db:para>
<db:programlisting language="cpp">void MainWindow::targetDetected(QNearFieldTarget *target)
{
    switch (m_touchAction) {
    case NoAction:
        break;
    case ReadNdef:
        connect(target, &amp;amp;QNearFieldTarget::ndefMessageRead, this, &amp;amp;MainWindow::ndefMessageRead);
        connect(target, &amp;amp;QNearFieldTarget::error, this, &amp;amp;MainWindow::targetError);

        m_request = target-&amp;gt;readNdefMessages();
        if (!m_request.isValid()) // cannot read messages
            targetError(QNearFieldTarget::NdefReadError, m_request);
        break;
    case WriteNdef:
        connect(target, &amp;amp;QNearFieldTarget::requestCompleted, this, &amp;amp;MainWindow::ndefMessageWritten);
        connect(target, &amp;amp;QNearFieldTarget::error, this, &amp;amp;MainWindow::targetError);

        m_request = target-&amp;gt;writeNdefMessages(QList&amp;lt;QNdefMessage&amp;gt;() &amp;lt;&amp;lt; ndefMessage());
        if (!m_request.isValid()) // cannot write messages
            targetError(QNearFieldTarget::NdefWriteError, m_request);
        break;
    }
}
</db:programlisting>
<db:para>Once the <db:link xlink:href="qnearfieldtarget.xml#readNdefMessages">QNearFieldTarget::readNdefMessages</db:link>() request was successfully processed, the <db:link xlink:href="qnearfieldtarget.xml#ndefMessageRead">QNearFieldTarget::ndefMessageRead</db:link>() signal is emitted. Each returned <db:link xlink:href="qndefmessage.xml">QNdefMessage</db:link> may consist of zero or more <db:link xlink:href="qndefrecord.xml">QNdefRecord</db:link> entries, which can be identified by their type. For more information about processing of records, see the <db:link xlink:href="qndefrecord.xml">QNdefRecord</db:link> class documentation. As the above code demonstrates, writing of NDEF messages is triggered via <db:link xlink:href="qnearfieldtarget.xml#writeNdefMessages">QNearFieldTarget::writeNdefMessages</db:link>(). The successful completion of the write operation is indicated by the emission of the <db:link xlink:href="qnearfieldtarget.xml#requestCompleted">QNearFieldTarget::requestCompleted</db:link>() signal with the corresponding request id. Any type of error during read or write is indicated via <db:link xlink:href="qnearfieldtarget.xml#error">QNearFieldTarget::error</db:link>().</db:para>
</db:section>
</db:section>
</db:article>
