<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Animated Tiles Example</db:title>
<db:productname>QtStateMachine</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt State Machine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Animated Tiles example animates items in a graphics scene.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The example demonstrates how <db:link xlink:href="qstatemachine.xml">QStateMachine</db:link> states can be used to animate positions of graphical objects. There are five states in the application that can be triggered by five buttons. The buttons initiate state transitions that animate the positions of 64 <db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link> images.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/animatedtiles-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="the-main-function">
<db:title>The <db:code>main()</db:code> Function</db:title>
<db:programlisting language="cpp">    QGraphicsScene scene(-350, -350, 700, 700);

    QList&amp;lt;Pixmap *&amp;gt; items;
    for (int i = 0; i &amp;lt; 64; ++i) {
        Pixmap *item = new Pixmap(kineticPix);
        item-&amp;gt;setOffset(-kineticPix.width()/2, -kineticPix.height()/2);
        item-&amp;gt;setZValue(i);
        items &amp;lt;&amp;lt; item;
        scene.addItem(item);
    }
</db:programlisting>
<db:para>The <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> is created, then the 64 images are created and added to the scene with the initial position of the center of the window. The Pixmap class is defined in the example that extends the <db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link> so that its position can be read and written as Qt properties.</db:para>
<db:programlisting language="cpp">    // Buttons
    QGraphicsItem *buttonParent = new QGraphicsRectItem;
    Button *ellipseButton = new Button(QPixmap(&quot;:/images/ellipse.png&quot;), buttonParent);
    Button *figure8Button = new Button(QPixmap(&quot;:/images/figure8.png&quot;), buttonParent);
    Button *randomButton = new Button(QPixmap(&quot;:/images/random.png&quot;), buttonParent);
    Button *tiledButton = new Button(QPixmap(&quot;:/images/tile.png&quot;), buttonParent);
    Button *centeredButton = new Button(QPixmap(&quot;:/images/centered.png&quot;), buttonParent);

    ellipseButton-&amp;gt;setPos(-100, -100);
    figure8Button-&amp;gt;setPos(100, -100);
    randomButton-&amp;gt;setPos(0, 0);
    tiledButton-&amp;gt;setPos(-100, 100);
    centeredButton-&amp;gt;setPos(100, 100);

    scene.addItem(buttonParent);
    buttonParent-&amp;gt;setTransform(QTransform::fromScale(0.75, 0.75), true);
    buttonParent-&amp;gt;setPos(200, 200);
    buttonParent-&amp;gt;setZValue(65);
</db:programlisting>
<db:para>Then the five buttons are created and added to a <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> for easier positioning. The Button class is defined in the example. It extends <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> and implements displaying a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> on a circular background with shading based on its pressed state.</db:para>
<db:programlisting language="cpp">    // States
    QState *rootState = new QState;
    QState *ellipseState = new QState(rootState);
    QState *figure8State = new QState(rootState);
    QState *randomState = new QState(rootState);
    QState *tiledState = new QState(rootState);
    QState *centeredState = new QState(rootState);
</db:programlisting>
<db:para>The states are created and added to a root state.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/animated-tiles-chart.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Having the five states as child states of <db:code>rootState</db:code> allows state transitions from any of the child states to any other child state if the state transitions are set up from <db:code>rootState</db:code> to the child states.</db:para>
<db:programlisting language="cpp">    // Values
    for (int i = 0; i &amp;lt; items.count(); ++i) {
        Pixmap *item = items.at(i);
        // Ellipse
        ellipseState-&amp;gt;assignProperty(item, &quot;pos&quot;,
                                         QPointF(qCos((i / 63.0) * 6.28) * 250,
                                                 qSin((i / 63.0) * 6.28) * 250));

        // Figure 8
        figure8State-&amp;gt;assignProperty(item, &quot;pos&quot;,
                                         QPointF(qSin((i / 63.0) * 6.28) * 250,
                                                 qSin(((i * 2)/63.0) * 6.28) * 250));

        // Random
        randomState-&amp;gt;assignProperty(item, &quot;pos&quot;,
                                        QPointF(-250 + QRandomGenerator::global()-&amp;gt;bounded(500),
                                                -250 + QRandomGenerator::global()-&amp;gt;bounded(500)));

        // Tiled
        tiledState-&amp;gt;assignProperty(item, &quot;pos&quot;,
                                       QPointF(((i % 8) - 4) * kineticPix.width() + kineticPix.width() / 2,
                                               ((i / 8) - 4) * kineticPix.height() + kineticPix.height() / 2));

        // Centered
        centeredState-&amp;gt;assignProperty(item, &quot;pos&quot;, QPointF());
    }
</db:programlisting>
<db:para>For each image, the position properties are set to each state based on a function that creates the required shape. The states set these properties to the images when the given state is entered.</db:para>
<db:programlisting language="cpp">    // Ui
    View *view = new View(&amp;amp;scene);
    view-&amp;gt;setWindowTitle(QT_TRANSLATE_NOOP(QGraphicsView, &quot;Animated Tiles&quot;));
    view-&amp;gt;setViewportUpdateMode(QGraphicsView::BoundingRectViewportUpdate);
    view-&amp;gt;setBackgroundBrush(bgPix);
    view-&amp;gt;setCacheMode(QGraphicsView::CacheBackground);
    view-&amp;gt;setRenderHints(QPainter::Antialiasing | QPainter::SmoothPixmapTransform);
    view-&amp;gt;show();
</db:programlisting>
<db:para>The <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> is created and set up with the required properties.</db:para>
<db:programlisting language="cpp">    QStateMachine states;
    states.addState(rootState);
    states.setInitialState(rootState);
    rootState-&amp;gt;setInitialState(centeredState);
</db:programlisting>
<db:para>The state machine is created and the previously created states are added with the <db:code>rootState</db:code> set as the initial state.</db:para>
<db:programlisting language="cpp">    QParallelAnimationGroup *group = new QParallelAnimationGroup;
    for (int i = 0; i &amp;lt; items.count(); ++i) {
        QPropertyAnimation *anim = new QPropertyAnimation(items[i], &quot;pos&quot;);
        anim-&amp;gt;setDuration(750 + i * 25);
        anim-&amp;gt;setEasingCurve(QEasingCurve::InOutBack);
        group-&amp;gt;addAnimation(anim);
    }
</db:programlisting>
<db:para>The <db:link xlink:href="qparallelanimationgroup.xml">QParallelAnimationGroup</db:link> is created with a <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> for each item that animates the item position values.</db:para>
<db:programlisting language="cpp">    QAbstractTransition *trans = rootState-&amp;gt;addTransition(ellipseButton, &amp;amp;Button::pressed, ellipseState);
    trans-&amp;gt;addAnimation(group);

    trans = rootState-&amp;gt;addTransition(figure8Button, &amp;amp;Button::pressed, figure8State);
    trans-&amp;gt;addAnimation(group);

    trans = rootState-&amp;gt;addTransition(randomButton, &amp;amp;Button::pressed, randomState);
    trans-&amp;gt;addAnimation(group);

    trans = rootState-&amp;gt;addTransition(tiledButton, &amp;amp;Button::pressed, tiledState);
    trans-&amp;gt;addAnimation(group);

    trans = rootState-&amp;gt;addTransition(centeredButton, &amp;amp;Button::pressed, centeredState);
    trans-&amp;gt;addAnimation(group);
</db:programlisting>
<db:para>The state transitions are created with the button presses as their triggers and the animation group assigned to them.</db:para>
<db:programlisting language="cpp">    QTimer timer;
    timer.start(125);
    timer.setSingleShot(true);
    trans = rootState-&amp;gt;addTransition(&amp;amp;timer, &amp;amp;QTimer::timeout, ellipseState);
    trans-&amp;gt;addAnimation(group);

    states.start();
</db:programlisting>
<db:para>An initial state transition is set up from root to ellipse state that is triggered with a <db:link xlink:href="qtimer.xml">QTimer</db:link> after application start.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtscxml.git/tree/examples/statemachine/animation/animatedtiles?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
