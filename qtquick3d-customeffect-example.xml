<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Custom Effect Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates writing custom post-processing effects.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/customeffect-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>The example implements its own custom post-processing effects, which are then applied on the scene via <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#effects-prop">SceneEnvironment::effects</db:link>. It demonstrates both the simplest type of effects that only have a fragment shader, and also the more advanced case with both a vertex and fragment shader present, with data passed between the two.</db:para>
<db:para>The simple effect is using only a single fragment shader, and adding a texture input from an image file:</db:para>
<db:programlisting language="qml">Effect {
    id: eff1
    property TextureInput tex: TextureInput {
        id: qtLogo
        texture: Texture { source: &quot;qt_logo_rect.png&quot; }
    }
    passes: Pass {
        shaders: Shader {
            id: fs1
            stage: Shader.Fragment
            shader: &quot;effect.frag&quot;
        }
    }
}
</db:programlisting>
<db:para>This effect uses a very simple fragment shader, just taking the input texture containing the scene, and multiplying it with the image texture:</db:para>
<db:programlisting language="cpp">void MAIN()
{
    vec4 c = texture(tex, TEXTURE_UV);
    FRAGCOLOR = c * texture(INPUT, INPUT_UV);
}
</db:programlisting>
<db:para>The shader snippets in the <db:code>.vert</db:code> and <db:code>.frag</db:code> files are written using the built-in keywords as described in the <db:link xlink:href="qml-qtquick3d-effect.xml">Effect</db:link> documentation. Custom properties with basic types, as well as properties with the <db:link xlink:href="qml-qtquick3d-textureinput.xml">TextureInput</db:link> type are automatically exposed to the shaders as uniforms and samplers.</db:para>
<db:para>The second effect is more complex. It specifies both a vertex and a fragment shader, as well as two properties: <db:code>uRed</db:code> and <db:code>uGreen</db:code>, with an animation on <db:code>uRed</db:code>:</db:para>
<db:programlisting language="qml">Effect {
    id: eff2
    property real uRed: 0.0
    SequentialAnimation on uRed {
        running: radioEff2.checked || radioEff3.checked
        loops: -1
        NumberAnimation { from: 0; to: 1; duration: 2000 }
        NumberAnimation { from: 1; to: 0; duration: 2000 }
    }
    property real uGreen: 1.0
    Shader {
        id: vs2
        stage: Shader.Vertex
        shader: &quot;effect2.vert&quot;
    }
    Shader {
        id: fs2
        stage: Shader.Fragment
        shader: &quot;effect2.frag&quot;
    }
    passes: Pass {
        shaders: [ vs2, fs2 ]
    }
}
</db:programlisting>
<db:para>The fragment shader for this effect creates a distortion by modifying the sampling coordinates. The calculation uses <db:code>center_vec</db:code>, which comes from the fragment shader. Finally, the shader adjusts the color using the <db:code>uRed</db:code> and <db:code>uGreen</db:code> uniforms. Note that these uniforms do not have to be declared in the shader:</db:para>
<db:programlisting language="cpp">VARYING vec2 center_vec;

void MAIN()
{
    float radius = 0.25;
    float dist_to_center = length(center_vec) / radius;
    vec2 texcoord = INPUT_UV;
    if (dist_to_center &amp;lt;= 1.0) {
        float rotation_amount = (1.0 - dist_to_center) * (1.0 - dist_to_center);
        float r = radians(360.0) * rotation_amount / 4.0;
        float cos_r = cos(r);
        float sin_r = sin(r);
        mat2 rotation = mat2(cos_r, sin_r, -sin_r, cos_r);
        texcoord = vec2(0.5, 0.5) + rotation * (INPUT_UV - vec2(0.5, 0.5));
    }
    vec4 c = texture(INPUT, texcoord);
    c.r *= uRed;
    c.g *= uGreen;
    FRAGCOLOR = c;
}

</db:programlisting>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="customeffect/CMakeLists.txt">customeffect/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customeffect/customeffect.pro">customeffect/customeffect.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customeffect/main.cpp">customeffect/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customeffect/main.qml">customeffect/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customeffect/qml.qrc">customeffect/qml.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="customeffect/checkers2.png">customeffect/checkers2.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="customeffect/qt_logo_rect.png">customeffect/qt_logo_rect.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
