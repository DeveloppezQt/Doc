<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStringMatcher Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstringmatcher.xml">QStringMatcher</db:link> class holds a sequence of characters that can be quickly matched in a Unicode string.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStringMatcher</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStringMatcher is part of <db:simplelist><db:member>tools</db:member><db:member>string-processing</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class is useful when you have a sequence of <db:link xlink:href="qchar.xml">QChar</db:link>s that you want to repeatedly match against some strings (perhaps in a loop), or when you want to search for the same sequence of characters multiple times in the same string. Using a matcher object and <db:link xlink:href="qstringmatcher.xml#indexIn">indexIn</db:link>() is faster than matching a plain <db:link xlink:href="qstring.xml">QString</db:link> with <db:link xlink:href="qstring.xml#indexOf">QString::indexOf</db:link>() if repeated matching takes place. This class offers no benefit if you are doing one-off string matches.</db:para>
<db:para>Create the <db:link xlink:href="qstringmatcher.xml">QStringMatcher</db:link> with the <db:link xlink:href="qstring.xml">QString</db:link> you want to search for. Then call <db:link xlink:href="qstringmatcher.xml#indexIn">indexIn</db:link>() on the <db:link xlink:href="qstring.xml">QString</db:link> that you want to search.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml">QString</db:link></db:member>
<db:member><db:link xlink:href="qbytearraymatcher.xml">QByteArrayMatcher</db:link></db:member>
<db:member><db:link xlink:href="qregexp.xml">QRegExp</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QStringMatcher">
<db:title>QStringMatcher::QStringMatcher()</db:title>
<db:constructorsynopsis>
<db:methodname>QStringMatcher</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringMatcher()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty string matcher that won't match anything. Call <db:link xlink:href="qstringmatcher.xml#setPattern">setPattern</db:link>() to give it a pattern to match.</db:para>
</db:section>
<db:section xml:id="QStringMatcher-1">
<db:title>[explicit] QStringMatcher::QStringMatcher(const QString &amp;<db:emphasis>pattern</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:constructorsynopsis>
<db:methodname>QStringMatcher</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>pattern</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringMatcher(const QString &amp;pattern, Qt::CaseSensitivity cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string matcher that will search for <db:code role="parameter">pattern</db:code>, with case sensitivity <db:code role="parameter">cs</db:code>.</db:para>
<db:para>Call <db:link xlink:href="qstringmatcher.xml#indexIn">indexIn</db:link>() to perform a search.</db:para>
</db:section>
<db:section xml:id="QStringMatcher-2">
<db:title>[since 4.5] QStringMatcher::QStringMatcher(const QChar *<db:emphasis>uc</db:emphasis>, int <db:emphasis>length</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:constructorsynopsis>
<db:methodname>QStringMatcher</db:methodname>
<db:methodparam>
<db:type>const QChar *</db:type>
<db:parameter>uc</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringMatcher(const QChar *uc, int length, Qt::CaseSensitivity cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string matcher that will search for the pattern referred to by <db:code role="parameter">uc</db:code> with the given <db:code role="parameter">length</db:code> and case sensitivity specified by <db:code role="parameter">cs</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="QStringMatcher-3">
<db:title>[since 5.14] QStringMatcher::QStringMatcher(QStringView <db:emphasis>pattern</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:constructorsynopsis>
<db:methodname>QStringMatcher</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>pattern</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringMatcher(QStringView pattern, Qt::CaseSensitivity cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string matcher that will search for <db:code role="parameter">pattern</db:code>, with case sensitivity <db:code role="parameter">cs</db:code>.</db:para>
<db:para>Call <db:link xlink:href="qstringmatcher.xml#indexIn">indexIn</db:link>() to perform a search.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="QStringMatcher-4">
<db:title>QStringMatcher::QStringMatcher(const QStringMatcher &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStringMatcher</db:methodname>
<db:methodparam>
<db:type>const QStringMatcher &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringMatcher(const QStringMatcher &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Copies the <db:code role="parameter">other</db:code> string matcher to this string matcher.</db:para>
</db:section>
<db:section xml:id="dtor.QStringMatcher">
<db:title>QStringMatcher::~QStringMatcher()</db:title>
<db:destructorsynopsis>
<db:methodname>~QStringMatcher</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QStringMatcher()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the string matcher.</db:para>
</db:section>
<db:section xml:id="caseSensitivity">
<db:title>Qt::CaseSensitivity QStringMatcher::caseSensitivity() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::CaseSensitivity</db:type>
<db:methodname>caseSensitivity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::CaseSensitivity caseSensitivity() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the case sensitivity setting for this string matcher.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringmatcher.xml#setCaseSensitivity">setCaseSensitivity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexIn">
<db:title>int QStringMatcher::indexIn(const QString &amp;<db:emphasis>str</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexIn</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>from</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexIn(const QString &amp;str, int from) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches the string <db:code role="parameter">str</db:code> from character position <db:code role="parameter">from</db:code> (default 0, i.e. from the first character), for the string <db:link xlink:href="qstringmatcher.xml#pattern">pattern</db:link>() that was set in the constructor or in the most recent call to <db:link xlink:href="qstringmatcher.xml#setPattern">setPattern</db:link>(). Returns the position where the <db:link xlink:href="qstringmatcher.xml#pattern">pattern</db:link>() matched in <db:code role="parameter">str</db:code>, or -1 if no match was found.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringmatcher.xml#setPattern">setPattern</db:link>()</db:member>
<db:member><db:link xlink:href="qstringmatcher.xml#setCaseSensitivity">setCaseSensitivity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexIn-1">
<db:title>[since 4.5] int QStringMatcher::indexIn(const QChar *<db:emphasis>str</db:emphasis>, int <db:emphasis>length</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexIn</db:methodname>
<db:methodparam>
<db:type>const QChar *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>from</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexIn(const QChar *str, int length, int from) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches the string starting at <db:code role="parameter">str</db:code> (of length <db:code role="parameter">length</db:code>) from character position <db:code role="parameter">from</db:code> (default 0, i.e. from the first character), for the string <db:link xlink:href="qstringmatcher.xml#pattern">pattern</db:link>() that was set in the constructor or in the most recent call to <db:link xlink:href="qstringmatcher.xml#setPattern">setPattern</db:link>(). Returns the position where the <db:link xlink:href="qstringmatcher.xml#pattern">pattern</db:link>() matched in <db:code role="parameter">str</db:code>, or -1 if no match was found.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringmatcher.xml#setPattern">setPattern</db:link>()</db:member>
<db:member><db:link xlink:href="qstringmatcher.xml#setCaseSensitivity">setCaseSensitivity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexIn-2">
<db:title>[since 5.14] qsizetype QStringMatcher::indexIn(QStringView <db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>indexIn</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>from</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype indexIn(QStringView str, qsizetype from) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches the string <db:code role="parameter">str</db:code> from character position <db:code role="parameter">from</db:code> (default 0, i.e. from the first character), for the string <db:link xlink:href="qstringmatcher.xml#pattern">pattern</db:link>() that was set in the constructor or in the most recent call to <db:link xlink:href="qstringmatcher.xml#setPattern">setPattern</db:link>(). Returns the position where the <db:link xlink:href="qstringmatcher.xml#pattern">pattern</db:link>() matched in <db:code role="parameter">str</db:code>, or -1 if no match was found.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringmatcher.xml#setPattern">setPattern</db:link>()</db:member>
<db:member><db:link xlink:href="qstringmatcher.xml#setCaseSensitivity">setCaseSensitivity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pattern">
<db:title>QString QStringMatcher::pattern() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>pattern</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString pattern() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the string pattern that this string matcher will search for.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringmatcher.xml#setPattern">setPattern</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCaseSensitivity">
<db:title>void QStringMatcher::setCaseSensitivity(Qt::CaseSensitivity <db:emphasis>cs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCaseSensitivity</db:methodname>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCaseSensitivity(Qt::CaseSensitivity cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the case sensitivity setting of this string matcher to <db:code role="parameter">cs</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringmatcher.xml#caseSensitivity">caseSensitivity</db:link>()</db:member>
<db:member><db:link xlink:href="qstringmatcher.xml#setPattern">setPattern</db:link>()</db:member>
<db:member><db:link xlink:href="qstringmatcher.xml#indexIn">indexIn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPattern">
<db:title>void QStringMatcher::setPattern(const QString &amp;<db:emphasis>pattern</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPattern</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>pattern</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPattern(const QString &amp;pattern)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the string that this string matcher will search for to <db:code role="parameter">pattern</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringmatcher.xml#pattern">pattern</db:link>()</db:member>
<db:member><db:link xlink:href="qstringmatcher.xml#setCaseSensitivity">setCaseSensitivity</db:link>()</db:member>
<db:member><db:link xlink:href="qstringmatcher.xml#indexIn">indexIn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QStringMatcher &amp;QStringMatcher::operator=(const QStringMatcher &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QStringMatcher &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QStringMatcher &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringMatcher &amp; operator=(const QStringMatcher &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the <db:code role="parameter">other</db:code> string matcher to this string matcher.</db:para>
</db:section>
</db:section>
</db:article>
