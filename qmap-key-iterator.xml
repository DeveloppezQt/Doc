<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>key_iterator Class</db:title>
<db:subtitle>QMap::key_iterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmap-key-iterator.xml">QMap::key_iterator</db:link> class provides an STL-style const iterator for <db:link xlink:href="qmap.xml">QMap</db:link> keys.</db:para>
<db:para>This class was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>key_iterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmap-key-iterator.xml">QMap::key_iterator</db:link> is essentially the same as <db:link xlink:href="qmap-const-iterator.xml">QMap::const_iterator</db:link> with the difference that operator*() and operator-&gt;() return a key instead of a value.</db:para>
<db:para>For most uses <db:link xlink:href="qmap-iterator.xml">QMap::iterator</db:link> and <db:link xlink:href="qmap-const-iterator.xml">QMap::const_iterator</db:link> should be used, you can easily access the key by calling <db:link xlink:href="qmap-iterator.xml#key">QMap::iterator::key</db:link>():</db:para>
<db:programlisting language="cpp">for (QMap&amp;lt;int, QString&amp;gt;::const_iterator it = map.cbegin(), end = map.cend(); it != end; ++it) {
    cout &amp;lt;&amp;lt; &quot;The key: &quot; &amp;lt;&amp;lt; it.key() &amp;lt;&amp;lt; Qt::endl
    cout &amp;lt;&amp;lt; &quot;The value: &quot; &amp;lt;&amp;lt; it.value() &amp;lt;&amp;lt; Qt::endl;
    cout &amp;lt;&amp;lt; &quot;Also the value: &quot; &amp;lt;&amp;lt; (*it) &amp;lt;&amp;lt; Qt::endl;
}
</db:programlisting>
<db:para>However, to have interoperability between <db:link xlink:href="qmap.xml">QMap</db:link>'s keys and STL-style algorithms we need an iterator that dereferences to a key instead of a value. With <db:link xlink:href="qmap-key-iterator.xml">QMap::key_iterator</db:link> we can apply an algorithm to a range of keys without having to call <db:link xlink:href="qmap.xml#keys">QMap::keys</db:link>(), which is inefficient as it costs one <db:link xlink:href="qmap.xml">QMap</db:link> iteration and memory allocation to create a temporary <db:link xlink:href="qlist.xml">QList</db:link>.</db:para>
<db:programlisting language="cpp">// Inefficient, keys() is expensive
QList&amp;lt;int&amp;gt; keys = map.keys();
int numPrimes = std::count_if(map.cbegin(), map.cend(), isPrimeNumber);
qDeleteAll(map2.keys());

// Efficient, no memory allocation needed
int numPrimes = std::count_if(map.keyBegin(), map.keyEnd(), isPrimeNumber);
qDeleteAll(map2.keyBegin(), map2.keyEnd());
</db:programlisting>
<db:para><db:link xlink:href="qmap-key-iterator.xml">QMap::key_iterator</db:link> is const, it's not possible to modify the key.</db:para>
<db:para>The default <db:link xlink:href="qmap-key-iterator.xml">QMap::key_iterator</db:link> constructor creates an uninitialized iterator. You must initialize it using a <db:link xlink:href="qmap.xml">QMap</db:link> function like <db:link xlink:href="qmap.xml#keyBegin">QMap::keyBegin</db:link>() or <db:link xlink:href="qmap.xml#keyEnd">QMap::keyEnd</db:link>().</db:para>
<db:warning>
<db:para>Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <db:link xlink:href="containers.xml#implicit-sharing-iterator-problem">Implicit sharing iterator problem</db:link>.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmap-const-iterator.xml">QMap::const_iterator</db:link></db:member>
<db:member><db:link xlink:href="qmap-iterator.xml">QMap::iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="base">
<db:title>const_iterator key_iterator::base() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const_iterator</db:type>
<db:methodname>base</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const_iterator base() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the underlying <db:link xlink:href="qmap-const-iterator.xml">const_iterator</db:link> this <db:link xlink:href="qmap-key-iterator.xml">key_iterator</db:link> is based on.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool key_iterator::operator!=(key_iterator <db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>key_iterator</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(key_iterator other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">other</db:code> points to a different item than this iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmap-key-iterator.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a">
<db:title>const Key &amp;key_iterator::operator*() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const Key &amp;</db:type>
<db:methodname>operator*</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const Key &amp; operator*() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current item's key.</db:para>
</db:section>
<db:section xml:id="operator-2b-2b">
<db:title>key_iterator &amp;key_iterator::operator++()</db:title>
<db:methodsynopsis>
<db:type>key_iterator &amp;</db:type>
<db:methodname>operator++</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">key_iterator &amp; operator++()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The prefix ++ operator (++i) advances the iterator to the next item in the hash and returns an iterator to the new current item.</db:para>
<db:para>Calling this function on <db:link xlink:href="qmap.xml#keyEnd">QMap::keyEnd</db:link>() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmap-key-iterator.xml#operator--">operator--</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b-1">
<db:title>key_iterator key_iterator::operator++(<db:emphasis>int</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>key_iterator</db:type>
<db:methodname>operator++</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">key_iterator operator++(int)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix ++ operator (i++) advances the iterator to the next item in the hash and returns an iterator to the previous item.</db:para>
</db:section>
<db:section xml:id="operator--">
<db:title>key_iterator &amp;key_iterator::operator--()</db:title>
<db:methodsynopsis>
<db:type>key_iterator &amp;</db:type>
<db:methodname>operator--</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">key_iterator &amp; operator--()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The prefix – operator (--i) makes the preceding item current and returns an iterator pointing to the new current item.</db:para>
<db:para>Calling this function on <db:link xlink:href="qmap.xml#keyBegin">QMap::keyBegin</db:link>() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmap-key-iterator.xml#operator-2b-2b">operator++</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator---1">
<db:title>key_iterator key_iterator::operator--(<db:emphasis>int</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>key_iterator</db:type>
<db:methodname>operator--</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">key_iterator operator--(int)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix – operator (i--) makes the preceding item current and returns an iterator pointing to the previous item.</db:para>
</db:section>
<db:section xml:id="operator--gt">
<db:title>const Key *key_iterator::operator-&gt;() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const Key *</db:type>
<db:methodname>operator-&gt;</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const Key * operator-&gt;() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the current item's key.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool key_iterator::operator==(key_iterator <db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>key_iterator</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(key_iterator other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">other</db:code> points to the same item as this iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmap-key-iterator.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
