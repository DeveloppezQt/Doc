<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>key_iterator Class</db:title>
<db:subtitle>QMap::key_iterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmap-key-iterator.xml">QMap::key_iterator</db:link> class provides an STL-style const iterator for <db:link xlink:href="qmap.xml">QMap</db:link> and <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> keys.</db:para>
<db:para>This class was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>key_iterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmap-key-iterator.xml">QMap::key_iterator</db:link> is essentially the same as <db:link xlink:href="qmap-const-iterator.xml">QMap::const_iterator</db:link> with the difference that operator*() and operator-&gt;() return a key instead of a value.</db:para>
<db:para>For most uses <db:link xlink:href="qmap-iterator.xml">QMap::iterator</db:link> and <db:link xlink:href="qmap-const-iterator.xml">QMap::const_iterator</db:link> should be used, you can easily access the key by calling QMap::iterator::key():</db:para>
<db:programlisting language="cpp">for (QMap&lt;int, QString&gt;::const_iterator it = map.cbegin(), end = map.cend(); it != end; ++it) {
    cout &lt;&lt; &quot;The key: &quot; &lt;&lt; it.key() &lt;&lt; endl
    cout &lt;&lt; &quot;The value: &quot; &lt;&lt; it.value() &lt;&lt; endl;
    cout &lt;&lt; &quot;Also the value: &quot; &lt;&lt; (*it) &lt;&lt; endl;
}
</db:programlisting>
<db:para>However, to have interoperability between <db:link xlink:href="qmap.xml">QMap</db:link>'s keys and STL-style algorithms we need an iterator that dereferences to a key instead of a value. With <db:link xlink:href="qmap-key-iterator.xml">QMap::key_iterator</db:link> we can apply an algorithm to a range of keys without having to call QMap::keys(), which is inefficient as it costs one <db:link xlink:href="qmap.xml">QMap</db:link> iteration and memory allocation to create a temporary <db:link xlink:href="qlist.xml">QList</db:link>.</db:para>
<db:programlisting language="cpp">// Inefficient, keys() is expensive
QList&lt;int&gt; keys = map.keys();
int numPrimes = std::count_if(map.cbegin(), map.cend(), isPrimeNumber);
qDeleteAll(map2.keys());

// Efficient, no memory allocation needed
int numPrimes = std::count_if(map.keyBegin(), map.keyEnd(), isPrimeNumber);
qDeleteAll(map2.keyBegin(), map2.keyEnd());
</db:programlisting>
<db:para><db:link xlink:href="qmap-key-iterator.xml">QMap::key_iterator</db:link> is const, it's not possible to modify the key.</db:para>
<db:para>The default <db:link xlink:href="qmap-key-iterator.xml">QMap::key_iterator</db:link> constructor creates an uninitialized iterator. You must initialize it using a <db:link xlink:href="qmap.xml">QMap</db:link> function like QMap::keyBegin() or QMap::keyEnd().</db:para>
<db:warning>
<db:para>Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <db:link xlink:href="containers.xml#implicit-sharing-iterator-problem">Implicit sharing iterator problem</db:link>.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmap-const-iterator.xml">QMap::const_iterator</db:link></db:member>
<db:member><db:link xlink:href="qmap-iterator.xml">QMap::iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
