<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QLowEnergyService Class</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link> class represents an individual service on a Bluetooth Low Energy Device.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QLowEnergyService</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += bluetooth</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link> provides access to the details of Bluetooth Low Energy services. The class facilitates the discovery and publification of service details, permits reading and writing of the contained data and notifies about data changes.</db:para>
<db:section xml:id="service-structure">
<db:title>Service Structure</db:title>
<db:para>A Bluetooth Low Energy peripheral device can contain multiple services. In turn each service may include further services. This class represents a single service of the peripheral device and is created via <db:link xlink:href="qlowenergycontroller.xml#createServiceObject">QLowEnergyController::createServiceObject</db:link>(). The <db:link xlink:href="qlowenergyservice.xml#type">type</db:link>() indicates whether this service is a primary (top-level) service or whether the service is part of another service. Each service may contain one or more characteristics and each characteristic may contain descriptors. The resulting structure may look like the following diagram:</db:para>
<db:mediaobject>
<db:alt>Structure of a generic peripheral</db:alt>
<db:imageobject>
<db:imagedata fileref="images/peripheral-structure.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A characteristic is the principal information carrier. It has a <db:link xlink:href="qlowenergycharacteristic.xml#value">value</db:link>() and <db:link xlink:href="qlowenergycharacteristic.xml#value">properties</db:link>() describing the access permissions for the value. The general purpose of the contained descriptor is to further define the nature of the characteristic. For example, it might specify how the value is meant to be interpreted or whether it can notify the value consumer about value changes.</db:para>
</db:section>
<db:section xml:id="service-interaction">
<db:title>Service Interaction</db:title>
<db:para>Once a service object was created for the first time, its details are yet to be discovered. This is indicated by its current <db:link xlink:href="qlowenergyservice.xml#state">state</db:link>() being <db:link xlink:href="qlowenergyservice.xml#ServiceState-enum">DiscoveryRequired</db:link>. It is only possible to retrieve the <db:link xlink:href="qlowenergyservice.xml#serviceUuid">serviceUuid</db:link>() and <db:link xlink:href="qlowenergyservice.xml#serviceName">serviceName</db:link>().</db:para>
<db:para>The discovery of its included services, characteristics and descriptors is triggered when calling <db:link xlink:href="qlowenergyservice.xml#discoverDetails">discoverDetails</db:link>(). During the discovery the <db:link xlink:href="qlowenergyservice.xml#state">state</db:link>() transitions from <db:link xlink:href="qlowenergyservice.xml#ServiceState-enum">DiscoveryRequired</db:link> via <db:link xlink:href="qlowenergyservice.xml#ServiceState-enum">DiscoveringService</db:link> to its final <db:link xlink:href="qlowenergyservice.xml#ServiceState-enum">ServiceDiscovered</db:link> state. This transition is advertised via the <db:link xlink:href="qlowenergyservice.xml#stateChanged">stateChanged</db:link>() signal. Once the details are known, all of the contained characteristics, descriptors and included services are known and can be read or written.</db:para>
<db:para>The values of characteristics and descriptors can be retrieved via <db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link> and <db:link xlink:href="qlowenergydescriptor.xml">QLowEnergyDescriptor</db:link>, respectively. However, direct reading or writing of these attributes requires the service object. The <db:link xlink:href="qlowenergyservice.xml#readCharacteristic">readCharacteristic</db:link>() function attempts to re-read the value of a characteristic. Although the initial service discovery may have obtained a value already this call may be required in cases where the characteristic value constantly changes without any notifications being provided. An example might be a time characteristic that provides a continuous value. If the read attempt is successful, the <db:link xlink:href="qlowenergyservice.xml#characteristicRead">characteristicRead</db:link>() signal is emitted. A failure to read the value triggers the <db:link xlink:href="qlowenergyservice.xml#ServiceError-enum">CharacteristicReadError</db:link>. The <db:link xlink:href="qlowenergyservice.xml#writeCharacteristic">writeCharacteristic</db:link>() function attempts to write a new value to the given characteristic. If the write attempt is successful, the <db:link xlink:href="qlowenergyservice.xml#characteristicWritten">characteristicWritten</db:link>() signal is emitted. A failure to write triggers the <db:link xlink:href="qlowenergyservice.xml#ServiceError-enum">CharacteristicWriteError</db:link>. Reading and writing of descriptors follows the same pattern.</db:para>
<db:para>Every attempt is made to read or write the value of a descriptor or characteristic on the hardware. This means that meta information such as <db:link xlink:href="qlowenergycharacteristic.xml#properties">QLowEnergyCharacteristic::properties</db:link>() is generally ignored when reading and writing. As an example, it is possible to call <db:link xlink:href="qlowenergyservice.xml#writeCharacteristic">writeCharacteristic</db:link>() despite the characteristic being read-only based on its meta data description. The resulting write request is forwarded to the connected device and it is up to the device to respond to the potentially invalid request. In this case the result is the emission of the <db:link xlink:href="qlowenergyservice.xml#ServiceError-enum">CharacteristicWriteError</db:link> in response to the returned device error. This behavior simplifies interaction with devices which report wrong meta information. If it was not possible to forward the request to the remote device the <db:link xlink:href="qlowenergyservice.xml#ServiceError-enum">OperationError</db:link> is set. A potential reason could be that the to-be-written characteristic object does not even belong the current service. In summary, the two types of errors permit a quick distinction of local and remote error cases.</db:para>
<db:para>All requests are serialised based on First-In First-Out principle. For example, issuing a second write request, before the previous write request has finished, is delayed until the first write request has finished.</db:para>
<db:note>
<db:para>Currently, it is not possible to send signed write or reliable write requests.</db:para>
</db:note>
<db:anchor xml:id="notifications"/>
<db:para>In some cases the peripheral generates value updates which the central is interested in receiving. In order for a characteristic to support such notifications it must have the <db:link xlink:href="qlowenergycharacteristic.xml#PropertyType-enum">QLowEnergyCharacteristic::Notify</db:link> or <db:link xlink:href="qlowenergycharacteristic.xml#PropertyType-enum">QLowEnergyCharacteristic::Indicate</db:link> property and a descriptor of type <db:link xlink:href="qbluetoothuuid.xml#DescriptorType-enum">QBluetoothUuid::DescriptorType::ClientCharacteristicConfiguration</db:link>. Provided those conditions are fulfilled notifications can be enabled as shown in the following code segment:</db:para>
<db:programlisting language="cpp">    //PreCondition: service details already discovered
    QLowEnergyCharacteristic batteryLevel = service-&gt;characteristic(
                QBluetoothUuid::CharacteristicType::BatteryLevel);
    if (!batteryLevel.isValid())
        return;

    QLowEnergyDescriptor notification = batteryLevel.descriptor(
                QBluetoothUuid::DescriptorType::ClientCharacteristicConfiguration);
    if (!notification.isValid())
        return;

    // establish hook into notifications
    connect(service, SIGNAL(characteristicChanged(QLowEnergyCharacteristic,QByteArray)),
            this, SLOT(characteristicChanged(QLowEnergyCharacteristic,QByteArray)));

    // enable notification
    service-&gt;writeDescriptor(notification, QByteArray::fromHex(&quot;0100&quot;));

    // disable notification
    //service-&gt;writeDescriptor(notification, QByteArray::fromHex(&quot;0000&quot;));

    // wait until descriptorWritten() signal is emitted
    // to confirm successful write
</db:programlisting>
<db:para>The example shows a battery level characteristic which updates the central on every value change. The notifications are provided via the <db:link xlink:href="qlowenergyservice.xml#characteristicChanged">characteristicChanged</db:link>() signal. More details about this mechanism are provided by the <db:link xlink:href="https://developer.bluetooth.org/gatt/descriptors/Pages/DescriptorViewer.aspx?u=org.bluetooth.descriptor.gatt.client_characteristic_configuration.xml">Bluetooth Specification</db:link>.</db:para>
</db:section>
<db:section xml:id="service-data-sharing">
<db:title>Service Data Sharing</db:title>
<db:para>Each <db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link> instance shares its internal states and information with other <db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link> instance of the same service. If one instance initiates the discovery of the service details, all remaining instances automatically follow. Therefore the following snippet always works:</db:para>
<db:programlisting language="cpp">    QLowEnergyService *first, *second;
    QLowEnergyController control(remoteDevice);
    control.connectToDevice();

    // waiting for connection

    first = control.createServiceObject(QBluetoothUuid::ServiceClassUuid::BatteryService);
    second = control.createServiceObject(QBluetoothUuid::ServiceClassUuid::BatteryService);
    Q_ASSERT(first-&gt;state() == QLowEnergyService::RemoteService);
    Q_ASSERT(first-&gt;state() == second-&gt;state());

    first-&gt;discoverDetails();

    Q_ASSERT(first-&gt;state() == QLowEnergyService::RemoteServiceDiscovering);
    Q_ASSERT(first-&gt;state() == second-&gt;state());
</db:programlisting>
<db:para>Other operations such as calls to <db:link xlink:href="qlowenergyservice.xml#readCharacteristic">readCharacteristic</db:link>(), <db:link xlink:href="qlowenergyservice.xml#readDescriptor">readDescriptor</db:link>(), <db:link xlink:href="qlowenergyservice.xml#writeCharacteristic">writeCharacteristic</db:link>(), <db:link xlink:href="qlowenergyservice.xml#writeDescriptor">writeDescriptor</db:link>() or the invalidation of the service due to the related <db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link> disconnecting from the device are shared the same way.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link></db:member>
<db:member><db:link xlink:href="qlowenergycharacteristic.xml">QLowEnergyCharacteristic</db:link></db:member>
<db:member><db:link xlink:href="qlowenergydescriptor.xml">QLowEnergyDescriptor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DiscoveryMode-enum">
<db:title>[since 6.2] enum QLowEnergyService::DiscoveryMode</db:title>
<db:para>This enum lists service discovery modes. All modes discover the characteristics of the service and the descriptors of the characteristics. The modes differ in whether characteristic values and descriptors are read.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::FullDiscovery</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>During a full discovery, all characteristics are discovered. All characteristic values and descriptors are read.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::SkipValueDiscovery</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>During a minimal discovery, all characteristics are discovered. Characteristic values and descriptors are not read.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergyservice.xml#discoverDetails">discoverDetails</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ServiceError-enum">
<db:title>enum QLowEnergyService::ServiceError</db:title>
<db:para>This enum describes all possible error conditions during the service's existence. The <db:link xlink:href="qlowenergyservice.xml#error">error</db:link>() function returns the last occurred error.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::OperationError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An operation was attempted while the service was not ready. An example might be the attempt to write to the service while it was not yet in the <db:link xlink:href="qlowenergyservice.xml#ServiceState-enum">ServiceDiscovered</db:link> <db:link xlink:href="qlowenergyservice.xml#state">state</db:link>() or the service is invalid due to a loss of connection to the peripheral device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::CharacteristicReadError (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>An attempt to read a characteristic value failed. For example, it might be triggered in response to a call to <db:link xlink:href="qlowenergyservice.xml#readCharacteristic">readCharacteristic</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::CharacteristicWriteError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>An attempt to write a new value to a characteristic failed. For example, it might be triggered when attempting to write to a read-only characteristic.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::DescriptorReadError (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>An attempt to read a descriptor value failed. For example, it might be triggered in response to a call to <db:link xlink:href="qlowenergyservice.xml#readDescriptor">readDescriptor</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::DescriptorWriteError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>An attempt to write a new value to a descriptor failed. For example, it might be triggered when attempting to write to a read-only descriptor.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::UnknownError (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>An unknown error occurred when interacting with the service.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ServiceState-enum">
<db:title>enum QLowEnergyService::ServiceState</db:title>
<db:para>This enum describes the <db:link xlink:href="qlowenergyservice.xml#state">state</db:link>() of the service object.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::InvalidService</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A service can become invalid when it looses the connection to the underlying device. Even though the connection may be lost it retains its last information. An invalid service cannot become valid anymore even if the connection to the device is re-established.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::RemoteService</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The service details are yet to be discovered by calling <db:link xlink:href="qlowenergyservice.xml#discoverDetails">discoverDetails</db:link>(). The only reliable pieces of information are its <db:link xlink:href="qlowenergyservice.xml#serviceUuid">serviceUuid</db:link>() and <db:link xlink:href="qlowenergyservice.xml#serviceName">serviceName</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::RemoteServiceDiscovering</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The service details are being discovered.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::RemoteServiceDiscovered</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The service details have been discovered.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::LocalService (since Qt 5.7)</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The service is associated with a controller object in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">peripheral role</db:link>. Such service objects do not change their state.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::DiscoveryRequired</db:code></db:para>
</db:td>
<db:td><db:code>RemoteService</db:code></db:td>
<db:td>
<db:para>Deprecated. Was renamed to RemoteService.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::DiscoveringService</db:code></db:para>
</db:td>
<db:td><db:code>RemoteServiceDiscovering</db:code></db:td>
<db:td>
<db:para>Deprecated. Was renamed to RemoteServiceDiscovering.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::ServiceDiscovered</db:code></db:para>
</db:td>
<db:td><db:code>RemoteServiceDiscovered</db:code></db:td>
<db:td>
<db:para>Deprecated. Was renamed to RemoteServiceDiscovered.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ServiceType-enum">
<db:title>enum QLowEnergyService::ServiceType</db:title>
<db:bridgehead renderas="sect2">flags QLowEnergyService::ServiceTypes</db:bridgehead>
<db:para>This enum describes the type of the service.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::PrimaryService</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>The service is a top-level/primary service. If this type flag is not set, the service is considered to be a secondary service. Each service may be included by another service which is indicated by IncludedService.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::IncludedService</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>The service is included by another service. On some platforms, this flag cannot be determined until the service that includes the current service was discovered.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>ServiceTypes</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;ServiceType&gt;. </db:code>It stores an OR combination of <db:code>ServiceType</db:code> values.</db:para>
</db:section>
<db:section xml:id="WriteMode-enum">
<db:title>enum QLowEnergyService::WriteMode</db:title>
<db:para>This enum describes the mode to be used when writing a characteristic value. The characteristic advertises its supported write modes via its <db:link xlink:href="qlowenergycharacteristic.xml#properties">properties</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::WriteWithResponse</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>If a characteristic is written using this mode, the peripheral shall send a write confirmation. If the operation is successful, the confirmation is emitted via the <db:link xlink:href="qlowenergyservice.xml#characteristicWritten">characteristicWritten</db:link>() signal. Otherwise the <db:link xlink:href="qlowenergyservice.xml#ServiceError-enum">CharacteristicWriteError</db:link> is emitted. A characteristic must have set the <db:link xlink:href="qlowenergycharacteristic.xml#PropertyType-enum">QLowEnergyCharacteristic::Write</db:link> property to support this write mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::WriteWithoutResponse</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>If a characteristic is written using this mode, the remote peripheral shall not send a write confirmation. The operation's success cannot be determined and the payload must not be longer than 20 bytes. A characteristic must have set the <db:link xlink:href="qlowenergycharacteristic.xml#PropertyType-enum">QLowEnergyCharacteristic::WriteNoResponse</db:link> property to support this write mode. Its adavantage is a quicker write operation as it may happen in between other device interactions.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link></db:emphasis>::WriteSigned (since Qt 5.7)</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>If a characteristic is written using this mode, the remote peripheral shall not send a write confirmation. The operation's success cannot be determined and the payload must not be longer than 8 bytes. A bond must exist between the two devices and the link must not be encrypted. A characteristic must have set the <db:link xlink:href="qlowenergycharacteristic.xml#PropertyType-enum">QLowEnergyCharacteristic::WriteSigned</db:link> property to support this write mode. This value is currently only supported on Android and on Linux with BlueZ 5 and a kernel version 3.7 or newer.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QLowEnergyService">
<db:title>[virtual noexcept] QLowEnergyService::~QLowEnergyService()</db:title>
<db:para>Destroys the <db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link> instance.</db:para>
</db:section>
<db:section xml:id="characteristic">
<db:title>QLowEnergyCharacteristic QLowEnergyService::characteristic(const QBluetoothUuid &amp;<db:emphasis>uuid</db:emphasis>) const</db:title>
<db:para>Returns the matching characteristic for <db:code role="parameter">uuid</db:code>; otherwise an invalid characteristic.</db:para>
<db:para>The returned characteristic is invalid if this service instance's <db:link xlink:href="qlowenergyservice.xml#discoverDetails">discoverDetails</db:link>() was not yet called or there are no characteristics with a matching <db:code role="parameter">uuid</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergyservice.xml#characteristics">characteristics</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="characteristicChanged">
<db:title>void QLowEnergyService::characteristicChanged(const QLowEnergyCharacteristic &amp;<db:emphasis>characteristic</db:emphasis>, const QByteArray &amp;<db:emphasis>newValue</db:emphasis>)</db:title>
<db:para>If the associated controller object is in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">central</db:link> role, this signal is emitted when the value of <db:code role="parameter">characteristic</db:code> is changed by an event on the peripheral/device side. In that case, the signal emission implies that change notifications must have been activated via the characteristic's <db:link xlink:href="qbluetoothuuid.xml#DescriptorType-enum">ClientCharacteristicConfiguration</db:link> descriptor prior to the change event on the peripheral. More details on how this might be done can be found further <db:link xlink:href="qlowenergyservice.xml#notifications">above</db:link>.</db:para>
<db:para>If the controller is in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">peripheral</db:link> role, that is, the service object was created via <db:link xlink:href="qlowenergycontroller.xml#addService">QLowEnergyController::addService</db:link>, the signal is emitted when a GATT client has written the value of the characteristic using a write request or command.</db:para>
<db:para>The <db:code role="parameter">newValue</db:code> parameter contains the updated value of the <db:code role="parameter">characteristic</db:code>.</db:para>
</db:section>
<db:section xml:id="characteristicRead">
<db:title>void QLowEnergyService::characteristicRead(const QLowEnergyCharacteristic &amp;<db:emphasis>characteristic</db:emphasis>, const QByteArray &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This signal is emitted when the read request for <db:code role="parameter">characteristic</db:code> successfully returned its <db:code role="parameter">value</db:code>. The signal might be triggered by calling characteristicRead(). If the read operation is not successful, the <db:link xlink:href="qlowenergyservice.xml#errorOccurred">errorOccurred</db:link>() signal is emitted using the <db:link xlink:href="qlowenergyservice.xml#ServiceError-enum">CharacteristicReadError</db:link> flag.</db:para>
<db:note>
<db:para>This signal is only emitted for Central Role related use cases.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergyservice.xml#readCharacteristic">readCharacteristic</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="characteristicWritten">
<db:title>void QLowEnergyService::characteristicWritten(const QLowEnergyCharacteristic &amp;<db:emphasis>characteristic</db:emphasis>, const QByteArray &amp;<db:emphasis>newValue</db:emphasis>)</db:title>
<db:para>This signal is emitted when the value of <db:code role="parameter">characteristic</db:code> is successfully changed to <db:code role="parameter">newValue</db:code>. The change must have been triggered by calling <db:link xlink:href="qlowenergyservice.xml#writeCharacteristic">writeCharacteristic</db:link>(). If the write operation is not successful, the <db:link xlink:href="qlowenergyservice.xml#errorOccurred">errorOccurred</db:link>() signal is emitted using the <db:link xlink:href="qlowenergyservice.xml#ServiceError-enum">CharacteristicWriteError</db:link> flag.</db:para>
<db:para>The reception of the written signal can be considered as a sign that the target device received the to-be-written value and reports back the status of write request.</db:para>
<db:note>
<db:para>If <db:link xlink:href="qlowenergyservice.xml#writeCharacteristic">writeCharacteristic</db:link>() is called using the <db:link xlink:href="qlowenergyservice.xml#WriteMode-enum">WriteWithoutResponse</db:link> mode, this signal and the <db:link xlink:href="qlowenergyservice.xml#errorOccurred">errorOccurred</db:link>() are never emitted.</db:para>
</db:note>
<db:note>
<db:para>This signal is only emitted for Central Role related use cases.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergyservice.xml#writeCharacteristic">writeCharacteristic</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="characteristics">
<db:title>QList&lt;QLowEnergyCharacteristic&gt; QLowEnergyService::characteristics() const</db:title>
<db:para>Returns all characteristics associated with this <db:code>QLowEnergyService</db:code> instance.</db:para>
<db:para>The returned list is empty if this service instance's <db:link xlink:href="qlowenergyservice.xml#discoverDetails">discoverDetails</db:link>() was not yet called or there are no known characteristics.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergyservice.xml#characteristic">characteristic</db:link>()</db:member>
<db:member><db:link xlink:href="qlowenergyservice.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qlowenergyservice.xml#discoverDetails">discoverDetails</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains">
<db:title>bool QLowEnergyService::contains(const QLowEnergyCharacteristic &amp;<db:emphasis>characteristic</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">characteristic</db:code> belongs to this service; otherwise <db:code>false</db:code>.</db:para>
<db:para>A characteristic belongs to a service if <db:link xlink:href="qlowenergyservice.xml#characteristics">characteristics</db:link>() contains the <db:code role="parameter">characteristic</db:code>.</db:para>
</db:section>
<db:section xml:id="contains-1">
<db:title>bool QLowEnergyService::contains(const QLowEnergyDescriptor &amp;<db:emphasis>descriptor</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">descriptor</db:code> belongs to this service; otherwise <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="descriptorRead">
<db:title>void QLowEnergyService::descriptorRead(const QLowEnergyDescriptor &amp;<db:emphasis>descriptor</db:emphasis>, const QByteArray &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This signal is emitted when the read request for <db:code role="parameter">descriptor</db:code> successfully returned its <db:code role="parameter">value</db:code>. The signal might be triggered by calling descriptorRead(). If the read operation is not successful, the <db:link xlink:href="qlowenergyservice.xml#errorOccurred">errorOccurred</db:link>() signal is emitted using the <db:link xlink:href="qlowenergyservice.xml#ServiceError-enum">DescriptorReadError</db:link> flag.</db:para>
<db:note>
<db:para>This signal is only emitted for Central Role related use cases.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergyservice.xml#readDescriptor">readDescriptor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="descriptorWritten">
<db:title>void QLowEnergyService::descriptorWritten(const QLowEnergyDescriptor &amp;<db:emphasis>descriptor</db:emphasis>, const QByteArray &amp;<db:emphasis>newValue</db:emphasis>)</db:title>
<db:para>This signal is emitted when the value of <db:code role="parameter">descriptor</db:code> is successfully changed to <db:code role="parameter">newValue</db:code>. If the associated controller object is in the <db:link xlink:href="qlowenergycontroller.xml#Role-enum">central</db:link> role, the change must have been caused by calling <db:link xlink:href="qlowenergyservice.xml#writeDescriptor">writeDescriptor</db:link>(). Otherwise, the signal is the result of a write request or command from a GATT client to the respective descriptor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergyservice.xml#writeDescriptor">writeDescriptor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="discoverDetails">
<db:title>void QLowEnergyService::discoverDetails(QLowEnergyService::DiscoveryMode <db:emphasis>mode</db:emphasis> = FullDiscovery)</db:title>
<db:para>Initiates discovery of the service's included services, characteristics, and their associated descriptors.</db:para>
<db:para>The discovery process is indicated via the <db:link xlink:href="qlowenergyservice.xml#stateChanged">stateChanged</db:link>() signal. After creation, the service is in <db:link xlink:href="qlowenergyservice.xml#ServiceState-enum">DiscoveryRequired</db:link> state. When calling discoverDetails() it transitions to <db:link xlink:href="qlowenergyservice.xml#ServiceState-enum">DiscoveringService</db:link>. After completion of detail discovery, it transitions to <db:link xlink:href="qlowenergyservice.xml#ServiceState-enum">ServiceDiscovered</db:link> state. On each transition, the <db:link xlink:href="qlowenergyservice.xml#stateChanged">stateChanged</db:link>() signal is emitted. Depending on the argument <db:code role="parameter">mode</db:code>, a <db:link xlink:href="qlowenergyservice.xml#DiscoveryMode-enum">FullDiscovery</db:link> or a <db:link xlink:href="qlowenergyservice.xml#DiscoveryMode-enum">SkipValueDiscovery</db:link> is performed. In any case, all services and characteristics are discovered. A <db:link xlink:href="qlowenergyservice.xml#DiscoveryMode-enum">FullDiscovery</db:link> proceeds and reads all characteristic values and descriptors. A <db:link xlink:href="qlowenergyservice.xml#DiscoveryMode-enum">SkipValueDiscovery</db:link> does not read characteristic values and descriptors. A <db:link xlink:href="qlowenergyservice.xml#DiscoveryMode-enum">SkipValueDiscovery</db:link> has two advantages. First, it is faster. Second, it circumvents bugs in some devices which wrongly advertise characteristics or descriptors as readable but nevertheless do not permit reads on them. This can trigger unpredictable behavior. After a <db:link xlink:href="qlowenergyservice.xml#DiscoveryMode-enum">SkipValueDiscovery</db:link>, it is necessary to call <db:link xlink:href="qlowenergyservice.xml#readCharacteristic">readCharacteristic</db:link>() / <db:link xlink:href="qlowenergyservice.xml#readDescriptor">readDescriptor</db:link>() and wait for them to finish successfully before accessing the value of a characteristic or descriptor.</db:para>
<db:para>The argument <db:code role="parameter">mode</db:code> was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergyservice.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>QLowEnergyService::ServiceError QLowEnergyService::error() const</db:title>
<db:para>Returns the last occurred error or <db:link xlink:href="qlowenergyservice.xml#ServiceError-enum">NoError</db:link>.</db:para>
</db:section>
<db:section xml:id="errorOccurred">
<db:title>[since 6.2] void QLowEnergyService::errorOccurred(QLowEnergyService::ServiceError <db:emphasis>newError</db:emphasis>)</db:title>
<db:para>This signal is emitted when an error occurrs. The <db:code role="parameter">newError</db:code> parameter describes the error that occurred.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="includedServices">
<db:title>QList&lt;QBluetoothUuid&gt; QLowEnergyService::includedServices() const</db:title>
<db:para>Returns the UUIDs of all services which are included by the current service.</db:para>
<db:para>The returned list is empty if this service instance's <db:link xlink:href="qlowenergyservice.xml#discoverDetails">discoverDetails</db:link>() was not yet called or there are no known characteristics.</db:para>
<db:para>It is possible that an included service contains yet another service. Such second level includes have to be obtained via their relevant first level <db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link> instance. Technically, this could create a circular dependency.</db:para>
<db:para><db:link xlink:href="qlowenergycontroller.xml#createServiceObject">QLowEnergyController::createServiceObject</db:link>() should be used to obtain service instances for each of the UUIDs.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergycontroller.xml#createServiceObject">createServiceObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readCharacteristic">
<db:title>void QLowEnergyService::readCharacteristic(const QLowEnergyCharacteristic &amp;<db:emphasis>characteristic</db:emphasis>)</db:title>
<db:para>Reads the value of <db:code role="parameter">characteristic</db:code>. If the operation is successful, the <db:link xlink:href="qlowenergyservice.xml#characteristicRead">characteristicRead</db:link>() signal is emitted; otherwise the <db:link xlink:href="qlowenergyservice.xml#ServiceError-enum">CharacteristicReadError</db:link> is set. In general, a <db:code role="parameter">characteristic</db:code> is readable, if its <db:link xlink:href="qlowenergycharacteristic.xml#PropertyType-enum">QLowEnergyCharacteristic::Read</db:link> property is set.</db:para>
<db:para>All descriptor and characteristic requests towards the same remote device are serialised. A queue is employed when issuing multiple requests at the same time. The queue does not eliminate duplicated read requests for the same characteristic.</db:para>
<db:para>A characteristic can only be read if the service is in the <db:link xlink:href="qlowenergyservice.xml#ServiceState-enum">ServiceDiscovered</db:link> state and belongs to the service. If one of these conditions is not true the <db:link xlink:href="qlowenergyservice.xml#ServiceError-enum">QLowEnergyService::OperationError</db:link> is set.</db:para>
<db:note>
<db:para>Calling this function despite <db:link xlink:href="qlowenergycharacteristic.xml#properties">QLowEnergyCharacteristic::properties</db:link>() reporting a non-readable property always attempts to read the characteristic's value on the hardware. If the hardware returns with an error the <db:link xlink:href="qlowenergyservice.xml#ServiceError-enum">CharacteristicReadError</db:link> is set.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergyservice.xml#characteristicRead">characteristicRead</db:link>()</db:member>
<db:member><db:link xlink:href="qlowenergyservice.xml#writeCharacteristic">writeCharacteristic</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readDescriptor">
<db:title>void QLowEnergyService::readDescriptor(const QLowEnergyDescriptor &amp;<db:emphasis>descriptor</db:emphasis>)</db:title>
<db:para>Reads the value of <db:code role="parameter">descriptor</db:code>. If the operation is successful, the <db:link xlink:href="qlowenergyservice.xml#descriptorRead">descriptorRead</db:link>() signal is emitted; otherwise the <db:link xlink:href="qlowenergyservice.xml#ServiceError-enum">DescriptorReadError</db:link> is set.</db:para>
<db:para>All descriptor and characteristic requests towards the same remote device are serialised. A queue is employed when issuing multiple requests at the same time. The queue does not eliminate duplicated read requests for the same descriptor.</db:para>
<db:para>A descriptor can only be read if the service is in the <db:link xlink:href="qlowenergyservice.xml#ServiceState-enum">ServiceDiscovered</db:link> state and the descriptor belongs to the service. If one of these conditions is not true the <db:link xlink:href="qlowenergyservice.xml#ServiceError-enum">QLowEnergyService::OperationError</db:link> is set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergyservice.xml#descriptorRead">descriptorRead</db:link>()</db:member>
<db:member><db:link xlink:href="qlowenergyservice.xml#writeDescriptor">writeDescriptor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="serviceName">
<db:title>QString QLowEnergyService::serviceName() const</db:title>
<db:para>Returns the name of the service; otherwise an empty string.</db:para>
<db:para>The returned name can only be retrieved if <db:link xlink:href="qlowenergyservice.xml#serviceUuid">serviceUuid</db:link>() is a <db:link xlink:href="https://developer.bluetooth.org/gatt/services/Pages/ServicesHome.aspx">well-known UUID</db:link>.</db:para>
</db:section>
<db:section xml:id="serviceUuid">
<db:title>QBluetoothUuid QLowEnergyService::serviceUuid() const</db:title>
<db:para>Returns the UUID of the service; otherwise a null UUID.</db:para>
</db:section>
<db:section xml:id="state">
<db:title>QLowEnergyService::ServiceState QLowEnergyService::state() const</db:title>
<db:para>Returns the current state of the service.</db:para>
<db:para>If the device's service was instantiated for the first time, the object's state is <db:link xlink:href="qlowenergyservice.xml#ServiceState-enum">DiscoveryRequired</db:link>. The state of all service objects which point to the same service on the peripheral device are always equal. This is caused by the shared nature of the internal object data. Therefore any service object instance created after the first one has a state equal to already existing instances.</db:para>
<db:para>A service becomes invalid if the <db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link> disconnects from the remote device. An invalid service retains its internal state at the time of the disconnect event. This implies that once the service details are discovered they can even be retrieved from an invalid service. This permits scenarios where the device connection is established, the service details are retrieved and the device immediately disconnected to permit the next device to connect to the peripheral device.</db:para>
<db:para>However, under normal circumstances the connection should remain to avoid repeated discovery of services and their details. The discovery may take a while and the client can subscribe to ongoing change notifications.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergyservice.xml#stateChanged">stateChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QLowEnergyService::stateChanged(QLowEnergyService::ServiceState <db:emphasis>newState</db:emphasis>)</db:title>
<db:para>This signal is emitted when the service's state changes. The <db:code role="parameter">newState</db:code> can also be retrieved via <db:link xlink:href="qlowenergyservice.xml#state">state</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergyservice.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>QLowEnergyService::ServiceTypes QLowEnergyService::type() const</db:title>
<db:para>Returns the type of the service.</db:para>
<db:note>
<db:para>The type attribute cannot be relied upon until the service has reached the <db:link xlink:href="qlowenergyservice.xml#ServiceState-enum">ServiceDiscovered</db:link> state. This field is initialised with <db:link xlink:href="qlowenergyservice.xml#ServiceType-enum">PrimaryService</db:link>.</db:para>
</db:note>
<db:note>
<db:para>On Android, it is not possible to determine whether a service is a primary or secondary service. Therefore all services have the <db:link xlink:href="qlowenergyservice.xml#ServiceType-enum">PrimaryService</db:link> flag set.</db:para>
</db:note>
</db:section>
<db:section xml:id="writeCharacteristic">
<db:title>void QLowEnergyService::writeCharacteristic(const QLowEnergyCharacteristic &amp;<db:emphasis>characteristic</db:emphasis>, const QByteArray &amp;<db:emphasis>newValue</db:emphasis>, QLowEnergyService::WriteMode <db:emphasis>mode</db:emphasis> = WriteWithResponse)</db:title>
<db:para>Writes <db:code role="parameter">newValue</db:code> as value for the <db:code role="parameter">characteristic</db:code>. The exact semantics depend on the role that the associated controller object is in.</db:para>
<db:para><db:emphasis role="bold">Central role</db:emphasis></db:para>
<db:para>The call results in a write request or command to a remote peripheral. If the operation is successful, the <db:link xlink:href="qlowenergyservice.xml#characteristicWritten">characteristicWritten</db:link>() signal is emitted; otherwise the <db:link xlink:href="qlowenergyservice.xml#ServiceError-enum">CharacteristicWriteError</db:link> is set. Calling this function does not trigger the a <db:link xlink:href="qlowenergyservice.xml#characteristicChanged">characteristicChanged</db:link>() signal unless the peripheral itself changes the value again after the current write request.</db:para>
<db:para>The <db:code role="parameter">mode</db:code> parameter determines whether the remote device should send a write confirmation. The to-be-written <db:code role="parameter">characteristic</db:code> must support the relevant write mode. The characteristic's supported write modes are indicated by its <db:link xlink:href="qlowenergycharacteristic.xml#PropertyType-enum">QLowEnergyCharacteristic::Write</db:link> and <db:link xlink:href="qlowenergycharacteristic.xml#PropertyType-enum">QLowEnergyCharacteristic::WriteNoResponse</db:link> properties.</db:para>
<db:para>All descriptor and characteristic write requests towards the same remote device are serialised. A queue is employed when issuing multiple write requests at the same time. The queue does not eliminate duplicated write requests for the same characteristic. For example, if the same descriptor is set to the value A and immediately afterwards to B, the two write request are executed in the given order.</db:para>
<db:note>
<db:para>Currently, it is not possible to use signed or reliable writes as defined by the Bluetooth specification.</db:para>
</db:note>
<db:para>A characteristic can only be written if this service is in the <db:link xlink:href="qlowenergyservice.xml#ServiceState-enum">ServiceDiscovered</db:link> state and belongs to the service. If one of these conditions is not true the <db:link xlink:href="qlowenergyservice.xml#ServiceError-enum">QLowEnergyService::OperationError</db:link> is set.</db:para>
<db:note>
<db:para>Calling this function despite <db:link xlink:href="qlowenergycharacteristic.xml#properties">QLowEnergyCharacteristic::properties</db:link>() reporting a non-writable property always attempts to write to the hardware. Similarly, a <db:link xlink:href="qlowenergyservice.xml#WriteMode-enum">WriteWithoutResponse</db:link> is sent to the hardware too although the characteristic may only support <db:link xlink:href="qlowenergyservice.xml#WriteMode-enum">WriteWithResponse</db:link>. If the hardware returns with an error the <db:link xlink:href="qlowenergyservice.xml#ServiceError-enum">CharacteristicWriteError</db:link> is set.</db:para>
</db:note>
<db:para><db:emphasis role="bold">Peripheral role</db:emphasis></db:para>
<db:para>The call results in the value of the characteristic getting updated in the local database.</db:para>
<db:para>If a client is currently connected and it has enabled notifications or indications for the characteristic, the respective information will be sent. If a device has enabled notifications or indications for the characteristic and that device is currently not connected, but a bond exists between it and the local device, then the notification or indication will be sent on the next reconnection.</db:para>
<db:para>If there is a constraint on the length of the characteristic value and <db:code role="parameter">newValue</db:code> does not adhere to that constraint, the behavior is unspecified.</db:para>
<db:note>
<db:para>The <db:code role="parameter">mode</db:code> argument is ignored in peripheral mode.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergyservice.xml#characteristicWritten">QLowEnergyService::characteristicWritten</db:link>()</db:member>
<db:member><db:link xlink:href="qlowenergyservice.xml#readCharacteristic">QLowEnergyService::readCharacteristic</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeDescriptor">
<db:title>void QLowEnergyService::writeDescriptor(const QLowEnergyDescriptor &amp;<db:emphasis>descriptor</db:emphasis>, const QByteArray &amp;<db:emphasis>newValue</db:emphasis>)</db:title>
<db:para>Writes <db:code role="parameter">newValue</db:code> as value for <db:code role="parameter">descriptor</db:code>. The exact semantics depend on the role that the associated controller object is in.</db:para>
<db:para><db:emphasis role="bold">Central role</db:emphasis></db:para>
<db:para>A call to this function results in a write request to the remote device. If the operation is successful, the <db:link xlink:href="qlowenergyservice.xml#descriptorWritten">descriptorWritten</db:link>() signal is emitted; otherwise the <db:link xlink:href="qlowenergyservice.xml#ServiceError-enum">DescriptorWriteError</db:link> is emitted.</db:para>
<db:para>All descriptor and characteristic requests towards the same remote device are serialised. A queue is employed when issuing multiple write requests at the same time. The queue does not eliminate duplicated write requests for the same descriptor. For example, if the same descriptor is set to the value A and immediately afterwards to B, the two write request are executed in the given order.</db:para>
<db:para>A descriptor can only be written if this service is in the <db:link xlink:href="qlowenergyservice.xml#ServiceState-enum">ServiceDiscovered</db:link> state, belongs to the service. If one of these conditions is not true the <db:link xlink:href="qlowenergyservice.xml#ServiceError-enum">QLowEnergyService::OperationError</db:link> is set.</db:para>
<db:para><db:emphasis role="bold">Peripheral Role</db:emphasis></db:para>
<db:para>The value is written to the local service database. If the contents of <db:code role="parameter">newValue</db:code> are not valid for <db:code role="parameter">descriptor</db:code>, the behavior is unspecified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlowenergyservice.xml#descriptorWritten">descriptorWritten</db:link>()</db:member>
<db:member><db:link xlink:href="qlowenergyservice.xml#readDescriptor">readDescriptor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
