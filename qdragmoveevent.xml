<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QDragMoveEvent Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdragmoveevent.xml">QDragMoveEvent</db:link> class provides an event which is sent while a drag and drop action is in progress.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDragMoveEvent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdropevent.xml" xlink:role="class">QDropEvent</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdragenterevent.xml" xlink:role="class">QDragEnterEvent</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDragMoveEvent is part of <db:simplelist><db:member>events</db:member><db:member>draganddrop</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A widget will receive drag move events repeatedly while the drag is within its boundaries, if it accepts <db:link xlink:href="">drop events</db:link> and <db:link xlink:href="">enter events</db:link>. The widget should examine the event to see what kind of <db:link xlink:href="qdropevent.xml#mimeData">data</db:link> it provides, and call the <db:link xlink:href="qdragmoveevent.xml#accept-1">accept</db:link>() function to accept the drop if appropriate.</db:para>
<db:para>The rectangle supplied by the <db:link xlink:href="qdragmoveevent.xml#answerRect">answerRect</db:link>() function can be used to restrict drops to certain parts of the widget. For example, we can check whether the rectangle intersects with the geometry of a certain child widget and only call <db:link xlink:href="qdropevent.xml#acceptProposedAction">acceptProposedAction</db:link>() if that is the case.</db:para>
<db:para>Note that this class inherits most of its functionality from <db:link xlink:href="qdropevent.xml">QDropEvent</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdragenterevent.xml">QDragEnterEvent</db:link></db:member>
<db:member><db:link xlink:href="qdragleaveevent.xml">QDragLeaveEvent</db:link></db:member>
<db:member><db:link xlink:href="qdropevent.xml">QDropEvent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDragMoveEvent">
<db:title>QDragMoveEvent::QDragMoveEvent(const QPoint &amp;<db:emphasis>pos</db:emphasis>, Qt::DropActions <db:emphasis>actions</db:emphasis>, const QMimeData *<db:emphasis>data</db:emphasis>, Qt::MouseButtons <db:emphasis>buttons</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>, QEvent::Type <db:emphasis>type</db:emphasis> = DragMove)</db:title>
<db:para>Creates a <db:link xlink:href="qdragmoveevent.xml">QDragMoveEvent</db:link> of the required <db:code role="parameter">type</db:code> indicating that the mouse is at position <db:code role="parameter">pos</db:code> given within a widget.</db:para>
<db:para>The mouse and keyboard states are specified by <db:code role="parameter">buttons</db:code> and <db:code role="parameter">modifiers</db:code>, and the <db:code role="parameter">actions</db:code> describe the types of drag and drop operation that are possible. The drag data is passed as MIME-encoded information in <db:code role="parameter">data</db:code>.</db:para>
<db:warning>
<db:para>Do not attempt to create a <db:link xlink:href="qdragmoveevent.xml">QDragMoveEvent</db:link> yourself. These objects rely on Qt's internal state.</db:para>
</db:warning>
</db:section>
<db:section xml:id="dtor.QDragMoveEvent">
<db:title>[virtual noexcept] QDragMoveEvent::~QDragMoveEvent()</db:title>
<db:para>Destroys the event.</db:para>
</db:section>
<db:section xml:id="accept">
<db:title>void QDragMoveEvent::accept(const QRect &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:para>The same as <db:link xlink:href="qdragmoveevent.xml#accept-1">accept</db:link>(), but also notifies that future moves will also be acceptable if they remain within the <db:code role="parameter">rectangle</db:code> given on the widget. This can improve performance, but may also be ignored by the underlying system.</db:para>
<db:para>If the rectangle is empty, drag move events will be sent continuously. This is useful if the source is scrolling in a timer event.</db:para>
</db:section>
<db:section xml:id="accept-1">
<db:title>void QDragMoveEvent::accept()</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Calls <db:link xlink:href="qevent.xml#accept">QDropEvent::accept</db:link>().</db:para>
</db:section>
<db:section xml:id="answerRect">
<db:title>QRect QDragMoveEvent::answerRect() const</db:title>
<db:para>Returns the rectangle in the widget where the drop will occur if accepted. You can use this information to restrict drops to certain places on the widget.</db:para>
</db:section>
<db:section xml:id="ignore">
<db:title>void QDragMoveEvent::ignore(const QRect &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:para>The opposite of the accept(const <db:link xlink:href="qrect.xml">QRect</db:link>&amp;) function. Moves within the <db:code role="parameter">rectangle</db:code> are not acceptable, and will be ignored.</db:para>
</db:section>
<db:section xml:id="ignore-1">
<db:title>void QDragMoveEvent::ignore()</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Calls <db:link xlink:href="qevent.xml#ignore">QDropEvent::ignore</db:link>().</db:para>
</db:section>
</db:section>
</db:article>
