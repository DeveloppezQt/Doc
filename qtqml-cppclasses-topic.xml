<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Important C++ Classes Provided By The Qt QML Module</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Overview of the C++ classes provided by the Qt QML module.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The <db:link xlink:href="qtqml-index.xml">Qt QML</db:link> module provides C++ classes which implement the QML framework. Clients can use these classes to interact with the QML run-time (for example, by injecting data or invoking methods on objects), and to instantiate a hierarchy of objects from a QML document. The Qt QML module provides more C++ API than just the classes listed here, however the classes listed here provide the foundations of the QML runtime and the core concepts of QML.</db:para>
<db:section xml:id="qml-runtime">
<db:title>QML Runtime</db:title>
<db:para>A typical QML application with a C++ entry-point will instantiate a QQmlEngine and then use a QQmlComponent to load a QML document. The engine provides a default QQmlContext which will be the top-level evaluation context used for evaluating functions and expressions defined in the QML document. The object hierarchy defined in the QML document will be instantiated by calling the <db:link xlink:href="">create()</db:link> function of the QQmlComponent instance, assuming that no errors were encountered during document loading.</db:para>
<db:para>The client may wish to modify the QQmlContext provided by the engine, by injecting properties or objects into the context. They can call the <db:link xlink:href="">QQmlEngine::rootContext()</db:link> function to access the top-level context.</db:para>
<db:para>After instantiating the object, the client will usually pass control to the application event loop so that user input events (like mouse-clicks) can be delivered and handled by the application.</db:para>
<db:note>
<db:para>The Qt Quick module provides a convenience class, QQuickView, which provides a QML runtime and visual window for displaying a QML application.</db:para>
</db:note>
<db:section xml:id="the-qqmlengine-class">
<db:title>The QQmlEngine Class</db:title>
<db:para>The QQmlEngine class provides an engine which can manage a hierarchy of objects which is defined in a QML document. It provides a root QML context within which expressions are evaluated, and ensures that properties of objects are updated correctly when required.</db:para>
<db:para>A QQmlEngine allows the configuration of global settings that apply to all of the objects it manages; for example, the QNetworkAccessManager to be used for network communications, and the file path to be used for persistent storage.</db:para>
<db:para>See the <db:link xlink:href="qqmlengine-qtqml-proxy.xml">QQmlEngine</db:link> class documentation for in-depth information about what the QQmlEngine class provides, and how it can be used in an application.</db:para>
</db:section>
<db:section xml:id="the-qqmlcontext-class">
<db:title>The QQmlContext Class</db:title>
<db:para>The QQmlContext class provides a context for object instantiation and expression evaluation. All objects are instantiated in a particular context, and all of the expressions which are evaluated while an application is running are evaluated within a particular context. This context defines how symbols are resolved, and thus which values the expression operates on.</db:para>
<db:para>See the QQmlContext class documentation for in-depth information about how to modify the evaluation context of an object by adding or removing properties of a QQmlContext, and how to access the context for an object.</db:para>
</db:section>
</db:section>
<db:section xml:id="dynamic-object-instantiation-and-expression-evaluation">
<db:title>Dynamic Object Instantiation and Expression Evaluation</db:title>
<db:para>Dynamic object instantiation and dynamic expression evaluation are both core concepts in QML. QML documents define object types which can be instantiated at run-time using a QQmlComponent. An instance of the QQmlComponent class can be created in C++ directly, or via the <db:link xlink:href="qml-qtqml-qt.xml#createComponent-method">Qt.createComponent</db:link>() function in imperative QML code. Arbitrary expressions can be calculated in C++ via the QQmlExpression class, and such expressions can interact directly the QML context.</db:para>
<db:section xml:id="the-qqmlcomponent-class">
<db:title>The QQmlComponent Class</db:title>
<db:para>The QQmlComponent class can be used to load a QML document. It requires a QQmlEngine in order to instantiate the hierarchy of objects defined in the QML document.</db:para>
<db:para>See the QQmlComponent class documentation for in-depth information about how to use QQmlComponent.</db:para>
</db:section>
<db:section xml:id="the-qqmlexpression-class">
<db:title>The QQmlExpression Class</db:title>
<db:para>The QQmlExpression class provides a way for clients to evaluate JavaScript expressions from C++, using a particular QML evaluation context. This allows clients to access QML objects by id, for example. The result of evaluation is returned as a <db:link xlink:href="qvariant.xml">QVariant</db:link>, and the conversion rules are defined by the QML engine.</db:para>
<db:para>See the QQmlExpression class documentation for in depth information about how to use QQmlExpression in an application.</db:para>
</db:section>
</db:section>
<db:section xml:id="usage-of-the-classes-within-qml-applications">
<db:title>Usage of the Classes within QML Applications</db:title>
<db:para>These pages describe how to create QML applications which interact with the C++ classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtqml-cppintegration-topic.xml">Integrating QML and C++</db:link></db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtqml-cppintegration-exposecppattributes.xml">Exposing Attributes of C++ Classes to QML</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-cppintegration-definetypes.xml">Defining QML Types from C++</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-cppintegration-contextproperties.xml">Embedding C++ Objects into QML with Context Properties</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-cppintegration-interactqmlfromcpp.xml">Interacting with QML Objects from C++</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-cppintegration-data.xml">Data Type Conversion Between QML and C++</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
