<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoLocation Class</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeolocation.xml">QGeoLocation</db:link> class represents basic information about a location.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoLocation</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Positioning)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Positioning)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += positioning</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGeoLocation is part of <db:simplelist><db:member>QtPositioning-positioning</db:member><db:member>QtLocation-places</db:member><db:member>QtLocation-places-data</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qgeolocation.xml">QGeoLocation</db:link> consists of a coordinate and corresponding address, along with an optional bounding shape, which is the recommended region to be displayed when viewing the location.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGeoLocation">
<db:title>QGeoLocation::QGeoLocation()</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoLocation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoLocation()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an new location object.</db:para>
</db:section>
<db:section xml:id="QGeoLocation-1">
<db:title>QGeoLocation::QGeoLocation(const QGeoLocation &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoLocation</db:methodname>
<db:methodparam>
<db:type>const QGeoLocation &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoLocation(const QGeoLocation &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code></db:para>
</db:section>
<db:section xml:id="QGeoLocation-2">
<db:title>[since 6.2] QGeoLocation::QGeoLocation(QGeoLocation &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoLocation</db:methodname>
<db:methodparam>
<db:type>QGeoLocation &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoLocation(QGeoLocation &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a geo location object by moving from <db:code role="parameter">other</db:code>.</db:para>
<db:note>
<db:para>The moved-from <db:link xlink:href="qgeolocation.xml">QGeoLocation</db:link> object can only be destroyed or assigned to. The effect of calling other functions than the destructor or one of the assignment operators is undefined.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="dtor.QGeoLocation">
<db:title>QGeoLocation::~QGeoLocation()</db:title>
<db:destructorsynopsis>
<db:methodname>~QGeoLocation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGeoLocation()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the location object.</db:para>
</db:section>
<db:section xml:id="address">
<db:title>QGeoAddress QGeoLocation::address() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoAddress</db:type>
<db:methodname>address</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoAddress address() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the address of the location.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeolocation.xml#setAddress">setAddress</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundingShape">
<db:title>[since 6.2] QGeoShape QGeoLocation::boundingShape() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoShape</db:type>
<db:methodname>boundingShape</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoShape boundingShape() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a bounding shape which represents the recommended region to display when viewing this location.</db:para>
<db:para>For example, a building's location may have a region centered around the building, but the region is large enough to show it's immediate surrounding geographical context.</db:para>
<db:note>
<db:para>This method was introduced in Qt6 instead of boundingBox() method. It returns a <db:link xlink:href="qgeoshape.xml">QGeoShape</db:link> instead of a <db:link xlink:href="qgeorectangle.xml">QGeoRectangle</db:link>. Use <db:link xlink:href="qgeoshape.xml#boundingGeoRectangle">QGeoShape::boundingGeoRectangle</db:link>() to obtain a bounding <db:link xlink:href="qgeorectangle.xml">QGeoRectangle</db:link> for the shape.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeolocation.xml#setBoundingShape">setBoundingShape</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="coordinate">
<db:title>QGeoCoordinate QGeoLocation::coordinate() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoCoordinate</db:type>
<db:methodname>coordinate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCoordinate coordinate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the coordinate of the location.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeolocation.xml#setCoordinate">setCoordinate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="extendedAttributes">
<db:title>QVariantMap QGeoLocation::extendedAttributes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariantMap</db:type>
<db:methodname>extendedAttributes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariantMap extendedAttributes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the extended attributes associated to this location. Extended attributes are backend-dependent and can be location-dependent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeolocation.xml#setExtendedAttributes">setExtendedAttributes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QGeoLocation::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the location coordinate is <db:link xlink:href="qgeocoordinate.xml#isValid">invalid</db:link>, and all the other location fields are empty. Otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="setAddress">
<db:title>void QGeoLocation::setAddress(const QGeoAddress &amp;<db:emphasis>address</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAddress</db:methodname>
<db:methodparam>
<db:type>const QGeoAddress &amp;</db:type>
<db:parameter>address</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAddress(const QGeoAddress &amp;address)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">address</db:code> of the location.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeolocation.xml#address">address</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBoundingShape">
<db:title>[since 6.2] void QGeoLocation::setBoundingShape(const QGeoShape &amp;<db:emphasis>boundingShape</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBoundingShape</db:methodname>
<db:methodparam>
<db:type>const QGeoShape &amp;</db:type>
<db:parameter>boundingShape</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBoundingShape(const QGeoShape &amp;boundingShape)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">boundingShape</db:code> of the location.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeolocation.xml#boundingShape">boundingShape</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCoordinate">
<db:title>void QGeoLocation::setCoordinate(const QGeoCoordinate &amp;<db:emphasis>coordinate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCoordinate</db:methodname>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>coordinate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCoordinate(const QGeoCoordinate &amp;coordinate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">coordinate</db:code> of the location.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeolocation.xml#coordinate">coordinate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setExtendedAttributes">
<db:title>void QGeoLocation::setExtendedAttributes(const QVariantMap &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setExtendedAttributes</db:methodname>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setExtendedAttributes(const QVariantMap &amp;data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the extended attributes of the location with the parameters specified in <db:code role="parameter">data</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeolocation.xml#extendedAttributes">extendedAttributes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QGeoLocation &amp;QGeoLocation::operator=(const QGeoLocation &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QGeoLocation &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QGeoLocation &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoLocation &amp; operator=(const QGeoLocation &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this location and returns a reference to this location.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>[since 6.2] QGeoLocation &amp;QGeoLocation::operator=(QGeoLocation &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QGeoLocation &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QGeoLocation &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoLocation &amp; operator=(QGeoLocation &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assings <db:code role="parameter">other</db:code> to this location and returns a reference to this location.</db:para>
<db:note>
<db:para>The moved-from <db:link xlink:href="qgeolocation.xml">QGeoLocation</db:link> object can only be destroyed or assigned to. The effect of calling other functions than the destructor or one of the assignment operators is undefined.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qHash">
<db:title>size_t qHash(const QGeoLocation &amp;<db:emphasis>location</db:emphasis>, size_t <db:emphasis>seed</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>size_t</db:type>
<db:methodname>qHash</db:methodname>
<db:methodparam>
<db:type>const QGeoLocation &amp;</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>size_t</db:type>
<db:parameter>seed</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">size_t qHash(const QGeoLocation &amp;location, size_t seed)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the hash value for the <db:code role="parameter">location</db:code>, using <db:code role="parameter">seed</db:code> for the calculation.</db:para>
<db:note>
<db:para>The hash does not take extended attributes into account. This means that two geo location objects that differ only in the extended attributes will provide similar hashes.</db:para>
</db:note>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QGeoLocation &amp;<db:emphasis>lhs</db:emphasis>, const QGeoLocation &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QGeoLocation &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QGeoLocation &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QGeoLocation &amp;lhs, const QGeoLocation &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:code role="parameter">lhs</db:code> location is not equal to <db:code role="parameter">rhs</db:code>, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const QGeoLocation &amp;<db:emphasis>lhs</db:emphasis>, const QGeoLocation &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QGeoLocation &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QGeoLocation &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QGeoLocation &amp;lhs, const QGeoLocation &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:code role="parameter">lhs</db:code> location is equal to <db:code role="parameter">rhs</db:code>, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
