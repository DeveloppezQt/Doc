<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGraphicsSimpleTextItem Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicssimpletextitem.xml">QGraphicsSimpleTextItem</db:link> class provides a simple text path item that you can add to a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsSimpleTextItem</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractgraphicsshapeitem.xml" xlink:role="class">QAbstractGraphicsShapeItem</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsSimpleTextItem is part of <db:simplelist><db:member>graphicsview-api</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>To set the item's text, you can either pass a <db:link xlink:href="qstring.xml">QString</db:link> to <db:link xlink:href="qgraphicssimpletextitem.xml">QGraphicsSimpleTextItem</db:link>'s constructor, or call <db:link xlink:href="qgraphicssimpletextitem.xml#setText">setText</db:link>() to change the text later. To set the text fill color, call <db:link xlink:href="qabstractgraphicsshapeitem.xml#setBrush">setBrush</db:link>().</db:para>
<db:para>The simple text item can have both a fill and an outline; <db:link xlink:href="qabstractgraphicsshapeitem.xml#setBrush">setBrush</db:link>() will set the text fill (i.e., text color), and <db:link xlink:href="qabstractgraphicsshapeitem.xml#setPen">setPen</db:link>() sets the pen that will be used to draw the text outline. (The latter can be slow, especially for complex pens, and items with long text content.) If all you want is to draw a simple line of text, you should call <db:link xlink:href="qabstractgraphicsshapeitem.xml#setBrush">setBrush</db:link>() only, and leave the pen unset; <db:link xlink:href="qgraphicssimpletextitem.xml">QGraphicsSimpleTextItem</db:link>'s pen is by default <db:link xlink:href="qt.xml#PenStyle-enum">Qt::NoPen</db:link>.</db:para>
<db:para><db:link xlink:href="qgraphicssimpletextitem.xml">QGraphicsSimpleTextItem</db:link> uses the text's formatted size and the associated font to provide a reasonable implementation of <db:link xlink:href="qgraphicssimpletextitem.xml#boundingRect">boundingRect</db:link>(), <db:link xlink:href="qgraphicssimpletextitem.xml#shape">shape</db:link>(), and <db:link xlink:href="qgraphicssimpletextitem.xml#contains">contains</db:link>(). You can set the font by calling <db:link xlink:href="qgraphicssimpletextitem.xml#setFont">setFont</db:link>().</db:para>
<db:para>QGraphicsSimpleText does not display rich text; instead, you can use <db:link xlink:href="qgraphicstextitem.xml">QGraphicsTextItem</db:link>, which provides full text control capabilities.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/graphicsview-simpletextitem.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicstextitem.xml">QGraphicsTextItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicspathitem.xml">QGraphicsPathItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsrectitem.xml">QGraphicsRectItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsellipseitem.xml">QGraphicsEllipseItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicspolygonitem.xml">QGraphicsPolygonItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicslineitem.xml">QGraphicsLineItem</db:link></db:member>
<db:member><db:link xlink:href="graphicsview.xml">Graphics View Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="anonymous-enum">
<db:title>enum QGraphicsSimpleTextItem::anonymous</db:title>
<db:para>The value returned by the virtual <db:link xlink:href="qgraphicssimpletextitem.xml#type">type</db:link>() function.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicssimpletextitem.xml">QGraphicsSimpleTextItem</db:link></db:emphasis>::Type</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>A graphics simple text item</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGraphicsSimpleTextItem">
<db:title>[explicit] QGraphicsSimpleTextItem::QGraphicsSimpleTextItem(QGraphicsItem *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a <db:link xlink:href="qgraphicssimpletextitem.xml">QGraphicsSimpleTextItem</db:link>.</db:para>
<db:para><db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>'s constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">QGraphicsScene::addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QGraphicsSimpleTextItem-1">
<db:title>[explicit] QGraphicsSimpleTextItem::QGraphicsSimpleTextItem(const QString &amp;<db:emphasis>text</db:emphasis>, QGraphicsItem *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a <db:link xlink:href="qgraphicssimpletextitem.xml">QGraphicsSimpleTextItem</db:link>, using <db:code role="parameter">text</db:code> as the default plain text.</db:para>
<db:para><db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>'s constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">QGraphicsScene::addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QGraphicsSimpleTextItem">
<db:title>[virtual noexcept] QGraphicsSimpleTextItem::~QGraphicsSimpleTextItem()</db:title>
<db:para>Destroys the <db:link xlink:href="qgraphicssimpletextitem.xml">QGraphicsSimpleTextItem</db:link>.</db:para>
</db:section>
<db:section xml:id="boundingRect">
<db:title>[override virtual] QRectF QGraphicsSimpleTextItem::boundingRect() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#boundingRect" role="function">QGraphicsItem::boundingRect() const</db:link>.</db:para>
</db:section>
<db:section xml:id="contains">
<db:title>[override virtual] bool QGraphicsSimpleTextItem::contains(const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#contains" role="function">QGraphicsItem::contains(const QPointF &amp;point) const</db:link>.</db:para>
</db:section>
<db:section xml:id="font">
<db:title>QFont QGraphicsSimpleTextItem::font() const</db:title>
<db:para>Returns the font that is used to draw the item's text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicssimpletextitem.xml#setFont">setFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isObscuredBy">
<db:title>[override virtual] bool QGraphicsSimpleTextItem::isObscuredBy(const QGraphicsItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractgraphicsshapeitem.xml#isObscuredBy" role="function">QAbstractGraphicsShapeItem::isObscuredBy(const QGraphicsItem *item) const</db:link>.</db:para>
</db:section>
<db:section xml:id="opaqueArea">
<db:title>[override virtual] QPainterPath QGraphicsSimpleTextItem::opaqueArea() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractgraphicsshapeitem.xml#opaqueArea" role="function">QAbstractGraphicsShapeItem::opaqueArea() const</db:link>.</db:para>
</db:section>
<db:section xml:id="paint">
<db:title>[override virtual] void QGraphicsSimpleTextItem::paint(QPainter *<db:emphasis>painter</db:emphasis>, const QStyleOptionGraphicsItem *<db:emphasis>option</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#paint" role="function">QGraphicsItem::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)</db:link>.</db:para>
</db:section>
<db:section xml:id="setFont">
<db:title>void QGraphicsSimpleTextItem::setFont(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:para>Sets the font that is used to draw the item's text to <db:code role="parameter">font</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicssimpletextitem.xml#font">font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setText">
<db:title>void QGraphicsSimpleTextItem::setText(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Sets the item's text to <db:code role="parameter">text</db:code>. The text will be displayed as plain text. Newline characters ('\n') as well as characters of type <db:link xlink:href="qchar.xml#SpecialCharacter-enum">QChar::LineSeparator</db:link> will cause item to break the text into multiple lines.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicssimpletextitem.xml#text">text</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shape">
<db:title>[override virtual] QPainterPath QGraphicsSimpleTextItem::shape() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#shape" role="function">QGraphicsItem::shape() const</db:link>.</db:para>
</db:section>
<db:section xml:id="text">
<db:title>QString QGraphicsSimpleTextItem::text() const</db:title>
<db:para>Returns the item's text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicssimpletextitem.xml#setText">setText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>[override virtual] int QGraphicsSimpleTextItem::type() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#type" role="function">QGraphicsItem::type() const</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
