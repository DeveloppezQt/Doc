<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D Physics - Impeller Example</db:title>
<db:productname>QtQuick3DPhysics</db:productname>
<db:edition>Qt Quick 3D Physics | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Physics Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates using trigger bodies and collision info.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2022 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause
import QtQuick
import QtQuick3D
import QtQuick3D.Physics

Window {
    width: 640
    height: 480
    visible: true
    title: qsTr(&quot;Qt Quick 3D Physics - Impeller&quot;)

    PhysicsWorld {
        gravity: Qt.vector3d(0, -490, 0)
        scene: viewport.scene
    }

    View3D {
        id: viewport
        anchors.fill: parent

        environment: SceneEnvironment {
            clearColor: &quot;#d6dbdf&quot;
            backgroundMode: SceneEnvironment.Color
        }

        PerspectiveCamera {
            position: Qt.vector3d(0, 200, 1000)
            clipFar: 2000
            clipNear: 1
        }

        DirectionalLight {
            eulerRotation.x: -45
            eulerRotation.y: 45
            castsShadow: true
            brightness: 1
            shadowFactor: 100
        }

        StaticRigidBody {
            position: Qt.vector3d(0, -100, 0)
            eulerRotation: Qt.vector3d(-90, 0, 0)
            collisionShapes: PlaneShape {}
            Model {
                source: &quot;#Rectangle&quot;
                scale: Qt.vector3d(500, 500, 1)
                materials: PrincipledMaterial {
                    baseColor: &quot;green&quot;
                }
                castsShadows: false
                receivesShadows: true
            }
        }

        DynamicRigidBody {
            id: sphere
            massMode: DynamicRigidBody.CustomDensity
            density: 0.00001
            position: Qt.vector3d(0, 600, 0)
            property bool inArea: false
            sendContactReports: true
            receiveTriggerReports: true

            onEnteredTriggerBody: {
                inArea = true
            }
            onExitedTriggerBody: {
                inArea = false
            }

            collisionShapes: SphereShape {}
            Model {
                source: &quot;#Sphere&quot;
                materials: PrincipledMaterial {
                    baseColor: sphere.inArea ? &quot;yellow&quot; : &quot;red&quot;
                }
            }
        }

        TriggerBody {
            position: Qt.vector3d(0, 350, 0)
            scale: Qt.vector3d(1, 2, 1)

            collisionShapes: BoxShape {
                id: boxShape
            }
            Model {
                source: &quot;#Cube&quot;
                materials: PrincipledMaterial {
                    baseColor: Qt.rgba(1, 0, 1, 0.2)
                    alphaMode: PrincipledMaterial.Blend
                }
            }
        }

        StaticRigidBody {
            position: Qt.vector3d(0, 0, 0)
            scale: Qt.vector3d(2, 2, 2)
            receiveContactReports: true

            collisionShapes: SphereShape {}

            Model {
                source: &quot;#Sphere&quot;
                materials: PrincipledMaterial {
                    baseColor: &quot;blue&quot;
                }
            }

            onBodyContact: (body, positions, impulses, normals) =&amp;gt; {
                for (var normal of normals) {
                    let velocity = normal.times(-700)
                    body.setLinearVelocity(velocity)
                }
            }
        }
    }
}

</db:programlisting>
</db:article>
