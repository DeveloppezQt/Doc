<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Order Form Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Order Form example shows how to generate rich text documents by combining a simple template with data input by the user in a dialog.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/orderform-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="detailsdialog-definition">
<db:title>DetailsDialog Definition</db:title>
<db:para>The <db:code>DetailsDialog</db:code> class is a subclass of QDialog, implementing a slot <db:code>verify()</db:code> to allow contents of the <db:code>DetailsDialog</db:code> to be verified later. This is further explained in <db:code>DetailsDialog</db:code> Implementation.</db:para>
<db:programlisting language="cpp">class DetailsDialog : public QDialog
{
    Q_OBJECT

public:
    DetailsDialog(const QString &amp;title, QWidget *parent);

public slots:
    void verify();

public:
    QList&lt;QPair&lt;QString, int&gt; &gt; orderItems();
    QString senderName() const;
    QString senderAddress() const;
    bool sendOffers();

private:
    void setupItemsTable();

    QLabel *nameLabel;
    QLabel *addressLabel;
    QCheckBox *offersCheckBox;
    QLineEdit *nameEdit;
    QStringList items;
    QTableWidget *itemsTable;
    QTextEdit *addressEdit;
    QDialogButtonBox *buttonBox;
};
</db:programlisting>
<db:para>The constructor of <db:code>DetailsDialog</db:code> accepts parameters <db:code role="parameter">title</db:code> and <db:code role="parameter">parent</db:code>. The class defines four <db:emphasis>getter</db:emphasis> functions: <db:code>orderItems()</db:code>, <db:code>senderName()</db:code>, <db:code>senderAddress()</db:code>, and <db:code>sendOffers()</db:code> to allow data to be accessed externally.</db:para>
<db:para>The class definition includes input widgets for the required fields, <db:code>nameEdit</db:code> and <db:code>addressEdit</db:code>. Also, a QCheckBox and a QDialogButtonBox are defined; the former to provide the user with the option to receive information on products and offers, and the latter to ensure that buttons used are arranged according to the user's native platform. In addition, a QTableWidget, <db:code>itemsTable</db:code>, is used to hold order details.</db:para>
<db:para>The screenshot below shows the <db:code>DetailsDialog</db:code> we intend to create.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/orderform-example-detailsdialog.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="detailsdialog-implementation">
<db:title>DetailsDialog Implementation</db:title>
<db:para>The constructor of <db:code>DetailsDialog</db:code> instantiates the earlier defined fields and their respective labels. The label for <db:code>offersCheckBox</db:code> is set and the <db:code>setupItemsTable()</db:code> function is invoked to setup and populate <db:code>itemsTable</db:code>. The QDialogButtonBox object, <db:code>buttonBox</db:code>, is instantiated with <db:guilabel>OK</db:guilabel> and <db:guilabel>Cancel</db:guilabel> buttons. This <db:code>buttonBox</db:code>'s <db:code>accepted()</db:code> and <db:code>rejected()</db:code> signals are connected to the <db:code>verify()</db:code> and <db:code>reject()</db:code> slots in <db:code>DetailsDialog</db:code>.</db:para>
<db:programlisting language="cpp">DetailsDialog::DetailsDialog(const QString &amp;title, QWidget *parent)
    : QDialog(parent)
{
    nameLabel = new QLabel(tr(&quot;Name:&quot;));
    addressLabel = new QLabel(tr(&quot;Address:&quot;));
    addressLabel-&gt;setAlignment(Qt::AlignLeft | Qt::AlignTop);

    nameEdit = new QLineEdit;
    addressEdit = new QTextEdit;

    offersCheckBox = new QCheckBox(tr(&quot;Send information about products and &quot;
                                      &quot;special offers&quot;));

    setupItemsTable();

    buttonBox = new QDialogButtonBox(QDialogButtonBox::Ok
                                     | QDialogButtonBox::Cancel);

    connect(buttonBox, SIGNAL(accepted()), this, SLOT(verify()));
    connect(buttonBox, SIGNAL(rejected()), this, SLOT(reject()));
</db:programlisting>
<db:para>A QGridLayout is used to place all the objects on the <db:code>DetailsDialog</db:code>.</db:para>
<db:programlisting language="cpp">    QGridLayout *mainLayout = new QGridLayout;
    mainLayout-&gt;addWidget(nameLabel, 0, 0);
    mainLayout-&gt;addWidget(nameEdit, 0, 1);
    mainLayout-&gt;addWidget(addressLabel, 1, 0);
    mainLayout-&gt;addWidget(addressEdit, 1, 1);
    mainLayout-&gt;addWidget(itemsTable, 0, 2, 2, 1);
    mainLayout-&gt;addWidget(offersCheckBox, 2, 1, 1, 2);
    mainLayout-&gt;addWidget(buttonBox, 3, 0, 1, 3);
    setLayout(mainLayout);

    setWindowTitle(title);
}
</db:programlisting>
<db:para>The <db:code>setupItemsTable()</db:code> function instantiates the QTableWidget object, <db:code>itemsTable</db:code>, and sets the number of rows based on the <db:link xlink:href="qstringlist.xml">QStringList</db:link> object, <db:code>items</db:code>, which holds the type of items ordered. The number of columns is set to 2, providing a &quot;name&quot; and &quot;quantity&quot; layout. A <db:code>for</db:code> loop is used to populate the <db:code>itemsTable</db:code> and the <db:code>name</db:code> item's flag is set to <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemIsEnabled</db:link> or <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemIsSelectable</db:link>. For demonstration purposes, the <db:code>quantity</db:code> item is set to a 1 and all items in the <db:code>itemsTable</db:code> have this value for quantity; but this can be modified by editing the contents of the cells at run time.</db:para>
<db:programlisting language="cpp">void DetailsDialog::setupItemsTable()
{
    items &lt;&lt; tr(&quot;T-shirt&quot;) &lt;&lt; tr(&quot;Badge&quot;) &lt;&lt; tr(&quot;Reference book&quot;)
          &lt;&lt; tr(&quot;Coffee cup&quot;);

    itemsTable = new QTableWidget(items.count(), 2);

    for (int row = 0; row &lt; items.count(); ++row) {
        QTableWidgetItem *name = new QTableWidgetItem(items[row]);
        name-&gt;setFlags(Qt::ItemIsEnabled | Qt::ItemIsSelectable);
        itemsTable-&gt;setItem(row, 0, name);
        QTableWidgetItem *quantity = new QTableWidgetItem(&quot;1&quot;);
        itemsTable-&gt;setItem(row, 1, quantity);
    }
}
</db:programlisting>
<db:para>The <db:code>orderItems()</db:code> function extracts data from the <db:code>itemsTable</db:code> and returns it in the form of a <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qpair.xml">QPair</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>,int&gt;&gt; where each <db:link xlink:href="qpair.xml">QPair</db:link> corresponds to an item and the quantity ordered.</db:para>
<db:programlisting language="cpp">QList&lt;QPair&lt;QString, int&gt; &gt; DetailsDialog::orderItems()
{
    QList&lt;QPair&lt;QString, int&gt; &gt; orderList;

    for (int row = 0; row &lt; items.count(); ++row) {
        QPair&lt;QString, int&gt; item;
        item.first = itemsTable-&gt;item(row, 0)-&gt;text();
        int quantity = itemsTable-&gt;item(row, 1)-&gt;data(Qt::DisplayRole).toInt();
        item.second = qMax(0, quantity);
        orderList.append(item);
    }

    return orderList;
}
</db:programlisting>
<db:para>The <db:code>senderName()</db:code> function is used to return the value of the QLineEdit used to store the name field for the order form.</db:para>
<db:programlisting language="cpp">QString DetailsDialog::senderName() const
{
    return nameEdit-&gt;text();
}
</db:programlisting>
<db:para>The <db:code>senderAddress()</db:code> function is used to return the value of the QTextEdit containing the address for the order form.</db:para>
<db:programlisting language="cpp">QString DetailsDialog::senderAddress() const
{
    return addressEdit-&gt;toPlainText();
}
</db:programlisting>
<db:para>The <db:code>sendOffers()</db:code> function is used to return a <db:code>true</db:code> or <db:code>false</db:code> value that is used to determine if the customer in the order form wishes to receive more information on the company's offers and promotions.</db:para>
<db:programlisting language="cpp">bool DetailsDialog::sendOffers()
{
    return offersCheckBox-&gt;isChecked();
}
</db:programlisting>
<db:para>The <db:code>verify()</db:code> function is an additionally implemented slot used to verify the details entered by the user into the <db:code>DetailsDialog</db:code>. If the details entered are incomplete, a QMessageBox is displayed providing the user the option to discard the <db:code>DetailsDialog</db:code>. Otherwise, the details are accepted and the <db:code>accept()</db:code> function is invoked.</db:para>
<db:programlisting language="cpp">void DetailsDialog::verify()
{
    if (!nameEdit-&gt;text().isEmpty() &amp;&amp; !addressEdit-&gt;toPlainText().isEmpty()) {
        accept();
        return;
    }

    QMessageBox::StandardButton answer;
    answer = QMessageBox::warning(this, tr(&quot;Incomplete Form&quot;),
        tr(&quot;The form does not contain all the necessary information.\n&quot;
           &quot;Do you want to discard it?&quot;),
        QMessageBox::Yes | QMessageBox::No);

    if (answer == QMessageBox::Yes)
        reject();
}
</db:programlisting>
</db:section>
<db:section xml:id="mainwindow-definition">
<db:title>MainWindow Definition</db:title>
<db:para>The <db:code>MainWindow</db:code> class is a subclass of QMainWindow, implementing two slots - <db:code>openDialog()</db:code> and <db:code>printFile()</db:code>. It also contains a private instance of QTabWidget, <db:code>letters</db:code>.</db:para>
<db:programlisting language="cpp">class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow();
    void createSample();

public slots:
    void openDialog();
    void printFile();

private:
    void createLetter(const QString &amp;name, const QString &amp;address,
                      QList&lt;QPair&lt;QString,int&gt; &gt; orderItems,
                      bool sendOffers);

    QAction *printAction;
    QTabWidget *letters;
};
</db:programlisting>
</db:section>
<db:section xml:id="mainwindow-implementation">
<db:title>MainWindow Implementation</db:title>
<db:para>The <db:code>MainWindow</db:code> constructor sets up the <db:code>fileMenu</db:code> and the required actions, <db:code>newAction</db:code> and <db:code>printAction</db:code>. These actions' <db:code>triggered()</db:code> signals are connected to the additionally implemented openDialog() slot and the default close() slot. The QTabWidget, <db:code>letters</db:code>, is instantiated and set as the window's central widget.</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow()
{
    QMenu *fileMenu = new QMenu(tr(&quot;&amp;File&quot;), this);
    QAction *newAction = fileMenu-&gt;addAction(tr(&quot;&amp;New...&quot;));
    newAction-&gt;setShortcuts(QKeySequence::New);
    printAction = fileMenu-&gt;addAction(tr(&quot;&amp;Print...&quot;), this, SLOT(printFile()));
    printAction-&gt;setShortcuts(QKeySequence::Print);
    printAction-&gt;setEnabled(false);
    QAction *quitAction = fileMenu-&gt;addAction(tr(&quot;E&amp;xit&quot;));
    quitAction-&gt;setShortcuts(QKeySequence::Quit);
    menuBar()-&gt;addMenu(fileMenu);

    letters = new QTabWidget;

    connect(newAction, SIGNAL(triggered()), this, SLOT(openDialog()));
    connect(quitAction, SIGNAL(triggered()), this, SLOT(close()));

    setCentralWidget(letters);
    setWindowTitle(tr(&quot;Order Form&quot;));
}
</db:programlisting>
<db:para>The <db:code>createLetter()</db:code> function creates a new QTabWidget with a QTextEdit, <db:code>editor</db:code>, as the parent. This function accepts four parameters that correspond to we obtained through <db:code>DetailsDialog</db:code>, in order to &quot;fill&quot; the <db:code>editor</db:code>.</db:para>
<db:programlisting language="cpp">void MainWindow::createLetter(const QString &amp;name, const QString &amp;address,
                              QList&lt;QPair&lt;QString,int&gt; &gt; orderItems,
                              bool sendOffers)
{
    QTextEdit *editor = new QTextEdit;
    int tabIndex = letters-&gt;addTab(editor, name);
    letters-&gt;setCurrentIndex(tabIndex);
</db:programlisting>
<db:para>We then obtain the cursor for the <db:code>editor</db:code> using QTextEdit::textCursor(). The <db:code>cursor</db:code> is then moved to the start of the document using QTextCursor::Start.</db:para>
<db:programlisting language="cpp">    QTextCursor cursor(editor-&gt;textCursor());
    cursor.movePosition(QTextCursor::Start);
</db:programlisting>
<db:para>Recall the structure of a <db:link xlink:href="richtext-structure.xml">Rich Text Document</db:link>, where sequences of frames and tables are always separated by text blocks, some of which may contain no information.</db:para>
<db:para>In the case of the Order Form Example, the document structure for this portion is described by the table below:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td rowspan="8">
<db:para>frame with <db:emphasis>referenceFrameFormat</db:emphasis></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>A company</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>321 City Street</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>Industry Park</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>Another country</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This is accomplished with the following code:</db:para>
<db:programlisting language="cpp">    QTextFrame *topFrame = cursor.currentFrame();
    QTextFrameFormat topFrameFormat = topFrame-&gt;frameFormat();
    topFrameFormat.setPadding(16);
    topFrame-&gt;setFrameFormat(topFrameFormat);

    QTextCharFormat textFormat;
    QTextCharFormat boldFormat;
    boldFormat.setFontWeight(QFont::Bold);

    QTextFrameFormat referenceFrameFormat;
    referenceFrameFormat.setBorder(1);
    referenceFrameFormat.setPadding(8);
    referenceFrameFormat.setPosition(QTextFrameFormat::FloatRight);
    referenceFrameFormat.setWidth(QTextLength(QTextLength::PercentageLength, 40));
    cursor.insertFrame(referenceFrameFormat);

    cursor.insertText(&quot;A company&quot;, boldFormat);
    cursor.insertBlock();
    cursor.insertText(&quot;321 City Street&quot;);
    cursor.insertBlock();
    cursor.insertText(&quot;Industry Park&quot;);
    cursor.insertBlock();
    cursor.insertText(&quot;Another country&quot;);
</db:programlisting>
<db:para>Note that <db:code>topFrame</db:code> is the <db:code>editor</db:code>'s top-level frame and is not shown in the document structure.</db:para>
<db:para>We then set the <db:code>cursor</db:code>'s position back to its last position in <db:code>topFrame</db:code> and fill in the customer's name (provided by the constructor) and address - using a <db:code>foreach</db:code> loop to traverse the <db:link xlink:href="qstring.xml">QString</db:link>, <db:code>address</db:code>.</db:para>
<db:programlisting language="cpp">    cursor.setPosition(topFrame-&gt;lastPosition());

    cursor.insertText(name, textFormat);
    QString line;
    foreach (line, address.split(&quot;\n&quot;)) {
        cursor.insertBlock();
        cursor.insertText(line);
    }
</db:programlisting>
<db:para>The <db:code>cursor</db:code> is now back in <db:code>topFrame</db:code> and the document structure for the above portion of code is:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>Donald</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>47338 Park Avenue</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>Big City</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For spacing purposes, we invoke <db:link xlink:href="">insertBlock()</db:link> twice. The <db:link xlink:href="">currentDate()</db:link> is obtained and displayed. We use <db:link xlink:href="">setWidth()</db:link> to increase the width of <db:code>bodyFrameFormat</db:code> and we insert a new frame with that width.</db:para>
<db:programlisting language="cpp">    cursor.insertBlock();
    cursor.insertBlock();

    QDate date = QDate::currentDate();
    cursor.insertText(tr(&quot;Date: %1&quot;).arg(date.toString(&quot;d MMMM yyyy&quot;)),
                      textFormat);
    cursor.insertBlock();

    QTextFrameFormat bodyFrameFormat;
    bodyFrameFormat.setWidth(QTextLength(QTextLength::PercentageLength, 100));
    cursor.insertFrame(bodyFrameFormat);
</db:programlisting>
<db:para>The following code inserts standard text into the order form.</db:para>
<db:programlisting language="cpp">    cursor.insertText(tr(&quot;I would like to place an order for the following &quot;
                         &quot;items:&quot;), textFormat);
    cursor.insertBlock();
    cursor.insertBlock();
</db:programlisting>
<db:para>This part of the document structure now contains the date, a frame with <db:code>bodyFrameFormat</db:code>, as well as the standard text.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>Date: 25 May 2007</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="4">
<db:para>frame with <db:emphasis>bodyFrameFormat</db:emphasis></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>I would like to place an order for the following items:</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>A QTextTableFormat object, <db:code>orderTableFormat</db:code>, is used to hold the type of item and the quantity ordered.</db:para>
<db:programlisting language="cpp">    QTextTableFormat orderTableFormat;
    orderTableFormat.setAlignment(Qt::AlignHCenter);
    QTextTable *orderTable = cursor.insertTable(1, 2, orderTableFormat);

    QTextFrameFormat orderFrameFormat = cursor.currentFrame()-&gt;frameFormat();
    orderFrameFormat.setBorder(1);
    cursor.currentFrame()-&gt;setFrameFormat(orderFrameFormat);
</db:programlisting>
<db:para>We use <db:link xlink:href="">cellAt()</db:link> to set the headers for the <db:code>orderTable</db:code>.</db:para>
<db:programlisting language="cpp">    cursor = orderTable-&gt;cellAt(0, 0).firstCursorPosition();
    cursor.insertText(tr(&quot;Product&quot;), boldFormat);
    cursor = orderTable-&gt;cellAt(0, 1).firstCursorPosition();
    cursor.insertText(tr(&quot;Quantity&quot;), boldFormat);
</db:programlisting>
<db:para>Then, we iterate through the <db:link xlink:href="qlist.xml">QList</db:link> of <db:link xlink:href="qpair.xml">QPair</db:link> objects to populate <db:code>orderTable</db:code>.</db:para>
<db:programlisting language="cpp">    for (int i = 0; i &lt; orderItems.count(); ++i) {
        QPair&lt;QString,int&gt; item = orderItems[i];
        int row = orderTable-&gt;rows();

        orderTable-&gt;insertRows(row, 1);
        cursor = orderTable-&gt;cellAt(row, 0).firstCursorPosition();
        cursor.insertText(item.first, textFormat);
        cursor = orderTable-&gt;cellAt(row, 1).firstCursorPosition();
        cursor.insertText(QString(&quot;%1&quot;).arg(item.second), textFormat);
    }
</db:programlisting>
<db:para>The resulting document structure for this section is:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td rowspan="11">
<db:para><db:code>orderTable</db:code> with <db:emphasis>orderTableFormat</db:emphasis></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>Product</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>Quantity</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>T-shirt</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>4</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>Badge</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>3</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>Reference book</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>2</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>Coffee cup</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>5</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>cursor</db:code> is then moved back to <db:code>topFrame</db:code>'s <db:link xlink:href="">lastPosition()</db:link> and more standard text is inserted.</db:para>
<db:programlisting language="cpp">    cursor.setPosition(topFrame-&gt;lastPosition());

    cursor.insertBlock();
    cursor.insertText(tr(&quot;Please update my records to take account of the &quot;
                         &quot;following privacy information:&quot;));
    cursor.insertBlock();
</db:programlisting>
<db:para>Another QTextTable is inserted, to display the customer's preference regarding offers.</db:para>
<db:programlisting language="cpp">    QTextTable *offersTable = cursor.insertTable(2, 2);

    cursor = offersTable-&gt;cellAt(0, 1).firstCursorPosition();
    cursor.insertText(tr(&quot;I want to receive more information about your &quot;
                         &quot;company's products and special offers.&quot;), textFormat);
    cursor = offersTable-&gt;cellAt(1, 1).firstCursorPosition();
    cursor.insertText(tr(&quot;I do not want to receive any promotional information &quot;
                         &quot;from your company.&quot;), textFormat);

    if (sendOffers)
        cursor = offersTable-&gt;cellAt(0, 0).firstCursorPosition();
    else
        cursor = offersTable-&gt;cellAt(1, 0).firstCursorPosition();

    cursor.insertText(&quot;X&quot;, boldFormat);
</db:programlisting>
<db:para>The document structure for this portion is:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>Please update my...</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="5">
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="4">
<db:para><db:code>offersTable</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>I want to receive...</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>I do not want to receive...</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>X</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>cursor</db:code> is moved to insert &quot;Sincerely&quot; along with the customer's name. More blocks are inserted for spacing purposes. The <db:code>printAction</db:code> is enabled to indicate that an order form can now be printed.</db:para>
<db:programlisting language="cpp">    cursor.setPosition(topFrame-&gt;lastPosition());
    cursor.insertBlock();
    cursor.insertText(tr(&quot;Sincerely,&quot;), textFormat);
    cursor.insertBlock();
    cursor.insertBlock();
    cursor.insertBlock();
    cursor.insertText(name);

    printAction-&gt;setEnabled(true);
}
</db:programlisting>
<db:para>The bottom portion of the document structure is:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="5">
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>Sincerely,</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para><db:code>Donald</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>createSample()</db:code> function is used for illustration purposes, to create a sample order form.</db:para>
<db:programlisting language="cpp">void MainWindow::createSample()
{
    DetailsDialog dialog(&quot;Dialog with default values&quot;, this);
    createLetter(&quot;Mr. Smith&quot;, &quot;12 High Street\nSmall Town\nThis country&quot;,
                 dialog.orderItems(), true);
}
</db:programlisting>
<db:para>The <db:code>openDialog()</db:code> function opens a <db:code>DetailsDialog</db:code> object. If the details in <db:code>dialog</db:code> are accepted, the <db:code>createLetter()</db:code> function is invoked using the parameters extracted from <db:code>dialog</db:code>.</db:para>
<db:programlisting language="cpp">void MainWindow::openDialog()
{
    DetailsDialog dialog(tr(&quot;Enter Customer Details&quot;), this);

    if (dialog.exec() == QDialog::Accepted) {
        createLetter(dialog.senderName(), dialog.senderAddress(),
                     dialog.orderItems(), dialog.sendOffers());
    }
}
</db:programlisting>
<db:para>In order to print out the order form, a <db:code>printFile()</db:code> function is included, as shown below:</db:para>
<db:programlisting language="cpp">void MainWindow::printFile()
{
#if !defined(QT_NO_PRINTER) &amp;&amp; !defined(QT_NO_PRINTDIALOG)
    QTextEdit *editor = static_cast&lt;QTextEdit*&gt;(letters-&gt;currentWidget());
    QPrinter printer;

    QPrintDialog dialog(&amp;printer, this);
    dialog.setWindowTitle(tr(&quot;Print Document&quot;));
    if (editor-&gt;textCursor().hasSelection())
        dialog.addEnabledOption(QAbstractPrintDialog::PrintSelection);
    if (dialog.exec() != QDialog::Accepted) {
        return;
    }

    editor-&gt;print(&amp;printer);
#endif
}
</db:programlisting>
<db:para>This function also allows the user to print a selected area with QTextCursor::hasSelection(), instead of printing the entire document.</db:para>
</db:section>
<db:section xml:id="main-function">
<db:title><db:code>main()</db:code> Function</db:title>
<db:para>The <db:code>main()</db:code> function instantiates <db:code>MainWindow</db:code> and sets its size to 640x480 pixels before invoking the <db:code>show()</db:code> function and <db:code>createSample()</db:code> function.</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    MainWindow window;
    window.resize(640, 480);
    window.show();
    window.createSample();
    return app.exec();
}
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="richtext/orderform/detailsdialog.cpp">richtext/orderform/detailsdialog.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="richtext/orderform/detailsdialog.h">richtext/orderform/detailsdialog.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="richtext/orderform/main.cpp">richtext/orderform/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="richtext/orderform/mainwindow.cpp">richtext/orderform/mainwindow.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="richtext/orderform/mainwindow.h">richtext/orderform/mainwindow.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="richtext/orderform/orderform.pro">richtext/orderform/orderform.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
