<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Order Form Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Order Form example shows how to generate rich text documents by combining a simple template with data input by the user in a dialog.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/orderform-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="detailsdialog-definition">
<db:title>DetailsDialog Definition</db:title>
<db:para>The DetailsDialog class is a subclass of <db:link xlink:href="qdialog.xml">QDialog</db:link>, implementing a slot verify() to allow contents of the DetailsDialog to be verified later. This is further explained in DetailsDialog Implementation.</db:para>
<db:programlisting language="cpp">class DetailsDialog : public QDialog
{
    Q_OBJECT

public:
    DetailsDialog(const QString &amp;title, QWidget *parent);

public slots:
    void verify();

public:
    QList&lt;QPair&lt;QString, int&gt; &gt; orderItems();
    QString senderName() const;
    QString senderAddress() const;
    bool sendOffers();

private:
    void setupItemsTable();

    QLabel *nameLabel;
    QLabel *addressLabel;
    QCheckBox *offersCheckBox;
    QLineEdit *nameEdit;
    QStringList items;
    QTableWidget *itemsTable;
    QTextEdit *addressEdit;
    QDialogButtonBox *buttonBox;
};
</db:programlisting>
<db:para>The constructor of DetailsDialog accepts parameters <db:code role="parameter">title</db:code> and <db:code role="parameter">parent</db:code>. The class defines four <db:emphasis>getter</db:emphasis> functions: orderItems(), senderName(), senderAddress(), and sendOffers() to allow data to be accessed externally.</db:para>
<db:para>The class definition includes input widgets for the required fields, nameEdit and addressEdit. Also, a <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link> and a <db:link xlink:href="qdialogbuttonbox.xml">QDialogButtonBox</db:link> are defined; the former to provide the user with the option to receive information on products and offers, and the latter to ensure that buttons used are arranged according to the user's native platform. In addition, a <db:link xlink:href="qtablewidget.xml">QTableWidget</db:link>, itemsTable, is used to hold order details.</db:para>
<db:para>The screenshot below shows the DetailsDialog we intend to create.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/orderform-example-detailsdialog.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="detailsdialog-implementation">
<db:title>DetailsDialog Implementation</db:title>
<db:para>The constructor of DetailsDialog instantiates the earlier defined fields and their respective labels. The label for offersCheckBox is set and the setupItemsTable() function is invoked to setup and populate itemsTable. The <db:link xlink:href="qdialogbuttonbox.xml">QDialogButtonBox</db:link> object, buttonBox, is instantiated with <db:guilabel>OK</db:guilabel> and <db:guilabel>Cancel</db:guilabel> buttons. This buttonBox's accepted() and rejected() signals are connected to the verify() and reject() slots in DetailsDialog.</db:para>
<db:programlisting language="cpp">DetailsDialog::DetailsDialog(const QString &amp;title, QWidget *parent)
    : QDialog(parent)
{
    nameLabel = new QLabel(tr(&quot;Name:&quot;));
    addressLabel = new QLabel(tr(&quot;Address:&quot;));
    addressLabel-&gt;setAlignment(Qt::AlignLeft | Qt::AlignTop);

    nameEdit = new QLineEdit;
    addressEdit = new QTextEdit;

    offersCheckBox = new QCheckBox(tr(&quot;Send information about products and &quot;
                                      &quot;special offers&quot;));

    setupItemsTable();

    buttonBox = new QDialogButtonBox(QDialogButtonBox::Ok
                                     | QDialogButtonBox::Cancel);

    connect(buttonBox, SIGNAL(accepted()), this, SLOT(verify()));
    connect(buttonBox, SIGNAL(rejected()), this, SLOT(reject()));
</db:programlisting>
<db:para>A <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link> is used to place all the objects on the DetailsDialog.</db:para>
<db:programlisting language="cpp">    QGridLayout *mainLayout = new QGridLayout;
    mainLayout-&gt;addWidget(nameLabel, 0, 0);
    mainLayout-&gt;addWidget(nameEdit, 0, 1);
    mainLayout-&gt;addWidget(addressLabel, 1, 0);
    mainLayout-&gt;addWidget(addressEdit, 1, 1);
    mainLayout-&gt;addWidget(itemsTable, 0, 2, 2, 1);
    mainLayout-&gt;addWidget(offersCheckBox, 2, 1, 1, 2);
    mainLayout-&gt;addWidget(buttonBox, 3, 0, 1, 3);
    setLayout(mainLayout);

    setWindowTitle(title);
}
</db:programlisting>
<db:para>The setupItemsTable() function instantiates the <db:link xlink:href="qtablewidget.xml">QTableWidget</db:link> object, itemsTable, and sets the number of rows based on the <db:link xlink:href="qstringlist.xml">QStringList</db:link> object, items, which holds the type of items ordered. The number of columns is set to 2, providing a &quot;name&quot; and &quot;quantity&quot; layout. A for loop is used to populate the itemsTable and the name item's flag is set to <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemIsEnabled</db:link> or <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemIsSelectable</db:link>. For demonstration purposes, the quantity item is set to a 1 and all items in the itemsTable have this value for quantity; but this can be modified by editing the contents of the cells at run time.</db:para>
<db:programlisting language="cpp">void DetailsDialog::setupItemsTable()
{
    items &lt;&lt; tr(&quot;T-shirt&quot;) &lt;&lt; tr(&quot;Badge&quot;) &lt;&lt; tr(&quot;Reference book&quot;)
          &lt;&lt; tr(&quot;Coffee cup&quot;);

    itemsTable = new QTableWidget(items.count(), 2);

    for (int row = 0; row &lt; items.count(); ++row) {
        QTableWidgetItem *name = new QTableWidgetItem(items[row]);
        name-&gt;setFlags(Qt::ItemIsEnabled | Qt::ItemIsSelectable);
        itemsTable-&gt;setItem(row, 0, name);
        QTableWidgetItem *quantity = new QTableWidgetItem(&quot;1&quot;);
        itemsTable-&gt;setItem(row, 1, quantity);
    }
}
</db:programlisting>
<db:para>The orderItems() function extracts data from the itemsTable and returns it in the form of a <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qpair.xml">QPair</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>,int&gt;&gt; where each <db:link xlink:href="qpair.xml">QPair</db:link> corresponds to an item and the quantity ordered.</db:para>
<db:programlisting language="cpp">QList&lt;QPair&lt;QString, int&gt; &gt; DetailsDialog::orderItems()
{
    QList&lt;QPair&lt;QString, int&gt; &gt; orderList;

    for (int row = 0; row &lt; items.count(); ++row) {
        QPair&lt;QString, int&gt; item;
        item.first = itemsTable-&gt;item(row, 0)-&gt;text();
        int quantity = itemsTable-&gt;item(row, 1)-&gt;data(Qt::DisplayRole).toInt();
        item.second = qMax(0, quantity);
        orderList.append(item);
    }

    return orderList;
}
</db:programlisting>
<db:para>The senderName() function is used to return the value of the <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> used to store the name field for the order form.</db:para>
<db:programlisting language="cpp">QString DetailsDialog::senderName() const
{
    return nameEdit-&gt;text();
}
</db:programlisting>
<db:para>The senderAddress() function is used to return the value of the <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> containing the address for the order form.</db:para>
<db:programlisting language="cpp">QString DetailsDialog::senderAddress() const
{
    return addressEdit-&gt;toPlainText();
}
</db:programlisting>
<db:para>The sendOffers() function is used to return a true or false value that is used to determine if the customer in the order form wishes to receive more information on the company's offers and promotions.</db:para>
<db:programlisting language="cpp">bool DetailsDialog::sendOffers()
{
    return offersCheckBox-&gt;isChecked();
}
</db:programlisting>
<db:para>The verify() function is an additionally implemented slot used to verify the details entered by the user into the DetailsDialog. If the details entered are incomplete, a <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> is displayed providing the user the option to discard the DetailsDialog. Otherwise, the details are accepted and the accept() function is invoked.</db:para>
<db:programlisting language="cpp">void DetailsDialog::verify()
{
    if (!nameEdit-&gt;text().isEmpty() &amp;&amp; !addressEdit-&gt;toPlainText().isEmpty()) {
        accept();
        return;
    }

    QMessageBox::StandardButton answer;
    answer = QMessageBox::warning(this, tr(&quot;Incomplete Form&quot;),
        tr(&quot;The form does not contain all the necessary information.\n&quot;
           &quot;Do you want to discard it?&quot;),
        QMessageBox::Yes | QMessageBox::No);

    if (answer == QMessageBox::Yes)
        reject();
}
</db:programlisting>
</db:section>
<db:section xml:id="mainwindow-definition">
<db:title>MainWindow Definition</db:title>
<db:para>The MainWindow class is a subclass of <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>, implementing two slots - openDialog() and printFile(). It also contains a private instance of <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link>, letters.</db:para>
<db:programlisting language="cpp">class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow();
    void createSample();

public slots:
    void openDialog();
    void printFile();

private:
    void createLetter(const QString &amp;name, const QString &amp;address,
                      QList&lt;QPair&lt;QString,int&gt; &gt; orderItems,
                      bool sendOffers);

    QAction *printAction;
    QTabWidget *letters;
};
</db:programlisting>
</db:section>
<db:section xml:id="mainwindow-implementation">
<db:title>MainWindow Implementation</db:title>
<db:para>The MainWindow constructor sets up the fileMenu and the required actions, newAction and printAction. These actions' triggered() signals are connected to the additionally implemented openDialog() slot and the default close() slot. The <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link>, letters, is instantiated and set as the window's central widget.</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow()
{
    QMenu *fileMenu = new QMenu(tr(&quot;&amp;File&quot;), this);
    QAction *newAction = fileMenu-&gt;addAction(tr(&quot;&amp;New...&quot;));
    newAction-&gt;setShortcuts(QKeySequence::New);
    printAction = fileMenu-&gt;addAction(tr(&quot;&amp;Print...&quot;), this, SLOT(printFile()));
    printAction-&gt;setShortcuts(QKeySequence::Print);
    printAction-&gt;setEnabled(false);
    QAction *quitAction = fileMenu-&gt;addAction(tr(&quot;E&amp;xit&quot;));
    quitAction-&gt;setShortcuts(QKeySequence::Quit);
    menuBar()-&gt;addMenu(fileMenu);

    letters = new QTabWidget;

    connect(newAction, SIGNAL(triggered()), this, SLOT(openDialog()));
    connect(quitAction, SIGNAL(triggered()), this, SLOT(close()));

    setCentralWidget(letters);
    setWindowTitle(tr(&quot;Order Form&quot;));
}
</db:programlisting>
<db:para>The createLetter() function creates a new <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link> with a <db:link xlink:href="qtextedit.xml">QTextEdit</db:link>, editor, as the parent. This function accepts four parameters that correspond to we obtained through DetailsDialog, in order to &quot;fill&quot; the editor.</db:para>
<db:programlisting language="cpp">void MainWindow::createLetter(const QString &amp;name, const QString &amp;address,
                              QList&lt;QPair&lt;QString,int&gt; &gt; orderItems,
                              bool sendOffers)
{
    QTextEdit *editor = new QTextEdit;
    int tabIndex = letters-&gt;addTab(editor, name);
    letters-&gt;setCurrentIndex(tabIndex);
</db:programlisting>
<db:para>We then obtain the cursor for the editor using <db:link xlink:href="qtextedit.xml#textCursor">QTextEdit::textCursor</db:link>(). The cursor is then moved to the start of the document using <db:link xlink:href="qtextcursor.xml#MoveOperation-enum">QTextCursor::Start</db:link>.</db:para>
<db:programlisting language="cpp">    QTextCursor cursor(editor-&gt;textCursor());
    cursor.movePosition(QTextCursor::Start);
</db:programlisting>
<db:para>Recall the structure of a <db:link xlink:href="richtext-structure.xml">Rich Text Document</db:link>, where sequences of frames and tables are always separated by text blocks, some of which may contain no information.</db:para>
<db:para>In the case of the Order Form Example, the document structure for this portion is described by the table below:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td rowspan="8">
<db:para>frame with <db:emphasis>referenceFrameFormat</db:emphasis></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>A company</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>321 City Street</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>Industry Park</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>Another country</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This is accomplished with the following code:</db:para>
<db:programlisting language="cpp">    QTextFrame *topFrame = cursor.currentFrame();
    QTextFrameFormat topFrameFormat = topFrame-&gt;frameFormat();
    topFrameFormat.setPadding(16);
    topFrame-&gt;setFrameFormat(topFrameFormat);

    QTextCharFormat textFormat;
    QTextCharFormat boldFormat;
    boldFormat.setFontWeight(QFont::Bold);

    QTextFrameFormat referenceFrameFormat;
    referenceFrameFormat.setBorder(1);
    referenceFrameFormat.setPadding(8);
    referenceFrameFormat.setPosition(QTextFrameFormat::FloatRight);
    referenceFrameFormat.setWidth(QTextLength(QTextLength::PercentageLength, 40));
    cursor.insertFrame(referenceFrameFormat);

    cursor.insertText(&quot;A company&quot;, boldFormat);
    cursor.insertBlock();
    cursor.insertText(&quot;321 City Street&quot;);
    cursor.insertBlock();
    cursor.insertText(&quot;Industry Park&quot;);
    cursor.insertBlock();
    cursor.insertText(&quot;Another country&quot;);
</db:programlisting>
<db:para>Note that topFrame is the editor's top-level frame and is not shown in the document structure.</db:para>
<db:para>We then set the cursor's position back to its last position in topFrame and fill in the customer's name (provided by the constructor) and address - using a foreach loop to traverse the <db:link xlink:href="qstring.xml">QString</db:link>, address.</db:para>
<db:programlisting language="cpp">    cursor.setPosition(topFrame-&gt;lastPosition());

    cursor.insertText(name, textFormat);
    QString line;
    foreach (line, address.split(&quot;\n&quot;)) {
        cursor.insertBlock();
        cursor.insertText(line);
    }
</db:programlisting>
<db:para>The cursor is now back in topFrame and the document structure for the above portion of code is:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>Donald</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>47338 Park Avenue</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>Big City</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For spacing purposes, we invoke <db:link xlink:href="qtextcursor.xml#insertBlock">insertBlock</db:link>() twice. The <db:link xlink:href="qdate.xml#currentDate">currentDate</db:link>() is obtained and displayed. We use <db:link xlink:href="qtextframeformat.xml#setWidth">setWidth</db:link>() to increase the width of bodyFrameFormat and we insert a new frame with that width.</db:para>
<db:programlisting language="cpp">    cursor.insertBlock();
    cursor.insertBlock();

    QDate date = QDate::currentDate();
    cursor.insertText(tr(&quot;Date: %1&quot;).arg(date.toString(&quot;d MMMM yyyy&quot;)),
                      textFormat);
    cursor.insertBlock();

    QTextFrameFormat bodyFrameFormat;
    bodyFrameFormat.setWidth(QTextLength(QTextLength::PercentageLength, 100));
    cursor.insertFrame(bodyFrameFormat);
</db:programlisting>
<db:para>The following code inserts standard text into the order form.</db:para>
<db:programlisting language="cpp">    cursor.insertText(tr(&quot;I would like to place an order for the following &quot;
                         &quot;items:&quot;), textFormat);
    cursor.insertBlock();
    cursor.insertBlock();
</db:programlisting>
<db:para>This part of the document structure now contains the date, a frame with bodyFrameFormat, as well as the standard text.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>Date: 25 May 2007</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="4">
<db:para>frame with <db:emphasis>bodyFrameFormat</db:emphasis></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>I would like to place an order for the following items:</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>A <db:link xlink:href="qtexttableformat.xml">QTextTableFormat</db:link> object, orderTableFormat, is used to hold the type of item and the quantity ordered.</db:para>
<db:programlisting language="cpp">    QTextTableFormat orderTableFormat;
    orderTableFormat.setAlignment(Qt::AlignHCenter);
    QTextTable *orderTable = cursor.insertTable(1, 2, orderTableFormat);

    QTextFrameFormat orderFrameFormat = cursor.currentFrame()-&gt;frameFormat();
    orderFrameFormat.setBorder(1);
    cursor.currentFrame()-&gt;setFrameFormat(orderFrameFormat);
</db:programlisting>
<db:para>We use <db:link xlink:href="qtexttable.xml#cellAt">cellAt</db:link>() to set the headers for the orderTable.</db:para>
<db:programlisting language="cpp">    cursor = orderTable-&gt;cellAt(0, 0).firstCursorPosition();
    cursor.insertText(tr(&quot;Product&quot;), boldFormat);
    cursor = orderTable-&gt;cellAt(0, 1).firstCursorPosition();
    cursor.insertText(tr(&quot;Quantity&quot;), boldFormat);
</db:programlisting>
<db:para>Then, we iterate through the <db:link xlink:href="qlist.xml">QList</db:link> of <db:link xlink:href="qpair.xml">QPair</db:link> objects to populate orderTable.</db:para>
<db:programlisting language="cpp">    for (int i = 0; i &lt; orderItems.count(); ++i) {
        QPair&lt;QString,int&gt; item = orderItems[i];
        int row = orderTable-&gt;rows();

        orderTable-&gt;insertRows(row, 1);
        cursor = orderTable-&gt;cellAt(row, 0).firstCursorPosition();
        cursor.insertText(item.first, textFormat);
        cursor = orderTable-&gt;cellAt(row, 1).firstCursorPosition();
        cursor.insertText(QString(&quot;%1&quot;).arg(item.second), textFormat);
    }
</db:programlisting>
<db:para>The resulting document structure for this section is:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td rowspan="11">
<db:para>orderTable with <db:emphasis>orderTableFormat</db:emphasis></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>Product</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>Quantity</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>T-shirt</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>4</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>Badge</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>3</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>Reference book</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>2</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>Coffee cup</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>5</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The cursor is then moved back to topFrame's <db:link xlink:href="qtextframe.xml#lastPosition">lastPosition</db:link>() and more standard text is inserted.</db:para>
<db:programlisting language="cpp">    cursor.setPosition(topFrame-&gt;lastPosition());

    cursor.insertBlock();
    cursor.insertText(tr(&quot;Please update my records to take account of the &quot;
                         &quot;following privacy information:&quot;));
    cursor.insertBlock();
</db:programlisting>
<db:para>Another <db:link xlink:href="qtexttable.xml">QTextTable</db:link> is inserted, to display the customer's preference regarding offers.</db:para>
<db:programlisting language="cpp">    QTextTable *offersTable = cursor.insertTable(2, 2);

    cursor = offersTable-&gt;cellAt(0, 1).firstCursorPosition();
    cursor.insertText(tr(&quot;I want to receive more information about your &quot;
                         &quot;company's products and special offers.&quot;), textFormat);
    cursor = offersTable-&gt;cellAt(1, 1).firstCursorPosition();
    cursor.insertText(tr(&quot;I do not want to receive any promotional information &quot;
                         &quot;from your company.&quot;), textFormat);

    if (sendOffers)
        cursor = offersTable-&gt;cellAt(0, 0).firstCursorPosition();
    else
        cursor = offersTable-&gt;cellAt(1, 0).firstCursorPosition();

    cursor.insertText(&quot;X&quot;, boldFormat);
</db:programlisting>
<db:para>The document structure for this portion is:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>Please update my...</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="5">
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="4">
<db:para>offersTable</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>I want to receive...</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>I do not want to receive...</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The cursor is moved to insert &quot;Sincerely&quot; along with the customer's name. More blocks are inserted for spacing purposes. The printAction is enabled to indicate that an order form can now be printed.</db:para>
<db:programlisting language="cpp">    cursor.setPosition(topFrame-&gt;lastPosition());
    cursor.insertBlock();
    cursor.insertText(tr(&quot;Sincerely,&quot;), textFormat);
    cursor.insertBlock();
    cursor.insertBlock();
    cursor.insertBlock();
    cursor.insertText(name);

    printAction-&gt;setEnabled(true);
}
</db:programlisting>
<db:para>The bottom portion of the document structure is:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="5">
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>Sincerely,</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>block</db:para>
</db:td>
<db:td>
<db:para>Donald</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The createSample() function is used for illustration purposes, to create a sample order form.</db:para>
<db:programlisting language="cpp">void MainWindow::createSample()
{
    DetailsDialog dialog(&quot;Dialog with default values&quot;, this);
    createLetter(&quot;Mr. Smith&quot;, &quot;12 High Street\nSmall Town\nThis country&quot;,
                 dialog.orderItems(), true);
}
</db:programlisting>
<db:para>The openDialog() function opens a DetailsDialog object. If the details in dialog are accepted, the createLetter() function is invoked using the parameters extracted from dialog.</db:para>
<db:programlisting language="cpp">void MainWindow::openDialog()
{
    DetailsDialog dialog(tr(&quot;Enter Customer Details&quot;), this);

    if (dialog.exec() == QDialog::Accepted) {
        createLetter(dialog.senderName(), dialog.senderAddress(),
                     dialog.orderItems(), dialog.sendOffers());
    }
}
</db:programlisting>
<db:para>In order to print out the order form, a printFile() function is included, as shown below:</db:para>
<db:programlisting language="cpp">void MainWindow::printFile()
{
#if !defined(QT_NO_PRINTER) &amp;&amp; !defined(QT_NO_PRINTDIALOG)
    QTextEdit *editor = static_cast&lt;QTextEdit*&gt;(letters-&gt;currentWidget());
    QPrinter printer;

    QPrintDialog dialog(&amp;printer, this);
    dialog.setWindowTitle(tr(&quot;Print Document&quot;));
    if (editor-&gt;textCursor().hasSelection())
        dialog.addEnabledOption(QAbstractPrintDialog::PrintSelection);
    if (dialog.exec() != QDialog::Accepted) {
        return;
    }

    editor-&gt;print(&amp;printer);
#endif
}
</db:programlisting>
<db:para>This function also allows the user to print a selected area with <db:link xlink:href="qtextcursor.xml#hasSelection">QTextCursor::hasSelection</db:link>(), instead of printing the entire document.</db:para>
</db:section>
<db:section xml:id="main-function">
<db:title>main() Function</db:title>
<db:para>The main() function instantiates MainWindow and sets its size to 640x480 pixels before invoking the show() function and createSample() function.</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    MainWindow window;
    window.resize(640, 480);
    window.show();
    window.createSample();
    return app.exec();
}
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="richtext/orderform/detailsdialog.cpp">richtext/orderform/detailsdialog.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="richtext/orderform/detailsdialog.h">richtext/orderform/detailsdialog.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="richtext/orderform/main.cpp">richtext/orderform/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="richtext/orderform/mainwindow.cpp">richtext/orderform/mainwindow.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="richtext/orderform/mainwindow.h">richtext/orderform/mainwindow.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="richtext/orderform/orderform.pro">richtext/orderform/orderform.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
