<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTypeRevision Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtyperevision.xml">QTypeRevision</db:link> class contains a lightweight representation of a version number with two 8-bit segments, major and minor, either of which can be unknown.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
<db:para>This class is <db:emphasis>strongly comparable</db:emphasis>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTypeRevision</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Use this class to describe revisions of a type. Compatible revisions can be expressed as increments of the minor version. Breaking changes can be expressed as increments of the major version. The return values of <db:link xlink:href="qmetamethod.xml#revision">QMetaMethod::revision</db:link>() and <db:link xlink:href="qmetaproperty.xml#revision">QMetaProperty::revision</db:link>() can be passed to <db:link xlink:href="qtyperevision.xml#fromEncodedVersion">QTypeRevision::fromEncodedVersion</db:link>(). The resulting major and minor versions specify in which Qt versions the properties and methods were added.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetamethod.xml#revision">QMetaMethod::revision</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#revision">QMetaProperty::revision</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTypeRevision">
<db:title>[constexpr noexcept] QTypeRevision::QTypeRevision()</db:title>
<db:para>Produces an invalid revision.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtyperevision.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromEncodedVersion">
<db:title>[static constexpr] QTypeRevision QTypeRevision::fromEncodedVersion(Integer <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Produces a <db:link xlink:href="qtyperevision.xml">QTypeRevision</db:link> from the given <db:code role="parameter">value</db:code>. <db:code role="parameter">value</db:code> encodes both the minor and major versions in the least significant and second least significant byte, respectively.</db:para>
<db:para><db:code role="parameter">value</db:code> must not have any bits outside the least significant two bytes set. Integer needs to be at least 16 bits wide, and must not have a sign bit in the least significant 16 bits.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtyperevision.xml#toEncodedVersion">toEncodedVersion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromMajorVersion">
<db:title>[static constexpr] QTypeRevision QTypeRevision::fromMajorVersion(Major <db:emphasis>majorVersion</db:emphasis>)</db:title>
<db:para>Produces a <db:link xlink:href="qtyperevision.xml">QTypeRevision</db:link> from the given <db:code role="parameter">majorVersion</db:code> with an invalid minor version. <db:code role="parameter">majorVersion</db:code> needs to be a valid segment.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtyperevision.xml#isValidSegment">isValidSegment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromMinorVersion">
<db:title>[static constexpr] QTypeRevision QTypeRevision::fromMinorVersion(Minor <db:emphasis>minorVersion</db:emphasis>)</db:title>
<db:para>Produces a <db:link xlink:href="qtyperevision.xml">QTypeRevision</db:link> from the given <db:code role="parameter">minorVersion</db:code> with an invalid major version. <db:code role="parameter">minorVersion</db:code> needs to be a valid segment.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtyperevision.xml#isValidSegment">isValidSegment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromVersion">
<db:title>[static constexpr] QTypeRevision QTypeRevision::fromVersion(Major <db:emphasis>majorVersion</db:emphasis>, Minor <db:emphasis>minorVersion</db:emphasis>)</db:title>
<db:para>Produces a <db:link xlink:href="qtyperevision.xml">QTypeRevision</db:link> from the given <db:code role="parameter">majorVersion</db:code> and <db:code role="parameter">minorVersion</db:code>, both of which need to be a valid segments.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtyperevision.xml#isValidSegment">isValidSegment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasMajorVersion">
<db:title>[constexpr] bool QTypeRevision::hasMajorVersion() const</db:title>
<db:para>Returns true if the major version is known, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtyperevision.xml#majorVersion">majorVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qtyperevision.xml#hasMinorVersion">hasMinorVersion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasMinorVersion">
<db:title>[constexpr] bool QTypeRevision::hasMinorVersion() const</db:title>
<db:para>Returns true if the minor version is known, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtyperevision.xml#minorVersion">minorVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qtyperevision.xml#hasMajorVersion">hasMajorVersion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>[constexpr] bool QTypeRevision::isValid() const</db:title>
<db:para>Returns true if the major version or the minor version is known, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtyperevision.xml#hasMajorVersion">hasMajorVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qtyperevision.xml#hasMinorVersion">hasMinorVersion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValidSegment">
<db:title>[static constexpr] bool QTypeRevision::isValidSegment(Integer <db:emphasis>segment</db:emphasis>)</db:title>
<db:para>Returns true if the given number can be used as either major or minor version in a <db:link xlink:href="qtyperevision.xml">QTypeRevision</db:link>. The valid range for <db:code role="parameter">segment</db:code> is &gt;= 0 and &lt; 255.</db:para>
</db:section>
<db:section xml:id="majorVersion">
<db:title>[constexpr] quint8 QTypeRevision::majorVersion() const</db:title>
<db:para>Returns the major version encoded in the revision.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtyperevision.xml#hasMajorVersion">hasMajorVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qtyperevision.xml#minorVersion">minorVersion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minorVersion">
<db:title>[constexpr] quint8 QTypeRevision::minorVersion() const</db:title>
<db:para>Returns the minor version encoded in the revision.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtyperevision.xml#hasMinorVersion">hasMinorVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qtyperevision.xml#majorVersion">majorVersion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toEncodedVersion">
<db:title>[constexpr] Integer QTypeRevision::toEncodedVersion() const</db:title>
<db:para>Transforms the revision into an integer value, encoding the minor version into the least significant byte, and the major version into the second least significant byte.</db:para>
<db:para>Integer needs to be at least 16 bits wide, and must not have a sign bit in the least significant 16 bits.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtyperevision.xml#fromEncodedVersion">fromEncodedVersion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="zero">
<db:title>[static constexpr] QTypeRevision QTypeRevision::zero()</db:title>
<db:para>Produces a <db:link xlink:href="qtyperevision.xml">QTypeRevision</db:link> with major and minor version 0.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt-26">
<db:title>[since 6.0] QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, const QTypeRevision &amp;<db:emphasis>revision</db:emphasis>)</db:title>
<db:para>Writes the revision <db:code role="parameter">revision</db:code> to stream <db:code role="parameter">out</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-26">
<db:title>[since 6.0] QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QTypeRevision &amp;<db:emphasis>revision</db:emphasis>)</db:title>
<db:para>Reads a revision from stream <db:code role="parameter">in</db:code> and stores it in <db:code role="parameter">revision</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
</db:section>
</db:article>
