<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QLatin1String Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> class provides a thin wrapper around an US-ASCII/Latin-1 encoded string literal.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QLatin1String</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QLatin1String is part of <db:simplelist><db:member>string-processing</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Many of <db:link xlink:href="qstring.xml">QString</db:link>'s member functions are overloaded to accept <db:code>const char *</db:code> instead of <db:link xlink:href="qstring.xml">QString</db:link>. This includes the copy constructor, the assignment operator, the comparison operators, and various other functions such as <db:link xlink:href="qstring.xml#insert">insert</db:link>(), <db:link xlink:href="qstring.xml#replace">replace</db:link>(), and <db:link xlink:href="qstring.xml#indexOf">indexOf</db:link>(). These functions are usually optimized to avoid constructing a <db:link xlink:href="qstring.xml">QString</db:link> object for the <db:code>const char *</db:code> data. For example, assuming <db:code>str</db:code> is a <db:link xlink:href="qstring.xml">QString</db:link>,</db:para>
<db:programlisting language="cpp">if (str == &quot;auto&quot; || str == &quot;extern&quot;
        || str == &quot;static&quot; || str == &quot;register&quot;) {
    ...
}
</db:programlisting>
<db:para>is much faster than</db:para>
<db:programlisting language="cpp">if (str == QString(&quot;auto&quot;) || str == QString(&quot;extern&quot;)
        || str == QString(&quot;static&quot;) || str == QString(&quot;register&quot;)) {
    ...
}
</db:programlisting>
<db:para>because it doesn't construct four temporary <db:link xlink:href="qstring.xml">QString</db:link> objects and make a deep copy of the character data.</db:para>
<db:para>Applications that define <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> (as explained in the <db:link xlink:href="qstring.xml">QString</db:link> documentation) don't have access to <db:link xlink:href="qstring.xml">QString</db:link>'s <db:code>const char *</db:code> API. To provide an efficient way of specifying constant Latin-1 strings, Qt provides the <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link>, which is just a very thin wrapper around a <db:code>const char *</db:code>. Using <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link>, the example code above becomes</db:para>
<db:programlisting language="cpp">if (str == QLatin1String(&quot;auto&quot;)
        || str == QLatin1String(&quot;extern&quot;)
        || str == QLatin1String(&quot;static&quot;)
        || str == QLatin1String(&quot;register&quot;) {
    ...
}
</db:programlisting>
<db:para>This is a bit longer to type, but it provides exactly the same benefits as the first version of the code, and is faster than converting the Latin-1 strings using <db:link xlink:href="qstring.xml#fromLatin1">QString::fromLatin1</db:link>().</db:para>
<db:para>Thanks to the <db:link xlink:href="qstring.xml">QString</db:link>(<db:link xlink:href="qlatin1string.xml">QLatin1String</db:link>) constructor, <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> can be used everywhere a <db:link xlink:href="qstring.xml">QString</db:link> is expected. For example:</db:para>
<db:programlisting language="cpp">QLabel *label = new QLabel(QLatin1String(&quot;MOD&quot;), this);
</db:programlisting>
<db:note>
<db:para>If the function you're calling with a <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> argument isn't actually overloaded to take <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link>, the implicit conversion to <db:link xlink:href="qstring.xml">QString</db:link> will trigger a memory allocation, which is usually what you want to avoid by using <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> in the first place. In those cases, using <db:link xlink:href="qstring.xml#QStringLiteral">QStringLiteral</db:link> may be the better option.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml">QString</db:link></db:member>
<db:member><db:link xlink:href="qlatin1char.xml">QLatin1Char</db:link></db:member>
<db:member><db:link xlink:href="qstring.xml#QStringLiteral">QStringLiteral</db:link></db:member>
<db:member><db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="const_iterator-typedef">
<db:title>[alias, since 5.10] QLatin1String::const_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>const_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#iterator-typedef">iterator</db:link></db:member>
<db:member><db:link xlink:href="qlatin1string.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="const_reference-typedef">
<db:title>[alias, since 5.11] QLatin1String::const_reference</db:title>
<db:typedefsynopsis>
<db:typedefname>const_reference</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>reference</db:code>. Provided for compatibility with the STL.</db:para>
<db:para>This typedef was introduced in Qt 5.11.</db:para>
</db:section>
<db:section xml:id="const_reverse_iterator-typedef">
<db:title>[alias, since 5.10] QLatin1String::const_reverse_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>const_reverse_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#reverse_iterator-typedef">reverse_iterator</db:link></db:member>
<db:member><db:link xlink:href="qlatin1string.xml#const_iterator-typedef">const_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="difference_type-typedef">
<db:title>[alias, since 5.10] QLatin1String::difference_type</db:title>
<db:typedefsynopsis>
<db:typedefname>difference_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>qsizetype</db:code>. Provided for compatibility with the STL.</db:para>
<db:para>This typedef was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="iterator-typedef">
<db:title>[alias, since 5.10] QLatin1String::iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para><db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> does not support mutable iterators, so this is the same as <db:link xlink:href="qlatin1string.xml#const_iterator-typedef">const_iterator</db:link>.</db:para>
<db:para>This typedef was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#const_iterator-typedef">const_iterator</db:link></db:member>
<db:member><db:link xlink:href="qlatin1string.xml#reverse_iterator-typedef">reverse_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reference-typedef">
<db:title>[alias, since 5.10] QLatin1String::reference</db:title>
<db:typedefsynopsis>
<db:typedefname>reference</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>value_type &amp;</db:code>. Provided for compatibility with the STL.</db:para>
<db:para>This typedef was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="reverse_iterator-typedef">
<db:title>[alias, since 5.10] QLatin1String::reverse_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>reverse_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para><db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> does not support mutable reverse iterators, so this is the same as <db:link xlink:href="qlatin1string.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link>.</db:para>
<db:para>This typedef was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link></db:member>
<db:member><db:link xlink:href="qlatin1string.xml#iterator-typedef">iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size_type-typedef">
<db:title>[alias, since 5.10] QLatin1String::size_type</db:title>
<db:typedefsynopsis>
<db:typedefname>size_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>qsizetype</db:code>. Provided for compatibility with the STL.</db:para>
<db:note>
<db:para>In version prior to Qt 6, this was an alias for <db:code>int</db:code>, restricting the amount of data that could be held in a <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> on 64-bit architectures.</db:para>
</db:note>
<db:para>This typedef was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="value_type-typedef">
<db:title>[alias, since 5.10] QLatin1String::value_type</db:title>
<db:typedefsynopsis>
<db:typedefname>value_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>const char</db:code>. Provided for compatibility with the STL.</db:para>
<db:para>This typedef was introduced in Qt 5.10.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="compare-2">
<db:title>[constexpr, since 5.14] int QLatin1String::compare(QChar <db:emphasis>ch</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="compare-3">[since 5.14] int QLatin1String::compare(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis>) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="compare-1">[since 5.14] int QLatin1String::compare(QLatin1String <db:emphasis>l1</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="compare">[since 5.14] int QLatin1String::compare(QStringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:para>Returns an integer that compares to zero as this Latin-1 string compares to the string-view <db:code role="parameter">str</db:code>, Latin-1 string <db:code role="parameter">l1</db:code>, or character <db:code role="parameter">ch</db:code>, respectively.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the comparison is case sensitive; otherwise the comparison is case-insensitive.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#operator-eq-eq">operator==</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#operator-lt">operator&lt;</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#operator-gt">operator&gt;</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startsWith-2">
<db:title>[constexpr, since 5.10] bool QLatin1String::startsWith(QChar <db:emphasis>ch</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="startsWith-3">[since 5.10] bool QLatin1String::startsWith(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis>) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="startsWith-1">[since 5.10] bool QLatin1String::startsWith(QLatin1String <db:emphasis>l1</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="startsWith">[since 5.10] bool QLatin1String::startsWith(QStringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:para>Returns <db:code>true</db:code> if this Latin-1 string starts with string-view <db:code role="parameter">str</db:code>, Latin-1 string <db:code role="parameter">l1</db:code>, or character <db:code role="parameter">ch</db:code>, respectively; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the search is case-sensitive; otherwise the search is case-insensitive.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endsWith-2">
<db:title>[constexpr, since 5.10] bool QLatin1String::endsWith(QChar <db:emphasis>ch</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="endsWith-3">[since 5.10] bool QLatin1String::endsWith(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis>) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="endsWith-1">[since 5.10] bool QLatin1String::endsWith(QLatin1String <db:emphasis>l1</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="endsWith">[since 5.10] bool QLatin1String::endsWith(QStringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:para>Returns <db:code>true</db:code> if this Latin-1 string ends with string-view <db:code role="parameter">str</db:code>, Latin-1 string <db:code role="parameter">l1</db:code>, or character <db:code role="parameter">ch</db:code>, respectively; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the search is case-sensitive; otherwise the search is case-insensitive.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#startsWith">startsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf-2">
<db:title>[since 5.14] qsizetype QLatin1String::indexOf(QChar <db:emphasis>c</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:bridgehead renderas="sect2" xml:id="indexOf-1">[since 5.14] qsizetype QLatin1String::indexOf(QLatin1String <db:emphasis>l1</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="indexOf">[since 5.14] qsizetype QLatin1String::indexOf(QStringView <db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:para>Returns the index position of the first occurrence of the string-view <db:code role="parameter">str</db:code>, Latin-1 string <db:code role="parameter">l1</db:code>, or character <db:code role="parameter">ch</db:code>, respectively, in this Latin-1 string, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>If <db:code role="parameter">from</db:code> is -1, the search starts at the last character; if it is -2, at the next to last character and so on.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#indexOf">QString::indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains-2">
<db:title>[since 5.14] bool QLatin1String::contains(QChar <db:emphasis>c</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:bridgehead renderas="sect2" xml:id="contains-1">[since 5.14] bool QLatin1String::contains(QLatin1String <db:emphasis>l1</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="contains">[since 5.14] bool QLatin1String::contains(QStringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:para>Returns <db:code>true</db:code> if this Latin-1 string contains an occurrence of the string-view <db:code role="parameter">str</db:code>, Latin-1 string <db:code role="parameter">l1</db:code>, or character <db:code role="parameter">ch</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the search is case-sensitive; otherwise the search is case-insensitive.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#contains">QStringView::contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#indexOf">QStringView::indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#indexOf">QString::indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf-2">
<db:title>[since 5.14] qsizetype QLatin1String::lastIndexOf(QChar <db:emphasis>c</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = -1, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:bridgehead renderas="sect2" xml:id="lastIndexOf-1">[since 5.14] qsizetype QLatin1String::lastIndexOf(QLatin1String <db:emphasis>l1</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = -1, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="lastIndexOf">[since 5.14] qsizetype QLatin1String::lastIndexOf(QStringView <db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = -1, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:para>Returns the index position of the last occurrence of the string-view <db:code role="parameter">str</db:code>, Latin-1 string <db:code role="parameter">l1</db:code>, or character <db:code role="parameter">ch</db:code>, respectively, in this Latin-1 string, searching backward from index position <db:code role="parameter">from</db:code>. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">from</db:code> is -1 (default), the search starts at the last character; if <db:code role="parameter">from</db:code> is -2, at the next to last character and so on.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#lastIndexOf">QStringView::lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#indexOf">QStringView::indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#indexOf">QString::indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="arg">
<db:title>[since 5.14] QString QLatin1String::arg(Args &amp;&amp;... <db:emphasis>args</db:emphasis>) const</db:title>
<db:para>Replaces occurrences of <db:code>%N</db:code> in this string with the corresponding argument from <db:code role="parameter">args</db:code>. The arguments are not positional: the first of the <db:code role="parameter">args</db:code> replaces the <db:code>%N</db:code> with the lowest <db:code>N</db:code> (all of them), the second of the <db:code role="parameter">args</db:code> the <db:code>%N</db:code> with the next-lowest <db:code>N</db:code> etc.</db:para>
<db:para><db:code>Args</db:code> can consist of anything that implicitly converts to <db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qstringview.xml">QStringView</db:link> or <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link>.</db:para>
<db:para>In addition, the following types are also supported: <db:link xlink:href="qchar.xml">QChar</db:link>, <db:link xlink:href="qlatin1char.xml">QLatin1Char</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#arg">QString::arg</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tokenize">
<db:title>[constexpr, since 6.0] decltype(qTokenize(*this, std::forward&lt;Needle&gt;(needle), flags...)) QLatin1String::tokenize(Needle &amp;&amp;<db:emphasis>sep</db:emphasis>, Flags... <db:emphasis>flags</db:emphasis>) const</db:title>
<db:para>Splits the string into substring views wherever <db:code role="parameter">sep</db:code> occurs, and returns a lazy sequence of those strings.</db:para>
<db:para>Equivalent to</db:para>
<db:programlisting language="cpp">return QStringTokenizer{std::forward&amp;lt;Needle&amp;gt;(sep), flags...};
</db:programlisting>
<db:para>except it works without C++17 Class Template Argument Deduction (CTAD) enabled in the compiler.</db:para>
<db:para>See <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> for how <db:code role="parameter">sep</db:code> and <db:code role="parameter">flags</db:code> interact to form the result.</db:para>
<db:note>
<db:para>While this function returns <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link>, you should never, ever, name its template arguments explicitly. If you can use C++17 Class Template Argument Deduction (CTAD), you may write</db:para>
</db:note>
<db:programlisting language="cpp">QStringTokenizer result = sv.tokenize(sep);
</db:programlisting>
<db:para>(without template arguments). If you can't use C++17 CTAD, you must store the return value only in <db:code>auto</db:code> variables:</db:para>
<db:programlisting language="cpp">auto result = sv.tokenize(sep);
</db:programlisting>
<db:para>This is because the template arguments of <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> have a very subtle dependency on the specific <db:link xlink:href="qlatin1string.xml#tokenize">tokenize</db:link>() overload from which they are returned, and they don't usually correspond to the type used for the separator.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link></db:member>
<db:member><db:link xlink:href="qstringtokenizer.xml#qTokenize">qTokenize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QLatin1String">
<db:title>[constexpr, since 5.6] QLatin1String::QLatin1String()</db:title>
<db:constructorsynopsis>
<db:methodname>QLatin1String</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> object that stores a nullptr.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="QLatin1String-1">
<db:title>[explicit constexpr] QLatin1String::QLatin1String(const char *<db:emphasis>str</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QLatin1String</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String(const char *str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> object that stores <db:code role="parameter">str</db:code>.</db:para>
<db:para>The string data is <db:emphasis>not</db:emphasis> copied. The caller must be able to guarantee that <db:code role="parameter">str</db:code> will not be deleted or modified as long as the <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> object exists.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#latin1">latin1</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QLatin1String-2">
<db:title>[explicit constexpr, since 5.10] QLatin1String::QLatin1String(const char *<db:emphasis>first</db:emphasis>, const char *<db:emphasis>last</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QLatin1String</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>last</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String(const char *first, const char *last)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> object that stores <db:code role="parameter">first</db:code> with length (<db:code role="parameter">last</db:code> - <db:code role="parameter">first</db:code>).</db:para>
<db:para>The range <db:code>[first,last)</db:code> must remain valid for the lifetime of this Latin-1 string object.</db:para>
<db:para>Passing <db:code>nullptr</db:code> as <db:code role="parameter">first</db:code> is safe if <db:code role="parameter">last</db:code> is <db:code>nullptr</db:code>, too, and results in a null Latin-1 string.</db:para>
<db:para>The behavior is undefined if <db:code role="parameter">last</db:code> precedes <db:code role="parameter">first</db:code>, <db:code role="parameter">first</db:code> is <db:code>nullptr</db:code> and <db:code role="parameter">last</db:code> is not, or if <db:code>last - first &gt; INT_MAX</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="QLatin1String-3">
<db:title>[explicit constexpr] QLatin1String::QLatin1String(const char *<db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>size</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QLatin1String</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String(const char *str, qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> object that stores <db:code role="parameter">str</db:code> with <db:code role="parameter">size</db:code>.</db:para>
<db:para>The string data is <db:emphasis>not</db:emphasis> copied. The caller must be able to guarantee that <db:code role="parameter">str</db:code> will not be deleted or modified as long as the <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> object exists.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#latin1">latin1</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QLatin1String-4">
<db:title>[explicit] QLatin1String::QLatin1String(const QByteArray &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QLatin1String</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String(const QByteArray &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> object that stores <db:code role="parameter">str</db:code>.</db:para>
<db:para>The string data is <db:emphasis>not</db:emphasis> copied. The caller must be able to guarantee that <db:code role="parameter">str</db:code> will not be deleted or modified as long as the <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> object exists.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#latin1">latin1</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="at">
<db:title>[constexpr, since 5.8] QLatin1Char QLatin1String::at(qsizetype <db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLatin1Char</db:type>
<db:methodname>at</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1Char at(qsizetype pos) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the character at position <db:code role="parameter">pos</db:code> in this object.</db:para>
<db:note>
<db:para>This function performs no error checking. The behavior is undefined when <db:code role="parameter">pos</db:code> &lt; 0 or <db:code role="parameter">pos</db:code> &gt;= <db:link xlink:href="qlatin1string.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#operator-5b-5d">operator[]</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="back">
<db:title>[constexpr, since 5.10] QLatin1Char QLatin1String::back() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLatin1Char</db:type>
<db:methodname>back</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1Char back() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the last character in the string. Same as <db:code>at(size() - 1)</db:code>.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:warning>
<db:para>Calling this function on an empty string constitutes undefined behavior.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#front">front</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#operator-5b-5d">operator[]</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="begin">
<db:title>[constexpr, since 5.10] QLatin1String::const_iterator QLatin1String::begin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLatin1String::const_iterator</db:type>
<db:methodname>begin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String::const_iterator begin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the first character in the string.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#cbegin">cbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cbegin">
<db:title>[constexpr, since 5.10] QLatin1String::const_iterator QLatin1String::cbegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLatin1String::const_iterator</db:type>
<db:methodname>cbegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String::const_iterator cbegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qlatin1string.xml#begin">begin</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#cend">cend</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#crbegin">crbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cend">
<db:title>[constexpr, since 5.10] QLatin1String::const_iterator QLatin1String::cend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLatin1String::const_iterator</db:type>
<db:methodname>cend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String::const_iterator cend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qlatin1string.xml#end">end</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#cbegin">cbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#crend">crend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="chop">
<db:title>[constexpr, since 5.10] void QLatin1String::chop(qsizetype <db:emphasis>length</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>chop</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void chop(qsizetype length)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Truncates this string by <db:code role="parameter">length</db:code> characters.</db:para>
<db:para>Same as <db:code>*this = left(size() - length)</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">length</db:code> &lt; 0 or <db:code role="parameter">length</db:code> &gt; <db:link xlink:href="qlatin1string.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="chopped">
<db:title>[constexpr, since 5.10] QLatin1String QLatin1String::chopped(qsizetype <db:emphasis>length</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLatin1String</db:type>
<db:methodname>chopped</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String chopped(qsizetype length) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the substring of length <db:link xlink:href="qlatin1string.xml#size">size</db:link>() - <db:code role="parameter">length</db:code> starting at the beginning of this object.</db:para>
<db:para>Same as <db:code>left(size() - length)</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">length</db:code> &lt; 0 or <db:code role="parameter">length</db:code> &gt; <db:link xlink:href="qlatin1string.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="crbegin">
<db:title>[since 5.10] QLatin1String::const_reverse_iterator QLatin1String::crbegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLatin1String::const_reverse_iterator</db:type>
<db:methodname>crbegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String::const_reverse_iterator crbegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qlatin1string.xml#rbegin">rbegin</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#crend">crend</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#cbegin">cbegin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="crend">
<db:title>[since 5.10] QLatin1String::const_reverse_iterator QLatin1String::crend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLatin1String::const_reverse_iterator</db:type>
<db:methodname>crend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String::const_reverse_iterator crend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qlatin1string.xml#rend">rend</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#crbegin">crbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#rend">rend</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#cend">cend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>[constexpr] const char *QLatin1String::data() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const char *</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const char * data() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the Latin-1 string stored in this object.</db:para>
</db:section>
<db:section xml:id="end">
<db:title>[constexpr, since 5.10] QLatin1String::const_iterator QLatin1String::end() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLatin1String::const_iterator</db:type>
<db:methodname>end</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String::const_iterator end() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing just after the last character in the string.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#cend">cend</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#rend">rend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="first">
<db:title>[constexpr, since 6.0] QLatin1String QLatin1String::first(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLatin1String</db:type>
<db:methodname>first</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String first(qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a Latin-1 string that contains the first <db:code role="parameter">n</db:code> characters of this Latin-1 string.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">n</db:code> &lt; 0 or <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qlatin1string.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#startsWith">startsWith</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="front">
<db:title>[constexpr, since 5.10] QLatin1Char QLatin1String::front() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLatin1Char</db:type>
<db:methodname>front</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1Char front() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the first character in the string. Same as <db:code>at(0)</db:code>.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:warning>
<db:para>Calling this function on an empty string constitutes undefined behavior.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#back">back</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#operator-5b-5d">operator[]</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>[constexpr, since 5.10] bool QLatin1String::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the Latin-1 string stored in this object is empty (<db:code>size() == 0</db:code>) or not.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>[constexpr, since 5.10] bool QLatin1String::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the Latin-1 string stored in this object is null (<db:code>data() == nullptr</db:code>) or not.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="last">
<db:title>[constexpr, since 6.0] QLatin1String QLatin1String::last(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLatin1String</db:type>
<db:methodname>last</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String last(qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a Latin-1 string that contains the last <db:code role="parameter">n</db:code> characters of this Latin-1 string.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">n</db:code> &lt; 0 or <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qlatin1string.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#endsWith">endsWith</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="latin1">
<db:title>[constexpr] const char *QLatin1String::latin1() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const char *</db:type>
<db:methodname>latin1</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const char * latin1() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the Latin-1 string stored in this object.</db:para>
</db:section>
<db:section xml:id="left">
<db:title>[constexpr, since 5.8] QLatin1String QLatin1String::left(qsizetype <db:emphasis>length</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLatin1String</db:type>
<db:methodname>left</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String left(qsizetype length) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If you know that <db:code role="parameter">length</db:code> cannot be out of bounds, use <db:link xlink:href="qlatin1string.xml#first">first</db:link>() instead in new code, because it is faster.</db:para>
<db:para>Returns the substring of length <db:code role="parameter">length</db:code> starting at position 0 in this Latin-1 string.</db:para>
<db:para>The entire Latin-1 string is returned if <db:code role="parameter">length</db:code> is greater than or equal to <db:link xlink:href="qlatin1string.xml#size">size</db:link>(), or less than zero.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#startsWith">startsWith</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mid">
<db:title>[constexpr, since 5.8] QLatin1String QLatin1String::mid(qsizetype <db:emphasis>start</db:emphasis>, qsizetype <db:emphasis>length</db:emphasis> = -1) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLatin1String</db:type>
<db:methodname>mid</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>length</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String mid(qsizetype start, qsizetype length) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the substring of length <db:code role="parameter">length</db:code> starting at position <db:code role="parameter">start</db:code> in this Latin-1 string.</db:para>
<db:para>If you know that <db:code role="parameter">start</db:code> and <db:code role="parameter">length</db:code> cannot be out of bounds, use <db:link xlink:href="qlatin1string.xml#sliced">sliced</db:link>() instead in new code, because it is faster.</db:para>
<db:para>Returns an empty Latin-1 string if <db:code role="parameter">start</db:code> exceeds the length of this Latin-1 string. If there are less than <db:code role="parameter">length</db:code> characters available in this Latin-1 string starting at <db:code role="parameter">start</db:code>, or if <db:code role="parameter">length</db:code> is negative (default), the function returns all characters that are available from <db:code role="parameter">start</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rbegin">
<db:title>[since 5.10] QLatin1String::const_reverse_iterator QLatin1String::rbegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLatin1String::const_reverse_iterator</db:type>
<db:methodname>rbegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String::const_reverse_iterator rbegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style</db:link> reverse iterator pointing to the first character in the string, in reverse order.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#rend">rend</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#crbegin">crbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#begin">begin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rend">
<db:title>[since 5.10] QLatin1String::const_reverse_iterator QLatin1String::rend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLatin1String::const_reverse_iterator</db:type>
<db:methodname>rend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String::const_reverse_iterator rend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="containers.xml#stl-style-iterators">STL-style</db:link> reverse iterator pointing just after the last character in the string, in reverse order.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#crend">crend</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="right">
<db:title>[constexpr, since 5.8] QLatin1String QLatin1String::right(qsizetype <db:emphasis>length</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLatin1String</db:type>
<db:methodname>right</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String right(qsizetype length) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If you know that <db:code role="parameter">length</db:code> cannot be out of bounds, use <db:link xlink:href="qlatin1string.xml#last">last</db:link>() instead in new code, because it is faster.</db:para>
<db:para>Returns the substring of length <db:code role="parameter">length</db:code> starting at position <db:link xlink:href="qlatin1string.xml#size">size</db:link>() - <db:code role="parameter">length</db:code> in this Latin-1 string.</db:para>
<db:para>The entire Latin-1 string is returned if <db:code role="parameter">length</db:code> is greater than or equal to <db:link xlink:href="qlatin1string.xml#size">size</db:link>(), or less than zero.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#endsWith">endsWith</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>[constexpr] qsizetype QLatin1String::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size of the Latin-1 string stored in this object.</db:para>
<db:note>
<db:para>In version prior to Qt 6, this function returned <db:code>int</db:code>, restricting the amount of data that could be held in a <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> on 64-bit architectures.</db:para>
</db:note>
</db:section>
<db:section xml:id="sliced">
<db:title>[constexpr, since 6.0] QLatin1String QLatin1String::sliced(qsizetype <db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLatin1String</db:type>
<db:methodname>sliced</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String sliced(qsizetype pos) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a Latin-1 string starting at position <db:code role="parameter">pos</db:code> in this Latin-1 string, and extending to its end.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">pos</db:code> &lt; 0 or <db:code role="parameter">pos</db:code> &gt; <db:link xlink:href="qlatin1string.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliced-1">
<db:title>[constexpr, since 6.0] QLatin1String QLatin1String::sliced(qsizetype <db:emphasis>pos</db:emphasis>, qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLatin1String</db:type>
<db:methodname>sliced</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String sliced(qsizetype pos, qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a Latin-1 string that points to <db:code role="parameter">n</db:code> characters of this Latin-1 string, starting at position <db:code role="parameter">pos</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">pos</db:code> &lt; 0, <db:code role="parameter">n</db:code> &lt; 0, or <db:code>pos + n &gt; size()</db:code>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString">
<db:title>[since 6.0] QString QLatin1String::toString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts this Latin-1 string into a <db:link xlink:href="qstring.xml">QString</db:link>. Equivalent to</db:para>
<db:programlisting language="cpp">return QString(*this);
</db:programlisting>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="trimmed">
<db:title>[since 5.10] QLatin1String QLatin1String::trimmed() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLatin1String</db:type>
<db:methodname>trimmed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1String trimmed() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Strips leading and trailing whitespace and returns the result.</db:para>
<db:para>Whitespace means any character for which <db:link xlink:href="qchar.xml#isSpace">QChar::isSpace</db:link>() returns <db:code>true</db:code>. This includes the ASCII characters '\t', '\n', '\v', '\f', '\r', and ' '.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="truncate">
<db:title>[constexpr, since 5.10] void QLatin1String::truncate(qsizetype <db:emphasis>length</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>truncate</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void truncate(qsizetype length)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Truncates this string to length <db:code role="parameter">length</db:code>.</db:para>
<db:para>Same as <db:code>*this = left(length)</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">length</db:code> &lt; 0 or <db:code role="parameter">length</db:code> &gt; <db:link xlink:href="qlatin1string.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qlatin1string.xml#chop">chop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq-5">
<db:title>bool QLatin1String::operator!=(const char *<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const char *other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this string is not equal to const char pointer <db:code role="parameter">other</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>The <db:code role="parameter">other</db:code> const char pointer is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">QString::fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq-6">
<db:title>[since 5.0] bool QLatin1String::operator!=(const QByteArray &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QByteArray &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qlatin1string.xml#operator-not-eq">operator!=</db:link>().</db:para>
<db:para>The <db:code role="parameter">other</db:code> byte array is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">QString::fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="operator-lt-5">
<db:title>bool QLatin1String::operator&lt;(const char *<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(const char *other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this string is lexically less than const char pointer <db:code role="parameter">other</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>The <db:code role="parameter">other</db:code> const char pointer is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">QString::fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-6">
<db:title>[since 5.0] bool QLatin1String::operator&lt;(const QByteArray &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(const QByteArray &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The <db:code role="parameter">other</db:code> byte array is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">QString::fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq-5">
<db:title>bool QLatin1String::operator&lt;=(const char *<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(const char *other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this string is lexically less than or equal to const char pointer <db:code role="parameter">other</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>The <db:code role="parameter">other</db:code> const char pointer is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">QString::fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-eq-6">
<db:title>[since 5.0] bool QLatin1String::operator&lt;=(const QByteArray &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(const QByteArray &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The <db:code role="parameter">other</db:code> byte array is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">QString::fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-5">
<db:title>bool QLatin1String::operator==(const char *<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const char *other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the string is equal to const char pointer <db:code role="parameter">other</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>The <db:code role="parameter">other</db:code> const char pointer is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">QString::fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq-6">
<db:title>[since 5.0] bool QLatin1String::operator==(const QByteArray &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QByteArray &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The <db:code role="parameter">other</db:code> byte array is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">QString::fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="operator-gt-5">
<db:title>bool QLatin1String::operator&gt;(const char *<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(const char *other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this string is lexically greater than const char pointer <db:code role="parameter">other</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>The <db:code role="parameter">other</db:code> const char pointer is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">QString::fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-6">
<db:title>[since 5.0] bool QLatin1String::operator&gt;(const QByteArray &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(const QByteArray &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The <db:code role="parameter">other</db:code> byte array is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">QString::fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq-5">
<db:title>bool QLatin1String::operator&gt;=(const char *<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(const char *other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this string is lexically greater than or equal to const char pointer <db:code role="parameter">other</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>The <db:code role="parameter">other</db:code> const char pointer is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">QString::fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-eq-6">
<db:title>[since 5.0] bool QLatin1String::operator&gt;=(const QByteArray &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(const QByteArray &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The <db:code role="parameter">other</db:code> byte array is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">QString::fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>[constexpr, since 5.8] QLatin1Char QLatin1String::operator[](qsizetype <db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLatin1Char</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1Char operator[](qsizetype pos) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the character at position <db:code role="parameter">pos</db:code> in this object.</db:para>
<db:note>
<db:para>This function performs no error checking. The behavior is undefined when <db:code role="parameter">pos</db:code> &lt; 0 or <db:code role="parameter">pos</db:code> &gt;= <db:link xlink:href="qlatin1string.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlatin1string.xml#at">at</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(QLatin1String <db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(QLatin1String s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s1</db:code> is lexically not equal to string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-1">
<db:title>bool operator!=(QChar <db:emphasis>ch</db:emphasis>, QLatin1String <db:emphasis>s</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(QChar ch, QLatin1String s)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if char <db:code role="parameter">ch</db:code> is lexically not equal to string <db:code role="parameter">s</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-2">
<db:title>bool operator!=(QLatin1String <db:emphasis>s</db:emphasis>, QChar <db:emphasis>ch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(QLatin1String s, QChar ch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s</db:code> is lexically not equal to char <db:code role="parameter">ch</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-3">
<db:title>bool operator!=(QStringView <db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(QStringView s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string view <db:code role="parameter">s1</db:code> is lexically not equal to string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-4">
<db:title>bool operator!=(QLatin1String <db:emphasis>s1</db:emphasis>, QStringView <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(QLatin1String s1, QStringView s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s1</db:code> is lexically not equal to string view <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-7">
<db:title>bool operator!=(const char *<db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const char *s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if const char pointer <db:code role="parameter">s1</db:code> is lexically not equal to string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt">
<db:title>bool operator&lt;(QLatin1String <db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(QLatin1String s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s1</db:code> is lexically less than string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-1">
<db:title>bool operator&lt;(QChar <db:emphasis>ch</db:emphasis>, QLatin1String <db:emphasis>s</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(QChar ch, QLatin1String s)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if char <db:code role="parameter">ch</db:code> is lexically less than string <db:code role="parameter">s</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-2">
<db:title>bool operator&lt;(QLatin1String <db:emphasis>s</db:emphasis>, QChar <db:emphasis>ch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(QLatin1String s, QChar ch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s</db:code> is lexically less than char <db:code role="parameter">ch</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-3">
<db:title>bool operator&lt;(QStringView <db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(QStringView s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string view <db:code role="parameter">s1</db:code> is lexically less than string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-4">
<db:title>bool operator&lt;(QLatin1String <db:emphasis>s1</db:emphasis>, QStringView <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(QLatin1String s1, QStringView s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s1</db:code> is lexically less than string view <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-7">
<db:title>bool operator&lt;(const char *<db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(const char *s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if const char pointer <db:code role="parameter">s1</db:code> is lexically less than string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq">
<db:title>bool operator&lt;=(QLatin1String <db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(QLatin1String s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s1</db:code> is lexically less than or equal to string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq-1">
<db:title>bool operator&lt;=(QChar <db:emphasis>ch</db:emphasis>, QLatin1String <db:emphasis>s</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(QChar ch, QLatin1String s)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if char <db:code role="parameter">ch</db:code> is lexically less than or equal to string <db:code role="parameter">s</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq-2">
<db:title>bool operator&lt;=(QLatin1String <db:emphasis>s</db:emphasis>, QChar <db:emphasis>ch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(QLatin1String s, QChar ch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s</db:code> is lexically less than or equal to char <db:code role="parameter">ch</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq-3">
<db:title>bool operator&lt;=(QStringView <db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(QStringView s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string view <db:code role="parameter">s1</db:code> is lexically less than or equal to string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq-4">
<db:title>bool operator&lt;=(QLatin1String <db:emphasis>s1</db:emphasis>, QStringView <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(QLatin1String s1, QStringView s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s1</db:code> is lexically less than or equal to string view <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq-7">
<db:title>bool operator&lt;=(const char *<db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(const char *s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if const char pointer <db:code role="parameter">s1</db:code> is lexically less than or equal to string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(QLatin1String <db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(QLatin1String s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s1</db:code> is lexically equal to string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-1">
<db:title>bool operator==(QChar <db:emphasis>ch</db:emphasis>, QLatin1String <db:emphasis>s</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(QChar ch, QLatin1String s)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if char <db:code role="parameter">ch</db:code> is lexically equal to string <db:code role="parameter">s</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-2">
<db:title>bool operator==(QLatin1String <db:emphasis>s</db:emphasis>, QChar <db:emphasis>ch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(QLatin1String s, QChar ch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s</db:code> is lexically equal to char <db:code role="parameter">ch</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-3">
<db:title>bool operator==(QStringView <db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(QStringView s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string view <db:code role="parameter">s1</db:code> is lexically equal to string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-4">
<db:title>bool operator==(QLatin1String <db:emphasis>s1</db:emphasis>, QStringView <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(QLatin1String s1, QStringView s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s1</db:code> is lexically equal to string view <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-7">
<db:title>bool operator==(const char *<db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const char *s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if const char pointer <db:code role="parameter">s1</db:code> is lexically equal to string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt">
<db:title>bool operator&gt;(QLatin1String <db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(QLatin1String s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s1</db:code> is lexically greater than string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-1">
<db:title>bool operator&gt;(QChar <db:emphasis>ch</db:emphasis>, QLatin1String <db:emphasis>s</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(QChar ch, QLatin1String s)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if char <db:code role="parameter">ch</db:code> is lexically greater than string <db:code role="parameter">s</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-2">
<db:title>bool operator&gt;(QLatin1String <db:emphasis>s</db:emphasis>, QChar <db:emphasis>ch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(QLatin1String s, QChar ch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s</db:code> is lexically greater than char <db:code role="parameter">ch</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-3">
<db:title>bool operator&gt;(QStringView <db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(QStringView s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string view <db:code role="parameter">s1</db:code> is lexically greater than string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-4">
<db:title>bool operator&gt;(QLatin1String <db:emphasis>s1</db:emphasis>, QStringView <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(QLatin1String s1, QStringView s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s1</db:code> is lexically greater than string view <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-7">
<db:title>bool operator&gt;(const char *<db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(const char *s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if const char pointer <db:code role="parameter">s1</db:code> is lexically greater than string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq">
<db:title>bool operator&gt;=(QLatin1String <db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(QLatin1String s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s1</db:code> is lexically greater than or equal to string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq-1">
<db:title>bool operator&gt;=(QChar <db:emphasis>ch</db:emphasis>, QLatin1String <db:emphasis>s</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(QChar ch, QLatin1String s)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if char <db:code role="parameter">ch</db:code> is lexically greater than or equal to string <db:code role="parameter">s</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq-2">
<db:title>bool operator&gt;=(QLatin1String <db:emphasis>s</db:emphasis>, QChar <db:emphasis>ch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(QLatin1String s, QChar ch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s</db:code> is lexically greater than or equal to char <db:code role="parameter">ch</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq-3">
<db:title>bool operator&gt;=(QStringView <db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(QStringView s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string view <db:code role="parameter">s1</db:code> is lexically greater than or equal to string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq-4">
<db:title>bool operator&gt;=(QLatin1String <db:emphasis>s1</db:emphasis>, QStringView <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(QLatin1String s1, QStringView s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s1</db:code> is lexically greater than or equal to string view <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq-7">
<db:title>bool operator&gt;=(const char *<db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(const char *s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if const char pointer <db:code role="parameter">s1</db:code> is lexically greater than or equal to string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
