<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Dynamic Model Creation Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates dynamic model creation.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This example demonstrates creating models dynamically in an application. 10 models are created dynamically at the start of the application, and more can be added or removed using the <db:emphasis>+</db:emphasis> and <db:emphasis>-</db:emphasis> buttons.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/dynamiccreation-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="setting-up">
<db:title>Setting Up</db:title>
<db:section xml:id="spawner-node">
<db:title>Spawner Node</db:title>
<db:para>We are going to need a <db:link xlink:href="qml-qtquick3d-node.xml">Node</db:link> to hold the dynamically created models.</db:para>
<db:programlisting language="qml">Node {
    id: shapeSpawner
    property real range: 300
    property var instances: []
    property int count
    ...
</db:programlisting>
</db:section>
<db:section xml:id="startup">
<db:title>Startup</db:title>
<db:para>We're creating 10 models at <db:code>Component.onCompleted</db:code> so the example shows something at startup.</db:para>
<db:programlisting language="qml">Component.onCompleted: {
    for (var i = 0; i &amp;lt; 10; ++i)
        shapeSpawner.addShape()
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="dynamic-models">
<db:title>Dynamic Models</db:title>
<db:section xml:id="adding-models">
<db:title>Adding Models</db:title>
<db:para>In order to add a new item to the scene, we first use the <db:link xlink:href="qml-qtqml-qt.xml#createComponent-method">Qt.createComponent</db:link> function to create a <db:link xlink:href="qml-qtqml-component.xml">Component</db:link> for our model. Then we use the component's <db:link xlink:href="qml-qtqml-component.xml#createObject-method">createObject</db:link> function to instantiate the item, passing in the position and scale as parameters.</db:para>
<db:programlisting language="qml">function addShape()
{
    var xPos = (2 * Math.random() * range) - range;
    var yPos = (2 * Math.random() * range) - range;
    var zPos = (2 * Math.random() * range) - range;
    var shapeComponent = Qt.createComponent(&quot;WeirdShape.qml&quot;);
    let instance = shapeComponent.createObject(shapeSpawner,
        { &quot;x&quot;: xPos, &quot;y&quot;: yPos, &quot;z&quot;: zPos, &quot;scale&quot;: Qt.vector3d(0.25, 0.25, 0.25)});
    instances.push(instance);
    count = instances.length
}
</db:programlisting>
</db:section>
<db:section xml:id="removing-models">
<db:title>Removing Models</db:title>
<db:para>Dynamically created models are removed simply by popping and destroying them from the instance stack.</db:para>
<db:programlisting language="qml">function removeShape()
{
    if (instances.length &amp;gt; 0) {
        let instance = instances.pop();
        instance.destroy();
        count = instances.length
    }
}
</db:programlisting>
</db:section>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="dynamiccreation/CMakeLists.txt">dynamiccreation/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dynamiccreation/WeirdShape.qml">dynamiccreation/WeirdShape.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dynamiccreation/dynamiccreation.pro">dynamiccreation/dynamiccreation.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dynamiccreation/main.cpp">dynamiccreation/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dynamiccreation/main.qml">dynamiccreation/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dynamiccreation/qml.qrc">dynamiccreation/qml.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
