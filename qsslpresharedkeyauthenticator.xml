<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSslPreSharedKeyAuthenticator Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsslpresharedkeyauthenticator.xml">QSslPreSharedKeyAuthenticator</db:link> class provides authentication data for pre shared keys (PSK) ciphersuites.</db:para>
<db:para>This class was introduced in Qt 5.5.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSslPreSharedKeyAuthenticator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSslPreSharedKeyAuthenticator is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member><db:member>ssl</db:member><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qsslpresharedkeyauthenticator.xml">QSslPreSharedKeyAuthenticator</db:link> class is used by an SSL socket to provide the required authentication data in a pre shared key (PSK) ciphersuite.</db:para>
<db:para>In a PSK handshake, the client must derive a key, which must match the key set on the server. The exact algorithm of deriving the key depends on the application; however, for this purpose, the server may send an <db:emphasis>identity hint</db:emphasis> to the client. This hint, combined with other information (for instance a passphrase), is then used by the client to construct the shared key.</db:para>
<db:para>The <db:link xlink:href="qsslpresharedkeyauthenticator.xml">QSslPreSharedKeyAuthenticator</db:link> provides means to client applications for completing the PSK handshake. The client application needs to connect a slot to the <db:link xlink:href="qsslsocket.xml#preSharedKeyAuthenticationRequired">QSslSocket::preSharedKeyAuthenticationRequired</db:link>() signal:</db:para>
<db:programlisting language="cpp">    connect(socket, &amp;amp;QSslSocket::preSharedKeyAuthenticationRequired,
            this, &amp;amp;AuthManager::handlePreSharedKeyAuthentication);
</db:programlisting>
<db:para>The signal carries a <db:link xlink:href="qsslpresharedkeyauthenticator.xml">QSslPreSharedKeyAuthenticator</db:link> object containing the identity hint the server sent to the client, and which must be filled with the corresponding client identity and the derived key:</db:para>
<db:programlisting language="cpp">    void AuthManager::handlePreSharedKeyAuthentication(QSslPreSharedKeyAuthenticator *authenticator)
    {
        authenticator-&amp;gt;setIdentity(&quot;My Qt App&quot;);

        const QByteArray key = deriveKey(authenticator-&amp;gt;identityHint(), passphrase);
        authenticator-&amp;gt;setPreSharedKey(key);
    }
</db:programlisting>
<db:note>
<db:para>PSK ciphersuites are supported only when using OpenSSL 1.0.1 (or greater) as the SSL backend.</db:para>
</db:note>
<db:note>
<db:para>PSK is currently only supported in OpenSSL.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslsocket.xml">QSslSocket</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSslPreSharedKeyAuthenticator">
<db:title>QSslPreSharedKeyAuthenticator::QSslPreSharedKeyAuthenticator()</db:title>
<db:constructorsynopsis>
<db:methodname>QSslPreSharedKeyAuthenticator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslPreSharedKeyAuthenticator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a default <db:link xlink:href="qsslpresharedkeyauthenticator.xml">QSslPreSharedKeyAuthenticator</db:link> object.</db:para>
<db:para>The identity hint, the identity and the key will be initialized to empty byte arrays; the maximum length for both the identity and the key will be initialized to 0.</db:para>
</db:section>
<db:section xml:id="QSslPreSharedKeyAuthenticator-1">
<db:title>QSslPreSharedKeyAuthenticator::QSslPreSharedKeyAuthenticator(const QSslPreSharedKeyAuthenticator &amp;<db:emphasis>authenticator</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSslPreSharedKeyAuthenticator</db:methodname>
<db:methodparam>
<db:type>const QSslPreSharedKeyAuthenticator &amp;</db:type>
<db:parameter>authenticator</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslPreSharedKeyAuthenticator(const QSslPreSharedKeyAuthenticator &amp;authenticator)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qsslpresharedkeyauthenticator.xml">QSslPreSharedKeyAuthenticator</db:link> object as a copy of <db:code role="parameter">authenticator</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslpresharedkeyauthenticator.xml#operator-eq">operator=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QSslPreSharedKeyAuthenticator">
<db:title>QSslPreSharedKeyAuthenticator::~QSslPreSharedKeyAuthenticator()</db:title>
<db:destructorsynopsis>
<db:methodname>~QSslPreSharedKeyAuthenticator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSslPreSharedKeyAuthenticator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qsslpresharedkeyauthenticator.xml">QSslPreSharedKeyAuthenticator</db:link> object.</db:para>
</db:section>
<db:section xml:id="identity">
<db:title>QByteArray QSslPreSharedKeyAuthenticator::identity() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>identity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray identity() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the PSK client identity.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslpresharedkeyauthenticator.xml#setIdentity">setIdentity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="identityHint">
<db:title>QByteArray QSslPreSharedKeyAuthenticator::identityHint() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>identityHint</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray identityHint() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the PSK identity hint as provided by the server. The interpretation of this hint is left to the application.</db:para>
</db:section>
<db:section xml:id="maximumIdentityLength">
<db:title>int QSslPreSharedKeyAuthenticator::maximumIdentityLength() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>maximumIdentityLength</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int maximumIdentityLength() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum length, in bytes, of the PSK client identity.</db:para>
<db:note>
<db:para>it is possible to set an identity whose length is greater than maximumIdentityLength(); in this case, only the first maximumIdentityLength() bytes will be actually sent to the server.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslpresharedkeyauthenticator.xml#setIdentity">setIdentity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumPreSharedKeyLength">
<db:title>int QSslPreSharedKeyAuthenticator::maximumPreSharedKeyLength() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>maximumPreSharedKeyLength</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int maximumPreSharedKeyLength() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum length, in bytes, of the pre shared key.</db:para>
<db:note>
<db:para>it is possible to set a key whose length is greater than the maximumPreSharedKeyLength(); in this case, only the first maximumPreSharedKeyLength() bytes will be actually sent to the server.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslpresharedkeyauthenticator.xml#setPreSharedKey">setPreSharedKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="preSharedKey">
<db:title>QByteArray QSslPreSharedKeyAuthenticator::preSharedKey() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>preSharedKey</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray preSharedKey() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pre shared key.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslpresharedkeyauthenticator.xml#setPreSharedKey">setPreSharedKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIdentity">
<db:title>void QSslPreSharedKeyAuthenticator::setIdentity(const QByteArray &amp;<db:emphasis>identity</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setIdentity</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>identity</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setIdentity(const QByteArray &amp;identity)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the PSK client identity (to be advised to the server) to <db:code role="parameter">identity</db:code>.</db:para>
<db:note>
<db:para>it is possible to set an identity whose length is greater than <db:link xlink:href="qsslpresharedkeyauthenticator.xml#maximumIdentityLength">maximumIdentityLength</db:link>(); in this case, only the first <db:link xlink:href="qsslpresharedkeyauthenticator.xml#maximumIdentityLength">maximumIdentityLength</db:link>() bytes will be actually sent to the server.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslpresharedkeyauthenticator.xml#identity">identity</db:link>()</db:member>
<db:member><db:link xlink:href="qsslpresharedkeyauthenticator.xml#maximumIdentityLength">maximumIdentityLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPreSharedKey">
<db:title>void QSslPreSharedKeyAuthenticator::setPreSharedKey(const QByteArray &amp;<db:emphasis>preSharedKey</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPreSharedKey</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>preSharedKey</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPreSharedKey(const QByteArray &amp;preSharedKey)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the pre shared key to <db:code role="parameter">preSharedKey</db:code>.</db:para>
<db:note>
<db:para>it is possible to set a key whose length is greater than the <db:link xlink:href="qsslpresharedkeyauthenticator.xml#maximumPreSharedKeyLength">maximumPreSharedKeyLength</db:link>(); in this case, only the first <db:link xlink:href="qsslpresharedkeyauthenticator.xml#maximumPreSharedKeyLength">maximumPreSharedKeyLength</db:link>() bytes will be actually sent to the server.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslpresharedkeyauthenticator.xml#preSharedKey">preSharedKey</db:link>()</db:member>
<db:member><db:link xlink:href="qsslpresharedkeyauthenticator.xml#maximumPreSharedKeyLength">maximumPreSharedKeyLength</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearray.xml#fromHex">QByteArray::fromHex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QSslPreSharedKeyAuthenticator::swap(QSslPreSharedKeyAuthenticator &amp;<db:emphasis>authenticator</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QSslPreSharedKeyAuthenticator &amp;</db:type>
<db:parameter>authenticator</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QSslPreSharedKeyAuthenticator &amp;authenticator)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps the <db:link xlink:href="qsslpresharedkeyauthenticator.xml">QSslPreSharedKeyAuthenticator</db:link> object <db:code role="parameter">authenticator</db:code> with this object. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QSslPreSharedKeyAuthenticator &amp;QSslPreSharedKeyAuthenticator::operator=(const QSslPreSharedKeyAuthenticator &amp;<db:emphasis>authenticator</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSslPreSharedKeyAuthenticator &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QSslPreSharedKeyAuthenticator &amp;</db:type>
<db:parameter>authenticator</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslPreSharedKeyAuthenticator &amp; operator=(const QSslPreSharedKeyAuthenticator &amp;authenticator)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the <db:link xlink:href="qsslpresharedkeyauthenticator.xml">QSslPreSharedKeyAuthenticator</db:link> object <db:code role="parameter">authenticator</db:code> to this object, and returns a reference to the copy.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QSslPreSharedKeyAuthenticator &amp;QSslPreSharedKeyAuthenticator::operator=(QSslPreSharedKeyAuthenticator &amp;&amp;<db:emphasis>authenticator</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSslPreSharedKeyAuthenticator &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QSslPreSharedKeyAuthenticator &amp;&amp;</db:type>
<db:parameter>authenticator</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslPreSharedKeyAuthenticator &amp; operator=(QSslPreSharedKeyAuthenticator &amp;&amp;authenticator)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns the <db:link xlink:href="qsslpresharedkeyauthenticator.xml">QSslPreSharedKeyAuthenticator</db:link> object <db:code role="parameter">authenticator</db:code> to this object, and returns a reference to the moved instance.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>[since 5.5] bool operator!=(const QSslPreSharedKeyAuthenticator &amp;<db:emphasis>lhs</db:emphasis>, const QSslPreSharedKeyAuthenticator &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QSslPreSharedKeyAuthenticator &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSslPreSharedKeyAuthenticator &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QSslPreSharedKeyAuthenticator &amp;lhs, const QSslPreSharedKeyAuthenticator &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the authenticator object <db:code role="parameter">lhs</db:code> is not equal to <db:code role="parameter">rhs</db:code>; false otherwise.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[since 5.5] bool operator==(const QSslPreSharedKeyAuthenticator &amp;<db:emphasis>lhs</db:emphasis>, const QSslPreSharedKeyAuthenticator &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QSslPreSharedKeyAuthenticator &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSslPreSharedKeyAuthenticator &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QSslPreSharedKeyAuthenticator &amp;lhs, const QSslPreSharedKeyAuthenticator &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the authenticator object <db:code role="parameter">lhs</db:code> is equal to <db:code role="parameter">rhs</db:code>; false otherwise.</db:para>
<db:para>Two authenticator objects are equal if and only if they have the same identity hint, identity, pre shared key, maximum length for the identity and maximum length for the pre shared key.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
</db:section>
</db:article>
