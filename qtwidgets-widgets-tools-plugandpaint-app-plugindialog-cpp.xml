<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Plug &amp; Paint Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to extend Qt applications using plugins.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;interfaces.h&quot;
#include &quot;plugindialog.h&quot;

#include &amp;lt;QDir&amp;gt;
#include &amp;lt;QGridLayout&amp;gt;
#include &amp;lt;QHeaderView&amp;gt;
#include &amp;lt;QLabel&amp;gt;
#include &amp;lt;QPluginLoader&amp;gt;
#include &amp;lt;QPushButton&amp;gt;
#include &amp;lt;QStringList&amp;gt;
#include &amp;lt;QTreeWidget&amp;gt;
#include &amp;lt;QTreeWidgetItem&amp;gt;

PluginDialog::PluginDialog(const QString &amp;amp;path, const QStringList &amp;amp;fileNames,
                           QWidget *parent) :
    QDialog(parent),
    label(new QLabel),
    treeWidget(new QTreeWidget),
    okButton(new QPushButton(tr(&quot;OK&quot;)))
{
    treeWidget-&amp;gt;setAlternatingRowColors(false);
    treeWidget-&amp;gt;setSelectionMode(QAbstractItemView::NoSelection);
    treeWidget-&amp;gt;setColumnCount(1);
    treeWidget-&amp;gt;header()-&amp;gt;hide();

    okButton-&amp;gt;setDefault(true);

    connect(okButton, &amp;amp;QAbstractButton::clicked, this, &amp;amp;QWidget::close);

    QGridLayout *mainLayout = new QGridLayout;
    mainLayout-&amp;gt;setColumnStretch(0, 1);
    mainLayout-&amp;gt;setColumnStretch(2, 1);
    mainLayout-&amp;gt;addWidget(label, 0, 0, 1, 3);
    mainLayout-&amp;gt;addWidget(treeWidget, 1, 0, 1, 3);
    mainLayout-&amp;gt;addWidget(okButton, 2, 1);
    setLayout(mainLayout);

    interfaceIcon.addPixmap(style()-&amp;gt;standardPixmap(QStyle::SP_DirOpenIcon),
                            QIcon::Normal, QIcon::On);
    interfaceIcon.addPixmap(style()-&amp;gt;standardPixmap(QStyle::SP_DirClosedIcon),
                            QIcon::Normal, QIcon::Off);
    featureIcon.addPixmap(style()-&amp;gt;standardPixmap(QStyle::SP_FileIcon));

    setWindowTitle(tr(&quot;Plugin Information&quot;));
    findPlugins(path, fileNames);
}

void PluginDialog::findPlugins(const QString &amp;amp;path,
                               const QStringList &amp;amp;fileNames)
{
    label-&amp;gt;setText(tr(&quot;Plug &amp;amp; Paint found the following plugins\n&quot;
                      &quot;(looked in %1):&quot;)
                   .arg(QDir::toNativeSeparators(path)));

    const QDir dir(path);

    const auto staticInstances = QPluginLoader::staticInstances();
    for (QObject *plugin : staticInstances)
        populateTreeWidget(plugin, tr(&quot;%1 (Static Plugin)&quot;)
                                   .arg(plugin-&amp;gt;metaObject()-&amp;gt;className()));

    for (const QString &amp;amp;fileName : fileNames) {
        QPluginLoader loader(dir.absoluteFilePath(fileName));
        QObject *plugin = loader.instance();
        if (plugin)
            populateTreeWidget(plugin, fileName);
    }
}

void PluginDialog::populateTreeWidget(QObject *plugin, const QString &amp;amp;text)
{
    auto pluginItem = new QTreeWidgetItem(treeWidget);
    pluginItem-&amp;gt;setText(0, text);
    treeWidget-&amp;gt;setItemExpanded(pluginItem, true);

    QFont boldFont = pluginItem-&amp;gt;font(0);
    boldFont.setBold(true);
    pluginItem-&amp;gt;setFont(0, boldFont);

    if (plugin) {
        auto iBrush = qobject_cast&amp;lt;BrushInterface *&amp;gt;(plugin);
        if (iBrush)
            addItems(pluginItem, &quot;BrushInterface&quot;, iBrush-&amp;gt;brushes());

        auto iShape = qobject_cast&amp;lt;ShapeInterface *&amp;gt;(plugin);
        if (iShape)
            addItems(pluginItem, &quot;ShapeInterface&quot;, iShape-&amp;gt;shapes());

        auto iFilter = qobject_cast&amp;lt;FilterInterface *&amp;gt;(plugin);
        if (iFilter)
            addItems(pluginItem, &quot;FilterInterface&quot;, iFilter-&amp;gt;filters());
    }
}

void PluginDialog::addItems(QTreeWidgetItem *pluginItem,
                            const char *interfaceName,
                            const QStringList &amp;amp;features)
{
    auto interfaceItem = new QTreeWidgetItem(pluginItem);
    interfaceItem-&amp;gt;setText(0, interfaceName);
    interfaceItem-&amp;gt;setIcon(0, interfaceIcon);

    for (QString feature : features) {
        if (feature.endsWith(&quot;...&quot;))
            feature.chop(3);
        auto featureItem = new QTreeWidgetItem(interfaceItem);
        featureItem-&amp;gt;setText(0, feature);
        featureItem-&amp;gt;setIcon(0, featureIcon);
    }
}

</db:programlisting>
</db:article>
