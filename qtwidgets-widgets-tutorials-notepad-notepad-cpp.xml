<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Getting Started Programming with Qt Widgets</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A tutorial for Qt Widgets based on a notepad application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QFile&amp;gt;
#include &amp;lt;QFileDialog&amp;gt;
#include &amp;lt;QTextStream&amp;gt;
#include &amp;lt;QMessageBox&amp;gt;
#if defined(QT_PRINTSUPPORT_LIB)
#include &amp;lt;QtPrintSupport/qtprintsupportglobal.h&amp;gt;
#if QT_CONFIG(printer)
#if QT_CONFIG(printdialog)
#include &amp;lt;QPrintDialog&amp;gt;
#endif // QT_CONFIG(printdialog)
#include &amp;lt;QPrinter&amp;gt;
#endif // QT_CONFIG(printer)
#endif // QT_PRINTSUPPORT_LIB
#include &amp;lt;QFont&amp;gt;
#include &amp;lt;QFontDialog&amp;gt;

#include &quot;notepad.h&quot;
#include &quot;ui_notepad.h&quot;

Notepad::Notepad(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::Notepad)
{
    ui-&amp;gt;setupUi(this);
    this-&amp;gt;setCentralWidget(ui-&amp;gt;textEdit);

    connect(ui-&amp;gt;actionNew, &amp;amp;QAction::triggered, this, &amp;amp;Notepad::newDocument);
    connect(ui-&amp;gt;actionOpen, &amp;amp;QAction::triggered, this, &amp;amp;Notepad::open);
    connect(ui-&amp;gt;actionSave, &amp;amp;QAction::triggered, this, &amp;amp;Notepad::save);
    connect(ui-&amp;gt;actionSave_as, &amp;amp;QAction::triggered, this, &amp;amp;Notepad::saveAs);
    connect(ui-&amp;gt;actionPrint, &amp;amp;QAction::triggered, this, &amp;amp;Notepad::print);
    connect(ui-&amp;gt;actionExit, &amp;amp;QAction::triggered, this, &amp;amp;Notepad::exit);
    connect(ui-&amp;gt;actionCopy, &amp;amp;QAction::triggered, this, &amp;amp;Notepad::copy);
    connect(ui-&amp;gt;actionCut, &amp;amp;QAction::triggered, this, &amp;amp;Notepad::cut);
    connect(ui-&amp;gt;actionPaste, &amp;amp;QAction::triggered, this, &amp;amp;Notepad::paste);
    connect(ui-&amp;gt;actionUndo, &amp;amp;QAction::triggered, this, &amp;amp;Notepad::undo);
    connect(ui-&amp;gt;actionRedo, &amp;amp;QAction::triggered, this, &amp;amp;Notepad::redo);
    connect(ui-&amp;gt;actionFont, &amp;amp;QAction::triggered, this, &amp;amp;Notepad::selectFont);
    connect(ui-&amp;gt;actionBold, &amp;amp;QAction::triggered, this, &amp;amp;Notepad::setFontBold);
    connect(ui-&amp;gt;actionUnderline, &amp;amp;QAction::triggered, this, &amp;amp;Notepad::setFontUnderline);
    connect(ui-&amp;gt;actionItalic, &amp;amp;QAction::triggered, this, &amp;amp;Notepad::setFontItalic);
    connect(ui-&amp;gt;actionAbout, &amp;amp;QAction::triggered, this, &amp;amp;Notepad::about);

// Disable menu actions for unavailable features
#if !QT_CONFIG(printer)
    ui-&amp;gt;actionPrint-&amp;gt;setEnabled(false);
#endif

#if !QT_CONFIG(clipboard)
    ui-&amp;gt;actionCut-&amp;gt;setEnabled(false);
    ui-&amp;gt;actionCopy-&amp;gt;setEnabled(false);
    ui-&amp;gt;actionPaste-&amp;gt;setEnabled(false);
#endif
}

Notepad::~Notepad()
{
    delete ui;
}

void Notepad::newDocument()
{
    currentFile.clear();
    ui-&amp;gt;textEdit-&amp;gt;setText(QString());
}

void Notepad::open()
{
    QString fileName = QFileDialog::getOpenFileName(this, &quot;Open the file&quot;);
    QFile file(fileName);
    currentFile = fileName;
    if (!file.open(QIODevice::ReadOnly | QFile::Text)) {
        QMessageBox::warning(this, &quot;Warning&quot;, &quot;Cannot open file: &quot; + file.errorString());
        return;
    }
    setWindowTitle(fileName);
    QTextStream in(&amp;amp;file);
    QString text = in.readAll();
    ui-&amp;gt;textEdit-&amp;gt;setText(text);
    file.close();
}

void Notepad::save()
{
    QString fileName;
    // If we don't have a filename from before, get one.
    if (currentFile.isEmpty()) {
        fileName = QFileDialog::getSaveFileName(this, &quot;Save&quot;);
        currentFile = fileName;
    } else {
        fileName = currentFile;
    }
    QFile file(fileName);
    if (!file.open(QIODevice::WriteOnly | QFile::Text)) {
        QMessageBox::warning(this, &quot;Warning&quot;, &quot;Cannot save file: &quot; + file.errorString());
        return;
    }
    setWindowTitle(fileName);
    QTextStream out(&amp;amp;file);
    QString text = ui-&amp;gt;textEdit-&amp;gt;toPlainText();
    out &amp;lt;&amp;lt; text;
    file.close();
}

void Notepad::saveAs()
{
    QString fileName = QFileDialog::getSaveFileName(this, &quot;Save as&quot;);
    QFile file(fileName);

    if (!file.open(QFile::WriteOnly | QFile::Text)) {
        QMessageBox::warning(this, &quot;Warning&quot;, &quot;Cannot save file: &quot; + file.errorString());
        return;
    }
    currentFile = fileName;
    setWindowTitle(fileName);
    QTextStream out(&amp;amp;file);
    QString text = ui-&amp;gt;textEdit-&amp;gt;toPlainText();
    out &amp;lt;&amp;lt; text;
    file.close();
}

void Notepad::print()
{
#if QT_CONFIG(printer)
    QPrinter printDev;
#if QT_CONFIG(printdialog)
    QPrintDialog dialog(&amp;amp;printDev, this);
    if (dialog.exec() == QDialog::Rejected)
        return;
#endif // QT_CONFIG(printdialog)
    ui-&amp;gt;textEdit-&amp;gt;print(&amp;amp;printDev);
#endif // QT_CONFIG(printer)
}

void Notepad::exit()
{
    QCoreApplication::quit();
}

void Notepad::copy()
{
#if QT_CONFIG(clipboard)
    ui-&amp;gt;textEdit-&amp;gt;copy();
#endif
}

void Notepad::cut()
{
#if QT_CONFIG(clipboard)
    ui-&amp;gt;textEdit-&amp;gt;cut();
#endif
}

void Notepad::paste()
{
#if QT_CONFIG(clipboard)
    ui-&amp;gt;textEdit-&amp;gt;paste();
#endif
}

void Notepad::undo()
{
     ui-&amp;gt;textEdit-&amp;gt;undo();
}

void Notepad::redo()
{
    ui-&amp;gt;textEdit-&amp;gt;redo();
}

void Notepad::selectFont()
{
    bool fontSelected;
    QFont font = QFontDialog::getFont(&amp;amp;fontSelected, this);
    if (fontSelected)
        ui-&amp;gt;textEdit-&amp;gt;setFont(font);
}

void Notepad::setFontUnderline(bool underline)
{
    ui-&amp;gt;textEdit-&amp;gt;setFontUnderline(underline);
}

void Notepad::setFontItalic(bool italic)
{
    ui-&amp;gt;textEdit-&amp;gt;setFontItalic(italic);
}

void Notepad::setFontBold(bool bold)
{
    bold ? ui-&amp;gt;textEdit-&amp;gt;setFontWeight(QFont::Bold) :
           ui-&amp;gt;textEdit-&amp;gt;setFontWeight(QFont::Normal);
}

void Notepad::about()
{
   QMessageBox::about(this, tr(&quot;About MDI&quot;),
                tr(&quot;The &amp;lt;b&amp;gt;Notepad&amp;lt;/b&amp;gt; example demonstrates how to code a basic &quot;
                   &quot;text editor using QtWidgets&quot;));

}

</db:programlisting>
</db:article>
