<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>CAN Bus Manager</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example sends and receives CAN bus frames.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The example sends and receives CAN bus frames. Incoming frames are ordered according to their type. A connect dialog is provided to adjust the CAN Bus connection parameters.</db:para>
<db:para>Key <db:link xlink:href="qtserialbus-index.xml">Qt Serial Bus</db:link> classes used in this example:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/can-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="creating-a-qcanbusdevice">
<db:title>Creating a QCanBusDevice</db:title>
<db:para>An instance of <db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link> is required to perform any CAN communication.</db:para>
<db:para>The <db:code>ConnectDialog</db:code> allows to specify all the required parameters. After that the device is created using the provided plugin and interface names:</db:para>
<db:programlisting language="cpp">    QString errorString;
    m_canDevice.reset(QCanBus::instance()-&amp;gt;createDevice(p.pluginName, p.deviceInterfaceName,
                                                        &amp;amp;errorString));
    connect(m_canDevice.get(), &amp;amp;QCanBusDevice::errorOccurred,
            this, &amp;amp;MainWindow::processErrors);
    connect(m_canDevice.get(), &amp;amp;QCanBusDevice::framesReceived,
            this, &amp;amp;MainWindow::processReceivedFrames);
    connect(m_canDevice.get(), &amp;amp;QCanBusDevice::framesWritten,
            this, &amp;amp;MainWindow::processFramesWritten);
</db:programlisting>
<db:para>The established connections allow to process incoming frames, control the sent frames and handle errors.</db:para>
<db:para>When the device is created, use <db:link xlink:href="qcanbusdevice.xml#connectDevice">QCanBusDevice::connectDevice</db:link>() to start the communication.</db:para>
</db:section>
<db:section xml:id="processing-incoming-frames">
<db:title>Processing Incoming Frames</db:title>
<db:para><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link> emits a <db:link xlink:href="qcanbusdevice.xml#framesReceived">framesReceived</db:link>() signal when new frames are available. The <db:link xlink:href="qcanbusdevice.xml#readFrame">readFrame</db:link>() method can be used to read a single <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> while there are <db:link xlink:href="qcanbusdevice.xml#framesAvailable">available frames</db:link>. Once the frame is received, individual parameters such as <db:link xlink:href="qcanbusframe.xml#frameId">frameId</db:link>, <db:link xlink:href="qcanbusframe.xml#timeStamp">timeStamp</db:link>, or <db:link xlink:href="qcanbusframe.xml#payload">payload</db:link> can be extracted from it:</db:para>
<db:programlisting language="cpp">    while (m_canDevice-&amp;gt;framesAvailable()) {
        m_numberFramesReceived++;
        const QCanBusFrame frame = m_canDevice-&amp;gt;readFrame();

        QString data;
        if (frame.frameType() == QCanBusFrame::ErrorFrame)
            data = m_canDevice-&amp;gt;interpretErrorFrame(frame);
        else
            data = QString::fromLatin1(frame.payload().toHex(' ').toUpper());

        const QString time = QString::fromLatin1(&quot;%1.%2  &quot;)
                .arg(frame.timeStamp().seconds(), 10, 10, ' '_L1)
                .arg(frame.timeStamp().microSeconds() / 100, 4, 10, '0'_L1);

        const QString flags = frameFlags(frame);

        const QString id = QString::number(frame.frameId(), 16).toUpper();
        const QString dlc = QString::number(frame.payload().size());

        m_model-&amp;gt;appendFrame(QStringList({QString::number(m_numberFramesReceived),
                                          time, flags, id, dlc, data}));
    }
</db:programlisting>
</db:section>
<db:section xml:id="sending-frames">
<db:title>Sending Frames</db:title>
<db:para>To send custom data over the CAN bus, the user needs to provide at least a <db:link xlink:href="qcanbusframe.xml#frameId">frameId</db:link> and a <db:link xlink:href="qcanbusframe.xml#payload">payload</db:link>. Optionally other <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> parameters can be configured:</db:para>
<db:programlisting language="cpp">    const uint frameId = m_ui-&amp;gt;frameIdEdit-&amp;gt;text().toUInt(nullptr, 16);
    QString data = m_ui-&amp;gt;payloadEdit-&amp;gt;text();
    m_ui-&amp;gt;payloadEdit-&amp;gt;setText(formatHexData(data));
    const QByteArray payload = QByteArray::fromHex(data.remove(u' ').toLatin1());

    QCanBusFrame frame = QCanBusFrame(frameId, payload);
    frame.setExtendedFrameFormat(m_ui-&amp;gt;extendedFormatBox-&amp;gt;isChecked());
    frame.setFlexibleDataRateFormat(m_ui-&amp;gt;flexibleDataRateBox-&amp;gt;isChecked());
    frame.setBitrateSwitch(m_ui-&amp;gt;bitrateSwitchBox-&amp;gt;isChecked());

    if (m_ui-&amp;gt;errorFrame-&amp;gt;isChecked())
        frame.setFrameType(QCanBusFrame::ErrorFrame);
    else if (m_ui-&amp;gt;remoteFrame-&amp;gt;isChecked())
        frame.setFrameType(QCanBusFrame::RemoteRequestFrame);
</db:programlisting>
<db:para>Once the frame is prepared, the <db:link xlink:href="qcanbusdevice.xml#writeFrame">QCanBusDevice::writeFrame</db:link>() method can be used to send it:</db:para>
<db:programlisting language="cpp">    m_canDevice-&amp;gt;writeFrame(frame);
</db:programlisting>
</db:section>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtserialbus.git/tree/examples/serialbus/can?h=6.5">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
