<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCommonStyle Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcommonstyle.xml">QCommonStyle</db:link> class encapsulates the common Look and Feel of a GUI.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCommonStyle</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qstyle.xml" xlink:role="class">QStyle</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qproxystyle.xml" xlink:role="class">QProxyStyle</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QCommonStyle is part of <db:simplelist><db:member>appearance</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This abstract class implements some of the widget's look and feel that is common to all GUI styles provided and shipped as part of Qt.</db:para>
<db:para>Since <db:link xlink:href="qcommonstyle.xml">QCommonStyle</db:link> inherits <db:link xlink:href="qstyle.xml">QStyle</db:link>, all of its functions are fully documented in the <db:link xlink:href="qstyle.xml">QStyle</db:link> documentation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyle.xml">QStyle</db:link></db:member>
<db:member><db:link xlink:href="qproxystyle.xml">QProxyStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCommonStyle">
<db:title>QCommonStyle::QCommonStyle()</db:title>
<db:para>Constructs a <db:link xlink:href="qcommonstyle.xml">QCommonStyle</db:link>.</db:para>
</db:section>
<db:section xml:id="dtor.QCommonStyle">
<db:title>[virtual noexcept] QCommonStyle::~QCommonStyle()</db:title>
<db:para>Destroys the style.</db:para>
</db:section>
<db:section xml:id="drawComplexControl">
<db:title>[override virtual] void QCommonStyle::drawComplexControl(QStyle::ComplexControl <db:emphasis>cc</db:emphasis>, const QStyleOptionComplex *<db:emphasis>opt</db:emphasis>, QPainter *<db:emphasis>p</db:emphasis>, const QWidget *<db:emphasis>widget</db:emphasis> = nullptr) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#drawComplexControl" role="function">QStyle::drawComplexControl(QStyle::ComplexControl control, const QStyleOptionComplex *option, QPainter *painter, const QWidget *widget) const</db:link>.</db:para>
</db:section>
<db:section xml:id="drawControl">
<db:title>[override virtual] void QCommonStyle::drawControl(QStyle::ControlElement <db:emphasis>element</db:emphasis>, const QStyleOption *<db:emphasis>opt</db:emphasis>, QPainter *<db:emphasis>p</db:emphasis>, const QWidget *<db:emphasis>widget</db:emphasis> = nullptr) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#drawControl" role="function">QStyle::drawControl(QStyle::ControlElement element, const QStyleOption *option, QPainter *painter, const QWidget *widget) const</db:link>.</db:para>
</db:section>
<db:section xml:id="drawPrimitive">
<db:title>[override virtual] void QCommonStyle::drawPrimitive(QStyle::PrimitiveElement <db:emphasis>pe</db:emphasis>, const QStyleOption *<db:emphasis>opt</db:emphasis>, QPainter *<db:emphasis>p</db:emphasis>, const QWidget *<db:emphasis>widget</db:emphasis> = nullptr) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#drawPrimitive" role="function">QStyle::drawPrimitive(QStyle::PrimitiveElement element, const QStyleOption *option, QPainter *painter, const QWidget *widget) const</db:link>.</db:para>
</db:section>
<db:section xml:id="generatedIconPixmap">
<db:title>[override virtual] QPixmap QCommonStyle::generatedIconPixmap(QIcon::Mode <db:emphasis>iconMode</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, const QStyleOption *<db:emphasis>opt</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#generatedIconPixmap" role="function">QStyle::generatedIconPixmap(QIcon::Mode iconMode, const QPixmap &amp;pixmap, const QStyleOption *option) const</db:link>.</db:para>
</db:section>
<db:section xml:id="hitTestComplexControl">
<db:title>[override virtual] QStyle::SubControl QCommonStyle::hitTestComplexControl(QStyle::ComplexControl <db:emphasis>cc</db:emphasis>, const QStyleOptionComplex *<db:emphasis>opt</db:emphasis>, const QPoint &amp;<db:emphasis>pt</db:emphasis>, const QWidget *<db:emphasis>widget</db:emphasis> = nullptr) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#hitTestComplexControl" role="function">QStyle::hitTestComplexControl(QStyle::ComplexControl control, const QStyleOptionComplex *option, const QPoint &amp;position, const QWidget *widget) const</db:link>.</db:para>
</db:section>
<db:section xml:id="layoutSpacing">
<db:title>[override virtual] int QCommonStyle::layoutSpacing(QSizePolicy::ControlType <db:emphasis>control1</db:emphasis>, QSizePolicy::ControlType <db:emphasis>control2</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>, const QStyleOption *<db:emphasis>option</db:emphasis> = nullptr, const QWidget *<db:emphasis>widget</db:emphasis> = nullptr) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#layoutSpacing" role="function">QStyle::layoutSpacing(QSizePolicy::ControlType control1, QSizePolicy::ControlType control2, Qt::Orientation orientation, const QStyleOption *option, const QWidget *widget) const</db:link>.</db:para>
</db:section>
<db:section xml:id="pixelMetric">
<db:title>[override virtual] int QCommonStyle::pixelMetric(QStyle::PixelMetric <db:emphasis>m</db:emphasis>, const QStyleOption *<db:emphasis>opt</db:emphasis> = nullptr, const QWidget *<db:emphasis>widget</db:emphasis> = nullptr) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#pixelMetric" role="function">QStyle::pixelMetric(QStyle::PixelMetric metric, const QStyleOption *option, const QWidget *widget) const</db:link>.</db:para>
</db:section>
<db:section xml:id="polish">
<db:title>[override virtual] void QCommonStyle::polish(QApplication *<db:emphasis>app</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#polish-1" role="function">QStyle::polish(QApplication *application)</db:link>.</db:para>
</db:section>
<db:section xml:id="polish-1">
<db:title>[override virtual] void QCommonStyle::polish(QPalette &amp;<db:emphasis>pal</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#polish-2" role="function">QStyle::polish(QPalette &amp;palette)</db:link>.</db:para>
</db:section>
<db:section xml:id="polish-2">
<db:title>[override virtual] void QCommonStyle::polish(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#polish" role="function">QStyle::polish(QWidget *widget)</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeFromContents">
<db:title>[override virtual] QSize QCommonStyle::sizeFromContents(QStyle::ContentsType <db:emphasis>contentsType</db:emphasis>, const QStyleOption *<db:emphasis>opt</db:emphasis>, const QSize &amp;<db:emphasis>contentsSize</db:emphasis>, const QWidget *<db:emphasis>widget</db:emphasis> = nullptr) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#sizeFromContents" role="function">QStyle::sizeFromContents(QStyle::ContentsType type, const QStyleOption *option, const QSize &amp;contentsSize, const QWidget *widget) const</db:link>.</db:para>
</db:section>
<db:section xml:id="standardPixmap">
<db:title>[override virtual] QPixmap QCommonStyle::standardPixmap(QStyle::StandardPixmap <db:emphasis>sp</db:emphasis>, const QStyleOption *<db:emphasis>option</db:emphasis> = nullptr, const QWidget *<db:emphasis>widget</db:emphasis> = nullptr) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qstyle-obsolete.xml#standardPixmap" role="function">QStyle::standardPixmap(QStyle::StandardPixmap standardPixmap, const QStyleOption *option, const QWidget *widget) const</db:link>.</db:para>
</db:section>
<db:section xml:id="styleHint">
<db:title>[override virtual] int QCommonStyle::styleHint(QStyle::StyleHint <db:emphasis>sh</db:emphasis>, const QStyleOption *<db:emphasis>opt</db:emphasis> = nullptr, const QWidget *<db:emphasis>widget</db:emphasis> = nullptr, QStyleHintReturn *<db:emphasis>hret</db:emphasis> = nullptr) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#styleHint" role="function">QStyle::styleHint(QStyle::StyleHint hint, const QStyleOption *option, const QWidget *widget, QStyleHintReturn *returnData) const</db:link>.</db:para>
</db:section>
<db:section xml:id="subControlRect">
<db:title>[override virtual] QRect QCommonStyle::subControlRect(QStyle::ComplexControl <db:emphasis>cc</db:emphasis>, const QStyleOptionComplex *<db:emphasis>opt</db:emphasis>, QStyle::SubControl <db:emphasis>sc</db:emphasis>, const QWidget *<db:emphasis>widget</db:emphasis> = nullptr) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#subControlRect" role="function">QStyle::subControlRect(QStyle::ComplexControl control, const QStyleOptionComplex *option, QStyle::SubControl subControl, const QWidget *widget) const</db:link>.</db:para>
</db:section>
<db:section xml:id="subElementRect">
<db:title>[override virtual] QRect QCommonStyle::subElementRect(QStyle::SubElement <db:emphasis>sr</db:emphasis>, const QStyleOption *<db:emphasis>opt</db:emphasis>, const QWidget *<db:emphasis>widget</db:emphasis> = nullptr) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#subElementRect" role="function">QStyle::subElementRect(QStyle::SubElement element, const QStyleOption *option, const QWidget *widget) const</db:link>.</db:para>
</db:section>
<db:section xml:id="unpolish">
<db:title>[override virtual] void QCommonStyle::unpolish(QApplication *<db:emphasis>application</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#unpolish-1" role="function">QStyle::unpolish(QApplication *application)</db:link>.</db:para>
</db:section>
<db:section xml:id="unpolish-1">
<db:title>[override virtual] void QCommonStyle::unpolish(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qstyle.xml#unpolish" role="function">QStyle::unpolish(QWidget *widget)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
