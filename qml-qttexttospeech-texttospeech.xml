<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>TextToSpeech QML Type</db:title>
<db:productname>QtTextToSpeech</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt TextToSpeech Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qml-qttexttospeech-texttospeech.xml">TextToSpeech</db:link> type provides access to text-to-speech engines.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtTextToSpeech</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Use <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#say-method">say</db:link>() to start reading text to the default audio device, and <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#stop-method">stop</db:link>(), <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#pause-method">pause</db:link>(), and <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#resume-method">resume</db:link>() to control the reading of the text.</db:para>
<db:programlisting language="qml">    TextToSpeech {
        id: tts
        volume: volumeSlider.value
        pitch: pitchSlider.value
        rate: rateSlider.value
    ...

        RowLayout {
            Button {
                text: qsTr(&quot;Speak&quot;)
                enabled: [TextToSpeech.Paused, TextToSpeech.Ready].includes(tts.state)
                onClicked: {
                    tts.say(input.text)
                }
            }
            Button {
                text: qsTr(&quot;Pause&quot;)
                enabled: tts.state == TextToSpeech.Speaking
                onClicked: tts.pause()
                visible: tts.engineCapabilities &amp;amp; TextToSpeech.Capabilities.PauseResume
            }
            Button {
                text: qsTr(&quot;Resume&quot;)
                enabled: tts.state == TextToSpeech.Paused
                onClicked: tts.resume()
                visible: tts.engineCapabilities &amp;amp; TextToSpeech.Capabilities.PauseResume
            }
    ...
</db:programlisting>
<db:para>To synthesize text into PCM data for further processing, use synthesize().</db:para>
<db:para>To set a voice, use the <db:link xlink:href="qml-qttexttospeech-voiceselector.xml">VoiceSelector</db:link> attached property like this:</db:para>
<db:programlisting language="cpp">TextToSpeech {
    VoiceSelector.locale: Qt.locale(&quot;en_UK&quot;)
    VoiceSelector.gender: Voice.Male
}
</db:programlisting>
<db:para>The first voice that matches all specified criteria will be used. If no voice matches all criteria, then the voice will not change.</db:para>
<db:para>Alternatively, use <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#findVoices-method">findVoices</db:link>() to get a list of matching voices, or use <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#availableVoices-method">availableVoices</db:link>() to get the list of voices that support the current locale. Change the <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#locale-prop">locale</db:link> property, using one of the <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#availableLocales-method">availableLocales</db:link>() that is a good match for the language that the input text is in, and for the accent of the desired voice output. This will change the list of available voices on most platforms. Then use one of the available voices in the <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#voice-prop">voice</db:link> property.</db:para>
<db:para>Not every engine supports all features. Use the engineCapabilities() function to test which features are available, and adjust the usage of the type accordingly.</db:para>
<db:note>
<db:para>Which locales and voices the engine supports depends usually on the Operating System configuration. E.g. on macOS, end users can install voices through the <db:emphasis>Accessibility</db:emphasis> panel in <db:emphasis>System Preferences</db:emphasis>.</db:para>
</db:note>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="engine-prop">
<db:title>engine : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>engine</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The engine used to synthesize text to speech.</db:para>
<db:para>Changing the engine stops any ongoing speech.</db:para>
<db:para>On most platforms, changing the engine will update the list of <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#availableLocales-method">available locales</db:link> and <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#availableVoices-method">available voices</db:link>.</db:para>
</db:section>
<db:section xml:id="engineCapabilities-prop">
<db:title>[since 6.6] engineCapabilities : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>engineCapabilities</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the capabilities implemented by the current engine.</db:para>
<db:para>This property was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#engine-prop">engine</db:link></db:member>
<db:member><db:link xlink:href="qtexttospeech.xml#Capability-enum">QTextToSpeech::Capability</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="engineParameters-prop">
<db:title>engineParameters : map</db:title>
<db:fieldsynopsis>
<db:type>map</db:type>
<db:varname>engineParameters</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds engine-specific parameters.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#engine-prop">engine</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="locale-prop">
<db:title>locale : locale</db:title>
<db:fieldsynopsis>
<db:type>locale</db:type>
<db:varname>locale</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current locale in use.</db:para>
<db:para>By default, the system locale is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#voice-prop">voice</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pitch-prop">
<db:title>pitch : double</db:title>
<db:fieldsynopsis>
<db:type>double</db:type>
<db:varname>pitch</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property hold the voice pitch, ranging from -1.0 to 1.0.</db:para>
<db:para>The default of 0.0 is the normal speech pitch.</db:para>
</db:section>
<db:section xml:id="rate-prop">
<db:title>rate : double</db:title>
<db:fieldsynopsis>
<db:type>double</db:type>
<db:varname>rate</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current voice rate, ranging from -1.0 to 1.0.</db:para>
<db:para>The default of 0.0 is the normal speech flow.</db:para>
</db:section>
<db:section xml:id="state-prop">
<db:title>state : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>state</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current state of the speech synthesizer.</db:para>
<db:programlisting language="qml">        onStateChanged: updateStateLabel(state)

        function updateStateLabel(state)
        {
            switch (state) {
                case TextToSpeech.Ready:
                    statusLabel.text = qsTr(&quot;Ready&quot;)
                    break
                case TextToSpeech.Speaking:
                    statusLabel.text = qsTr(&quot;Speaking&quot;)
                    break
                case TextToSpeech.Paused:
                    statusLabel.text = qsTr(&quot;Paused...&quot;)
                    break
                case TextToSpeech.Error:
                    statusLabel.text = qsTr(&quot;Error!&quot;)
                    break
            }
        }
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#State-enum">QTextToSpeech::State</db:link></db:member>
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#say-method">say</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#stop-method">stop</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#pause-method">pause</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="voice-prop">
<db:title>voice : Voice</db:title>
<db:fieldsynopsis>
<db:type>Voice</db:type>
<db:varname>voice</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the voice that will be used for the speech.</db:para>
<db:para>The voice needs to be one of the <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#availableVoices-method">voices available</db:link> for the engine.</db:para>
<db:para>On some platforms, setting the voice changes other voice attributes such as <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#locale-prop">locale</db:link>, <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#pitch-prop">pitch</db:link>, and so on. These changes trigger the emission of signals.</db:para>
</db:section>
<db:section xml:id="volume-prop">
<db:title>volume : double</db:title>
<db:fieldsynopsis>
<db:type>double</db:type>
<db:varname>volume</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current volume, ranging from 0.0 to 1.0.</db:para>
<db:para>The default value is the platform's default volume.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="aboutToSynthesize-signal">
<db:title>[since 6.6] aboutToSynthesize(number <db:emphasis>id</db:emphasis>)</db:title>
<db:para>This signal gets emitted just before the engine starts to synthesize the speech audio for <db:code role="parameter">id</db:code>. Applications can use this signal to make last-minute changes to <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#voice-prop">voice</db:link> attributes, or to track the process of text enqueued via <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#enqueue-method">enqueue</db:link>().</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onAboutToSynthesize</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#enqueue-method">enqueue</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#voice-prop">voice</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorOccurred-signal">
<db:title>void errorOccurred(enumeration <db:emphasis>reason</db:emphasis>, string <db:emphasis>errorString</db:emphasis>)</db:title>
<db:para>This signal is emitted after an error occurred and the <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#state-prop">state</db:link> has been set to <db:code>TextToSpeech.Error</db:code>. The <db:code role="parameter">reason</db:code> parameter specifies the type of error, and the <db:code role="parameter">errorString</db:code> provides a human-readable error description.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onErrorOccurred</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#state-prop">state</db:link></db:member>
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#errorReason-method">errorReason</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#errorString-method">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sayingWord-signal">
<db:title>[since 6.6] sayingWord(string <db:emphasis>word</db:emphasis>, int <db:emphasis>id</db:emphasis>, int <db:emphasis>start</db:emphasis>, int <db:emphasis>length</db:emphasis>)</db:title>
<db:para>This signal is emitted when the <db:code role="parameter">word</db:code>, which is the slice of text indicated by <db:code role="parameter">start</db:code> and <db:code role="parameter">length</db:code> in the utterance <db:code role="parameter">id</db:code>, gets played to the audio device.</db:para>
<db:note>
<db:para>This signal requires that the engine has the <db:link xlink:href="qtexttospeech.xml#Capability-enum">WordByWordProgress</db:link> capability.</db:para>
</db:note>
<db:para>The following code highlights the word that is spoken in a <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> <db:code>input</db:code>:</db:para>
<db:programlisting language="qml">        onSayingWord: (word, id, start, length)=&amp;gt; {
            input.select(start, start + length)
        }
</db:programlisting>
<db:note>
<db:para>The corresponding handler is <db:code>onSayingWord</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#Capability-enum">QTextToSpeech::Capability</db:link></db:member>
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#say-method">say</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="availableEngines-method">
<db:title>list&lt;string&gt; availableEngines()</db:title>
<db:para>Holds the list of supported text-to-speech engine plug-ins.</db:para>
</db:section>
<db:section xml:id="availableLocales-method">
<db:title>list&lt;Voice&gt; availableLocales()</db:title>
<db:para>Holds the list of locales that are supported by the active <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#engine-prop">engine</db:link>.</db:para>
</db:section>
<db:section xml:id="availableVoices-method">
<db:title>list&lt;Voice&gt; availableVoices()</db:title>
<db:para>Holds the list of voices available for the current <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#locale-prop">locale</db:link>.</db:para>
</db:section>
<db:section xml:id="enqueue-method">
<db:title>[since 6.6] enqueue(string <db:emphasis>utterance</db:emphasis>)</db:title>
<db:para>Adds <db:code role="parameter">utterance</db:code> to the queue of text to be spoken, and starts speaking.</db:para>
<db:para>If the engine's <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#state-prop">state</db:link> is currently <db:code>Ready</db:code>, <db:code role="parameter">utterance</db:code> will be spoken immediately. Otherwise, the engine will start to speak <db:code role="parameter">utterance</db:code> once it has finished speaking the current text.</db:para>
<db:para>Each time the engine proceeds to the next text entry in the queue, the <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#aboutToSynthesize-signal">aboutToSynthesize</db:link>() signal gets emitted. This allows applications to keep track of the progress, and to make last-minute changes to voice attributes.</db:para>
<db:para>Calling <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#stop-method">stop</db:link>() clears the queue.</db:para>
<db:para>This method was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#say-method">say</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#stop-method">stop</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#aboutToSynthesize-signal">aboutToSynthesize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorReason-method">
<db:title>enumeration errorReason()</db:title>
<db:para>Returns the reason why the engine has reported an error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeech.xml#ErrorReason-enum">QTextToSpeech::ErrorReason</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString-method">
<db:title>string errorString()</db:title>
<db:para>Returns the current engine error message.</db:para>
</db:section>
<db:section xml:id="findVoices-method">
<db:title>[since 6.6] list&lt;voice&gt; findVoices(map <db:emphasis>criteria</db:emphasis>)</db:title>
<db:para>Returns the list of voices that match all the specified <db:code role="parameter">criteria</db:code>.</db:para>
<db:para><db:code role="parameter">criteria</db:code> is a map from voice property name to property value, supporting combinations of search criteria such as:</db:para>
<db:programlisting language="cpp">let daniel = tts.findVoices({
    &quot;name&quot;: &quot;Daniel&quot;
})
let maleEnglish = tts.findVoices({
    &quot;gender&quot;: Voice.Male,
    &quot;language&quot;: Qt.locale('en')
})
</db:programlisting>
<db:para>This method was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttexttospeech-voiceselector.xml">VoiceSelector</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pause-method">
<db:title>pause(BoundaryHint <db:emphasis>boundaryHint</db:emphasis>)</db:title>
<db:para>Pauses the current speech at <db:code role="parameter">boundaryHint</db:code>.</db:para>
<db:para>Whether the <db:code role="parameter">boundaryHint</db:code> is respected depends on the <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#engine-prop">engine</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#resume-method">resume</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttospeech.xml#BoundaryHint-enum">QTextToSpeech::BoundaryHint</db:link></db:member>
<db:member><db:link xlink:href="qtexttospeech.xml#Capability-enum">PauseResume</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resume-method">
<db:title>resume()</db:title>
<db:para>Resume speaking after <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#pause-method">pause</db:link>() has been called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#pause-method">pause</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="say-method">
<db:title>say(string <db:emphasis>text</db:emphasis>)</db:title>
<db:para>Starts synthesizing the <db:code role="parameter">text</db:code>.</db:para>
<db:para>This function starts sythesizing the speech asynchronously, and reads the text to the default audio output device.</db:para>
<db:programlisting language="qml">        RowLayout {
            Button {
                text: qsTr(&quot;Speak&quot;)
                enabled: [TextToSpeech.Paused, TextToSpeech.Ready].includes(tts.state)
                onClicked: {
                    tts.say(input.text)
                }
            }
</db:programlisting>
<db:note>
<db:para>All in-progress readings are stopped before beginning to read the recently synthesized text.</db:para>
</db:note>
<db:para>The current state is available using the <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#state-prop">state</db:link> property, and is set to <db:link xlink:href="qtexttospeech.xml#State-enum">QTextToSpeech::Speaking</db:link> once the reading starts. When the reading is done, <db:link xlink:href="qml-qttexttospeech-texttospeech.xml#state-prop">state</db:link> will be set to <db:link xlink:href="qtexttospeech.xml#State-enum">QTextToSpeech::Ready</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#stop-method">stop</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#pause-method">pause</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#resume-method">resume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stop-method">
<db:title>stop(BoundaryHint <db:emphasis>boundaryHint</db:emphasis>)</db:title>
<db:para>Stops the current reading at <db:code role="parameter">boundaryHint</db:code>, and clears the queue of pending texts.</db:para>
<db:para>The reading cannot be resumed. Whether the <db:code role="parameter">boundaryHint</db:code> is respected depends on the engine.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#say-method">say</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#enqueue-method">enqueue</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qttexttospeech-texttospeech.xml#pause-method">pause</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttospeech.xml#BoundaryHint-enum">QTextToSpeech::BoundaryHint</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
