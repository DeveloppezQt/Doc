<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Building projects on the command line</db:title>
<db:productname>QtCMake</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Using Qt with CMake</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="cmake-get-started.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Getting started with CMake"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="cmake-imported-targets.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Imported targets"/></db:extendedlink>
<db:abstract>
<db:para>Using Qt with CMake.</db:para></db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This page explains how to configure and build existing projects. If you want to know how to create a Qt-based CMake project, see the documentation on <db:link xlink:href="cmake-get-started.xml">how to get started with CMake</db:link>.</db:para>
<db:para>To build a Qt project, CMake needs to know where the Qt installation is located. Usually this is done by setting the CMake variable <db:link xlink:href="https://cmake.org/cmake/help/latest/variable/CMAKE_PREFIX_PATH.html">CMAKE_PREFIX_PATH</db:link> to Qt's installation prefix. If you are cross-compiling, see <db:link xlink:href="cmake-build-on-cmdline.xml#cross-compiling">Cross-compiling</db:link> for details on additional variables you will need to set.</db:para>
<db:para>If Qt is installed using the online installer, choose a Qt version within the top-level installation directory. For example, the following command shows how this is done on Windows:</db:para>
<db:programlisting language="cpp" role="bad">cmake -DCMAKE_PREFIX_PATH=C:\Qt\6.4.3\msvc2019_64 -S &amp;lt;source-dir&amp;gt; -B &amp;lt;build-dir&amp;gt;
</db:programlisting>
<db:para>The <db:code>&lt;source-dir&gt;</db:code> and <db:code>&lt;build-dir&gt;</db:code> placeholders represent the source and build directories of your project.</db:para>
<db:section xml:id="cmake-generators">
<db:title>CMake generators</db:title>
<db:para>CMake generates the necessary build system files that enable build tools such as GNU Make or Ninja to build your project.</db:para>
<db:para>CMake's default generator depends on the platform and build environment. For example on Windows, CMake generates Visual Studio project files if a Visual Studio environment is detected.</db:para>
<db:para>For a consistent developer experience on all platforms, use the <db:code>Ninja</db:code> or <db:code>Ninja Multi-Config</db:code> generator.</db:para>
<db:para>You can select the CMake generator either by setting the <db:code>CMAKE_GENERATOR</db:code> environment variable or using the <db:code>-G</db:code> argument:</db:para>
<db:programlisting language="cpp" role="bad">cmake -G Ninja ...
</db:programlisting>
</db:section>
<db:section xml:id="qt-cmake">
<db:title>qt-cmake</db:title>
<db:para>The <db:code>qt-cmake</db:code> script is a convenient alternative to configure your project. It eliminates the need for you to specify the <db:code>CMAKE_PREFIX_PATH</db:code>. You can find it located in the <db:code>bin</db:code> directory of your Qt installation prefix. The script passes all parameters to CMake, so you can use it just like you would <db:code>cmake\</db:code>:</db:para>
<db:programlisting language="cpp" role="bad">C:\Qt\6.4.3\msvc2019_64\bin\qt-cmake -G Ninja -S &amp;lt;source-dir&amp;gt; -B &amp;lt;build-dir&amp;gt;
</db:programlisting>
<db:para>After the build system files are generated, your project is ready to be built:</db:para>
<db:programlisting language="cpp" role="bad">cd &amp;lt;build-dir&amp;gt;
ninja
</db:programlisting>
<db:para>You can also use the generator-independent CMake command:</db:para>
<db:programlisting language="cpp" role="bad">cmake --build &amp;lt;build-dir&amp;gt;
</db:programlisting>
</db:section>
<db:section xml:id="cross-compiling">
<db:title>Cross-compiling</db:title>
<db:para>Building your project for a platform that is different from your development machine is called cross-compiling. An example is building for Android (the target platform) on a Windows machine (the host platform).</db:para>
<db:para>Cross-compiling with CMake requires a <db:link xlink:href="https://cmake.org/cmake/help/latest/variable/CMAKE_TOOLCHAIN_FILE.html">toolchain file</db:link> for most platforms. It also requires a Qt version for the development host, in addition to a Qt version for the target platform. For example, you need Qt for Windows and Qt for Android installed to cross-compile for Android on Windows.</db:para>
<db:para>Use <db:code>qt-cmake</db:code> from the Qt installation for the target platform, to cross-compile your project for that platform:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;target-qt&amp;gt;/bin/qt-cmake -S &amp;lt;source-dir&amp;gt; -B &amp;lt;build-dir&amp;gt;
</db:programlisting>
<db:para>This will configure your project for the target platform. The toolchain file is automatically passed, and possibly other platform-specific variables are set up.</db:para>
</db:section>
<db:section xml:id="specifying-a-custom-toolchain-file">
<db:title>Specifying a custom toolchain file</db:title>
<db:para>The <db:code>qt-cmake</db:code> script passes a Qt-internal <db:link xlink:href="https://cmake.org/cmake/help/latest/variable/CMAKE_TOOLCHAIN_FILE.html">toolchain file</db:link> to CMake. This toolchain file sets several variables that are specific to Qt's target platform.</db:para>
<db:para>If you are using a Qt installation that has not been built on your machine, <db:code>qt-cmake</db:code> needs to know the location of the CMake toolchain file for the target platform.</db:para>
<db:para>In such a case, you can instruct <db:code>qt-cmake</db:code> to chainload a custom toolchain file by setting the <db:code>QT_CHAINLOAD_TOOLCHAIN_FILE</db:code> variable:</db:para>
<db:programlisting language="cpp" role="bad">~/Qt/6.4.3/android_armv7/bin/qt-cmake -DQT_CHAINLOAD_TOOLCHAIN_FILE=&amp;lt;file-path&amp;gt; -S &amp;lt;source-dir&amp;gt; -B &amp;lt;build-dir&amp;gt;
</db:programlisting>
<db:para>This instructs Qt's internal toolchain file to load your custom toolchain file as well.</db:para>
</db:section>
</db:article>
