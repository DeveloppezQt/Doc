<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QXmlStream Bookmarks Example</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to read and write to XBEL files.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;

#include &quot;mainwindow.h&quot;
#include &quot;xbelreader.h&quot;
#include &quot;xbelwriter.h&quot;

MainWindow::MainWindow()
{
    QStringList labels;
    labels &amp;lt;&amp;lt; tr(&quot;Title&quot;) &amp;lt;&amp;lt; tr(&quot;Location&quot;);

    treeWidget = new QTreeWidget;
    treeWidget-&amp;gt;header()-&amp;gt;setSectionResizeMode(QHeaderView::Stretch);
    treeWidget-&amp;gt;setHeaderLabels(labels);
#if !defined(QT_NO_CONTEXTMENU) &amp;amp;&amp;amp; !defined(QT_NO_CLIPBOARD)
    treeWidget-&amp;gt;setContextMenuPolicy(Qt::CustomContextMenu);
    connect(treeWidget, &amp;amp;QWidget::customContextMenuRequested,
            this, &amp;amp;MainWindow::onCustomContextMenuRequested);
#endif
    setCentralWidget(treeWidget);

    createMenus();

    statusBar()-&amp;gt;showMessage(tr(&quot;Ready&quot;));

    setWindowTitle(tr(&quot;QXmlStream Bookmarks&quot;));
    const QSize availableSize = QApplication::desktop()-&amp;gt;availableGeometry(this).size();
    resize(availableSize.width() / 2, availableSize.height() / 3);
}

#if !defined(QT_NO_CONTEXTMENU) &amp;amp;&amp;amp; !defined(QT_NO_CLIPBOARD)
void MainWindow::onCustomContextMenuRequested(const QPoint &amp;amp;pos)
{
    const QTreeWidgetItem *item = treeWidget-&amp;gt;itemAt(pos);
    if (!item)
        return;
    const QString url = item-&amp;gt;text(1);
    QMenu contextMenu;
    QAction *copyAction = contextMenu.addAction(tr(&quot;Copy Link to Clipboard&quot;));
    QAction *openAction = contextMenu.addAction(tr(&quot;Open&quot;));
    QAction *action = contextMenu.exec(treeWidget-&amp;gt;viewport()-&amp;gt;mapToGlobal(pos));
    if (action == copyAction)
        QGuiApplication::clipboard()-&amp;gt;setText(url);
    else if (action == openAction)
        QDesktopServices::openUrl(QUrl(url));
}
#endif // !QT_NO_CONTEXTMENU &amp;amp;&amp;amp; !QT_NO_CLIPBOARD

void MainWindow::open()
{
    QString fileName =
            QFileDialog::getOpenFileName(this, tr(&quot;Open Bookmark File&quot;),
                                         QDir::currentPath(),
                                         tr(&quot;XBEL Files (*.xbel *.xml)&quot;));
    if (fileName.isEmpty())
        return;

    treeWidget-&amp;gt;clear();

    QFile file(fileName);
    if (!file.open(QFile::ReadOnly | QFile::Text)) {
        QMessageBox::warning(this, tr(&quot;QXmlStream Bookmarks&quot;),
                             tr(&quot;Cannot read file %1:\n%2.&quot;)
                             .arg(QDir::toNativeSeparators(fileName),
                                  file.errorString()));
        return;
    }

    XbelReader reader(treeWidget);
    if (!reader.read(&amp;amp;file)) {
        QMessageBox::warning(this, tr(&quot;QXmlStream Bookmarks&quot;),
                             tr(&quot;Parse error in file %1:\n\n%2&quot;)
                             .arg(QDir::toNativeSeparators(fileName),
                                  reader.errorString()));
    } else {
        statusBar()-&amp;gt;showMessage(tr(&quot;File loaded&quot;), 2000);
    }

}

void MainWindow::saveAs()
{
    QString fileName =
            QFileDialog::getSaveFileName(this, tr(&quot;Save Bookmark File&quot;),
                                         QDir::currentPath(),
                                         tr(&quot;XBEL Files (*.xbel *.xml)&quot;));
    if (fileName.isEmpty())
        return;

    QFile file(fileName);
    if (!file.open(QFile::WriteOnly | QFile::Text)) {
        QMessageBox::warning(this, tr(&quot;QXmlStream Bookmarks&quot;),
                             tr(&quot;Cannot write file %1:\n%2.&quot;)
                             .arg(QDir::toNativeSeparators(fileName),
                                  file.errorString()));
        return;
    }

    XbelWriter writer(treeWidget);
    if (writer.writeFile(&amp;amp;file))
        statusBar()-&amp;gt;showMessage(tr(&quot;File saved&quot;), 2000);
}

void MainWindow::about()
{
   QMessageBox::about(this, tr(&quot;About QXmlStream Bookmarks&quot;),
            tr(&quot;The &amp;lt;b&amp;gt;QXmlStream Bookmarks&amp;lt;/b&amp;gt; example demonstrates how to use Qt's &quot;
               &quot;QXmlStream classes to read and write XML documents.&quot;));
}

void MainWindow::createMenus()
{
    QMenu *fileMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;File&quot;));
    QAction *openAct = fileMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Open...&quot;), this, &amp;amp;MainWindow::open);
    openAct-&amp;gt;setShortcuts(QKeySequence::Open);

    QAction *saveAsAct = fileMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Save As...&quot;), this, &amp;amp;MainWindow::saveAs);
    saveAsAct-&amp;gt;setShortcuts(QKeySequence::SaveAs);

    QAction *exitAct = fileMenu-&amp;gt;addAction(tr(&quot;E&amp;amp;xit&quot;), this, &amp;amp;QWidget::close);
    exitAct-&amp;gt;setShortcuts(QKeySequence::Quit);

    menuBar()-&amp;gt;addSeparator();

    QMenu *helpMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;Help&quot;));
    helpMenu-&amp;gt;addAction(tr(&quot;&amp;amp;About&quot;), this, &amp;amp;MainWindow::about);
    helpMenu-&amp;gt;addAction(tr(&quot;About &amp;amp;Qt&quot;), qApp, &amp;amp;QCoreApplication::quit);
}

</db:programlisting>
</db:article>
