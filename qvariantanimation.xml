<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QVariantAnimation Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link> class provides an abstract base class for animations.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QVariantAnimation</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractanimation.xml" xlink:role="class">QAbstractAnimation</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpropertyanimation.xml" xlink:role="class">QPropertyAnimation</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QVariantAnimation is part of <db:simplelist><db:member><db:link xlink:href="animation.xml">Animation Framework</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class is part of <db:link xlink:href="animation-overview.xml">The Animation Framework</db:link>. It serves as a base class for property and item animations, with functions for shared functionality.</db:para>
<db:para><db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link> cannot be used directly as it is an abstract class; it has a pure virtual method called <db:link xlink:href="qvariantanimation.xml#updateCurrentValue">updateCurrentValue</db:link>(). The class performs interpolation over <db:link xlink:href="qvariant.xml">QVariant</db:link>s, but leaves using the interpolated values to its subclasses. Currently, Qt provides <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link>, which animates Qt <db:link xlink:href="properties.xml#qt-s-property-system">properties</db:link>. See the <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> class description if you wish to animate such properties.</db:para>
<db:para>You can then set start and end values for the property by calling setStartValue() and setEndValue(), and finally call <db:link xlink:href="qabstractanimation.xml#start">start</db:link>() to start the animation. <db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link> will interpolate the property of the target object and emit <db:link xlink:href="qvariantanimation.xml#valueChanged">valueChanged</db:link>(). To react to a change in the current value you have to reimplement the <db:link xlink:href="qvariantanimation.xml#updateCurrentValue">updateCurrentValue</db:link>() virtual function.</db:para>
<db:para>It is also possible to set values at specified steps situated between the start and end value. The interpolation will then touch these points at the specified steps. Note that the start and end values are defined as the key values at 0.0 and 1.0.</db:para>
<db:para>There are two ways to affect how <db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link> interpolates the values. You can set an easing curve by calling setEasingCurve(), and configure the duration by calling setDuration(). You can change how the QVariants are interpolated by creating a subclass of <db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link>, and reimplementing the virtual <db:link xlink:href="qvariantanimation.xml#interpolated">interpolated</db:link>() function.</db:para>
<db:para>Subclassing <db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link> can be an alternative if you have <db:link xlink:href="qvariant.xml">QVariant</db:link>s that you do not wish to declare as Qt properties. Note, however, that you in most cases will be better off declaring your <db:link xlink:href="qvariant.xml">QVariant</db:link> as a property.</db:para>
<db:para>Not all <db:link xlink:href="qvariant.xml">QVariant</db:link> types are supported. Below is a list of currently supported <db:link xlink:href="qvariant.xml">QVariant</db:link> types:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">Int</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">UInt</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">Double</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">Float</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QLine</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QLineF</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QPoint</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QPointF</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QSize</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QSizeF</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QRect</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QRectF</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QColor</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If you need to interpolate other variant types, including custom types, you have to implement interpolation for these yourself. To do this, you can register an interpolator function for a given type. This function takes 3 parameters: the start value, the end value and the current progress.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QVariant myColorInterpolator(const QColor &amp;start, const QColor &amp;end, qreal progress)
{
    ...
    return QColor(...);
}
...
qRegisterAnimationInterpolator&lt;QColor&gt;(myColorInterpolator);
</db:programlisting>
<db:para>Another option is to reimplement <db:link xlink:href="qvariantanimation.xml#interpolated">interpolated</db:link>(), which returns interpolation values for the value being interpolated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link></db:member>
<db:member><db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link></db:member>
<db:member><db:link xlink:href="animation-overview.xml">The Animation Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="KeyValue-typedef">
<db:title>QVariantAnimation::KeyValue</db:title>
<db:para>This is a typedef for <db:link xlink:href="qpair.xml">QPair</db:link>&lt;qreal, <db:link xlink:href="qvariant.xml">QVariant</db:link>&gt;.</db:para>
</db:section>
<db:section xml:id="KeyValues-typedef">
<db:title>QVariantAnimation::KeyValues</db:title>
<db:para>This is a typedef for <db:link xlink:href="qvector.xml">QVector</db:link>&lt;<db:link xlink:href="qvariantanimation.xml#KeyValue-typedef">KeyValue</db:link>&gt;</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QVariantAnimation">
<db:title>QVariantAnimation::QVariantAnimation(QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Construct a <db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link> object. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link>'s constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QVariantAnimation">
<db:title>[virtual noexcept] QVariantAnimation::~QVariantAnimation()</db:title>
<db:para>Destroys the animation.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QVariantAnimation::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractanimation.xml#event" role="function">QAbstractAnimation::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="interpolated">
<db:title>[virtual protected] QVariant QVariantAnimation::interpolated(const QVariant &amp;<db:emphasis>from</db:emphasis>, const QVariant &amp;<db:emphasis>to</db:emphasis>, qreal <db:emphasis>progress</db:emphasis>) const</db:title>
<db:para>This virtual function returns the linear interpolation between variants <db:code role="parameter">from</db:code> and <db:code role="parameter">to</db:code>, at <db:code role="parameter">progress</db:code>, usually a value between 0 and 1. You can reimplement this function in a subclass of <db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link> to provide your own interpolation algorithm.</db:para>
<db:para>Note that in order for the interpolation to work with a <db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link> that return a value smaller than 0 or larger than 1 (such as <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::InBack</db:link>) you should make sure that it can extrapolate. If the semantic of the datatype does not allow extrapolation this function should handle that gracefully.</db:para>
<db:para>You should call the <db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link> implementation of this function if you want your class to handle the types already supported by Qt (see class <db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link> description for a list of supported types).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyValueAt">
<db:title>QVariant QVariantAnimation::keyValueAt(qreal <db:emphasis>step</db:emphasis>) const</db:title>
<db:para>Returns the key frame value for the given <db:code role="parameter">step</db:code>. The given <db:code role="parameter">step</db:code> must be in the range 0 to 1. If there is no <db:link xlink:href="qvariantanimation.xml#KeyValue-typedef">KeyValue</db:link> for <db:code role="parameter">step</db:code>, it returns an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvariantanimation.xml#keyValues">keyValues</db:link>()</db:member>
<db:member><db:link xlink:href="qvariantanimation.xml#setKeyValueAt">setKeyValueAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyValues">
<db:title>QVariantAnimation::KeyValues QVariantAnimation::keyValues() const</db:title>
<db:para>Returns the key frames of this animation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvariantanimation.xml#keyValueAt">keyValueAt</db:link>()</db:member>
<db:member><db:link xlink:href="qvariantanimation.xml#setKeyValues">setKeyValues</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setKeyValueAt">
<db:title>void QVariantAnimation::setKeyValueAt(qreal <db:emphasis>step</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Creates a key frame at the given <db:code role="parameter">step</db:code> with the given <db:code role="parameter">value</db:code>. The given <db:code role="parameter">step</db:code> must be in the range 0 to 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvariantanimation.xml#setKeyValues">setKeyValues</db:link>()</db:member>
<db:member><db:link xlink:href="qvariantanimation.xml#keyValueAt">keyValueAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setKeyValues">
<db:title>void QVariantAnimation::setKeyValues(const QVariantAnimation::KeyValues &amp;<db:emphasis>keyValues</db:emphasis>)</db:title>
<db:para>Replaces the current set of key frames with the given <db:code role="parameter">keyValues</db:code>. the step of the key frames must be in the range 0 to 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvariantanimation.xml#keyValues">keyValues</db:link>()</db:member>
<db:member><db:link xlink:href="qvariantanimation.xml#keyValueAt">keyValueAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateCurrentTime">
<db:title>[override virtual protected] void QVariantAnimation::updateCurrentTime(<db:emphasis>int</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractanimation.xml#updateCurrentTime" role="function">QAbstractAnimation::updateCurrentTime(int currentTime)</db:link>.</db:para>
</db:section>
<db:section xml:id="updateCurrentValue">
<db:title>[virtual protected] void QVariantAnimation::updateCurrentValue(const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This virtual function is called every time the animation's current value changes. The <db:code role="parameter">value</db:code> argument is the new current value.</db:para>
<db:para>The base class implementation does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>currentValue</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateState">
<db:title>[override virtual protected] void QVariantAnimation::updateState(QAbstractAnimation::State <db:emphasis>newState</db:emphasis>, QAbstractAnimation::State <db:emphasis>oldState</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractanimation.xml#updateState" role="function">QAbstractAnimation::updateState(QAbstractAnimation::State newState, QAbstractAnimation::State oldState)</db:link>.</db:para>
</db:section>
<db:section xml:id="valueChanged">
<db:title>void QVariantAnimation::valueChanged(const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para><db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link> emits this signal whenever the current <db:code role="parameter">value</db:code> changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>currentValue</db:member>
<db:member>startValue</db:member>
<db:member>endValue</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
