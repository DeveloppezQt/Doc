<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>EnginioModel QML Type</db:title>
<db:productname>QtEnginioQml</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Client library for Enginio from QML</db:titleabbrev>
<db:abstract>
<db:para>Makes accessing collections of objects easy.</db:para>
<db:para>This type was introduced in Qt 5.3.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import Enginio 1.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>EnginioModel is part of <db:simplelist><db:member>engino-qml</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:programlisting language="qml">import Enginio 1.0
</db:programlisting>
<db:para>The query property of the model takes a JSON object.</db:para>
<db:para>To get a model of each object of type &quot;objects.city&quot; use:</db:para>
<db:programlisting language="qml">EnginioModel {
    id: enginioModel
    client: client
    query: { &quot;objectType&quot;: &quot;objects.city&quot; }
}
</db:programlisting>
<db:para>It is then possible to use a regular Qt Quick <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> to display the list of cities that the backend contains.</db:para>
<db:programlisting language="qml">ListView {
    anchors.fill: parent
    model: enginioModel
    delegate: Text {
        text: name + &quot;: &quot; + population
    }
}
</db:programlisting>
<db:para>Note that the properties of the objects can be directly accessed. In this example, we have the type &quot;objects.city&quot; in the backend with two properties: &quot;name&quot; and &quot;population&quot;.</db:para>
<db:para>The model supports several function to modify the data, for example <db:link xlink:href="qml-enginio-enginiomodel.xml#append-method">append</db:link>(), <db:link xlink:href="qml-enginio-enginiomodel.xml#remove-method">remove</db:link>(), <db:link xlink:href="qml-enginio-enginiomodel.xml#setProperty-method">setProperty</db:link>()</db:para>
<db:para>The QML version of <db:link xlink:href="qml-enginio-enginiomodel.xml">EnginioModel</db:link> supports the same functionality as the C++ version. <db:link xlink:href="enginiomodel.xml#enginiomodelcpp">EnginioModel C++</db:link></db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="client-prop">
<db:title>client : EnginioClient</db:title>
<db:para>The instance of <db:link xlink:href="qml-enginio-enginioclient.xml">EnginioClient</db:link> used for this model.</db:para>
</db:section>
<db:section xml:id="operation-prop">
<db:title>operation : Enginio::Operation</db:title>
<db:para>The operation used for the <db:link xlink:href="qml-enginio-enginiomodel.xml#query-prop">query</db:link>.</db:para>
</db:section>
<db:section xml:id="query-prop">
<db:title>query : QJSValue</db:title>
<db:para>The query used to populate the model with data from the backend.</db:para>
<db:para>See <db:link xlink:href="qml-enginio-enginioclient.xml#query-method">EnginioClient::query</db:link>() documentation for information on how to construct a query.</db:para>
<db:para>While the <db:link xlink:href="qml-enginio-enginioclient.xml">EnginioClient</db:link> implementation of query() returns the data of a query as a JSON object, for the model the query will be interpreted as the model data.</db:para>
<db:para>Usually, the query is for a single object type and will return all objects in the database of that type. The model will then represent each returned object as one row. It can be limited and sorted just like its counterpart in <db:link xlink:href="qml-enginio-enginioclient.xml">EnginioClient</db:link>.</db:para>
<db:para>One important thing to note is that the model cannot keep the same sorting as the backend, and thus sorting and limits are only preserved until an insertion or deletion happens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#query-method">EnginioClient::query</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="append-method">
<db:title>EnginioReply append(QJSValue <db:emphasis>object</db:emphasis>)</db:title>
<db:para>Add a new <db:code role="parameter">object</db:code> to the model and database.</db:para>
<db:para>This function appends the new object to the local model cache and makes an asynchronous request to the backend.</db:para>
<db:para>Since adding an object to the database may fail for various reasons, the returned reply must be kept and used for error handling (see <db:link xlink:href="qml-enginio-enginioreply.xml">EnginioReply</db:link>). If the operation fails, the object that was supposed to be appended will be removed from the local model again. If the model is used in a view and the backend does not accept the object because it violates a validator, it will be visible to the user that a new row in the view appears and disappears again.</db:para>
<db:para>Returns the <db:link xlink:href="qml-enginio-enginioreply.xml">EnginioReply</db:link> from the backend</db:para>
<db:para>To add a &quot;city&quot; object to the model by appending it:</db:para>
<db:programlisting language="qml">function addCity() {
    var berlin = {
        &quot;objectType&quot;: &quot;objects.city&quot;,
        &quot;name&quot;: &quot;Berlin&quot;,
        &quot;population&quot;: 3300000
    }
    enginioModel.append(berlin)
}
</db:programlisting>
</db:section>
<db:section xml:id="remove-method">
<db:title>EnginioReply remove(int <db:emphasis>row</db:emphasis>)</db:title>
<db:para>Removes the <db:code role="parameter">row</db:code> from the model and database.</db:para>
<db:para>This function immediately removes the <db:code role="parameter">row</db:code> from the local cache and sends a remove request to the Enginio backend.</db:para>
<db:para>Returns the <db:link xlink:href="qml-enginio-enginioreply.xml">EnginioReply</db:link> from the backend.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#remove-method">EnginioClient::remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProperty-method">
<db:title>EnginioReply setProperty(int <db:emphasis>row</db:emphasis>, string <db:emphasis>propertyName</db:emphasis>, QVariant <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Change a property of an object in the model</db:para>
<db:para>The property <db:code role="parameter">propertyName</db:code> of the object at <db:code role="parameter">row</db:code> will be set to <db:code role="parameter">value</db:code>. The model will locally reflect the change immediately and propagage the change to the server in the background.</db:para>
</db:section>
</db:section>
</db:article>
