<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Special Content</db:title>
<db:productname>QDoc</db:productname>
<db:titleabbrev>QDoc Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="10-qdoc-commands-tablesandlists.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Tables and Lists"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="12-0-qdoc-commands-miscellaneous.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Miscellaneous"/></db:extendedlink>
<db:abstract>
<db:para>QDoc Manual.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>QDoc Manual</db:para>
<db:para>The document contents commands identify parts of the documentation, i.e. parts with a special rendering, conceptual meaning or function.</db:para>
<db:anchor xml:id="abstract-command"/>
<db:section xml:id="abstract">
<db:title>\abstract</db:title>
<db:para>The \abstract and \endabstract commands delimit a document's abstract section.</db:para>
<db:para>The abstract section is rendered as an indented italicized paragraph.</db:para>
<db:warning>
<db:para>The <db:emphasis role="bold">\abstract</db:emphasis> and <db:emphasis role="bold">\endabstract</db:emphasis> commands have not been implemented. The abstract section is rendered as a regular HTML paragraph.</db:para>
</db:warning>
<db:anchor xml:id="quotation-command"/>
</db:section>
<db:section xml:id="quotation">
<db:title>\quotation</db:title>
<db:para>The \quotation and \endquotation commands delimit a long quotation.</db:para>
<db:para>The text in the delimited block is surrounded by <db:emphasis role="bold">&lt;blockquote&gt;</db:emphasis> and <db:emphasis role="bold">&lt;/blockquote&gt;</db:emphasis> in the html output, e.g.:</db:para>
<db:programlisting language="cpp">/ *!
  While the prospect of a significantly broader market is
  good news for Firstlogic, the notion also posed some
  challenges. Dave Dobson, director of technology for the La
  Crosse, Wisconsin-based company, said:

  \quotation
     As our solutions were being adopted into new
     environments, we saw an escalating need for easier
     integration with a wider range of enterprise
     applications.
  \endquotation
* /
</db:programlisting>
<db:para>The text in the <db:emphasis role="bold">\quotation</db:emphasis> block will appear in the generated HTML as:</db:para>
<db:programlisting language="cpp">&lt;blockquote&gt;
  &lt;p&gt;As our solutions were being adopted into new environments,
  we saw an escalating need for easier integration with a wider
  range of enterprise applications.&lt;/p&gt;
    &lt;/blockquote&gt;
</db:programlisting>
<db:para>The built-in style sheet for most browsers will render the contents of the &lt;blockquote&gt; tag with left and right indentations. The example above would be rendered as:</db:para>
<db:blockquote><db:para>As our solutions were being adopted into new environments, we saw an escalating need for easier integration with a wider range of enterprise applications.</db:para>
</db:blockquote>
<db:para>But you can redefine the <db:emphasis role="bold">&lt;blockquote&gt;</db:emphasis> tag in your style.css file.</db:para>
<db:anchor xml:id="footnote-command"/>
</db:section>
<db:section xml:id="footnote">
<db:title>\footnote</db:title>
<db:para>The \footnote and \endfootnote commands delimit a footnote.</db:para>
<db:para>The footnote is rendered at the bottom of the page.</db:para>
<db:warning>
<db:para>The <db:emphasis role="bold">\footnote</db:emphasis> and <db:emphasis role="bold">\endfootnote</db:emphasis> commands have not been implemented. The footnote is rendered as a regular HTML paragraph.</db:para>
</db:warning>
<db:anchor xml:id="tableofcontents-command"/>
</db:section>
<db:section xml:id="tableofcontents">
<db:title>\tableofcontents</db:title>
<db:para>The \tableofcontents command has been disabled because QDoc now generates a table of contents automatically.</db:para>
<db:para>The automatically generated table of contents appears in the upper righthand corner of the page.</db:para>
<db:anchor xml:id="brief-command"/>
</db:section>
<db:section xml:id="brief">
<db:title>\brief</db:title>
<db:para>The \brief command introduces a one-sentence description of a class, namespace, header file, property or variable.</db:para>
<db:para>The brief text is used to introduce the documentation of the associated object, and in lists generated using the <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#generatelist">\generatelist</db:link> command and the <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#annotatedlist">\annotatedlist</db:link> command.</db:para>
<db:para>The \brief command can be used in two significant different ways: <db:link xlink:href="11-qdoc-commands-specialcontent.xml#brief-class">One for classes, namespaces and header files</db:link>, and <db:link xlink:href="11-qdoc-commands-specialcontent.xml#brief-property">one for properties and variables</db:link>.</db:para>
<db:anchor xml:id="brief-property"/>
<db:para>When the \brief command is used to describe a property or a variable, the brief text must be a sentence fragment starting with &quot;whether&quot; (for a boolean property or variable) or starting with &quot;the&quot; (for any other property or variable).</db:para>
<db:para>For example the boolean <db:link xlink:href="qwidget.xml#isWindow">QWidget::isWindow</db:link> property:</db:para>
<db:programlisting language="cpp">/ *!
    \property QWidget::isActiveWindow
    \brief whether this widget's window is the active window

    The active window is the window that contains the widget that
    has keyboard focus.

    When popup windows are visible, this property is true
    for both the active window \e and for the popup.

    \sa activateWindow(), QApplication::activeWindow()
* /
</db:programlisting>
<db:para>and the QWidget::geometry property</db:para>
<db:programlisting language="cpp">/ *!
    \property QWidget::geometry
    \brief the geometry of the widget relative to its parent and
    excluding the window frame

    When changing the geometry, the widget, if visible,
    receives a move event (moveEvent()) and/or a resize
    event (resizeEvent()) immediately.

    ...

   \sa frameGeometry(), rect(), ...
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:blockquote><db:para>This property holds the geometry of the widget relative to its parent and excluding the window frame.</db:para>
<db:para>...</db:para>
<db:para>Access functions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">const <db:link xlink:href="qrect.xml">QRect</db:link> &amp; geometry () const</db:emphasis></db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">void setGeometry ( int x, int y, int w, int h )</db:emphasis></db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">void setGeometry ( const <db:link xlink:href="qrect.xml">QRect</db:link> &amp; )</db:emphasis></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>See also <db:link xlink:href="">frameGeometry()</db:link>, <db:link xlink:href="">rect()</db:link>, ...</db:para>
</db:blockquote>
<db:anchor xml:id="brief-class"/>
<db:para>When the \brief command is used to describe a class, the brief text should be a complete sentence and must start like this:</db:para>
<db:programlisting language="cpp">The &lt;classname&gt; class is|provides|contains|specifies...
</db:programlisting>
<db:warning>
<db:para>The brief statement is used as the first paragraph of the detailed description. Do not repeat the sentence.</db:para>
</db:warning>
<db:programlisting language="cpp">/ *!
    \class PreviewWindow
    \brief The PreviewWindow class is a custom widget
           displaying the names of its currently set
           window flags in a read-only text editor.

    The PreviewWindow class inherits QWidget. The widget
    displays the names of its window flags set with the
    setWindowFlags() function. It is also provided with a
    QPushButton that closes the window.

    ...

    \sa QWidget
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:blockquote><db:para>The PreviewWindow class is a custom widget displaying the names of its currently set window flags in a read-only text editor. <db:link xlink:href="13-qdoc-commands-topics.xml#preview-window">More...</db:link></db:para>
<db:itemizedlist>
<db:listitem>
<db:para>52 properties inherited from <db:link xlink:href="qwidget.xml">QWidget</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>1 property inherited from <db:link xlink:href="qobject.xml">QObject</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="13-qdoc-commands-topics.xml#constructor">PreviewWindow</db:link>(<db:link xlink:href="qwidget.xml">QWidget</db:link> *parent = 0)</db:para>
</db:listitem>
<db:listitem>
<db:para>void <db:link xlink:href="13-qdoc-commands-topics.xml#function">setWindowFlags</db:link>(<db:link xlink:href="qt.xml#WindowType-enum">Qt::WindowFlags</db:link> flags)</db:para>
</db:listitem>
</db:itemizedlist>
<db:itemizedlist>
<db:listitem>
<db:para>183 public functions inherited from <db:link xlink:href="qwidget.xml">QWidget</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>28 public functions inherited from <db:link xlink:href="qobject.xml">QObject</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:itemizedlist>
<db:listitem>
<db:para>17 public slots inherited from <db:link xlink:href="qwidget.xml">QWidget</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>1 public slot inherited from <db:link xlink:href="qobject.xml">QObject</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:itemizedlist>
<db:listitem>
<db:para>1 signal inherited from <db:link xlink:href="qwidget.xml">QWidget</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>1 signal inherited from <db:link xlink:href="qobject.xml">QObject</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>4 static public members inherited from <db:link xlink:href="qwidget.xml">QWidget</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>4 static public members inherited from <db:link xlink:href="qobject.xml">QObject</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>39 protected functions inherited from <db:link xlink:href="qwidget.xml">QWidget</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>7 protected functions inherited from <db:link xlink:href="qobject.xml">QObject</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:anchor xml:id="preview-window"/>
<db:para>The PreviewWindow class is a custom widget displaying the names of its currently set window flags in a read-only text editor.</db:para>
<db:para>The PreviewWindow class inherits <db:link xlink:href="qwidget.xml">QWidget</db:link>. The widget displays the names of its window flags set with the <db:link xlink:href="13-qdoc-commands-topics.xml#function">setWindowFlags()</db:link> function. It is also provided with a <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> that closes the window.</db:para>
<db:para>...</db:para>
<db:para>See also <db:link xlink:href="qwidget.xml">QWidget</db:link>.</db:para>
<db:anchor xml:id="constructor"/>
<db:para>Constructs a preview window widget with <db:emphasis>parent</db:emphasis>.</db:para>
<db:anchor xml:id="function"/>
<db:para>Sets the widgets flags using the QWidget::setWindowFlags() function.</db:para>
<db:para>Then runs through the available window flags, creating a text that contains the names of the flags that matches the flags parameter, displaying the text in the widgets text editor.</db:para>
</db:blockquote>
<db:para>Using \brief in a <db:link xlink:href="13-qdoc-commands-topics.xml#namespace">\namespace</db:link>:</db:para>
<db:programlisting language="cpp">/ *!
    \namespace Qt

    \brief The Qt namespace contains miscellaneous identifiers
    used throughout the Qt library.
* /
</db:programlisting>
<db:para>Using \brief in a <db:link xlink:href="13-qdoc-commands-topics.xml#headerfile">\headerfile</db:link>:</db:para>
<db:programlisting language="cpp">/ *!
    \headerfile &lt;QtGlobal&gt;
    \title Global Qt Declarations

    \brief The &lt;QtGlobal&gt; header file provides basic
    declarations and is included by all other Qt headers.

    \sa &lt;QtAlgorithms&gt;
* /
</db:programlisting>
<db:para>See also <db:link xlink:href="13-qdoc-commands-topics.xml#property">\property</db:link>, <db:link xlink:href="13-qdoc-commands-topics.xml#class">\class</db:link>, <db:link xlink:href="13-qdoc-commands-topics.xml#namespace">\namespace</db:link> and <db:link xlink:href="13-qdoc-commands-topics.xml#headerfile">\headerfile</db:link>.</db:para>
<db:anchor xml:id="legalese-command"/>
</db:section>
<db:section xml:id="legalese">
<db:title>\legalese</db:title>
<db:para>The \legalese and \endlegalese commands delimit a license agreement.</db:para>
<db:para>In the generated HTML, the delimited text is surrounded by a <db:emphasis role="bold">&lt;div class=&quot;LegaleseLeft&quot;&gt;</db:emphasis> and <db:emphasis role="bold">&lt;/div&gt;</db:emphasis> tags.</db:para>
<db:para>For example, here is a license agreement enclosed in \legalese and \endlegalese:</db:para>
<db:programlisting language="cpp">/ *!
  \legalese
      Copyright 1996 Daniel Dardailler.

      Permission to use, copy, modify, distribute, and sell this
      software for any purpose is hereby granted without fee,
      provided that the above copyright notice appear in all
      copies and that both that copyright notice and this
      permission notice appear in supporting documentation, and
      that the name of Daniel Dardailler not be used in
      advertising or publicity pertaining to distribution of the
      software without specific, written prior permission. Daniel
      Dardailler makes no representations about the suitability of
      this software for any purpose. It is provided &quot;as is&quot;
      without express or implied warranty.

  Modifications Copyright 1999 Matt Koss, under the same
      license as above.
      \endlegalese
    * /
    </db:programlisting>
<db:para>It will appear in the generated HTML as:</db:para>
<db:programlisting language="cpp">&lt;div class=&quot;LegaleseLeft&quot;&gt;
  &lt;p&gt;Copyright 1996 Daniel Dardailler.&lt;/p&gt;
      &lt;p&gt;Permission to use, copy, modify, distribute, and sell
      this software for any purpose is hereby granted without fee,
      provided that the above copyright notice appear in all
      copies and that both that copyright notice and this
      permission notice appear in supporting documentation, and
      that the name of Daniel Dardailler not be used in
      advertising or publicity pertaining to distribution of the
      software without specific, written prior permission. Daniel
      Dardailler makes no representations about the suitability of
      this software for any purpose. It is provided &quot;as is&quot;
      without express or implied warranty.&lt;/p&gt;

  &lt;p&gt;Modifications Copyright 1999 Matt Koss, under the same
      license as above.&lt;/p&gt;
&lt;/div&gt;
  </db:programlisting>
<db:para>If the \endlegalese command is omitted, QDoc will process the \legalese command but considers the rest of the documentation page as the license agreement.</db:para>
<db:para>Ideally, the license text is located with the licensed code.</db:para>
<db:para>Elsewhere, the documentation identified as <db:emphasis>\legalese</db:emphasis> command can be accumulated using <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#generatelist">\generatelist</db:link> with legalese-command as the argument. This is useful for generating an overview of the license agreements associated with the source code.</db:para>
<db:anchor xml:id="warning-command"/>
</db:section>
<db:section xml:id="warning">
<db:title>\warning</db:title>
<db:para>The \warning command prepends &quot;Warning:&quot; to the command's argument, in bold font.</db:para>
<db:programlisting language="cpp">/ *!
    Qt::HANDLE is a platform-specific handle type
    for system objects. This is  equivalent to
    \c{void *} on Windows and Mac OS X, and to
    \c{unsigned long} on X11.

    \warning Using this type is not portable.
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:blockquote><db:para><db:link xlink:href="qt.xml#HANDLE-typedef">Qt::HANDLE</db:link> is a platform-specific handle type for system objects. This is equivalent to void * on Windows and Mac OS X, and to unsigned long on X11.</db:para>
<db:warning>
<db:para>Using this type is not portable.</db:para>
</db:warning>
</db:blockquote>
</db:section>
</db:article>
