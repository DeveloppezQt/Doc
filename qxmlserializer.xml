<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QXmlSerializer Class</db:title>
<db:productname>QtXmlPatterns</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Patterns Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxmlserializer.xml">QXmlSerializer</db:link> class is an implementation of <db:link xlink:href="qabstractxmlreceiver.xml">QAbstractXmlReceiver</db:link> for transforming XQuery output into unformatted XML.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXmlSerializer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xmlpatterns</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractxmlreceiver.xml" xlink:role="class">QAbstractXmlReceiver</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qxmlformatter.xml" xlink:role="class">QXmlFormatter</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QXmlSerializer is part of <db:simplelist><db:member>xml-tools</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qxmlserializer.xml">QXmlSerializer</db:link> translates an <db:link xlink:href="qabstractxmlreceiver.xml#xquery-sequences">XQuery sequence</db:link>, usually the output of an <db:link xlink:href="qxmlquery.xml">QXmlQuery</db:link>, into XML. Consider the example:</db:para>
<db:programlisting language="cpp">QXmlQuery query;
query.setQuery(&quot;doc('index.html')/html/body/p[1]&quot;);

QXmlSerializer serializer(query, myOutputDevice);
query.evaluateTo(&amp;serializer);
</db:programlisting>
<db:para>First it constructs a <db:link xlink:href="qxmlquery.xml">query</db:link> that gets the first paragraph from document <db:code>index.html</db:code>. Then it constructs an instance of this class with the <db:link xlink:href="qxmlquery.xml">query</db:link> and <db:link xlink:href="qiodevice.xml">myOutputDevice</db:link>. Finally, it <db:link xlink:href="qxmlquery.xml#evaluateTo">evaluates</db:link> the <db:link xlink:href="qxmlquery.xml">query</db:link>, producing an ordered sequence of calls to the serializer's callback functions. The sequence of callbacks transforms the query output to XML and writes it to <db:link xlink:href="qiodevice.xml">myOutputDevice</db:link>.</db:para>
<db:para><db:link xlink:href="qxmlserializer.xml">QXmlSerializer</db:link> will:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Declare namespaces when needed,</db:para>
</db:listitem>
<db:listitem>
<db:para>Use appropriate escaping, when characters can't be represented in the XML,</db:para>
</db:listitem>
<db:listitem>
<db:para>Handle line endings appropriately,</db:para>
</db:listitem>
<db:listitem>
<db:para>Report errors, when it can't serialize the content, e.g., when asked to serialize an attribute that is a top-level node, or when more than one top-level element is encountered.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If an error occurs during serialization, result is undefined unless the serializer is driven through a call to <db:link xlink:href="qxmlquery.xml#evaluateTo">QXmlQuery::evaluateTo</db:link>().</db:para>
<db:para>If the generated XML should be indented and formatted for reading, use <db:link xlink:href="qxmlformatter.xml">QXmlFormatter</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="http://www.w3.org/TR/xslt-xquery-serialization/">XSLT 2.0 and XQuery 1.0 Serialization</db:link></db:member>
<db:member><db:link xlink:href="qxmlformatter.xml">QXmlFormatter</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QXmlSerializer">
<db:title>QXmlSerializer::QXmlSerializer(const QXmlQuery &amp;<db:emphasis>query</db:emphasis>, QIODevice *<db:emphasis>outputDevice</db:emphasis>)</db:title>
<db:para>Constructs a serializer that uses the name pool and message handler in <db:code role="parameter">query</db:code>, and writes the output to <db:code role="parameter">outputDevice</db:code>.</db:para>
<db:para><db:code role="parameter">outputDevice</db:code> must be a valid, non-null device that is open in write mode, otherwise behavior is undefined.</db:para>
<db:para><db:code role="parameter">outputDevice</db:code> must not be opened with <db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">QIODevice::Text</db:link> because it will cause the output to be incorrect. This class will ensure line endings are serialized as according with the XML specification. <db:link xlink:href="qxmlserializer.xml">QXmlSerializer</db:link> does not take ownership of <db:code role="parameter">outputDevice</db:code>.</db:para>
</db:section>
<db:section xml:id="atomicValue">
<db:title>[override virtual] void QXmlSerializer::atomicValue(const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractxmlreceiver.xml#atomicValue" role="function">QAbstractXmlReceiver::atomicValue(const QVariant &amp;value)</db:link>.</db:para>
</db:section>
<db:section xml:id="attribute">
<db:title>[override virtual] void QXmlSerializer::attribute(const QXmlName &amp;<db:emphasis>name</db:emphasis>, const QStringRef &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractxmlreceiver.xml#attribute" role="function">QAbstractXmlReceiver::attribute(const QXmlName &amp;name, const QStringRef &amp;value)</db:link>.</db:para>
</db:section>
<db:section xml:id="characters">
<db:title>[override virtual] void QXmlSerializer::characters(const QStringRef &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractxmlreceiver.xml#characters" role="function">QAbstractXmlReceiver::characters(const QStringRef &amp;value)</db:link>.</db:para>
</db:section>
<db:section xml:id="codec">
<db:title>const QTextCodec *QXmlSerializer::codec() const</db:title>
<db:para>Returns the codec being used by the serializer for encoding its XML output.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlserializer.xml#setCodec">setCodec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="comment">
<db:title>[override virtual] void QXmlSerializer::comment(const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractxmlreceiver.xml#comment" role="function">QAbstractXmlReceiver::comment(const QString &amp;value)</db:link>.</db:para>
</db:section>
<db:section xml:id="endDocument">
<db:title>[override virtual] void QXmlSerializer::endDocument()</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractxmlreceiver.xml#endDocument" role="function">QAbstractXmlReceiver::endDocument()</db:link>.</db:para>
</db:section>
<db:section xml:id="endElement">
<db:title>[override virtual] void QXmlSerializer::endElement()</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractxmlreceiver.xml#endElement" role="function">QAbstractXmlReceiver::endElement()</db:link>.</db:para>
</db:section>
<db:section xml:id="endOfSequence">
<db:title>[override virtual] void QXmlSerializer::endOfSequence()</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractxmlreceiver.xml#endOfSequence" role="function">QAbstractXmlReceiver::endOfSequence()</db:link>.</db:para>
</db:section>
<db:section xml:id="namespaceBinding">
<db:title>[override virtual] void QXmlSerializer::namespaceBinding(const QXmlName &amp;<db:emphasis>nb</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractxmlreceiver.xml#namespaceBinding" role="function">QAbstractXmlReceiver::namespaceBinding(const QXmlName &amp;name)</db:link>.</db:para>
</db:section>
<db:section xml:id="outputDevice">
<db:title>QIODevice *QXmlSerializer::outputDevice() const</db:title>
<db:para>Returns a pointer to the output device. There is no corresponding function to <db:emphasis>set</db:emphasis> the output device, because the output device must be passed to the constructor. The serializer does not take ownership of its IO device.</db:para>
</db:section>
<db:section xml:id="processingInstruction">
<db:title>[override virtual] void QXmlSerializer::processingInstruction(const QXmlName &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractxmlreceiver.xml#processingInstruction" role="function">QAbstractXmlReceiver::processingInstruction(const QXmlName &amp;target, const QString &amp;value)</db:link>.</db:para>
</db:section>
<db:section xml:id="setCodec">
<db:title>void QXmlSerializer::setCodec(const QTextCodec *<db:emphasis>outputCodec</db:emphasis>)</db:title>
<db:para>Sets the codec the serializer will use for encoding its XML output. The output codec is set to <db:code role="parameter">outputCodec</db:code>. By default, the output codec is set to the one for <db:code>UTF-8</db:code>. The serializer does not take ownership of the codec.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlserializer.xml#codec">codec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startDocument">
<db:title>[override virtual] void QXmlSerializer::startDocument()</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractxmlreceiver.xml#startDocument" role="function">QAbstractXmlReceiver::startDocument()</db:link>.</db:para>
</db:section>
<db:section xml:id="startElement">
<db:title>[override virtual] void QXmlSerializer::startElement(const QXmlName &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractxmlreceiver.xml#startElement" role="function">QAbstractXmlReceiver::startElement(const QXmlName &amp;name)</db:link>.</db:para>
</db:section>
<db:section xml:id="startOfSequence">
<db:title>[override virtual] void QXmlSerializer::startOfSequence()</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractxmlreceiver.xml#startOfSequence" role="function">QAbstractXmlReceiver::startOfSequence()</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
