<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Introduction to QDoc</db:title>
<db:productname>QDoc</db:productname>
<db:titleabbrev>QDoc Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qdoc-index.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="QDoc Manual"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="27-qdoc-commands-alphabetical.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Command Index"/></db:extendedlink>
<db:abstract>
<db:para>QDoc Manual.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>QDoc Manual</db:para>
<db:para>QDoc is a tool used by Qt Developers to generate documentation for software projects. It works by extracting <db:emphasis>qdoc comments</db:emphasis> from project source files and then formatting these comments as HTML pages or DITA XML documents, etc. QDoc finds qdoc comments in <db:code>.cpp</db:code> files and in <db:code>.qdoc</db:code> files. QDoc does not look for qdoc comments in <db:code>.h</db:code> files. A qdoc comment always begins with an exclamation mark <db:emphasis role="bold">!</db:emphasis> e.g.:</db:para>
<db:programlisting language="cpp">    / *!
        \class QObject
        \brief The QObject class is the base class of all Qt objects.

        \ingroup objectmodel

        \reentrant

        QObject is the heart of the Qt \l{Object Model}. The
        central feature in this model is a very powerful mechanism
        for seamless object communication called \l{signals and
        slots}. You can connect a signal to a slot with connect()
        and destroy the connection with disconnect(). To avoid
        never ending notification loops you can temporarily block
        signals with blockSignals(). The protected functions
        connectNotify() and disconnectNotify() make it possible to
        track connections.

        QObjects organize themselves in \l {Object Trees &amp;
        Ownership} {object trees}. When you create a QObject with
        another object as parent, the object will automatically
        add itself to the parent's children() list. The parent
        takes ownership of the object; i.e., it will automatically
        delete its children in its destructor. You can look for an
        object by name and optionally type using findChild() or
        findChildren().

        Every object has an objectName() and its class name can be
        found via the corresponding metaObject() (see
        QMetaObject::className()).  You can determine whether the
        object's class inherits another class in the QObject
        inheritance hierarchy by using the inherits() function.

    ....
* /
</db:programlisting>
<db:para>From the qdoc comment above, QDoc generates the now famous HTML page <db:link xlink:href="http://qt-project.org/doc/qt-5.0/qtcore/qobject.html#details">QObject Class Reference</db:link>.</db:para>
<db:para>This manual explains how to use the QDoc commands in qdoc comments to embed good documentation in your source files. It also explains how to make a <db:link xlink:href="21-0-qdoc-configuration.xml">QDoc configuration file</db:link>, which you will pass to QDoc on the command line.</db:para>
<db:section xml:id="running-qdoc">
<db:title>Running QDoc</db:title>
<db:para>The current name of the QDoc program is <db:code>qdoc</db:code>. To run qdoc from the command line, give it the name of a configuration file:</db:para>
<db:blockquote><db:para><db:code>$ ../../bin/qdoc ./config.qdocconf</db:code></db:para>
</db:blockquote>
<db:para>QDoc recognizes the <db:code>.qdocconf</db:code> suffix as a <db:link xlink:href="21-0-qdoc-configuration.xml">QDoc configuration file</db:link>. The configuration file is where you tell QDoc where to find the project source files, header files, and <db:code>.qdoc</db:code> files. It is also where you tell QDoc what kind of output to generate (HTML, DITA XML,...), and where to put the generated documentation. The configuration file also contains other information for QDoc.</db:para>
<db:para>See <db:link xlink:href="21-0-qdoc-configuration.xml">The QDoc Configuration File</db:link> for a instructions on how to build a QDoc configuration file.</db:para>
</db:section>
<db:section xml:id="how-qdoc-works">
<db:title>How QDoc Works</db:title>
<db:para>QDoc begins by reading the configuration file you specified on the command line. It stores all the variables from the configuration file for later use. One of the first variables it uses is <db:code>outputformats</db:code>. This variable tells QDoc which output generators it will run. The default value is <db:emphasis>HTML</db:emphasis>, so if you don't set <db:code>outputformats</db:code> in your configuration file, QDoc will generate HTML output. That's usually what you will want anyway, but you can also specify <db:emphasis>DITAXML</db:emphasis> to get DITA XML output instead.</db:para>
<db:para>Next, QDoc uses the values of the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#headerdirs">headerdirs</db:link> variable and/or the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#headers">headers</db:link> variable to find and parse all the header files for your project. QDoc does <db:emphasis>not</db:emphasis> scan header files for qdoc comments. It parses the header files to build a master tree of all the items that should be documented (i.e. the items that QDoc should find qdoc comments for).</db:para>
<db:para>After parsing all the header files and building the master tree of items to be documented, QDoc uses the value of the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#sourcedirs">sourcedirs</db:link> variable and/or the value of the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#sources">sources</db:link> variable to find and parse all the <db:code>.cpp</db:code> and <db:code>.qdoc</db:code> files for your project. These are the files QDoc scans for <db:emphasis>qdoc comments</db:emphasis>. Remember that a qdoc comment begins with an exclamation mark, i.e. <db:emphasis role="bold">/*!</db:emphasis> .</db:para>
<db:para>For each qdoc comment it finds, it searches the master tree for the item where the documentation belongs. The it interprets the qdoc commands in the comment and stores the interpreted commands and the comment text in the tree node for the item.</db:para>
<db:para>Finally, QDoc traverses the master tree. For each node, if the node has stored documentation, QDoc calls the output generator specified by the <db:code>outputformats</db:code> variable to format and write the documentation in the directory specified in the configuration file in the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#outputdir">outputdir</db:link> variable.</db:para>
</db:section>
<db:section xml:id="command-types">
<db:title>Command Types</db:title>
<db:para>QDoc interprets three types of commands:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="13-qdoc-commands-topics.xml">Topic Commands</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="14-qdoc-commands-contextcommands.xml">Context Commands</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="03-qdoc-commands-markup.xml">Markup Commands</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Topic commands identify the element you are documenting, e.g. a C++ class, function, or type, an example, or an extra page of text that doesn't map to an underlying C++ element.</db:para>
<db:para>Context commands tell QDoc how the element being documented relates to other documented elements, e.g. next and previous page links or inclusion in page groups or library modules. Context commands can also provide information about the documented element that QDoc can't get from the source files, e.g. whether the element is thread-safe, an overloaded or reimplemented function, or that it has been deprecated.</db:para>
<db:para>Markup commands tell QDoc how text and image elements in the document should be rendered, or about the document's outline structure.</db:para>
</db:section>
</db:article>
