<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QAbstractListModel Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractlistmodel.xml">QAbstractListModel</db:link> class provides an abstract model that can be subclassed to create one-dimensional list models.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractListModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractitemmodel.xml" xlink:role="class">QAbstractItemModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qstringlistmodel.xml" xlink:role="class">QStringListModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractListModel is part of <db:simplelist><db:member>model-view</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qabstractlistmodel.xml">QAbstractListModel</db:link> provides a standard interface for models that represent their data as a simple non-hierarchical sequence of items. It is not used directly, but must be subclassed.</db:para>
<db:para>Since the model provides a more specialized interface than <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>, it is not suitable for use with tree views; you will need to subclass <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> if you want to provide a model for that purpose. If you need to use a number of list models to manage data, it may be more appropriate to subclass <db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link> class instead.</db:para>
<db:para>Simple models can be created by subclassing this class and implementing the minimum number of required functions. For example, we could implement a simple read-only <db:link xlink:href="qstringlist.xml">QStringList</db:link>-based model that provides a list of strings to a QListView widget. In such a case, we only need to implement the <db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>() function to return the number of items in the list, and the <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>() function to retrieve items from the list.</db:para>
<db:para>Since the model represents a one-dimensional structure, the <db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>() function returns the total number of items in the model. The <db:link xlink:href="qabstractitemmodel.xml#columnCount">columnCount</db:link>() function is implemented for interoperability with all kinds of views, but by default informs views that the model contains only one column.</db:para>
<db:section xml:id="subclassing">
<db:title>Subclassing</db:title>
<db:para>When subclassing <db:link xlink:href="qabstractlistmodel.xml">QAbstractListModel</db:link>, you must provide implementations of the <db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>() functions. Well behaved models also provide a <db:link xlink:href="qabstractitemmodel.xml#headerData">headerData</db:link>() implementation.</db:para>
<db:para>If your model is used within QML and requires roles other than the default ones provided by the <db:link xlink:href="qabstractitemmodel.xml#roleNames">roleNames</db:link>() function, you must override it.</db:para>
<db:para>For editable list models, you must also provide an implementation of <db:link xlink:href="qabstractitemmodel.xml#setData">setData</db:link>(), implement the <db:link xlink:href="qabstractlistmodel.xml#flags">flags</db:link>() function so that it returns a value containing <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemIsEditable</db:link>.</db:para>
<db:para>Note that <db:link xlink:href="qabstractlistmodel.xml">QAbstractListModel</db:link> provides a default implementation of <db:link xlink:href="qabstractitemmodel.xml#columnCount">columnCount</db:link>() that informs views that there is only a single column of items in this model.</db:para>
<db:para>Models that provide interfaces to resizable list-like data structures can provide implementations of <db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>(). When implementing these functions, it is important to call the appropriate functions so that all connected views are aware of any changes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>An <db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>() implementation must call <db:link xlink:href="qabstractitemmodel.xml#beginInsertRows">beginInsertRows</db:link>() <db:emphasis>before</db:emphasis> inserting new rows into the data structure, and it must call <db:link xlink:href="qabstractitemmodel.xml#endInsertRows">endInsertRows</db:link>() <db:emphasis>immediately afterwards</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para>A <db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>() implementation must call <db:link xlink:href="qabstractitemmodel.xml#beginRemoveRows">beginRemoveRows</db:link>() <db:emphasis>before</db:emphasis> the rows are removed from the data structure, and it must call <db:link xlink:href="qabstractitemmodel.xml#endRemoveRows">endRemoveRows</db:link>() <db:emphasis>immediately afterwards</db:emphasis>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Some general guidelines for subclassing models are available in the <db:link xlink:href="">Model Subclassing Reference</db:link>.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Model Classes</db:link></db:member>
<db:member><db:link xlink:href="">Model Subclassing Reference</db:link></db:member>
<db:member>QAbstractItemView</db:member>
<db:member><db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link></db:member>
<db:member><db:link xlink:href="">Item Views Puzzle Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractListModel">
<db:title>[explicit] QAbstractListModel::QAbstractListModel(QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs an abstract list model with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractListModel">
<db:title>[virtual noexcept] QAbstractListModel::~QAbstractListModel()</db:title>
<db:para>Destroys the abstract list model.</db:para>
</db:section>
<db:section xml:id="dropMimeData">
<db:title>[override virtual] bool QAbstractListModel::dropMimeData(const QMimeData *<db:emphasis>data</db:emphasis>, Qt::DropAction <db:emphasis>action</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#dropMimeData" role="function">QAbstractItemModel::dropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="flags">
<db:title>[override virtual] Qt::ItemFlags QAbstractListModel::flags(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#flags" role="function">QAbstractItemModel::flags(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="index">
<db:title>[override virtual] QModelIndex QAbstractListModel::index(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis> = 0, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#index" role="function">QAbstractItemModel::index(int row, int column, const QModelIndex &amp;parent) const</db:link>.</db:para>
<db:para>Returns the index of the data in <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> with <db:code role="parameter">parent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#parent">parent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
