<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>XmlListModelRole QML Type</db:title>
<db:productname>QtQmlXmlListModel</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML XmlListModel Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>For specifying a role to an <db:link xlink:href="qml-qtqml-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQml.XmlListModel</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmltypes.xml">Qt QML</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="attributeName-prop">
<db:title>attributeName : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>attributeName</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The attribute of the XML element that will be used to read the data. The XML element is specified by <db:link xlink:href="qml-qtqml-xmllistmodel-xmllistmodelrole.xml#elementName-prop">elementName</db:link> property.</db:para>
<db:para>For example, the following model has a role named &quot;title&quot;, which reads the data from the XML element <db:code>&lt;title&gt;</db:code>. It also has another role named &quot;timestamp&quot;, which uses the same XML element <db:code>&lt;title&gt;</db:code>, but reads its &quot;created&quot; attribute to extract the actual value.</db:para>
<db:programlisting language="qml">XmlListModel {
    id: xmlModel
    source: &quot;file.xml&quot;
    query: &quot;/documents/document&quot;
    XmlListModelRole { name: &quot;title&quot;; elementName: &quot;title&quot; }
    XmlListModelRole {
        name: &quot;timestamp&quot;
        elementName: &quot;title&quot;
        attributeName: &quot;created&quot;
    }
}

ListView {
    anchors.fill: parent
    model: xmlModel
    delegate: Text { text: title + &quot; created on &quot; + timestamp }
}
</db:programlisting>
<db:para>When the attributeName is specified, the <db:link xlink:href="qml-qtqml-xmllistmodel-xmllistmodelrole.xml#elementName-prop">elementName</db:link> can be left empty. In this case the attribute of the top level XML element of the query will be read.</db:para>
<db:para>For example, if you have the following xml document:</db:para>
<db:programlisting language="cpp">&amp;lt;documents&amp;gt;
    &amp;lt;document title=&quot;Title1&quot;/&amp;gt;
    &amp;lt;document title=&quot;Title2&quot;/&amp;gt;
&amp;lt;/documents&amp;gt;
</db:programlisting>
<db:para>To extract the document titles you need the following model:</db:para>
<db:programlisting language="qml">XmlListModel {
    id: xmlModel
    source: &quot;file.xml&quot;
    query: &quot;/documents/document&quot;
    XmlListModelRole {
        name: &quot;title&quot;
        elementName: &quot;&quot;
        attributeName: &quot;title&quot;
    }
}
</db:programlisting>
<db:para>If you do not need to parse any attributes for the specified XML element, simply leave this property blank.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-xmllistmodel-xmllistmodelrole.xml#elementName-prop">elementName</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="elementName-prop">
<db:title>elementName : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>elementName</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The name of the XML element, or a path to the XML element, that will be used to read the data. The element must actually contain text.</db:para>
<db:para>Optionally the <db:link xlink:href="qml-qtqml-xmllistmodel-xmllistmodelrole.xml#attributeName-prop">attributeName</db:link> property can be specified to extract the data.</db:para>
<db:para>For example, the following model has a role named &quot;title&quot;, which reads the data from the XML element <db:code>&lt;title&gt;</db:code>. It also has another role named &quot;timestamp&quot;, which uses the same XML element <db:code>&lt;title&gt;</db:code>, but reads its &quot;created&quot; attribute to extract the actual value.</db:para>
<db:programlisting language="qml">XmlListModel {
    id: xmlModel
    source: &quot;file.xml&quot;
    query: &quot;/documents/document&quot;
    XmlListModelRole { name: &quot;title&quot;; elementName: &quot;title&quot; }
    XmlListModelRole {
        name: &quot;timestamp&quot;
        elementName: &quot;title&quot;
        attributeName: &quot;created&quot;
    }
}

ListView {
    anchors.fill: parent
    model: xmlModel
    delegate: Text { text: title + &quot; created on &quot; + timestamp }
}
</db:programlisting>
<db:para>When the <db:link xlink:href="qml-qtqml-xmllistmodel-xmllistmodelrole.xml#attributeName-prop">attributeName</db:link> is specified, the elementName can be left empty. In this case the attribute of the top level XML element of the query will be read.</db:para>
<db:para>For example, if you have the following xml document:</db:para>
<db:programlisting language="cpp">&amp;lt;documents&amp;gt;
    &amp;lt;document title=&quot;Title1&quot;/&amp;gt;
    &amp;lt;document title=&quot;Title2&quot;/&amp;gt;
&amp;lt;/documents&amp;gt;
</db:programlisting>
<db:para>To extract the document titles you need the following model:</db:para>
<db:programlisting language="qml">XmlListModel {
    id: xmlModel
    source: &quot;file.xml&quot;
    query: &quot;/documents/document&quot;
    XmlListModelRole {
        name: &quot;title&quot;
        elementName: &quot;&quot;
        attributeName: &quot;title&quot;
    }
}
</db:programlisting>
<db:para>The elementName property can actually contain a path to the nested xml element. All the elements in the path must be joined with the <db:code>'/'</db:code> character.</db:para>
<db:para>For example, if you have the following xml document:</db:para>
<db:programlisting language="cpp">&amp;lt;documents&amp;gt;
    &amp;lt;document&amp;gt;
        &amp;lt;title&amp;gt;Title1&amp;lt;/title&amp;gt;
        &amp;lt;info&amp;gt;
            &amp;lt;num_pages&amp;gt;10&amp;lt;/num_pages&amp;gt;
        &amp;lt;/info&amp;gt;
    &amp;lt;/document&amp;gt;
    &amp;lt;document&amp;gt;
        &amp;lt;title&amp;gt;Title2&amp;lt;/title&amp;gt;
        &amp;lt;info&amp;gt;
            &amp;lt;num_pages&amp;gt;20&amp;lt;/num_pages&amp;gt;
        &amp;lt;/info&amp;gt;
    &amp;lt;/document&amp;gt;
&amp;lt;/documents&amp;gt;
</db:programlisting>
<db:para>You can extract the number of pages with the following role:</db:para>
<db:programlisting language="qml">XmlListModel {
    id: xmlModel
    source: &quot;file.xml&quot;
    query: &quot;/documents/document&quot;
    // ...
    XmlListModelRole {
        name: &quot;pages&quot;
        elementName: &quot;info/num_pages&quot;
    }
}
</db:programlisting>
<db:note>
<db:para>The path to the element must not start or end with <db:code>'/'</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-xmllistmodel-xmllistmodelrole.xml#attributeName-prop">attributeName</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name-prop">
<db:title>name : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>name</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The name for the role. This name is used to access the model data for this role.</db:para>
<db:para>For example, the following model has a role named &quot;title&quot;, which can be accessed from the view's delegate:</db:para>
<db:programlisting language="qml">XmlListModel {
    id: xmlModel
    source: &quot;file.xml&quot;
    query: &quot;/documents/document&quot;
    XmlListModelRole { name: &quot;title&quot;; elementName: &quot;title&quot; }
}
</db:programlisting>
<db:programlisting language="qml">ListView {
    model: xmlModel
    delegate: Text { text: title }
}
</db:programlisting>
</db:section>
</db:section>
</db:article>
