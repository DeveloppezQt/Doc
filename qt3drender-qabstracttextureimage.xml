<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractTextureImage Class</db:title>
<db:subtitle>Qt3DRender::QAbstractTextureImage</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Encapsulates the necessary information to create an OpenGL texture image.</db:para>
<db:para>This class was introduced in Qt 5.5.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractTextureImage</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS 3drender)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::3drender)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3drender</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-qpaintedtextureimage.xml" xlink:role="class">Qt3DRender::QPaintedTextureImage</db:link> and <db:link xlink:href="qt3drender-qtextureimage.xml" xlink:role="class">Qt3DRender::QTextureImage</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qt3d-render-abstracttextureimage.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3dcore-qnode.xml" xlink:role="class">Qt3DCore::QNode</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-qpaintedtextureimage.xml" xlink:role="class">Qt3DRender::QPaintedTextureImage</db:link> and <db:link xlink:href="qt3drender-qtextureimage.xml" xlink:role="class">Qt3DRender::QTextureImage</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qt3drender-qabstracttextureimage.xml">QAbstractTextureImage</db:link> should be used as the means of providing image data to a <db:link xlink:href="qt3drender-qabstracttexture.xml">QAbstractTexture</db:link>. It contains the necessary information: mipmap level, layer, cube face load at the proper place data into an OpenGL texture.</db:para>
<db:para>The actual data is provided through a <db:link xlink:href="qt3drender-qtextureimagedatagenerator.xml">QTextureImageDataGenerator</db:link> that will be executed by Aspect jobs in the backend. <db:link xlink:href="qt3drender-qabstracttextureimage.xml">QAbstractTextureImage</db:link> should be subclassed to provide a functor and eventual additional properties needed by the functor to load actual data.</db:para>
<db:note>
<db:para>: <db:link xlink:href="qt3drender-qabstracttextureimage.xml">QAbstractTextureImage</db:link> should never be shared. Expect crashes, undefined behavior at best if this rule is not respected.</db:para>
</db:note>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="face-prop">
<db:title>face : Qt3DRender::QAbstractTexture::CubeMapFace</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt3DRender::QAbstractTexture::CubeMapFace</db:type>
<db:varname>face</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">face</db:synopsisinfo>
<db:synopsisinfo role="setter">setFace</db:synopsisinfo>
<db:synopsisinfo role="notifier">faceChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the cube map face of the texture image.</db:para>
<db:note>
<db:para>The cube map face has a meaning only for <db:link xlink:href="qt3drender-qabstracttexture.xml#Target-enum">TargetCubeMap</db:link> and <db:link xlink:href="qt3drender-qabstracttexture.xml#Target-enum">TargetCubeMapArray</db:link>.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt3drender-qabstracttexture.xml#CubeMapFace-enum">QAbstractTexture::CubeMapFace</db:link></db:type> <db:emphasis role="bold">face</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qabstracttextureimage.xml#setFace">setFace</db:link></db:emphasis>(<db:type><db:link xlink:href="qt3drender-qabstracttexture.xml#CubeMapFace-enum">QAbstractTexture::CubeMapFace</db:link></db:type> <db:emphasis>face</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">faceChanged</db:emphasis>(<db:type><db:link xlink:href="qt3drender-qabstracttexture.xml#CubeMapFace-enum">QAbstractTexture::CubeMapFace</db:link></db:type> <db:emphasis>face</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="layer-prop">
<db:title>layer : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>layer</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">layer</db:synopsisinfo>
<db:synopsisinfo role="setter">setLayer</db:synopsisinfo>
<db:synopsisinfo role="notifier">layerChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the layer of the texture image.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">layer</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qabstracttextureimage.xml#setLayer">setLayer</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>layer</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">layerChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>layer</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="mipLevel-prop">
<db:title>mipLevel : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>mipLevel</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">mipLevel</db:synopsisinfo>
<db:synopsisinfo role="setter">setMipLevel</db:synopsisinfo>
<db:synopsisinfo role="notifier">mipLevelChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the mipmap level of the texture image.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">mipLevel</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qabstracttextureimage.xml#setMipLevel">setMipLevel</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>level</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">mipLevelChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>mipLevel</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractTextureImage">
<db:title>[explicit] QAbstractTextureImage::QAbstractTextureImage(Qt3DCore::QNode *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QAbstractTextureImage</db:methodname>
<db:methodparam>
<db:type>Qt3DCore::QNode *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractTextureImage(Qt3DCore::QNode *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qt3drender-qabstracttextureimage.xml">QAbstractTextureImage</db:link> instance with <db:code role="parameter">parent</db:code> as parent.</db:para>
</db:section>
<db:section xml:id="dataGenerator">
<db:title>[pure virtual protected] Qt3DRender::QTextureImageDataGeneratorPtr QAbstractTextureImage::dataGenerator() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>Qt3DRender::QTextureImageDataGeneratorPtr</db:type>
<db:methodname>dataGenerator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt3DRender::QTextureImageDataGeneratorPtr dataGenerator() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implement this method to return the QTextureImageDataGeneratorPtr instance, which will provide the data for the texture image.</db:para>
</db:section>
<db:section xml:id="notifyDataGeneratorChanged">
<db:title>[protected] void QAbstractTextureImage::notifyDataGeneratorChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>notifyDataGeneratorChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void notifyDataGeneratorChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Triggers an update of the data generator that is sent to the backend.</db:para>
</db:section>
<db:section xml:id="setFace">
<db:title>void QAbstractTextureImage::setFace(QAbstractTexture::CubeMapFace <db:emphasis>face</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFace</db:methodname>
<db:methodparam>
<db:type>QAbstractTexture::CubeMapFace</db:type>
<db:parameter>face</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">face</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFace(QAbstractTexture::CubeMapFace face)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the texture image face to <db:code role="parameter">face</db:code>. <db:emphasis>face</db:emphasis></db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qt3drender-qabstracttextureimage.xml#face-prop">face</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qabstracttextureimage.xml#face-prop">face</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLayer">
<db:title>void QAbstractTextureImage::setLayer(int <db:emphasis>layer</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLayer</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>layer</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">layer</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLayer(int layer)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the layer of a texture to <db:code role="parameter">layer</db:code>. <db:emphasis>layer</db:emphasis></db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qt3drender-qabstracttextureimage.xml#layer-prop">layer</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qabstracttextureimage.xml#layer-prop">layer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMipLevel">
<db:title>void QAbstractTextureImage::setMipLevel(int <db:emphasis>level</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMipLevel</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>level</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">mipLevel</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMipLevel(int level)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the mip level of a texture to <db:code role="parameter">level</db:code>. <db:emphasis>level</db:emphasis></db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qt3drender-qabstracttextureimage.xml#mipLevel-prop">mipLevel</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qabstracttextureimage.xml#mipLevel-prop">mipLevel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
