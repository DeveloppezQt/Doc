<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRestReply Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qrestreply.xml">QRestReply</db:link> is a convenience wrapper for <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>.</db:para>
<db:para>This class was introduced in Qt 6.7.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRestReply</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QRestReply is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qrestreply.xml">QRestReply</db:link> wraps a <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> and provides convenience methods for data and status handling. The methods provide convenience for typical RESTful client applications.</db:para>
<db:para><db:link xlink:href="qrestreply.xml">QRestReply</db:link> doesn't take ownership of the wrapped <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>, and the lifetime and ownership of the reply is as defined by <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> documentation.</db:para>
<db:para><db:link xlink:href="qrestreply.xml">QRestReply</db:link> object is not copyable, but is movable.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrestaccessmanager.xml">QRestAccessManager</db:link></db:member>
<db:member><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link></db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#setAutoDeleteReplies">QNetworkAccessManager::setAutoDeleteReplies</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRestReply">
<db:title>[explicit] QRestReply::QRestReply(QNetworkReply *<db:emphasis>reply</db:emphasis>)</db:title>
<db:para>Creates a <db:link xlink:href="qrestreply.xml">QRestReply</db:link> and initializes the wrapped <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> to <db:code role="parameter">reply</db:code>.</db:para>
</db:section>
<db:section xml:id="QRestReply-1">
<db:title>[noexcept] QRestReply::QRestReply(QRestReply &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-constructs the reply from <db:code role="parameter">other</db:code>.</db:para>
<db:note>
<db:para>The moved-from object <db:code role="parameter">other</db:code> is placed in a partially-formed state, in which the only valid operations are destruction and assignment of a new value.</db:para>
</db:note>
</db:section>
<db:section xml:id="dtor.QRestReply">
<db:title>[noexcept] QRestReply::~QRestReply()</db:title>
<db:para>Destroys this <db:link xlink:href="qrestreply.xml">QRestReply</db:link> object.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>QNetworkReply::NetworkError QRestReply::error() const</db:title>
<db:para>Returns the last error, if any. The errors include errors such as network and protocol errors, but exclude cases when the server successfully responded with an HTTP status.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrestreply.xml#httpStatus">httpStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qrestreply.xml#isSuccess">isSuccess</db:link>()</db:member>
<db:member><db:link xlink:href="qrestreply.xml#hasError">hasError</db:link>()</db:member>
<db:member><db:link xlink:href="qrestreply.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QRestReply::errorString() const</db:title>
<db:para>Returns a human-readable description of the last network error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrestreply.xml#httpStatus">httpStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qrestreply.xml#isSuccess">isSuccess</db:link>()</db:member>
<db:member><db:link xlink:href="qrestreply.xml#hasError">hasError</db:link>()</db:member>
<db:member><db:link xlink:href="qrestreply.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasError">
<db:title>bool QRestReply::hasError() const</db:title>
<db:para>Returns whether an error has occurred. This includes errors such as network and protocol errors, but excludes cases where the server successfully responded with an HTTP error status (for example 500 Internal Server Error). Use <db:link xlink:href="qrestreply.xml#httpStatus">httpStatus</db:link>() or <db:link xlink:href="qrestreply.xml#isHttpStatusSuccess">isHttpStatusSuccess</db:link>() to get the HTTP status information.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrestreply.xml#httpStatus">httpStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qrestreply.xml#isSuccess">isSuccess</db:link>()</db:member>
<db:member><db:link xlink:href="qrestreply.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qrestreply.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="httpStatus">
<db:title>int QRestReply::httpStatus() const</db:title>
<db:para>Returns the HTTP status received in the server response. The value is <db:emphasis>0</db:emphasis> if not available (the status line has not been received, yet).</db:para>
<db:note>
<db:para>The HTTP status is reported as indicated by the received HTTP response. An <db:link xlink:href="qrestreply.xml#error">error</db:link>() may occur after receiving the status, for instance due to network disconnection while receiving a long response. These potential subsequent errors are not represented by the reported HTTP status.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrestreply.xml#isSuccess">isSuccess</db:link>()</db:member>
<db:member><db:link xlink:href="qrestreply.xml#hasError">hasError</db:link>()</db:member>
<db:member><db:link xlink:href="qrestreply.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isHttpStatusSuccess">
<db:title>bool QRestReply::isHttpStatusSuccess() const</db:title>
<db:para>Returns whether the HTTP status is between 200..299.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrestreply.xml#isSuccess">isSuccess</db:link>()</db:member>
<db:member><db:link xlink:href="qrestreply.xml#httpStatus">httpStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qrestreply.xml#hasError">hasError</db:link>()</db:member>
<db:member><db:link xlink:href="qrestreply.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSuccess">
<db:title>bool QRestReply::isSuccess() const</db:title>
<db:para>Returns whether the HTTP status is between 200..299 and no further errors have occurred while receiving the response (for example, abrupt disconnection while receiving the body data). This function is a convenient way to check whether the response is considered successful.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrestreply.xml#httpStatus">httpStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qrestreply.xml#hasError">hasError</db:link>()</db:member>
<db:member><db:link xlink:href="qrestreply.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="networkReply">
<db:title>QNetworkReply *QRestReply::networkReply() const</db:title>
<db:para>Returns a pointer to the underlying <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> wrapped by this object.</db:para>
</db:section>
<db:section xml:id="readBody">
<db:title>QByteArray QRestReply::readBody()</db:title>
<db:para>Returns the received data as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>Calling this function consumes the data received so far, and any further calls to get response data will return empty until further data has been received.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrestreply.xml#readJson">readJson</db:link>()</db:member>
<db:member><db:link xlink:href="qrestreply.xml#readText">readText</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#bytesAvailable">QNetworkReply::bytesAvailable</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#readyRead">QNetworkReply::readyRead</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readJson">
<db:title>std::optional&lt;QJsonDocument&gt; QRestReply::readJson(QJsonParseError *<db:emphasis>error</db:emphasis> = nullptr)</db:title>
<db:para>Returns the received data as a <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link>.</db:para>
<db:para>The returned value is wrapped in std::optional. If the conversion from the received data fails (empty data or JSON parsing error), std::nullopt is returned, and <db:code role="parameter">error</db:code> is filled with details.</db:para>
<db:para>Calling this function consumes the received data, and any further calls to get response data will return empty.</db:para>
<db:para>This function returns std::nullopt and will not consume any data if the reply is not finished. If <db:code role="parameter">error</db:code> is passed, it will be set to <db:link xlink:href="qjsonparseerror.xml#ParseError-enum">QJsonParseError::NoError</db:link> to distinguish this case from an actual error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrestreply.xml#readBody">readBody</db:link>()</db:member>
<db:member><db:link xlink:href="qrestreply.xml#readText">readText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readText">
<db:title>QString QRestReply::readText()</db:title>
<db:para>Returns the received data as a <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:para>The received data is decoded into a <db:link xlink:href="qstring.xml">QString</db:link> (UTF-16). If available, the decoding uses the <db:emphasis>Content-Type</db:emphasis> header's <db:emphasis>charset</db:emphasis> parameter to determine the source encoding. If the encoding information is not available or not supported by <db:link xlink:href="qstringconverter.xml">QStringConverter</db:link>, UTF-8 is used by default.</db:para>
<db:para>Calling this function consumes the data received so far. Returns a default constructed value if no new data is available, or if the decoding is not supported by <db:link xlink:href="qstringconverter.xml">QStringConverter</db:link>, or if the decoding has errors (for example invalid characters).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrestreply.xml#readJson">readJson</db:link>()</db:member>
<db:member><db:link xlink:href="qrestreply.xml#readBody">readBody</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#readyRead">QNetworkReply::readyRead</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept] QRestReply &amp;QRestReply::operator=(QRestReply &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> and returns a reference to this reply.</db:para>
<db:note>
<db:para>The moved-from object <db:code role="parameter">other</db:code> is placed in a partially-formed state, in which the only valid operations are destruction and assignment of a new value.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QRestReply &amp;<db:emphasis>reply</db:emphasis>)</db:title>
<db:para>Writes the <db:code role="parameter">reply</db:code> into the <db:code role="parameter">debug</db:code> object for debugging purposes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
