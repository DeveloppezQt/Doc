<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QT_ANDROID_MULTI_ABI_FORWARD_VARS</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Allows to share CMake variables in multi-ABI builds.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="cmake-variable-qt-android-multi-abi-forward-vars"/>
<db:para>Allows to share CMake variables in multi-ABI builds</db:para>
<db:para>This variable was introduced in Qt 6.4.2.</db:para>
<db:note>
<db:para>This variable is in technology preview and may change in future releases.</db:para>
</db:note>
<db:note>
<db:para>This variable is used only if targeting the Android platform.</db:para>
</db:note>
<db:para>The QT_ANDROID_MULTI_ABI_FORWARD_VARS variable allows specifying the list of CMake variables that need to be forwarded from the main ABI project to ABI-specific subprojects. Due to the specifics of the Multi-ABI project build process, there is no generic way to forward the CMake cache variables that are specified either in the command line or in another similar way.</db:para>
<db:para>A typical use case for the variable is propagating CMake cache variables specified in the command line. For example, a project has two variables PROJECT_WIDE_VARIABLE1 and PROJECT_WIDE_VARIABLE2 that affect the project configuration:</db:para>
<db:programlisting language="cpp" role="bad">cmake_minimum_required(VERSION 3.18)

project(MyProject LANGUAGES CXX)

find_package(Qt6 REQUIRED COMPONENTS Core)

qt_add_executable(MyApp main.cpp)

if(PROJECT_WIDE_VARIABLE1)
    target_sources(MyApp PRIVATE sourcefile1.cpp)
endif()
if(PROJECT_WIDE_VARIABLE2)
    target_sources(MyApp PRIVATE sourcefile2.cpp)
endif()
</db:programlisting>
<db:para>The above contents of CMakeLists.txt enable you to control how MyApp is built by setting the corresponding CMake variables from the command line:</db:para>
<db:programlisting language="cpp" role="bad">qt-cmake -S&amp;lt;source directory&amp;gt; -B&amp;lt;build directory&amp;gt; \
    -DPROJECT_WIDE_VARIABLE1=ON \
    -DPROJECT_WIDE_VARIABLE2=ON \
    -DQT_ANDROID_MULTI_ABI_FORWARD_VARS=&quot;PROJECT_WIDE_VARIABLE1;PROJECT_WIDE_VARIABLE2&quot;
</db:programlisting>
<db:para>When configuring the application for desktop, PROJECT_WIDE_VARIABLE1 and PROJECT_WIDE_VARIABLE2 are visible in CMake listings and scripts as global cache variables. This doesn't work for Android Multi-ABI builds because ABI-specific subprojects do not inherit the cache variables from the main-ABI project. This issue can be solved by passing the list of required variables to the QT_ANDROID_MULTI_ABI_FORWARD_VARS variable, so both PROJECT_WIDE_VARIABLE1 and PROJECT_WIDE_VARIABLE2 values will be propagated to the ABI-specific builds.</db:para>
<db:para>The variable can be also defined in the project's CMakeLists.txt:</db:para>
<db:programlisting language="cpp" role="bad">...
qt_add_executable(MyApp main.cpp)
...
if(ANDROID)
    set(QT_ANDROID_MULTI_ABI_FORWARD_VARS &quot;PROJECT_WIDE_VARIABLE1;PROJECT_WIDE_VARIABLE2&quot;)
endif()
...
</db:programlisting>
<db:para>Setting the variable in this way allows you to have a predefined set of variables that will always be forwarded to abi-specific projects.</db:para>
<db:note>
<db:para>The forwarding is done in the target finalizer, which is implicitly called when <db:link xlink:href="qt-add-executable.xml#qt6-add-executable">qt_add_executable()</db:link> is used. The finalization occurs automatically when using CMake 3.19 or later.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt-finalize-target.xml#qt6-finalize-target">qt_finalize_target()</db:link></db:member>
<db:member><db:link xlink:href="qt-add-executable.xml#qt6-add-executable">qt_add_executable()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
