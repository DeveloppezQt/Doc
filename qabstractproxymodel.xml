<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractProxyModel Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractproxymodel.xml">QAbstractProxyModel</db:link> class provides a base class for proxy item models that can do sorting, filtering or other data processing tasks.</db:para>
<db:para>This class was introduced in Qt 4.1.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractProxyModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractitemmodel.xml" xlink:role="class">QAbstractItemModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qidentityproxymodel.xml" xlink:role="class">QIdentityProxyModel</db:link> and <db:link xlink:href="qsortfilterproxymodel.xml" xlink:role="class">QSortFilterProxyModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractProxyModel is part of <db:simplelist><db:member>model-view</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class defines the standard interface that proxy models must use to be able to interoperate correctly with other model/view components. It is not supposed to be instantiated directly.</db:para>
<db:para>All standard proxy models are derived from the <db:link xlink:href="qabstractproxymodel.xml">QAbstractProxyModel</db:link> class. If you need to create a new proxy model class, it is usually better to subclass an existing class that provides the closest behavior to the one you want to provide.</db:para>
<db:para>Proxy models that filter or sort items of data from a source model should be created by using or subclassing <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link>.</db:para>
<db:para>To subclass <db:link xlink:href="qabstractproxymodel.xml">QAbstractProxyModel</db:link>, you need to implement <db:link xlink:href="qabstractproxymodel.xml#mapFromSource">mapFromSource</db:link>() and <db:link xlink:href="qabstractproxymodel.xml#mapToSource">mapToSource</db:link>(). The <db:link xlink:href="qabstractproxymodel.xml#mapSelectionFromSource">mapSelectionFromSource</db:link>() and <db:link xlink:href="qabstractproxymodel.xml#mapSelectionToSource">mapSelectionToSource</db:link>() functions only need to be reimplemented if you need a behavior different from the default behavior.</db:para>
<db:note>
<db:para>If the source model is deleted or no source model is specified, the proxy model operates on a empty placeholder model.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="sourceModel-prop">
<db:title>sourceModel : QAbstractItemModel*</db:title>
<db:para>This property holds the source model of this proxy model.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstractitemmodel.xml#QAbstractItemModel">QAbstractItemModel</db:link></db:type> *<db:emphasis role="bold"><db:link xlink:href="qabstractproxymodel.xml#sourceModel">sourceModel</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para>virtual <db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractproxymodel.xml#setSourceModel">setSourceModel</db:link></db:emphasis>(<db:type><db:link xlink:href="qabstractitemmodel.xml#QAbstractItemModel">QAbstractItemModel</db:link></db:type> *<db:emphasis>sourceModel</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">sourceModelChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractProxyModel">
<db:title>[explicit] QAbstractProxyModel::QAbstractProxyModel(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a proxy model with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractProxyModel">
<db:title>[virtual noexcept] QAbstractProxyModel::~QAbstractProxyModel()</db:title>
<db:para>Destroys the proxy model.</db:para>
</db:section>
<db:section xml:id="buddy">
<db:title>[override virtual] QModelIndex QAbstractProxyModel::buddy(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#buddy" role="function">QAbstractItemModel::buddy(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="canDropMimeData">
<db:title>[override virtual, since 5.4] bool QAbstractProxyModel::canDropMimeData(const QMimeData *<db:emphasis>data</db:emphasis>, Qt::DropAction <db:emphasis>action</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#canDropMimeData" role="function">QAbstractItemModel::canDropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent) const</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="canFetchMore">
<db:title>[override virtual] bool QAbstractProxyModel::canFetchMore(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#canFetchMore" role="function">QAbstractItemModel::canFetchMore(const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>[override virtual] QVariant QAbstractProxyModel::data(const QModelIndex &amp;<db:emphasis>proxyIndex</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#data" role="function">QAbstractItemModel::data(const QModelIndex &amp;index, int role) const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractproxymodel.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dropMimeData">
<db:title>[override virtual, since 5.4] bool QAbstractProxyModel::dropMimeData(const QMimeData *<db:emphasis>data</db:emphasis>, Qt::DropAction <db:emphasis>action</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#dropMimeData" role="function">QAbstractItemModel::dropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent)</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="fetchMore">
<db:title>[override virtual] void QAbstractProxyModel::fetchMore(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#fetchMore" role="function">QAbstractItemModel::fetchMore(const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="flags">
<db:title>[override virtual] Qt::ItemFlags QAbstractProxyModel::flags(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#flags" role="function">QAbstractItemModel::flags(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="hasChildren">
<db:title>[override virtual] bool QAbstractProxyModel::hasChildren(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#hasChildren" role="function">QAbstractItemModel::hasChildren(const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="headerData">
<db:title>[override virtual] QVariant QAbstractProxyModel::headerData(int <db:emphasis>section</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#headerData" role="function">QAbstractItemModel::headerData(int section, Qt::Orientation orientation, int role) const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractproxymodel.xml#setHeaderData">setHeaderData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemData">
<db:title>[override virtual] QMap&lt;int, QVariant&gt; QAbstractProxyModel::itemData(const QModelIndex &amp;<db:emphasis>proxyIndex</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#itemData" role="function">QAbstractItemModel::itemData(const QModelIndex &amp;index) const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractproxymodel.xml#setItemData">setItemData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromSource">
<db:title>[pure virtual] QModelIndex QAbstractProxyModel::mapFromSource(const QModelIndex &amp;<db:emphasis>sourceIndex</db:emphasis>) const</db:title>
<db:para>Reimplement this function to return the model index in the proxy model that corresponds to the <db:code role="parameter">sourceIndex</db:code> from the source model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractproxymodel.xml#mapToSource">mapToSource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapSelectionFromSource">
<db:title>[virtual] QItemSelection QAbstractProxyModel::mapSelectionFromSource(const QItemSelection &amp;<db:emphasis>sourceSelection</db:emphasis>) const</db:title>
<db:para>Returns a proxy selection mapped from the specified <db:code role="parameter">sourceSelection</db:code>.</db:para>
<db:para>Reimplement this method to map source selections to proxy selections.</db:para>
</db:section>
<db:section xml:id="mapSelectionToSource">
<db:title>[virtual] QItemSelection QAbstractProxyModel::mapSelectionToSource(const QItemSelection &amp;<db:emphasis>proxySelection</db:emphasis>) const</db:title>
<db:para>Returns a source selection mapped from the specified <db:code role="parameter">proxySelection</db:code>.</db:para>
<db:para>Reimplement this method to map proxy selections to source selections.</db:para>
</db:section>
<db:section xml:id="mapToSource">
<db:title>[pure virtual] QModelIndex QAbstractProxyModel::mapToSource(const QModelIndex &amp;<db:emphasis>proxyIndex</db:emphasis>) const</db:title>
<db:para>Reimplement this function to return the model index in the source model that corresponds to the <db:code role="parameter">proxyIndex</db:code> in the proxy model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractproxymodel.xml#mapFromSource">mapFromSource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mimeData">
<db:title>[override virtual] QMimeData *QAbstractProxyModel::mimeData(const QModelIndexList &amp;<db:emphasis>indexes</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#mimeData" role="function">QAbstractItemModel::mimeData(const QModelIndexList &amp;indexes) const</db:link>.</db:para>
</db:section>
<db:section xml:id="mimeTypes">
<db:title>[override virtual] QStringList QAbstractProxyModel::mimeTypes() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#mimeTypes" role="function">QAbstractItemModel::mimeTypes() const</db:link>.</db:para>
</db:section>
<db:section xml:id="resetInternalData">
<db:title>[protected] void QAbstractProxyModel::resetInternalData()</db:title>
<db:para>Clears the roleNames of this proxy model.</db:para>
</db:section>
<db:section xml:id="revert">
<db:title>[override virtual] void QAbstractProxyModel::revert()</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#revert" role="function">QAbstractItemModel::revert()</db:link>.</db:para>
</db:section>
<db:section xml:id="setData">
<db:title>[override virtual] bool QAbstractProxyModel::setData(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::EditRole)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#setData" role="function">QAbstractItemModel::setData(const QModelIndex &amp;index, const QVariant &amp;value, int role)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractproxymodel.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHeaderData">
<db:title>[override virtual] bool QAbstractProxyModel::setHeaderData(int <db:emphasis>section</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::EditRole)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#setHeaderData" role="function">QAbstractItemModel::setHeaderData(int section, Qt::Orientation orientation, const QVariant &amp;value, int role)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractproxymodel.xml#headerData">headerData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemData">
<db:title>[override virtual] bool QAbstractProxyModel::setItemData(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, const QMap&lt;int, QVariant&gt; &amp;<db:emphasis>roles</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#setItemData" role="function">QAbstractItemModel::setItemData(const QModelIndex &amp;index, const QMap&lt;int, QVariant&gt; &amp;roles)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractproxymodel.xml#itemData">itemData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSourceModel">
<db:title>[virtual] void QAbstractProxyModel::setSourceModel(QAbstractItemModel *<db:emphasis>sourceModel</db:emphasis>)</db:title>
<db:para>Sets the given <db:code role="parameter">sourceModel</db:code> to be processed by the proxy model.</db:para>
<db:para>Subclasses should call <db:link xlink:href="qabstractitemmodel.xml#beginResetModel">beginResetModel</db:link>() at the beginning of the method, disconnect from the old model, call this method, connect to the new model, and call <db:link xlink:href="qabstractitemmodel.xml#endResetModel">endResetModel</db:link>().</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qabstractproxymodel.xml#sourceModel-prop">sourceModel</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractproxymodel.xml#sourceModel">sourceModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sibling">
<db:title>[override virtual] QModelIndex QAbstractProxyModel::sibling(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>idx</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#sibling" role="function">QAbstractItemModel::sibling(int row, int column, const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="sort">
<db:title>[override virtual] void QAbstractProxyModel::sort(int <db:emphasis>column</db:emphasis>, Qt::SortOrder <db:emphasis>order</db:emphasis> = Qt::AscendingOrder)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#sort" role="function">QAbstractItemModel::sort(int column, Qt::SortOrder order)</db:link>.</db:para>
</db:section>
<db:section xml:id="sourceModel">
<db:title>QAbstractItemModel *QAbstractProxyModel::sourceModel() const</db:title>
<db:para>Returns the model that contains the data that is available through the proxy model.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qabstractproxymodel.xml#sourceModel-prop">sourceModel</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractproxymodel.xml#setSourceModel">setSourceModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="span">
<db:title>[override virtual] QSize QAbstractProxyModel::span(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#span" role="function">QAbstractItemModel::span(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="submit">
<db:title>[override virtual] bool QAbstractProxyModel::submit()</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#submit" role="function">QAbstractItemModel::submit()</db:link>.</db:para>
</db:section>
<db:section xml:id="supportedDragActions">
<db:title>[override virtual] Qt::DropActions QAbstractProxyModel::supportedDragActions() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#supportedDragActions" role="function">QAbstractItemModel::supportedDragActions() const</db:link>.</db:para>
</db:section>
<db:section xml:id="supportedDropActions">
<db:title>[override virtual] Qt::DropActions QAbstractProxyModel::supportedDropActions() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#supportedDropActions" role="function">QAbstractItemModel::supportedDropActions() const</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
