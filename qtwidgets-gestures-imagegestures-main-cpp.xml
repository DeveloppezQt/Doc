<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Image Gestures Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Widgets Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;mainwidget.h&quot;

static void showHelp(QCommandLineParser &amp;parser, const QString errorMessage = QString())
{
    QString text;
    QTextStream str(&amp;text);
    str &lt;&lt; &quot;&lt;html&gt;&lt;head/&gt;&lt;body&gt;&quot;;
    if (!errorMessage.isEmpty())
        str &lt;&lt; &quot;&lt;p&gt;&quot; &lt;&lt; errorMessage &lt;&lt; &quot;&lt;/p&gt;&quot;;
    str &lt;&lt; &quot;&lt;pre&gt;&quot; &lt;&lt; parser.helpText() &lt;&lt; &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;&quot;;
    QMessageBox box(errorMessage.isEmpty() ? QMessageBox::Information : QMessageBox::Warning,
                    QGuiApplication::applicationDisplayName(), text,
                    QMessageBox::Ok);
    box.setTextInteractionFlags(Qt::TextBrowserInteraction);
    box.exec();
}

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    QCoreApplication::setApplicationVersion(QT_VERSION_STR);
    QCoreApplication::setApplicationName(QStringLiteral(&quot;imagegestures&quot;));
    QGuiApplication::setApplicationDisplayName(QStringLiteral(&quot;Image Gestures Example&quot;));

    QCommandLineParser commandLineParser;
    const QCommandLineOption disablePanOption(&quot;no-pan&quot;, &quot;Disable pan gesture&quot;);
    commandLineParser.addOption(disablePanOption);
    const QCommandLineOption disablePinchOption(&quot;no-pinch&quot;, &quot;Disable pinch gesture&quot;);
    commandLineParser.addOption(disablePinchOption);
    const QCommandLineOption disableSwipeOption(&quot;no-swipe&quot;, &quot;Disable swipe gesture&quot;);
    commandLineParser.addOption(disableSwipeOption);
    const QCommandLineOption helpOption = commandLineParser.addHelpOption();
    commandLineParser.addPositionalArgument(QStringLiteral(&quot;Directory&quot;),
                                            QStringLiteral(&quot;Directory to display&quot;));

    const QString description = QGuiApplication::applicationDisplayName()
        + QLatin1String(&quot;\n\nEnable \&quot;debug\&quot; on the logging category \&quot;qt.examples.imagegestures\&quot; in order to\n&quot;
                        &quot;in order to obtain verbose information about Qt's gesture event processing,\n&quot;
                        &quot;for example by setting the environment variables QT_LOGGING_RULES to\n&quot;
                        &quot;qt.examples.imagegestures.debug=true\n&quot;);
    commandLineParser.setApplicationDescription(description);

    if (!commandLineParser.parse(QCoreApplication::arguments())) {
        showHelp(commandLineParser, commandLineParser.errorText());
        return -1;
    }
    if (commandLineParser.isSet(helpOption)) {
        showHelp(commandLineParser);
        return 0;
    }

    QStringList arguments = commandLineParser.positionalArguments();
    if (!arguments.isEmpty() &amp;&amp; !QFileInfo(arguments.front()).isDir()) {
        showHelp(commandLineParser,
                 QLatin1Char('&quot;') + QDir::toNativeSeparators(arguments.front())
                 + QStringLiteral(&quot;\&quot; is not a directory.&quot;));
        return -1;
    }

    QList&lt;Qt::GestureType&gt; gestures;
    if (!commandLineParser.isSet(disablePanOption))
        gestures &lt;&lt; Qt::PanGesture;
    if (!commandLineParser.isSet(disablePinchOption))
        gestures &lt;&lt; Qt::PinchGesture;
    if (!commandLineParser.isSet(disableSwipeOption))
        gestures &lt;&lt; Qt::SwipeGesture;

    MainWidget w;
    w.grabGestures(gestures);
    w.show();

    if (arguments.isEmpty()) {
        const QStringList picturesLocations = QStandardPaths::standardLocations(QStandardPaths::PicturesLocation);
        const QString directory =
            QFileDialog::getExistingDirectory(&amp;w, &quot;Select image folder&quot;,
                                              picturesLocations.isEmpty() ? QString() : picturesLocations.front());
        if (directory.isEmpty())
            return 0;
        arguments.append(directory);
    }

    w.openDirectory(arguments.front());

    return app.exec();
}

</db:programlisting>
</db:article>
