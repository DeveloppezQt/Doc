<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStylePainter Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstylepainter.xml">QStylePainter</db:link> class is a convenience class for drawing <db:link xlink:href="qstyle.xml">QStyle</db:link> elements inside a widget.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStylePainter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpainter.xml" xlink:role="class">QPainter</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStylePainter is part of <db:simplelist><db:member>appearance</db:member><db:member>painting</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qstylepainter.xml">QStylePainter</db:link> extends <db:link xlink:href="qpainter.xml">QPainter</db:link> with a set of high-level draw...() functions implemented on top of <db:link xlink:href="qstyle.xml">QStyle</db:link>'s API. The advantage of using <db:link xlink:href="qstylepainter.xml">QStylePainter</db:link> is that the parameter lists get considerably shorter. Whereas a <db:link xlink:href="qstyle.xml">QStyle</db:link> object must be able to draw on any widget using any painter (because the application normally has one <db:link xlink:href="qstyle.xml">QStyle</db:link> object shared by all widget), a <db:link xlink:href="qstylepainter.xml">QStylePainter</db:link> is initialized with a widget, eliminating the need to specify the <db:link xlink:href="qwidget.xml">QWidget</db:link>, the <db:link xlink:href="qpainter.xml">QPainter</db:link>, and the <db:link xlink:href="qstyle.xml">QStyle</db:link> for every function call.</db:para>
<db:para>Example using <db:link xlink:href="qstyle.xml">QStyle</db:link> directly:</db:para>
<db:programlisting language="cpp">void MyWidget::paintEvent(QPaintEvent * /* event */)
{
    QPainter painter(this);

    QStyleOptionFocusRect option;
    option.initFrom(this);
    option.backgroundColor = palette().color(QPalette::Background);

    style()-&amp;gt;drawPrimitive(QStyle::PE_FrameFocusRect, &amp;amp;option, &amp;amp;painter, this);
}
</db:programlisting>
<db:para>Example using <db:link xlink:href="qstylepainter.xml">QStylePainter</db:link>:</db:para>
<db:programlisting language="cpp">void MyWidget::paintEvent(QPaintEvent * /* event */)
{
    QStylePainter painter(this);

    QStyleOptionFocusRect option;
    option.initFrom(this);
    option.backgroundColor = palette().color(QPalette::Background);

    painter.drawPrimitive(QStyle::PE_FrameFocusRect, option);
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyle.xml">QStyle</db:link></db:member>
<db:member><db:link xlink:href="qstyleoption.xml">QStyleOption</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QStylePainter">
<db:title>QStylePainter::QStylePainter()</db:title>
<db:constructorsynopsis>
<db:methodname>QStylePainter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QStylePainter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qstylepainter.xml">QStylePainter</db:link>.</db:para>
</db:section>
<db:section xml:id="QStylePainter-1">
<db:title>[explicit] QStylePainter::QStylePainter(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStylePainter</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStylePainter(QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Construct a <db:link xlink:href="qstylepainter.xml">QStylePainter</db:link> using widget <db:code role="parameter">widget</db:code> for its paint device.</db:para>
</db:section>
<db:section xml:id="QStylePainter-2">
<db:title>QStylePainter::QStylePainter(QPaintDevice *<db:emphasis>pd</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStylePainter</db:methodname>
<db:methodparam>
<db:type>QPaintDevice *</db:type>
<db:parameter>pd</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QStylePainter(QPaintDevice *pd, QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Construct a <db:link xlink:href="qstylepainter.xml">QStylePainter</db:link> using <db:code role="parameter">pd</db:code> for its paint device, and attributes from <db:code role="parameter">widget</db:code>.</db:para>
</db:section>
<db:section xml:id="begin">
<db:title>bool QStylePainter::begin(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>begin</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool begin(QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Begin painting operations on the specified <db:code role="parameter">widget</db:code>. Returns true if the painter is ready to use; otherwise returns false.</db:para>
<db:para>This is automatically called by the constructor that takes a <db:link xlink:href="qwidget.xml">QWidget</db:link>.</db:para>
</db:section>
<db:section xml:id="begin-1">
<db:title>bool QStylePainter::begin(QPaintDevice *<db:emphasis>pd</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>begin</db:methodname>
<db:methodparam>
<db:type>QPaintDevice *</db:type>
<db:parameter>pd</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool begin(QPaintDevice *pd, QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Begin painting operations on paint device <db:code role="parameter">pd</db:code> as if it was <db:code role="parameter">widget</db:code>.</db:para>
<db:para>This is automatically called by the constructor that takes a <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> and a <db:link xlink:href="qwidget.xml">QWidget</db:link>.</db:para>
</db:section>
<db:section xml:id="drawComplexControl">
<db:title>void QStylePainter::drawComplexControl(QStyle::ComplexControl <db:emphasis>cc</db:emphasis>, const QStyleOptionComplex &amp;<db:emphasis>option</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawComplexControl</db:methodname>
<db:methodparam>
<db:type>QStyle::ComplexControl</db:type>
<db:parameter>cc</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStyleOptionComplex &amp;</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawComplexControl(QStyle::ComplexControl cc, const QStyleOptionComplex &amp;option)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Use the widget's style to draw a complex control <db:code role="parameter">cc</db:code> specified by the <db:link xlink:href="qstyleoptioncomplex.xml">QStyleOptionComplex</db:link> <db:code role="parameter">option</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyle.xml#drawComplexControl">QStyle::drawComplexControl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawControl">
<db:title>void QStylePainter::drawControl(QStyle::ControlElement <db:emphasis>ce</db:emphasis>, const QStyleOption &amp;<db:emphasis>option</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawControl</db:methodname>
<db:methodparam>
<db:type>QStyle::ControlElement</db:type>
<db:parameter>ce</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStyleOption &amp;</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawControl(QStyle::ControlElement ce, const QStyleOption &amp;option)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Use the widget's style to draw a control element <db:code role="parameter">ce</db:code> specified by <db:link xlink:href="qstyleoption.xml">QStyleOption</db:link> <db:code role="parameter">option</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyle.xml#drawControl">QStyle::drawControl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawItemPixmap">
<db:title>void QStylePainter::drawItemPixmap(const QRect &amp;<db:emphasis>rect</db:emphasis>, int <db:emphasis>flags</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawItemPixmap</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawItemPixmap(const QRect &amp;rect, int flags, const QPixmap &amp;pixmap)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the <db:code role="parameter">pixmap</db:code> in rectangle <db:code role="parameter">rect</db:code>. The pixmap is aligned according to <db:code role="parameter">flags</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyle.xml#drawItemPixmap">QStyle::drawItemPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawItemText">
<db:title>void QStylePainter::drawItemText(const QRect &amp;<db:emphasis>rect</db:emphasis>, int <db:emphasis>flags</db:emphasis>, const QPalette &amp;<db:emphasis>pal</db:emphasis>, bool <db:emphasis>enabled</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, QPalette::ColorRole <db:emphasis>textRole</db:emphasis> = QPalette::NoRole)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawItemText</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPalette &amp;</db:type>
<db:parameter>pal</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enabled</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPalette::ColorRole</db:type>
<db:parameter>textRole</db:parameter>
<db:initializer>QPalette::NoRole</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawItemText(const QRect &amp;rect, int flags, const QPalette &amp;pal, bool enabled, const QString &amp;text, QPalette::ColorRole textRole)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the <db:code role="parameter">text</db:code> in rectangle <db:code role="parameter">rect</db:code> and palette <db:code role="parameter">pal</db:code>. The text is aligned and wrapped according to <db:code role="parameter">flags</db:code>.</db:para>
<db:para>The pen color is specified with <db:code role="parameter">textRole</db:code>. The <db:code role="parameter">enabled</db:code> bool indicates whether or not the item is enabled; when reimplementing this bool should influence how the item is drawn.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyle.xml#drawItemText">QStyle::drawItemText</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawPrimitive">
<db:title>void QStylePainter::drawPrimitive(QStyle::PrimitiveElement <db:emphasis>pe</db:emphasis>, const QStyleOption &amp;<db:emphasis>option</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPrimitive</db:methodname>
<db:methodparam>
<db:type>QStyle::PrimitiveElement</db:type>
<db:parameter>pe</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStyleOption &amp;</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPrimitive(QStyle::PrimitiveElement pe, const QStyleOption &amp;option)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Use the widget's style to draw a primitive element <db:code role="parameter">pe</db:code> specified by <db:link xlink:href="qstyleoption.xml">QStyleOption</db:link> <db:code role="parameter">option</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyle.xml#drawPrimitive">QStyle::drawPrimitive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="style">
<db:title>QStyle *QStylePainter::style() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStyle *</db:type>
<db:methodname>style</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStyle * style() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the current style used by the <db:link xlink:href="qstylepainter.xml">QStylePainter</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
