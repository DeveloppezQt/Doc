<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStylePainter Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstylepainter.xml">QStylePainter</db:link> class is a convenience class for drawing QStyle elements inside a widget.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStylePainter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStylePainter is part of <db:simplelist><db:member>appearance</db:member><db:member>painting</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qstylepainter.xml">QStylePainter</db:link> extends QPainter with a set of high-level <db:code>draw...()</db:code> functions implemented on top of QStyle's API. The advantage of using <db:link xlink:href="qstylepainter.xml">QStylePainter</db:link> is that the parameter lists get considerably shorter. Whereas a QStyle object must be able to draw on any widget using any painter (because the application normally has one QStyle object shared by all widget), a <db:link xlink:href="qstylepainter.xml">QStylePainter</db:link> is initialized with a widget, eliminating the need to specify the QWidget, the QPainter, and the QStyle for every function call.</db:para>
<db:para>Example using QStyle directly:</db:para>
<db:programlisting language="cpp">void MyWidget::paintEvent(QPaintEvent * /* event */)
{
    QPainter painter(this);

    QStyleOptionFocusRect option;
    option.initFrom(this);
    option.backgroundColor = palette().color(QPalette::Background);

    style()-&gt;drawPrimitive(QStyle::PE_FrameFocusRect, &amp;option, &amp;painter, this);
}
</db:programlisting>
<db:para>Example using <db:link xlink:href="qstylepainter.xml">QStylePainter</db:link>:</db:para>
<db:programlisting language="cpp">void MyWidget::paintEvent(QPaintEvent * /* event */)
{
    QStylePainter painter(this);

    QStyleOptionFocusRect option;
    option.initFrom(this);
    option.backgroundColor = palette().color(QPalette::Background);

    painter.drawPrimitive(QStyle::PE_FrameFocusRect, option);
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>QStyle</db:member>
<db:member>QStyleOption</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QStylePainter">
<db:title>QStylePainter::QStylePainter()</db:title>
<db:para>Constructs a <db:link xlink:href="qstylepainter.xml">QStylePainter</db:link>.</db:para>
</db:section>
<db:section xml:id="QStylePainter-1">
<db:title>[explicit] QStylePainter::QStylePainter(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Construct a <db:link xlink:href="qstylepainter.xml">QStylePainter</db:link> using widget <db:code role="parameter">widget</db:code> for its paint device.</db:para>
</db:section>
<db:section xml:id="QStylePainter-2">
<db:title>QStylePainter::QStylePainter(int *<db:emphasis>pd</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Construct a <db:link xlink:href="qstylepainter.xml">QStylePainter</db:link> using <db:code role="parameter">pd</db:code> for its paint device, and attributes from <db:code role="parameter">widget</db:code>.</db:para>
</db:section>
<db:section xml:id="begin">
<db:title>bool QStylePainter::begin(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Begin painting operations on the specified <db:code role="parameter">widget</db:code>. Returns <db:code>true</db:code> if the painter is ready to use; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This is automatically called by the constructor that takes a QWidget.</db:para>
</db:section>
<db:section xml:id="begin-1">
<db:title>bool QStylePainter::begin(int *<db:emphasis>pd</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Begin painting operations on paint device <db:code role="parameter">pd</db:code> as if it was <db:code role="parameter">widget</db:code>.</db:para>
<db:para>This is automatically called by the constructor that takes a QPaintDevice and a QWidget.</db:para>
</db:section>
<db:section xml:id="drawComplexControl">
<db:title>void QStylePainter::drawComplexControl(int <db:emphasis>cc</db:emphasis>, const QStyleOptionComplex &amp;<db:emphasis>option</db:emphasis>)</db:title>
<db:para>Use the widget's style to draw a complex control <db:code role="parameter">cc</db:code> specified by the QStyleOptionComplex <db:code role="parameter">option</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QStyle::drawComplexControl()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawControl">
<db:title>void QStylePainter::drawControl(int <db:emphasis>ce</db:emphasis>, const QStyleOption &amp;<db:emphasis>option</db:emphasis>)</db:title>
<db:para>Use the widget's style to draw a control element <db:code role="parameter">ce</db:code> specified by QStyleOption <db:code role="parameter">option</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QStyle::drawControl()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawItemPixmap">
<db:title>void QStylePainter::drawItemPixmap(const QRect &amp;<db:emphasis>rect</db:emphasis>, int <db:emphasis>flags</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:para>Draws the <db:code role="parameter">pixmap</db:code> in rectangle <db:code role="parameter">rect</db:code>. The pixmap is aligned according to <db:code role="parameter">flags</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QStyle::drawItemPixmap()</db:link></db:member>
<db:member><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawItemText">
<db:title>void QStylePainter::drawItemText(const QRect &amp;<db:emphasis>rect</db:emphasis>, int <db:emphasis>flags</db:emphasis>, const QPalette &amp;<db:emphasis>pal</db:emphasis>, bool <db:emphasis>enabled</db:emphasis>, const int &amp;<db:emphasis>text</db:emphasis>, int <db:emphasis>textRole</db:emphasis>)</db:title>
<db:para>Draws the <db:code role="parameter">text</db:code> in rectangle <db:code role="parameter">rect</db:code> and palette <db:code role="parameter">pal</db:code>. The text is aligned and wrapped according to <db:code role="parameter">flags</db:code>.</db:para>
<db:para>The pen color is specified with <db:code role="parameter">textRole</db:code>. The <db:code role="parameter">enabled</db:code> bool indicates whether or not the item is enabled; when reimplementing this bool should influence how the item is drawn.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QStyle::drawItemText()</db:link></db:member>
<db:member><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawPrimitive">
<db:title>void QStylePainter::drawPrimitive(int <db:emphasis>pe</db:emphasis>, const QStyleOption &amp;<db:emphasis>option</db:emphasis>)</db:title>
<db:para>Use the widget's style to draw a primitive element <db:code role="parameter">pe</db:code> specified by QStyleOption <db:code role="parameter">option</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QStyle::drawPrimitive()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="style">
<db:title>QStyle *QStylePainter::style() const</db:title>
<db:para>Return the current style used by the <db:link xlink:href="qstylepainter.xml">QStylePainter</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
