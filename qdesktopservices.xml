<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDesktopServices Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdesktopservices.xml">QDesktopServices</db:link> class provides methods for accessing common desktop services.</db:para>
<db:para>This class was introduced in Qt 4.2.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDesktopServices</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDesktopServices is part of <db:simplelist><db:member>desktop</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Many desktop environments provide services that can be used by applications to perform common tasks, such as opening a web page, in a way that is both consistent and takes into account the user's application preferences.</db:para>
<db:para>This class contains functions that provide simple interfaces to these services that indicate whether they succeeded or failed.</db:para>
<db:para>The <db:link xlink:href="qdesktopservices.xml#openUrl">openUrl</db:link>() function is used to open files located at arbitrary URLs in external applications. For URLs that correspond to resources on the local filing system (where the URL scheme is &quot;file&quot;), a suitable application will be used to open the file; otherwise, a web browser will be used to fetch and display the file.</db:para>
<db:para>The user's desktop settings control whether certain executable file types are opened for browsing, or if they are executed instead. Some desktop environments are configured to prevent users from executing files obtained from non-local URLs, or to ask the user's permission before doing so.</db:para>
<db:section xml:id="url-handlers">
<db:title>URL Handlers</db:title>
<db:para>The behavior of the <db:link xlink:href="qdesktopservices.xml#openUrl">openUrl</db:link>() function can be customized for individual URL schemes to allow applications to override the default handling behavior for certain types of URLs.</db:para>
<db:para>The dispatch mechanism allows only one custom handler to be used for each URL scheme; this is set using the <db:link xlink:href="qdesktopservices.xml#setUrlHandler">setUrlHandler</db:link>() function. Each handler is implemented as a slot which accepts only a single <db:link xlink:href="qurl.xml">QUrl</db:link> argument.</db:para>
<db:para>The existing handlers for each scheme can be removed with the <db:link xlink:href="qdesktopservices.xml#unsetUrlHandler">unsetUrlHandler</db:link>() function. This returns the handling behavior for the given scheme to the default behavior.</db:para>
<db:para>This system makes it easy to implement a help system, for example. Help could be provided in labels and text browsers using <db:guilabel>help://myapplication/mytopic</db:guilabel> URLs, and by registering a handler it becomes possible to display the help text inside the application:</db:para>
<db:programlisting language="cpp">class MyHelpHandler : public QObject
{
    Q_OBJECT
public:
    ...
public slots:
    void showHelp(const QUrl &amp;amp;url);
};

QDesktopServices::setUrlHandler(&quot;help&quot;, helpInstance, &quot;showHelp&quot;);
</db:programlisting>
<db:para>If inside the handler you decide that you can't open the requested URL, you can just call <db:link xlink:href="qdesktopservices.xml#openUrl">QDesktopServices::openUrl</db:link>() again with the same argument, and it will try to open the URL using the appropriate mechanism for the user's desktop environment.</db:para>
<db:para>Combined with platform specific settings, the schemes registered by the <db:link xlink:href="qdesktopservices.xml#openUrl">openUrl</db:link>() function can also be exposed to other applications, opening up for application deep linking or a very basic URL-based IPC mechanism.</db:para>
<db:note>
<db:para>Since Qt 5, storageLocation() and displayName() are replaced by functionality provided by the <db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link> class.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsystemtrayicon.xml">QSystemTrayIcon</db:link></db:member>
<db:member><db:link xlink:href="qprocess.xml">QProcess</db:link></db:member>
<db:member><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="openUrl">
<db:title>[static] bool QDesktopServices::openUrl(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>openUrl</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool openUrl(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Opens the given <db:code role="parameter">url</db:code> in the appropriate Web browser for the user's desktop environment, and returns <db:code>true</db:code> if successful; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If the URL is a reference to a local file (i.e., the URL scheme is &quot;file&quot;) then it will be opened with a suitable application instead of a Web browser.</db:para>
<db:para>The following example opens a file on the Windows file system residing on a path that contains spaces:</db:para>
<db:programlisting language="cpp">QDesktopServices::openUrl(QUrl(&quot;file:///C:/Documents and Settings/All Users/Desktop&quot;, QUrl::TolerantMode));
</db:programlisting>
<db:para>If a <db:code>mailto</db:code> URL is specified, the user's e-mail client will be used to open a composer window containing the options specified in the URL, similar to the way <db:code>mailto</db:code> links are handled by a Web browser.</db:para>
<db:para>For example, the following URL contains a recipient (<db:code>user@foo.com</db:code>), a subject (<db:code>Test</db:code>), and a message body (<db:code>Just a test</db:code>):</db:para>
<db:programlisting language="cpp">mailto:user@foo.com?subject=Test&amp;amp;body=Just a test
</db:programlisting>
<db:warning>
<db:para>Although many e-mail clients can send attachments and are Unicode-aware, the user may have configured their client without these features. Also, certain e-mail clients (e.g., Lotus Notes) have problems with long URLs.</db:para>
</db:warning>
<db:warning>
<db:para>A return value of <db:code>true</db:code> indicates that the application has successfully requested the operating system to open the URL in an external application. The external application may still fail to launch or fail to open the requested URL. This result will not be reported back to the application.</db:para>
</db:warning>
<db:warning>
<db:para>URLs passed to this function on iOS will not load unless their schemes are listed in the <db:code>LSApplicationQueriesSchemes</db:code> key of the application's Info.plist file. For more information, see the Apple Developer Documentation for <db:link xlink:href="https://developer.apple.com/documentation/uikit/uiapplication/1622952-canopenurl">canOpenURL(_:)</db:link>. For example, the following lines enable URLs with the HTTPS scheme:</db:para>
</db:warning>
<db:programlisting language="cpp">&amp;lt;key&amp;gt;LSApplicationQueriesSchemes&amp;lt;/key&amp;gt;
&amp;lt;array&amp;gt;
    &amp;lt;string&amp;gt;https&amp;lt;/string&amp;gt;
&amp;lt;/array&amp;gt;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesktopservices.xml#setUrlHandler">setUrlHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUrlHandler">
<db:title>[static] void QDesktopServices::setUrlHandler(const QString &amp;<db:emphasis>scheme</db:emphasis>, QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>method</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setUrlHandler</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>scheme</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>receiver</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>method</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUrlHandler(const QString &amp;scheme, QObject *receiver, const char *method)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the handler for the given <db:code role="parameter">scheme</db:code> to be the handler <db:code role="parameter">method</db:code> provided by the <db:code role="parameter">receiver</db:code> object.</db:para>
<db:para>This function provides a way to customize the behavior of <db:link xlink:href="qdesktopservices.xml#openUrl">openUrl</db:link>(). If <db:link xlink:href="qdesktopservices.xml#openUrl">openUrl</db:link>() is called with a URL with the specified <db:code role="parameter">scheme</db:code> then the given <db:code role="parameter">method</db:code> on the <db:code role="parameter">receiver</db:code> object is called instead of <db:link xlink:href="qdesktopservices.xml">QDesktopServices</db:link> launching an external application.</db:para>
<db:para>The provided method must be implemented as a slot that only accepts a single <db:link xlink:href="qurl.xml">QUrl</db:link> argument.</db:para>
<db:programlisting language="cpp">class MyHelpHandler : public QObject
{
    Q_OBJECT
public:
    ...
public slots:
    void showHelp(const QUrl &amp;amp;url);
};

QDesktopServices::setUrlHandler(&quot;help&quot;, helpInstance, &quot;showHelp&quot;);
</db:programlisting>
<db:para>To use this function for receiving data from other apps on iOS you also need to add the custom scheme to the <db:code>CFBundleURLSchemes</db:code> list in your Info.plist file:</db:para>
<db:programlisting language="cpp">&amp;lt;key&amp;gt;CFBundleURLTypes&amp;lt;/key&amp;gt;
&amp;lt;array&amp;gt;
    &amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;CFBundleURLSchemes&amp;lt;/key&amp;gt;
        &amp;lt;array&amp;gt;
            &amp;lt;string&amp;gt;myapp&amp;lt;/string&amp;gt;
        &amp;lt;/array&amp;gt;
    &amp;lt;/dict&amp;gt;
&amp;lt;/array&amp;gt;
</db:programlisting>
<db:para>For more information, see the Apple Developer Documentation for <db:link xlink:href="https://developer.apple.com/documentation/uikit/core_app/allowing_apps_and_websites_to_link_to_your_content/communicating_with_other_apps_using_custom_urls?language=objc">Communicating with Other Apps Using Custom URLs</db:link>.</db:para>
<db:para>If setUrlHandler() is used to set a new handler for a scheme which already has a handler, the existing handler is simply replaced with the new one. Since <db:link xlink:href="qdesktopservices.xml">QDesktopServices</db:link> does not take ownership of handlers, no objects are deleted when a handler is replaced.</db:para>
<db:para>Note that the handler will always be called from within the same thread that calls <db:link xlink:href="qdesktopservices.xml#openUrl">QDesktopServices::openUrl</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesktopservices.xml#openUrl">openUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qdesktopservices.xml#unsetUrlHandler">unsetUrlHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unsetUrlHandler">
<db:title>[static] void QDesktopServices::unsetUrlHandler(const QString &amp;<db:emphasis>scheme</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>unsetUrlHandler</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>scheme</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void unsetUrlHandler(const QString &amp;scheme)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes a previously set URL handler for the specified <db:code role="parameter">scheme</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesktopservices.xml#setUrlHandler">setUrlHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
