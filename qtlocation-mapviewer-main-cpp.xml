<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Map Viewer (QML)</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Map Viewer example shows how to display and interact with a map, search for an address, and find driving directions.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtCore/QTextStream&gt;
#include &lt;QtGui/QGuiApplication&gt;
#include &lt;QtQml/QQmlApplicationEngine&gt;
#include &lt;QtQuick/QQuickItem&gt;

static bool parseArgs(QStringList&amp; args, QVariantMap&amp; parameters)
{

    while (!args.isEmpty()) {

        QString param = args.takeFirst();

        if (param.startsWith(&quot;--help&quot;)) {
            QTextStream out(stdout);
            out &lt;&lt; &quot;Usage: &quot; &lt;&lt; endl;
            out &lt;&lt; &quot;--plugin.&lt;parameter_name&gt; &lt;parameter_value&gt;    -  Sets parameter = value for plugin&quot; &lt;&lt; endl;
            out.flush();
            return true;
        }

        if (param.startsWith(&quot;--plugin.&quot;)) {

            param.remove(0, 9);

            if (args.isEmpty() || args.first().startsWith(&quot;--&quot;)) {
                parameters[param] = true;
            } else {

                QString value = args.takeFirst();

                if (value == &quot;true&quot; || value == &quot;on&quot; || value == &quot;enabled&quot;) {
                    parameters[param] = true;
                } else if (value == &quot;false&quot; || value == &quot;off&quot;
                           || value == &quot;disable&quot;) {
                    parameters[param] = false;
                } else {
                    parameters[param] = value;
                }
            }
        }
    }
    return false;
}

int main(int argc, char *argv[])
{
    QGuiApplication application(argc, argv);

    QVariantMap parameters;
    QStringList args(QCoreApplication::arguments());

    if (parseArgs(args, parameters))
        return 0;
    if (!args.contains(QStringLiteral(&quot;osm.useragent&quot;)))
        parameters[QStringLiteral(&quot;osm.useragent&quot;)] = QStringLiteral(&quot;QtLocation Mapviewer example&quot;);

    QQmlApplicationEngine engine;
    engine.addImportPath(QStringLiteral(&quot;:/imports&quot;));
    engine.load(QUrl(QStringLiteral(&quot;qrc:///mapviewer.qml&quot;)));
    QObject::connect(&amp;engine, SIGNAL(quit()), qApp, SLOT(quit()));

    QObject *item = engine.rootObjects().first();
    Q_ASSERT(item);

    QMetaObject::invokeMethod(item, &quot;initializeProviders&quot;,
                              Q_ARG(QVariant, QVariant::fromValue(parameters)));

    return application.exec();
}

</db:programlisting>
</db:article>
