<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSyntaxHighlighter Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link> class allows you to define syntax highlighting rules, and in addition you can use the class to query a document's current formatting or user data.</db:para>
<db:para>This class was introduced in Qt 4.1.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSyntaxHighlighter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSyntaxHighlighter is part of <db:simplelist><db:member><db:link xlink:href="richtext-processing.xml">Rich Text Processing APIs</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link> class is a base class for implementing <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> syntax highlighters. A syntax highligher automatically highlights parts of the text in a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>. Syntax highlighters are often used when the user is entering text in a specific format (for example source code) and help the user to read the text and identify syntax errors.</db:para>
<db:para>To provide your own syntax highlighting, you must subclass <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link> and reimplement <db:link xlink:href="qsyntaxhighlighter.xml#highlightBlock">highlightBlock</db:link>().</db:para>
<db:para>When you create an instance of your <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link> subclass, pass it the <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> that you want the syntax highlighting to be applied to. For example:</db:para>
<db:programlisting language="cpp">QTextEdit *editor = new QTextEdit;
MyHighlighter *highlighter = new MyHighlighter(editor-&gt;document());
</db:programlisting>
<db:para>After this your <db:link xlink:href="qsyntaxhighlighter.xml#highlightBlock">highlightBlock</db:link>() function will be called automatically whenever necessary. Use your <db:link xlink:href="qsyntaxhighlighter.xml#highlightBlock">highlightBlock</db:link>() function to apply formatting (e.g. setting the font and color) to the text that is passed to it. <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link> provides the <db:link xlink:href="qsyntaxhighlighter.xml#setFormat">setFormat</db:link>() function which applies a given <db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link> on the current text block. For example:</db:para>
<db:programlisting language="cpp">void MyHighlighter::highlightBlock(const QString &amp;text)
{
    QTextCharFormat myClassFormat;
    myClassFormat.setFontWeight(QFont::Bold);
    myClassFormat.setForeground(Qt::darkMagenta);
    QString pattern = &quot;\\bMy[A-Za-z]+\\b&quot;;

    QRegExp expression(pattern);
    int index = text.indexOf(expression);
    while (index &gt;= 0) {
        int length = expression.matchedLength();
        setFormat(index, length, myClassFormat);
        index = text.indexOf(expression, index + length);
    }
}
</db:programlisting>
<db:para>Some syntaxes can have constructs that span several text blocks. For example, a C++ syntax highlighter should be able to cope with <db:code>/</db:code><db:code>*...*</db:code><db:code>/</db:code> multiline comments. To deal with these cases it is necessary to know the end state of the previous text block (e.g. &quot;in comment&quot;).</db:para>
<db:para>Inside your <db:link xlink:href="qsyntaxhighlighter.xml#highlightBlock">highlightBlock</db:link>() implementation you can query the end state of the previous text block using the <db:link xlink:href="qsyntaxhighlighter.xml#previousBlockState">previousBlockState</db:link>() function. After parsing the block you can save the last state using <db:link xlink:href="qsyntaxhighlighter.xml#setCurrentBlockState">setCurrentBlockState</db:link>().</db:para>
<db:para>The <db:link xlink:href="qsyntaxhighlighter.xml#currentBlockState">currentBlockState</db:link>() and <db:link xlink:href="qsyntaxhighlighter.xml#previousBlockState">previousBlockState</db:link>() functions return an int value. If no state is set, the returned value is -1. You can designate any other value to identify any given state using the <db:link xlink:href="qsyntaxhighlighter.xml#setCurrentBlockState">setCurrentBlockState</db:link>() function. Once the state is set the <db:link xlink:href="qtextblock.xml">QTextBlock</db:link> keeps that value until it is set set again or until the corresponding paragraph of text is deleted.</db:para>
<db:para>For example, if you're writing a simple C++ syntax highlighter, you might designate 1 to signify &quot;in comment&quot;:</db:para>
<db:programlisting language="cpp">QTextCharFormat multiLineCommentFormat;
multiLineCommentFormat.setForeground(Qt::red);

QRegExp startExpression(&quot;/\\*&quot;);
QRegExp endExpression(&quot;\\*/&quot;);

setCurrentBlockState(0);

int startIndex = 0;
if (previousBlockState() != 1)
    startIndex = text.indexOf(startExpression);

while (startIndex &gt;= 0) {
   int endIndex = text.indexOf(endExpression, startIndex);
   int commentLength;
   if (endIndex == -1) {
       setCurrentBlockState(1);
       commentLength = text.length() - startIndex;
   } else {
       commentLength = endIndex - startIndex
                       + endExpression.matchedLength();
   }
   setFormat(startIndex, commentLength, multiLineCommentFormat);
   startIndex = text.indexOf(startExpression,
                             startIndex + commentLength);
}
</db:programlisting>
<db:para>In the example above, we first set the current block state to 0. Then, if the previous block ended within a comment, we higlight from the beginning of the current block (<db:code>startIndex = 0</db:code>). Otherwise, we search for the given start expression. If the specified end expression cannot be found in the text block, we change the current block state by calling <db:link xlink:href="qsyntaxhighlighter.xml#setCurrentBlockState">setCurrentBlockState</db:link>(), and make sure that the rest of the block is higlighted.</db:para>
<db:para>In addition you can query the current formatting and user data using the <db:link xlink:href="qsyntaxhighlighter.xml#format">format</db:link>() and <db:link xlink:href="qsyntaxhighlighter.xml#currentBlockUserData">currentBlockUserData</db:link>() functions respectively. You can also attach user data to the current text block using the <db:link xlink:href="qsyntaxhighlighter.xml#setCurrentBlockUserData">setCurrentBlockUserData</db:link>() function. <db:link xlink:href="qtextblockuserdata.xml">QTextBlockUserData</db:link> can be used to store custom settings. In the case of syntax highlighting, it is in particular interesting as cache storage for information that you may figure out while parsing the paragraph's text. For an example, see the <db:link xlink:href="qsyntaxhighlighter.xml#setCurrentBlockUserData">setCurrentBlockUserData</db:link>() documentation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml">QTextDocument</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-richtext-syntaxhighlighter-example.xml">Syntax Highlighter Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSyntaxHighlighter">
<db:title>[explicit] QSyntaxHighlighter::QSyntaxHighlighter(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link> with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>If the parent is a <db:link xlink:href="qtextedit.xml">QTextEdit</db:link>, it installs the syntaxhighlighter on the parents document. The specified <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> also becomes the owner of the <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link>.</db:para>
</db:section>
<db:section xml:id="QSyntaxHighlighter-1">
<db:title>[explicit] QSyntaxHighlighter::QSyntaxHighlighter(QTextDocument *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link> and installs it on <db:code role="parameter">parent</db:code>. The specified <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> also becomes the owner of the <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link>.</db:para>
</db:section>
<db:section xml:id="dtor.QSyntaxHighlighter">
<db:title>[virtual noexcept] QSyntaxHighlighter::~QSyntaxHighlighter()</db:title>
<db:para>Destructor. Uninstalls this syntax highlighter from the text document.</db:para>
</db:section>
<db:section xml:id="currentBlock">
<db:title>[protected, since 4.4] QTextBlock QSyntaxHighlighter::currentBlock() const</db:title>
<db:para>Returns the current text block.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
</db:section>
<db:section xml:id="currentBlockState">
<db:title>[protected] int QSyntaxHighlighter::currentBlockState() const</db:title>
<db:para>Returns the state of the current text block. If no value is set, the returned value is -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsyntaxhighlighter.xml#setCurrentBlockState">setCurrentBlockState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentBlockUserData">
<db:title>[protected] QTextBlockUserData *QSyntaxHighlighter::currentBlockUserData() const</db:title>
<db:para>Returns the <db:link xlink:href="qtextblockuserdata.xml">QTextBlockUserData</db:link> object previously attached to the current text block.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#userData">QTextBlock::userData</db:link>()</db:member>
<db:member><db:link xlink:href="qsyntaxhighlighter.xml#setCurrentBlockUserData">setCurrentBlockUserData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="document">
<db:title>QTextDocument *QSyntaxHighlighter::document() const</db:title>
<db:para>Returns the <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> on which this syntax highlighter is installed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsyntaxhighlighter.xml#setDocument">setDocument</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="format">
<db:title>[protected] QTextCharFormat QSyntaxHighlighter::format(int <db:emphasis>position</db:emphasis>) const</db:title>
<db:para>Returns the format at <db:code role="parameter">position</db:code> inside the syntax highlighter's current text block.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsyntaxhighlighter.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="highlightBlock">
<db:title>[pure virtual protected] void QSyntaxHighlighter::highlightBlock(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Highlights the given text block. This function is called when necessary by the rich text engine, i.e. on text blocks which have changed.</db:para>
<db:para>To provide your own syntax highlighting, you must subclass <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link> and reimplement highlightBlock(). In your reimplementation you should parse the block's <db:code role="parameter">text</db:code> and call <db:link xlink:href="qsyntaxhighlighter.xml#setFormat">setFormat</db:link>() as often as necessary to apply any font and color changes that you require. For example:</db:para>
<db:programlisting language="cpp">void MyHighlighter::highlightBlock(const QString &amp;text)
{
    QTextCharFormat myClassFormat;
    myClassFormat.setFontWeight(QFont::Bold);
    myClassFormat.setForeground(Qt::darkMagenta);
    QString pattern = &quot;\\bMy[A-Za-z]+\\b&quot;;

    QRegExp expression(pattern);
    int index = text.indexOf(expression);
    while (index &gt;= 0) {
        int length = expression.matchedLength();
        setFormat(index, length, myClassFormat);
        index = text.indexOf(expression, index + length);
     }
 }
</db:programlisting>
<db:para>Some syntaxes can have constructs that span several text blocks. For example, a C++ syntax highlighter should be able to cope with <db:code>/</db:code><db:code>*...*</db:code><db:code>/</db:code> multiline comments. To deal with these cases it is necessary to know the end state of the previous text block (e.g. &quot;in comment&quot;).</db:para>
<db:para>Inside your highlightBlock() implementation you can query the end state of the previous text block using the <db:link xlink:href="qsyntaxhighlighter.xml#previousBlockState">previousBlockState</db:link>() function. After parsing the block you can save the last state using <db:link xlink:href="qsyntaxhighlighter.xml#setCurrentBlockState">setCurrentBlockState</db:link>().</db:para>
<db:para>The <db:link xlink:href="qsyntaxhighlighter.xml#currentBlockState">currentBlockState</db:link>() and <db:link xlink:href="qsyntaxhighlighter.xml#previousBlockState">previousBlockState</db:link>() functions return an int value. If no state is set, the returned value is -1. You can designate any other value to identify any given state using the <db:link xlink:href="qsyntaxhighlighter.xml#setCurrentBlockState">setCurrentBlockState</db:link>() function. Once the state is set the <db:link xlink:href="qtextblock.xml">QTextBlock</db:link> keeps that value until it is set set again or until the corresponding paragraph of text gets deleted.</db:para>
<db:para>For example, if you're writing a simple C++ syntax highlighter, you might designate 1 to signify &quot;in comment&quot;. For a text block that ended in the middle of a comment you'd set 1 using <db:link xlink:href="qsyntaxhighlighter.xml#setCurrentBlockState">setCurrentBlockState</db:link>, and for other paragraphs you'd set 0. In your parsing code if the return value of <db:link xlink:href="qsyntaxhighlighter.xml#previousBlockState">previousBlockState</db:link>() is 1, you would highlight the text as a C++ comment until you reached the closing <db:code>*</db:code><db:code>/</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsyntaxhighlighter.xml#previousBlockState">previousBlockState</db:link>()</db:member>
<db:member><db:link xlink:href="qsyntaxhighlighter.xml#setFormat">setFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qsyntaxhighlighter.xml#setCurrentBlockState">setCurrentBlockState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="previousBlockState">
<db:title>[protected] int QSyntaxHighlighter::previousBlockState() const</db:title>
<db:para>Returns the end state of the text block previous to the syntax highlighter's current block. If no value was previously set, the returned value is -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsyntaxhighlighter.xml#highlightBlock">highlightBlock</db:link>()</db:member>
<db:member><db:link xlink:href="qsyntaxhighlighter.xml#setCurrentBlockState">setCurrentBlockState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rehighlight">
<db:title>[since 4.2] void QSyntaxHighlighter::rehighlight()</db:title>
<db:para>Reapplies the highlighting to the whole document.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsyntaxhighlighter.xml#rehighlightBlock">rehighlightBlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rehighlightBlock">
<db:title>[since 4.6] void QSyntaxHighlighter::rehighlightBlock(const QTextBlock &amp;<db:emphasis>block</db:emphasis>)</db:title>
<db:para>Reapplies the highlighting to the given <db:link xlink:href="qtextblock.xml">QTextBlock</db:link> <db:code role="parameter">block</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsyntaxhighlighter.xml#rehighlight">rehighlight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrentBlockState">
<db:title>[protected] void QSyntaxHighlighter::setCurrentBlockState(int <db:emphasis>newState</db:emphasis>)</db:title>
<db:para>Sets the state of the current text block to <db:code role="parameter">newState</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsyntaxhighlighter.xml#currentBlockState">currentBlockState</db:link>()</db:member>
<db:member><db:link xlink:href="qsyntaxhighlighter.xml#highlightBlock">highlightBlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrentBlockUserData">
<db:title>[protected] void QSyntaxHighlighter::setCurrentBlockUserData(QTextBlockUserData *<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Attaches the given <db:code role="parameter">data</db:code> to the current text block. The ownership is passed to the underlying text document, i.e. the provided <db:link xlink:href="qtextblockuserdata.xml">QTextBlockUserData</db:link> object will be deleted if the corresponding text block gets deleted.</db:para>
<db:para><db:link xlink:href="qtextblockuserdata.xml">QTextBlockUserData</db:link> can be used to store custom settings. In the case of syntax highlighting, it is in particular interesting as cache storage for information that you may figure out while parsing the paragraph's text.</db:para>
<db:para>For example while parsing the text, you can keep track of parenthesis characters that you encounter ('{[(' and the like), and store their relative position and the actual <db:link xlink:href="qchar.xml">QChar</db:link> in a simple class derived from <db:link xlink:href="qtextblockuserdata.xml">QTextBlockUserData</db:link>:</db:para>
<db:programlisting language="cpp">struct ParenthesisInfo
{
    QChar char;
    int position;
};

struct BlockData : public QTextBlockUserData
{
    QVector&lt;ParenthesisInfo&gt; parentheses;
};
</db:programlisting>
<db:para>During cursor navigation in the associated editor, you can ask the current <db:link xlink:href="qtextblock.xml">QTextBlock</db:link> (retrieved using the <db:link xlink:href="qtextcursor.xml#block">QTextCursor::block</db:link>() function) if it has a user data object set and cast it to your <db:code>BlockData</db:code> object. Then you can check if the current cursor position matches with a previously recorded parenthesis position, and, depending on the type of parenthesis (opening or closing), find the next opening or closing parenthesis on the same level.</db:para>
<db:para>In this way you can do a visual parenthesis matching and highlight from the current cursor position to the matching parenthesis. That makes it easier to spot a missing parenthesis in your code and to find where a corresponding opening/closing parenthesis is when editing parenthesis intensive code.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsyntaxhighlighter.xml#currentBlockUserData">currentBlockUserData</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblock.xml#setUserData">QTextBlock::setUserData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDocument">
<db:title>void QSyntaxHighlighter::setDocument(QTextDocument *<db:emphasis>doc</db:emphasis>)</db:title>
<db:para>Installs the syntax highlighter on the given <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> <db:code role="parameter">doc</db:code>. A <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link> can only be used with one document at a time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsyntaxhighlighter.xml#document">document</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFormat">
<db:title>[protected] void QSyntaxHighlighter::setFormat(int <db:emphasis>start</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QTextCharFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:para>This function is applied to the syntax highlighter's current text block (i.e. the text that is passed to the <db:link xlink:href="qsyntaxhighlighter.xml#highlightBlock">highlightBlock</db:link>() function).</db:para>
<db:para>The specified <db:code role="parameter">format</db:code> is applied to the text from the <db:code role="parameter">start</db:code> position for a length of <db:code role="parameter">count</db:code> characters (if <db:code role="parameter">count</db:code> is 0, nothing is done). The formatting properties set in <db:code role="parameter">format</db:code> are merged at display time with the formatting information stored directly in the document, for example as previously set with <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link>'s functions. Note that the document itself remains unmodified by the format set through this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsyntaxhighlighter.xml#format">format</db:link>()</db:member>
<db:member><db:link xlink:href="qsyntaxhighlighter.xml#highlightBlock">highlightBlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFormat-1">
<db:title>[protected] void QSyntaxHighlighter::setFormat(int <db:emphasis>start</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>The specified <db:code role="parameter">color</db:code> is applied to the current text block from the <db:code role="parameter">start</db:code> position for a length of <db:code role="parameter">count</db:code> characters.</db:para>
<db:para>The other attributes of the current text block, e.g. the font and background color, are reset to default values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsyntaxhighlighter.xml#format">format</db:link>()</db:member>
<db:member><db:link xlink:href="qsyntaxhighlighter.xml#highlightBlock">highlightBlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFormat-2">
<db:title>[protected] void QSyntaxHighlighter::setFormat(int <db:emphasis>start</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>The specified <db:code role="parameter">font</db:code> is applied to the current text block from the <db:code role="parameter">start</db:code> position for a length of <db:code role="parameter">count</db:code> characters.</db:para>
<db:para>The other attributes of the current text block, e.g. the font and background color, are reset to default values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsyntaxhighlighter.xml#format">format</db:link>()</db:member>
<db:member><db:link xlink:href="qsyntaxhighlighter.xml#highlightBlock">highlightBlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
