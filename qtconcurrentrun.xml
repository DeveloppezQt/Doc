<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Concurrent Run</db:title>
<db:productname>QtConcurrent</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Concurrent Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A simple way to run a task in a separate thread.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The QtConcurrent::run() function runs a function in a separate thread. The return value of the function is made available through the QFuture API.</db:para>
<db:para>QtConcurrent::run() is an overloaded method. You can think of these overloads as slightly different <db:emphasis>modes</db:emphasis>. In <db:link xlink:href="qtconcurrentrun.xml#concurrent-run-basic-mode">basic mode</db:link>, the function passed to QtConcurrent::run() is able to report merely a single computation result to its caller. In <db:link xlink:href="qtconcurrentrun.xml#concurrent-run-with-promise">run with promise mode</db:link>, the function passed to QtConcurrent::run() can make use of the additional QPromise API, which enables multiple result reporting, progress reporting, suspending the computation when requested by the caller, or stopping the computation on the caller's demand.</db:para>
<db:para>This function is a part of the Qt Concurrent framework.</db:para>
<db:section xml:id="concurrent-run-basic-mode">
<db:title>Concurrent Run (basic mode)</db:title>
<db:para>The function passed to QtConcurrent::run() may report the result through its return value.</db:para>
<db:section xml:id="running-a-function-in-a-separate-thread">
<db:title>Running a Function in a Separate Thread</db:title>
<db:para>To run a function in another thread, use QtConcurrent::run():</db:para>
<db:programlisting language="cpp">extern void aFunction();
QFuture&lt;void&gt; future = QtConcurrent::run(aFunction);
</db:programlisting>
<db:para>This will run <db:code>aFunction</db:code> in a separate thread obtained from the default QThreadPool. You can use the QFuture and QFutureWatcher classes to monitor the status of the function.</db:para>
<db:para>To use a dedicated thread pool, you can pass the QThreadPool as the first argument:</db:para>
<db:programlisting language="cpp">extern void aFunction();
QThreadPool pool;
QFuture&lt;void&gt; future = QtConcurrent::run(&amp;pool, aFunction);
</db:programlisting>
</db:section>
<db:section xml:id="passing-arguments-to-the-function">
<db:title>Passing Arguments to the Function</db:title>
<db:para>Passing arguments to the function is done by adding them to the QtConcurrent::run() call immediately after the function name. For example:</db:para>
<db:programlisting language="cpp">extern void aFunctionWithArguments(int arg1, double arg2, const QString &amp;string);

int integer = ...;
double floatingPoint = ...;
QString string = ...;

QFuture&lt;void&gt; future = QtConcurrent::run(aFunctionWithArguments, integer, floatingPoint, string);
</db:programlisting>
<db:para>A copy of each argument is made at the point where QtConcurrent::run() is called, and these values are passed to the thread when it begins executing the function. Changes made to the arguments after calling QtConcurrent::run() are <db:emphasis>not</db:emphasis> visible to the thread.</db:para>
<db:para>Note that <db:link xlink:href="qtconcurrent.xml#run">QtConcurrent::run</db:link> does not support calling overloaded functions directly. For example, the code below won't compile:</db:para>
<db:programlisting language="cpp">void foo(int arg);
void foo(int arg1, int arg2);
...
QFuture&lt;void&gt; future = QtConcurrent::run(foo, 42);
</db:programlisting>
<db:para>The easiest workaround is to call the overloaded function through lambda:</db:para>
<db:programlisting language="cpp">QFuture&lt;void&gt; future = QtConcurrent::run([] { foo(42); });
</db:programlisting>
<db:para>Or you can tell the compiler which overload to choose by using a <db:code>static_cast</db:code>:</db:para>
<db:programlisting language="cpp">QFuture&lt;void&gt; future = QtConcurrent::run(static_cast&lt;void(*)(int)&gt;(foo), 42);
</db:programlisting>
<db:para>Or qOverload:</db:para>
<db:programlisting language="cpp">QFuture&lt;void&gt; future = QtConcurrent::run(qOverload&lt;int&gt;(foo), 42);
</db:programlisting>
</db:section>
<db:section xml:id="returning-values-from-the-function">
<db:title>Returning Values from the Function</db:title>
<db:para>Any return value from the function is available via QFuture:</db:para>
<db:programlisting language="cpp">extern QString functionReturningAString();
QFuture&lt;QString&gt; future = QtConcurrent::run(functionReturningAString);
...
QString result = future.result();
</db:programlisting>
<db:para>If you don't need the result (for example, because the function returns <db:code>void</db:code>), using the QThreadPool::start() overload taking a function object is more efficient.</db:para>
<db:para>As documented above, passing arguments is done like this:</db:para>
<db:programlisting language="cpp">extern QString someFunction(const QByteArray &amp;input);

QByteArray bytearray = ...;

QFuture&lt;QString&gt; future = QtConcurrent::run(someFunction, bytearray);
...
QString result = future.result();
</db:programlisting>
<db:para>Note that the QFuture::result() function blocks and waits for the result to become available. Use QFutureWatcher to get notification when the function has finished execution and the result is available.</db:para>
</db:section>
<db:section xml:id="additional-api-features">
<db:title>Additional API Features</db:title>
<db:section xml:id="using-member-functions">
<db:title>Using Member Functions</db:title>
<db:para>QtConcurrent::run() also accepts pointers to member functions. The first argument must be either a const reference or a pointer to an instance of the class. Passing by const reference is useful when calling const member functions; passing by pointer is useful for calling non-const member functions that modify the instance.</db:para>
<db:para>For example, calling QByteArray::split() (a const member function) in a separate thread is done like this:</db:para>
<db:programlisting language="cpp">// call 'QList&lt;QByteArray&gt;  QByteArray::split(char sep) const' in a separate thread
QByteArray bytearray = &quot;hello world&quot;;
QFuture&lt;QList&lt;QByteArray&gt; &gt; future = QtConcurrent::run(&amp;QByteArray::split, bytearray, ' ');
...
QList&lt;QByteArray&gt; result = future.result();
</db:programlisting>
<db:para>Calling a non-const member function is done like this:</db:para>
<db:programlisting language="cpp">// call 'void QImage::invertPixels(InvertMode mode)' in a separate thread
QImage image = ...;
QFuture&lt;void&gt; future = QtConcurrent::run(&amp;QImage::invertPixels, &amp;image, QImage::InvertRgba);
...
future.waitForFinished();
// At this point, the pixels in 'image' have been inverted
</db:programlisting>
</db:section>
<db:section xml:id="using-lambda-functions">
<db:title>Using Lambda Functions</db:title>
<db:para>Calling a lambda function is done like this:</db:para>
<db:programlisting language="cpp">QFuture&lt;void&gt; future = QtConcurrent::run([=]() {
    // Code in this block will run in another thread
});
...
</db:programlisting>
<db:para>Calling a function modifies an object passed by reference is done like this:</db:para>
<db:programlisting language="cpp">static void addOne(int &amp;n) { ++n; }
...
int n = 42;
QtConcurrent::run(&amp;addOne, std::ref(n)).waitForFinished(); // n == 43
</db:programlisting>
<db:para>Using callable object is done like this:</db:para>
<db:programlisting language="cpp">struct TestClass
{
    void operator()(int s1) { s = s1; }
    int s = 42;
};

...

TestClass o;

// Modify original object
QtConcurrent::run(std::ref(o), 15).waitForFinished(); // o.s == 15

// Modify a copy of the original object
QtConcurrent::run(o, 42).waitForFinished(); // o.s == 15

// Use a temporary object
QtConcurrent::run(TestClass(), 42).waitForFinished();

// Ill-formed
QtConcurrent::run(&amp;o, 42).waitForFinished(); // compilation error
</db:programlisting>
</db:section>
</db:section>
</db:section>
<db:section xml:id="concurrent-run-with-promise">
<db:title>Concurrent Run With Promise</db:title>
<db:para>The <db:emphasis>Run With Promise</db:emphasis> mode enables more control for the running task compared to <db:emphasis>basic</db:emphasis> mode of QtConcurrent::run(). It allows progress reporting of the running task, reporting multiple results, suspending the execution if it was requested, or canceling the task on caller's demand.</db:para>
<db:section xml:id="the-mandatory-qpromise-argument">
<db:title>The mandatory QPromise argument</db:title>
<db:para>The function passed to QtConcurrent::run() in <db:emphasis>Run With Promise</db:emphasis> mode is expected to have an additional argument of <db:code>QPromise&lt;T&gt; &amp;</db:code> type, where <db:code>T</db:code> is the type of the computation result (it should match the type <db:code>T</db:code> of QFuture&lt;T&gt; returned by QtConcurrent::run()), like e.g.:</db:para>
<db:programlisting language="cpp">extern void aFunction(QPromise&lt;void&gt; &amp;promise);
QFuture&lt;void&gt; future = QtConcurrent::run(aFunction);
</db:programlisting>
<db:para>The <db:code>promise</db:code> argument is instantiated inside the QtConcurrent::run() function, and its reference is passed to the invoked <db:code>aFunction</db:code>, so the user doesn't need to instantiate it, nor pass it explicitly when calling QtConcurrent::run() in this mode.</db:para>
<db:para>The additional argument of QPromise type always needs to appear as a first argument on function's arguments list, like:</db:para>
<db:programlisting language="cpp">extern void aFunction(QPromise&lt;void&gt; &amp;promise, int arg1, const QString &amp;arg2);

int integer = ...;
QString string = ...;

QFuture&lt;void&gt; future = QtConcurrent::run(aFunction, integer, string);
</db:programlisting>
</db:section>
<db:section xml:id="reporting-results">
<db:title>Reporting results</db:title>
<db:para>In contrast to <db:emphasis>basic</db:emphasis> mode of QtConcurrent::run(), the function passed to QtConcurrent::run() in <db:emphasis>Run With Promise</db:emphasis> mode is expected to always return void type. Result reporting is done through the additional argument of QPromise type. It also enables multiple result reporting, like:</db:para>
<db:programlisting language="cpp">void helloWorldFunction(QPromise&lt;QString&gt; &amp;promise)
{
    promise.addResult(&quot;Hello&quot;);
    promise.addResult(&quot;world&quot;);
}

QFuture&lt;QString&gt; future = QtConcurrent::run(helloWorldFunction);
...
QList&lt;QString&gt; results = future.results();
</db:programlisting>
<db:note>
<db:para>There's no need to call QPromise::start() and QPromise::finish() to indicate the beginning and the end of computation (like you would normally do when using QPromise). QtConcurrent::run() will always call them before starting and after finishing the execution.</db:para>
</db:note>
</db:section>
<db:section xml:id="suspending-and-canceling-the-execution">
<db:title>Suspending and canceling the execution</db:title>
<db:para>The QPromise API also enables suspending and canceling the computation, if requested:</db:para>
<db:programlisting language="cpp">void aFunction(QPromise&lt;int&gt; &amp;promise)
{
    for (int i = 0; i &lt; 100; ++i) {
        promise.suspendIfRequested();
        if (promise.isCanceled())
            return;

        // computes the next result, may be time consuming like 1 second
        const int res = ... ;
        promise.addResult(res);
    }
}

QFuture&lt;int&gt; future = QtConcurrent::run(aFunction);

... // user pressed a pause button after 10 seconds
future.suspend();

... // user pressed a resume button after 10 seconds
future.resume();

... // user pressed a cancel button after 10 seconds
future.cancel();
</db:programlisting>
<db:para>The call to <db:code>future.suspend()</db:code> requests the running task to hold its execution. After calling this method, the running task will suspend after the next call to <db:code>promise.suspendIfRequested()</db:code> in its iteration loop. In this case the running task will block on a call to <db:code>promise.suspendIfRequested()</db:code>. The blocked call will unblock after the <db:code>future.resume()</db:code> is called. Note, that internally suspendIfRequested() uses wait condition in order to unblock, so the running thread goes into an idle state instead of wasting its resources when blocked in order to periodically check if the resume request came from the caller's thread.</db:para>
<db:para>The call to <db:code>future.cancel()</db:code> from the last line causes that the next call to <db:code>promise.isCanceled()</db:code> will return <db:code>true</db:code> and <db:code>aFunction</db:code> will return immediately without any further result reporting.</db:para>
<db:note>
<db:para>There's no need to call QPromise::finish() to stop the computation after the cancellation (like you would normally do when using QPromise). QtConcurrent::run() will always call it after finishing the execution.</db:para>
</db:note>
</db:section>
<db:section xml:id="progress-reporting">
<db:title>Progress reporting</db:title>
<db:para>It's also possible to report the progress of a task independently of result reporting, like:</db:para>
<db:programlisting language="cpp">void aFunction(QPromise&lt;int&gt; &amp;promise)
{
    promise.setProgressRange(0, 100);
    int result = 0;
    for (int i = 0; i &lt; 100; ++i) {
        // computes some part of the task
        const int part = ... ;
        result += part;
        promise.setProgressValue(i);
    }
    promise.addResult(result);
}

QFutureWatcher&lt;int&gt; watcher;
QObject::connect(&amp;watcher, &amp;QFutureWatcher::progressValueChanged, [](int progress){
    ... ; // update GUI with a progress
    qDebug() &lt;&lt; &quot;current progress:&quot; &lt;&lt; progress;
});
watcher.setFuture(QtConcurrent::run(aFunction));
</db:programlisting>
<db:para>The caller installs the <db:code>QFutureWatcher</db:code> for the <db:code>QFuture</db:code> returned by QtConcurrent::run() in order to connect to its <db:code>progressValueChanged()</db:code> signal and update e.g. the graphical user interface accordingly.</db:para>
</db:section>
<db:section xml:id="invoking-functions-with-overloaded-operator">
<db:title>Invoking functions with overloaded operator()()</db:title>
<db:para>By default, QtConcurrent::run() doesn't support functors with overloaded operator()() in <db:emphasis>Run With Promise</db:emphasis> mode. In case of overloaded functors the user needs to explicitly specify the result type as a template parameter passed to QtConcurrent::run(), like:</db:para>
<db:programlisting language="cpp">struct Functor {
    void operator()(QPromise&lt;int&gt; &amp;) { }
    void operator()(QPromise&lt;double&gt; &amp;) { }
};

Functor f;
run&lt;double&gt;(f); // this will select the 2nd overload
// run(f);      // error, both candidate overloads potentially match
</db:programlisting>
</db:section>
</db:section>
</db:article>
