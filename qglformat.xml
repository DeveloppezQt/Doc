<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGLFormat Class</db:title>
<db:productname>QtOpenGL</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>QtOpenGL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qglformat.xml">QGLFormat</db:link> class specifies the display format of an OpenGL rendering context.</db:para>
<db:para><db:emphasis role="bold">This class is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGLFormat</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += opengl</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This class is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A display format has several characteristics:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setDoubleBuffer">Double or single buffering.</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setDepth">Depth buffer.</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setRgba">RGBA or color index mode.</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setAlpha">Alpha channel.</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setAccum">Accumulation buffer.</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setStencil">Stencil buffer.</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setStereo">Stereo buffers.</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setDirectRendering">Direct rendering.</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setOverlay">Presence of an overlay.</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setPlane">Plane of an overlay.</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setSampleBuffers">Multisample buffers.</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>You can also specify preferred bit depths for the color buffer, depth buffer, alpha buffer, accumulation buffer and the stencil buffer with the functions: <db:link xlink:href="qglformat.xml#setRedBufferSize">setRedBufferSize</db:link>(), <db:link xlink:href="qglformat.xml#setGreenBufferSize">setGreenBufferSize</db:link>(), <db:link xlink:href="qglformat.xml#setBlueBufferSize">setBlueBufferSize</db:link>(), <db:link xlink:href="qglformat.xml#setDepthBufferSize">setDepthBufferSize</db:link>(), <db:link xlink:href="qglformat.xml#setAlphaBufferSize">setAlphaBufferSize</db:link>(), <db:link xlink:href="qglformat.xml#setAccumBufferSize">setAccumBufferSize</db:link>() and <db:link xlink:href="qglformat.xml#setStencilBufferSize">setStencilBufferSize</db:link>().</db:para>
<db:para>Note that even if you specify that you prefer a 32 bit depth buffer (e.g. with <db:link xlink:href="qglformat.xml#setDepthBufferSize">setDepthBufferSize</db:link>(32)), the format that is chosen may not have a 32 bit depth buffer, even if there is a format available with a 32 bit depth buffer. The main reason for this is how the system dependant picking algorithms work on the different platforms, and some format options may have higher precedence than others.</db:para>
<db:para>You create and tell a <db:link xlink:href="qglformat.xml">QGLFormat</db:link> object what rendering options you want from an OpenGL rendering context.</db:para>
<db:para>OpenGL drivers or accelerated hardware may or may not support advanced features such as alpha channel or stereographic viewing. If you request some features that the driver/hardware does not provide when you create a <db:link xlink:href="qglwidget.xml">QGLWidget</db:link>, you will get a rendering context with the nearest subset of features.</db:para>
<db:para>There are different ways to define the display characteristics of a rendering context. One is to create a <db:link xlink:href="qglformat.xml">QGLFormat</db:link> and make it the default for the entire application:</db:para>
<db:programlisting language="cpp">QGLFormat fmt;
fmt.setAlpha(true);
fmt.setStereo(true);
QGLFormat::setDefaultFormat(fmt);
</db:programlisting>
<db:para>Or you can specify the desired format when creating an object of your <db:link xlink:href="qglwidget.xml">QGLWidget</db:link> subclass:</db:para>
<db:programlisting language="cpp">QGLFormat fmt;
fmt.setDoubleBuffer(false);                 // single buffer
fmt.setDirectRendering(false);              // software rendering
MyGLWidget* myWidget = new MyGLWidget(fmt, ...);
</db:programlisting>
<db:para>After the widget has been created, you can find out which of the requested features the system was able to provide:</db:para>
<db:programlisting language="cpp">QGLFormat fmt;
fmt.setOverlay(true);
fmt.setStereo(true);
MyGLWidget* myWidget = new MyGLWidget(fmt, ...);
if (!myWidget-&amp;gt;format().stereo()) {
    // ok, goggles off
    if (!myWidget-&amp;gt;format().hasOverlay()) {
        qFatal(&quot;Cool hardware required&quot;);
    }
}
</db:programlisting>
<db:para>OpenGL is a trademark of Silicon Graphics, Inc. in the United States and other countries.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglcontext.xml">QGLContext</db:link></db:member>
<db:member><db:link xlink:href="qglwidget.xml">QGLWidget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="OpenGLContextProfile-enum">
<db:title>[since 4.7] enum QGLFormat::OpenGLContextProfile</db:title>
<db:enumsynopsis>
<db:enumname>OpenGLContextProfile</db:enumname>
<db:enumitem>
<db:enumidentifier>NoProfile</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CoreProfile</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompatibilityProfile</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the OpenGL context profiles that can be specified for contexts implementing OpenGL version 3.2 or higher. These profiles are different from OpenGL ES profiles.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::NoProfile</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>OpenGL version is lower than 3.2.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::CoreProfile</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Functionality deprecated in OpenGL version 3.0 is not available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::CompatibilityProfile</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Functionality from earlier OpenGL versions is available.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 4.7.</db:para>
</db:section>
<db:section xml:id="OpenGLVersionFlag-enum">
<db:title>[since 4.2] enum QGLFormat::OpenGLVersionFlag</db:title>
<db:bridgehead renderas="sect2">flags QGLFormat::OpenGLVersionFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>OpenGLVersionFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>OpenGL_Version_None</db:enumidentifier>
<db:enumvalue>0x00000000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL_Version_1_1</db:enumidentifier>
<db:enumvalue>0x00000001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL_Version_1_2</db:enumidentifier>
<db:enumvalue>0x00000002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL_Version_1_3</db:enumidentifier>
<db:enumvalue>0x00000004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL_Version_1_4</db:enumidentifier>
<db:enumvalue>0x00000008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL_Version_1_5</db:enumidentifier>
<db:enumvalue>0x00000010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL_Version_2_0</db:enumidentifier>
<db:enumvalue>0x00000020</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL_Version_2_1</db:enumidentifier>
<db:enumvalue>0x00000040</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL_ES_Common_Version_1_0</db:enumidentifier>
<db:enumvalue>0x00000080</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL_ES_CommonLite_Version_1_0</db:enumidentifier>
<db:enumvalue>0x00000100</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL_ES_Common_Version_1_1</db:enumidentifier>
<db:enumvalue>0x00000200</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL_ES_CommonLite_Version_1_1</db:enumidentifier>
<db:enumvalue>0x00000400</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL_ES_Version_2_0</db:enumidentifier>
<db:enumvalue>0x00000800</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL_Version_3_0</db:enumidentifier>
<db:enumvalue>0x00001000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL_Version_3_1</db:enumidentifier>
<db:enumvalue>0x00002000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL_Version_3_2</db:enumidentifier>
<db:enumvalue>0x00004000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL_Version_3_3</db:enumidentifier>
<db:enumvalue>0x00008000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL_Version_4_0</db:enumidentifier>
<db:enumvalue>0x00010000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL_Version_4_1</db:enumidentifier>
<db:enumvalue>0x00020000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL_Version_4_2</db:enumidentifier>
<db:enumvalue>0x00040000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL_Version_4_3</db:enumidentifier>
<db:enumvalue>0x00080000</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QGLFormat::OpenGLVersionFlags</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum describes the various OpenGL versions that are recognized by Qt. Use the <db:link xlink:href="qglformat.xml#openGLVersionFlags">QGLFormat::openGLVersionFlags</db:link>() function to identify which versions that are supported at runtime.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::OpenGL_Version_None</db:code></db:para>
</db:td>
<db:td><db:code>0x00000000</db:code></db:td>
<db:td>
<db:para>If no OpenGL is present or if no OpenGL context is current.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::OpenGL_Version_1_1</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>OpenGL version 1.1 or higher is present.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::OpenGL_Version_1_2</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>OpenGL version 1.2 or higher is present.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::OpenGL_Version_1_3</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>OpenGL version 1.3 or higher is present.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::OpenGL_Version_1_4</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
<db:td>
<db:para>OpenGL version 1.4 or higher is present.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::OpenGL_Version_1_5</db:code></db:para>
</db:td>
<db:td><db:code>0x00000010</db:code></db:td>
<db:td>
<db:para>OpenGL version 1.5 or higher is present.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::OpenGL_Version_2_0</db:code></db:para>
</db:td>
<db:td><db:code>0x00000020</db:code></db:td>
<db:td>
<db:para>OpenGL version 2.0 or higher is present. Note that version 2.0 supports all the functionality of version 1.5.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::OpenGL_Version_2_1</db:code></db:para>
</db:td>
<db:td><db:code>0x00000040</db:code></db:td>
<db:td>
<db:para>OpenGL version 2.1 or higher is present.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::OpenGL_Version_3_0</db:code></db:para>
</db:td>
<db:td><db:code>0x00001000</db:code></db:td>
<db:td>
<db:para>OpenGL version 3.0 or higher is present.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::OpenGL_Version_3_1</db:code></db:para>
</db:td>
<db:td><db:code>0x00002000</db:code></db:td>
<db:td>
<db:para>OpenGL version 3.1 or higher is present. Note that OpenGL version 3.1 or higher does not necessarily support all the features of version 3.0 and lower.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::OpenGL_Version_3_2</db:code></db:para>
</db:td>
<db:td><db:code>0x00004000</db:code></db:td>
<db:td>
<db:para>OpenGL version 3.2 or higher is present.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::OpenGL_Version_3_3</db:code></db:para>
</db:td>
<db:td><db:code>0x00008000</db:code></db:td>
<db:td>
<db:para>OpenGL version 3.3 or higher is present.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::OpenGL_Version_4_0</db:code></db:para>
</db:td>
<db:td><db:code>0x00010000</db:code></db:td>
<db:td>
<db:para>OpenGL version 4.0 or higher is present.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::OpenGL_Version_4_1</db:code></db:para>
</db:td>
<db:td><db:code>0x00020000</db:code></db:td>
<db:td>
<db:para>OpenGL version 4.1 or higher is present.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::OpenGL_Version_4_2</db:code></db:para>
</db:td>
<db:td><db:code>0x00040000</db:code></db:td>
<db:td>
<db:para>OpenGL version 4.2 or higher is present.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::OpenGL_Version_4_3</db:code></db:para>
</db:td>
<db:td><db:code>0x00080000</db:code></db:td>
<db:td>
<db:para>OpenGL version 4.3 or higher is present.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::OpenGL_ES_CommonLite_Version_1_0</db:code></db:para>
</db:td>
<db:td><db:code>0x00000100</db:code></db:td>
<db:td>
<db:para>OpenGL ES version 1.0 Common Lite or higher is present.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::OpenGL_ES_Common_Version_1_0</db:code></db:para>
</db:td>
<db:td><db:code>0x00000080</db:code></db:td>
<db:td>
<db:para>OpenGL ES version 1.0 Common or higher is present. The Common profile supports all the features of Common Lite.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::OpenGL_ES_CommonLite_Version_1_1</db:code></db:para>
</db:td>
<db:td><db:code>0x00000400</db:code></db:td>
<db:td>
<db:para>OpenGL ES version 1.1 Common Lite or higher is present.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::OpenGL_ES_Common_Version_1_1</db:code></db:para>
</db:td>
<db:td><db:code>0x00000200</db:code></db:td>
<db:td>
<db:para>OpenGL ES version 1.1 Common or higher is present. The Common profile supports all the features of Common Lite.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qglformat.xml">QGLFormat</db:link></db:emphasis>::OpenGL_ES_Version_2_0</db:code></db:para>
</db:td>
<db:td><db:code>0x00000800</db:code></db:td>
<db:td>
<db:para>OpenGL ES version 2.0 or higher is present. Note that OpenGL ES version 2.0 does not support all the features of OpenGL ES 1.x. So if OpenGL_ES_Version_2_0 is returned, none of the ES 1.x flags are returned.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>See also <db:link xlink:href="http://www.opengl.org">http://www.opengl.org</db:link> for more information about the different revisions of OpenGL.</db:para>
<db:para>This enum was introduced or modified in Qt 4.2.</db:para>
<db:para>The <db:code>OpenGLVersionFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;OpenGLVersionFlag&gt;. </db:code>It stores an OR combination of <db:code>OpenGLVersionFlag</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#openGLVersionFlags">openGLVersionFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGLFormat">
<db:title>QGLFormat::QGLFormat()</db:title>
<db:constructorsynopsis>
<db:methodname>QGLFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGLFormat()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qglformat.xml" role="deprecated">QGLFormat</db:link> object with the following default settings:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setDoubleBuffer">Double buffer:</db:link> Enabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setDepth">Depth buffer:</db:link> Enabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setRgba">RGBA:</db:link> Enabled (i.e., color index disabled).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setAlpha">Alpha channel:</db:link> Disabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setAccum">Accumulator buffer:</db:link> Disabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setStencil">Stencil buffer:</db:link> Enabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setStereo">Stereo:</db:link> Disabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setDirectRendering">Direct rendering:</db:link> Enabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setOverlay">Overlay:</db:link> Disabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setPlane">Plane:</db:link> 0 (i.e., normal plane).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setSampleBuffers">Multisample buffers:</db:link> Disabled.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="QGLFormat-1">
<db:title>QGLFormat::QGLFormat(QGL::FormatOptions <db:emphasis>options</db:emphasis>, int <db:emphasis>plane</db:emphasis> = 0)</db:title>
<db:constructorsynopsis>
<db:methodname>QGLFormat</db:methodname>
<db:methodparam>
<db:type>QGL::FormatOptions</db:type>
<db:parameter>options</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>plane</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGLFormat(QGL::FormatOptions options, int plane)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qglformat.xml" role="deprecated">QGLFormat</db:link> object that is a copy of the current <db:link xlink:href="qglformat.xml#defaultFormat">defaultFormat</db:link>().</db:para>
<db:para>If <db:code role="parameter">options</db:code> is not 0, the default format is modified by the specified format options. The <db:code role="parameter">options</db:code> parameter should be <db:link xlink:href="qgl.xml#FormatOption-enum">QGL::FormatOption</db:link> values OR'ed together.</db:para>
<db:para>This constructor makes it easy to specify a certain desired format in classes derived from QGLWidget, for example:</db:para>
<db:programlisting language="cpp">// The rendering in MyGLWidget depends on using
// stencil buffer and alpha channel
MyGLWidget::MyGLWidget(QWidget* parent)
    : QGLWidget(QGLFormat(QGL::StencilBuffer | QGL::AlphaChannel), parent)
{
    if (!format().stencil())
        qWarning(&quot;Could not get stencil buffer; results will be suboptimal&quot;);
    if (!format().alpha())
        qWarning(&quot;Could not get alpha channel; results will be suboptimal&quot;);
    ...
}
</db:programlisting>
<db:para>Note that there are <db:link xlink:href="qgl.xml#FormatOption-enum">QGL::FormatOption</db:link> values to turn format settings both on and off, e.g. <db:link xlink:href="qgl.xml#FormatOption-enum">QGL::DepthBuffer</db:link> and <db:link xlink:href="qgl.xml#FormatOption-enum">QGL::NoDepthBuffer</db:link>, <db:link xlink:href="qgl.xml#FormatOption-enum">QGL::DirectRendering</db:link> and <db:link xlink:href="qgl.xml#FormatOption-enum">QGL::IndirectRendering</db:link>, etc.</db:para>
<db:para>The <db:code role="parameter">plane</db:code> parameter defaults to 0 and is the plane which this format should be associated with. Not all OpenGL implementations supports overlay/underlay rendering planes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#defaultFormat">defaultFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setOption">setOption</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setPlane">setPlane</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QGLFormat-2">
<db:title>QGLFormat::QGLFormat(const QGLFormat &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGLFormat</db:methodname>
<db:methodparam>
<db:type>const QGLFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QGLFormat(const QGLFormat &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGLFormat">
<db:title>QGLFormat::~QGLFormat()</db:title>
<db:destructorsynopsis>
<db:methodname>~QGLFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGLFormat()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qglformat.xml" role="deprecated">QGLFormat</db:link>.</db:para>
</db:section>
<db:section xml:id="accum">
<db:title>bool QGLFormat::accum() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>accum</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool accum() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the accumulation buffer is enabled; otherwise returns <db:code>false</db:code>. The accumulation buffer is disabled by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setAccum">setAccum</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setAccumBufferSize">setAccumBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="accumBufferSize">
<db:title>int QGLFormat::accumBufferSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>accumBufferSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int accumBufferSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the accumulation buffer size.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setAccumBufferSize">setAccumBufferSize</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#accum">accum</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setAccum">setAccum</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="alpha">
<db:title>bool QGLFormat::alpha() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>alpha</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool alpha() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the alpha buffer in the framebuffer is enabled; otherwise returns <db:code>false</db:code>. The alpha buffer is disabled by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setAlpha">setAlpha</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setAlphaBufferSize">setAlphaBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="alphaBufferSize">
<db:title>int QGLFormat::alphaBufferSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>alphaBufferSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int alphaBufferSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the alpha buffer size.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#alpha">alpha</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setAlpha">setAlpha</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setAlphaBufferSize">setAlphaBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blueBufferSize">
<db:title>[since 4.2] int QGLFormat::blueBufferSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>blueBufferSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int blueBufferSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the blue buffer size.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setBlueBufferSize">setBlueBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultFormat">
<db:title>[static] QGLFormat QGLFormat::defaultFormat()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QGLFormat</db:type>
<db:methodname>defaultFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGLFormat defaultFormat()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the default <db:link xlink:href="qglformat.xml" role="deprecated">QGLFormat</db:link> for the application. All QGLWidget objects that are created use this format unless another format is specified, e.g. when they are constructed.</db:para>
<db:para>If no special default format has been set using <db:link xlink:href="qglformat.xml#setDefaultFormat">setDefaultFormat</db:link>(), the default format is the same as that created with <db:link xlink:href="qglformat.xml#QGLFormat">QGLFormat</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setDefaultFormat">setDefaultFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultOverlayFormat">
<db:title>[static] QGLFormat QGLFormat::defaultOverlayFormat()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QGLFormat</db:type>
<db:methodname>defaultOverlayFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGLFormat defaultOverlayFormat()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the default <db:link xlink:href="qglformat.xml" role="deprecated">QGLFormat</db:link> for overlay contexts.</db:para>
<db:para>The default overlay format is:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setDoubleBuffer">Double buffer:</db:link> Disabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setDepth">Depth buffer:</db:link> Disabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setRgba">RGBA:</db:link> Disabled (i.e., color index enabled).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setAlpha">Alpha channel:</db:link> Disabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setAccum">Accumulator buffer:</db:link> Disabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setStencil">Stencil buffer:</db:link> Disabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setStereo">Stereo:</db:link> Disabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setDirectRendering">Direct rendering:</db:link> Enabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setOverlay">Overlay:</db:link> Disabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setSampleBuffers">Multisample buffers:</db:link> Disabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglformat.xml#setPlane">Plane:</db:link> 1 (i.e., first overlay plane).</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setDefaultOverlayFormat">setDefaultOverlayFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setDefaultFormat">setDefaultFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="depth">
<db:title>bool QGLFormat::depth() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>depth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool depth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the depth buffer is enabled; otherwise returns false. The depth buffer is enabled by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setDepth">setDepth</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setDepthBufferSize">setDepthBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="depthBufferSize">
<db:title>int QGLFormat::depthBufferSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>depthBufferSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int depthBufferSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the depth buffer size.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#depth">depth</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setDepth">setDepth</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setDepthBufferSize">setDepthBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="directRendering">
<db:title>bool QGLFormat::directRendering() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>directRendering</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool directRendering() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if direct rendering is enabled; otherwise returns false.</db:para>
<db:para>Direct rendering is enabled by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setDirectRendering">setDirectRendering</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="doubleBuffer">
<db:title>bool QGLFormat::doubleBuffer() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>doubleBuffer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool doubleBuffer() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if double buffering is enabled; otherwise returns false. Double buffering is enabled by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setDoubleBuffer">setDoubleBuffer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromSurfaceFormat">
<db:title>[static] QGLFormat QGLFormat::fromSurfaceFormat(const QSurfaceFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QGLFormat</db:type>
<db:methodname>fromSurfaceFormat</db:methodname>
<db:methodparam>
<db:type>const QSurfaceFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGLFormat fromSurfaceFormat(const QSurfaceFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an OpenGL format for the window format specified by <db:code role="parameter">format</db:code>.</db:para>
</db:section>
<db:section xml:id="greenBufferSize">
<db:title>[since 4.2] int QGLFormat::greenBufferSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>greenBufferSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int greenBufferSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the green buffer size.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setGreenBufferSize">setGreenBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasOpenGL">
<db:title>[static] bool QGLFormat::hasOpenGL()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasOpenGL</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasOpenGL()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the window system has any OpenGL support; otherwise returns <db:code>false</db:code>.</db:para>
<db:warning>
<db:para>This function must not be called until the <db:link xlink:href="qapplication.xml">QApplication</db:link> object has been created.</db:para>
</db:warning>
</db:section>
<db:section xml:id="hasOpenGLOverlays">
<db:title>[static] bool QGLFormat::hasOpenGLOverlays()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasOpenGLOverlays</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasOpenGLOverlays()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the window system supports OpenGL overlays; otherwise returns <db:code>false</db:code>.</db:para>
<db:warning>
<db:para>This function must not be called until the <db:link xlink:href="qapplication.xml">QApplication</db:link> object has been created.</db:para>
</db:warning>
</db:section>
<db:section xml:id="hasOverlay">
<db:title>bool QGLFormat::hasOverlay() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasOverlay</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasOverlay() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if overlay plane is enabled; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Overlay is disabled by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setOverlay">setOverlay</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="majorVersion">
<db:title>[since 4.7] int QGLFormat::majorVersion() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>majorVersion</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int majorVersion() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the OpenGL major version.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setVersion">setVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#minorVersion">minorVersion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minorVersion">
<db:title>[since 4.7] int QGLFormat::minorVersion() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>minorVersion</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int minorVersion() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the OpenGL minor version.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setVersion">setVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#majorVersion">majorVersion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="openGLVersionFlags">
<db:title>[static, since 4.2] QGLFormat::OpenGLVersionFlags QGLFormat::openGLVersionFlags()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QGLFormat::OpenGLVersionFlags</db:type>
<db:methodname>openGLVersionFlags</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGLFormat::OpenGLVersionFlags openGLVersionFlags()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Identifies, at runtime, which OpenGL versions that are supported by the current platform.</db:para>
<db:para>Note that if OpenGL version 1.5 is supported, its predecessors (i.e., version 1.4 and lower) are also supported. To identify the support of a particular feature, like multi texturing, test for the version in which the feature was first introduced (i.e., version 1.3 in the case of multi texturing) to adapt to the largest possible group of runtime platforms.</db:para>
<db:para>This function needs a valid current OpenGL context to work; otherwise it will return <db:link xlink:href="qglformat.xml#OpenGLVersionFlag-enum">OpenGL_Version_None</db:link>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#hasOpenGL">hasOpenGL</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#hasOpenGLOverlays">hasOpenGLOverlays</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="plane">
<db:title>int QGLFormat::plane() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>plane</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int plane() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the plane of this format. The default for normal formats is 0, which means the normal plane. The default for overlay formats is 1, which is the first overlay plane.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setPlane">setPlane</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#defaultOverlayFormat">defaultOverlayFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="profile">
<db:title>[since 4.7] QGLFormat::OpenGLContextProfile QGLFormat::profile() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGLFormat::OpenGLContextProfile</db:type>
<db:methodname>profile</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGLFormat::OpenGLContextProfile profile() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the OpenGL context profile.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setProfile">setProfile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="redBufferSize">
<db:title>[since 4.2] int QGLFormat::redBufferSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>redBufferSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int redBufferSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the red buffer size.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setRedBufferSize">setRedBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rgba">
<db:title>bool QGLFormat::rgba() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>rgba</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool rgba() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if RGBA color mode is set. Returns <db:code>false</db:code> if color index mode is set. The default color mode is RGBA.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setRgba">setRgba</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sampleBuffers">
<db:title>bool QGLFormat::sampleBuffers() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>sampleBuffers</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool sampleBuffers() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if multisample buffer support is enabled; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>The multisample buffer is disabled by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setSampleBuffers">setSampleBuffers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="samples">
<db:title>int QGLFormat::samples() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>samples</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int samples() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of samples per pixel when multisampling is enabled. By default, the highest number of samples that is available is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setSampleBuffers">setSampleBuffers</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#sampleBuffers">sampleBuffers</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setSamples">setSamples</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAccum">
<db:title>void QGLFormat::setAccum(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAccum</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAccum(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enable</db:code> is true enables the accumulation buffer; otherwise disables the accumulation buffer.</db:para>
<db:para>The accumulation buffer is disabled by default.</db:para>
<db:para>The accumulation buffer is used to create blur effects and multiple exposures.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#accum">accum</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setAccumBufferSize">setAccumBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAccumBufferSize">
<db:title>void QGLFormat::setAccumBufferSize(int <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAccumBufferSize</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAccumBufferSize(int size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the preferred accumulation buffer size, where <db:code role="parameter">size</db:code> is the bit depth for each RGBA component.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#accum">accum</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setAccum">setAccum</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#accumBufferSize">accumBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAlpha">
<db:title>void QGLFormat::setAlpha(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAlpha</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAlpha(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enable</db:code> is true enables the alpha buffer; otherwise disables the alpha buffer.</db:para>
<db:para>The alpha buffer is disabled by default.</db:para>
<db:para>The alpha buffer is typically used for implementing transparency or translucency. The A in RGBA specifies the transparency of a pixel.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#alpha">alpha</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setAlphaBufferSize">setAlphaBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAlphaBufferSize">
<db:title>void QGLFormat::setAlphaBufferSize(int <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAlphaBufferSize</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAlphaBufferSize(int size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the preferred alpha buffer size to <db:code role="parameter">size</db:code>. This function implicitly enables the alpha channel.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setRedBufferSize">setRedBufferSize</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setGreenBufferSize">setGreenBufferSize</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#alphaBufferSize">alphaBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBlueBufferSize">
<db:title>[since 4.2] void QGLFormat::setBlueBufferSize(int <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBlueBufferSize</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBlueBufferSize(int size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the preferred blue buffer size to <db:code role="parameter">size</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#blueBufferSize">blueBufferSize</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setRedBufferSize">setRedBufferSize</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setGreenBufferSize">setGreenBufferSize</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setAlphaBufferSize">setAlphaBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDefaultFormat">
<db:title>[static] void QGLFormat::setDefaultFormat(const QGLFormat &amp;<db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setDefaultFormat</db:methodname>
<db:methodparam>
<db:type>const QGLFormat &amp;</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDefaultFormat(const QGLFormat &amp;f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a new default <db:link xlink:href="qglformat.xml" role="deprecated">QGLFormat</db:link> for the application to <db:code role="parameter">f</db:code>. For example, to set single buffering as the default instead of double buffering, your main() might contain code like this:</db:para>
<db:programlisting language="cpp">QApplication a(argc, argv);
QGLFormat f;
f.setDoubleBuffer(false);
QGLFormat::setDefaultFormat(f);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#defaultFormat">defaultFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDefaultOverlayFormat">
<db:title>[static] void QGLFormat::setDefaultOverlayFormat(const QGLFormat &amp;<db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setDefaultOverlayFormat</db:methodname>
<db:methodparam>
<db:type>const QGLFormat &amp;</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDefaultOverlayFormat(const QGLFormat &amp;f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a new default <db:link xlink:href="qglformat.xml" role="deprecated">QGLFormat</db:link> for overlay contexts to <db:code role="parameter">f</db:code>. This format is used whenever a QGLWidget is created with a format that <db:link xlink:href="qglformat.xml#hasOverlay">hasOverlay</db:link>() enabled.</db:para>
<db:para>For example, to get a double buffered overlay context (if available), use code like this:</db:para>
<db:programlisting language="cpp">QGLFormat f = QGLFormat::defaultOverlayFormat();
f.setDoubleBuffer(true);
QGLFormat::setDefaultOverlayFormat(f);
</db:programlisting>
<db:para>As usual, you can find out after widget creation whether the underlying OpenGL system was able to provide the requested specification:</db:para>
<db:programlisting language="cpp">// ...continued from above
MyGLWidget* myWidget = new MyGLWidget(QGLFormat(QGL::HasOverlay), ...);
if (myWidget-&amp;gt;format().hasOverlay()) {
    // Yes, we got an overlay, let's check _its_ format:
    QGLContext* olContext = myWidget-&amp;gt;overlayContext();
    if (olContext-&amp;gt;format().doubleBuffer())
        ; // yes, we got a double buffered overlay
    else
        ; // no, only single buffered overlays are available
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#defaultOverlayFormat">defaultOverlayFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDepth">
<db:title>void QGLFormat::setDepth(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDepth</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDepth(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enable</db:code> is true enables the depth buffer; otherwise disables the depth buffer.</db:para>
<db:para>The depth buffer is enabled by default.</db:para>
<db:para>The purpose of a depth buffer (or Z-buffering) is to remove hidden surfaces. Pixels are assigned Z values based on the distance to the viewer. A pixel with a high Z value is closer to the viewer than a pixel with a low Z value. This information is used to decide whether to draw a pixel or not.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#depth">depth</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setDepthBufferSize">setDepthBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDepthBufferSize">
<db:title>void QGLFormat::setDepthBufferSize(int <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDepthBufferSize</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDepthBufferSize(int size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the minimum depth buffer size to <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#depthBufferSize">depthBufferSize</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setDepth">setDepth</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#depth">depth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDirectRendering">
<db:title>void QGLFormat::setDirectRendering(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDirectRendering</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDirectRendering(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enable</db:code> is true enables direct rendering; otherwise disables direct rendering.</db:para>
<db:para>Direct rendering is enabled by default.</db:para>
<db:para>Enabling this option will make OpenGL bypass the underlying window system and render directly from hardware to the screen, if this is supported by the system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#directRendering">directRendering</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDoubleBuffer">
<db:title>void QGLFormat::setDoubleBuffer(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDoubleBuffer</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDoubleBuffer(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enable</db:code> is true sets double buffering; otherwise sets single buffering.</db:para>
<db:para>Double buffering is enabled by default.</db:para>
<db:para>Double buffering is a technique where graphics are rendered on an off-screen buffer and not directly to the screen. When the drawing has been completed, the program calls a swapBuffers() function to exchange the screen contents with the buffer. The result is flicker-free drawing and often better performance.</db:para>
<db:para>Note that single buffered contexts are currently not supported with EGL.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#doubleBuffer">doubleBuffer</db:link>()</db:member>
<db:member><db:link xlink:href="qglcontext.xml#swapBuffers">QGLContext::swapBuffers</db:link>()</db:member>
<db:member><db:link xlink:href="qglwidget.xml#swapBuffers">QGLWidget::swapBuffers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGreenBufferSize">
<db:title>[since 4.2] void QGLFormat::setGreenBufferSize(int <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setGreenBufferSize</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGreenBufferSize(int size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the preferred green buffer size to <db:code role="parameter">size</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#greenBufferSize">greenBufferSize</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setRedBufferSize">setRedBufferSize</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setBlueBufferSize">setBlueBufferSize</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setAlphaBufferSize">setAlphaBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOption">
<db:title>void QGLFormat::setOption(QGL::FormatOptions <db:emphasis>opt</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOption</db:methodname>
<db:methodparam>
<db:type>QGL::FormatOptions</db:type>
<db:parameter>opt</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOption(QGL::FormatOptions opt)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the format option to <db:code role="parameter">opt</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#testOption">testOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOverlay">
<db:title>void QGLFormat::setOverlay(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOverlay</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOverlay(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enable</db:code> is true enables an overlay plane; otherwise disables the overlay plane.</db:para>
<db:para>Enabling the overlay plane will cause QGLWidget to create an additional context in an overlay plane. See the QGLWidget documentation for further information.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#hasOverlay">hasOverlay</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPlane">
<db:title>void QGLFormat::setPlane(int <db:emphasis>plane</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPlane</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>plane</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPlane(int plane)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the requested plane to <db:code role="parameter">plane</db:code>. 0 is the normal plane, 1 is the first overlay plane, 2 is the second overlay plane, etc.; -1, -2, etc. are underlay planes.</db:para>
<db:para>Note that in contrast to other format specifications, the plane specifications will be matched exactly. This means that if you specify a plane that the underlying OpenGL system cannot provide, an <db:link xlink:href="qglwidget.xml#isValid">invalid</db:link> QGLWidget will be created.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#plane">plane</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProfile">
<db:title>[since 4.7] void QGLFormat::setProfile(QGLFormat::OpenGLContextProfile <db:emphasis>profile</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setProfile</db:methodname>
<db:methodparam>
<db:type>QGLFormat::OpenGLContextProfile</db:type>
<db:parameter>profile</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setProfile(QGLFormat::OpenGLContextProfile profile)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the OpenGL context profile to <db:code role="parameter">profile</db:code>. The <db:code role="parameter">profile</db:code> is ignored if the requested OpenGL version is less than 3.2.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#profile">profile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRedBufferSize">
<db:title>[since 4.2] void QGLFormat::setRedBufferSize(int <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRedBufferSize</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRedBufferSize(int size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the preferred red buffer size to <db:code role="parameter">size</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#redBufferSize">redBufferSize</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setGreenBufferSize">setGreenBufferSize</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setBlueBufferSize">setBlueBufferSize</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setAlphaBufferSize">setAlphaBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRgba">
<db:title>void QGLFormat::setRgba(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRgba</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRgba(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enable</db:code> is true sets RGBA mode. If <db:code role="parameter">enable</db:code> is false sets color index mode.</db:para>
<db:para>The default color mode is RGBA.</db:para>
<db:para>RGBA is the preferred mode for most OpenGL applications. In RGBA color mode you specify colors as red + green + blue + alpha quadruplets.</db:para>
<db:para>In color index mode you specify an index into a color lookup table.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#rgba">rgba</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSampleBuffers">
<db:title>void QGLFormat::setSampleBuffers(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSampleBuffers</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSampleBuffers(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enable</db:code> is true, a GL context with multisample buffer support is picked; otherwise ignored.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#sampleBuffers">sampleBuffers</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setSamples">setSamples</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#samples">samples</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSamples">
<db:title>void QGLFormat::setSamples(int <db:emphasis>numSamples</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSamples</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>numSamples</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSamples(int numSamples)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the preferred number of samples per pixel when multisampling is enabled to <db:code role="parameter">numSamples</db:code>. By default, the highest number of samples available is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setSampleBuffers">setSampleBuffers</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#sampleBuffers">sampleBuffers</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#samples">samples</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStencil">
<db:title>void QGLFormat::setStencil(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStencil</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStencil(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enable</db:code> is true enables the stencil buffer; otherwise disables the stencil buffer.</db:para>
<db:para>The stencil buffer is enabled by default.</db:para>
<db:para>The stencil buffer masks certain parts of the drawing area so that masked parts are not drawn on.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#stencil">stencil</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setStencilBufferSize">setStencilBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStencilBufferSize">
<db:title>void QGLFormat::setStencilBufferSize(int <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStencilBufferSize</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStencilBufferSize(int size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the preferred stencil buffer size to <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#stencilBufferSize">stencilBufferSize</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setStencil">setStencil</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#stencil">stencil</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStereo">
<db:title>void QGLFormat::setStereo(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStereo</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStereo(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enable</db:code> is true enables stereo buffering; otherwise disables stereo buffering.</db:para>
<db:para>Stereo buffering is disabled by default.</db:para>
<db:para>Stereo buffering provides extra color buffers to generate left-eye and right-eye images.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#stereo">stereo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSwapInterval">
<db:title>[since 4.2] void QGLFormat::setSwapInterval(int <db:emphasis>interval</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSwapInterval</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>interval</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSwapInterval(int interval)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the preferred swap interval. This can be used to sync the GL drawing into a system window to the vertical refresh of the screen. Setting an <db:code role="parameter">interval</db:code> value of 0 will turn the vertical refresh syncing off, any value higher than 0 will turn the vertical syncing on.</db:para>
<db:para>Under Windows and under X11, where the <db:code>WGL_EXT_swap_control</db:code> and <db:code>GLX_SGI_video_sync</db:code> extensions are used, the <db:code role="parameter">interval</db:code> parameter can be used to set the minimum number of video frames that are displayed before a buffer swap will occur. In effect, setting the <db:code role="parameter">interval</db:code> to 10, means there will be 10 vertical retraces between every buffer swap.</db:para>
<db:para>Under Windows the <db:code>WGL_EXT_swap_control</db:code> extension has to be present, and under X11 the <db:code>GLX_SGI_video_sync</db:code> extension has to be present.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#swapInterval">swapInterval</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVersion">
<db:title>[since 4.7] void QGLFormat::setVersion(int <db:emphasis>major</db:emphasis>, int <db:emphasis>minor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVersion</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>major</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>minor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVersion(int major, int minor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the OpenGL version to the <db:code role="parameter">major</db:code> and <db:code role="parameter">minor</db:code> numbers. If a context compatible with the requested OpenGL version cannot be created, a context compatible with version 1.x is created instead.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#majorVersion">majorVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#minorVersion">minorVersion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stencil">
<db:title>bool QGLFormat::stencil() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>stencil</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool stencil() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the stencil buffer is enabled; otherwise returns false. The stencil buffer is enabled by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setStencil">setStencil</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setStencilBufferSize">setStencilBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stencilBufferSize">
<db:title>int QGLFormat::stencilBufferSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>stencilBufferSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int stencilBufferSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the stencil buffer size.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#stencil">stencil</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setStencil">setStencil</db:link>()</db:member>
<db:member><db:link xlink:href="qglformat.xml#setStencilBufferSize">setStencilBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stereo">
<db:title>bool QGLFormat::stereo() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>stereo</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool stereo() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if stereo buffering is enabled; otherwise returns false. Stereo buffering is disabled by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setStereo">setStereo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swapInterval">
<db:title>[since 4.2] int QGLFormat::swapInterval() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>swapInterval</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int swapInterval() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the currently set swap interval. -1 is returned if setting the swap interval isn't supported in the system GL implementation.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setSwapInterval">setSwapInterval</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="testOption">
<db:title>bool QGLFormat::testOption(QGL::FormatOptions <db:emphasis>opt</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>testOption</db:methodname>
<db:methodparam>
<db:type>QGL::FormatOptions</db:type>
<db:parameter>opt</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool testOption(QGL::FormatOptions opt) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if format option <db:code role="parameter">opt</db:code> is set; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglformat.xml#setOption">setOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toSurfaceFormat">
<db:title>[static] QSurfaceFormat QGLFormat::toSurfaceFormat(const QGLFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QSurfaceFormat</db:type>
<db:methodname>toSurfaceFormat</db:methodname>
<db:methodparam>
<db:type>const QGLFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSurfaceFormat toSurfaceFormat(const QGLFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a window format for the OpenGL format specified by <db:code role="parameter">format</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QGLFormat &amp;QGLFormat::operator=(const QGLFormat &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QGLFormat &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QGLFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QGLFormat &amp; operator=(const QGLFormat &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this object.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq-1">
<db:title>bool operator!=(const QGLFormat &amp;<db:emphasis>a</db:emphasis>, const QGLFormat &amp;<db:emphasis>b</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QGLFormat &amp;</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QGLFormat &amp;</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QGLFormat &amp;a, const QGLFormat &amp;b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>false</db:code> if all the options of the two <db:link xlink:href="qglformat.xml" role="deprecated">QGLFormat</db:link> objects <db:code role="parameter">a</db:code> and <db:code role="parameter">b</db:code> are equal; otherwise returns <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-1">
<db:title>bool operator==(const QGLFormat &amp;<db:emphasis>a</db:emphasis>, const QGLFormat &amp;<db:emphasis>b</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QGLFormat &amp;</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QGLFormat &amp;</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QGLFormat &amp;a, const QGLFormat &amp;b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if all the options of the two <db:link xlink:href="qglformat.xml" role="deprecated">QGLFormat</db:link> objects <db:code role="parameter">a</db:code> and <db:code role="parameter">b</db:code> are equal; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
