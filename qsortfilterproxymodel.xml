<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QSortFilterProxyModel Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> class provides support for sorting and filtering data passed between another model and a view.</db:para>
<db:para>This class was introduced in Qt 4.1.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSortFilterProxyModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractproxymodel.xml" xlink:role="class">QAbstractProxyModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSortFilterProxyModel is part of <db:simplelist><db:member>model-view</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> can be used for sorting items, filtering out items, or both. The model transforms the structure of a source model by mapping the model indexes it supplies to new indexes, corresponding to different locations, for views to use. This approach allows a given source model to be restructured as far as views are concerned without requiring any transformations on the underlying data, and without duplicating the data in memory.</db:para>
<db:para>Let's assume that we want to sort and filter the items provided by a custom model. The code to set up the model and the view, <db:emphasis>without</db:emphasis> sorting and filtering, would look like this:</db:para>
<db:programlisting language="cpp">        QTreeView *treeView = new QTreeView;
        MyItemModel *model = new MyItemModel(this);

        treeView-&gt;setModel(model);
</db:programlisting>
<db:para>To add sorting and filtering support to MyItemModel, we need to create a <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link>, call <db:link xlink:href="qsortfilterproxymodel.xml#setSourceModel">setSourceModel</db:link>() with the MyItemModel as argument, and install the <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> on the view:</db:para>
<db:programlisting language="cpp">        QTreeView *treeView = new QTreeView;
        MyItemModel *sourceModel = new MyItemModel(this);
        QSortFilterProxyModel *proxyModel = new QSortFilterProxyModel(this);

        proxyModel-&gt;setSourceModel(sourceModel);
        treeView-&gt;setModel(proxyModel);
</db:programlisting>
<db:para>At this point, neither sorting nor filtering is enabled; the original data is displayed in the view. Any changes made through the <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> are applied to the original model.</db:para>
<db:para>The <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> acts as a wrapper for the original model. If you need to convert source <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link>es to sorted/filtered model indexes or vice versa, use <db:link xlink:href="qsortfilterproxymodel.xml#mapToSource">mapToSource</db:link>(), <db:link xlink:href="qsortfilterproxymodel.xml#mapFromSource">mapFromSource</db:link>(), <db:link xlink:href="qsortfilterproxymodel.xml#mapSelectionToSource">mapSelectionToSource</db:link>(), and <db:link xlink:href="qsortfilterproxymodel.xml#mapSelectionFromSource">mapSelectionFromSource</db:link>().</db:para>
<db:note>
<db:para>By default, the model dynamically re-sorts and re-filters data whenever the original model changes. This behavior can be changed by setting the dynamicSortFilter property.</db:para>
</db:note>
<db:para>The <db:link xlink:href="">Basic Sort/Filter Model</db:link> and <db:link xlink:href="">Custom Sort/Filter Model</db:link> examples illustrate how to use <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> to perform basic sorting and filtering and how to subclass it to implement custom behavior.</db:para>
<db:section xml:id="sorting">
<db:title>Sorting</db:title>
<db:para>QTableView and QTreeView have a sortingEnabled property that controls whether the user can sort the view by clicking the view's horizontal header. For example:</db:para>
<db:programlisting language="cpp">        treeView-&gt;setSortingEnabled(true);
</db:programlisting>
<db:para>When this feature is on (the default is off), clicking on a header section sorts the items according to that column. By clicking repeatedly, the user can alternate between ascending and descending order.</db:para>
<db:mediaobject>
<db:alt>A sorted QTreeView</db:alt>
<db:imageobject>
<db:imagedata fileref="images/qsortfilterproxymodel-sorting.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Behind the scene, the view calls the <db:link xlink:href="qsortfilterproxymodel.xml#sort">sort</db:link>() virtual function on the model to reorder the data in the model. To make your data sortable, you can either implement <db:link xlink:href="qsortfilterproxymodel.xml#sort">sort</db:link>() in your model, or use a <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> to wrap your model â€“ <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> provides a generic <db:link xlink:href="qsortfilterproxymodel.xml#sort">sort</db:link>() reimplementation that operates on the sortRole() (<db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link> by default) of the items and that understands several data types, including int, <db:link xlink:href="qstring.xml">QString</db:link>, and <db:link xlink:href="qdatetime.xml">QDateTime</db:link>. For hierarchical models, sorting is applied recursively to all child items. String comparisons are case sensitive by default; this can be changed by setting the sortCaseSensitivity property.</db:para>
<db:para>Custom sorting behavior is achieved by subclassing <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> and reimplementing <db:link xlink:href="qsortfilterproxymodel.xml#lessThan">lessThan</db:link>(), which is used to compare items. For example:</db:para>
<db:programlisting language="cpp">bool MySortFilterProxyModel::lessThan(const QModelIndex &amp;left,
                                      const QModelIndex &amp;right) const
{
    QVariant leftData = sourceModel()-&gt;data(left);
    QVariant rightData = sourceModel()-&gt;data(right);

    if (leftData.type() == QVariant::DateTime) {
        return leftData.toDateTime() &lt; rightData.toDateTime();
    } else {
        QRegExp *emailPattern = new QRegExp(&quot;([\\w\\.]*@[\\w\\.]*)&quot;);

        QString leftString = leftData.toString();
        if(left.column() == 1 &amp;&amp; emailPattern-&gt;indexIn(leftString) != -1)
            leftString = emailPattern-&gt;cap(1);

        QString rightString = rightData.toString();
        if(right.column() == 1 &amp;&amp; emailPattern-&gt;indexIn(rightString) != -1)
            rightString = emailPattern-&gt;cap(1);

        return QString::localeAwareCompare(leftString, rightString) &lt; 0;
    }
}
</db:programlisting>
<db:para>(This code snippet comes from the <db:link xlink:href="">Custom Sort/Filter Model</db:link> example.)</db:para>
<db:para>An alternative approach to sorting is to disable sorting on the view and to impose a certain order to the user. This is done by explicitly calling <db:link xlink:href="qsortfilterproxymodel.xml#sort">sort</db:link>() with the desired column and order as arguments on the <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> (or on the original model if it implements <db:link xlink:href="qsortfilterproxymodel.xml#sort">sort</db:link>()). For example:</db:para>
<db:programlisting language="cpp">        proxyModel-&gt;sort(2, Qt::AscendingOrder);
</db:programlisting>
<db:para><db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> can be sorted by column -1, in which case it returns to the sort order of the underlying source model.</db:para>
</db:section>
<db:section xml:id="filtering">
<db:title>Filtering</db:title>
<db:para>In addition to sorting, <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> can be used to hide items that do not match a certain filter. The filter is specified using a <db:link xlink:href="qregexp.xml">QRegExp</db:link> object and is applied to the filterRole() (<db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link> by default) of each item, for a given column. The <db:link xlink:href="qregexp.xml">QRegExp</db:link> object can be used to match a regular expression, a wildcard pattern, or a fixed string. For example:</db:para>
<db:programlisting language="cpp">        proxyModel-&gt;setFilterRegExp(QRegExp(&quot;.png&quot;, Qt::CaseInsensitive,
                                            QRegExp::FixedString));
        proxyModel-&gt;setFilterKeyColumn(1);
</db:programlisting>
<db:para>For hierarchical models, the filter is applied recursively to all children. If a parent item doesn't match the filter, none of its children will be shown.</db:para>
<db:para>A common use case is to let the user specify the filter regexp, wildcard pattern, or fixed string in a QLineEdit and to connect the <db:link xlink:href="">textChanged()</db:link> signal to setFilterRegExp(), <db:link xlink:href="qsortfilterproxymodel.xml#setFilterWildcard">setFilterWildcard</db:link>(), or <db:link xlink:href="qsortfilterproxymodel.xml#setFilterFixedString">setFilterFixedString</db:link>() to reapply the filter.</db:para>
<db:para>Custom filtering behavior can be achieved by reimplementing the <db:link xlink:href="qsortfilterproxymodel.xml#filterAcceptsRow">filterAcceptsRow</db:link>() and <db:link xlink:href="qsortfilterproxymodel.xml#filterAcceptsColumn">filterAcceptsColumn</db:link>() functions. For example (from the <db:link xlink:href="">Custom Sort/Filter Model</db:link> example), the following implementation ignores the filterKeyColumn property and performs filtering on columns 0, 1, and 2:</db:para>
<db:programlisting language="cpp">bool MySortFilterProxyModel::filterAcceptsRow(int sourceRow,
        const QModelIndex &amp;sourceParent) const
{
    QModelIndex index0 = sourceModel()-&gt;index(sourceRow, 0, sourceParent);
    QModelIndex index1 = sourceModel()-&gt;index(sourceRow, 1, sourceParent);
    QModelIndex index2 = sourceModel()-&gt;index(sourceRow, 2, sourceParent);

    return (sourceModel()-&gt;data(index0).toString().contains(filterRegExp())
            || sourceModel()-&gt;data(index1).toString().contains(filterRegExp()))
            &amp;&amp; dateInRange(sourceModel()-&gt;data(index2).toDate());
}
</db:programlisting>
<db:para>(This code snippet comes from the <db:link xlink:href="">Custom Sort/Filter Model</db:link> example.)</db:para>
<db:para>If you are working with large amounts of filtering and have to invoke <db:link xlink:href="qsortfilterproxymodel.xml#invalidateFilter">invalidateFilter</db:link>() repeatedly, using <db:link xlink:href="qtextstream.xml#reset-1">reset</db:link>() may be more efficient, depending on the implementation of your model. However, <db:link xlink:href="qtextstream.xml#reset-1">reset</db:link>() returns the proxy model to its original state, losing selection information, and will cause the proxy model to be repopulated.</db:para>
</db:section>
<db:section xml:id="subclassing">
<db:title>Subclassing</db:title>
<db:para>Since <db:link xlink:href="qabstractproxymodel.xml">QAbstractProxyModel</db:link> and its subclasses are derived from <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>, much of the same advice about subclassing normal models also applies to proxy models. In addition, it is worth noting that many of the default implementations of functions in this class are written so that they call the equivalent functions in the relevant source model. This simple proxying mechanism may need to be overridden for source models with more complex behavior; for example, if the source model provides a custom <db:link xlink:href="qsortfilterproxymodel.xml#hasChildren">hasChildren</db:link>() implementation, you should also provide one in the proxy model.</db:para>
<db:note>
<db:para>Some general guidelines for subclassing models are available in the <db:link xlink:href="">Model Subclassing Reference</db:link>.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractproxymodel.xml">QAbstractProxyModel</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:member>
<db:member><db:link xlink:href="">Model/View Programming</db:link></db:member>
<db:member><db:link xlink:href="">Basic Sort/Filter Model Example</db:link></db:member>
<db:member><db:link xlink:href="">Custom Sort/Filter Model Example</db:link></db:member>
<db:member><db:link xlink:href="qidentityproxymodel.xml">QIdentityProxyModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSortFilterProxyModel">
<db:title>[explicit] QSortFilterProxyModel::QSortFilterProxyModel(QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a sorting filter model with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSortFilterProxyModel">
<db:title>[virtual noexcept] QSortFilterProxyModel::~QSortFilterProxyModel()</db:title>
<db:para>Destroys this sorting filter model.</db:para>
</db:section>
<db:section xml:id="buddy">
<db:title>[override virtual] QModelIndex QSortFilterProxyModel::buddy(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#buddy" role="function">QAbstractProxyModel::buddy(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="canFetchMore">
<db:title>[override virtual] bool QSortFilterProxyModel::canFetchMore(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#canFetchMore" role="function">QAbstractProxyModel::canFetchMore(const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="columnCount">
<db:title>[override virtual] int QSortFilterProxyModel::columnCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#columnCount" role="function">QAbstractItemModel::columnCount(const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>[override virtual] QVariant QSortFilterProxyModel::data(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#data" role="function">QAbstractProxyModel::data(const QModelIndex &amp;proxyIndex, int role) const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dropMimeData">
<db:title>[override virtual] bool QSortFilterProxyModel::dropMimeData(const QMimeData *<db:emphasis>data</db:emphasis>, Qt::DropAction <db:emphasis>action</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#dropMimeData" role="function">QAbstractItemModel::dropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="fetchMore">
<db:title>[override virtual] void QSortFilterProxyModel::fetchMore(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#fetchMore" role="function">QAbstractProxyModel::fetchMore(const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="filterAcceptsColumn">
<db:title>[virtual protected] bool QSortFilterProxyModel::filterAcceptsColumn(int <db:emphasis>source_column</db:emphasis>, const QModelIndex &amp;<db:emphasis>source_parent</db:emphasis>) const</db:title>
<db:para>Returns true if the item in the column indicated by the given <db:code role="parameter">source_column</db:code> and <db:code role="parameter">source_parent</db:code> should be included in the model; otherwise returns false.</db:para>
<db:para>The default implementation returns true if the value held by the relevant item matches the filter string, wildcard string or regular expression.</db:para>
<db:note>
<db:para>By default, the <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link> is used to determine if the row should be accepted or not. This can be changed by setting the filterRole property.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#filterAcceptsRow">filterAcceptsRow</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterFixedString">setFilterFixedString</db:link>()</db:member>
<db:member><db:link xlink:href="">setFilterRegExp()</db:link></db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterWildcard">setFilterWildcard</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filterAcceptsRow">
<db:title>[virtual protected] bool QSortFilterProxyModel::filterAcceptsRow(int <db:emphasis>source_row</db:emphasis>, const QModelIndex &amp;<db:emphasis>source_parent</db:emphasis>) const</db:title>
<db:para>Returns true if the item in the row indicated by the given <db:code role="parameter">source_row</db:code> and <db:code role="parameter">source_parent</db:code> should be included in the model; otherwise returns false.</db:para>
<db:para>The default implementation returns true if the value held by the relevant item matches the filter string, wildcard string or regular expression.</db:para>
<db:note>
<db:para>By default, the <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link> is used to determine if the row should be accepted or not. This can be changed by setting the filterRole property.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#filterAcceptsColumn">filterAcceptsColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterFixedString">setFilterFixedString</db:link>()</db:member>
<db:member><db:link xlink:href="">setFilterRegExp()</db:link></db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterWildcard">setFilterWildcard</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flags">
<db:title>[override virtual] Qt::ItemFlags QSortFilterProxyModel::flags(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#flags" role="function">QAbstractProxyModel::flags(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="hasChildren">
<db:title>[override virtual] bool QSortFilterProxyModel::hasChildren(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#hasChildren" role="function">QAbstractProxyModel::hasChildren(const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="headerData">
<db:title>[override virtual] QVariant QSortFilterProxyModel::headerData(int <db:emphasis>section</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#headerData" role="function">QAbstractProxyModel::headerData(int section, Qt::Orientation orientation, int role) const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setHeaderData">setHeaderData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="index">
<db:title>[override virtual] QModelIndex QSortFilterProxyModel::index(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#index" role="function">QAbstractItemModel::index(int row, int column, const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="insertColumns">
<db:title>[override virtual] bool QSortFilterProxyModel::insertColumns(int <db:emphasis>column</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#insertColumns" role="function">QAbstractItemModel::insertColumns(int column, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="insertRows">
<db:title>[override virtual] bool QSortFilterProxyModel::insertRows(int <db:emphasis>row</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#insertRows" role="function">QAbstractItemModel::insertRows(int row, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="invalidate">
<db:title>[since 4.3] void QSortFilterProxyModel::invalidate()</db:title>
<db:para>Invalidates the current sorting and filtering.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#invalidateFilter">invalidateFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invalidateFilter">
<db:title>[protected, since 4.3] void QSortFilterProxyModel::invalidateFilter()</db:title>
<db:para>Invalidates the current filtering.</db:para>
<db:para>This function should be called if you are implementing custom filtering (e.g. <db:link xlink:href="qsortfilterproxymodel.xml#filterAcceptsRow">filterAcceptsRow</db:link>()), and your filter parameters have changed.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#invalidate">invalidate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lessThan">
<db:title>[virtual protected] bool QSortFilterProxyModel::lessThan(const QModelIndex &amp;<db:emphasis>left</db:emphasis>, const QModelIndex &amp;<db:emphasis>right</db:emphasis>) const</db:title>
<db:para>Returns true if the value of the item referred to by the given index <db:code role="parameter">left</db:code> is less than the value of the item referred to by the given index <db:code role="parameter">right</db:code>, otherwise returns false.</db:para>
<db:para>This function is used as the &lt; operator when sorting, and handles the following <db:link xlink:href="qvariant.xml">QVariant</db:link> types:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Int</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::UInt</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::LongLong</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::ULongLong</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Float</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Double</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QChar</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QDate</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QTime</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QDateTime</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QString</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Any other type will be converted to a <db:link xlink:href="qstring.xml">QString</db:link> using <db:link xlink:href="qvariant.xml#toString">QVariant::toString</db:link>().</db:para>
<db:para>Comparison of <db:link xlink:href="qstring.xml">QString</db:link>s is case sensitive by default; this can be changed using the sortCaseSensitivity property.</db:para>
<db:para>By default, the <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link> associated with the <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link>es is used for comparisons. This can be changed by setting the sortRole property.</db:para>
<db:note>
<db:para>The indices passed in correspond to the source model.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>sortRole</db:member>
<db:member>sortCaseSensitivity</db:member>
<db:member>dynamicSortFilter</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromSource">
<db:title>[override virtual] QModelIndex QSortFilterProxyModel::mapFromSource(const QModelIndex &amp;<db:emphasis>sourceIndex</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#mapFromSource" role="function">QAbstractProxyModel::mapFromSource(const QModelIndex &amp;sourceIndex) const</db:link>.</db:para>
<db:para>Returns the model index in the <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> given the <db:code role="parameter">sourceIndex</db:code> from the source model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#mapToSource">mapToSource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapSelectionFromSource">
<db:title>[override virtual] QItemSelection QSortFilterProxyModel::mapSelectionFromSource(const QItemSelection &amp;<db:emphasis>sourceSelection</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#mapSelectionFromSource" role="function">QAbstractProxyModel::mapSelectionFromSource(const QItemSelection &amp;sourceSelection) const</db:link>.</db:para>
</db:section>
<db:section xml:id="mapSelectionToSource">
<db:title>[override virtual] QItemSelection QSortFilterProxyModel::mapSelectionToSource(const QItemSelection &amp;<db:emphasis>proxySelection</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#mapSelectionToSource" role="function">QAbstractProxyModel::mapSelectionToSource(const QItemSelection &amp;proxySelection) const</db:link>.</db:para>
</db:section>
<db:section xml:id="mapToSource">
<db:title>[override virtual] QModelIndex QSortFilterProxyModel::mapToSource(const QModelIndex &amp;<db:emphasis>proxyIndex</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#mapToSource" role="function">QAbstractProxyModel::mapToSource(const QModelIndex &amp;proxyIndex) const</db:link>.</db:para>
<db:para>Returns the source model index corresponding to the given <db:code role="parameter">proxyIndex</db:code> from the sorting filter model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#mapFromSource">mapFromSource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="match">
<db:title>[override virtual] QModelIndexList QSortFilterProxyModel::match(const QModelIndex &amp;<db:emphasis>start</db:emphasis>, int <db:emphasis>role</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>hits</db:emphasis> = 1, Qt::MatchFlags <db:emphasis>flags</db:emphasis> = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#match" role="function">QAbstractItemModel::match(const QModelIndex &amp;start, int role, const QVariant &amp;value, int hits, Qt::MatchFlags flags) const</db:link>.</db:para>
</db:section>
<db:section xml:id="mimeData">
<db:title>[override virtual] QMimeData *QSortFilterProxyModel::mimeData(const QModelIndexList &amp;<db:emphasis>indexes</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#mimeData" role="function">QAbstractProxyModel::mimeData(const QModelIndexList &amp;indexes) const</db:link>.</db:para>
</db:section>
<db:section xml:id="mimeTypes">
<db:title>[override virtual] QStringList QSortFilterProxyModel::mimeTypes() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#mimeTypes" role="function">QAbstractProxyModel::mimeTypes() const</db:link>.</db:para>
</db:section>
<db:section xml:id="parent">
<db:title>[override virtual] QModelIndex QSortFilterProxyModel::parent(const QModelIndex &amp;<db:emphasis>child</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#parent" role="function">QAbstractItemModel::parent(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="removeColumns">
<db:title>[override virtual] bool QSortFilterProxyModel::removeColumns(int <db:emphasis>column</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#removeColumns" role="function">QAbstractItemModel::removeColumns(int column, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="removeRows">
<db:title>[override virtual] bool QSortFilterProxyModel::removeRows(int <db:emphasis>row</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#removeRows" role="function">QAbstractItemModel::removeRows(int row, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="rowCount">
<db:title>[override virtual] int QSortFilterProxyModel::rowCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#rowCount" role="function">QAbstractItemModel::rowCount(const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="setData">
<db:title>[override virtual] bool QSortFilterProxyModel::setData(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::EditRole)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#setData" role="function">QAbstractProxyModel::setData(const QModelIndex &amp;index, const QVariant &amp;value, int role)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFilterFixedString">
<db:title>void QSortFilterProxyModel::setFilterFixedString(const QString &amp;<db:emphasis>pattern</db:emphasis>)</db:title>
<db:para>Sets the fixed string used to filter the contents of the source model to the given <db:code role="parameter">pattern</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setFilterCaseSensitivity()</db:link></db:member>
<db:member><db:link xlink:href="">setFilterRegExp()</db:link></db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterWildcard">setFilterWildcard</db:link>()</db:member>
<db:member><db:link xlink:href="">filterRegExp()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFilterRegExp-1">
<db:title>void QSortFilterProxyModel::setFilterRegExp(const QString &amp;<db:emphasis>pattern</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the regular expression used to filter the contents of the source model to <db:code role="parameter">pattern</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setFilterCaseSensitivity()</db:link></db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterWildcard">setFilterWildcard</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterFixedString">setFilterFixedString</db:link>()</db:member>
<db:member><db:link xlink:href="">filterRegExp()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFilterWildcard">
<db:title>void QSortFilterProxyModel::setFilterWildcard(const QString &amp;<db:emphasis>pattern</db:emphasis>)</db:title>
<db:para>Sets the wildcard expression used to filter the contents of the source model to the given <db:code role="parameter">pattern</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setFilterCaseSensitivity()</db:link></db:member>
<db:member><db:link xlink:href="">setFilterRegExp()</db:link></db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterFixedString">setFilterFixedString</db:link>()</db:member>
<db:member><db:link xlink:href="">filterRegExp()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHeaderData">
<db:title>[override virtual] bool QSortFilterProxyModel::setHeaderData(int <db:emphasis>section</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::EditRole)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#setHeaderData" role="function">QAbstractProxyModel::setHeaderData(int section, Qt::Orientation orientation, const QVariant &amp;value, int role)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#headerData">headerData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSourceModel">
<db:title>[override virtual] void QSortFilterProxyModel::setSourceModel(QAbstractItemModel *<db:emphasis>sourceModel</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#setSourceModel" role="function">QAbstractProxyModel::setSourceModel(QAbstractItemModel *sourceModel)</db:link>.</db:para>
</db:section>
<db:section xml:id="sibling">
<db:title>[override virtual] QModelIndex QSortFilterProxyModel::sibling(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>idx</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#sibling" role="function">QAbstractProxyModel::sibling(int row, int column, const QModelIndex &amp;idx) const</db:link>.</db:para>
</db:section>
<db:section xml:id="sort">
<db:title>[override virtual] void QSortFilterProxyModel::sort(int <db:emphasis>column</db:emphasis>, Qt::SortOrder <db:emphasis>order</db:emphasis> = Qt::AscendingOrder)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#sort" role="function">QAbstractProxyModel::sort(int column, Qt::SortOrder order)</db:link>.</db:para>
</db:section>
<db:section xml:id="sortColumn">
<db:title>[since 4.5] int QSortFilterProxyModel::sortColumn() const</db:title>
<db:para>the column currently used for sorting</db:para>
<db:para>This returns the most recently used sort column.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="sortOrder">
<db:title>[since 4.5] Qt::SortOrder QSortFilterProxyModel::sortOrder() const</db:title>
<db:para>the order currently used for sorting</db:para>
<db:para>This returns the most recently used sort order.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="span">
<db:title>[override virtual] QSize QSortFilterProxyModel::span(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#span" role="function">QAbstractProxyModel::span(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="supportedDropActions">
<db:title>[override virtual] Qt::DropActions QSortFilterProxyModel::supportedDropActions() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#supportedDropActions" role="function">QAbstractProxyModel::supportedDropActions() const</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QSortFilterProxyModel</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="clear">
<db:title>[deprecated] void QSortFilterProxyModel::clear()</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This function is obsolete. Use <db:link xlink:href="qsortfilterproxymodel.xml#invalidate">invalidate</db:link>() instead.</db:para>
</db:section>
<db:section xml:id="filterChanged">
<db:title>[protected, deprecated] void QSortFilterProxyModel::filterChanged()</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This function is obsolete. Use <db:link xlink:href="qsortfilterproxymodel.xml#invalidateFilter">invalidateFilter</db:link>() instead.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
