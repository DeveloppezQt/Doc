<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSortFilterProxyModel Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> class provides support for sorting and filtering data passed between another model and a view.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSortFilterProxyModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractproxymodel.xml" xlink:role="class">QAbstractProxyModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSortFilterProxyModel is part of <db:simplelist><db:member>model-view</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> can be used for sorting items, filtering out items, or both. The model transforms the structure of a source model by mapping the model indexes it supplies to new indexes, corresponding to different locations, for views to use. This approach allows a given source model to be restructured as far as views are concerned without requiring any transformations on the underlying data, and without duplicating the data in memory.</db:para>
<db:para>Let's assume that we want to sort and filter the items provided by a custom model. The code to set up the model and the view, <db:emphasis>without</db:emphasis> sorting and filtering, would look like this:</db:para>
<db:programlisting language="cpp">        QTreeView *treeView = new QTreeView;
        MyItemModel *model = new MyItemModel(this);

        treeView-&amp;gt;setModel(model);
</db:programlisting>
<db:para>To add sorting and filtering support to MyItemModel, we need to create a <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link>, call <db:link xlink:href="qsortfilterproxymodel.xml#setSourceModel">setSourceModel</db:link>() with the MyItemModel as argument, and install the <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> on the view:</db:para>
<db:programlisting language="cpp">        QTreeView *treeView = new QTreeView;
        MyItemModel *sourceModel = new MyItemModel(this);
        QSortFilterProxyModel *proxyModel = new QSortFilterProxyModel(this);

        proxyModel-&amp;gt;setSourceModel(sourceModel);
        treeView-&amp;gt;setModel(proxyModel);
</db:programlisting>
<db:para>At this point, neither sorting nor filtering is enabled; the original data is displayed in the view. Any changes made through the <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> are applied to the original model.</db:para>
<db:para>The <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> acts as a wrapper for the original model. If you need to convert source <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link>es to sorted/filtered model indexes or vice versa, use <db:link xlink:href="qsortfilterproxymodel.xml#mapToSource">mapToSource</db:link>(), <db:link xlink:href="qsortfilterproxymodel.xml#mapFromSource">mapFromSource</db:link>(), <db:link xlink:href="qsortfilterproxymodel.xml#mapSelectionToSource">mapSelectionToSource</db:link>(), and <db:link xlink:href="qsortfilterproxymodel.xml#mapSelectionFromSource">mapSelectionFromSource</db:link>().</db:para>
<db:note>
<db:para>By default, the model dynamically re-sorts and re-filters data whenever the original model changes. This behavior can be changed by setting the <db:link xlink:href="qsortfilterproxymodel.xml#dynamicSortFilter-prop">dynamicSortFilter</db:link> property.</db:para>
</db:note>
<db:para>The <db:link xlink:href="">Basic Sort/Filter Model</db:link> and <db:link xlink:href="">Custom Sort/Filter Model</db:link> examples illustrate how to use <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> to perform basic sorting and filtering and how to subclass it to implement custom behavior.</db:para>
<db:section xml:id="sorting">
<db:title>Sorting</db:title>
<db:para>QTableView and QTreeView have a sortingEnabled property that controls whether the user can sort the view by clicking the view's horizontal header. For example:</db:para>
<db:programlisting language="cpp">        treeView-&amp;gt;setSortingEnabled(true);
</db:programlisting>
<db:para>When this feature is on (the default is off), clicking on a header section sorts the items according to that column. By clicking repeatedly, the user can alternate between ascending and descending order.</db:para>
<db:mediaobject>
<db:alt>A sorted QTreeView</db:alt>
<db:imageobject>
<db:imagedata fileref="images/qsortfilterproxymodel-sorting.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Behind the scene, the view calls the <db:link xlink:href="qsortfilterproxymodel.xml#sort">sort</db:link>() virtual function on the model to reorder the data in the model. To make your data sortable, you can either implement <db:link xlink:href="qsortfilterproxymodel.xml#sort">sort</db:link>() in your model, or use a <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> to wrap your model â€“ <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> provides a generic <db:link xlink:href="qsortfilterproxymodel.xml#sort">sort</db:link>() reimplementation that operates on the <db:link xlink:href="qsortfilterproxymodel.xml#sortRole-prop">sortRole</db:link>() (<db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link> by default) of the items and that understands several data types, including int, <db:link xlink:href="qstring.xml">QString</db:link>, and <db:link xlink:href="qdatetime.xml">QDateTime</db:link>. For hierarchical models, sorting is applied recursively to all child items. String comparisons are case sensitive by default; this can be changed by setting the <db:link xlink:href="qsortfilterproxymodel.xml#sortCaseSensitivity-prop">sortCaseSensitivity</db:link> property.</db:para>
<db:para>Custom sorting behavior is achieved by subclassing <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> and reimplementing <db:link xlink:href="qsortfilterproxymodel.xml#lessThan">lessThan</db:link>(), which is used to compare items. For example:</db:para>
<db:programlisting language="cpp">bool MySortFilterProxyModel::lessThan(const QModelIndex &amp;amp;left,
                                      const QModelIndex &amp;amp;right) const
{
    QVariant leftData = sourceModel()-&amp;gt;data(left);
    QVariant rightData = sourceModel()-&amp;gt;data(right);

    if (leftData.userType() == QMetaType::QDateTime) {
        return leftData.toDateTime() &amp;lt; rightData.toDateTime();
    } else {
        static const QRegularExpression emailPattern(&quot;[\\w\\.]*@[\\w\\.]*&quot;);

        QString leftString = leftData.toString();
        if (left.column() == 1) {
            const QRegularExpressionMatch match = emailPattern.match(leftString);
            if (match.hasMatch())
                leftString = match.captured(0);
        }
        QString rightString = rightData.toString();
        if (right.column() == 1) {
            const QRegularExpressionMatch match = emailPattern.match(rightString);
            if (match.hasMatch())
                rightString = match.captured(0);
        }

        return QString::localeAwareCompare(leftString, rightString) &amp;lt; 0;
    }
}
</db:programlisting>
<db:para>(This code snippet comes from the <db:link xlink:href="">Custom Sort/Filter Model</db:link> example.)</db:para>
<db:para>An alternative approach to sorting is to disable sorting on the view and to impose a certain order to the user. This is done by explicitly calling <db:link xlink:href="qsortfilterproxymodel.xml#sort">sort</db:link>() with the desired column and order as arguments on the <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> (or on the original model if it implements <db:link xlink:href="qsortfilterproxymodel.xml#sort">sort</db:link>()). For example:</db:para>
<db:programlisting language="cpp">        proxyModel-&amp;gt;sort(2, Qt::AscendingOrder);
</db:programlisting>
<db:para><db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> can be sorted by column -1, in which case it returns to the sort order of the underlying source model.</db:para>
</db:section>
<db:section xml:id="filtering">
<db:title>Filtering</db:title>
<db:para>In addition to sorting, <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> can be used to hide items that do not match a certain filter. The filter is specified using a <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> object and is applied to the <db:link xlink:href="qsortfilterproxymodel.xml#filterRole-prop">filterRole</db:link>() (<db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link> by default) of each item, for a given column. The <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> object can be used to match a regular expression, a wildcard pattern, or a fixed string. For example:</db:para>
<db:programlisting language="cpp">        proxyModel-&amp;gt;setFilterRegularExpression(QRegularExpression(&quot;\.png&quot;, QRegularExpression::CaseInsensitiveOption));
        proxyModel-&amp;gt;setFilterKeyColumn(1);
</db:programlisting>
<db:para>For hierarchical models, the filter is applied recursively to all children. If a parent item doesn't match the filter, none of its children will be shown.</db:para>
<db:para>A common use case is to let the user specify the filter regular expression, wildcard pattern, or fixed string in a QLineEdit and to connect the <db:link xlink:href="">textChanged()</db:link> signal to <db:link xlink:href="qsortfilterproxymodel.xml#setFilterRegularExpression">setFilterRegularExpression</db:link>(), <db:link xlink:href="qsortfilterproxymodel.xml#setFilterWildcard">setFilterWildcard</db:link>(), or <db:link xlink:href="qsortfilterproxymodel.xml#setFilterFixedString">setFilterFixedString</db:link>() to reapply the filter.</db:para>
<db:para>Custom filtering behavior can be achieved by reimplementing the <db:link xlink:href="qsortfilterproxymodel.xml#filterAcceptsRow">filterAcceptsRow</db:link>() and <db:link xlink:href="qsortfilterproxymodel.xml#filterAcceptsColumn">filterAcceptsColumn</db:link>() functions. For example (from the <db:link xlink:href="">Custom Sort/Filter Model</db:link> example), the following implementation ignores the <db:link xlink:href="qsortfilterproxymodel.xml#filterKeyColumn-prop">filterKeyColumn</db:link> property and performs filtering on columns 0, 1, and 2:</db:para>
<db:programlisting language="cpp">bool MySortFilterProxyModel::filterAcceptsRow(int sourceRow,
                                              const QModelIndex &amp;amp;sourceParent) const
{
    QModelIndex index0 = sourceModel()-&amp;gt;index(sourceRow, 0, sourceParent);
    QModelIndex index1 = sourceModel()-&amp;gt;index(sourceRow, 1, sourceParent);
    QModelIndex index2 = sourceModel()-&amp;gt;index(sourceRow, 2, sourceParent);

    return (sourceModel()-&amp;gt;data(index0).toString().contains(filterRegularExpression())
            || sourceModel()-&amp;gt;data(index1).toString().contains(filterRegularExpression()))
            &amp;amp;&amp;amp; dateInRange(sourceModel()-&amp;gt;data(index2).toDate());
}
</db:programlisting>
<db:para>(This code snippet comes from the <db:link xlink:href="">Custom Sort/Filter Model</db:link> example.)</db:para>
<db:para>If you are working with large amounts of filtering and have to invoke <db:link xlink:href="qsortfilterproxymodel.xml#invalidateFilter">invalidateFilter</db:link>() repeatedly, using <db:link xlink:href="qabstractitemmodel.xml#beginResetModel">beginResetModel</db:link>() / <db:link xlink:href="qabstractitemmodel.xml#endResetModel">endResetModel</db:link>() may be more efficient, depending on the implementation of your model. However, <db:link xlink:href="qabstractitemmodel.xml#beginResetModel">beginResetModel</db:link>() / <db:link xlink:href="qabstractitemmodel.xml#endResetModel">endResetModel</db:link>() returns the proxy model to its original state, losing selection information, and will cause the proxy model to be repopulated.</db:para>
</db:section>
<db:section xml:id="subclassing">
<db:title>Subclassing</db:title>
<db:para>Since <db:link xlink:href="qabstractproxymodel.xml">QAbstractProxyModel</db:link> and its subclasses are derived from <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>, much of the same advice about subclassing normal models also applies to proxy models. In addition, it is worth noting that many of the default implementations of functions in this class are written so that they call the equivalent functions in the relevant source model. This simple proxying mechanism may need to be overridden for source models with more complex behavior; for example, if the source model provides a custom <db:link xlink:href="qsortfilterproxymodel.xml#hasChildren">hasChildren</db:link>() implementation, you should also provide one in the proxy model.</db:para>
<db:note>
<db:para>Some general guidelines for subclassing models are available in the <db:link xlink:href="">Model Subclassing Reference</db:link>.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractproxymodel.xml">QAbstractProxyModel</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:member>
<db:member><db:link xlink:href="">Model/View Programming</db:link></db:member>
<db:member><db:link xlink:href="">Basic Sort/Filter Model Example</db:link></db:member>
<db:member><db:link xlink:href="">Custom Sort/Filter Model Example</db:link></db:member>
<db:member><db:link xlink:href="qidentityproxymodel.xml">QIdentityProxyModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="autoAcceptChildRows-prop">
<db:title>[bindable, since 6.0] autoAcceptChildRows : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>autoAcceptChildRows</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">autoAcceptChildRows</db:synopsisinfo>
<db:synopsisinfo role="setter">setAutoAcceptChildRows</db:synopsisinfo>
<db:synopsisinfo role="notifier">autoAcceptChildRowsChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>if true the proxy model will not filter out children of accepted rows, even if they themselves would be filtered out otherwise.</db:para>
<db:para>The default value is false.</db:para>
<db:para>This property was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#recursiveFilteringEnabled-prop">recursiveFilteringEnabled</db:link></db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#filterAcceptsRow">filterAcceptsRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dynamicSortFilter-prop">
<db:title>[bindable] dynamicSortFilter : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>dynamicSortFilter</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">dynamicSortFilter</db:synopsisinfo>
<db:synopsisinfo role="setter">setDynamicSortFilter</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds whether the proxy model is dynamically sorted and filtered whenever the contents of the source model change</db:para>
<db:para>Note that you should not update the source model through the proxy model when dynamicSortFilter is true. For instance, if you set the proxy model on a QComboBox, then using functions that update the model, e.g., <db:link xlink:href="">addItem()</db:link>, will not work as expected. An alternative is to set dynamicSortFilter to false and call <db:link xlink:href="qsortfilterproxymodel.xml#sort">sort</db:link>() after adding items to the QComboBox.</db:para>
<db:para>The default value is true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#sortColumn">sortColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filterCaseSensitivity-prop">
<db:title>[bindable] filterCaseSensitivity : Qt::CaseSensitivity</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::CaseSensitivity</db:type>
<db:varname>filterCaseSensitivity</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">filterCaseSensitivity</db:synopsisinfo>
<db:synopsisinfo role="setter">setFilterCaseSensitivity</db:synopsisinfo>
<db:synopsisinfo role="notifier">filterCaseSensitivityChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the case sensitivity of the <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> pattern used to filter the contents of the source model.</db:para>
<db:para>By default, the filter is case sensitive.</db:para>
<db:note>
<db:para>Setting this property propagates the new case sensitivity to the <db:link xlink:href="qsortfilterproxymodel.xml#filterRegularExpression-prop">filterRegularExpression</db:link> property, and so breaks its binding. Likewise explicitly setting <db:link xlink:href="qsortfilterproxymodel.xml#filterRegularExpression-prop">filterRegularExpression</db:link> changes the current case sensitivity, thereby breaking its binding.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#filterRegularExpression-prop">filterRegularExpression</db:link></db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#sortCaseSensitivity-prop">sortCaseSensitivity</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filterKeyColumn-prop">
<db:title>[bindable] filterKeyColumn : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>filterKeyColumn</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">filterKeyColumn</db:synopsisinfo>
<db:synopsisinfo role="setter">setFilterKeyColumn</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the column where the key used to filter the contents of the source model is read from.</db:para>
<db:para>The default value is 0. If the value is -1, the keys will be read from all columns.</db:para>
</db:section>
<db:section xml:id="filterRegularExpression-prop">
<db:title>[bindable, since 5.12] filterRegularExpression : QRegularExpression</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRegularExpression</db:type>
<db:varname>filterRegularExpression</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">filterRegularExpression</db:synopsisinfo>
<db:synopsisinfo role="setter">setFilterRegularExpression</db:synopsisinfo>
<db:synopsisinfo role="setter">setFilterRegularExpression</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> used to filter the contents of the source model</db:para>
<db:para>Setting this property through the <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> overload overwrites the current <db:link xlink:href="qsortfilterproxymodel.xml#filterCaseSensitivity-prop">filterCaseSensitivity</db:link>. By default, the <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> is an empty string matching all contents.</db:para>
<db:para>If no <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> or an empty string is set, everything in the source model will be accepted.</db:para>
<db:note>
<db:para>Setting this property propagates the case sensitivity of the new regular expression to the <db:link xlink:href="qsortfilterproxymodel.xml#filterCaseSensitivity-prop">filterCaseSensitivity</db:link> property, and so breaks its binding. Likewise explicitly setting <db:link xlink:href="qsortfilterproxymodel.xml#filterCaseSensitivity-prop">filterCaseSensitivity</db:link> changes the case sensitivity of the current regular expression, thereby breaking its binding.</db:para>
</db:note>
<db:para>This property was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#filterCaseSensitivity-prop">filterCaseSensitivity</db:link></db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterWildcard">setFilterWildcard</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterFixedString">setFilterFixedString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filterRole-prop">
<db:title>[bindable] filterRole : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>filterRole</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">filterRole</db:synopsisinfo>
<db:synopsisinfo role="setter">setFilterRole</db:synopsisinfo>
<db:synopsisinfo role="notifier">filterRoleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the item role that is used to query the source model's data when filtering items.</db:para>
<db:para>The default value is <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#filterAcceptsRow">filterAcceptsRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSortLocaleAware-prop">
<db:title>[bindable] isSortLocaleAware : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>isSortLocaleAware</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isSortLocaleAware</db:synopsisinfo>
<db:synopsisinfo role="setter">setSortLocaleAware</db:synopsisinfo>
<db:synopsisinfo role="notifier">sortLocaleAwareChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the local aware setting used for comparing strings when sorting</db:para>
<db:para>By default, sorting is not local aware.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#sortCaseSensitivity-prop">sortCaseSensitivity</db:link></db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#lessThan">lessThan</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="recursiveFilteringEnabled-prop">
<db:title>[bindable, since 5.10] recursiveFilteringEnabled : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>recursiveFilteringEnabled</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isRecursiveFilteringEnabled</db:synopsisinfo>
<db:synopsisinfo role="setter">setRecursiveFilteringEnabled</db:synopsisinfo>
<db:synopsisinfo role="notifier">recursiveFilteringEnabledChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds whether the filter to be applied recursively on children, and for any matching child, its parents will be visible as well.</db:para>
<db:para>The default value is false.</db:para>
<db:para>This property was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#autoAcceptChildRows-prop">autoAcceptChildRows</db:link></db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#filterAcceptsRow">filterAcceptsRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sortCaseSensitivity-prop">
<db:title>[bindable] sortCaseSensitivity : Qt::CaseSensitivity</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::CaseSensitivity</db:type>
<db:varname>sortCaseSensitivity</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">sortCaseSensitivity</db:synopsisinfo>
<db:synopsisinfo role="setter">setSortCaseSensitivity</db:synopsisinfo>
<db:synopsisinfo role="notifier">sortCaseSensitivityChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the case sensitivity setting used for comparing strings when sorting</db:para>
<db:para>By default, sorting is case sensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#filterCaseSensitivity-prop">filterCaseSensitivity</db:link></db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#lessThan">lessThan</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sortRole-prop">
<db:title>[bindable] sortRole : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>sortRole</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">sortRole</db:synopsisinfo>
<db:synopsisinfo role="setter">setSortRole</db:synopsisinfo>
<db:synopsisinfo role="notifier">sortRoleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the item role that is used to query the source model's data when sorting items.</db:para>
<db:para>The default value is <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#lessThan">lessThan</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSortFilterProxyModel">
<db:title>[explicit] QSortFilterProxyModel::QSortFilterProxyModel(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSortFilterProxyModel</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSortFilterProxyModel(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a sorting filter model with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSortFilterProxyModel">
<db:title>[virtual] QSortFilterProxyModel::~QSortFilterProxyModel()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QSortFilterProxyModel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSortFilterProxyModel()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this sorting filter model.</db:para>
</db:section>
<db:section xml:id="autoAcceptChildRowsChanged">
<db:title>[since 6.0] void QSortFilterProxyModel::autoAcceptChildRowsChanged(bool <db:emphasis>autoAcceptChildRows</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>autoAcceptChildRowsChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>autoAcceptChildRows</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">autoAcceptChildRows</db:synopsisinfo>
<db:synopsisinfo role="signature">void autoAcceptChildRowsChanged(bool autoAcceptChildRows)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signals is emitted when the value of the <db:code role="parameter">autoAcceptChildRows</db:code> property is changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qsortfilterproxymodel.xml#autoAcceptChildRows-prop">autoAcceptChildRows</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#autoAcceptChildRows-prop">autoAcceptChildRows</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="buddy">
<db:title>[override virtual] QModelIndex QSortFilterProxyModel::buddy(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>buddy</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex buddy(const QModelIndex &amp;index) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#buddy" role="function">QAbstractProxyModel::buddy(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="canFetchMore">
<db:title>[override virtual] bool QSortFilterProxyModel::canFetchMore(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>canFetchMore</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool canFetchMore(const QModelIndex &amp;parent) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#canFetchMore" role="function">QAbstractProxyModel::canFetchMore(const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="columnCount">
<db:title>[override virtual] int QSortFilterProxyModel::columnCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>columnCount</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int columnCount(const QModelIndex &amp;parent) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#columnCount" role="function">QAbstractItemModel::columnCount(const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>[override virtual] QVariant QSortFilterProxyModel::data(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>data</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
<db:initializer>Qt::DisplayRole</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant data(const QModelIndex &amp;index, int role) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#data" role="function">QAbstractProxyModel::data(const QModelIndex &amp;proxyIndex, int role) const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dropMimeData">
<db:title>[override virtual] bool QSortFilterProxyModel::dropMimeData(const QMimeData *<db:emphasis>data</db:emphasis>, Qt::DropAction <db:emphasis>action</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>dropMimeData</db:methodname>
<db:methodparam>
<db:type>const QMimeData *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::DropAction</db:type>
<db:parameter>action</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool dropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#dropMimeData" role="function">QAbstractProxyModel::dropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="fetchMore">
<db:title>[override virtual] void QSortFilterProxyModel::fetchMore(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>fetchMore</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fetchMore(const QModelIndex &amp;parent) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#fetchMore" role="function">QAbstractProxyModel::fetchMore(const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="filterAcceptsColumn">
<db:title>[virtual protected] bool QSortFilterProxyModel::filterAcceptsColumn(int <db:emphasis>source_column</db:emphasis>, const QModelIndex &amp;<db:emphasis>source_parent</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>filterAcceptsColumn</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>source_column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>source_parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool filterAcceptsColumn(int source_column, const QModelIndex &amp;source_parent) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the item in the column indicated by the given <db:code role="parameter">source_column</db:code> and <db:code role="parameter">source_parent</db:code> should be included in the model; otherwise returns false.</db:para>
<db:note>
<db:para>The default implementation always returns true. You must reimplement this method to get the described behavior.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#filterAcceptsRow">filterAcceptsRow</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterFixedString">setFilterFixedString</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterRegularExpression">setFilterRegularExpression</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterWildcard">setFilterWildcard</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filterAcceptsRow">
<db:title>[virtual protected] bool QSortFilterProxyModel::filterAcceptsRow(int <db:emphasis>source_row</db:emphasis>, const QModelIndex &amp;<db:emphasis>source_parent</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>filterAcceptsRow</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>source_row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>source_parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool filterAcceptsRow(int source_row, const QModelIndex &amp;source_parent) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the item in the row indicated by the given <db:code role="parameter">source_row</db:code> and <db:code role="parameter">source_parent</db:code> should be included in the model; otherwise returns false.</db:para>
<db:para>The default implementation returns true if the value held by the relevant item matches the filter string, wildcard string or regular expression.</db:para>
<db:note>
<db:para>By default, the <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link> is used to determine if the row should be accepted or not. This can be changed by setting the <db:link xlink:href="qsortfilterproxymodel.xml#filterRole-prop">filterRole</db:link> property.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#filterAcceptsColumn">filterAcceptsColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterFixedString">setFilterFixedString</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterRegularExpression">setFilterRegularExpression</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterWildcard">setFilterWildcard</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filterCaseSensitivityChanged">
<db:title>[since 5.15] void QSortFilterProxyModel::filterCaseSensitivityChanged(Qt::CaseSensitivity <db:emphasis>filterCaseSensitivity</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>filterCaseSensitivityChanged</db:methodname>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>filterCaseSensitivity</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">filterCaseSensitivity</db:synopsisinfo>
<db:synopsisinfo role="signature">void filterCaseSensitivityChanged(Qt::CaseSensitivity filterCaseSensitivity)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the case sensitivity of the filter changes to <db:code role="parameter">filterCaseSensitivity</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qsortfilterproxymodel.xml#filterCaseSensitivity-prop">filterCaseSensitivity</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="filterRoleChanged">
<db:title>[since 5.15] void QSortFilterProxyModel::filterRoleChanged(int <db:emphasis>filterRole</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>filterRoleChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>filterRole</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">filterRole</db:synopsisinfo>
<db:synopsisinfo role="signature">void filterRoleChanged(int filterRole)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the filter role changes to <db:code role="parameter">filterRole</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qsortfilterproxymodel.xml#filterRole-prop">filterRole</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="flags">
<db:title>[override virtual] Qt::ItemFlags QSortFilterProxyModel::flags(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>Qt::ItemFlags</db:type>
<db:methodname>flags</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::ItemFlags flags(const QModelIndex &amp;index) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#flags" role="function">QAbstractProxyModel::flags(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="hasChildren">
<db:title>[override virtual] bool QSortFilterProxyModel::hasChildren(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasChildren</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasChildren(const QModelIndex &amp;parent) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#hasChildren" role="function">QAbstractProxyModel::hasChildren(const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="headerData">
<db:title>[override virtual] QVariant QSortFilterProxyModel::headerData(int <db:emphasis>section</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>headerData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>section</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Orientation</db:type>
<db:parameter>orientation</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
<db:initializer>Qt::DisplayRole</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant headerData(int section, Qt::Orientation orientation, int role) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#headerData" role="function">QAbstractProxyModel::headerData(int section, Qt::Orientation orientation, int role) const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setHeaderData">setHeaderData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="index">
<db:title>[override virtual] QModelIndex QSortFilterProxyModel::index(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>index</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex index(int row, int column, const QModelIndex &amp;parent) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#index" role="function">QAbstractItemModel::index(int row, int column, const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="insertColumns">
<db:title>[override virtual] bool QSortFilterProxyModel::insertColumns(int <db:emphasis>column</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>insertColumns</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool insertColumns(int column, int count, const QModelIndex &amp;parent) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#insertColumns" role="function">QAbstractItemModel::insertColumns(int column, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="insertRows">
<db:title>[override virtual] bool QSortFilterProxyModel::insertRows(int <db:emphasis>row</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>insertRows</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool insertRows(int row, int count, const QModelIndex &amp;parent) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#insertRows" role="function">QAbstractItemModel::insertRows(int row, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="invalidate">
<db:title>void QSortFilterProxyModel::invalidate()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>invalidate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void invalidate()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Invalidates the current sorting and filtering.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#invalidateFilter">invalidateFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invalidateColumnsFilter">
<db:title>[protected, since 6.0] void QSortFilterProxyModel::invalidateColumnsFilter()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>invalidateColumnsFilter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void invalidateColumnsFilter()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Invalidates the current filtering for the columns.</db:para>
<db:para>This function should be called if you are implementing custom filtering (by <db:link xlink:href="qsortfilterproxymodel.xml#filterAcceptsColumn">filterAcceptsColumn</db:link>()), and your filter parameters have changed. This differs from <db:link xlink:href="qsortfilterproxymodel.xml#invalidateFilter">invalidateFilter</db:link>() in that it will not invoke <db:link xlink:href="qsortfilterproxymodel.xml#filterAcceptsRow">filterAcceptsRow</db:link>(), but only <db:link xlink:href="qsortfilterproxymodel.xml#filterAcceptsColumn">filterAcceptsColumn</db:link>(). You can use this instead of <db:link xlink:href="qsortfilterproxymodel.xml#invalidateFilter">invalidateFilter</db:link>() if you want to hide or show a column where the rows don't change.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#invalidate">invalidate</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#invalidateFilter">invalidateFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#invalidateRowsFilter">invalidateRowsFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invalidateFilter">
<db:title>[protected] void QSortFilterProxyModel::invalidateFilter()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>invalidateFilter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void invalidateFilter()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Invalidates the current filtering.</db:para>
<db:para>This function should be called if you are implementing custom filtering (e.g. <db:link xlink:href="qsortfilterproxymodel.xml#filterAcceptsRow">filterAcceptsRow</db:link>()), and your filter parameters have changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#invalidate">invalidate</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#invalidateColumnsFilter">invalidateColumnsFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#invalidateRowsFilter">invalidateRowsFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invalidateRowsFilter">
<db:title>[protected, since 6.0] void QSortFilterProxyModel::invalidateRowsFilter()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>invalidateRowsFilter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void invalidateRowsFilter()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Invalidates the current filtering for the rows.</db:para>
<db:para>This function should be called if you are implementing custom filtering (by <db:link xlink:href="qsortfilterproxymodel.xml#filterAcceptsRow">filterAcceptsRow</db:link>()), and your filter parameters have changed. This differs from <db:link xlink:href="qsortfilterproxymodel.xml#invalidateFilter">invalidateFilter</db:link>() in that it will not invoke <db:link xlink:href="qsortfilterproxymodel.xml#filterAcceptsColumn">filterAcceptsColumn</db:link>(), but only <db:link xlink:href="qsortfilterproxymodel.xml#filterAcceptsRow">filterAcceptsRow</db:link>(). You can use this instead of <db:link xlink:href="qsortfilterproxymodel.xml#invalidateFilter">invalidateFilter</db:link>() if you want to hide or show a row where the columns don't change.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#invalidate">invalidate</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#invalidateFilter">invalidateFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#invalidateColumnsFilter">invalidateColumnsFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lessThan">
<db:title>[virtual protected] bool QSortFilterProxyModel::lessThan(const QModelIndex &amp;<db:emphasis>source_left</db:emphasis>, const QModelIndex &amp;<db:emphasis>source_right</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>lessThan</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>source_left</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>source_right</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool lessThan(const QModelIndex &amp;source_left, const QModelIndex &amp;source_right) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the value of the item referred to by the given index <db:code role="parameter">source_left</db:code> is less than the value of the item referred to by the given index <db:code role="parameter">source_right</db:code>, otherwise returns false.</db:para>
<db:para>This function is used as the &lt; operator when sorting, and handles the following <db:link xlink:href="qvariant.xml">QVariant</db:link> types:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Int</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::UInt</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::LongLong</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::ULongLong</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Float</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Double</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QChar</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QDate</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QTime</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QDateTime</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QString</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Any other type will be converted to a <db:link xlink:href="qstring.xml">QString</db:link> using <db:link xlink:href="qvariant.xml#toString">QVariant::toString</db:link>().</db:para>
<db:para>Comparison of <db:link xlink:href="qstring.xml">QString</db:link>s is case sensitive by default; this can be changed using the <db:link xlink:href="qsortfilterproxymodel.xml#sortCaseSensitivity-prop">sortCaseSensitivity</db:link> property.</db:para>
<db:para>By default, the <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link> associated with the <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link>es is used for comparisons. This can be changed by setting the <db:link xlink:href="qsortfilterproxymodel.xml#sortRole-prop">sortRole</db:link> property.</db:para>
<db:note>
<db:para>The indices passed in correspond to the source model.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#sortRole-prop">sortRole</db:link></db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#sortCaseSensitivity-prop">sortCaseSensitivity</db:link></db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#dynamicSortFilter-prop">dynamicSortFilter</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromSource">
<db:title>[override virtual] QModelIndex QSortFilterProxyModel::mapFromSource(const QModelIndex &amp;<db:emphasis>sourceIndex</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>mapFromSource</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>sourceIndex</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex mapFromSource(const QModelIndex &amp;sourceIndex) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#mapFromSource" role="function">QAbstractProxyModel::mapFromSource(const QModelIndex &amp;sourceIndex) const</db:link>.</db:para>
<db:para>Returns the model index in the <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> given the <db:code role="parameter">sourceIndex</db:code> from the source model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#mapToSource">mapToSource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapSelectionFromSource">
<db:title>[override virtual] QItemSelection QSortFilterProxyModel::mapSelectionFromSource(const QItemSelection &amp;<db:emphasis>sourceSelection</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QItemSelection</db:type>
<db:methodname>mapSelectionFromSource</db:methodname>
<db:methodparam>
<db:type>const QItemSelection &amp;</db:type>
<db:parameter>sourceSelection</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QItemSelection mapSelectionFromSource(const QItemSelection &amp;sourceSelection) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#mapSelectionFromSource" role="function">QAbstractProxyModel::mapSelectionFromSource(const QItemSelection &amp;sourceSelection) const</db:link>.</db:para>
</db:section>
<db:section xml:id="mapSelectionToSource">
<db:title>[override virtual] QItemSelection QSortFilterProxyModel::mapSelectionToSource(const QItemSelection &amp;<db:emphasis>proxySelection</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QItemSelection</db:type>
<db:methodname>mapSelectionToSource</db:methodname>
<db:methodparam>
<db:type>const QItemSelection &amp;</db:type>
<db:parameter>proxySelection</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QItemSelection mapSelectionToSource(const QItemSelection &amp;proxySelection) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#mapSelectionToSource" role="function">QAbstractProxyModel::mapSelectionToSource(const QItemSelection &amp;proxySelection) const</db:link>.</db:para>
</db:section>
<db:section xml:id="mapToSource">
<db:title>[override virtual] QModelIndex QSortFilterProxyModel::mapToSource(const QModelIndex &amp;<db:emphasis>proxyIndex</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>mapToSource</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>proxyIndex</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex mapToSource(const QModelIndex &amp;proxyIndex) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#mapToSource" role="function">QAbstractProxyModel::mapToSource(const QModelIndex &amp;proxyIndex) const</db:link>.</db:para>
<db:para>Returns the source model index corresponding to the given <db:code role="parameter">proxyIndex</db:code> from the sorting filter model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#mapFromSource">mapFromSource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="match">
<db:title>[override virtual] QModelIndexList QSortFilterProxyModel::match(const QModelIndex &amp;<db:emphasis>start</db:emphasis>, int <db:emphasis>role</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>hits</db:emphasis> = 1, Qt::MatchFlags <db:emphasis>flags</db:emphasis> = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QModelIndexList</db:type>
<db:methodname>match</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>hits</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::MatchFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndexList match(const QModelIndex &amp;start, int role, const QVariant &amp;value, int hits, Qt::MatchFlags flags) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#match" role="function">QAbstractItemModel::match(const QModelIndex &amp;start, int role, const QVariant &amp;value, int hits, Qt::MatchFlags flags) const</db:link>.</db:para>
</db:section>
<db:section xml:id="mimeData">
<db:title>[override virtual] QMimeData *QSortFilterProxyModel::mimeData(const QModelIndexList &amp;<db:emphasis>indexes</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QMimeData *</db:type>
<db:methodname>mimeData</db:methodname>
<db:methodparam>
<db:type>const QModelIndexList &amp;</db:type>
<db:parameter>indexes</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMimeData * mimeData(const QModelIndexList &amp;indexes) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#mimeData" role="function">QAbstractProxyModel::mimeData(const QModelIndexList &amp;indexes) const</db:link>.</db:para>
</db:section>
<db:section xml:id="mimeTypes">
<db:title>[override virtual] QStringList QSortFilterProxyModel::mimeTypes() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>mimeTypes</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList mimeTypes() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#mimeTypes" role="function">QAbstractProxyModel::mimeTypes() const</db:link>.</db:para>
</db:section>
<db:section xml:id="parent">
<db:title>[override virtual] QModelIndex QSortFilterProxyModel::parent(const QModelIndex &amp;<db:emphasis>child</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>parent</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>child</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex parent(const QModelIndex &amp;child) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#parent" role="function">QAbstractItemModel::parent(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="recursiveFilteringEnabledChanged">
<db:title>[since 5.15] void QSortFilterProxyModel::recursiveFilteringEnabledChanged(bool <db:emphasis>recursiveFilteringEnabled</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>recursiveFilteringEnabledChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>recursiveFilteringEnabled</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">recursiveFilteringEnabled</db:synopsisinfo>
<db:synopsisinfo role="signature">void recursiveFilteringEnabledChanged(bool recursiveFilteringEnabled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the recursive filter setting is changed to <db:code role="parameter">recursiveFilteringEnabled</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qsortfilterproxymodel.xml#recursiveFilteringEnabled-prop">recursiveFilteringEnabled</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="removeColumns">
<db:title>[override virtual] bool QSortFilterProxyModel::removeColumns(int <db:emphasis>column</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>removeColumns</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removeColumns(int column, int count, const QModelIndex &amp;parent) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#removeColumns" role="function">QAbstractItemModel::removeColumns(int column, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="removeRows">
<db:title>[override virtual] bool QSortFilterProxyModel::removeRows(int <db:emphasis>row</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>removeRows</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removeRows(int row, int count, const QModelIndex &amp;parent) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#removeRows" role="function">QAbstractItemModel::removeRows(int row, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="rowCount">
<db:title>[override virtual] int QSortFilterProxyModel::rowCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>rowCount</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int rowCount(const QModelIndex &amp;parent) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#rowCount" role="function">QAbstractItemModel::rowCount(const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="setData">
<db:title>[override virtual] bool QSortFilterProxyModel::setData(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::EditRole)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
<db:initializer>Qt::EditRole</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setData(const QModelIndex &amp;index, const QVariant &amp;value, int role) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#setData" role="function">QAbstractProxyModel::setData(const QModelIndex &amp;index, const QVariant &amp;value, int role)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFilterFixedString">
<db:title>void QSortFilterProxyModel::setFilterFixedString(const QString &amp;<db:emphasis>pattern</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFilterFixedString</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>pattern</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFilterFixedString(const QString &amp;pattern)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the fixed string used to filter the contents of the source model to the given <db:code role="parameter">pattern</db:code>.</db:para>
<db:para>This method will reset the regular expression options but respect case sensitivity.</db:para>
<db:note>
<db:para>Calling this method updates the regular expression, thereby breaking the binding for <db:link xlink:href="qsortfilterproxymodel.xml#filterRegularExpression-prop">filterRegularExpression</db:link>. However it has no effect on the <db:link xlink:href="qsortfilterproxymodel.xml#filterCaseSensitivity-prop">filterCaseSensitivity</db:link> bindings.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#filterCaseSensitivity-prop">setFilterCaseSensitivity</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterRegularExpression">setFilterRegularExpression</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterWildcard">setFilterWildcard</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#filterRegularExpression-prop">filterRegularExpression</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFilterRegularExpression">
<db:title>[since 5.12] void QSortFilterProxyModel::setFilterRegularExpression(const QString &amp;<db:emphasis>pattern</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFilterRegularExpression</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>pattern</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">filterRegularExpression</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFilterRegularExpression(const QString &amp;pattern)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the regular expression used to filter the contents of the source model to <db:code role="parameter">pattern</db:code>.</db:para>
<db:para>This method should be preferred for new code as it will use <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> internally.</db:para>
<db:para>This method will reset the regular expression options but respect case sensitivity.</db:para>
<db:note>
<db:para>Calling this method updates the regular expression, thereby breaking the binding for <db:link xlink:href="qsortfilterproxymodel.xml#filterRegularExpression-prop">filterRegularExpression</db:link>. However it has no effect on the <db:link xlink:href="qsortfilterproxymodel.xml#filterCaseSensitivity-prop">filterCaseSensitivity</db:link> bindings.</db:para>
</db:note>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qsortfilterproxymodel.xml#filterRegularExpression-prop">filterRegularExpression</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#filterCaseSensitivity-prop">setFilterCaseSensitivity</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterWildcard">setFilterWildcard</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterFixedString">setFilterFixedString</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#filterRegularExpression-prop">filterRegularExpression</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFilterWildcard">
<db:title>void QSortFilterProxyModel::setFilterWildcard(const QString &amp;<db:emphasis>pattern</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFilterWildcard</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>pattern</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFilterWildcard(const QString &amp;pattern)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the wildcard expression used to filter the contents of the source model to the given <db:code role="parameter">pattern</db:code>.</db:para>
<db:para>This method will reset the regular expression options but respect case sensitivity.</db:para>
<db:note>
<db:para>Calling this method updates the regular expression, thereby breaking the binding for <db:link xlink:href="qsortfilterproxymodel.xml#filterRegularExpression-prop">filterRegularExpression</db:link>. However it has no effect on the <db:link xlink:href="qsortfilterproxymodel.xml#filterCaseSensitivity-prop">filterCaseSensitivity</db:link> bindings.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#filterCaseSensitivity-prop">setFilterCaseSensitivity</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterRegularExpression">setFilterRegularExpression</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#setFilterFixedString">setFilterFixedString</db:link>()</db:member>
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#filterRegularExpression-prop">filterRegularExpression</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHeaderData">
<db:title>[override virtual] bool QSortFilterProxyModel::setHeaderData(int <db:emphasis>section</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::EditRole)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setHeaderData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>section</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Orientation</db:type>
<db:parameter>orientation</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
<db:initializer>Qt::EditRole</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setHeaderData(int section, Qt::Orientation orientation, const QVariant &amp;value, int role) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#setHeaderData" role="function">QAbstractProxyModel::setHeaderData(int section, Qt::Orientation orientation, const QVariant &amp;value, int role)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#headerData">headerData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSourceModel">
<db:title>[override virtual] void QSortFilterProxyModel::setSourceModel(QAbstractItemModel *<db:emphasis>sourceModel</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setSourceModel</db:methodname>
<db:methodparam>
<db:type>QAbstractItemModel *</db:type>
<db:parameter>sourceModel</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSourceModel(QAbstractItemModel *sourceModel) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#setSourceModel" role="function">QAbstractProxyModel::setSourceModel(QAbstractItemModel *sourceModel)</db:link>.</db:para>
</db:section>
<db:section xml:id="sibling">
<db:title>[override virtual] QModelIndex QSortFilterProxyModel::sibling(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>idx</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>sibling</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>idx</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex sibling(int row, int column, const QModelIndex &amp;idx) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#sibling" role="function">QAbstractProxyModel::sibling(int row, int column, const QModelIndex &amp;idx) const</db:link>.</db:para>
</db:section>
<db:section xml:id="sort">
<db:title>[override virtual] void QSortFilterProxyModel::sort(int <db:emphasis>column</db:emphasis>, Qt::SortOrder <db:emphasis>order</db:emphasis> = Qt::AscendingOrder)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>sort</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::SortOrder</db:type>
<db:parameter>order</db:parameter>
<db:initializer>Qt::AscendingOrder</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sort(int column, Qt::SortOrder order) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#sort" role="function">QAbstractProxyModel::sort(int column, Qt::SortOrder order)</db:link>.</db:para>
</db:section>
<db:section xml:id="sortCaseSensitivityChanged">
<db:title>[since 5.15] void QSortFilterProxyModel::sortCaseSensitivityChanged(Qt::CaseSensitivity <db:emphasis>sortCaseSensitivity</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sortCaseSensitivityChanged</db:methodname>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>sortCaseSensitivity</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">sortCaseSensitivity</db:synopsisinfo>
<db:synopsisinfo role="signature">void sortCaseSensitivityChanged(Qt::CaseSensitivity sortCaseSensitivity)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the case sensitivity for sorting changes to <db:code role="parameter">sortCaseSensitivity</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qsortfilterproxymodel.xml#sortCaseSensitivity-prop">sortCaseSensitivity</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="sortColumn">
<db:title>int QSortFilterProxyModel::sortColumn() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>sortColumn</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int sortColumn() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the column currently used for sorting</db:para>
<db:para>This returns the most recently used sort column. The default value is -1, which means that this proxy model does not sort.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#sort">sort</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sortLocaleAwareChanged">
<db:title>[since 5.15] void QSortFilterProxyModel::sortLocaleAwareChanged(bool <db:emphasis>sortLocaleAware</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sortLocaleAwareChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>sortLocaleAware</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">isSortLocaleAware</db:synopsisinfo>
<db:synopsisinfo role="signature">void sortLocaleAwareChanged(bool sortLocaleAware)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the locale aware setting changes to <db:code role="parameter">sortLocaleAware</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qsortfilterproxymodel.xml#isSortLocaleAware-prop">isSortLocaleAware</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="sortOrder">
<db:title>Qt::SortOrder QSortFilterProxyModel::sortOrder() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::SortOrder</db:type>
<db:methodname>sortOrder</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::SortOrder sortOrder() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the order currently used for sorting</db:para>
<db:para>This returns the most recently used sort order. The default value is <db:link xlink:href="qt.xml#SortOrder-enum">Qt::AscendingOrder</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsortfilterproxymodel.xml#sort">sort</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sortRoleChanged">
<db:title>[since 5.15] void QSortFilterProxyModel::sortRoleChanged(int <db:emphasis>sortRole</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sortRoleChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sortRole</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">sortRole</db:synopsisinfo>
<db:synopsisinfo role="signature">void sortRoleChanged(int sortRole)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the sort role changes to <db:code role="parameter">sortRole</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qsortfilterproxymodel.xml#sortRole-prop">sortRole</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="span">
<db:title>[override virtual] QSize QSortFilterProxyModel::span(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>span</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize span(const QModelIndex &amp;index) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#span" role="function">QAbstractProxyModel::span(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="supportedDropActions">
<db:title>[override virtual] Qt::DropActions QSortFilterProxyModel::supportedDropActions() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>Qt::DropActions</db:type>
<db:methodname>supportedDropActions</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::DropActions supportedDropActions() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#supportedDropActions" role="function">QAbstractProxyModel::supportedDropActions() const</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
