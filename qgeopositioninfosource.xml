<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoPositionInfoSource Class</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link> class is an abstract base class for the distribution of positional updates.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoPositionInfoSource</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += positioning</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qnmeapositioninfosource.xml" xlink:role="class">QNmeaPositionInfoSource</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGeoPositionInfoSource is part of <db:simplelist><db:member>QtPositioning-positioning</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The static function <db:link xlink:href="qgeopositioninfosource.xml#createDefaultSource">QGeoPositionInfoSource::createDefaultSource</db:link>() creates a default position source that is appropriate for the platform, if one is available. Otherwise, <db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link> will check for available plugins that implement the <db:link xlink:href="qgeopositioninfosourcefactory.xml">QGeoPositionInfoSourceFactory</db:link> interface.</db:para>
<db:para>Users of a <db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link> subclass can request the current position using <db:link xlink:href="qgeopositioninfosource.xml#requestUpdate">requestUpdate</db:link>(), or start and stop regular position updates using <db:link xlink:href="qgeopositioninfosource.xml#startUpdates">startUpdates</db:link>() and <db:link xlink:href="qgeopositioninfosource.xml#stopUpdates">stopUpdates</db:link>(). When an update is available, <db:link xlink:href="qgeopositioninfosource.xml#positionUpdated">positionUpdated</db:link>() is emitted. The last known position can be accessed with <db:link xlink:href="qgeopositioninfosource.xml#lastKnownPosition">lastKnownPosition</db:link>().</db:para>
<db:para>If regular position updates are required, <db:link xlink:href="qgeopositioninfosource.xml#updateInterval-prop">setUpdateInterval</db:link>() can be used to specify how often these updates should be emitted. If no interval is specified, updates are simply provided whenever they are available. For example:</db:para>
<db:programlisting language="cpp">// Emit updates every 10 seconds if available
QGeoPositionInfoSource *source = QGeoPositionInfoSource::createDefaultSource(0);
if (source)
    source-&gt;setUpdateInterval(10000);
</db:programlisting>
<db:para>To remove an update interval that was previously set, call <db:link xlink:href="qgeopositioninfosource.xml#updateInterval-prop">setUpdateInterval</db:link>() with a value of 0.</db:para>
<db:para>Note that the position source may have a minimum value requirement for update intervals, as returned by <db:link xlink:href="qgeopositioninfosource.xml#minimumUpdateInterval-prop">minimumUpdateInterval</db:link>().</db:para>
<db:warning>
<db:para>On Windows CE it is not possible to detect if a device is GPS enabled. The default position source on a Windows CE device without GPS support will never provide any position data.</db:para>
</db:warning>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QGeoPositionInfoSource::Error</db:title>
<db:para>The Error enumeration represents the errors which can occur.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link></db:emphasis>::AccessError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The connection setup to the remote positioning backend failed because the application lacked the required privileges.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link></db:emphasis>::ClosedError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The remote positioning backend closed the connection, which happens for example in case the user is switching location services to off. As soon as the location service is re-enabled regular updates will resume.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>No error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link></db:emphasis>::UnknownSourceError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>An unidentified error occurred.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="PositioningMethod-enum">
<db:title>enum QGeoPositionInfoSource::PositioningMethod</db:title>
<db:bridgehead renderas="sect2">flags QGeoPositionInfoSource::PositioningMethods</db:bridgehead>
<db:para>Defines the types of positioning methods.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link></db:emphasis>::NoPositioningMethods</db:code></db:para>
</db:td>
<db:td><db:code>0x00000000</db:code></db:td>
<db:td>
<db:para>None of the positioning methods.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link></db:emphasis>::SatellitePositioningMethods</db:code></db:para>
</db:td>
<db:td><db:code>0x000000ff</db:code></db:td>
<db:td>
<db:para>Satellite-based positioning methods such as GPS or GLONASS.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link></db:emphasis>::NonSatellitePositioningMethods</db:code></db:para>
</db:td>
<db:td><db:code>0xffffff00</db:code></db:td>
<db:td>
<db:para>Other positioning methods such as 3GPP cell identifier or WiFi based positioning.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link></db:emphasis>::AllPositioningMethods</db:code></db:para>
</db:td>
<db:td><db:code>0xffffffff</db:code></db:td>
<db:td>
<db:para>Satellite-based positioning methods as soon as available. Otherwise non-satellite based methods.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>PositioningMethods</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;PositioningMethod&gt;. </db:code>It stores an OR combination of <db:code>PositioningMethod</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="minimumUpdateInterval-prop">
<db:title>[read-only] minimumUpdateInterval : const int</db:title>
<db:para>This property holds the minimum time (in milliseconds) required to retrieve a position update.</db:para>
<db:para>This is the minimum value accepted by <db:link xlink:href="qgeopositioninfosource.xml#updateInterval-prop">setUpdateInterval</db:link>() and <db:link xlink:href="qgeopositioninfosource.xml#requestUpdate">requestUpdate</db:link>().</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>virtual <db:type>int</db:type> <db:emphasis role="bold">minimumUpdateInterval</db:emphasis>() const = 0</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="sourceName-prop">
<db:title>[read-only] sourceName : const QString</db:title>
<db:para>This property holds the unique name of the position source implementation in use.</db:para>
<db:para>This is the same name that can be passed to <db:link xlink:href="qgeopositioninfosource.xml#createSource">createSource</db:link>() in order to create a new instance of a particular position source implementation.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">sourceName</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="updateInterval-prop">
<db:title>updateInterval : int</db:title>
<db:para>This property holds the requested interval in milliseconds between each update.</db:para>
<db:para>If the update interval is not set (or is set to 0) the source will provide updates as often as necessary.</db:para>
<db:para>If the update interval is set, the source will provide updates at an interval as close to the requested interval as possible. If the requested interval is less than the <db:link xlink:href="qgeopositioninfosource.xml#minimumUpdateInterval-prop">minimumUpdateInterval</db:link>(), the minimum interval is used instead.</db:para>
<db:para>Changes to the update interval will happen as soon as is practical, however the time the change takes may vary between implementations. Whether or not the elapsed time from the previous interval is counted as part of the new interval is also implementation dependent.</db:para>
<db:para>The default value for this property is 0.</db:para>
<db:para>Note: Subclass implementations must call the base implementation of setUpdateInterval() so that updateInterval() returns the correct value.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">updateInterval</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para>virtual <db:type>void</db:type> <db:emphasis role="bold">setUpdateInterval</db:emphasis>(<db:type>int</db:type> <db:emphasis>msec</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGeoPositionInfoSource">
<db:title>[explicit] QGeoPositionInfoSource::QGeoPositionInfoSource(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Creates a position source with the specified <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGeoPositionInfoSource">
<db:title>[virtual noexcept] QGeoPositionInfoSource::~QGeoPositionInfoSource()</db:title>
<db:para>Destroys the position source.</db:para>
</db:section>
<db:section xml:id="availableSources">
<db:title>[static] QStringList QGeoPositionInfoSource::availableSources()</db:title>
<db:para>Returns a list of available source plugins. This includes any default backend plugin for the current platform.</db:para>
</db:section>
<db:section xml:id="createDefaultSource">
<db:title>[static] QGeoPositionInfoSource *QGeoPositionInfoSource::createDefaultSource(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Creates and returns a position source with the given <db:code role="parameter">parent</db:code> that reads from the system's default sources of location data, or the plugin with the highest available priority.</db:para>
<db:para>Returns 0 if the system has no default position source, no valid plugins could be found or the user does not have the permission to access the current position.</db:para>
</db:section>
<db:section xml:id="createSource">
<db:title>[static] QGeoPositionInfoSource *QGeoPositionInfoSource::createSource(const QString &amp;<db:emphasis>sourceName</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Creates and returns a position source with the given <db:code role="parameter">parent</db:code>, by loading the plugin named <db:code role="parameter">sourceName</db:code>.</db:para>
<db:para>Returns 0 if the plugin cannot be found.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>[pure virtual] QGeoPositionInfoSource::Error QGeoPositionInfoSource::error() const</db:title>
<db:para>Returns the type of error that last occurred.</db:para>
</db:section>
<db:section xml:id="error-1">
<db:title>void QGeoPositionInfoSource::error(QGeoPositionInfoSource::Error <db:emphasis>positioningError</db:emphasis>)</db:title>
<db:para>This signal is emitted after an error occurred. The <db:code role="parameter">positioningError</db:code> parameter describes the type of error that occurred.</db:para>
<db:para>This signal is not emitted when an <db:link xlink:href="qgeopositioninfosource.xml#updateTimeout">updateTimeout</db:link>() has occurred.</db:para>
</db:section>
<db:section xml:id="lastKnownPosition">
<db:title>[pure virtual] QGeoPositionInfo QGeoPositionInfoSource::lastKnownPosition(bool <db:emphasis>fromSatellitePositioningMethodsOnly</db:emphasis> = false) const</db:title>
<db:para>Returns an update containing the last known position, or a null update if none is available.</db:para>
<db:para>If <db:code role="parameter">fromSatellitePositioningMethodsOnly</db:code> is true, this returns the last known position received from a satellite positioning method; if none is available, a null update is returned.</db:para>
</db:section>
<db:section xml:id="positionUpdated">
<db:title>void QGeoPositionInfoSource::positionUpdated(const QGeoPositionInfo &amp;<db:emphasis>update</db:emphasis>)</db:title>
<db:para>If <db:link xlink:href="qgeopositioninfosource.xml#startUpdates">startUpdates</db:link>() or <db:link xlink:href="qgeopositioninfosource.xml#requestUpdate">requestUpdate</db:link>() is called, this signal is emitted when an update becomes available.</db:para>
<db:para>The <db:code role="parameter">update</db:code> value holds the value of the new update.</db:para>
</db:section>
<db:section xml:id="preferredPositioningMethods">
<db:title>QGeoPositionInfoSource::PositioningMethods QGeoPositionInfoSource::preferredPositioningMethods() const</db:title>
<db:para>Returns the positioning methods set by <db:link xlink:href="qgeopositioninfosource.xml#setPreferredPositioningMethods">setPreferredPositioningMethods</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeopositioninfosource.xml#setPreferredPositioningMethods">setPreferredPositioningMethods</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requestUpdate">
<db:title>[pure virtual] void QGeoPositionInfoSource::requestUpdate(int <db:emphasis>timeout</db:emphasis> = 0)</db:title>
<db:para>Attempts to get the current position and emit <db:link xlink:href="qgeopositioninfosource.xml#positionUpdated">positionUpdated</db:link>() with this information. If the current position cannot be found within the given <db:code role="parameter">timeout</db:code> (in milliseconds) or if <db:code role="parameter">timeout</db:code> is less than the value returned by <db:link xlink:href="qgeopositioninfosource.xml#minimumUpdateInterval-prop">minimumUpdateInterval</db:link>(), <db:link xlink:href="qgeopositioninfosource.xml#updateTimeout">updateTimeout</db:link>() is emitted.</db:para>
<db:para>If the timeout is zero, the timeout defaults to a reasonable timeout period as appropriate for the source.</db:para>
<db:para>This does nothing if another update request is in progress. However it can be called even if <db:link xlink:href="qgeopositioninfosource.xml#startUpdates">startUpdates</db:link>() has already been called and regular updates are in progress.</db:para>
<db:para>If the source uses multiple positioning methods, it tries to get the current position from the most accurate positioning method within the given timeout.</db:para>
</db:section>
<db:section xml:id="setPreferredPositioningMethods">
<db:title>[virtual] void QGeoPositionInfoSource::setPreferredPositioningMethods(QGeoPositionInfoSource::PositioningMethods <db:emphasis>methods</db:emphasis>)</db:title>
<db:para>Sets the preferred positioning methods for this source to <db:code role="parameter">methods</db:code>.</db:para>
<db:para>If <db:code role="parameter">methods</db:code> includes a method that is not supported by the source, the unsupported method will be ignored.</db:para>
<db:para>If <db:code role="parameter">methods</db:code> does not include any methods supported by the source, the preferred methods will be set to the set of methods which the source supports.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> When reimplementing this method, subclasses must call the base method implementation to ensure <db:link xlink:href="qgeopositioninfosource.xml#preferredPositioningMethods">preferredPositioningMethods</db:link>() returns the correct value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeopositioninfosource.xml#preferredPositioningMethods">preferredPositioningMethods</db:link>()</db:member>
<db:member><db:link xlink:href="qgeopositioninfosource.xml#supportedPositioningMethods">supportedPositioningMethods</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startUpdates">
<db:title>[pure virtual] void QGeoPositionInfoSource::startUpdates()</db:title>
<db:para>Starts emitting updates at regular intervals as specified by <db:link xlink:href="qgeopositioninfosource.xml#updateInterval-prop">setUpdateInterval</db:link>().</db:para>
<db:para>If <db:link xlink:href="qgeopositioninfosource.xml#updateInterval-prop">setUpdateInterval</db:link>() has not been called, the source will emit updates as soon as they become available.</db:para>
<db:para>An <db:link xlink:href="qgeopositioninfosource.xml#updateTimeout">updateTimeout</db:link>() signal will be emitted if this <db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link> subclass determines that it will not be able to provide regular updates. This could happen if a satellite fix is lost or if a hardware error is detected. Position updates will recommence if the data becomes available later on. The <db:link xlink:href="qgeopositioninfosource.xml#updateTimeout">updateTimeout</db:link>() signal will not be emitted again until after the periodic updates resume.</db:para>
<db:para>On iOS, starting from version 8, Core Location framework requires additional entries in the application's Info.plist with keys NSLocationAlwaysUsageDescription or NSLocationWhenInUseUsageDescription and a string to be displayed in the authorization prompt. The key NSLocationWhenInUseUsageDescription is used when requesting permission to use location services while the app is in the foreground. The key NSLocationAlwaysUsageDescription is used when requesting permission to use location services whenever the app is running (both the foreground and the background). If both entries are defined, NSLocationWhenInUseUsageDescription has a priority in the foreground mode.</db:para>
</db:section>
<db:section xml:id="stopUpdates">
<db:title>[pure virtual] void QGeoPositionInfoSource::stopUpdates()</db:title>
<db:para>Stops emitting updates at regular intervals.</db:para>
</db:section>
<db:section xml:id="supportedPositioningMethods">
<db:title>[pure virtual] QGeoPositionInfoSource::PositioningMethods QGeoPositionInfoSource::supportedPositioningMethods() const</db:title>
<db:para>Returns the positioning methods available to this source.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeopositioninfosource.xml#setPreferredPositioningMethods">setPreferredPositioningMethods</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateTimeout">
<db:title>void QGeoPositionInfoSource::updateTimeout()</db:title>
<db:para>If <db:link xlink:href="qgeopositioninfosource.xml#requestUpdate">requestUpdate</db:link>() was called, this signal will be emitted if the current position could not be retrieved within the specified timeout.</db:para>
<db:para>If <db:link xlink:href="qgeopositioninfosource.xml#startUpdates">startUpdates</db:link>() has been called, this signal will be emitted if this <db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link> subclass determines that it will not be able to provide further regular updates. This signal will not be emitted again until after the regular updates resume.</db:para>
<db:para>While the triggering of this signal may be considered an error condition, it does not imply the emission of the <db:code>error()</db:code> signal. Only the emission of <db:code>updateTimeout()</db:code> is required to indicate a timeout.</db:para>
</db:section>
</db:section>
</db:article>
