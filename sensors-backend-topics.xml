<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Sensors Backend</db:title>
<db:productname>QtSensors</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Sensors Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes how to use the Qt Sensors backend.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt Sensors backend connects the Qt Sensors API to the platform services or hardware sensors.</db:para>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para><db:link xlink:href="qsensor.xml">QSensor</db:link> instances talk to a backend object. Backends are usually supplied with the Qt Sensors library for a specific device, although third-party backends may be used as well. A backend can talk directly to hardware, or it can talk to a system service. In some instances it can even talk to another sensor. An example of this is the orientation sensor backend that talks to an accelerometer to determine the device orientation.</db:para>
</db:section>
<db:section xml:id="backend-classes">
<db:title>Backend Classes</db:title>
<db:para>If you are making sensors available through the Sensors API, these are the classes to use. <db:variablelist role="sensors_backend">
<db:varlistentry>
<db:term><db:link xlink:href="qsensorbackend.xml" xlink:role="class">QSensorBackend</db:link></db:term>
<db:listitem>
<db:para>The QSensorBackend class is a sensor implementation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qsensorbackendfactory.xml" xlink:role="class">QSensorBackendFactory</db:link></db:term>
<db:listitem>
<db:para>The QSensorBackendFactory class instantiates instances of QSensorBackend.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qsensorchangesinterface.xml" xlink:role="class">QSensorChangesInterface</db:link></db:term>
<db:listitem>
<db:para>The QSensorChangesInterface class is the pure virtual interface to sensor plugins.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qsensormanager.xml" xlink:role="class">QSensorManager</db:link></db:term>
<db:listitem>
<db:para>The QSensorManager class handles registration and creation of sensor backends.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qsensorplugininterface.xml" xlink:role="class">QSensorPluginInterface</db:link></db:term>
<db:listitem>
<db:para>The QSensorPluginInterface class is the pure virtual interface to sensor plugins.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:para>
</db:section>
<db:section xml:id="backend-topics">
<db:title>Backend Topics</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="creating-a-sensor-plugin.xml">Creating a sensor plugin</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="determining-the-default-sensor-for-a-type.xml">Determining the default sensor for a type</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dynamic-sensor-backend-registration.xml">Dynamic Sensor Backend Registration</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
