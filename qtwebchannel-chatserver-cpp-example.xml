<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt WebChannel ChatServer Example</db:title>
<db:productname>QtWebChannel</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebChannel Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A simple chat server implemented using the <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> C++ API.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/chatserver-cpp.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>ChatServer</db:emphasis> provides a chat service that the <db:link xlink:href="qtwebchannel-chatclient-qml-example.xml">Qt WebChannel ChatClient QML Application</db:link> and <db:link xlink:href="qtwebchannel-chatclient-html-example.xml">Qt WebChannel ChatClient HTML Example</db:link> can connect to.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="implementing-a-chat-server">
<db:title>Implementing a Chat Server</db:title>
<db:para>The C++ application implements a <db:link xlink:href="qobject.xml">QObject</db:link> which provides all mechanisms required for a chat service. This object is published through a <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> which uses a <db:link xlink:href="qtwebsockets-index.xml">WebSocket</db:link> as transport.</db:para>
<db:para>The server provides a basic <db:code>login</db:code> method (username only, no passwords), which must be successfully invoked before a client is able to chat. After login, a client can invoke the method <db:code>sendMessage</db:code> and receive the signal <db:code>newMessage</db:code> to write and receive messages. Furthermore, there is a <db:code>userList</db:code> property which provides the names of all other connected clients. Additionally the server sends a <db:code>keepAlive</db:code> signal periodically to all clients. The clients have to respond to this signal, otherwise the client will be removed from the <db:code>userList</db:code> property.</db:para>
<db:para>The example shows how basic <db:link xlink:href="qobject.xml">QObject</db:link> elements can be used with <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link>, that is signals (<db:code>newMessage</db:code>), slots (<db:code>sendMessage</db:code>), and properties (<db:code>userList</db:code>).</db:para>
<db:para>Because this is a plain server application, separate clients are needed to interact with it. <db:link xlink:href="qtwebchannel-chatclient-qml-example.xml">Qt WebChannel ChatClient QML Application</db:link> and <db:link xlink:href="qtwebchannel-chatclient-html-example.xml">Qt WebChannel ChatClient HTML Example</db:link> are client implementations compatible with this server.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtwebchannel.git/tree/examples/webchannel/chatserver-cpp?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
