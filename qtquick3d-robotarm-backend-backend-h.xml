<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Robot Arm Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to add a C++ backend to a 3D project from Qt Design Studio.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">// Copyright (C) 2022 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

#ifndef BACKEND_H
#define BACKEND_H

#include &quot;animatedparam.h&quot;

#include &amp;lt;QObject&amp;gt;
#include &amp;lt;qqmlregistration.h&amp;gt;

class Backend : public QObject
{
    Q_OBJECT
    QML_ELEMENT
    Q_PROPERTY(int rotation1Angle READ rotation1Angle WRITE setRot1Angle NOTIFY rot1AngleChanged)
    Q_PROPERTY(int rotation2Angle READ rotation2Angle WRITE setRot2Angle NOTIFY rot2AngleChanged)
    Q_PROPERTY(int rotation3Angle READ rotation3Angle WRITE setRot3Angle NOTIFY rot3AngleChanged)
    Q_PROPERTY(int rotation4Angle READ rotation4Angle WRITE setRot4Angle NOTIFY rot4AngleChanged)
    Q_PROPERTY(int clawsAngle READ clawsAngle WRITE setClawsAngle NOTIFY clawsAngleChanged)
    Q_PROPERTY(QString status READ status BINDABLE bindableStatus)

public:
    explicit Backend(QObject *parent = nullptr);

    int rotation1Angle() const;
    void setRot1Angle(const int angle);

    int rotation2Angle() const;
    void setRot2Angle(const int angle);

    int rotation3Angle() const;
    void setRot3Angle(const int angle);

    int rotation4Angle() const;
    void setRot4Angle(const int angle);

    int clawsAngle() const;
    void setClawsAngle(const int angle);

    QString status() const;
    QBindable&amp;lt;QString&amp;gt; bindableStatus() const;

signals:
    void rot1AngleChanged();
    void rot2AngleChanged();
    void rot3AngleChanged();
    void rot4AngleChanged();
    void clawsAngleChanged();

private:
    AnimatedParam m_rotation1Angle;
    AnimatedParam m_rotation2Angle;
    AnimatedParam m_rotation3Angle;
    AnimatedParam m_rotation4Angle;
    AnimatedParam m_clawsAngle;

    QProperty&amp;lt;QString&amp;gt; m_status;
    QProperty&amp;lt;bool&amp;gt; m_isCollision;

    void detectCollision();
};

#endif // BACKEND_H

</db:programlisting>
</db:article>
