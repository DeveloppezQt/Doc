<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRemoteObjectHost Class</db:title>
<db:productname>QtRemoteObjects</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Remote Objects Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A (Host) Node on a Qt Remote Objects network.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRemoteObjectHost</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS RemoteObjects)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::RemoteObjects)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += remoteobjects</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtremoteobjects-host.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qremoteobjecthostbase.xml" xlink:role="class">QRemoteObjectHostBase</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qremoteobjecthost.xml">QRemoteObjectHost</db:link> class provides an entry point to a <db:link xlink:href="qml-qtremoteobjects-qtremoteobjects.xml">QtRemoteObjects</db:link> network. A network can be as simple as two nodes, or an arbitrarily complex set of processes and devices.</db:para>
<db:para>QRemoteObjectHosts have the same capabilities as QRemoteObjectNodes, but they can also be connected to and can share source objects on the network.</db:para>
<db:para>Nodes may connect to each other directly using <db:link xlink:href="qremoteobjectnode.xml#connectToNode">connectToNode</db:link>, or they can use the <db:link xlink:href="qremoteobjectregistry.xml">QRemoteObjectRegistry</db:link> to simplify connections.</db:para>
<db:para>The <db:link xlink:href="qremoteobjectregistry.xml">QRemoteObjectRegistry</db:link> is a special replica available to every node that connects to the registry Url. It knows how to connect to every QRemoteObjectSource object on the network.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjectnode.xml">QRemoteObjectNode</db:link></db:member>
<db:member><db:link xlink:href="qremoteobjectregistryhost.xml">QRemoteObjectRegistryHost</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="hostUrl-prop">
<db:title>hostUrl : QUrl</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QUrl</db:type>
<db:varname>hostUrl</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">hostUrl</db:synopsisinfo>
<db:synopsisinfo role="setter">setHostUrl</db:synopsisinfo>
<db:synopsisinfo role="notifier">hostUrlChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the host address for the node.</db:para>
<db:para>This is the address where source objects remoted by this node will reside.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>virtual <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qremoteobjecthost.xml#hostUrl">hostUrl</db:link></db:emphasis>() const override</db:para>
</db:listitem>
<db:listitem>
<db:para>virtual <db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qremoteobjecthost.xml#setHostUrl">setHostUrl</db:link></db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>hostAddress</db:emphasis>, <db:type><db:link xlink:href="qremoteobjecthostbase.xml#AllowedSchemas-enum">QRemoteObjectHostBase::AllowedSchemas</db:link></db:type> <db:emphasis>allowedSchemas</db:emphasis> = BuiltInSchemasOnly) override</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">hostUrlChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRemoteObjectHost">
<db:title>QRemoteObjectHost::QRemoteObjectHost(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QRemoteObjectHost</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QRemoteObjectHost(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qremoteobjecthost.xml">QRemoteObjectHost</db:link> Node (i.e., a Node that supports exposing <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> objects on the QtRO network) with the given <db:code role="parameter">parent</db:code>. This constructor is meant specific to support QML in the future as it will not be available to connect to until <db:link xlink:href="qremoteobjecthost.xml#setHostUrl">setHostUrl</db:link> is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjecthost.xml#setHostUrl">setHostUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qremoteobjectnode.xml#registryUrl-prop">setRegistryUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QRemoteObjectHost-1">
<db:title>QRemoteObjectHost::QRemoteObjectHost(const QUrl &amp;<db:emphasis>address</db:emphasis>, const QUrl &amp;<db:emphasis>registryAddress</db:emphasis> = QUrl(), QRemoteObjectHostBase::AllowedSchemas <db:emphasis>allowedSchemas</db:emphasis> = BuiltInSchemasOnly, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QRemoteObjectHost</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>address</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>registryAddress</db:parameter>
<db:initializer>QUrl()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QRemoteObjectHostBase::AllowedSchemas</db:type>
<db:parameter>allowedSchemas</db:parameter>
<db:initializer>BuiltInSchemasOnly</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRemoteObjectHost(const QUrl &amp;address, const QUrl &amp;registryAddress, QRemoteObjectHostBase::AllowedSchemas allowedSchemas, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qremoteobjecthost.xml">QRemoteObjectHost</db:link> Node (i.e., a Node that supports exposing <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> objects on the QtRO network) with address <db:code role="parameter">address</db:code>. If set, <db:code role="parameter">registryAddress</db:code> will be used to connect to the <db:link xlink:href="qremoteobjectregistry.xml">QRemoteObjectRegistry</db:link> at the provided address. The <db:code role="parameter">allowedSchemas</db:code> parameter is only needed (and should be set to <db:link xlink:href="qremoteobjecthostbase.xml#AllowedSchemas-enum">AllowExternalRegistration</db:link>) if the schema of the url should be used as an <db:link xlink:href="qtremoteobjects-external-schemas.xml#external-schemas">External Schema</db:link> by the registry.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjecthost.xml#setHostUrl">setHostUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qremoteobjectnode.xml#registryUrl-prop">setRegistryUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QRemoteObjectHost-2">
<db:title>QRemoteObjectHost::QRemoteObjectHost(const QUrl &amp;<db:emphasis>address</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QRemoteObjectHost</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>address</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QRemoteObjectHost(const QUrl &amp;address, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qremoteobjecthost.xml">QRemoteObjectHost</db:link> Node (i.e., a Node that supports exposing <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> objects on the QtRO network) with a url of <db:code role="parameter">address</db:code> and the given <db:code role="parameter">parent</db:code>. This overload is provided as a convenience for specifying a <db:link xlink:href="qobject.xml">QObject</db:link> parent without providing a registry address.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjecthost.xml#setHostUrl">setHostUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qremoteobjectnode.xml#registryUrl-prop">setRegistryUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hostUrl">
<db:title>[override virtual] QUrl QRemoteObjectHost::hostUrl() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>hostUrl</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">hostUrl</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl hostUrl() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the host address for the <db:link xlink:href="qremoteobjectnode.xml">QRemoteObjectNode</db:link> as a <db:link xlink:href="qurl.xml">QUrl</db:link>. If the Node is not a Host node, returns an empty <db:link xlink:href="qurl.xml">QUrl</db:link>.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qremoteobjecthost.xml#hostUrl-prop">hostUrl</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjecthost.xml#setHostUrl">setHostUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHostUrl">
<db:title>[override virtual] bool QRemoteObjectHost::setHostUrl(const QUrl &amp;<db:emphasis>hostAddress</db:emphasis>, QRemoteObjectHostBase::AllowedSchemas <db:emphasis>allowedSchemas</db:emphasis> = BuiltInSchemasOnly)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setHostUrl</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>hostAddress</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QRemoteObjectHostBase::AllowedSchemas</db:type>
<db:parameter>allowedSchemas</db:parameter>
<db:initializer>BuiltInSchemasOnly</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">hostUrl</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setHostUrl(const QUrl &amp;hostAddress, QRemoteObjectHostBase::AllowedSchemas allowedSchemas) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">hostAddress</db:code> for a host <db:link xlink:href="qremoteobjectnode.xml">QRemoteObjectNode</db:link>.</db:para>
<db:para>Returns <db:code>true</db:code> if the Host address is set, otherwise <db:code>false</db:code>.</db:para>
<db:para>The <db:code role="parameter">allowedSchemas</db:code> parameter is only needed (and should be set to <db:link xlink:href="qremoteobjecthostbase.xml#AllowedSchemas-enum">AllowExternalRegistration</db:link>) if the schema of the url should be used as an <db:link xlink:href="qtremoteobjects-external-schemas.xml#external-schemas">External Schema</db:link> by the registry.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qremoteobjecthost.xml#hostUrl-prop">hostUrl</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjecthost.xml#hostUrl">hostUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
