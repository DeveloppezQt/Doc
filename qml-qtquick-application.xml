<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Application QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides access to global application state properties shared by many QML components.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The Application singleton exposes a subset of <db:link xlink:href="qapplication.xml">QApplication</db:link>'s properties to QML applications.</db:para>
<db:para>It also provides an <db:link xlink:href="qml-qtquick-application.xml#aboutToQuit-signal">aboutToQuit</db:link>() signal, which is the same as <db:link xlink:href="qcoreapplication.xml#aboutToQuit">QCoreApplication::aboutToQuit</db:link>().</db:para>
<db:programlisting language="qml">import QtQuick

Window {
    id: root
    visible: true
    width: 800
    height: 680

    title: `${Application.name} (${Application.version})`

    Connections {
        target: Application
        function onAboutToQuit() {
            console.log(&quot;Bye!&quot;)
        }
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-systempalette.xml">SystemPalette</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="arguments-prop">
<db:title>arguments : QStringList</db:title>
<db:fieldsynopsis>
<db:type>QStringList</db:type>
<db:varname>arguments</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This is a string list of the arguments the executable was invoked with.</db:para>
</db:section>
<db:section xml:id="displayName-prop">
<db:title>displayName : QString</db:title>
<db:fieldsynopsis>
<db:type>QString</db:type>
<db:varname>displayName</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property represents the application display name set on the <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> instance. This property can be written to in order to set the application display name.</db:para>
<db:programlisting language="qml">Binding {
    target: Application
    property: &quot;displayName&quot;
    value: &quot;My Awesome Application&quot;
}
</db:programlisting>
</db:section>
<db:section xml:id="domain-prop">
<db:title>domain : QString</db:title>
<db:fieldsynopsis>
<db:type>QString</db:type>
<db:varname>domain</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This is the organization domain set on the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> instance. This property can be written to in order to set the organization domain.</db:para>
</db:section>
<db:section xml:id="font-prop">
<db:title>font : QFont</db:title>
<db:fieldsynopsis>
<db:type>QFont</db:type>
<db:varname>font</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the default application font as returned by <db:link xlink:href="qguiapplication.xml#font">QGuiApplication::font</db:link>().</db:para>
</db:section>
<db:section xml:id="layoutDirection-prop">
<db:title>layoutDirection : Qt::LayoutDirection</db:title>
<db:fieldsynopsis>
<db:type>Qt::LayoutDirection</db:type>
<db:varname>layoutDirection</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This read-only property can be used to query the default layout direction of the application. On system start-up, the default layout direction depends on the application's language. The property has a value of Qt.RightToLeft in locales where text and graphic elements are read from right to left, and Qt.LeftToRight where the reading direction flows from left to right. You can bind to this property to customize your application layouts to support both layout directions.</db:para>
<db:programlisting language="qml">RowLayout {
    layoutDirection: Application.layoutDirection
}
</db:programlisting>
</db:section>
<db:section xml:id="name-prop">
<db:title>name : QString</db:title>
<db:fieldsynopsis>
<db:type>QString</db:type>
<db:varname>name</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This is the application name set on the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> instance. This property can be written to in order to set the application name.</db:para>
</db:section>
<db:section xml:id="organization-prop">
<db:title>organization : QString</db:title>
<db:fieldsynopsis>
<db:type>QString</db:type>
<db:varname>organization</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This is the organization name set on the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> instance. This property can be written to in order to set the organization name.</db:para>
</db:section>
<db:section xml:id="screens-prop">
<db:title>screens : QQmlListProperty&lt;QQuickScreenInfo&gt;</db:title>
<db:fieldsynopsis>
<db:type>QQmlListProperty&lt;QQuickScreenInfo&gt;</db:type>
<db:varname>screens</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>An array containing the descriptions of all connected screens. The elements of the array are objects with the same properties as the <db:link xlink:href="qml-qtquick-screen.xml">Screen</db:link> attached object. In practice the array corresponds to the screen list returned by <db:link xlink:href="qguiapplication.xml#screens">QGuiApplication::screens</db:link>(). In addition to examining properties like name, width, height, etc., the array elements can also be assigned to the screen property of Window items, thus serving as an alternative to the C++ side's <db:link xlink:href="qwindow.xml#setScreen">QWindow::setScreen</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-screen.xml">Screen</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-window.xml">Window</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-window.xml#screen-prop">Window.screen</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state-prop">
<db:title>state : Qt::ApplicationState</db:title>
<db:fieldsynopsis>
<db:type>Qt::ApplicationState</db:type>
<db:varname>state</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property represents the current state of the application.</db:para>
<db:programlisting language="qml">Timer {
    interval: 1000; repeat: true
    active: Application.state === Qt.Qt.ApplicationActive
    onTriggered: imageFetcher.fetchLatestImages()
}
</db:programlisting>
</db:section>
<db:section xml:id="supportsMultipleWindows-prop">
<db:title>supportsMultipleWindows : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>supportsMultipleWindows</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns true if the platform supports multiple windows. Some embedded platforms do not support multiple windows, for example.</db:para>
</db:section>
<db:section xml:id="version-prop">
<db:title>version : QString</db:title>
<db:fieldsynopsis>
<db:type>QString</db:type>
<db:varname>version</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This is the application version set on the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> instance. This property can be written to in order to set the application version.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="aboutToQuit-signal">
<db:title>aboutToQuit()</db:title>
<db:para>This signal is emitted when the application is about to quit the main event loop. The signal is particularly useful if your application has to do some last-second cleanup. User interaction is not possible in this state. For more information, see <db:link xlink:href="qml-qtquick-window.xml#closing-signal">Window.closing</db:link>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onAboutToQuit</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#aboutToQuit">QCoreApplication::aboutToQuit</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for Application</db:title>
<db:para><db:emphasis role="bold">The following members of QML type <db:link xlink:href="qml-qtquick-application.xml">Application</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-property-documentation">
<db:title>Obsolete Property Documentation</db:title>
<db:section xml:id="active-prop">
<db:title>active : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>active</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is deprecated since 5.2. We strongly advise against using it in new code.</db:para>
<db:para>Returns whether the application is active. Use Application.state == Qt.ApplicationActive instead</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
