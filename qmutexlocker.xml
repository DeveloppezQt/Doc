<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QMutexLocker Class</db:title>
<db:productname>QtCore</db:productname>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> class is a convenience class that simplifies locking and unlocking mutexes.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMutexLocker</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMutexLocker is part of <db:simplelist><db:member><db:link xlink:href="thread.xml">Threading Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Locking and unlocking a <db:link xlink:href="qmutex.xml">QMutex</db:link> in complex functions and statements or in exception handling code is error-prone and difficult to debug. <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> can be used in such situations to ensure that the state of the mutex is always well-defined.</db:para>
<db:para><db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> should be created within a function where a <db:link xlink:href="qmutex.xml">QMutex</db:link> needs to be locked. The mutex is locked when <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> is created. You can unlock and relock the mutex with <db:code>unlock()</db:code> and <db:code>relock()</db:code>. If locked, the mutex will be unlocked when the <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> is destroyed.</db:para>
<db:para>For example, this complex function locks a <db:link xlink:href="qmutex.xml">QMutex</db:link> upon entering the function and unlocks the mutex at all the exit points:</db:para>
<db:programlisting language="cpp">int complexFunction(int flag)
{
    mutex.lock();

    int retVal = 0;

    switch (flag) {
    case 0:
    case 1:
        retVal = moreComplexFunction(flag);
        break;
    case 2:
        {
            int status = anotherFunction();
            if (status &lt; 0) {
                mutex.unlock();
                return -2;
            }
            retVal = status + flag;
        }
        break;
    default:
        if (flag &gt; 10) {
            mutex.unlock();
            return -1;
        }
        break;
    }

    mutex.unlock();
    return retVal;
}
</db:programlisting>
<db:para>This example function will get more complicated as it is developed, which increases the likelihood that errors will occur.</db:para>
<db:para>Using <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> greatly simplifies the code, and makes it more readable:</db:para>
<db:programlisting language="cpp">int complexFunction(int flag)
{
    QMutexLocker locker(&amp;mutex);

    int retVal = 0;

    switch (flag) {
    case 0:
    case 1:
        return moreComplexFunction(flag);
    case 2:
        {
            int status = anotherFunction();
            if (status &lt; 0)
                return -2;
            retVal = status + flag;
        }
        break;
    default:
        if (flag &gt; 10)
            return -1;
        break;
    }

    return retVal;
}
</db:programlisting>
<db:para>Now, the mutex will always be unlocked when the <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> object is destroyed (when the function returns since <db:code>locker</db:code> is an auto variable).</db:para>
<db:para>The same principle applies to code that throws and catches exceptions. An exception that is not caught in the function that has locked the mutex has no way of unlocking the mutex before the exception is passed up the stack to the calling function.</db:para>
<db:para><db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> also provides a <db:code>mutex()</db:code> member function that returns the mutex on which the <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> is operating. This is useful for code that needs access to the mutex, such as <db:link xlink:href="qwaitcondition.xml#wait">QWaitCondition::wait</db:link>(). For example:</db:para>
<db:programlisting language="cpp">class SignalWaiter
{
private:
    QMutexLocker locker;

public:
    SignalWaiter(QMutex *mutex)
        : locker(mutex)
    {
    }

    void waitForSignal()
    {
        ...
        while (!signalled)
            waitCondition.wait(locker.mutex());
        ...
    }
};
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qreadlocker.xml">QReadLocker</db:link></db:member>
<db:member><db:link xlink:href="qwritelocker.xml">QWriteLocker</db:link></db:member>
<db:member><db:link xlink:href="qmutex.xml">QMutex</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMutexLocker">
<db:title>[explicit] QMutexLocker::QMutexLocker(QMutex *<db:emphasis>mutex</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> and locks <db:code role="parameter">mutex</db:code>. The mutex will be unlocked when the <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> is destroyed. If <db:code role="parameter">mutex</db:code> is zero, <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutex.xml#lock">QMutex::lock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QMutexLocker">
<db:title>[noexcept] QMutexLocker::~QMutexLocker()</db:title>
<db:para>Destroys the <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> and unlocks the mutex that was locked in the constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutex.xml#unlock">QMutex::unlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mutex">
<db:title>[static] QMutex *QMutexLocker::mutex()</db:title>
<db:para>Returns the mutex on which the <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> is operating.</db:para>
</db:section>
<db:section xml:id="relock">
<db:title>[static] void QMutexLocker::relock()</db:title>
<db:para>Relocks an unlocked mutex locker.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutexlocker.xml#unlock">unlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unlock">
<db:title>[static] void QMutexLocker::unlock()</db:title>
<db:para>Unlocks this mutex locker. You can use <db:code>relock()</db:code> to lock it again. It does not need to be locked when destroyed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutexlocker.xml#relock">relock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
