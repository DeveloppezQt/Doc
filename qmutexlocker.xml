<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMutexLocker Class</db:title>
<db:subtitle>template &lt;typename Mutex&gt; class QMutexLocker</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> class is a convenience class that simplifies locking and unlocking mutexes.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMutexLocker</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMutexLocker is part of <db:simplelist><db:member>thread</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Locking and unlocking a <db:link xlink:href="qmutex.xml">QMutex</db:link> or <db:link xlink:href="qrecursivemutex.xml">QRecursiveMutex</db:link> in complex functions and statements or in exception handling code is error-prone and difficult to debug. <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> can be used in such situations to ensure that the state of the mutex is always well-defined.</db:para>
<db:para><db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> should be created within a function where a <db:link xlink:href="qmutex.xml">QMutex</db:link> needs to be locked. The mutex is locked when <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> is created. You can unlock and relock the mutex with unlock() and relock(). If locked, the mutex will be unlocked when the <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> is destroyed.</db:para>
<db:para>For example, this complex function locks a <db:link xlink:href="qmutex.xml">QMutex</db:link> upon entering the function and unlocks the mutex at all the exit points:</db:para>
<db:programlisting language="cpp">int complexFunction(int flag)
{
    mutex.lock();

    int retVal = 0;

    switch (flag) {
    case 0:
    case 1:
        retVal = moreComplexFunction(flag);
        break;
    case 2:
        {
            int status = anotherFunction();
            if (status &amp;lt; 0) {
                mutex.unlock();
                return -2;
            }
            retVal = status + flag;
        }
        break;
    default:
        if (flag &amp;gt; 10) {
            mutex.unlock();
            return -1;
        }
        break;
    }

    mutex.unlock();
    return retVal;
}
</db:programlisting>
<db:para>This example function will get more complicated as it is developed, which increases the likelihood that errors will occur.</db:para>
<db:para>Using <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> greatly simplifies the code, and makes it more readable:</db:para>
<db:programlisting language="cpp">int complexFunction(int flag)
{
    QMutexLocker locker(&amp;amp;mutex);

    int retVal = 0;

    switch (flag) {
    case 0:
    case 1:
        return moreComplexFunction(flag);
    case 2:
        {
            int status = anotherFunction();
            if (status &amp;lt; 0)
                return -2;
            retVal = status + flag;
        }
        break;
    default:
        if (flag &amp;gt; 10)
            return -1;
        break;
    }

    return retVal;
}
</db:programlisting>
<db:para>Now, the mutex will always be unlocked when the <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> object is destroyed (when the function returns since locker is an auto variable).</db:para>
<db:para>The same principle applies to code that throws and catches exceptions. An exception that is not caught in the function that has locked the mutex has no way of unlocking the mutex before the exception is passed up the stack to the calling function.</db:para>
<db:para><db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> also provides a mutex() member function that returns the mutex on which the <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> is operating. This is useful for code that needs access to the mutex, such as <db:link xlink:href="qwaitcondition.xml#wait">QWaitCondition::wait</db:link>(). For example:</db:para>
<db:programlisting language="cpp">class SignalWaiter
{
private:
    QMutexLocker&amp;lt;QMutex&amp;gt; locker;

public:
    SignalWaiter(QMutex *mutex)
        : locker(mutex)
    {
    }

    void waitForSignal()
    {
        ...
        while (!signalled)
            waitCondition.wait(locker.mutex());
        ...
    }
};
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qreadlocker.xml">QReadLocker</db:link></db:member>
<db:member><db:link xlink:href="qwritelocker.xml">QWriteLocker</db:link></db:member>
<db:member><db:link xlink:href="qmutex.xml">QMutex</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMutexLocker">
<db:title>[explicit] QMutexLocker::QMutexLocker(Mutex *<db:emphasis>mutex</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMutexLocker</db:methodname>
<db:methodparam>
<db:type>Mutex *</db:type>
<db:parameter>mutex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMutexLocker(Mutex *mutex)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> and locks <db:code role="parameter">mutex</db:code>. The mutex will be unlocked when the <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> is destroyed. If <db:code role="parameter">mutex</db:code> is nullptr, <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutex.xml#lock">QMutex::lock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QMutexLocker-1">
<db:title>[since 6.4] QMutexLocker::QMutexLocker(QMutexLocker&lt;Mutex&gt; &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMutexLocker</db:methodname>
<db:methodparam>
<db:type>QMutexLocker&lt;Mutex&gt; &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMutexLocker(QMutexLocker&lt;Mutex&gt; &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> from <db:code role="parameter">other</db:code>. The mutex and the state of <db:code role="parameter">other</db:code> is transferred to the newly constructed instance. After the move, <db:code role="parameter">other</db:code> will no longer be managing any mutex.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutex.xml#lock">QMutex::lock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QMutexLocker">
<db:title>QMutexLocker::~QMutexLocker()</db:title>
<db:destructorsynopsis>
<db:methodname>~QMutexLocker</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QMutexLocker()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> and unlocks the mutex that was locked in the constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutex.xml#unlock">QMutex::unlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isLocked">
<db:title>[since 6.4] bool QMutexLocker::isLocked() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isLocked</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isLocked() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> is currently locking its associated mutex, or false otherwise.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
</db:section>
<db:section xml:id="mutex">
<db:title>Mutex *QMutexLocker::mutex() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Mutex *</db:type>
<db:methodname>mutex</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Mutex * mutex() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the mutex on which the <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> is operating.</db:para>
</db:section>
<db:section xml:id="relock">
<db:title>void QMutexLocker::relock()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>relock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void relock()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Relocks an unlocked mutex locker.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutexlocker.xml#unlock">unlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 6.4] void QMutexLocker::swap(QMutexLocker&lt;Mutex&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QMutexLocker&lt;Mutex&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QMutexLocker&lt;Mutex&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps the mutex and the state of this <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutex.xml#lock">QMutex::lock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unlock">
<db:title>void QMutexLocker::unlock()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>unlock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void unlock()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Unlocks this mutex locker. You can use relock() to lock it again. It does not need to be locked when destroyed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutexlocker.xml#relock">relock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[since 6.4] QMutexLocker&lt;Mutex&gt; &amp;QMutexLocker::operator=(QMutexLocker&lt;Mutex&gt; &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMutexLocker&lt;Mutex&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QMutexLocker&lt;Mutex&gt; &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QMutexLocker&lt;Mutex&gt; &amp; operator=(QMutexLocker&lt;Mutex&gt; &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> onto this <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link>. If this <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> was holding a locked mutex before the assignment, the mutex will be unlocked. The mutex and the state of <db:code role="parameter">other</db:code> is then transferred to this <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link>. After the move, <db:code role="parameter">other</db:code> will no longer be managing any mutex.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutex.xml#lock">QMutex::lock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
