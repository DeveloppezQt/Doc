<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNetworkInterface Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> class provides a listing of the host's IP addresses and network interfaces.</db:para>
<db:para>This class was introduced in Qt 4.2.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNetworkInterface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNetworkInterface is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> represents one network interface attached to the host where the program is being run. Each network interface may contain zero or more IP addresses, each of which is optionally associated with a netmask and/or a broadcast address. The list of such trios can be obtained with <db:link xlink:href="qnetworkinterface.xml#addressEntries">addressEntries</db:link>(). Alternatively, when the netmask or the broadcast addresses aren't necessary, use the <db:link xlink:href="qnetworkinterface.xml#allAddresses">allAddresses</db:link>() convenience function to obtain just the IP addresses.</db:para>
<db:para><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> also reports the interface's hardware address with <db:link xlink:href="qnetworkinterface.xml#hardwareAddress">hardwareAddress</db:link>().</db:para>
<db:para>Not all operating systems support reporting all features. Only the IPv4 addresses are guaranteed to be listed by this class in all platforms. In particular, IPv6 address listing is only supported on Windows, Linux, macOS and the BSDs.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="InterfaceFlag-enum">
<db:title>enum QNetworkInterface::InterfaceFlag</db:title>
<db:bridgehead renderas="sect2">flags QNetworkInterface::InterfaceFlags</db:bridgehead>
<db:para>Specifies the flags associated with this network interface. The possible values are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::IsUp</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>the network interface is active</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::IsRunning</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>the network interface has resources allocated</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::CanBroadcast</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>the network interface works in broadcast mode</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::IsLoopBack</db:code></db:para>
</db:td>
<db:td><db:code>0x8</db:code></db:td>
<db:td>
<db:para>the network interface is a loopback interface: that is, it's a virtual interface whose destination is the host computer itself</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::IsPointToPoint</db:code></db:para>
</db:td>
<db:td><db:code>0x10</db:code></db:td>
<db:td>
<db:para>the network interface is a point-to-point interface: that is, there is one, single other address that can be directly reached by it.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::CanMulticast</db:code></db:para>
</db:td>
<db:td><db:code>0x20</db:code></db:td>
<db:td>
<db:para>the network interface supports multicasting</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Note that one network interface cannot be both broadcast-based and point-to-point.</db:para>
<db:para>The <db:code>InterfaceFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;InterfaceFlag&gt;. </db:code>It stores an OR combination of <db:code>InterfaceFlag</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNetworkInterface">
<db:title>QNetworkInterface::QNetworkInterface()</db:title>
<db:para>Constructs an empty network interface object.</db:para>
</db:section>
<db:section xml:id="QNetworkInterface-1">
<db:title>QNetworkInterface::QNetworkInterface(const QNetworkInterface &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Creates a copy of the <db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> object contained in <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QNetworkInterface">
<db:title>[noexcept] QNetworkInterface::~QNetworkInterface()</db:title>
<db:para>Frees the resources associated with the <db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> object.</db:para>
</db:section>
<db:section xml:id="addressEntries">
<db:title>QList&lt;QNetworkAddressEntry&gt; QNetworkInterface::addressEntries() const</db:title>
<db:para>Returns the list of IP addresses that this interface possesses along with their associated netmasks and broadcast addresses.</db:para>
<db:para>If the netmask or broadcast address information is not necessary, you can call the <db:link xlink:href="qnetworkinterface.xml#allAddresses">allAddresses</db:link>() function to obtain just the IP addresses.</db:para>
</db:section>
<db:section xml:id="allAddresses">
<db:title>[static] QList&lt;QHostAddress&gt; QNetworkInterface::allAddresses()</db:title>
<db:para>This convenience function returns all IP addresses found on the host machine. It is equivalent to calling <db:link xlink:href="qnetworkinterface.xml#addressEntries">addressEntries</db:link>() on all the objects returned by <db:link xlink:href="qnetworkinterface.xml#allInterfaces">allInterfaces</db:link>() to obtain lists of <db:link xlink:href="qhostaddress.xml">QHostAddress</db:link> objects then calling QHostAddress::ip() on each of these.</db:para>
</db:section>
<db:section xml:id="allInterfaces">
<db:title>[static] QList&lt;QNetworkInterface&gt; QNetworkInterface::allInterfaces()</db:title>
<db:para>Returns a listing of all the network interfaces found on the host machine. In case of failure it returns a list with zero elements.</db:para>
</db:section>
<db:section xml:id="flags">
<db:title>QNetworkInterface::InterfaceFlags QNetworkInterface::flags() const</db:title>
<db:para>Returns the flags associated with this network interface.</db:para>
</db:section>
<db:section xml:id="hardwareAddress">
<db:title>QString QNetworkInterface::hardwareAddress() const</db:title>
<db:para>Returns the low-level hardware address for this interface. On Ethernet interfaces, this will be a MAC address in string representation, separated by colons.</db:para>
<db:para>Other interface types may have other types of hardware addresses. Implementations should not depend on this function returning a valid MAC address.</db:para>
</db:section>
<db:section xml:id="humanReadableName">
<db:title>[since 4.5] QString QNetworkInterface::humanReadableName() const</db:title>
<db:para>Returns the human-readable name of this network interface on Windows, such as &quot;Local Area Connection&quot;, if the name could be determined. If it couldn't, this function returns the same as <db:link xlink:href="qnetworkinterface.xml#name">name</db:link>(). The human-readable name is a name that the user can modify in the Windows Control Panel, so it may change during the execution of the program.</db:para>
<db:para>On Unix, this function currently always returns the same as <db:link xlink:href="qnetworkinterface.xml#name">name</db:link>(), since Unix systems don't store a configuration for human-readable names.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="index">
<db:title>[since 4.5] int QNetworkInterface::index() const</db:title>
<db:para>Returns the interface system index, if known. This is an integer assigned by the operating system to identify this interface and it generally doesn't change. It matches the scope ID field in IPv6 addresses.</db:para>
<db:para>If the index isn't known, this function returns 0.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="interfaceFromIndex">
<db:title>[static] QNetworkInterface QNetworkInterface::interfaceFromIndex(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> object for the interface whose internal ID is <db:code role="parameter">index</db:code>. Network interfaces have a unique identifier called the &quot;interface index&quot; to distinguish it from other interfaces on the system. Often, this value is assigned progressively and interfaces being removed and then added again get a different value every time.</db:para>
<db:para>This index is also found in the IPv6 address' scope ID field.</db:para>
</db:section>
<db:section xml:id="interfaceFromName">
<db:title>[static] QNetworkInterface QNetworkInterface::interfaceFromName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> object for the interface named <db:code role="parameter">name</db:code>. If no such interface exists, this function returns an invalid <db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> object.</db:para>
<db:para>The string <db:code role="parameter">name</db:code> may be either an actual interface name (such as &quot;eth0&quot; or &quot;en1&quot;) or an interface index in string form (&quot;1&quot;, &quot;2&quot;, etc.).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkinterface.xml#name">name</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkinterface.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QNetworkInterface::isValid() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> object contains valid information about a network interface.</db:para>
</db:section>
<db:section xml:id="name">
<db:title>QString QNetworkInterface::name() const</db:title>
<db:para>Returns the name of this network interface. On Unix systems, this is a string containing the type of the interface and optionally a sequence number, such as &quot;eth0&quot;, &quot;lo&quot; or &quot;pcn0&quot;. On Windows, it's an internal ID that cannot be changed by the user.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept, since 5.0] void QNetworkInterface::swap(QNetworkInterface &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this network interface instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QNetworkInterface &amp;QNetworkInterface::operator=(const QNetworkInterface &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copies the contents of the <db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> object contained in <db:code role="parameter">other</db:code> into this one.</db:para>
</db:section>
</db:section>
</db:article>
