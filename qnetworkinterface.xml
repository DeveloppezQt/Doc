<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNetworkInterface Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> class provides a listing of the host's IP addresses and network interfaces.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNetworkInterface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNetworkInterface is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> represents one network interface attached to the host where the program is being run. Each network interface may contain zero or more IP addresses, each of which is optionally associated with a netmask and/or a broadcast address. The list of such trios can be obtained with <db:link xlink:href="qnetworkinterface.xml#addressEntries">addressEntries</db:link>(). Alternatively, when the netmask or the broadcast addresses or other information aren't necessary, use the <db:link xlink:href="qnetworkinterface.xml#allAddresses">allAddresses</db:link>() convenience function to obtain just the IP addresses of the active interfaces.</db:para>
<db:para><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> also reports the interface's hardware address with <db:link xlink:href="qnetworkinterface.xml#hardwareAddress">hardwareAddress</db:link>().</db:para>
<db:para>Not all operating systems support reporting all features. Only the IPv4 addresses are guaranteed to be listed by this class in all platforms. In particular, IPv6 address listing is only supported on Windows, Linux, macOS and the BSDs.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="InterfaceFlag-enum">
<db:title>enum QNetworkInterface::InterfaceFlag</db:title>
<db:bridgehead renderas="sect2">flags QNetworkInterface::InterfaceFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>InterfaceFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>IsUp</db:enumidentifier>
<db:enumvalue>0x1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IsRunning</db:enumidentifier>
<db:enumvalue>0x2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CanBroadcast</db:enumidentifier>
<db:enumvalue>0x4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IsLoopBack</db:enumidentifier>
<db:enumvalue>0x8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IsPointToPoint</db:enumidentifier>
<db:enumvalue>0x10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CanMulticast</db:enumidentifier>
<db:enumvalue>0x20</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QNetworkInterface::InterfaceFlags</db:typedefname>
</db:typedefsynopsis>
<db:para>Specifies the flags associated with this network interface. The possible values are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::IsUp</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>the network interface is &quot;up&quot; - enabled by administrative action</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::IsRunning</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>the network interface is operational: configured &quot;up&quot; and (typically) physically connected to a network</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::CanBroadcast</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>the network interface works in broadcast mode</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::IsLoopBack</db:code></db:para>
</db:td>
<db:td><db:code>0x8</db:code></db:td>
<db:td>
<db:para>the network interface is a loopback interface: that is, it's a virtual interface whose destination is the host computer itself</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::IsPointToPoint</db:code></db:para>
</db:td>
<db:td><db:code>0x10</db:code></db:td>
<db:td>
<db:para>the network interface is a point-to-point interface: that is, there is one, single other address that can be directly reached by it.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::CanMulticast</db:code></db:para>
</db:td>
<db:td><db:code>0x20</db:code></db:td>
<db:td>
<db:para>the network interface supports multicasting</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Note that one network interface cannot be both broadcast-based and point-to-point.</db:para>
<db:para>The <db:code>InterfaceFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;InterfaceFlag&gt;. </db:code>It stores an OR combination of <db:code>InterfaceFlag</db:code> values.</db:para>
</db:section>
<db:section xml:id="InterfaceType-enum">
<db:title>enum QNetworkInterface::InterfaceType</db:title>
<db:enumsynopsis>
<db:enumname>InterfaceType</db:enumname>
<db:enumitem>
<db:enumidentifier>Loopback</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Virtual</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Ethernet</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Slip</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CanBus</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Ppp</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Fddi</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Wifi</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Ieee80211</db:enumidentifier>
<db:enumvalue>Wifi</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Phonet</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Ieee802154</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SixLoWPAN</db:enumidentifier>
<db:enumvalue>11</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Ieee80216</db:enumidentifier>
<db:enumvalue>12</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Ieee1394</db:enumidentifier>
<db:enumvalue>13</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Unknown</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Specifies the type of hardware (PHY layer, OSI level 1) this interface is, if it could be determined. Interface types that are not among those listed below will generally be listed as Unknown, though future versions of Qt may add new enumeration values.</db:para>
<db:para>The possible values are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The interface type could not be determined or is not one of the other listed types.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::Loopback</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The virtual loopback interface, which is assigned the loopback IP addresses (127.0.0.1, ::1).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::Virtual</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A type of interface determined to be virtual, but not any of the other possible types. For example, tunnel interfaces are (currently) detected as virtual ones.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::Ethernet</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>IEEE 802.3 Ethernet interfaces, though on many systems other types of IEEE 802 interfaces may also be detected as Ethernet (especially Wi-Fi).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::Wifi</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>IEEE 802.11 Wi-Fi interfaces. Note that on some systems, <db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> may be unable to distinguish regular Ethernet from Wi-Fi and will not return this enum value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::Ieee80211</db:code></db:para>
</db:td>
<db:td><db:code>Wifi</db:code></db:td>
<db:td>
<db:para>An alias for WiFi.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::CanBus</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>ISO 11898 Controller Area Network bus interfaces, usually found on automotive systems.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::Fddi</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>ANSI X3T12 Fiber Distributed Data Interface, a local area network over optical fibers.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::Ppp</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Point-to-Point Protocol interfaces, establishing a direct connection between two nodes over a lower transport layer (often serial over radio or physical line).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::Slip</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Serial Line Internet Protocol interfaces.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::Phonet</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Interfaces using the Linux Phonet socket family, for communication with cellular modems. See the <db:link xlink:href="https://www.kernel.org/doc/Documentation/networking/phonet.txt">Linux kernel documentation</db:link> for more information.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::Ieee802154</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>IEEE 802.15.4 Personal Area Network interfaces, other than 6LoWPAN (see below).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::SixLoWPAN</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>6LoWPAN (IPv6 over Low-power Wireless Personal Area Networks) interfaces, which operate on IEEE 802.15.4 PHY, but have specific header compression schemes for IPv6 and UDP. This type of interface is often used for mesh networking.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::Ieee80216</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>IEEE 802.16 Wireless Metropolitan Area Network, also known under the commercial name &quot;WiMAX&quot;.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link></db:emphasis>::Ieee1394</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>IEEE 1394 interfaces (a.k.a. &quot;FireWire&quot;).</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNetworkInterface">
<db:title>QNetworkInterface::QNetworkInterface()</db:title>
<db:constructorsynopsis>
<db:methodname>QNetworkInterface</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkInterface()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty network interface object.</db:para>
</db:section>
<db:section xml:id="QNetworkInterface-1">
<db:title>QNetworkInterface::QNetworkInterface(const QNetworkInterface &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QNetworkInterface</db:methodname>
<db:methodparam>
<db:type>const QNetworkInterface &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkInterface(const QNetworkInterface &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a copy of the <db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> object contained in <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QNetworkInterface">
<db:title>QNetworkInterface::~QNetworkInterface()</db:title>
<db:destructorsynopsis>
<db:methodname>~QNetworkInterface</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QNetworkInterface()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Frees the resources associated with the <db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> object.</db:para>
</db:section>
<db:section xml:id="addressEntries">
<db:title>QList&lt;QNetworkAddressEntry&gt; QNetworkInterface::addressEntries() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QNetworkAddressEntry&gt;</db:type>
<db:methodname>addressEntries</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QNetworkAddressEntry&gt; addressEntries() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of IP addresses that this interface possesses along with their associated netmasks and broadcast addresses.</db:para>
<db:para>If the netmask or broadcast address or other information is not necessary, you can call the <db:link xlink:href="qnetworkinterface.xml#allAddresses">allAddresses</db:link>() function to obtain just the IP addresses of the active interfaces.</db:para>
</db:section>
<db:section xml:id="allAddresses">
<db:title>[static] QList&lt;QHostAddress&gt; QNetworkInterface::allAddresses()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;QHostAddress&gt;</db:type>
<db:methodname>allAddresses</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QHostAddress&gt; allAddresses()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function returns all IP addresses found on the host machine. It is equivalent to calling <db:link xlink:href="qnetworkinterface.xml#addressEntries">addressEntries</db:link>() on all the objects returned by <db:link xlink:href="qnetworkinterface.xml#allInterfaces">allInterfaces</db:link>() that are in the <db:link xlink:href="qnetworkinterface.xml#InterfaceFlag-enum">QNetworkInterface::IsUp</db:link> state to obtain lists of <db:link xlink:href="qnetworkaddressentry.xml">QNetworkAddressEntry</db:link> objects then calling <db:link xlink:href="qnetworkaddressentry.xml#ip">QNetworkAddressEntry::ip</db:link>() on each of these.</db:para>
</db:section>
<db:section xml:id="allInterfaces">
<db:title>[static] QList&lt;QNetworkInterface&gt; QNetworkInterface::allInterfaces()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;QNetworkInterface&gt;</db:type>
<db:methodname>allInterfaces</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QNetworkInterface&gt; allInterfaces()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a listing of all the network interfaces found on the host machine. In case of failure it returns a list with zero elements.</db:para>
</db:section>
<db:section xml:id="flags">
<db:title>QNetworkInterface::InterfaceFlags QNetworkInterface::flags() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QNetworkInterface::InterfaceFlags</db:type>
<db:methodname>flags</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkInterface::InterfaceFlags flags() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the flags associated with this network interface.</db:para>
</db:section>
<db:section xml:id="hardwareAddress">
<db:title>QString QNetworkInterface::hardwareAddress() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>hardwareAddress</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString hardwareAddress() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the low-level hardware address for this interface. On Ethernet interfaces, this will be a MAC address in string representation, separated by colons.</db:para>
<db:para>Other interface types may have other types of hardware addresses. Implementations should not depend on this function returning a valid MAC address.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkinterface.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="humanReadableName">
<db:title>QString QNetworkInterface::humanReadableName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>humanReadableName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString humanReadableName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the human-readable name of this network interface on Windows, such as &quot;Local Area Connection&quot;, if the name could be determined. If it couldn't, this function returns the same as <db:link xlink:href="qnetworkinterface.xml#name">name</db:link>(). The human-readable name is a name that the user can modify in the Windows Control Panel, so it may change during the execution of the program.</db:para>
<db:para>On Unix, this function currently always returns the same as <db:link xlink:href="qnetworkinterface.xml#name">name</db:link>(), since Unix systems don't store a configuration for human-readable names.</db:para>
</db:section>
<db:section xml:id="index">
<db:title>int QNetworkInterface::index() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>index</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int index() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the interface system index, if known. This is an integer assigned by the operating system to identify this interface and it generally doesn't change. It matches the scope ID field in IPv6 addresses.</db:para>
<db:para>If the index isn't known, this function returns 0.</db:para>
</db:section>
<db:section xml:id="interfaceFromIndex">
<db:title>[static] QNetworkInterface QNetworkInterface::interfaceFromIndex(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QNetworkInterface</db:type>
<db:methodname>interfaceFromIndex</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkInterface interfaceFromIndex(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> object for the interface whose internal ID is <db:code role="parameter">index</db:code>. Network interfaces have a unique identifier called the &quot;interface index&quot; to distinguish it from other interfaces on the system. Often, this value is assigned progressively and interfaces being removed and then added again get a different value every time.</db:para>
<db:para>This index is also found in the IPv6 address' scope ID field.</db:para>
</db:section>
<db:section xml:id="interfaceFromName">
<db:title>[static] QNetworkInterface QNetworkInterface::interfaceFromName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QNetworkInterface</db:type>
<db:methodname>interfaceFromName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkInterface interfaceFromName(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> object for the interface named <db:code role="parameter">name</db:code>. If no such interface exists, this function returns an invalid <db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> object.</db:para>
<db:para>The string <db:code role="parameter">name</db:code> may be either an actual interface name (such as &quot;eth0&quot; or &quot;en1&quot;) or an interface index in string form (&quot;1&quot;, &quot;2&quot;, etc.).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkinterface.xml#name">name</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkinterface.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="interfaceIndexFromName">
<db:title>[static, since 5.7] int QNetworkInterface::interfaceIndexFromName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>interfaceIndexFromName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int interfaceIndexFromName(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index of the interface whose name is <db:code role="parameter">name</db:code> or 0 if there is no interface with that name. This function should produce the same result as the following code, but will probably execute faster.</db:para>
<db:programlisting language="cpp">    QNetworkInterface::interfaceFromName(name).index()
</db:programlisting>
<db:para>This function was introduced in Qt 5.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkinterface.xml#interfaceFromName">interfaceFromName</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkinterface.xml#interfaceNameFromIndex">interfaceNameFromIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkdatagram.xml#interfaceIndex">QNetworkDatagram::interfaceIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="interfaceNameFromIndex">
<db:title>[static, since 5.7] QString QNetworkInterface::interfaceNameFromIndex(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>interfaceNameFromIndex</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString interfaceNameFromIndex(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the interface whose index is <db:code role="parameter">index</db:code> or an empty string if there is no interface with that index. This function should produce the same result as the following code, but will probably execute faster.</db:para>
<db:programlisting language="cpp">    QNetworkInterface::interfaceFromIndex(index).name()
</db:programlisting>
<db:para>This function was introduced in Qt 5.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkinterface.xml#interfaceFromIndex">interfaceFromIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkinterface.xml#interfaceIndexFromName">interfaceIndexFromName</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkdatagram.xml#interfaceIndex">QNetworkDatagram::interfaceIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QNetworkInterface::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> object contains valid information about a network interface.</db:para>
</db:section>
<db:section xml:id="maximumTransmissionUnit">
<db:title>[since 5.11] int QNetworkInterface::maximumTransmissionUnit() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>maximumTransmissionUnit</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int maximumTransmissionUnit() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum transmission unit on this interface, if known, or 0 otherwise.</db:para>
<db:para>The maximum transmission unit is the largest packet that may be sent on this interface without incurring link-level fragmentation. Applications may use this value to calculate the size of the payload that will fit an unfragmented UDP datagram. Remember to subtract the sizes of headers used in your communication over the interface, e.g. TCP (20 bytes) or UDP (12), IPv4 (20) or IPv6 (40, absent some form of header compression), when computing how big a payload you can transmit. Also note that the MTU along the full path (the Path MTU) to the destination may be smaller than the interface's MTU.</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>QString QNetworkInterface::name() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString name() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of this network interface. On Unix systems, this is a string containing the type of the interface and optionally a sequence number, such as &quot;eth0&quot;, &quot;lo&quot; or &quot;pcn0&quot;. On Windows, it's an internal ID that cannot be changed by the user.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.0] void QNetworkInterface::swap(QNetworkInterface &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QNetworkInterface &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QNetworkInterface &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this network interface instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>[since 5.11] QNetworkInterface::InterfaceType QNetworkInterface::type() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QNetworkInterface::InterfaceType</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkInterface::InterfaceType type() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of this interface, if it could be determined. If it could not be determined, this function returns <db:link xlink:href="qnetworkinterface.xml#InterfaceType-enum">QNetworkInterface::Unknown</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkinterface.xml#hardwareAddress">hardwareAddress</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QNetworkInterface &amp;QNetworkInterface::operator=(const QNetworkInterface &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QNetworkInterface &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QNetworkInterface &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkInterface &amp; operator=(const QNetworkInterface &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copies the contents of the <db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> object contained in <db:code role="parameter">other</db:code> into this one.</db:para>
</db:section>
</db:section>
</db:article>
