<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Quick Secure CoAP Client</db:title>
<db:productname>QtCoap</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt CoAP Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Securing the CoAP client and using it with a Qt Quick user interface.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2019 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick.Layouts
import QtQuick.Controls
import QtQuick.Window

Window {
    id: root

    required property var hostsModel

    visible: true
    width: 480
    height: 640
    title: qsTr(&quot;Qt Quick Secure CoAP Client&quot;)

    CoapSecureClient {
        id: client
        onFinished: (result) =&amp;gt; {
            outputView.text = result;
            statusLabel.text = &quot;&quot;;
            disconnectButton.enabled = true;
        }
    }

    GridLayout {
        anchors.fill: parent
        anchors.margins: 10
        columns: 2

        Label {
            text: qsTr(&quot;Host:&quot;)
        }
        ComboBox {
            id: hostComboBox
            editable: true
            model: root.hostsModel
            Layout.fillWidth: true
        }

        Label {
            text: qsTr(&quot;Port:&quot;)
        }
        TextField {
            id: portField
            text: &quot;5684&quot;
            placeholderText: qsTr(&quot;&amp;lt;Port&amp;gt;&quot;)
            inputMethodHints: Qt.ImhDigitsOnly
            Layout.preferredWidth: 80
        }

        Label {
            text: qsTr(&quot;Resource:&quot;)
        }
        TextField {
            id: resourceField
            placeholderText: qsTr(&quot;&amp;lt;Resource Path&amp;gt;&quot;)
            inputMethodHints: Qt.ImhUrlCharactersOnly
            selectByMouse: true
            Layout.fillWidth: true
        }

        Label {
            text: qsTr(&quot;Security Mode:&quot;)
        }
        ButtonGroup {
            id: securityModeGroup
            onClicked: {
                if ((securityModeGroup.checkedButton as RadioButton) === preSharedMode)
                    client.setSecurityMode(QtCoap.SecurityMode.PreSharedKey);
                else
                    client.setSecurityMode(QtCoap.SecurityMode.Certificate);
            }
        }
        RowLayout {
            RadioButton {
                id: preSharedMode
                text: qsTr(&quot;Pre-shared Key&quot;)
                ButtonGroup.group: securityModeGroup
            }
            RadioButton {
                id: certificateMode
                text: qsTr(&quot;X.509 Certificate&quot;)
                ButtonGroup.group: securityModeGroup
            }
        }

        RowLayout {
            enabled: (securityModeGroup.checkedButton as RadioButton) === preSharedMode
            Layout.columnSpan: 2

            Label {
                text: qsTr(&quot;Key&quot;)
            }
            TextField {
                id: pskField
                placeholderText: qsTr(&quot;&amp;lt;Pre-shared Key&amp;gt;&quot;)
                Layout.fillWidth: true
            }

            Label {
                text: qsTr(&quot;Identity&quot;)
            }
            TextField {
                id: identityField
                placeholderText: qsTr(&quot;&amp;lt;Identity&amp;gt;&quot;)
                Layout.fillWidth: true
            }
        }

        FilePicker {
            id: localCertificatePicker
            dialogText: qsTr(&quot;Local Certificate&quot;)
            enabled: (securityModeGroup.checkedButton as RadioButton) === certificateMode
            Layout.columnSpan: 2
            Layout.fillWidth: true
        }

        FilePicker {
            id: caCertificatePicker
            dialogText: qsTr(&quot;CA Certificate&quot;)
            enabled: (securityModeGroup.checkedButton as RadioButton) === certificateMode
            Layout.columnSpan: 2
            Layout.fillWidth: true
        }

        FilePicker {
            id: privateKeyPicker
            dialogText: qsTr(&quot;Private Key&quot;)
            enabled: (securityModeGroup.checkedButton as RadioButton) === certificateMode
            Layout.columnSpan: 2
            Layout.fillWidth: true
        }

        Button {
            id: requestButton
            text: qsTr(&quot;Send Request&quot;)
            enabled: securityModeGroup.checkState !== Qt.Unchecked

            onClicked: {
                outputView.text = &quot;&quot;;
                if ((securityModeGroup.checkedButton as RadioButton) === preSharedMode)
                    client.setSecurityConfiguration(pskField.text, identityField.text);
                else
                    client.setSecurityConfiguration(localCertificatePicker.selectedFile,
                                                    caCertificatePicker.selectedFile,
                                                    privateKeyPicker.selectedFile);

                client.sendGetRequest(hostComboBox.editText, resourceField.text,
                                      parseInt(portField.text));

                statusLabel.text = qsTr(&quot;Sending request to %1%2...&quot;).arg(hostComboBox.editText)
                                                                     .arg(resourceField.text);
            }
        }

        Button {
            id: disconnectButton
            text: qsTr(&quot;Disconnect&quot;)
            enabled: false

            onClicked: {
                client.disconnect();
                statusLabel.text = qsTr(&quot;Disconnected.&quot;);
                outputView.text = &quot;&quot;;
                disconnectButton.enabled = false;
            }
        }

        TextArea {
            id: outputView
            placeholderText: qsTr(&quot;&amp;lt;Client Output&amp;gt;&quot;)
            background: Rectangle {
                border.color: &quot;gray&quot;
            }
            Layout.columnSpan: 2
            Layout.fillHeight: true
            Layout.fillWidth: true
        }
        Label {
            id: statusLabel
            Layout.columnSpan: 2
            Layout.fillWidth: true
        }
    }
}

</db:programlisting>
</db:article>
