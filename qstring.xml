<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QString Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstring.xml">QString</db:link> class provides a Unicode character string.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QString</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QString is part of <db:simplelist><db:member>tools</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member><db:member>string-processing</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qstring.xml">QString</db:link> stores a string of 16-bit <db:link xlink:href="qchar.xml">QChar</db:link>s, where each <db:link xlink:href="qchar.xml">QChar</db:link> corresponds to one UTF-16 code unit. (Unicode characters with code values above 65535 are stored using surrogate pairs, i.e., two consecutive <db:link xlink:href="qchar.xml">QChar</db:link>s.)</db:para>
<db:para><db:link xlink:href="unicode.xml">Unicode</db:link> is an international standard that supports most of the writing systems in use today. It is a superset of US-ASCII (ANSI X3.4-1986) and Latin-1 (ISO 8859-1), and all the US-ASCII/Latin-1 characters are available at the same code positions.</db:para>
<db:para>Behind the scenes, <db:link xlink:href="qstring.xml">QString</db:link> uses <db:link xlink:href="implicit-sharing.xml">implicit sharing</db:link> (copy-on-write) to reduce memory usage and to avoid the needless copying of data. This also helps reduce the inherent overhead of storing 16-bit characters instead of 8-bit characters.</db:para>
<db:para>In addition to <db:link xlink:href="qstring.xml">QString</db:link>, Qt also provides the <db:link xlink:href="qbytearray.xml">QByteArray</db:link> class to store raw bytes and traditional 8-bit '\0'-terminated strings. For most purposes, <db:link xlink:href="qstring.xml">QString</db:link> is the class you want to use. It is used throughout the Qt API, and the Unicode support ensures that your applications will be easy to translate if you want to expand your application's market at some point. The two main cases where <db:link xlink:href="qbytearray.xml">QByteArray</db:link> is appropriate are when you need to store raw binary data, and when memory conservation is critical (like in embedded systems).</db:para>
<db:section xml:id="initializing-a-string">
<db:title>Initializing a String</db:title>
<db:para>One way to initialize a <db:link xlink:href="qstring.xml">QString</db:link> is simply to pass a <db:code>const char *</db:code> to its constructor. For example, the following code creates a <db:link xlink:href="qstring.xml">QString</db:link> of size 5 containing the data &quot;Hello&quot;:</db:para>
<db:programlisting language="cpp">QString str = &quot;Hello&quot;;
</db:programlisting>
<db:para><db:link xlink:href="qstring.xml">QString</db:link> converts the <db:code>const char *</db:code> data into Unicode using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function.</db:para>
<db:para>In all of the <db:link xlink:href="qstring.xml">QString</db:link> functions that take <db:code>const char *</db:code> parameters, the <db:code>const char *</db:code> is interpreted as a classic C-style '\0'-terminated string encoded in UTF-8. It is legal for the <db:code>const char *</db:code> parameter to be <db:code>nullptr</db:code>.</db:para>
<db:para>You can also provide string data as an array of <db:link xlink:href="qchar.xml">QChar</db:link>s:</db:para>
<db:programlisting language="cpp">static const QChar data[4] = { 0x0055, 0x006e, 0x10e3, 0x03a3 };
QString str(data, 4);
</db:programlisting>
<db:para><db:link xlink:href="qstring.xml">QString</db:link> makes a deep copy of the <db:link xlink:href="qchar.xml">QChar</db:link> data, so you can modify it later without experiencing side effects. (If for performance reasons you don't want to take a deep copy of the character data, use <db:link xlink:href="qstring.xml#fromRawData">QString::fromRawData</db:link>() instead.)</db:para>
<db:para>Another approach is to set the size of the string using <db:link xlink:href="qstring.xml#resize">resize</db:link>() and to initialize the data character per character. <db:link xlink:href="qstring.xml">QString</db:link> uses 0-based indexes, just like C++ arrays. To access the character at a particular index position, you can use <db:link xlink:href="qstring.xml#operator-5b-5d">operator[]</db:link>(). On non-<db:code>const</db:code> strings, <db:link xlink:href="qstring.xml#operator-5b-5d">operator[]</db:link>() returns a reference to a character that can be used on the left side of an assignment. For example:</db:para>
<db:programlisting language="cpp">QString str;
str.resize(4);

str[0] = QChar('U');
str[1] = QChar('n');
str[2] = QChar(0x10e3);
str[3] = QChar(0x03a3);
</db:programlisting>
<db:para>For read-only access, an alternative syntax is to use the <db:link xlink:href="qstring.xml#at">at</db:link>() function:</db:para>
<db:programlisting language="cpp">QString str;

for (qsizetype i = 0; i &amp;lt; str.size(); ++i) {
    if (str.at(i) &amp;gt;= QChar('a') &amp;amp;&amp;amp; str.at(i) &amp;lt;= QChar('f'))
        qDebug() &amp;lt;&amp;lt; &quot;Found character in range [a-f]&quot;;
}
</db:programlisting>
<db:para>The <db:link xlink:href="qstring.xml#at">at</db:link>() function can be faster than <db:link xlink:href="qstring.xml#operator-5b-5d">operator[]</db:link>(), because it never causes a <db:link xlink:href="implicit-sharing.xml#deep-copy">deep copy</db:link> to occur. Alternatively, use the <db:link xlink:href="qstring.xml#first">first</db:link>(), <db:link xlink:href="qstring.xml#last">last</db:link>(), or <db:link xlink:href="qstring.xml#sliced">sliced</db:link>() functions to extract several characters at a time.</db:para>
<db:para>A <db:link xlink:href="qstring.xml">QString</db:link> can embed '\0' characters (<db:link xlink:href="qchar.xml#SpecialCharacter-enum">QChar::Null</db:link>). The <db:link xlink:href="qstring.xml#size">size</db:link>() function always returns the size of the whole string, including embedded '\0' characters.</db:para>
<db:para>After a call to the <db:link xlink:href="qstring.xml#resize">resize</db:link>() function, newly allocated characters have undefined values. To set all the characters in the string to a particular value, use the <db:link xlink:href="qstring.xml#fill">fill</db:link>() function.</db:para>
<db:para><db:link xlink:href="qstring.xml">QString</db:link> provides dozens of overloads designed to simplify string usage. For example, if you want to compare a <db:link xlink:href="qstring.xml">QString</db:link> with a string literal, you can write code like this and it will work as expected:</db:para>
<db:programlisting language="cpp">QString str;

if (str == &quot;auto&quot; || str == &quot;extern&quot;
        || str == &quot;static&quot; || str == &quot;register&quot;) {
    // ...
}
</db:programlisting>
<db:para>You can also pass string literals to functions that take QStrings as arguments, invoking the <db:link xlink:href="qstring.xml">QString</db:link>(const char *) constructor. Similarly, you can pass a <db:link xlink:href="qstring.xml">QString</db:link> to a function that takes a <db:code>const char *</db:code> argument using the <db:link xlink:href="qtglobal.xml#qPrintable">qPrintable</db:link>() macro which returns the given <db:link xlink:href="qstring.xml">QString</db:link> as a <db:code>const char *</db:code>. This is equivalent to calling &lt;<db:link xlink:href="qstring.xml">QString</db:link>&gt;.<db:link xlink:href="qstring.xml#toLocal8Bit">toLocal8Bit</db:link>().<db:link xlink:href="qstring.xml#constData">constData</db:link>().</db:para>
</db:section>
<db:section xml:id="manipulating-string-data">
<db:title>Manipulating String Data</db:title>
<db:para><db:link xlink:href="qstring.xml">QString</db:link> provides the following basic functions for modifying the character data: <db:link xlink:href="qstring.xml#append">append</db:link>(), <db:link xlink:href="qstring.xml#prepend">prepend</db:link>(), <db:link xlink:href="qstring.xml#insert">insert</db:link>(), <db:link xlink:href="qstring.xml#replace">replace</db:link>(), and <db:link xlink:href="qstring.xml#remove">remove</db:link>(). For example:</db:para>
<db:programlisting language="cpp">QString str = &quot;and&quot;;
str.prepend(&quot;rock &quot;);     // str == &quot;rock and&quot;
str.append(&quot; roll&quot;);        // str == &quot;rock and roll&quot;
str.replace(5, 3, &quot;&amp;amp;&quot;);   // str == &quot;rock &amp;amp; roll&quot;
</db:programlisting>
<db:para>In the above example the <db:link xlink:href="qstring.xml#replace">replace</db:link>() function's first two arguments are the position from which to start replacing and the number of characters that should be replaced.</db:para>
<db:para>When data-modifying functions increase the size of the string, they may lead to reallocation of memory for the <db:link xlink:href="qstring.xml">QString</db:link> object. When this happens, <db:link xlink:href="qstring.xml">QString</db:link> expands by more than it immediately needs so as to have space for further expansion without reallocation until the size of the string has greatly increased.</db:para>
<db:para>The <db:link xlink:href="qstring.xml#insert">insert</db:link>(), <db:link xlink:href="qstring.xml#remove">remove</db:link>() and, when replacing a sub-string with one of different size, <db:link xlink:href="qstring.xml#replace">replace</db:link>() functions can be slow (<db:link xlink:href="containers.xml#linear-time">linear time</db:link>) for large strings, because they require moving many characters in the string by at least one position in memory.</db:para>
<db:para>If you are building a <db:link xlink:href="qstring.xml">QString</db:link> gradually and know in advance approximately how many characters the <db:link xlink:href="qstring.xml">QString</db:link> will contain, you can call <db:link xlink:href="qstring.xml#reserve">reserve</db:link>(), asking <db:link xlink:href="qstring.xml">QString</db:link> to preallocate a certain amount of memory. You can also call <db:link xlink:href="qstring.xml#capacity">capacity</db:link>() to find out how much memory the <db:link xlink:href="qstring.xml">QString</db:link> actually has allocated.</db:para>
<db:para><db:link xlink:href="qstring.xml">QString</db:link> provides <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link> (<db:link xlink:href="qstring.xml#const_iterator-typedef">QString::const_iterator</db:link> and <db:link xlink:href="qstring.xml#iterator-typedef">QString::iterator</db:link>). In practice, iterators are handy when working with generic algorithms provided by the C++ standard library.</db:para>
<db:note>
<db:para>Iterators over a <db:link xlink:href="qstring.xml">QString</db:link>, and references to individual characters within one, cannot be relied on to remain valid when any non-<db:code>const</db:code> method of the <db:link xlink:href="qstring.xml">QString</db:link> is called. Accessing such an iterator or reference after the call to a non-<db:code>const</db:code> method leads to undefined behavior. When stability for iterator-like functionality is required, you should use indexes instead of iterators as they are not tied to <db:link xlink:href="qstring.xml">QString</db:link>'s internal state and thus do not get invalidated.</db:para>
</db:note>
<db:note>
<db:para>Due to <db:link xlink:href="implicit-sharing.xml">implicit sharing</db:link>, the first non-<db:code>const</db:code> operator or function used on a given <db:link xlink:href="qstring.xml">QString</db:link> may cause it to, internally, perform a deep copy of its data. This invalidates all iterators over the string and references to individual characters within it. After the first non-<db:code>const</db:code> operator, operations that modify <db:link xlink:href="qstring.xml">QString</db:link> may completely (in case of reallocation) or partially invalidate iterators and references, but other methods (such as <db:link xlink:href="qstring.xml#begin">begin</db:link>() or <db:link xlink:href="qstring.xml#end">end</db:link>()) will not. Accessing an iterator or reference after it has been invalidated leads to undefined behavior.</db:para>
</db:note>
<db:para>A frequent requirement is to remove whitespace characters from a string ('\n', '\t', ' ', etc.). If you want to remove whitespace from both ends of a <db:link xlink:href="qstring.xml">QString</db:link>, use the <db:link xlink:href="qstring.xml#trimmed">trimmed</db:link>() function. If you want to remove whitespace from both ends and replace multiple consecutive whitespaces with a single space character within the string, use <db:link xlink:href="qstring.xml#simplified">simplified</db:link>().</db:para>
<db:para>If you want to find all occurrences of a particular character or substring in a <db:link xlink:href="qstring.xml">QString</db:link>, use the <db:link xlink:href="qstring.xml#indexOf">indexOf</db:link>() or <db:link xlink:href="qstring.xml#lastIndexOf">lastIndexOf</db:link>() functions. The former searches forward starting from a given index position, the latter searches backward. Both return the index position of the character or substring if they find it; otherwise, they return -1. For example, here is a typical loop that finds all occurrences of a particular substring:</db:para>
<db:programlisting language="cpp">QString str = &quot;We must be &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt;, very &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt;&quot;;
qsizetype j = 0;

while ((j = str.indexOf(&quot;&amp;lt;b&amp;gt;&quot;, j)) != -1) {
    qDebug() &amp;lt;&amp;lt; &quot;Found &amp;lt;b&amp;gt; tag at index position&quot; &amp;lt;&amp;lt; j;
    ++j;
}
</db:programlisting>
<db:para><db:link xlink:href="qstring.xml">QString</db:link> provides many functions for converting numbers into strings and strings into numbers. See the <db:link xlink:href="qstring.xml#arg">arg</db:link>() functions, the <db:link xlink:href="qstring.xml#setNum">setNum</db:link>() functions, the <db:link xlink:href="qstring.xml#number">number</db:link>() static functions, and the <db:link xlink:href="qstring.xml#toInt">toInt</db:link>(), <db:link xlink:href="qstring.xml#toDouble">toDouble</db:link>(), and similar functions.</db:para>
<db:para>To get an upper- or lowercase version of a string use <db:link xlink:href="qstring.xml#toUpper">toUpper</db:link>() or <db:link xlink:href="qstring.xml#toLower">toLower</db:link>().</db:para>
<db:para>Lists of strings are handled by the <db:link xlink:href="qstringlist.xml">QStringList</db:link> class. You can split a string into a list of strings using the <db:link xlink:href="qstring.xml#split">split</db:link>() function, and join a list of strings into a single string with an optional separator using <db:link xlink:href="qstringlist.xml#join">QStringList::join</db:link>(). You can obtain a list of strings from a string list that contain a particular substring or that match a particular <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> using the <db:link xlink:href="qstringlist.xml#filter">QStringList::filter</db:link>() function.</db:para>
</db:section>
<db:section xml:id="querying-string-data">
<db:title>Querying String Data</db:title>
<db:para>If you want to see if a <db:link xlink:href="qstring.xml">QString</db:link> starts or ends with a particular substring use <db:link xlink:href="qstring.xml#startsWith">startsWith</db:link>() or <db:link xlink:href="qstring.xml#endsWith">endsWith</db:link>(). If you simply want to check whether a <db:link xlink:href="qstring.xml">QString</db:link> contains a particular character or substring, use the <db:link xlink:href="qstring.xml#contains">contains</db:link>() function. If you want to find out how many times a particular character or substring occurs in the string, use <db:link xlink:href="qstring.xml#count-1">count</db:link>().</db:para>
<db:para>To obtain a pointer to the actual character data, call <db:link xlink:href="qstring.xml#data">data</db:link>() or <db:link xlink:href="qstring.xml#constData">constData</db:link>(). These functions return a pointer to the beginning of the <db:link xlink:href="qchar.xml">QChar</db:link> data. The pointer is guaranteed to remain valid until a non-<db:code>const</db:code> function is called on the <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:section xml:id="comparing-strings">
<db:title>Comparing Strings</db:title>
<db:para>QStrings can be compared using overloaded operators such as <db:link xlink:href="qstring.xml#operator-lt-1">operator&lt;</db:link>(), <db:link xlink:href="qstring.xml#operator-lt-eq">operator&lt;=</db:link>(), <db:link xlink:href="qstring.xml#operator-eq-eq-1">operator==</db:link>(), <db:link xlink:href="qstring.xml#operator-gt-eq">operator&gt;=</db:link>(), and so on. Note that the comparison is based exclusively on the numeric Unicode values of the characters. It is very fast, but is not what a human would expect; the <db:link xlink:href="qstring.xml#localeAwareCompare">QString::localeAwareCompare</db:link>() function is usually a better choice for sorting user-interface strings, when such a comparison is available.</db:para>
<db:para>On Unix-like platforms (including Linux, macOS and iOS), when Qt is linked with the ICU library (which it usually is), its locale-aware sorting is used. Otherwise, on macOS and iOS, <db:link xlink:href="qstring.xml#localeAwareCompare">localeAwareCompare</db:link>() compares according the &quot;Order for sorted lists&quot; setting in the International preferences panel. On other Unix-like systems without ICU, the comparison falls back to the system library's <db:code>strcoll()</db:code>,</db:para>
</db:section>
</db:section>
<db:section xml:id="converting-between-encoded-strings-data-and-qstring">
<db:title>Converting Between Encoded Strings Data and QString</db:title>
<db:para><db:link xlink:href="qstring.xml">QString</db:link> provides the following three functions that return a <db:code>const char *</db:code> version of the string as <db:link xlink:href="qbytearray.xml">QByteArray</db:link>: <db:link xlink:href="qstring.xml#toUtf8">toUtf8</db:link>(), <db:link xlink:href="qstring.xml#toLatin1">toLatin1</db:link>(), and <db:link xlink:href="qstring.xml#toLocal8Bit">toLocal8Bit</db:link>().</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qstring.xml#toLatin1">toLatin1</db:link>() returns a Latin-1 (ISO 8859-1) encoded 8-bit string.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstring.xml#toUtf8">toUtf8</db:link>() returns a UTF-8 encoded 8-bit string. UTF-8 is a superset of US-ASCII (ANSI X3.4-1986) that supports the entire Unicode character set through multibyte sequences.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstring.xml#toLocal8Bit">toLocal8Bit</db:link>() returns an 8-bit string using the system's local encoding. This is the same as <db:link xlink:href="qstring.xml#toUtf8">toUtf8</db:link>() on Unix systems.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To convert from one of these encodings, <db:link xlink:href="qstring.xml">QString</db:link> provides <db:link xlink:href="qstring.xml#fromLatin1">fromLatin1</db:link>(), <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>(), and <db:link xlink:href="qstring.xml#fromLocal8Bit">fromLocal8Bit</db:link>(). Other encodings are supported through the <db:link xlink:href="qstringencoder.xml">QStringEncoder</db:link> and <db:link xlink:href="qstringdecoder.xml">QStringDecoder</db:link> classes.</db:para>
<db:para>As mentioned above, <db:link xlink:href="qstring.xml">QString</db:link> provides a lot of functions and operators that make it easy to interoperate with <db:code>const char *</db:code> strings. But this functionality is a double-edged sword: It makes <db:link xlink:href="qstring.xml">QString</db:link> more convenient to use if all strings are US-ASCII or Latin-1, but there is always the risk that an implicit conversion from or to <db:code>const char *</db:code> is done using the wrong 8-bit encoding. To minimize these risks, you can turn off these implicit conversions by defining some of the following preprocessor symbols:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> disables automatic conversions from C string literals and pointers to Unicode.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstring.xml#QT_RESTRICTED_CAST_FROM_ASCII">QT_RESTRICTED_CAST_FROM_ASCII</db:link> allows automatic conversions from C characters and character arrays, but disables automatic conversions from character pointers to Unicode.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstring.xml#QT_NO_CAST_TO_ASCII">QT_NO_CAST_TO_ASCII</db:link> disables automatic conversion from <db:link xlink:href="qstring.xml">QString</db:link> to C strings.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>You then need to explicitly call <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>(), <db:link xlink:href="qstring.xml#fromLatin1">fromLatin1</db:link>(), or <db:link xlink:href="qstring.xml#fromLocal8Bit">fromLocal8Bit</db:link>() to construct a <db:link xlink:href="qstring.xml">QString</db:link> from an 8-bit string, or use the lightweight <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> class, for example:</db:para>
<db:programlisting language="cpp">QString url = QLatin1String(&quot;http://www.unicode.org/&quot;);
</db:programlisting>
<db:para>Similarly, you must call <db:link xlink:href="qstring.xml#toLatin1">toLatin1</db:link>(), <db:link xlink:href="qstring.xml#toUtf8">toUtf8</db:link>(), or <db:link xlink:href="qstring.xml#toLocal8Bit">toLocal8Bit</db:link>() explicitly to convert the <db:link xlink:href="qstring.xml">QString</db:link> to an 8-bit string.</db:para>
<db:informaltable style="generic" width="100%">
<db:thead>
<db:tr>
<db:th>
<db:para>Note for C Programmers</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Due to C++'s type system and the fact that <db:link xlink:href="qstring.xml">QString</db:link> is <db:link xlink:href="implicit-sharing.xml">implicitly shared</db:link>, QStrings may be treated like <db:code>int</db:code>s or other basic types. For example:</db:para>
<db:programlisting language="cpp">QString Widget::boolToString(bool b)
{
    QString result;
    if (b)
        result = &quot;True&quot;;
    else
        result = &quot;False&quot;;
    return result;
}
</db:programlisting>
<db:para>The <db:code>result</db:code> variable, is a normal variable allocated on the stack. When <db:code>return</db:code> is called, and because we're returning by value, the copy constructor is called and a copy of the string is returned. No actual copying takes place thanks to the implicit sharing.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="distinction-between-null-and-empty-strings">
<db:title>Distinction Between Null and Empty Strings</db:title>
<db:para>For historical reasons, <db:link xlink:href="qstring.xml">QString</db:link> distinguishes between a null string and an empty string. A <db:emphasis>null</db:emphasis> string is a string that is initialized using <db:link xlink:href="qstring.xml">QString</db:link>'s default constructor or by passing (<db:code>const char *</db:code>)0 to the constructor. An <db:emphasis>empty</db:emphasis> string is any string with size 0. A null string is always empty, but an empty string isn't necessarily null:</db:para>
<db:programlisting language="cpp">QString().isNull();               // returns true
QString().isEmpty();              // returns true

QString(&quot;&quot;).isNull();             // returns false
QString(&quot;&quot;).isEmpty();            // returns true

QString(&quot;abc&quot;).isNull();          // returns false
QString(&quot;abc&quot;).isEmpty();         // returns false
</db:programlisting>
<db:para>All functions except <db:link xlink:href="qstring.xml#isNull">isNull</db:link>() treat null strings the same as empty strings. For example, <db:link xlink:href="qstring.xml#toUtf8">toUtf8</db:link>().<db:link xlink:href="qstring.xml#constData">constData</db:link>() returns a valid pointer (<db:emphasis>not</db:emphasis> nullptr) to a '\0' character for a null string. We recommend that you always use the <db:link xlink:href="qstring.xml#isEmpty">isEmpty</db:link>() function and avoid <db:link xlink:href="qstring.xml#isNull">isNull</db:link>().</db:para>
</db:section>
<db:section xml:id="argument-formats">
<db:title>Argument Formats</db:title>
<db:para>In member functions where an argument <db:emphasis>format</db:emphasis> can be specified (e.g., <db:link xlink:href="qstring.xml#arg">arg</db:link>(), <db:link xlink:href="qstring.xml#number">number</db:link>()), the argument <db:emphasis>format</db:emphasis> can be one of the following:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Format</db:para>
</db:th>
<db:th>
<db:para>Meaning</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>e</db:code></db:para>
</db:td>
<db:td>
<db:para>format as [-]9.9e[+|-]999</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>E</db:code></db:para>
</db:td>
<db:td>
<db:para>format as [-]9.9E[+|-]999</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>f</db:code></db:para>
</db:td>
<db:td>
<db:para>format as [-]9.9</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>g</db:code></db:para>
</db:td>
<db:td>
<db:para>use <db:code>e</db:code> or <db:code>f</db:code> format, whichever is the most concise</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>G</db:code></db:para>
</db:td>
<db:td>
<db:para>use <db:code>E</db:code> or <db:code>f</db:code> format, whichever is the most concise</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>A <db:emphasis>precision</db:emphasis> is also specified with the argument <db:emphasis>format</db:emphasis>. For the 'e', 'E', and 'f' formats, the <db:emphasis>precision</db:emphasis> represents the number of digits <db:emphasis>after</db:emphasis> the decimal point. For the 'g' and 'G' formats, the <db:emphasis>precision</db:emphasis> represents the maximum number of significant digits (trailing zeroes are omitted).</db:para>
</db:section>
<db:section xml:id="more-efficient-string-construction">
<db:title>More Efficient String Construction</db:title>
<db:para>Many strings are known at compile time. But the trivial constructor <db:link xlink:href="qstring.xml">QString</db:link>(&quot;Hello&quot;), will copy the contents of the string, treating the contents as Latin-1. To avoid this one can use the <db:link xlink:href="qstring.xml#QStringLiteral">QStringLiteral</db:link> macro to directly create the required data at compile time. Constructing a <db:link xlink:href="qstring.xml">QString</db:link> out of the literal does then not cause any overhead at runtime.</db:para>
<db:para>A slightly less efficient way is to use <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link>. This class wraps a C string literal, precalculates it length at compile time and can then be used for faster comparison with QStrings and conversion to QStrings than a regular C string literal.</db:para>
<db:para>Using the <db:link xlink:href="qstring.xml">QString</db:link> <db:code>'+'</db:code> operator, it is easy to construct a complex string from multiple substrings. You will often write code like this:</db:para>
<db:programlisting language="cpp">    QString foo;
    QString type = &quot;long&quot;;

    foo = QLatin1String(&quot;vector&amp;lt;&quot;) + type + QLatin1String(&quot;&amp;gt;::iterator&quot;);

    if (foo.startsWith(&quot;(&quot; + type + &quot;) 0x&quot;))
        ...
</db:programlisting>
<db:para>There is nothing wrong with either of these string constructions, but there are a few hidden inefficiencies. Beginning with Qt 4.6, you can eliminate them.</db:para>
<db:para>First, multiple uses of the <db:code>'+'</db:code> operator usually means multiple memory allocations. When concatenating <db:emphasis>n</db:emphasis> substrings, where <db:emphasis>n &gt; 2</db:emphasis>, there can be as many as <db:emphasis>n - 1</db:emphasis> calls to the memory allocator.</db:para>
<db:para>In 4.6, an internal template class <db:code>QStringBuilder</db:code> has been added along with a few helper functions. This class is marked internal and does not appear in the documentation, because you aren't meant to instantiate it in your code. Its use will be automatic, as described below. The class is found in <db:code>src/corelib/tools/qstringbuilder.cpp</db:code> if you want to have a look at it.</db:para>
<db:para><db:code>QStringBuilder</db:code> uses expression templates and reimplements the <db:code>'%'</db:code> operator so that when you use <db:code>'%'</db:code> for string concatenation instead of <db:code>'+'</db:code>, multiple substring concatenations will be postponed until the final result is about to be assigned to a <db:link xlink:href="qstring.xml">QString</db:link>. At this point, the amount of memory required for the final result is known. The memory allocator is then called <db:emphasis>once</db:emphasis> to get the required space, and the substrings are copied into it one by one.</db:para>
<db:para>Additional efficiency is gained by inlining and reduced reference counting (the <db:link xlink:href="qstring.xml">QString</db:link> created from a <db:code>QStringBuilder</db:code> typically has a ref count of 1, whereas <db:link xlink:href="qstring.xml#append">QString::append</db:link>() needs an extra test).</db:para>
<db:para>There are two ways you can access this improved method of string construction. The straightforward way is to include <db:code>QStringBuilder</db:code> wherever you want to use it, and use the <db:code>'%'</db:code> operator instead of <db:code>'+'</db:code> when concatenating strings:</db:para>
<db:programlisting language="cpp">    #include &amp;lt;QStringBuilder&amp;gt;

    QString hello(&quot;hello&quot;);
    QStringView el = QStringView{ hello }.mid(2, 3);
    QLatin1String world(&quot;world&quot;);
    QString message =  hello % el % world % QChar('!');
</db:programlisting>
<db:para>A more global approach which is the most convenient but not entirely source compatible, is to this define in your .pro file:</db:para>
<db:programlisting language="cpp">    DEFINES *= QT_USE_QSTRINGBUILDER
</db:programlisting>
<db:para>and the <db:code>'+'</db:code> will automatically be performed as the <db:code>QStringBuilder</db:code> <db:code>'%'</db:code> everywhere.</db:para>
</db:section>
<db:section xml:id="maximum-size-and-out-of-memory-conditions">
<db:title>Maximum Size and Out-of-memory Conditions</db:title>
<db:para>The maximum size of <db:link xlink:href="qstring.xml">QString</db:link> depends on the architecture. Most 64-bit systems can allocate more than 2 GB of memory, with a typical limit of 2^63 bytes. The actual value also depends on the overhead required for managing the data block. As a result, you can expect the maximum size of 2 GB minus overhead on 32-bit platforms, and 2^63 bytes minus overhead on 64-bit platforms. The number of elements that can be stored in a <db:link xlink:href="qstring.xml">QString</db:link> is this maximum size divided by the size of <db:link xlink:href="qchar.xml">QChar</db:link>.</db:para>
<db:para>When memory allocation fails, <db:link xlink:href="qstring.xml">QString</db:link> throws a <db:code>std::bad_alloc</db:code> exception if the application was compiled with exception support. Out of memory conditions in Qt containers are the only case where Qt will throw exceptions. If exceptions are disabled, then running out of memory is undefined behavior.</db:para>
<db:para>Note that the operating system may impose further limits on applications holding a lot of allocated memory, especially large, contiguous blocks. Such considerations, the configuration of such behavior or any mitigation are outside the scope of the Qt API.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#fromRawData">fromRawData</db:link>()</db:member>
<db:member><db:link xlink:href="qchar.xml">QChar</db:link></db:member>
<db:member><db:link xlink:href="qstringview.xml">QStringView</db:link></db:member>
<db:member><db:link xlink:href="qlatin1string.xml">QLatin1String</db:link></db:member>
<db:member><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ConstIterator-typedef">
<db:title>QString::ConstIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>ConstIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Qt-style synonym for <db:link xlink:href="qstring.xml#const_iterator-typedef">QString::const_iterator</db:link>.</db:para>
</db:section>
<db:section xml:id="Iterator-typedefx">
<db:title>QString::Iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>Iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Qt-style synonym for <db:link xlink:href="qstring.xml#iterator-typedef">QString::iterator</db:link>.</db:para>
</db:section>
<db:section xml:id="NormalizationForm-enum">
<db:title>enum QString::NormalizationForm</db:title>
<db:enumsynopsis>
<db:enumname>NormalizationForm</db:enumname>
<db:enumitem>
<db:enumidentifier>NormalizationForm_D</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NormalizationForm_C</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NormalizationForm_KD</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NormalizationForm_KC</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the various normalized forms of Unicode text.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstring.xml">QString</db:link></db:emphasis>::NormalizationForm_D</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Canonical Decomposition</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstring.xml">QString</db:link></db:emphasis>::NormalizationForm_C</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Canonical Decomposition followed by Canonical Composition</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstring.xml">QString</db:link></db:emphasis>::NormalizationForm_KD</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Compatibility Decomposition</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstring.xml">QString</db:link></db:emphasis>::NormalizationForm_KC</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Compatibility Decomposition followed by Canonical Composition</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#normalized">normalized</db:link>()</db:member>
<db:member><db:link xlink:href="http://www.unicode.org/reports/tr15/">Unicode Standard Annex #15</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="SectionFlag-enum">
<db:title>enum QString::SectionFlag</db:title>
<db:bridgehead renderas="sect2">flags QString::SectionFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>SectionFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>SectionDefault</db:enumidentifier>
<db:enumvalue>0x00</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SectionSkipEmpty</db:enumidentifier>
<db:enumvalue>0x01</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SectionIncludeLeadingSep</db:enumidentifier>
<db:enumvalue>0x02</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SectionIncludeTrailingSep</db:enumidentifier>
<db:enumvalue>0x04</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SectionCaseInsensitiveSeps</db:enumidentifier>
<db:enumvalue>0x08</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QString::SectionFlags</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum specifies flags that can be used to affect various aspects of the <db:link xlink:href="qstring.xml#section">section</db:link>() function's behavior with respect to separators and empty fields.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstring.xml">QString</db:link></db:emphasis>::SectionDefault</db:code></db:para>
</db:td>
<db:td><db:code>0x00</db:code></db:td>
<db:td>
<db:para>Empty fields are counted, leading and trailing separators are not included, and the separator is compared case sensitively.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstring.xml">QString</db:link></db:emphasis>::SectionSkipEmpty</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Treat empty fields as if they don't exist, i.e. they are not considered as far as <db:emphasis>start</db:emphasis> and <db:emphasis>end</db:emphasis> are concerned.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstring.xml">QString</db:link></db:emphasis>::SectionIncludeLeadingSep</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Include the leading separator (if any) in the result string.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstring.xml">QString</db:link></db:emphasis>::SectionIncludeTrailingSep</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>Include the trailing separator (if any) in the result string.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstring.xml">QString</db:link></db:emphasis>::SectionCaseInsensitiveSeps</db:code></db:para>
</db:td>
<db:td><db:code>0x08</db:code></db:td>
<db:td>
<db:para>Compare the separator case-insensitively.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>SectionFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;SectionFlag&gt;. </db:code>It stores an OR combination of <db:code>SectionFlag</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#section">section</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="const_iterator-typedef">
<db:title>QString::const_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>const_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#iterator-typedef">QString::iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="const_pointer-typedef">
<db:title>QString::const_pointer</db:title>
<db:typedefsynopsis>
<db:typedefname>const_pointer</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The QString::const_pointer typedef provides an STL-style const pointer to a <db:link xlink:href="qstring.xml">QString</db:link> element (<db:link xlink:href="qchar.xml">QChar</db:link>).</db:para>
</db:section>
<db:section xml:id="const_reference-typedef">
<db:title>QString::const_reference</db:title>
<db:typedefsynopsis>
<db:typedefname>const_reference</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
</db:section>
<db:section xml:id="const_reverse_iterator-typedef">
<db:title>[since 5.6] QString::const_reverse_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>const_reverse_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#reverse_iterator-typedef">QString::reverse_iterator</db:link></db:member>
<db:member><db:link xlink:href="qstring.xml#const_iterator-typedef">QString::const_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="difference_type-typedef">
<db:title>QString::difference_type</db:title>
<db:typedefsynopsis>
<db:typedefname>difference_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
</db:section>
<db:section xml:id="iterator-typedef">
<db:title>QString::iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#const_iterator-typedef">QString::const_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointer-typedef">
<db:title>QString::pointer</db:title>
<db:typedefsynopsis>
<db:typedefname>pointer</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The QString::pointer typedef provides an STL-style pointer to a <db:link xlink:href="qstring.xml">QString</db:link> element (<db:link xlink:href="qchar.xml">QChar</db:link>).</db:para>
</db:section>
<db:section xml:id="reference-typedef">
<db:title>QString::reference</db:title>
<db:typedefsynopsis>
<db:typedefname>reference</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
</db:section>
<db:section xml:id="reverse_iterator-typedef">
<db:title>[since 5.6] QString::reverse_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>reverse_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#const_reverse_iterator-typedef">QString::const_reverse_iterator</db:link></db:member>
<db:member><db:link xlink:href="qstring.xml#iterator-typedef">QString::iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size_type-typedef">
<db:title>QString::size_type</db:title>
<db:typedefsynopsis>
<db:typedefname>size_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
</db:section>
<db:section xml:id="value_type-typedef">
<db:title>QString::value_type</db:title>
<db:typedefsynopsis>
<db:typedefname>value_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="arg-14">
<db:title>[since 5.14] QString QString::arg(Args &amp;&amp;... <db:emphasis>args</db:emphasis>) const</db:title>
<db:para>Replaces occurrences of <db:code>%N</db:code> in this string with the corresponding argument from <db:code role="parameter">args</db:code>. The arguments are not positional: the first of the <db:code role="parameter">args</db:code> replaces the <db:code>%N</db:code> with the lowest <db:code>N</db:code> (all of them), the second of the <db:code role="parameter">args</db:code> the <db:code>%N</db:code> with the next-lowest <db:code>N</db:code> etc.</db:para>
<db:para><db:code>Args</db:code> can consist of anything that implicitly converts to <db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qstringview.xml">QStringView</db:link> or <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link>.</db:para>
<db:para>In addition, the following types are also supported: <db:link xlink:href="qchar.xml">QChar</db:link>, <db:link xlink:href="qlatin1char.xml">QLatin1Char</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#arg">QString::arg</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tokenize-2">
<db:title>[since 6.0] decltype(qTokenize(std::move(*this), std::forward&lt;Needle&gt;(needle), flags...)) QString::tokenize(Needle &amp;&amp;<db:emphasis>sep</db:emphasis>, Flags... <db:emphasis>flags</db:emphasis>) &amp;&amp;</db:title>
<db:bridgehead renderas="sect2" xml:id="tokenize">[since 6.0] decltype(qTokenize(*this, std::forward&lt;Needle&gt;(needle), flags...)) QString::tokenize(Needle &amp;&amp;<db:emphasis>sep</db:emphasis>, Flags... <db:emphasis>flags</db:emphasis>) const &amp;</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="tokenize-1">[since 6.0] decltype(qTokenize(std::move(*this), std::forward&lt;Needle&gt;(needle), flags...)) QString::tokenize(Needle &amp;&amp;<db:emphasis>sep</db:emphasis>, Flags... <db:emphasis>flags</db:emphasis>) const &amp;&amp;</db:bridgehead>
<db:para>Splits the string into substring views wherever <db:code role="parameter">sep</db:code> occurs, and returns a lazy sequence of those strings.</db:para>
<db:para>Equivalent to</db:para>
<db:programlisting language="cpp">return QStringTokenizer{std::forward&amp;lt;Needle&amp;gt;(sep), flags...};
</db:programlisting>
<db:para>except it works without C++17 Class Template Argument Deduction (CTAD) enabled in the compiler.</db:para>
<db:para>See <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> for how <db:code role="parameter">sep</db:code> and <db:code role="parameter">flags</db:code> interact to form the result.</db:para>
<db:note>
<db:para>While this function returns <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link>, you should never, ever, name its template arguments explicitly. If you can use C++17 Class Template Argument Deduction (CTAD), you may write</db:para>
</db:note>
<db:programlisting language="cpp">QStringTokenizer result = sv.tokenize(sep);
</db:programlisting>
<db:para>(without template arguments). If you can't use C++17 CTAD, you must store the return value only in <db:code>auto</db:code> variables:</db:para>
<db:programlisting language="cpp">auto result = sv.tokenize(sep);
</db:programlisting>
<db:para>This is because the template arguments of <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> have a very subtle dependency on the specific <db:link xlink:href="qstring.xml#tokenize">tokenize</db:link>() overload from which they are returned, and they don't usually correspond to the type used for the separator.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link></db:member>
<db:member><db:link xlink:href="qstringtokenizer.xml#qTokenize">qTokenize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QString">
<db:title>[constexpr] QString::QString()</db:title>
<db:constructorsynopsis>
<db:methodname>QString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QString()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null string. Null strings are also empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QString-1">
<db:title>[explicit] QString::QString(const QChar *<db:emphasis>unicode</db:emphasis>, qsizetype <db:emphasis>size</db:emphasis> = -1)</db:title>
<db:constructorsynopsis>
<db:methodname>QString</db:methodname>
<db:methodparam>
<db:type>const QChar *</db:type>
<db:parameter>unicode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString(const QChar *unicode, qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string initialized with the first <db:code role="parameter">size</db:code> characters of the <db:link xlink:href="qchar.xml">QChar</db:link> array <db:code role="parameter">unicode</db:code>.</db:para>
<db:para>If <db:code role="parameter">unicode</db:code> is 0, a null string is constructed.</db:para>
<db:para>If <db:code role="parameter">size</db:code> is negative, <db:code role="parameter">unicode</db:code> is assumed to point to a \0'-terminated array and its length is determined dynamically. The terminating null character is not considered part of the string.</db:para>
<db:para><db:link xlink:href="qstring.xml">QString</db:link> makes a deep copy of the string data. The unicode data is copied as is and the Byte Order Mark is preserved if present.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#fromRawData">fromRawData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QString-2">
<db:title>QString::QString(QChar <db:emphasis>ch</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QString</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QString(QChar ch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string of size 1 containing the character <db:code role="parameter">ch</db:code>.</db:para>
</db:section>
<db:section xml:id="QString-3">
<db:title>QString::QString(qsizetype <db:emphasis>size</db:emphasis>, QChar <db:emphasis>ch</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QString</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QString(qsizetype size, QChar ch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string of the given <db:code role="parameter">size</db:code> with every character set to <db:code role="parameter">ch</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#fill">fill</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QString-4">
<db:title>QString::QString(QLatin1String <db:emphasis>str</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QString</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QString(QLatin1String str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of the Latin-1 string <db:code role="parameter">str</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#fromLatin1">fromLatin1</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QString-7">
<db:title>QString::QString(const char *<db:emphasis>str</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QString</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QString(const char *str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string initialized with the 8-bit string <db:code role="parameter">str</db:code>. The given const char pointer is converted to Unicode using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this constructor by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
<db:note>
<db:para>Defining <db:link xlink:href="qstring.xml#QT_RESTRICTED_CAST_FROM_ASCII">QT_RESTRICTED_CAST_FROM_ASCII</db:link> also disables this constructor, but enables a <db:code>QString(const char (&amp;ch)[N])</db:code> constructor instead. Using non-literal input, or input with embedded NUL characters, or non-7-bit characters is undefined in this case.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#fromLatin1">fromLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromLocal8Bit">fromLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QString-8">
<db:title>QString::QString(const QByteArray &amp;<db:emphasis>ba</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QString</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>ba</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">QString(const QByteArray &amp;ba)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string initialized with the byte array <db:code role="parameter">ba</db:code>. The given byte array is converted to Unicode using <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>(). Stops copying at the first 0 character, otherwise copies the entire byte array.</db:para>
<db:para>You can disable this constructor by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#fromLatin1">fromLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromLocal8Bit">fromLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QString-5">
<db:title>QString::QString(const QString &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QString</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QString(const QString &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
<db:para>This operation takes <db:link xlink:href="containers.xml#constant-time">constant time</db:link>, because <db:link xlink:href="qstring.xml">QString</db:link> is <db:link xlink:href="implicit-sharing.xml">implicitly shared</db:link>. This makes returning a <db:link xlink:href="qstring.xml">QString</db:link> from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <db:link xlink:href="containers.xml#linear-time">linear time</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#operator-eq">operator=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QString-6">
<db:title>[since 5.2] QString::QString(QString &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QString</db:methodname>
<db:methodparam>
<db:type>QString &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QString(QString &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a <db:link xlink:href="qstring.xml">QString</db:link> instance, making it point at the same object that <db:code role="parameter">other</db:code> was pointing to.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="dtor.QString">
<db:title>QString::~QString()</db:title>
<db:destructorsynopsis>
<db:methodname>~QString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QString()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the string.</db:para>
</db:section>
<db:section xml:id="append">
<db:title>QString &amp;QString::append(const QString &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; append(const QString &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends the string <db:code role="parameter">str</db:code> onto the end of this string.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString x = &quot;free&quot;;
QString y = &quot;dom&quot;;

x.append(y);
// x == &quot;freedom&quot;
</db:programlisting>
<db:para>This is the same as using the <db:link xlink:href="qstring.xml#insert">insert</db:link>() function:</db:para>
<db:programlisting language="cpp">x.insert(x.size(), y);
</db:programlisting>
<db:para>The append() function is typically very fast (<db:link xlink:href="containers.xml#constant-time">constant time</db:link>), because <db:link xlink:href="qstring.xml">QString</db:link> preallocates extra space at the end of the string data so it can grow without reallocating the entire string each time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#operator-2b-eq">operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#prepend">prepend</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#insert">insert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="append-1">
<db:title>QString &amp;QString::append(QChar <db:emphasis>ch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; append(QChar ch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#append">append</db:link>().</db:para>
<db:para>Appends the character <db:code role="parameter">ch</db:code> to this string.</db:para>
</db:section>
<db:section xml:id="append-2">
<db:title>[since 5.0] QString &amp;QString::append(const QChar *<db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>len</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>const QChar *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>len</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; append(const QChar *str, qsizetype len)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#append">append</db:link>().</db:para>
<db:para>Appends <db:code role="parameter">len</db:code> characters from the <db:link xlink:href="qchar.xml">QChar</db:link> array <db:code role="parameter">str</db:code> to this string.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="append-4">
<db:title>QString &amp;QString::append(QLatin1String <db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; append(QLatin1String str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#append">append</db:link>().</db:para>
<db:para>Appends the Latin-1 string <db:code role="parameter">str</db:code> to this string.</db:para>
</db:section>
<db:section xml:id="append-5">
<db:title>QString &amp;QString::append(const char *<db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; append(const char *str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#append">append</db:link>().</db:para>
<db:para>Appends the string <db:code role="parameter">str</db:code> to this string. The given const char pointer is converted to Unicode using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this function by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
</db:section>
<db:section xml:id="append-6">
<db:title>QString &amp;QString::append(const QByteArray &amp;<db:emphasis>ba</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>ba</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; append(const QByteArray &amp;ba)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#append">append</db:link>().</db:para>
<db:para>Appends the byte array <db:code role="parameter">ba</db:code> to this string. The given byte array is converted to Unicode using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this function by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
</db:section>
<db:section xml:id="arg">
<db:title>QString QString::arg(const QString &amp;<db:emphasis>a</db:emphasis>, int <db:emphasis>fieldWidth</db:emphasis> = 0, QChar <db:emphasis>fillChar</db:emphasis> = QLatin1Char(' ')) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>arg</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>fieldWidth</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>fillChar</db:parameter>
<db:initializer>QLatin1Char(' ')</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString arg(const QString &amp;a, int fieldWidth, QChar fillChar) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of this string with the lowest numbered place marker replaced by string <db:code role="parameter">a</db:code>, i.e., <db:code>%1</db:code>, <db:code>%2</db:code>, ..., <db:code>%99</db:code>.</db:para>
<db:para><db:code role="parameter">fieldWidth</db:code> specifies the minimum amount of space that argument <db:code role="parameter">a</db:code> shall occupy. If <db:code role="parameter">a</db:code> requires less space than <db:code role="parameter">fieldWidth</db:code>, it is padded to <db:code role="parameter">fieldWidth</db:code> with character <db:code role="parameter">fillChar</db:code>. A positive <db:code role="parameter">fieldWidth</db:code> produces right-aligned text. A negative <db:code role="parameter">fieldWidth</db:code> produces left-aligned text.</db:para>
<db:para>This example shows how we might create a <db:code>status</db:code> string for reporting progress while processing a list of files:</db:para>
<db:programlisting language="cpp">QString i;           // current file's number
QString total;       // number of files to process
QString fileName;    // current file's name

QString status = QString(&quot;Processing file %1 of %2: %3&quot;)
                .arg(i).arg(total).arg(fileName);
</db:programlisting>
<db:para>First, <db:code>arg(i)</db:code> replaces <db:code>%1</db:code>. Then <db:code>arg(total)</db:code> replaces <db:code>%2</db:code>. Finally, <db:code>arg(fileName)</db:code> replaces <db:code>%3</db:code>.</db:para>
<db:para>One advantage of using arg() over <db:link xlink:href="qstring.xml#asprintf">asprintf</db:link>() is that the order of the numbered place markers can change, if the application's strings are translated into other languages, but each arg() will still replace the lowest numbered unreplaced place marker, no matter where it appears. Also, if place marker <db:code>%i</db:code> appears more than once in the string, the arg() replaces all of them.</db:para>
<db:para>If there is no unreplaced place marker remaining, a warning message is output and the result is undefined. Place marker numbers must be in the range 1 to 99.</db:para>
</db:section>
<db:section xml:id="arg-1">
<db:title>QString QString::arg(qlonglong <db:emphasis>a</db:emphasis>, int <db:emphasis>fieldWidth</db:emphasis> = 0, int <db:emphasis>base</db:emphasis> = 10, QChar <db:emphasis>fillChar</db:emphasis> = QLatin1Char(' ')) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>arg</db:methodname>
<db:methodparam>
<db:type>qlonglong</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>fieldWidth</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>fillChar</db:parameter>
<db:initializer>QLatin1Char(' ')</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString arg(qlonglong a, int fieldWidth, int base, QChar fillChar) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#arg">arg</db:link>().</db:para>
<db:para><db:code role="parameter">fieldWidth</db:code> specifies the minimum amount of space that <db:code role="parameter">a</db:code> is padded to and filled with the character <db:code role="parameter">fillChar</db:code>. A positive value produces right-aligned text; a negative value produces left-aligned text.</db:para>
<db:para>The <db:code role="parameter">base</db:code> argument specifies the base to use when converting the integer <db:code role="parameter">a</db:code> into a string. The base must be between 2 and 36, with 8 giving octal, 10 decimal, and 16 hexadecimal numbers.</db:para>
<db:para>If <db:code role="parameter">fillChar</db:code> is '0' (the number 0, ASCII 48), the locale's zero is used. For negative numbers, zero padding might appear before the minus sign.</db:para>
</db:section>
<db:section xml:id="arg-2">
<db:title>QString QString::arg(qulonglong <db:emphasis>a</db:emphasis>, int <db:emphasis>fieldWidth</db:emphasis> = 0, int <db:emphasis>base</db:emphasis> = 10, QChar <db:emphasis>fillChar</db:emphasis> = QLatin1Char(' ')) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>arg</db:methodname>
<db:methodparam>
<db:type>qulonglong</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>fieldWidth</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>fillChar</db:parameter>
<db:initializer>QLatin1Char(' ')</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QString arg(qulonglong a, int fieldWidth, int base, QChar fillChar) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#arg">arg</db:link>().</db:para>
<db:para><db:code role="parameter">fieldWidth</db:code> specifies the minimum amount of space that <db:code role="parameter">a</db:code> is padded to and filled with the character <db:code role="parameter">fillChar</db:code>. A positive value produces right-aligned text; a negative value produces left-aligned text.</db:para>
<db:para>The <db:code role="parameter">base</db:code> argument specifies the base to use when converting the integer <db:code role="parameter">a</db:code> into a string. <db:code role="parameter">base</db:code> must be between 2 and 36, with 8 giving octal, 10 decimal, and 16 hexadecimal numbers.</db:para>
<db:para>If <db:code role="parameter">fillChar</db:code> is '0' (the number 0, ASCII 48), the locale's zero is used. For negative numbers, zero padding might appear before the minus sign.</db:para>
</db:section>
<db:section xml:id="arg-3">
<db:title>QString QString::arg(long <db:emphasis>a</db:emphasis>, int <db:emphasis>fieldWidth</db:emphasis> = 0, int <db:emphasis>base</db:emphasis> = 10, QChar <db:emphasis>fillChar</db:emphasis> = QLatin1Char(' ')) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>arg</db:methodname>
<db:methodparam>
<db:type>long</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>fieldWidth</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>fillChar</db:parameter>
<db:initializer>QLatin1Char(' ')</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QString arg(long a, int fieldWidth, int base, QChar fillChar) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#arg">arg</db:link>().</db:para>
<db:para><db:code role="parameter">fieldWidth</db:code> specifies the minimum amount of space that <db:code role="parameter">a</db:code> is padded to and filled with the character <db:code role="parameter">fillChar</db:code>. A positive value produces right-aligned text; a negative value produces left-aligned text.</db:para>
<db:para>The <db:code role="parameter">a</db:code> argument is expressed in the given <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36.</db:para>
<db:para>The '%' can be followed by an 'L', in which case the sequence is replaced with a localized representation of <db:code role="parameter">a</db:code>. The conversion uses the default locale. The default locale is determined from the system's locale settings at application startup. It can be changed using <db:link xlink:href="qlocale.xml#setDefault">QLocale::setDefault</db:link>(). The 'L' flag is ignored if <db:code role="parameter">base</db:code> is not 10.</db:para>
<db:programlisting language="cpp">QString str;
str = QString(&quot;Decimal 63 is %1 in hexadecimal&quot;)
        .arg(63, 0, 16);
// str == &quot;Decimal 63 is 3f in hexadecimal&quot;

QLocale::setDefault(QLocale(QLocale::English, QLocale::UnitedStates));
str = QString(&quot;%1 %L2 %L3&quot;)
        .arg(12345)
        .arg(12345)
        .arg(12345, 0, 16);
// str == &quot;12345 12,345 3039&quot;
</db:programlisting>
<db:para>If <db:code role="parameter">fillChar</db:code> is '0' (the number 0, ASCII 48), the locale's zero is used. For negative numbers, zero padding might appear before the minus sign.</db:para>
</db:section>
<db:section xml:id="arg-4">
<db:title>QString QString::arg(ulong <db:emphasis>a</db:emphasis>, int <db:emphasis>fieldWidth</db:emphasis> = 0, int <db:emphasis>base</db:emphasis> = 10, QChar <db:emphasis>fillChar</db:emphasis> = QLatin1Char(' ')) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>arg</db:methodname>
<db:methodparam>
<db:type>ulong</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>fieldWidth</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>fillChar</db:parameter>
<db:initializer>QLatin1Char(' ')</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QString arg(ulong a, int fieldWidth, int base, QChar fillChar) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#arg">arg</db:link>().</db:para>
<db:para><db:code role="parameter">fieldWidth</db:code> specifies the minimum amount of space that <db:code role="parameter">a</db:code> is padded to and filled with the character <db:code role="parameter">fillChar</db:code>. A positive value produces right-aligned text; a negative value produces left-aligned text.</db:para>
<db:para>The <db:code role="parameter">base</db:code> argument specifies the base to use when converting the integer <db:code role="parameter">a</db:code> to a string. The base must be between 2 and 36, with 8 giving octal, 10 decimal, and 16 hexadecimal numbers.</db:para>
<db:para>If <db:code role="parameter">fillChar</db:code> is '0' (the number 0, ASCII 48), the locale's zero is used. For negative numbers, zero padding might appear before the minus sign.</db:para>
</db:section>
<db:section xml:id="arg-5">
<db:title>QString QString::arg(int <db:emphasis>a</db:emphasis>, int <db:emphasis>fieldWidth</db:emphasis> = 0, int <db:emphasis>base</db:emphasis> = 10, QChar <db:emphasis>fillChar</db:emphasis> = QLatin1Char(' ')) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>arg</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>fieldWidth</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>fillChar</db:parameter>
<db:initializer>QLatin1Char(' ')</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QString arg(int a, int fieldWidth, int base, QChar fillChar) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#arg">arg</db:link>().</db:para>
<db:para>The <db:code role="parameter">a</db:code> argument is expressed in base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36. For bases other than 10, <db:code role="parameter">a</db:code> is treated as an unsigned integer.</db:para>
<db:para><db:code role="parameter">fieldWidth</db:code> specifies the minimum amount of space that <db:code role="parameter">a</db:code> is padded to and filled with the character <db:code role="parameter">fillChar</db:code>. A positive value produces right-aligned text; a negative value produces left-aligned text.</db:para>
<db:para>The '%' can be followed by an 'L', in which case the sequence is replaced with a localized representation of <db:code role="parameter">a</db:code>. The conversion uses the default locale, set by <db:link xlink:href="qlocale.xml#setDefault">QLocale::setDefault</db:link>(). If no default locale was specified, the &quot;C&quot; locale is used. The 'L' flag is ignored if <db:code role="parameter">base</db:code> is not 10.</db:para>
<db:programlisting language="cpp">QString str;
str = QString(&quot;Decimal 63 is %1 in hexadecimal&quot;)
        .arg(63, 0, 16);
// str == &quot;Decimal 63 is 3f in hexadecimal&quot;

QLocale::setDefault(QLocale(QLocale::English, QLocale::UnitedStates));
str = QString(&quot;%1 %L2 %L3&quot;)
        .arg(12345)
        .arg(12345)
        .arg(12345, 0, 16);
// str == &quot;12345 12,345 3039&quot;
</db:programlisting>
<db:para>If <db:code role="parameter">fillChar</db:code> is '0' (the number 0, ASCII 48), the locale's zero is used. For negative numbers, zero padding might appear before the minus sign.</db:para>
</db:section>
<db:section xml:id="arg-6">
<db:title>QString QString::arg(uint <db:emphasis>a</db:emphasis>, int <db:emphasis>fieldWidth</db:emphasis> = 0, int <db:emphasis>base</db:emphasis> = 10, QChar <db:emphasis>fillChar</db:emphasis> = QLatin1Char(' ')) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>arg</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>fieldWidth</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>fillChar</db:parameter>
<db:initializer>QLatin1Char(' ')</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QString arg(uint a, int fieldWidth, int base, QChar fillChar) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#arg">arg</db:link>().</db:para>
<db:para>The <db:code role="parameter">base</db:code> argument specifies the base to use when converting the integer <db:code role="parameter">a</db:code> into a string. The base must be between 2 and 36.</db:para>
<db:para>If <db:code role="parameter">fillChar</db:code> is '0' (the number 0, ASCII 48), the locale's zero is used. For negative numbers, zero padding might appear before the minus sign.</db:para>
</db:section>
<db:section xml:id="arg-7">
<db:title>QString QString::arg(short <db:emphasis>a</db:emphasis>, int <db:emphasis>fieldWidth</db:emphasis> = 0, int <db:emphasis>base</db:emphasis> = 10, QChar <db:emphasis>fillChar</db:emphasis> = QLatin1Char(' ')) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>arg</db:methodname>
<db:methodparam>
<db:type>short</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>fieldWidth</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>fillChar</db:parameter>
<db:initializer>QLatin1Char(' ')</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QString arg(short a, int fieldWidth, int base, QChar fillChar) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#arg">arg</db:link>().</db:para>
<db:para><db:code role="parameter">fieldWidth</db:code> specifies the minimum amount of space that <db:code role="parameter">a</db:code> is padded to and filled with the character <db:code role="parameter">fillChar</db:code>. A positive value produces right-aligned text; a negative value produces left-aligned text.</db:para>
<db:para>The <db:code role="parameter">base</db:code> argument specifies the base to use when converting the integer <db:code role="parameter">a</db:code> into a string. The base must be between 2 and 36, with 8 giving octal, 10 decimal, and 16 hexadecimal numbers.</db:para>
<db:para>If <db:code role="parameter">fillChar</db:code> is '0' (the number 0, ASCII 48), the locale's zero is used. For negative numbers, zero padding might appear before the minus sign.</db:para>
</db:section>
<db:section xml:id="arg-8">
<db:title>QString QString::arg(ushort <db:emphasis>a</db:emphasis>, int <db:emphasis>fieldWidth</db:emphasis> = 0, int <db:emphasis>base</db:emphasis> = 10, QChar <db:emphasis>fillChar</db:emphasis> = QLatin1Char(' ')) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>arg</db:methodname>
<db:methodparam>
<db:type>ushort</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>fieldWidth</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>fillChar</db:parameter>
<db:initializer>QLatin1Char(' ')</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">QString arg(ushort a, int fieldWidth, int base, QChar fillChar) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#arg">arg</db:link>().</db:para>
<db:para><db:code role="parameter">fieldWidth</db:code> specifies the minimum amount of space that <db:code role="parameter">a</db:code> is padded to and filled with the character <db:code role="parameter">fillChar</db:code>. A positive value produces right-aligned text; a negative value produces left-aligned text.</db:para>
<db:para>The <db:code role="parameter">base</db:code> argument specifies the base to use when converting the integer <db:code role="parameter">a</db:code> into a string. The base must be between 2 and 36, with 8 giving octal, 10 decimal, and 16 hexadecimal numbers.</db:para>
<db:para>If <db:code role="parameter">fillChar</db:code> is '0' (the number 0, ASCII 48), the locale's zero is used. For negative numbers, zero padding might appear before the minus sign.</db:para>
</db:section>
<db:section xml:id="arg-9">
<db:title>QString QString::arg(double <db:emphasis>a</db:emphasis>, int <db:emphasis>fieldWidth</db:emphasis> = 0, char <db:emphasis>format</db:emphasis> = 'g', int <db:emphasis>precision</db:emphasis> = -1, QChar <db:emphasis>fillChar</db:emphasis> = QLatin1Char(' ')) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>arg</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>fieldWidth</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>char</db:type>
<db:parameter>format</db:parameter>
<db:initializer>'g'</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>precision</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>fillChar</db:parameter>
<db:initializer>QLatin1Char(' ')</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">QString arg(double a, int fieldWidth, char format, int precision, QChar fillChar) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#arg">arg</db:link>().</db:para>
<db:para>Argument <db:code role="parameter">a</db:code> is formatted according to the specified <db:code role="parameter">format</db:code> and <db:code role="parameter">precision</db:code>. See <db:link xlink:href="qstring.xml#argument-formats">Argument Formats</db:link> for details.</db:para>
<db:para><db:code role="parameter">fieldWidth</db:code> specifies the minimum amount of space that <db:code role="parameter">a</db:code> is padded to and filled with the character <db:code role="parameter">fillChar</db:code>. A positive value produces right-aligned text; a negative value produces left-aligned text.</db:para>
<db:programlisting language="cpp">double d = 12.34;
QString str = QString(&quot;delta: %1&quot;).arg(d, 0, 'E', 3);
// str == &quot;delta: 1.234E+01&quot;
</db:programlisting>
<db:para>The '%' can be followed by an 'L', in which case the sequence is replaced with a localized representation of <db:code role="parameter">a</db:code>. The conversion uses the default locale, set by <db:link xlink:href="qlocale.xml#setDefault">QLocale::setDefault</db:link>(). If no default locale was specified, the &quot;C&quot; locale is used.</db:para>
<db:para>If <db:code role="parameter">fillChar</db:code> is '0' (the number 0, ASCII 48), this function will use the locale's zero to pad. For negative numbers, the zero padding will probably appear before the minus sign.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="arg-10">
<db:title>QString QString::arg(char <db:emphasis>a</db:emphasis>, int <db:emphasis>fieldWidth</db:emphasis> = 0, QChar <db:emphasis>fillChar</db:emphasis> = QLatin1Char(' ')) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>arg</db:methodname>
<db:methodparam>
<db:type>char</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>fieldWidth</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>fillChar</db:parameter>
<db:initializer>QLatin1Char(' ')</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">QString arg(char a, int fieldWidth, QChar fillChar) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#arg">arg</db:link>().</db:para>
<db:para>The <db:code role="parameter">a</db:code> argument is interpreted as a Latin-1 character.</db:para>
</db:section>
<db:section xml:id="arg-11">
<db:title>QString QString::arg(QChar <db:emphasis>a</db:emphasis>, int <db:emphasis>fieldWidth</db:emphasis> = 0, QChar <db:emphasis>fillChar</db:emphasis> = QLatin1Char(' ')) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>arg</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>fieldWidth</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>fillChar</db:parameter>
<db:initializer>QLatin1Char(' ')</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">11</db:synopsisinfo>
<db:synopsisinfo role="signature">QString arg(QChar a, int fieldWidth, QChar fillChar) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#arg">arg</db:link>().</db:para>
</db:section>
<db:section xml:id="arg-12">
<db:title>[since 5.10] QString QString::arg(QStringView <db:emphasis>a</db:emphasis>, int <db:emphasis>fieldWidth</db:emphasis> = 0, QChar <db:emphasis>fillChar</db:emphasis> = QLatin1Char(' ')) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>arg</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>fieldWidth</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>fillChar</db:parameter>
<db:initializer>QLatin1Char(' ')</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">12</db:synopsisinfo>
<db:synopsisinfo role="signature">QString arg(QStringView a, int fieldWidth, QChar fillChar) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a copy of this string with the lowest-numbered place-marker replaced by string <db:code role="parameter">a</db:code>, i.e., <db:code>%1</db:code>, <db:code>%2</db:code>, ..., <db:code>%99</db:code>.</db:para>
<db:para><db:code role="parameter">fieldWidth</db:code> specifies the minimum amount of space that <db:code role="parameter">a</db:code> shall occupy. If <db:code role="parameter">a</db:code> requires less space than <db:code role="parameter">fieldWidth</db:code>, it is padded to <db:code role="parameter">fieldWidth</db:code> with character <db:code role="parameter">fillChar</db:code>. A positive <db:code role="parameter">fieldWidth</db:code> produces right-aligned text. A negative <db:code role="parameter">fieldWidth</db:code> produces left-aligned text.</db:para>
<db:para>This example shows how we might create a <db:code>status</db:code> string for reporting progress while processing a list of files:</db:para>
<db:programlisting language="cpp">int i;                // current file's number
int total;            // number of files to process
QStringView fileName; // current file's name

QString status = QString(&quot;Processing file %1 of %2: %3&quot;)
                .arg(i).arg(total).arg(fileName);
</db:programlisting>
<db:para>First, <db:code>arg(i)</db:code> replaces <db:code>%1</db:code>. Then <db:code>arg(total)</db:code> replaces <db:code>%2</db:code>. Finally, <db:code>arg(fileName)</db:code> replaces <db:code>%3</db:code>.</db:para>
<db:para>One advantage of using <db:link xlink:href="qstring.xml#arg">arg</db:link>() over <db:link xlink:href="qstring.xml#asprintf">asprintf</db:link>() is that the order of the numbered place markers can change, if the application's strings are translated into other languages, but each <db:link xlink:href="qstring.xml#arg">arg</db:link>() will still replace the lowest-numbered unreplaced place-marker, no matter where it appears. Also, if place-marker <db:code>%i</db:code> appears more than once in the string, <db:link xlink:href="qstring.xml#arg">arg</db:link>() replaces all of them.</db:para>
<db:para>If there is no unreplaced place-marker remaining, a warning message is printed and the result is undefined. Place-marker numbers must be in the range 1 to 99.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="arg-13">
<db:title>[since 5.10] QString QString::arg(QLatin1String <db:emphasis>a</db:emphasis>, int <db:emphasis>fieldWidth</db:emphasis> = 0, QChar <db:emphasis>fillChar</db:emphasis> = QLatin1Char(' ')) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>arg</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>fieldWidth</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>fillChar</db:parameter>
<db:initializer>QLatin1Char(' ')</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">13</db:synopsisinfo>
<db:synopsisinfo role="signature">QString arg(QLatin1String a, int fieldWidth, QChar fillChar) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a copy of this string with the lowest-numbered place-marker replaced by string <db:code role="parameter">a</db:code>, i.e., <db:code>%1</db:code>, <db:code>%2</db:code>, ..., <db:code>%99</db:code>.</db:para>
<db:para><db:code role="parameter">fieldWidth</db:code> specifies the minimum amount of space that <db:code role="parameter">a</db:code> shall occupy. If <db:code role="parameter">a</db:code> requires less space than <db:code role="parameter">fieldWidth</db:code>, it is padded to <db:code role="parameter">fieldWidth</db:code> with character <db:code role="parameter">fillChar</db:code>. A positive <db:code role="parameter">fieldWidth</db:code> produces right-aligned text. A negative <db:code role="parameter">fieldWidth</db:code> produces left-aligned text.</db:para>
<db:para>One advantage of using <db:link xlink:href="qstring.xml#arg">arg</db:link>() over <db:link xlink:href="qstring.xml#asprintf">asprintf</db:link>() is that the order of the numbered place markers can change, if the application's strings are translated into other languages, but each <db:link xlink:href="qstring.xml#arg">arg</db:link>() will still replace the lowest-numbered unreplaced place-marker, no matter where it appears. Also, if place-marker <db:code>%i</db:code> appears more than once in the string, <db:link xlink:href="qstring.xml#arg">arg</db:link>() replaces all of them.</db:para>
<db:para>If there is no unreplaced place-marker remaining, a warning message is printed and the result is undefined. Place-marker numbers must be in the range 1 to 99.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="asprintf">
<db:title>[static, since 5.5] QString QString::asprintf(const char *<db:emphasis>cformat</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>asprintf</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>cformat</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString asprintf(const char *cformat, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Safely builds a formatted string from the format string <db:code role="parameter">cformat</db:code> and an arbitrary list of arguments.</db:para>
<db:para>The format string supports the conversion specifiers, length modifiers, and flags provided by printf() in the standard C++ library. The <db:code role="parameter">cformat</db:code> string and <db:code>%s</db:code> arguments must be UTF-8 encoded.</db:para>
<db:note>
<db:para>The <db:code>%lc</db:code> escape sequence expects a unicode character of type <db:code>char16_t</db:code>, or <db:code>ushort</db:code> (as returned by <db:link xlink:href="qchar.xml#unicode">QChar::unicode</db:link>()). The <db:code>%ls</db:code> escape sequence expects a pointer to a zero-terminated array of unicode characters of type <db:code>char16_t</db:code>, or ushort (as returned by <db:link xlink:href="qstring.xml#utf16">QString::utf16</db:link>()). This is at odds with the printf() in the standard C++ library, which defines <db:code>%lc</db:code> to print a wchar_t and <db:code>%ls</db:code> to print a <db:code>wchar_t*</db:code>, and might also produce compiler warnings on platforms where the size of <db:code>wchar_t</db:code> is not 16 bits.</db:para>
</db:note>
<db:warning>
<db:para>We do not recommend using QString::asprintf() in new Qt code. Instead, consider using <db:link xlink:href="qtextstream.xml">QTextStream</db:link> or <db:link xlink:href="qstring.xml#arg">arg</db:link>(), both of which support Unicode strings seamlessly and are type-safe. Here is an example that uses <db:link xlink:href="qtextstream.xml">QTextStream</db:link>:</db:para>
</db:warning>
<db:programlisting language="cpp">QString result;
QTextStream(&amp;amp;result) &amp;lt;&amp;lt; &quot;pi = &quot; &amp;lt;&amp;lt; 3.14;
// result == &quot;pi = 3.14&quot;
</db:programlisting>
<db:para>For <db:link xlink:href="qobject.xml#tr">translations</db:link>, especially if the strings contains more than one escape sequence, you should consider using the <db:link xlink:href="qstring.xml#arg">arg</db:link>() function instead. This allows the order of the replacements to be controlled by the translator.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#arg">arg</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="at">
<db:title>const QChar QString::at(qsizetype <db:emphasis>position</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QChar</db:type>
<db:methodname>at</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QChar at(qsizetype position) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the character at the given index <db:code role="parameter">position</db:code> in the string.</db:para>
<db:para>The <db:code role="parameter">position</db:code> must be a valid index position in the string (i.e., 0 &lt;= <db:code role="parameter">position</db:code> &lt; <db:link xlink:href="qstring.xml#size">size</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#operator-5b-5d">operator[]</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="back">
<db:title>[since 5.10] QChar QString::back() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QChar</db:type>
<db:methodname>back</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QChar back() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the last character in the string. Same as <db:code>at(size() - 1)</db:code>.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:warning>
<db:para>Calling this function on an empty string constitutes undefined behavior.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#front">front</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#operator-5b-5d">operator[]</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="back-1">
<db:title>[since 5.10] QChar &amp;QString::back()</db:title>
<db:methodsynopsis>
<db:type>QChar &amp;</db:type>
<db:methodname>back</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QChar &amp; back()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the last character in the string. Same as <db:code>operator[](size() - 1)</db:code>.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:warning>
<db:para>Calling this function on an empty string constitutes undefined behavior.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#front">front</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#operator-5b-5d">operator[]</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="begin">
<db:title>QString::iterator QString::begin()</db:title>
<db:methodsynopsis>
<db:type>QString::iterator</db:type>
<db:methodname>begin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString::iterator begin()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the first character in the string.</db:para>
<db:warning>
<db:para>The returned iterator is invalidated on detachment or when the <db:link xlink:href="qstring.xml">QString</db:link> is modified.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="begin-1">
<db:title>QString::const_iterator QString::begin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString::const_iterator</db:type>
<db:methodname>begin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString::const_iterator begin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#begin">begin</db:link>().</db:para>
</db:section>
<db:section xml:id="capacity">
<db:title>qsizetype QString::capacity() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>capacity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype capacity() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum number of characters that can be stored in the string without forcing a reallocation.</db:para>
<db:para>The sole purpose of this function is to provide a means of fine tuning <db:link xlink:href="qstring.xml">QString</db:link>'s memory usage. In general, you will rarely ever need to call this function. If you want to know how many characters are in the string, call <db:link xlink:href="qstring.xml#size">size</db:link>().</db:para>
<db:note>
<db:para>a statically allocated string will report a capacity of 0, even if it's not empty.</db:para>
</db:note>
<db:note>
<db:para>The free space position in the allocated memory block is undefined. In other words, one should not assume that the free memory is always located after the initialized elements.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#reserve">reserve</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#squeeze">squeeze</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cbegin">
<db:title>[since 5.0] QString::const_iterator QString::cbegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString::const_iterator</db:type>
<db:methodname>cbegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString::const_iterator cbegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the first character in the string.</db:para>
<db:warning>
<db:para>The returned iterator is invalidated on detachment or when the <db:link xlink:href="qstring.xml">QString</db:link> is modified.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#cend">cend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cend">
<db:title>[since 5.0] QString::const_iterator QString::cend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString::const_iterator</db:type>
<db:methodname>cend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString::const_iterator cend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing just after the last character in the string.</db:para>
<db:warning>
<db:para>The returned iterator is invalidated on detachment or when the <db:link xlink:href="qstring.xml">QString</db:link> is modified.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#cbegin">cbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="chop">
<db:title>void QString::chop(qsizetype <db:emphasis>n</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>chop</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void chop(qsizetype n)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes <db:code role="parameter">n</db:code> characters from the end of the string.</db:para>
<db:para>If <db:code role="parameter">n</db:code> is greater than or equal to <db:link xlink:href="qstring.xml#size">size</db:link>(), the result is an empty string; if <db:code role="parameter">n</db:code> is negative, it is equivalent to passing zero.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str(&quot;LOGOUT\r\n&quot;);
str.chop(2);
// str == &quot;LOGOUT&quot;
</db:programlisting>
<db:para>If you want to remove characters from the <db:emphasis>beginning</db:emphasis> of the string, use <db:link xlink:href="qstring.xml#remove">remove</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#truncate">truncate</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#resize">resize</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#remove">remove</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#chop">QStringView::chop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="chopped">
<db:title>[since 5.10] QString QString::chopped(qsizetype <db:emphasis>len</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>chopped</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>len</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString chopped(qsizetype len) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string that contains the <db:link xlink:href="qstring.xml#size">size</db:link>() - <db:code role="parameter">len</db:code> leftmost characters of this string.</db:para>
<db:note>
<db:para>The behavior is undefined if <db:code role="parameter">len</db:code> is negative or greater than <db:link xlink:href="qstring.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#endsWith">endsWith</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QString::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the contents of the string and makes it null.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#resize">resize</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compare">
<db:title>[static] int QString::compare(const QString &amp;<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>compare</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int compare(const QString &amp;s1, const QString &amp;s2, Qt::CaseSensitivity cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Compares <db:code role="parameter">s1</db:code> with <db:code role="parameter">s2</db:code> and returns an integer less than, equal to, or greater than zero if <db:code role="parameter">s1</db:code> is less than, equal to, or greater than <db:code role="parameter">s2</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link>, the comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:para>Case sensitive comparison is based exclusively on the numeric Unicode values of the characters and is very fast, but is not what a human would expect. Consider sorting user-visible strings with <db:link xlink:href="qstring.xml#localeAwareCompare">localeAwareCompare</db:link>().</db:para>
<db:programlisting language="cpp">int x = QString::compare(&quot;aUtO&quot;, &quot;AuTo&quot;, Qt::CaseInsensitive);  // x == 0
int y = QString::compare(&quot;auto&quot;, &quot;Car&quot;, Qt::CaseSensitive);     // y &amp;gt; 0
int z = QString::compare(&quot;auto&quot;, &quot;Car&quot;, Qt::CaseInsensitive);   // z &amp;lt; 0
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#operator-eq-eq-1">operator==</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#operator-lt-1">operator&lt;</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#operator-gt">operator&gt;</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compare-1">
<db:title>int QString::compare(const QString &amp;<db:emphasis>other</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>compare</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int compare(const QString &amp;other, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#compare">compare</db:link>().</db:para>
<db:para>Lexically compares this string with the <db:code role="parameter">other</db:code> string and returns an integer less than, equal to, or greater than zero if this string is less than, equal to, or greater than the other string.</db:para>
<db:para>Same as compare(*this, <db:code role="parameter">other</db:code>, <db:code role="parameter">cs</db:code>).</db:para>
</db:section>
<db:section xml:id="compare-2">
<db:title>int QString::compare(QLatin1String <db:emphasis>other</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>compare</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">int compare(QLatin1String other, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#compare">compare</db:link>().</db:para>
<db:para>Same as compare(*this, <db:code role="parameter">other</db:code>, <db:code role="parameter">cs</db:code>).</db:para>
</db:section>
<db:section xml:id="compare-3">
<db:title>[since 5.12] int QString::compare(QStringView <db:emphasis>s</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>compare</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">int compare(QStringView s, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#compare">compare</db:link>().</db:para>
<db:para>Performs a comparison of this with <db:code role="parameter">s</db:code>, using the case sensitivity setting <db:code role="parameter">cs</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
</db:section>
<db:section xml:id="compare-4">
<db:title>[since 5.14] int QString::compare(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>compare</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">int compare(QChar ch, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#compare">compare</db:link>().</db:para>
<db:para>Performs a comparison of this with <db:code role="parameter">ch</db:code>, using the case sensitivity setting <db:code role="parameter">cs</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="compare-5">
<db:title>[static] int QString::compare(const QString &amp;<db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>compare</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">int compare(const QString &amp;s1, QLatin1String s2, Qt::CaseSensitivity cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#compare">compare</db:link>().</db:para>
<db:para>Performs a comparison of <db:code role="parameter">s1</db:code> and <db:code role="parameter">s2</db:code>, using the case sensitivity setting <db:code role="parameter">cs</db:code>.</db:para>
</db:section>
<db:section xml:id="compare-6">
<db:title>[static] int QString::compare(QLatin1String <db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>compare</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">int compare(QLatin1String s1, const QString &amp;s2, Qt::CaseSensitivity cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#compare">compare</db:link>().</db:para>
<db:para>Performs a comparison of <db:code role="parameter">s1</db:code> and <db:code role="parameter">s2</db:code>, using the case sensitivity setting <db:code role="parameter">cs</db:code>.</db:para>
</db:section>
<db:section xml:id="compare-7">
<db:title>[static] int QString::compare(const QString &amp;<db:emphasis>s1</db:emphasis>, QStringView <db:emphasis>s2</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>compare</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">int compare(const QString &amp;s1, QStringView s2, Qt::CaseSensitivity cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#compare">compare</db:link>().</db:para>
</db:section>
<db:section xml:id="compare-8">
<db:title>[static] int QString::compare(QStringView <db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>compare</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">int compare(QStringView s1, const QString &amp;s2, Qt::CaseSensitivity cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#compare">compare</db:link>().</db:para>
</db:section>
<db:section xml:id="constBegin">
<db:title>QString::const_iterator QString::constBegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString::const_iterator</db:type>
<db:methodname>constBegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString::const_iterator constBegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the first character in the string.</db:para>
<db:warning>
<db:para>The returned iterator is invalidated on detachment or when the <db:link xlink:href="qstring.xml">QString</db:link> is modified.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#constEnd">constEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constData">
<db:title>const QChar *QString::constData() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QChar *</db:type>
<db:methodname>constData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QChar * constData() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the data stored in the <db:link xlink:href="qstring.xml">QString</db:link>. The pointer can be used to access the characters that compose the string.</db:para>
<db:para>Note that the pointer remains valid only as long as the string is not modified.</db:para>
<db:note>
<db:para>The returned string may not be '\0'-terminated. Use <db:link xlink:href="qstring.xml#size">size</db:link>() to determine the length of the array.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#operator-5b-5d">operator[]</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromRawData">fromRawData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constEnd">
<db:title>QString::const_iterator QString::constEnd() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString::const_iterator</db:type>
<db:methodname>constEnd</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString::const_iterator constEnd() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing just after the last character in the string.</db:para>
<db:warning>
<db:para>The returned iterator is invalidated on detachment or when the <db:link xlink:href="qstring.xml">QString</db:link> is modified.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains">
<db:title>bool QString::contains(const QString &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(const QString &amp;str, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this string contains an occurrence of the string <db:code role="parameter">str</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str = &quot;Peter Pan&quot;;
str.contains(&quot;peter&quot;, Qt::CaseInsensitive);    // returns true
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#count-1">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains-1">
<db:title>bool QString::contains(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(QChar ch, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#contains">contains</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if this string contains an occurrence of the character <db:code role="parameter">ch</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="contains-2">
<db:title>[since 5.3] bool QString::contains(QLatin1String <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(QLatin1String str, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#contains">contains</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if this string contains an occurrence of the latin-1 string <db:code role="parameter">str</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
</db:section>
<db:section xml:id="contains-3">
<db:title>[since 5.14] bool QString::contains(QStringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(QStringView str, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#contains">contains</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if this string contains an occurrence of the string view <db:code role="parameter">str</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#count-1">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains-4">
<db:title>[since 5.1] bool QString::contains(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>, QRegularExpressionMatch *<db:emphasis>rmatch</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>const QRegularExpression &amp;</db:type>
<db:parameter>re</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QRegularExpressionMatch *</db:type>
<db:parameter>rmatch</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(const QRegularExpression &amp;re, QRegularExpressionMatch *rmatch) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the regular expression <db:code role="parameter">re</db:code> matches somewhere in this string; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If the match is successful and <db:code role="parameter">rmatch</db:code> is not <db:code>nullptr</db:code>, it also writes the results of the match into the <db:link xlink:href="qregularexpressionmatch.xml">QRegularExpressionMatch</db:link> object pointed to by <db:code role="parameter">rmatch</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpression.xml#match">QRegularExpression::match</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>qsizetype QString::count(const QString &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>count</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype count(const QString &amp;str, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of (potentially overlapping) occurrences of the string <db:code role="parameter">str</db:code> in this string.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count-1">
<db:title>qsizetype QString::count() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype count() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads count().</db:para>
<db:para>Same as <db:link xlink:href="qstring.xml#size">size</db:link>().</db:para>
</db:section>
<db:section xml:id="count-2">
<db:title>qsizetype QString::count(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>count</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype count(QChar ch, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#count-1">count</db:link>().</db:para>
<db:para>Returns the number of occurrences of character <db:code role="parameter">ch</db:code> in the string.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count-3">
<db:title>[since 6.0] qsizetype QString::count(QStringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>count</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype count(QStringView str, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#count-1">count</db:link>().</db:para>
<db:para>Returns the number of (potentially overlapping) occurrences of the string view <db:code role="parameter">str</db:code> in this string.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count-4">
<db:title>[since 5.0] qsizetype QString::count(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>count</db:methodname>
<db:methodparam>
<db:type>const QRegularExpression &amp;</db:type>
<db:parameter>re</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype count(const QRegularExpression &amp;re) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#count-1">count</db:link>().</db:para>
<db:para>Returns the number of times the regular expression <db:code role="parameter">re</db:code> matches in the string.</db:para>
<db:para>This function counts overlapping matches, so in the example below, there are four instances of &quot;ana&quot; or &quot;ama&quot;:</db:para>
<db:programlisting language="cpp">QString str = &quot;banana and panama&quot;;
str.count(QRegularExpression(&quot;a[nm]a&quot;));    // returns 4
</db:programlisting>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="crbegin">
<db:title>[since 5.6] QString::const_reverse_iterator QString::crbegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString::const_reverse_iterator</db:type>
<db:methodname>crbegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString::const_reverse_iterator crbegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style</db:link> reverse iterator pointing to the first character in the string, in reverse order.</db:para>
<db:warning>
<db:para>The returned iterator is invalidated on detachment or when the <db:link xlink:href="qstring.xml">QString</db:link> is modified.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#rend">rend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="crend">
<db:title>[since 5.6] QString::const_reverse_iterator QString::crend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString::const_reverse_iterator</db:type>
<db:methodname>crend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString::const_reverse_iterator crend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style</db:link> reverse iterator pointing just after the last character in the string, in reverse order.</db:para>
<db:warning>
<db:para>The returned iterator is invalidated on detachment or when the <db:link xlink:href="qstring.xml">QString</db:link> is modified.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#rend">rend</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#rbegin">rbegin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>QChar *QString::data()</db:title>
<db:methodsynopsis>
<db:type>QChar *</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QChar * data()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the data stored in the <db:link xlink:href="qstring.xml">QString</db:link>. The pointer can be used to access and modify the characters that compose the string.</db:para>
<db:para>Unlike <db:link xlink:href="qstring.xml#constData">constData</db:link>() and <db:link xlink:href="qstring.xml#unicode">unicode</db:link>(), the returned data is always '\0'-terminated.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str = &quot;Hello world&quot;;
QChar *data = str.data();
while (!data-&amp;gt;isNull()) {
    qDebug() &amp;lt;&amp;lt; data-&amp;gt;unicode();
    ++data;
}
</db:programlisting>
<db:para>Note that the pointer remains valid only as long as the string is not modified by other means. For read-only access, <db:link xlink:href="qstring.xml#constData">constData</db:link>() is faster because it never causes a <db:link xlink:href="implicit-sharing.xml#deep-copy">deep copy</db:link> to occur.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#constData">constData</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#operator-5b-5d">operator[]</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data-1">
<db:title>const QChar *QString::data() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QChar *</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const QChar * data() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:note>
<db:para>The returned string may not be '\0'-terminated. Use <db:link xlink:href="qstring.xml#size">size</db:link>() to determine the length of the array.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#fromRawData">fromRawData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="end">
<db:title>QString::iterator QString::end()</db:title>
<db:methodsynopsis>
<db:type>QString::iterator</db:type>
<db:methodname>end</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString::iterator end()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing just after the last character in the string.</db:para>
<db:warning>
<db:para>The returned iterator is invalidated on detachment or when the <db:link xlink:href="qstring.xml">QString</db:link> is modified.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#constEnd">constEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="end-1">
<db:title>QString::const_iterator QString::end() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString::const_iterator</db:type>
<db:methodname>end</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString::const_iterator end() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#end">end</db:link>().</db:para>
</db:section>
<db:section xml:id="endsWith">
<db:title>bool QString::endsWith(const QString &amp;<db:emphasis>s</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>endsWith</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool endsWith(const QString &amp;s, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the string ends with <db:code role="parameter">s</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:programlisting language="cpp">QString str = &quot;Bananas&quot;;
str.endsWith(&quot;anas&quot;);         // returns true
str.endsWith(&quot;pple&quot;);         // returns false
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#startsWith">startsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endsWith-1">
<db:title>[since 5.10] bool QString::endsWith(QStringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>endsWith</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool endsWith(QStringView str, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#endsWith">endsWith</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if the string ends with the string view <db:code role="parameter">str</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#startsWith">startsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endsWith-2">
<db:title>bool QString::endsWith(QLatin1String <db:emphasis>s</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>endsWith</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool endsWith(QLatin1String s, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#endsWith">endsWith</db:link>().</db:para>
</db:section>
<db:section xml:id="endsWith-3">
<db:title>bool QString::endsWith(QChar <db:emphasis>c</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>endsWith</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool endsWith(QChar c, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the string ends with <db:code role="parameter">c</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function overloads <db:link xlink:href="qstring.xml#endsWith">endsWith</db:link>().</db:para>
</db:section>
<db:section xml:id="fill">
<db:title>QString &amp;QString::fill(QChar <db:emphasis>ch</db:emphasis>, qsizetype <db:emphasis>size</db:emphasis> = -1)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>fill</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; fill(QChar ch, qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets every character in the string to character <db:code role="parameter">ch</db:code>. If <db:code role="parameter">size</db:code> is different from -1 (default), the string is resized to <db:code role="parameter">size</db:code> beforehand.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str = &quot;Berlin&quot;;
str.fill('z');
// str == &quot;zzzzzz&quot;

str.fill('A', 2);
// str == &quot;AA&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#resize">resize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="first">
<db:title>[since 6.0] QString QString::first(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>first</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString first(qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string that contains the first <db:code role="parameter">n</db:code> characters of this string.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">n</db:code> &lt; 0 or <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qstring.xml#size">size</db:link>().</db:para>
</db:note>
<db:programlisting language="cpp">QString x = &quot;Pineapple&quot;;
QString y = x.first(4);      // y == &quot;Pine&quot;
</db:programlisting>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#startsWith">startsWith</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromCFString">
<db:title>[static, since 5.2] QString QString::fromCFString(CFStringRef <db:emphasis>string</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromCFString</db:methodname>
<db:methodparam>
<db:type>CFStringRef</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromCFString(CFStringRef string)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Constructs a new <db:link xlink:href="qstring.xml">QString</db:link> containing a copy of the <db:code role="parameter">string</db:code> CFString.</db:para>
<db:note>
<db:para>this function is only available on macOS and iOS.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="fromLatin1">
<db:title>[static] QString QString::fromLatin1(const char *<db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromLatin1</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromLatin1(const char *str, qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qstring.xml">QString</db:link> initialized with the first <db:code role="parameter">size</db:code> characters of the Latin-1 string <db:code role="parameter">str</db:code>.</db:para>
<db:para>If <db:code role="parameter">size</db:code> is <db:code>-1</db:code>, <db:code>strlen(str)</db:code> is used instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toLatin1">toLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromLocal8Bit">fromLocal8Bit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromLatin1-1">
<db:title>[static, since 6.0] QString QString::fromLatin1(QByteArrayView <db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromLatin1</db:methodname>
<db:methodparam>
<db:type>QByteArrayView</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromLatin1(QByteArrayView str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a <db:link xlink:href="qstring.xml">QString</db:link> initialized with the Latin-1 string <db:code role="parameter">str</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="fromLatin1-2">
<db:title>[static, since 5.0] QString QString::fromLatin1(const QByteArray &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromLatin1</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromLatin1(const QByteArray &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a <db:link xlink:href="qstring.xml">QString</db:link> initialized with the Latin-1 string <db:code role="parameter">str</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="fromLocal8Bit">
<db:title>[static] QString QString::fromLocal8Bit(const char *<db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromLocal8Bit</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromLocal8Bit(const char *str, qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qstring.xml">QString</db:link> initialized with the first <db:code role="parameter">size</db:code> characters of the 8-bit string <db:code role="parameter">str</db:code>.</db:para>
<db:para>If <db:code role="parameter">size</db:code> is <db:code>-1</db:code>, <db:code>strlen(str)</db:code> is used instead.</db:para>
<db:para>On Unix systems this is equivalen to <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>(), on Windows the systems current code page is being used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toLocal8Bit">toLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromLatin1">fromLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromLocal8Bit-1">
<db:title>[static, since 6.0] QString QString::fromLocal8Bit(QByteArrayView <db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromLocal8Bit</db:methodname>
<db:methodparam>
<db:type>QByteArrayView</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromLocal8Bit(QByteArrayView str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a <db:link xlink:href="qstring.xml">QString</db:link> initialized with the 8-bit string <db:code role="parameter">str</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="fromLocal8Bit-2">
<db:title>[static, since 5.0] QString QString::fromLocal8Bit(const QByteArray &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromLocal8Bit</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromLocal8Bit(const QByteArray &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a <db:link xlink:href="qstring.xml">QString</db:link> initialized with the 8-bit string <db:code role="parameter">str</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="fromNSString">
<db:title>[static, since 5.2] QString QString::fromNSString(const NSString *<db:emphasis>string</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromNSString</db:methodname>
<db:methodparam>
<db:type>const NSString *</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromNSString(const NSString *string)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Constructs a new <db:link xlink:href="qstring.xml">QString</db:link> containing a copy of the <db:code role="parameter">string</db:code> NSString.</db:para>
<db:note>
<db:para>this function is only available on macOS and iOS.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="fromRawData">
<db:title>[static] QString QString::fromRawData(const QChar *<db:emphasis>unicode</db:emphasis>, qsizetype <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromRawData</db:methodname>
<db:methodparam>
<db:type>const QChar *</db:type>
<db:parameter>unicode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromRawData(const QChar *unicode, qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Constructs a <db:link xlink:href="qstring.xml">QString</db:link> that uses the first <db:code role="parameter">size</db:code> Unicode characters in the array <db:code role="parameter">unicode</db:code>. The data in <db:code role="parameter">unicode</db:code> is <db:emphasis>not</db:emphasis> copied. The caller must be able to guarantee that <db:code role="parameter">unicode</db:code> will not be deleted or modified as long as the <db:link xlink:href="qstring.xml">QString</db:link> (or an unmodified copy of it) exists.</db:para>
<db:para>Any attempts to modify the <db:link xlink:href="qstring.xml">QString</db:link> or copies of it will cause it to create a deep copy of the data, ensuring that the raw data isn't modified.</db:para>
<db:para>Here is an example of how we can use a <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> on raw data in memory without requiring to copy the data into a <db:link xlink:href="qstring.xml">QString</db:link>:</db:para>
<db:programlisting language="cpp">QRegularExpression pattern(&quot;\u00A4&quot;);
static const QChar unicode[] = {
        0x005A, 0x007F, 0x00A4, 0x0060,
        0x1009, 0x0020, 0x0020};
qsizetype size = sizeof(unicode) / sizeof(QChar);

QString str = QString::fromRawData(unicode, size);
if (str.contains(pattern) {
    // ...
}
</db:programlisting>
<db:warning>
<db:para>A string created with fromRawData() is <db:emphasis>not</db:emphasis> '\0'-terminated, unless the raw data contains a '\0' character at position <db:code role="parameter">size</db:code>. This means <db:link xlink:href="qstring.xml#unicode">unicode</db:link>() will <db:emphasis>not</db:emphasis> return a '\0'-terminated string (although <db:link xlink:href="qstring.xml#utf16">utf16</db:link>() does, at the cost of copying the raw data).</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#fromUtf16">fromUtf16</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#setRawData">setRawData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromStdString">
<db:title>[static] QString QString::fromStdString(const std::string &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromStdString</db:methodname>
<db:methodparam>
<db:type>const std::string &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromStdString(const std::string &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of the <db:code role="parameter">str</db:code> string. The given string is converted to Unicode using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#fromLatin1">fromLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromLocal8Bit">fromLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearray.xml#fromStdString">QByteArray::fromStdString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromStdU16String">
<db:title>[static, since 5.5] QString QString::fromStdU16String(const std::u16string &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromStdU16String</db:methodname>
<db:methodparam>
<db:type>const std::u16string &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromStdU16String(const std::u16string &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of the <db:code role="parameter">str</db:code> string. The given string is assumed to be encoded in UTF-16.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#fromUtf16">fromUtf16</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromStdWString">fromStdWString</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromStdU32String">fromStdU32String</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromStdU32String">
<db:title>[static, since 5.5] QString QString::fromStdU32String(const std::u32string &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromStdU32String</db:methodname>
<db:methodparam>
<db:type>const std::u32string &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromStdU32String(const std::u32string &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of the <db:code role="parameter">str</db:code> string. The given string is assumed to be encoded in UCS-4.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#fromUcs4">fromUcs4</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromStdWString">fromStdWString</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromStdU16String">fromStdU16String</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromStdWString">
<db:title>[static] QString QString::fromStdWString(const std::wstring &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromStdWString</db:methodname>
<db:methodparam>
<db:type>const std::wstring &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromStdWString(const std::wstring &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of the <db:code role="parameter">str</db:code> string. The given string is assumed to be encoded in utf16 if the size of wchar_t is 2 bytes (e.g. on windows) and ucs4 if the size of wchar_t is 4 bytes (most Unix systems).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#fromUtf16">fromUtf16</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromLatin1">fromLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromLocal8Bit">fromLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromUcs4">fromUcs4</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromStdU16String">fromStdU16String</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromStdU32String">fromStdU32String</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromUcs4">
<db:title>[static, since 5.3] QString QString::fromUcs4(const char32_t *<db:emphasis>unicode</db:emphasis>, qsizetype <db:emphasis>size</db:emphasis> = -1)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromUcs4</db:methodname>
<db:methodparam>
<db:type>const char32_t *</db:type>
<db:parameter>unicode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromUcs4(const char32_t *unicode, qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qstring.xml">QString</db:link> initialized with the first <db:code role="parameter">size</db:code> characters of the Unicode string <db:code role="parameter">unicode</db:code> (ISO-10646-UCS-4 encoded).</db:para>
<db:para>If <db:code role="parameter">size</db:code> is -1 (default), <db:code role="parameter">unicode</db:code> must be \0'-terminated.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toUcs4">toUcs4</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromUtf16">fromUtf16</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#utf16">utf16</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#setUtf16">setUtf16</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromWCharArray">fromWCharArray</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromStdU32String">fromStdU32String</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromUtf8">
<db:title>[static] QString QString::fromUtf8(const char *<db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromUtf8</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromUtf8(const char *str, qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qstring.xml">QString</db:link> initialized with the first <db:code role="parameter">size</db:code> bytes of the UTF-8 string <db:code role="parameter">str</db:code>.</db:para>
<db:para>If <db:code role="parameter">size</db:code> is <db:code>-1</db:code>, <db:code>strlen(str)</db:code> is used instead.</db:para>
<db:para>UTF-8 is a Unicode codec and can represent all characters in a Unicode string like <db:link xlink:href="qstring.xml">QString</db:link>. However, invalid sequences are possible with UTF-8 and, if any such are found, they will be replaced with one or more &quot;replacement characters&quot;, or suppressed. These include non-Unicode sequences, non-characters, overlong sequences or surrogate codepoints encoded into UTF-8.</db:para>
<db:para>This function can be used to process incoming data incrementally as long as all UTF-8 characters are terminated within the incoming data. Any unterminated characters at the end of the string will be replaced or suppressed. In order to do stateful decoding, please use <db:link xlink:href="qstringdecoder.xml">QStringDecoder</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toUtf8">toUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromLatin1">fromLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromLocal8Bit">fromLocal8Bit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromUtf8-1">
<db:title>[static, since 6.0] QString QString::fromUtf8(QByteArrayView <db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromUtf8</db:methodname>
<db:methodparam>
<db:type>QByteArrayView</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromUtf8(QByteArrayView str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a <db:link xlink:href="qstring.xml">QString</db:link> initialized with the UTF-8 string <db:code role="parameter">str</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="fromUtf8-2">
<db:title>[static, since 5.0] QString QString::fromUtf8(const QByteArray &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromUtf8</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromUtf8(const QByteArray &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a <db:link xlink:href="qstring.xml">QString</db:link> initialized with the UTF-8 string <db:code role="parameter">str</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="fromUtf8-3">
<db:title>[static, since 6.0] QString QString::fromUtf8(const int *<db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromUtf8</db:methodname>
<db:methodparam>
<db:type>const int *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromUtf8(const int *str, qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This overload is only available when compiling in C++20 mode.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="fromUtf16">
<db:title>[static, since 5.3] QString QString::fromUtf16(const char16_t *<db:emphasis>unicode</db:emphasis>, qsizetype <db:emphasis>size</db:emphasis> = -1)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromUtf16</db:methodname>
<db:methodparam>
<db:type>const char16_t *</db:type>
<db:parameter>unicode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromUtf16(const char16_t *unicode, qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qstring.xml">QString</db:link> initialized with the first <db:code role="parameter">size</db:code> characters of the Unicode string <db:code role="parameter">unicode</db:code> (ISO-10646-UTF-16 encoded).</db:para>
<db:para>If <db:code role="parameter">size</db:code> is -1 (default), <db:code role="parameter">unicode</db:code> must be \0'-terminated.</db:para>
<db:para>This function checks for a Byte Order Mark (BOM). If it is missing, host byte order is assumed.</db:para>
<db:para>This function is slow compared to the other Unicode conversions. Use <db:link xlink:href="qstring.xml">QString</db:link>(const <db:link xlink:href="qchar.xml">QChar</db:link> *, int) or <db:link xlink:href="qstring.xml">QString</db:link>(const <db:link xlink:href="qchar.xml">QChar</db:link> *) if possible.</db:para>
<db:para><db:link xlink:href="qstring.xml">QString</db:link> makes a deep copy of the Unicode data.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#utf16">utf16</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#setUtf16">setUtf16</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromStdU16String">fromStdU16String</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromWCharArray">
<db:title>[static] QString QString::fromWCharArray(const wchar_t *<db:emphasis>string</db:emphasis>, qsizetype <db:emphasis>size</db:emphasis> = -1)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromWCharArray</db:methodname>
<db:methodparam>
<db:type>const wchar_t *</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromWCharArray(const wchar_t *string, qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of the <db:code role="parameter">string</db:code>, where the encoding of <db:code role="parameter">string</db:code> depends on the size of wchar. If wchar is 4 bytes, the <db:code role="parameter">string</db:code> is interpreted as UCS-4, if wchar is 2 bytes it is interpreted as UTF-16.</db:para>
<db:para>If <db:code role="parameter">size</db:code> is -1 (default), the <db:code role="parameter">string</db:code> must be '\0'-terminated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#fromUtf16">fromUtf16</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromLatin1">fromLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromLocal8Bit">fromLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromUcs4">fromUcs4</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromStdWString">fromStdWString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="front">
<db:title>[since 5.10] QChar QString::front() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QChar</db:type>
<db:methodname>front</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QChar front() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the first character in the string. Same as <db:code>at(0)</db:code>.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:warning>
<db:para>Calling this function on an empty string constitutes undefined behavior.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#back">back</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#operator-5b-5d">operator[]</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="front-1">
<db:title>[since 5.10] QChar &amp;QString::front()</db:title>
<db:methodsynopsis>
<db:type>QChar &amp;</db:type>
<db:methodname>front</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QChar &amp; front()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the first character in the string. Same as <db:code>operator[](0)</db:code>.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:warning>
<db:para>Calling this function on an empty string constitutes undefined behavior.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#back">back</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#operator-5b-5d">operator[]</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf">
<db:title>qsizetype QString::indexOf(QLatin1String <db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>indexOf</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>from</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype indexOf(QLatin1String str, qsizetype from, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index position of the first occurrence of the string <db:code role="parameter">str</db:code> in this string, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString x = &quot;sticky question&quot;;
QString y = &quot;sti&quot;;
x.indexOf(y);               // returns 0
x.indexOf(y, 1);            // returns 10
x.indexOf(y, 10);           // returns 10
x.indexOf(y, 11);           // returns -1
</db:programlisting>
<db:para>If <db:code role="parameter">from</db:code> is -1, the search starts at the last character; if it is -2, at the next to last character and so on.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#count-1">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf-1">
<db:title>qsizetype QString::indexOf(QChar <db:emphasis>ch</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>indexOf</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>from</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype indexOf(QChar ch, qsizetype from, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#indexOf">indexOf</db:link>().</db:para>
<db:para>Returns the index position of the first occurrence of the character <db:code role="parameter">ch</db:code> in the string, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if <db:code role="parameter">ch</db:code> could not be found.</db:para>
</db:section>
<db:section xml:id="indexOf-2">
<db:title>qsizetype QString::indexOf(const QString &amp;<db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>indexOf</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>from</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype indexOf(const QString &amp;str, qsizetype from, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index position of the first occurrence of the string <db:code role="parameter">str</db:code> in this string, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString x = &quot;sticky question&quot;;
QString y = &quot;sti&quot;;
x.indexOf(y);               // returns 0
x.indexOf(y, 1);            // returns 10
x.indexOf(y, 10);           // returns 10
x.indexOf(y, 11);           // returns -1
</db:programlisting>
<db:para>If <db:code role="parameter">from</db:code> is -1, the search starts at the last character; if it is -2, at the next to last character and so on.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#count-1">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf-3">
<db:title>[since 5.14] qsizetype QString::indexOf(QStringView <db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>indexOf</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>from</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype indexOf(QStringView str, qsizetype from, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#indexOf">indexOf</db:link>().</db:para>
<db:para>Returns the index position of the first occurrence of the string view <db:code role="parameter">str</db:code> in this string, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>If <db:code role="parameter">from</db:code> is -1, the search starts at the last character; if it is -2, at the next to last character and so on.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#indexOf">QStringView::indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#count-1">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf-4">
<db:title>[since 5.5] qsizetype QString::indexOf(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0, QRegularExpressionMatch *<db:emphasis>rmatch</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>indexOf</db:methodname>
<db:methodparam>
<db:type>const QRegularExpression &amp;</db:type>
<db:parameter>re</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>from</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QRegularExpressionMatch *</db:type>
<db:parameter>rmatch</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype indexOf(const QRegularExpression &amp;re, qsizetype from, QRegularExpressionMatch *rmatch) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index position of the first match of the regular expression <db:code role="parameter">re</db:code> in the string, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if <db:code role="parameter">re</db:code> didn't match anywhere.</db:para>
<db:para>If the match is successful and <db:code role="parameter">rmatch</db:code> is not <db:code>nullptr</db:code>, it also writes the results of the match into the <db:link xlink:href="qregularexpressionmatch.xml">QRegularExpressionMatch</db:link> object pointed to by <db:code role="parameter">rmatch</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str = &quot;the minimum&quot;;
str.indexOf(QRegularExpression(&quot;m[aeiou]&quot;), 0);       // returns 4

QString str = &quot;the minimum&quot;;
QRegularExpressionMatch match;
str.indexOf(QRegularExpression(&quot;m[aeiou]&quot;), 0, &amp;amp;match);       // returns 4
// match.captured() == mi
</db:programlisting>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="insert">
<db:title>QString &amp;QString::insert(qsizetype <db:emphasis>position</db:emphasis>, const QString &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; insert(qsizetype position, const QString &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts the string <db:code role="parameter">str</db:code> at the given index <db:code role="parameter">position</db:code> and returns a reference to this string.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str = &quot;Meal&quot;;
str.insert(1, QString(&quot;ontr&quot;));
// str == &quot;Montreal&quot;
</db:programlisting>
<db:para>This string grows to accommodate the insertion. If <db:code role="parameter">position</db:code> is beyond the end of the string, space characters are appended to the string to reach this <db:code role="parameter">position</db:code>, followed by <db:code role="parameter">str</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#prepend">prepend</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#replace">replace</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insert-1">
<db:title>QString &amp;QString::insert(qsizetype <db:emphasis>position</db:emphasis>, QChar <db:emphasis>ch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; insert(qsizetype position, QChar ch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#insert">insert</db:link>().</db:para>
<db:para>Inserts <db:code role="parameter">ch</db:code> at the given index <db:code role="parameter">position</db:code> in the string.</db:para>
<db:para>This string grows to accommodate the insertion. If <db:code role="parameter">position</db:code> is beyond the end of the string, space characters are appended to the string to reach this <db:code role="parameter">position</db:code>, followed by <db:code role="parameter">ch</db:code>.</db:para>
</db:section>
<db:section xml:id="insert-2">
<db:title>QString &amp;QString::insert(qsizetype <db:emphasis>position</db:emphasis>, const QChar *<db:emphasis>unicode</db:emphasis>, qsizetype <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QChar *</db:type>
<db:parameter>unicode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; insert(qsizetype position, const QChar *unicode, qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#insert">insert</db:link>().</db:para>
<db:para>Inserts the first <db:code role="parameter">size</db:code> characters of the <db:link xlink:href="qchar.xml">QChar</db:link> array <db:code role="parameter">unicode</db:code> at the given index <db:code role="parameter">position</db:code> in the string.</db:para>
<db:para>This string grows to accommodate the insertion. If <db:code role="parameter">position</db:code> is beyond the end of the string, space characters are appended to the string to reach this <db:code role="parameter">position</db:code>, followed by <db:code role="parameter">size</db:code> characters of the <db:link xlink:href="qchar.xml">QChar</db:link> array <db:code role="parameter">unicode</db:code>.</db:para>
</db:section>
<db:section xml:id="insert-3">
<db:title>[since 6.0] QString &amp;QString::insert(qsizetype <db:emphasis>position</db:emphasis>, QStringView <db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; insert(qsizetype position, QStringView str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#insert">insert</db:link>().</db:para>
<db:para>Inserts the string view <db:code role="parameter">str</db:code> at the given index <db:code role="parameter">position</db:code> and returns a reference to this string.</db:para>
<db:para>This string grows to accommodate the insertion. If <db:code role="parameter">position</db:code> is beyond the end of the string, space characters are appended to the string to reach this <db:code role="parameter">position</db:code>, followed by <db:code role="parameter">str</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="insert-4">
<db:title>QString &amp;QString::insert(qsizetype <db:emphasis>position</db:emphasis>, QLatin1String <db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; insert(qsizetype position, QLatin1String str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#insert">insert</db:link>().</db:para>
<db:para>Inserts the Latin-1 string <db:code role="parameter">str</db:code> at the given index <db:code role="parameter">position</db:code>.</db:para>
<db:para>This string grows to accommodate the insertion. If <db:code role="parameter">position</db:code> is beyond the end of the string, space characters are appended to the string to reach this <db:code role="parameter">position</db:code>, followed by <db:code role="parameter">str</db:code>.</db:para>
</db:section>
<db:section xml:id="insert-5">
<db:title>[since 5.5] QString &amp;QString::insert(qsizetype <db:emphasis>position</db:emphasis>, const char *<db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; insert(qsizetype position, const char *str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#insert">insert</db:link>().</db:para>
<db:para>Inserts the C string <db:code role="parameter">str</db:code> at the given index <db:code role="parameter">position</db:code> and returns a reference to this string.</db:para>
<db:para>This string grows to accommodate the insertion. If <db:code role="parameter">position</db:code> is beyond the end of the string, space characters are appended to the string to reach this <db:code role="parameter">position</db:code>, followed by <db:code role="parameter">str</db:code>.</db:para>
<db:para>This function is not available when <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> is defined.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="insert-6">
<db:title>[since 5.5] QString &amp;QString::insert(qsizetype <db:emphasis>position</db:emphasis>, const QByteArray &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; insert(qsizetype position, const QByteArray &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#insert">insert</db:link>().</db:para>
<db:para>Interprets the contents of <db:code role="parameter">str</db:code> as UTF-8, inserts the Unicode string it encodes at the given index <db:code role="parameter">position</db:code> and returns a reference to this string.</db:para>
<db:para>This string grows to accommodate the insertion. If <db:code role="parameter">position</db:code> is beyond the end of the string, space characters are appended to the string to reach this <db:code role="parameter">position</db:code>, followed by <db:code role="parameter">str</db:code>.</db:para>
<db:para>This function is not available when <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> is defined.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QString::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the string has no characters; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString().isEmpty();            // returns true
QString(&quot;&quot;).isEmpty();          // returns true
QString(&quot;x&quot;).isEmpty();         // returns false
QString(&quot;abc&quot;).isEmpty();       // returns false
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isLower">
<db:title>[since 5.12] bool QString::isLower() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isLower</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isLower() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the string is lowercase, that is, it's identical to its <db:link xlink:href="qstring.xml#toLower">toLower</db:link>() folding.</db:para>
<db:para>Note that this does <db:emphasis>not</db:emphasis> mean that the string does not contain uppercase letters (some uppercase letters do not have a lowercase folding; they are left unchanged by <db:link xlink:href="qstring.xml#toLower">toLower</db:link>()). For more information, refer to the Unicode standard, section 3.13.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#toLower">QChar::toLower</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#isUpper">isUpper</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QString::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this string is null; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString().isNull();             // returns true
QString(&quot;&quot;).isNull();           // returns false
QString(&quot;abc&quot;).isNull();        // returns false
</db:programlisting>
<db:para>Qt makes a distinction between null strings and empty strings for historical reasons. For most applications, what matters is whether or not a string contains any data, and this can be determined using the <db:link xlink:href="qstring.xml#isEmpty">isEmpty</db:link>() function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isRightToLeft">
<db:title>bool QString::isRightToLeft() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isRightToLeft</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isRightToLeft() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the string is read right to left.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#isRightToLeft">QStringView::isRightToLeft</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isUpper">
<db:title>[since 5.12] bool QString::isUpper() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isUpper</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isUpper() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the string is uppercase, that is, it's identical to its <db:link xlink:href="qstring.xml#toUpper">toUpper</db:link>() folding.</db:para>
<db:para>Note that this does <db:emphasis>not</db:emphasis> mean that the string does not contain lowercase letters (some lowercase letters do not have a uppercase folding; they are left unchanged by <db:link xlink:href="qstring.xml#toUpper">toUpper</db:link>()). For more information, refer to the Unicode standard, section 3.13.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#toUpper">QChar::toUpper</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#isLower">isLower</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValidUtf16">
<db:title>[since 5.15] bool QString::isValidUtf16() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValidUtf16</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValidUtf16() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the string contains valid UTF-16 encoded data, or <db:code>false</db:code> otherwise.</db:para>
<db:para>Note that this function does not perform any special validation of the data; it merely checks if it can be successfully decoded from UTF-16. The data is assumed to be in host byte order; the presence of a BOM is meaningless.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#isValidUtf16">QStringView::isValidUtf16</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="last">
<db:title>[since 6.0] QString QString::last(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>last</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString last(qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the string that contains the last <db:code role="parameter">n</db:code> characters of this string.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">n</db:code> &lt; 0 or <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qstring.xml#size">size</db:link>().</db:para>
</db:note>
<db:programlisting language="cpp">QString x = &quot;Pineapple&quot;;
QString y = x.last(5);      // y == &quot;apple&quot;
</db:programlisting>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#endsWith">endsWith</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf">
<db:title>qsizetype QString::lastIndexOf(const QString &amp;<db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = -1, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>lastIndexOf</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>from</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype lastIndexOf(const QString &amp;str, qsizetype from, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index position of the last occurrence of the string <db:code role="parameter">str</db:code> in this string, searching backward from index position <db:code role="parameter">from</db:code>. If <db:code role="parameter">from</db:code> is -1 (default), the search starts at the last character; if <db:code role="parameter">from</db:code> is -2, at the next to last character and so on. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString x = &quot;crazy azimuths&quot;;
QString y = &quot;az&quot;;
x.lastIndexOf(y);           // returns 6
x.lastIndexOf(y, 6);        // returns 6
x.lastIndexOf(y, 5);        // returns 2
x.lastIndexOf(y, 1);        // returns -1
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#count-1">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf-1">
<db:title>qsizetype QString::lastIndexOf(QChar <db:emphasis>ch</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = -1, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>lastIndexOf</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>from</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype lastIndexOf(QChar ch, qsizetype from, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#lastIndexOf">lastIndexOf</db:link>().</db:para>
<db:para>Returns the index position of the last occurrence of the character <db:code role="parameter">ch</db:code>, searching backward from position <db:code role="parameter">from</db:code>.</db:para>
</db:section>
<db:section xml:id="lastIndexOf-2">
<db:title>qsizetype QString::lastIndexOf(QLatin1String <db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = -1, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>lastIndexOf</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>from</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype lastIndexOf(QLatin1String str, qsizetype from, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#lastIndexOf">lastIndexOf</db:link>().</db:para>
<db:para>Returns the index position of the last occurrence of the string <db:code role="parameter">str</db:code> in this string, searching backward from index position <db:code role="parameter">from</db:code>. If <db:code role="parameter">from</db:code> is -1 (default), the search starts at the last character; if <db:code role="parameter">from</db:code> is -2, at the next to last character and so on. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString x = &quot;crazy azimuths&quot;;
QString y = &quot;az&quot;;
x.lastIndexOf(y);           // returns 6
x.lastIndexOf(y, 6);        // returns 6
x.lastIndexOf(y, 5);        // returns 2
x.lastIndexOf(y, 1);        // returns -1
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#count-1">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf-3">
<db:title>[since 5.14] qsizetype QString::lastIndexOf(QStringView <db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = -1, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>lastIndexOf</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>from</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype lastIndexOf(QStringView str, qsizetype from, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#lastIndexOf">lastIndexOf</db:link>().</db:para>
<db:para>Returns the index position of the last occurrence of the string view <db:code role="parameter">str</db:code> in this string, searching backward from index position <db:code role="parameter">from</db:code>. If <db:code role="parameter">from</db:code> is -1 (default), the search starts at the last character; if <db:code role="parameter">from</db:code> is -2, at the next to last character and so on. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#count-1">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf-4">
<db:title>[since 5.5] qsizetype QString::lastIndexOf(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = -1, QRegularExpressionMatch *<db:emphasis>rmatch</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>lastIndexOf</db:methodname>
<db:methodparam>
<db:type>const QRegularExpression &amp;</db:type>
<db:parameter>re</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>from</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QRegularExpressionMatch *</db:type>
<db:parameter>rmatch</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype lastIndexOf(const QRegularExpression &amp;re, qsizetype from, QRegularExpressionMatch *rmatch) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index position of the last match of the regular expression <db:code role="parameter">re</db:code> in the string, which starts before the index position <db:code role="parameter">from</db:code>. Returns -1 if <db:code role="parameter">re</db:code> didn't match anywhere.</db:para>
<db:para>If the match is successful and <db:code role="parameter">rmatch</db:code> is not <db:code>nullptr</db:code>, it also writes the results of the match into the <db:link xlink:href="qregularexpressionmatch.xml">QRegularExpressionMatch</db:link> object pointed to by <db:code role="parameter">rmatch</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str = &quot;the minimum&quot;;
str.lastIndexOf(QRegularExpression(&quot;m[aeiou]&quot;));      // returns 8

QString str = &quot;the minimum&quot;;
QRegularExpressionMatch match;
str.lastIndexOf(QRegularExpression(&quot;m[aeiou]&quot;), -1, &amp;amp;match);      // returns 8
// match.captured() == mu
</db:programlisting>
<db:note>
<db:para>Due to how the regular expression matching algorithm works, this function will actually match repeatedly from the beginning of the string until the position <db:code role="parameter">from</db:code> is reached.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="left">
<db:title>QString QString::left(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>left</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString left(qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a substring that contains the <db:code role="parameter">n</db:code> leftmost characters of the string.</db:para>
<db:para>If you know that <db:code role="parameter">n</db:code> cannot be out of bounds, use <db:link xlink:href="qstring.xml#first">first</db:link>() instead in new code, because it is faster.</db:para>
<db:para>The entire string is returned if <db:code role="parameter">n</db:code> is greater than or equal to <db:link xlink:href="qstring.xml#size">size</db:link>(), or less than zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#startsWith">startsWith</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="leftJustified">
<db:title>QString QString::leftJustified(qsizetype <db:emphasis>width</db:emphasis>, QChar <db:emphasis>fill</db:emphasis> = QLatin1Char(' '), bool <db:emphasis>truncate</db:emphasis> = false) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>leftJustified</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>fill</db:parameter>
<db:initializer>QLatin1Char(' ')</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>truncate</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString leftJustified(qsizetype width, QChar fill, bool truncate) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string of size <db:code role="parameter">width</db:code> that contains this string padded by the <db:code role="parameter">fill</db:code> character.</db:para>
<db:para>If <db:code role="parameter">truncate</db:code> is <db:code>false</db:code> and the <db:link xlink:href="qstring.xml#size">size</db:link>() of the string is more than <db:code role="parameter">width</db:code>, then the returned string is a copy of the string.</db:para>
<db:programlisting language="cpp">QString s = &quot;apple&quot;;
QString t = s.leftJustified(8, '.');    // t == &quot;apple...&quot;
</db:programlisting>
<db:para>If <db:code role="parameter">truncate</db:code> is <db:code>true</db:code> and the <db:link xlink:href="qstring.xml#size">size</db:link>() of the string is more than <db:code role="parameter">width</db:code>, then any characters in a copy of the string after position <db:code role="parameter">width</db:code> are removed, and the copy is returned.</db:para>
<db:programlisting language="cpp">QString str = &quot;Pineapple&quot;;
str = str.leftJustified(5, '.', true);    // str == &quot;Pinea&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#rightJustified">rightJustified</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="length">
<db:title>qsizetype QString::length() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>length</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype length() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of characters in this string. Equivalent to <db:link xlink:href="qstring.xml#size">size</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#resize">resize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="localeAwareCompare">
<db:title>[static] int QString::localeAwareCompare(const QString &amp;<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>localeAwareCompare</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int localeAwareCompare(const QString &amp;s1, const QString &amp;s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Compares <db:code role="parameter">s1</db:code> with <db:code role="parameter">s2</db:code> and returns an integer less than, equal to, or greater than zero if <db:code role="parameter">s1</db:code> is less than, equal to, or greater than <db:code role="parameter">s2</db:code>.</db:para>
<db:para>The comparison is performed in a locale- and also platform-dependent manner. Use this function to present sorted lists of strings to the user.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#compare">compare</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml">QLocale</db:link></db:member>
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="localeAwareCompare-1">
<db:title>int QString::localeAwareCompare(const QString &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>localeAwareCompare</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int localeAwareCompare(const QString &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#localeAwareCompare">localeAwareCompare</db:link>().</db:para>
<db:para>Compares this string with the <db:code role="parameter">other</db:code> string and returns an integer less than, equal to, or greater than zero if this string is less than, equal to, or greater than the <db:code role="parameter">other</db:code> string.</db:para>
<db:para>The comparison is performed in a locale- and also platform-dependent manner. Use this function to present sorted lists of strings to the user.</db:para>
<db:para>Same as <db:code>localeAwareCompare(*this, other)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="localeAwareCompare-2">
<db:title>[since 6.0] int QString::localeAwareCompare(QStringView <db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>localeAwareCompare</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">int localeAwareCompare(QStringView other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#localeAwareCompare">localeAwareCompare</db:link>().</db:para>
<db:para>Compares this string with the <db:code role="parameter">other</db:code> string and returns an integer less than, equal to, or greater than zero if this string is less than, equal to, or greater than the <db:code role="parameter">other</db:code> string.</db:para>
<db:para>The comparison is performed in a locale- and also platform-dependent manner. Use this function to present sorted lists of strings to the user.</db:para>
<db:para>Same as <db:code>localeAwareCompare(*this, other)</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="localeAwareCompare-3">
<db:title>[static, since 6.0] int QString::localeAwareCompare(QStringView <db:emphasis>s1</db:emphasis>, QStringView <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>localeAwareCompare</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">int localeAwareCompare(QStringView s1, QStringView s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#localeAwareCompare">localeAwareCompare</db:link>().</db:para>
<db:para>Compares <db:code role="parameter">s1</db:code> with <db:code role="parameter">s2</db:code> and returns an integer less than, equal to, or greater than zero if <db:code role="parameter">s1</db:code> is less than, equal to, or greater than <db:code role="parameter">s2</db:code>.</db:para>
<db:para>The comparison is performed in a locale- and also platform-dependent manner. Use this function to present sorted lists of strings to the user.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mid">
<db:title>QString QString::mid(qsizetype <db:emphasis>position</db:emphasis>, qsizetype <db:emphasis>n</db:emphasis> = -1) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>mid</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString mid(qsizetype position, qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string that contains <db:code role="parameter">n</db:code> characters of this string, starting at the specified <db:code role="parameter">position</db:code> index.</db:para>
<db:para>If you know that <db:code role="parameter">position</db:code> and <db:code role="parameter">n</db:code> cannot be out of bounds, use <db:link xlink:href="qstring.xml#sliced">sliced</db:link>() instead in new code, because it is faster.</db:para>
<db:para>Returns a null string if the <db:code role="parameter">position</db:code> index exceeds the length of the string. If there are less than <db:code role="parameter">n</db:code> characters available in the string starting at the given <db:code role="parameter">position</db:code>, or if <db:code role="parameter">n</db:code> is -1 (default), the function returns all characters that are available from the specified <db:code role="parameter">position</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normalized">
<db:title>QString QString::normalized(QString::NormalizationForm <db:emphasis>mode</db:emphasis>, QChar::UnicodeVersion <db:emphasis>version</db:emphasis> = QChar::Unicode_Unassigned) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>normalized</db:methodname>
<db:methodparam>
<db:type>QString::NormalizationForm</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QChar::UnicodeVersion</db:type>
<db:parameter>version</db:parameter>
<db:initializer>QChar::Unicode_Unassigned</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString normalized(QString::NormalizationForm mode, QChar::UnicodeVersion version) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the string in the given Unicode normalization <db:code role="parameter">mode</db:code>, according to the given <db:code role="parameter">version</db:code> of the Unicode standard.</db:para>
</db:section>
<db:section xml:id="number">
<db:title>[static] QString QString::number(long <db:emphasis>n</db:emphasis>, int <db:emphasis>base</db:emphasis> = 10)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>number</db:methodname>
<db:methodparam>
<db:type>long</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString number(long n, int base)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string equivalent of the number <db:code role="parameter">n</db:code> according to the specified <db:code role="parameter">base</db:code>.</db:para>
<db:para>The base is 10 by default and must be between 2 and 36. For bases other than 10, <db:code role="parameter">n</db:code> is treated as an unsigned integer.</db:para>
<db:para>The formatting always uses <db:link xlink:href="qlocale.xml#Language-enum">QLocale::C</db:link>, i.e., English/UnitedStates. To get a localized string representation of a number, use <db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>() with the appropriate locale.</db:para>
<db:programlisting language="cpp">long a = 63;
QString s = QString::number(a, 16);             // s == &quot;3f&quot;
QString t = QString::number(a, 16).toUpper();     // t == &quot;3F&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#setNum">setNum</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="number-1">
<db:title>[static] QString QString::number(int <db:emphasis>n</db:emphasis>, int <db:emphasis>base</db:emphasis> = 10)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>number</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString number(int n, int base)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="number-2">
<db:title>[static] QString QString::number(uint <db:emphasis>n</db:emphasis>, int <db:emphasis>base</db:emphasis> = 10)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>number</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QString number(uint n, int base)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="number-3">
<db:title>[static] QString QString::number(ulong <db:emphasis>n</db:emphasis>, int <db:emphasis>base</db:emphasis> = 10)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>number</db:methodname>
<db:methodparam>
<db:type>ulong</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QString number(ulong n, int base)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="number-4">
<db:title>[static] QString QString::number(qlonglong <db:emphasis>n</db:emphasis>, int <db:emphasis>base</db:emphasis> = 10)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>number</db:methodname>
<db:methodparam>
<db:type>qlonglong</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QString number(qlonglong n, int base)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="number-5">
<db:title>[static] QString QString::number(qulonglong <db:emphasis>n</db:emphasis>, int <db:emphasis>base</db:emphasis> = 10)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>number</db:methodname>
<db:methodparam>
<db:type>qulonglong</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QString number(qulonglong n, int base)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="number-6">
<db:title>[static] QString QString::number(double <db:emphasis>n</db:emphasis>, char <db:emphasis>format</db:emphasis> = 'g', int <db:emphasis>precision</db:emphasis> = 6)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>number</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>char</db:type>
<db:parameter>format</db:parameter>
<db:initializer>'g'</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>precision</db:parameter>
<db:initializer>6</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QString number(double n, char format, int precision)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string equivalent of the number <db:code role="parameter">n</db:code>, formatted according to the specified <db:code role="parameter">format</db:code> and <db:code role="parameter">precision</db:code>. See <db:link xlink:href="qstring.xml#argument-formats">Argument Formats</db:link> for details.</db:para>
<db:para>Unlike <db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>(), this function does not honor the user's locale settings.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#setNum">setNum</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="prepend">
<db:title>QString &amp;QString::prepend(const QString &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>prepend</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; prepend(const QString &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Prepends the string <db:code role="parameter">str</db:code> to the beginning of this string and returns a reference to this string.</db:para>
<db:para>This operation is typically very fast (<db:link xlink:href="containers.xml#constant-time">constant time</db:link>), because <db:link xlink:href="qstring.xml">QString</db:link> preallocates extra space at the beginning of the string data, so it can grow without reallocating the entire string each time.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString x = &quot;ship&quot;;
QString y = &quot;air&quot;;
x.prepend(y);
// x == &quot;airship&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#insert">insert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="prepend-1">
<db:title>QString &amp;QString::prepend(QChar <db:emphasis>ch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>prepend</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; prepend(QChar ch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#prepend">prepend</db:link>().</db:para>
<db:para>Prepends the character <db:code role="parameter">ch</db:code> to this string.</db:para>
</db:section>
<db:section xml:id="prepend-2">
<db:title>[since 5.5] QString &amp;QString::prepend(const QChar *<db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>len</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>prepend</db:methodname>
<db:methodparam>
<db:type>const QChar *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>len</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; prepend(const QChar *str, qsizetype len)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#prepend">prepend</db:link>().</db:para>
<db:para>Prepends <db:code role="parameter">len</db:code> characters from the <db:link xlink:href="qchar.xml">QChar</db:link> array <db:code role="parameter">str</db:code> to this string and returns a reference to this string.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="prepend-3">
<db:title>[since 6.0] QString &amp;QString::prepend(QStringView <db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>prepend</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; prepend(QStringView str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#prepend">prepend</db:link>().</db:para>
<db:para>Prepends the string view <db:code role="parameter">str</db:code> to the beginning of this string and returns a reference to this string.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="prepend-4">
<db:title>QString &amp;QString::prepend(QLatin1String <db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>prepend</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; prepend(QLatin1String str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#prepend">prepend</db:link>().</db:para>
<db:para>Prepends the Latin-1 string <db:code role="parameter">str</db:code> to this string.</db:para>
</db:section>
<db:section xml:id="prepend-5">
<db:title>QString &amp;QString::prepend(const char *<db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>prepend</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; prepend(const char *str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#prepend">prepend</db:link>().</db:para>
<db:para>Prepends the string <db:code role="parameter">str</db:code> to this string. The const char pointer is converted to Unicode using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this function by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
</db:section>
<db:section xml:id="prepend-6">
<db:title>QString &amp;QString::prepend(const QByteArray &amp;<db:emphasis>ba</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>prepend</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>ba</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; prepend(const QByteArray &amp;ba)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#prepend">prepend</db:link>().</db:para>
<db:para>Prepends the byte array <db:code role="parameter">ba</db:code> to this string. The byte array is converted to Unicode using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this function by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
</db:section>
<db:section xml:id="push_back">
<db:title>void QString::push_back(const QString &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>push_back</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void push_back(const QString &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is provided for STL compatibility, appending the given <db:code role="parameter">other</db:code> string onto the end of this string. It is equivalent to <db:code>append(other)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#append">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="push_back-1">
<db:title>void QString::push_back(QChar <db:emphasis>ch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>push_back</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void push_back(QChar ch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Appends the given <db:code role="parameter">ch</db:code> character onto the end of this string.</db:para>
</db:section>
<db:section xml:id="push_front">
<db:title>void QString::push_front(const QString &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>push_front</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void push_front(const QString &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is provided for STL compatibility, prepending the given <db:code role="parameter">other</db:code> string to the beginning of this string. It is equivalent to <db:code>prepend(other)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#prepend">prepend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="push_front-1">
<db:title>void QString::push_front(QChar <db:emphasis>ch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>push_front</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void push_front(QChar ch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Prepends the given <db:code role="parameter">ch</db:code> character to the beginning of this string.</db:para>
</db:section>
<db:section xml:id="rbegin">
<db:title>[since 5.6] QString::reverse_iterator QString::rbegin()</db:title>
<db:methodsynopsis>
<db:type>QString::reverse_iterator</db:type>
<db:methodname>rbegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString::reverse_iterator rbegin()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="containers.xml#stl-style-iterators">STL-style</db:link> reverse iterator pointing to the first character in the string, in reverse order.</db:para>
<db:warning>
<db:para>The returned iterator is invalidated on detachment or when the <db:link xlink:href="qstring.xml">QString</db:link> is modified.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#crbegin">crbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#rend">rend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rbegin-1">
<db:title>[since 5.6] QString::const_reverse_iterator QString::rbegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString::const_reverse_iterator</db:type>
<db:methodname>rbegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString::const_reverse_iterator rbegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>QString &amp;QString::remove(qsizetype <db:emphasis>position</db:emphasis>, qsizetype <db:emphasis>n</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; remove(qsizetype position, qsizetype n)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes <db:code role="parameter">n</db:code> characters from the string, starting at the given <db:code role="parameter">position</db:code> index, and returns a reference to the string.</db:para>
<db:para>If the specified <db:code role="parameter">position</db:code> index is within the string, but <db:code role="parameter">position</db:code> + <db:code role="parameter">n</db:code> is beyond the end of the string, the string is truncated at the specified <db:code role="parameter">position</db:code>.</db:para>
<db:programlisting language="cpp">QString s = &quot;Montreal&quot;;
s.remove(1, 4);
// s == &quot;Meal&quot;
</db:programlisting>
<db:para>Element removal will preserve the string's capacity and not reduce the amount of allocated memory. To shed extra capacity and free as much memory as possible, call <db:link xlink:href="qstring.xml#squeeze">squeeze</db:link>() after the last change to the string's size.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#replace">replace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove-1">
<db:title>QString &amp;QString::remove(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; remove(QChar ch, Qt::CaseSensitivity cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes every occurrence of the character <db:code role="parameter">ch</db:code> in this string, and returns a reference to this string.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString t = &quot;Ali Baba&quot;;
t.remove(QChar('a'), Qt::CaseInsensitive);
// t == &quot;li Bb&quot;
</db:programlisting>
<db:para>This is the same as <db:code>replace(ch, &quot;&quot;, cs)</db:code>.</db:para>
<db:para>Element removal will preserve the string's capacity and not reduce the amount of allocated memory. To shed extra capacity and free as much memory as possible, call <db:link xlink:href="qstring.xml#squeeze">squeeze</db:link>() after the last change to the string's size.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#replace">replace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove-2">
<db:title>[since 5.11] QString &amp;QString::remove(QLatin1String <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; remove(QLatin1String str, Qt::CaseSensitivity cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Removes every occurrence of the given <db:code role="parameter">str</db:code> string in this string, and returns a reference to this string.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This is the same as <db:code>replace(str, &quot;&quot;, cs)</db:code>.</db:para>
<db:para>Element removal will preserve the string's capacity and not reduce the amount of allocated memory. To shed extra capacity and free as much memory as possible, call <db:link xlink:href="qstring.xml#squeeze">squeeze</db:link>() after the last change to the string's size.</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#replace">replace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove-3">
<db:title>QString &amp;QString::remove(const QString &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; remove(const QString &amp;str, Qt::CaseSensitivity cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes every occurrence of the given <db:code role="parameter">str</db:code> string in this string, and returns a reference to this string.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This is the same as <db:code>replace(str, &quot;&quot;, cs)</db:code>.</db:para>
<db:para>Element removal will preserve the string's capacity and not reduce the amount of allocated memory. To shed extra capacity and free as much memory as possible, call <db:link xlink:href="qstring.xml#squeeze">squeeze</db:link>() after the last change to the string's size.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#replace">replace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove-4">
<db:title>[since 5.0] QString &amp;QString::remove(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>const QRegularExpression &amp;</db:type>
<db:parameter>re</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; remove(const QRegularExpression &amp;re)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes every occurrence of the regular expression <db:code role="parameter">re</db:code> in the string, and returns a reference to the string. For example:</db:para>
<db:programlisting language="cpp">QString r = &quot;Telephone&quot;;
r.remove(QRegularExpression(&quot;[aeiou].&quot;));
// r == &quot;The&quot;
</db:programlisting>
<db:para>Element removal will preserve the string's capacity and not reduce the amount of allocated memory. To shed extra capacity and free as much memory as possible, call <db:link xlink:href="qstring.xml#squeeze">squeeze</db:link>() after the last change to the string's size.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#replace">replace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rend">
<db:title>[since 5.6] QString::reverse_iterator QString::rend()</db:title>
<db:methodsynopsis>
<db:type>QString::reverse_iterator</db:type>
<db:methodname>rend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString::reverse_iterator rend()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="containers.xml#stl-style-iterators">STL-style</db:link> reverse iterator pointing just after the last character in the string, in reverse order.</db:para>
<db:warning>
<db:para>The returned iterator is invalidated on detachment or when the <db:link xlink:href="qstring.xml">QString</db:link> is modified.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#crend">crend</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#rbegin">rbegin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rend-1">
<db:title>[since 5.6] QString::const_reverse_iterator QString::rend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString::const_reverse_iterator</db:type>
<db:methodname>rend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString::const_reverse_iterator rend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="repeated">
<db:title>QString QString::repeated(qsizetype <db:emphasis>times</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>repeated</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>times</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString repeated(qsizetype times) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of this string repeated the specified number of <db:code role="parameter">times</db:code>.</db:para>
<db:para>If <db:code role="parameter">times</db:code> is less than 1, an empty string is returned.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str(&quot;ab&quot;);
str.repeated(4);            // returns &quot;abababab&quot;
</db:programlisting>
</db:section>
<db:section xml:id="replace">
<db:title>QString &amp;QString::replace(qsizetype <db:emphasis>position</db:emphasis>, qsizetype <db:emphasis>n</db:emphasis>, const QString &amp;<db:emphasis>after</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>after</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; replace(qsizetype position, qsizetype n, const QString &amp;after)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces <db:code role="parameter">n</db:code> characters beginning at index <db:code role="parameter">position</db:code> with the string <db:code role="parameter">after</db:code> and returns a reference to this string.</db:para>
<db:note>
<db:para>If the specified <db:code role="parameter">position</db:code> index is within the string, but <db:code role="parameter">position</db:code> + <db:code role="parameter">n</db:code> goes outside the strings range, then <db:code role="parameter">n</db:code> will be adjusted to stop at the end of the string.</db:para>
</db:note>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString x = &quot;Say yes!&quot;;
QString y = &quot;no&quot;;
x.replace(4, 3, y);
// x == &quot;Say no!&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replace-1">
<db:title>QString &amp;QString::replace(qsizetype <db:emphasis>position</db:emphasis>, qsizetype <db:emphasis>n</db:emphasis>, QChar <db:emphasis>after</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>after</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; replace(qsizetype position, qsizetype n, QChar after)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#replace">replace</db:link>().</db:para>
<db:para>Replaces <db:code role="parameter">n</db:code> characters beginning at index <db:code role="parameter">position</db:code> with the character <db:code role="parameter">after</db:code> and returns a reference to this string.</db:para>
</db:section>
<db:section xml:id="replace-2">
<db:title>QString &amp;QString::replace(qsizetype <db:emphasis>position</db:emphasis>, qsizetype <db:emphasis>n</db:emphasis>, const QChar *<db:emphasis>unicode</db:emphasis>, qsizetype <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QChar *</db:type>
<db:parameter>unicode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; replace(qsizetype position, qsizetype n, const QChar *unicode, qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#replace">replace</db:link>().</db:para>
<db:para>Replaces <db:code role="parameter">n</db:code> characters beginning at index <db:code role="parameter">position</db:code> with the first <db:code role="parameter">size</db:code> characters of the <db:link xlink:href="qchar.xml">QChar</db:link> array <db:code role="parameter">unicode</db:code> and returns a reference to this string.</db:para>
</db:section>
<db:section xml:id="replace-3">
<db:title>QString &amp;QString::replace(QChar <db:emphasis>before</db:emphasis>, QChar <db:emphasis>after</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>before</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>after</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; replace(QChar before, QChar after, Qt::CaseSensitivity cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#replace">replace</db:link>().</db:para>
<db:para>Replaces every occurrence of the character <db:code role="parameter">before</db:code> with the character <db:code role="parameter">after</db:code> and returns a reference to this string.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
</db:section>
<db:section xml:id="replace-4">
<db:title>QString &amp;QString::replace(const QChar *<db:emphasis>before</db:emphasis>, qsizetype <db:emphasis>blen</db:emphasis>, const QChar *<db:emphasis>after</db:emphasis>, qsizetype <db:emphasis>alen</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>const QChar *</db:type>
<db:parameter>before</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>blen</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QChar *</db:type>
<db:parameter>after</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>alen</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; replace(const QChar *before, qsizetype blen, const QChar *after, qsizetype alen, Qt::CaseSensitivity cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#replace">replace</db:link>().</db:para>
<db:para>Replaces each occurrence in this string of the first <db:code role="parameter">blen</db:code> characters of <db:code role="parameter">before</db:code> with the first <db:code role="parameter">alen</db:code> characters of <db:code role="parameter">after</db:code> and returns a reference to this string.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
</db:section>
<db:section xml:id="replace-5">
<db:title>QString &amp;QString::replace(QLatin1String <db:emphasis>before</db:emphasis>, QLatin1String <db:emphasis>after</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>before</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>after</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; replace(QLatin1String before, QLatin1String after, Qt::CaseSensitivity cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#replace">replace</db:link>().</db:para>
<db:para>Replaces every occurrence of the string <db:code role="parameter">before</db:code> with the string <db:code role="parameter">after</db:code> and returns a reference to this string.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:note>
<db:para>The text is not rescanned after a replacement.</db:para>
</db:note>
</db:section>
<db:section xml:id="replace-6">
<db:title>QString &amp;QString::replace(QLatin1String <db:emphasis>before</db:emphasis>, const QString &amp;<db:emphasis>after</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>before</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>after</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; replace(QLatin1String before, const QString &amp;after, Qt::CaseSensitivity cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#replace">replace</db:link>().</db:para>
<db:para>Replaces every occurrence of the string <db:code role="parameter">before</db:code> with the string <db:code role="parameter">after</db:code> and returns a reference to this string.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:note>
<db:para>The text is not rescanned after a replacement.</db:para>
</db:note>
</db:section>
<db:section xml:id="replace-7">
<db:title>QString &amp;QString::replace(const QString &amp;<db:emphasis>before</db:emphasis>, QLatin1String <db:emphasis>after</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>before</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>after</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; replace(const QString &amp;before, QLatin1String after, Qt::CaseSensitivity cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#replace">replace</db:link>().</db:para>
<db:para>Replaces every occurrence of the string <db:code role="parameter">before</db:code> with the string <db:code role="parameter">after</db:code> and returns a reference to this string.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:note>
<db:para>The text is not rescanned after a replacement.</db:para>
</db:note>
</db:section>
<db:section xml:id="replace-8">
<db:title>QString &amp;QString::replace(const QString &amp;<db:emphasis>before</db:emphasis>, const QString &amp;<db:emphasis>after</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>before</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>after</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; replace(const QString &amp;before, const QString &amp;after, Qt::CaseSensitivity cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#replace">replace</db:link>().</db:para>
<db:para>Replaces every occurrence of the string <db:code role="parameter">before</db:code> with the string <db:code role="parameter">after</db:code> and returns a reference to this string.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str = &quot;colour behaviour flavour neighbour&quot;;
str.replace(QString(&quot;ou&quot;), QString(&quot;o&quot;));
// str == &quot;color behavior flavor neighbor&quot;
</db:programlisting>
<db:note>
<db:para>The replacement text is not rescanned after it is inserted.</db:para>
</db:note>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString equis = &quot;xxxxxx&quot;;
equis.replace(&quot;xx&quot;, &quot;x&quot;);
// equis == &quot;xxx&quot;
</db:programlisting>
</db:section>
<db:section xml:id="replace-9">
<db:title>QString &amp;QString::replace(QChar <db:emphasis>ch</db:emphasis>, const QString &amp;<db:emphasis>after</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>after</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; replace(QChar ch, const QString &amp;after, Qt::CaseSensitivity cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#replace">replace</db:link>().</db:para>
<db:para>Replaces every occurrence of the character <db:code role="parameter">ch</db:code> in the string with <db:code role="parameter">after</db:code> and returns a reference to this string.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
</db:section>
<db:section xml:id="replace-10">
<db:title>QString &amp;QString::replace(QChar <db:emphasis>c</db:emphasis>, QLatin1String <db:emphasis>after</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>after</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; replace(QChar c, QLatin1String after, Qt::CaseSensitivity cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#replace">replace</db:link>().</db:para>
<db:para>Replaces every occurrence of the character <db:code role="parameter">c</db:code> with the string <db:code role="parameter">after</db:code> and returns a reference to this string.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:note>
<db:para>The text is not rescanned after a replacement.</db:para>
</db:note>
</db:section>
<db:section xml:id="replace-11">
<db:title>[since 5.0] QString &amp;QString::replace(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>, const QString &amp;<db:emphasis>after</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>const QRegularExpression &amp;</db:type>
<db:parameter>re</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>after</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">11</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; replace(const QRegularExpression &amp;re, const QString &amp;after)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#replace">replace</db:link>().</db:para>
<db:para>Replaces every occurrence of the regular expression <db:code role="parameter">re</db:code> in the string with <db:code role="parameter">after</db:code>. Returns a reference to the string. For example:</db:para>
<db:programlisting language="cpp">QString s = &quot;Banana&quot;;
s.replace(QRegularExpression(&quot;a[mn]&quot;), &quot;ox&quot;);
// s == &quot;Boxoxa&quot;
</db:programlisting>
<db:para>For regular expressions containing capturing groups, occurrences of <db:emphasis role="bold">\1</db:emphasis>, <db:emphasis role="bold">\2</db:emphasis>, ..., in <db:code role="parameter">after</db:code> are replaced with the string captured by the corresponding capturing group.</db:para>
<db:programlisting language="cpp">QString t = &quot;A &amp;lt;i&amp;gt;bon mot&amp;lt;/i&amp;gt;.&quot;;
t.replace(QRegularExpression(&quot;&amp;lt;i&amp;gt;([^&amp;lt;]*)&amp;lt;/i&amp;gt;&quot;), &quot;\\emph{\\1}&quot;);
// t == &quot;A \\emph{bon mot}.&quot;
</db:programlisting>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#remove">remove</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml">QRegularExpressionMatch</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reserve">
<db:title>void QString::reserve(qsizetype <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>reserve</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void reserve(qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Ensures the string has space for at least <db:code role="parameter">size</db:code> characters.</db:para>
<db:para>If you know in advance how large the string will be, you can call this function to save repeated reallocation in the course of building it. This can improve performance when building a string incrementally. A long sequence of operations that add to a string may trigger several reallocations, the last of which may leave you with significantly more space than you really need, which is less efficient than doing a single allocation of the right size at the start.</db:para>
<db:para>If in doubt about how much space shall be needed, it is usually better to use an upper bound as <db:code role="parameter">size</db:code>, or a high estimate of the most likely size, if a strict upper bound would be much bigger than this. If <db:code role="parameter">size</db:code> is an underestimate, the string will grow as needed once the reserved size is exceeded, which may lead to a larger allocation than your best overestimate would have and will slow the operation that triggers it.</db:para>
<db:warning>
<db:para>reserve() reserves memory but does not change the size of the string. Accessing data beyond the end of the string is undefined behavior. If you need to access memory beyond the current end of the string, use <db:link xlink:href="qstring.xml#resize">resize</db:link>().</db:para>
</db:warning>
<db:para>This function is useful for code that needs to build up a long string and wants to avoid repeated reallocation. In this example, we want to add to the string until some condition is <db:code>true</db:code>, and we're fairly sure that size is large enough to make a call to reserve() worthwhile:</db:para>
<db:programlisting language="cpp">QString result;
qsizetype maxSize;
bool condition;
QChar nextChar;

result.reserve(maxSize);

while (condition)
    result.append(nextChar);

result.squeeze();
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#squeeze">squeeze</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#capacity">capacity</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#resize">resize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resize">
<db:title>void QString::resize(qsizetype <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resize</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resize(qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the size of the string to <db:code role="parameter">size</db:code> characters.</db:para>
<db:para>If <db:code role="parameter">size</db:code> is greater than the current size, the string is extended to make it <db:code role="parameter">size</db:code> characters long with the extra characters added to the end. The new characters are uninitialized.</db:para>
<db:para>If <db:code role="parameter">size</db:code> is less than the current size, characters beyond position <db:code role="parameter">size</db:code> are excluded from the string.</db:para>
<db:note>
<db:para>While resize() will grow the capacity if needed, it never shrinks capacity. To shed excess capacity, use <db:link xlink:href="qstring.xml#squeeze">squeeze</db:link>().</db:para>
</db:note>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString s = &quot;Hello world&quot;;
s.resize(5);
// s == &quot;Hello&quot;

s.resize(8);
// s == &quot;Hello???&quot; (where ? stands for any character)
</db:programlisting>
<db:para>If you want to append a certain number of identical characters to the string, use the <db:link xlink:href="qstring.xml#resize-1">resize</db:link>(qsizetype, QChar) overload.</db:para>
<db:para>If you want to expand the string so that it reaches a certain width and fill the new positions with a particular character, use the <db:link xlink:href="qstring.xml#leftJustified">leftJustified</db:link>() function:</db:para>
<db:para>If <db:code role="parameter">size</db:code> is negative, it is equivalent to passing zero.</db:para>
<db:programlisting language="cpp">QString r = &quot;Hello&quot;;
r = r.leftJustified(10, ' ');
// r == &quot;Hello     &quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#truncate">truncate</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#reserve">reserve</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#squeeze">squeeze</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resize-1">
<db:title>[since 5.7] void QString::resize(qsizetype <db:emphasis>size</db:emphasis>, QChar <db:emphasis>fillChar</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resize</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>fillChar</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void resize(qsizetype size, QChar fillChar)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Unlike <db:link xlink:href="qstring.xml#resize">resize</db:link>(qsizetype), this overload initializes the new characters to <db:code role="parameter">fillChar</db:code>:</db:para>
<db:programlisting language="cpp">QString t = &quot;Hello&quot;;
r.resize(t.size() + 10, 'X');
// t == &quot;HelloXXXXXXXXXX&quot;
</db:programlisting>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="right">
<db:title>QString QString::right(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>right</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString right(qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a substring that contains the <db:code role="parameter">n</db:code> rightmost characters of the string.</db:para>
<db:para>If you know that <db:code role="parameter">n</db:code> cannot be out of bounds, use <db:link xlink:href="qstring.xml#last">last</db:link>() instead in new code, because it is faster.</db:para>
<db:para>The entire string is returned if <db:code role="parameter">n</db:code> is greater than or equal to <db:link xlink:href="qstring.xml#size">size</db:link>(), or less than zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#endsWith">endsWith</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rightJustified">
<db:title>QString QString::rightJustified(qsizetype <db:emphasis>width</db:emphasis>, QChar <db:emphasis>fill</db:emphasis> = QLatin1Char(' '), bool <db:emphasis>truncate</db:emphasis> = false) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>rightJustified</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>fill</db:parameter>
<db:initializer>QLatin1Char(' ')</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>truncate</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString rightJustified(qsizetype width, QChar fill, bool truncate) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string of <db:link xlink:href="qstring.xml#size">size</db:link>() <db:code role="parameter">width</db:code> that contains the <db:code role="parameter">fill</db:code> character followed by the string. For example:</db:para>
<db:programlisting language="cpp">QString s = &quot;apple&quot;;
QString t = s.rightJustified(8, '.');    // t == &quot;...apple&quot;
</db:programlisting>
<db:para>If <db:code role="parameter">truncate</db:code> is <db:code>false</db:code> and the <db:link xlink:href="qstring.xml#size">size</db:link>() of the string is more than <db:code role="parameter">width</db:code>, then the returned string is a copy of the string.</db:para>
<db:para>If <db:code role="parameter">truncate</db:code> is true and the <db:link xlink:href="qstring.xml#size">size</db:link>() of the string is more than <db:code role="parameter">width</db:code>, then the resulting string is truncated at position <db:code role="parameter">width</db:code>.</db:para>
<db:programlisting language="cpp">QString str = &quot;Pineapple&quot;;
str = str.rightJustified(5, '.', true);    // str == &quot;Pinea&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#leftJustified">leftJustified</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="section">
<db:title>QString QString::section(QChar <db:emphasis>sep</db:emphasis>, qsizetype <db:emphasis>start</db:emphasis>, qsizetype <db:emphasis>end</db:emphasis> = -1, QString::SectionFlags <db:emphasis>flags</db:emphasis> = SectionDefault) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>section</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>sep</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>end</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QString::SectionFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>SectionDefault</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString section(QChar sep, qsizetype start, qsizetype end, QString::SectionFlags flags) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns a section of the string.</db:para>
<db:para>This string is treated as a sequence of fields separated by the character, <db:code role="parameter">sep</db:code>. The returned string consists of the fields from position <db:code role="parameter">start</db:code> to position <db:code role="parameter">end</db:code> inclusive. If <db:code role="parameter">end</db:code> is not specified, all fields from position <db:code role="parameter">start</db:code> to the end of the string are included. Fields are numbered 0, 1, 2, etc., counting from the left, and -1, -2, etc., counting from right to left.</db:para>
<db:para>The <db:code role="parameter">flags</db:code> argument can be used to affect some aspects of the function's behavior, e.g. whether to be case sensitive, whether to skip empty fields and how to deal with leading and trailing separators; see <db:link xlink:href="qstring.xml#SectionFlag-enum">SectionFlags</db:link>.</db:para>
<db:programlisting language="cpp">QString str;
QString csv = &quot;forename,middlename,surname,phone&quot;;
QString path = &quot;/usr/local/bin/myapp&quot;; // First field is empty
QString::SectionFlag flag = QString::SectionSkipEmpty;

str = csv.section(',', 2, 2);   // str == &quot;surname&quot;
str = path.section('/', 3, 4);  // str == &quot;bin/myapp&quot;
str = path.section('/', 3, 3, flag); // str == &quot;myapp&quot;
</db:programlisting>
<db:para>If <db:code role="parameter">start</db:code> or <db:code role="parameter">end</db:code> is negative, we count fields from the right of the string, the right-most field being -1, the one from right-most field being -2, and so on.</db:para>
<db:programlisting language="cpp">str = csv.section(',', -3, -2);  // str == &quot;middlename,surname&quot;
str = path.section('/', -1); // str == &quot;myapp&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#split">split</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="section-1">
<db:title>QString QString::section(const QString &amp;<db:emphasis>sep</db:emphasis>, qsizetype <db:emphasis>start</db:emphasis>, qsizetype <db:emphasis>end</db:emphasis> = -1, QString::SectionFlags <db:emphasis>flags</db:emphasis> = SectionDefault) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>section</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>sep</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>end</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QString::SectionFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>SectionDefault</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString section(const QString &amp;sep, qsizetype start, qsizetype end, QString::SectionFlags flags) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#section">section</db:link>().</db:para>
<db:programlisting language="cpp">QString str;
QString data = &quot;forename**middlename**surname**phone&quot;;

str = data.section(&quot;**&quot;, 2, 2); // str == &quot;surname&quot;
str = data.section(&quot;**&quot;, -3, -2); // str == &quot;middlename**surname&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#split">split</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="section-2">
<db:title>[since 5.0] QString QString::section(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>, qsizetype <db:emphasis>start</db:emphasis>, qsizetype <db:emphasis>end</db:emphasis> = -1, QString::SectionFlags <db:emphasis>flags</db:emphasis> = SectionDefault) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>section</db:methodname>
<db:methodparam>
<db:type>const QRegularExpression &amp;</db:type>
<db:parameter>re</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>end</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QString::SectionFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>SectionDefault</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QString section(const QRegularExpression &amp;re, qsizetype start, qsizetype end, QString::SectionFlags flags) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#section">section</db:link>().</db:para>
<db:para>This string is treated as a sequence of fields separated by the regular expression, <db:code role="parameter">re</db:code>.</db:para>
<db:programlisting language="cpp">QString line = &quot;forename\tmiddlename  surname \t \t phone&quot;;
QRegularExpression sep(&quot;\\s+&quot;);
str = line.section(sep, 2, 2); // str == &quot;surname&quot;
str = line.section(sep, -3, -2); // str == &quot;middlename  surname&quot;
</db:programlisting>
<db:warning>
<db:para>Using this <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> version is much more expensive than the overloaded string and character versions.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#split">split</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#simplified">simplified</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNum">
<db:title>QString &amp;QString::setNum(int <db:emphasis>n</db:emphasis>, int <db:emphasis>base</db:emphasis> = 10)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>setNum</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; setNum(int n, int base)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the string to the printed value of <db:code role="parameter">n</db:code> in the specified <db:code role="parameter">base</db:code>, and returns a reference to the string.</db:para>
<db:para>The base is 10 by default and must be between 2 and 36. For bases other than 10, <db:code role="parameter">n</db:code> is treated as an unsigned integer.</db:para>
<db:programlisting language="cpp">QString str;
str.setNum(1234);       // str == &quot;1234&quot;
</db:programlisting>
<db:para>The formatting always uses <db:link xlink:href="qlocale.xml#Language-enum">QLocale::C</db:link>, i.e., English/UnitedStates. To get a localized string representation of a number, use <db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>() with the appropriate locale.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#number">number</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNum-1">
<db:title>QString &amp;QString::setNum(short <db:emphasis>n</db:emphasis>, int <db:emphasis>base</db:emphasis> = 10)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>setNum</db:methodname>
<db:methodparam>
<db:type>short</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; setNum(short n, int base)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setNum-2">
<db:title>QString &amp;QString::setNum(ushort <db:emphasis>n</db:emphasis>, int <db:emphasis>base</db:emphasis> = 10)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>setNum</db:methodname>
<db:methodparam>
<db:type>ushort</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; setNum(ushort n, int base)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setNum-3">
<db:title>QString &amp;QString::setNum(uint <db:emphasis>n</db:emphasis>, int <db:emphasis>base</db:emphasis> = 10)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>setNum</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; setNum(uint n, int base)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setNum-4">
<db:title>QString &amp;QString::setNum(long <db:emphasis>n</db:emphasis>, int <db:emphasis>base</db:emphasis> = 10)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>setNum</db:methodname>
<db:methodparam>
<db:type>long</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; setNum(long n, int base)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setNum-5">
<db:title>QString &amp;QString::setNum(ulong <db:emphasis>n</db:emphasis>, int <db:emphasis>base</db:emphasis> = 10)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>setNum</db:methodname>
<db:methodparam>
<db:type>ulong</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; setNum(ulong n, int base)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setNum-6">
<db:title>QString &amp;QString::setNum(qlonglong <db:emphasis>n</db:emphasis>, int <db:emphasis>base</db:emphasis> = 10)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>setNum</db:methodname>
<db:methodparam>
<db:type>qlonglong</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; setNum(qlonglong n, int base)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setNum-7">
<db:title>QString &amp;QString::setNum(qulonglong <db:emphasis>n</db:emphasis>, int <db:emphasis>base</db:emphasis> = 10)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>setNum</db:methodname>
<db:methodparam>
<db:type>qulonglong</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; setNum(qulonglong n, int base)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setNum-8">
<db:title>QString &amp;QString::setNum(float <db:emphasis>n</db:emphasis>, char <db:emphasis>format</db:emphasis> = 'g', int <db:emphasis>precision</db:emphasis> = 6)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>setNum</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>char</db:type>
<db:parameter>format</db:parameter>
<db:initializer>'g'</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>precision</db:parameter>
<db:initializer>6</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; setNum(float n, char format, int precision)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the string to the printed value of <db:code role="parameter">n</db:code>, formatted according to the given <db:code role="parameter">format</db:code> and <db:code role="parameter">precision</db:code>, and returns a reference to the string.</db:para>
<db:para>The formatting always uses <db:link xlink:href="qlocale.xml#Language-enum">QLocale::C</db:link>, i.e., English/UnitedStates. To get a localized string representation of a number, use <db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>() with the appropriate locale.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#number">number</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNum-9">
<db:title>QString &amp;QString::setNum(double <db:emphasis>n</db:emphasis>, char <db:emphasis>format</db:emphasis> = 'g', int <db:emphasis>precision</db:emphasis> = 6)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>setNum</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>char</db:type>
<db:parameter>format</db:parameter>
<db:initializer>'g'</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>precision</db:parameter>
<db:initializer>6</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; setNum(double n, char format, int precision)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the string to the printed value of <db:code role="parameter">n</db:code>, formatted according to the given <db:code role="parameter">format</db:code> and <db:code role="parameter">precision</db:code>, and returns a reference to the string.</db:para>
<db:para>The <db:code role="parameter">format</db:code> can be 'e', 'E', 'f', 'g' or 'G' (see <db:link xlink:href="qstring.xml#argument-formats">Argument Formats</db:link> for an explanation of the formats).</db:para>
<db:para>The formatting always uses <db:link xlink:href="qlocale.xml#Language-enum">QLocale::C</db:link>, i.e., English/UnitedStates. To get a localized string representation of a number, use <db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>() with the appropriate locale.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#number">number</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRawData">
<db:title>QString &amp;QString::setRawData(const QChar *<db:emphasis>unicode</db:emphasis>, qsizetype <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>setRawData</db:methodname>
<db:methodparam>
<db:type>const QChar *</db:type>
<db:parameter>unicode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; setRawData(const QChar *unicode, qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets the <db:link xlink:href="qstring.xml">QString</db:link> to use the first <db:code role="parameter">size</db:code> Unicode characters in the array <db:code role="parameter">unicode</db:code>. The data in <db:code role="parameter">unicode</db:code> is <db:emphasis>not</db:emphasis> copied. The caller must be able to guarantee that <db:code role="parameter">unicode</db:code> will not be deleted or modified as long as the <db:link xlink:href="qstring.xml">QString</db:link> (or an unmodified copy of it) exists.</db:para>
<db:para>This function can be used instead of <db:link xlink:href="qstring.xml#fromRawData">fromRawData</db:link>() to re-use existings <db:link xlink:href="qstring.xml">QString</db:link> objects to save memory re-allocations.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#fromRawData">fromRawData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUnicode">
<db:title>QString &amp;QString::setUnicode(const QChar *<db:emphasis>unicode</db:emphasis>, qsizetype <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>setUnicode</db:methodname>
<db:methodparam>
<db:type>const QChar *</db:type>
<db:parameter>unicode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; setUnicode(const QChar *unicode, qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resizes the string to <db:code role="parameter">size</db:code> characters and copies <db:code role="parameter">unicode</db:code> into the string.</db:para>
<db:para>If <db:code role="parameter">unicode</db:code> is 0, nothing is copied, but the string is still resized to <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#unicode">unicode</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#setUtf16">setUtf16</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUtf16">
<db:title>QString &amp;QString::setUtf16(const ushort *<db:emphasis>unicode</db:emphasis>, qsizetype <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>setUtf16</db:methodname>
<db:methodparam>
<db:type>const ushort *</db:type>
<db:parameter>unicode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; setUtf16(const ushort *unicode, qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resizes the string to <db:code role="parameter">size</db:code> characters and copies <db:code role="parameter">unicode</db:code> into the string.</db:para>
<db:para>If <db:code role="parameter">unicode</db:code> is 0, nothing is copied, but the string is still resized to <db:code role="parameter">size</db:code>.</db:para>
<db:para>Note that unlike <db:link xlink:href="qstring.xml#fromUtf16">fromUtf16</db:link>(), this function does not consider BOMs and possibly differing byte ordering.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#utf16">utf16</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#setUnicode">setUnicode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shrink_to_fit">
<db:title>[since 5.10] void QString::shrink_to_fit()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>shrink_to_fit</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void shrink_to_fit()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is provided for STL compatibility. It is equivalent to <db:link xlink:href="qstring.xml#squeeze">squeeze</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#squeeze">squeeze</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="simplified">
<db:title>QString QString::simplified() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>simplified</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString simplified() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string that has whitespace removed from the start and the end, and that has each sequence of internal whitespace replaced with a single space.</db:para>
<db:para>Whitespace means any character for which <db:link xlink:href="qchar.xml#isSpace">QChar::isSpace</db:link>() returns <db:code>true</db:code>. This includes the ASCII characters '\t', '\n', '\v', '\f', '\r', and ' '.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str = &quot;  lots\t of\nwhitespace\r\n &quot;;
str = str.simplified();
// str == &quot;lots of whitespace&quot;;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#trimmed">trimmed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>qsizetype QString::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of characters in this string.</db:para>
<db:para>The last character in the string is at position size() - 1.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str = &quot;World&quot;;
qsizetype n = str.size();   // n == 5
str.data()[0];              // returns 'W'
str.data()[4];              // returns 'd'
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#resize">resize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliced">
<db:title>[since 6.0] QString QString::sliced(qsizetype <db:emphasis>pos</db:emphasis>, qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>sliced</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString sliced(qsizetype pos, qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string that contains <db:code role="parameter">n</db:code> characters of this string, starting at position <db:code role="parameter">pos</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">pos</db:code> &lt; 0, <db:code role="parameter">n</db:code> &lt; 0, or <db:code role="parameter">pos</db:code> + <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qstring.xml#size">size</db:link>().</db:para>
</db:note>
<db:programlisting language="cpp">QString x = &quot;Nine pineapples&quot;;
QString y = x.sliced(5, 4);            // y == &quot;pine&quot;
QString z = x.sliced(5);               // z == &quot;pineapples&quot;
</db:programlisting>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliced-1">
<db:title>[since 6.0] QString QString::sliced(qsizetype <db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>sliced</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString sliced(qsizetype pos) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a string that contains the portion of this string starting at position <db:code role="parameter">pos</db:code> and extending to its end.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">pos</db:code> &lt; 0 or <db:code role="parameter">pos</db:code> &gt; <db:link xlink:href="qstring.xml#size">size</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="split">
<db:title>[since 5.14] QStringList QString::split(const QString &amp;<db:emphasis>sep</db:emphasis>, Qt::SplitBehavior <db:emphasis>behavior</db:emphasis> = Qt::KeepEmptyParts, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>split</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>sep</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::SplitBehavior</db:type>
<db:parameter>behavior</db:parameter>
<db:initializer>Qt::KeepEmptyParts</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList split(const QString &amp;sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Splits the string into substrings wherever <db:code role="parameter">sep</db:code> occurs, and returns the list of those strings. If <db:code role="parameter">sep</db:code> does not match anywhere in the string, split() returns a single-element list containing this string.</db:para>
<db:para><db:code role="parameter">cs</db:code> specifies whether <db:code role="parameter">sep</db:code> should be matched case sensitively or case insensitively.</db:para>
<db:para>If <db:code role="parameter">behavior</db:code> is <db:link xlink:href="qt.xml#SplitBehaviorFlags-enum">Qt::SkipEmptyParts</db:link>, empty entries don't appear in the result. By default, empty entries are kept.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str = QStringLiteral(&quot;a,,b,c&quot;);

QStringList list1 = str.split(QLatin1Char(','));
// list1: [ &quot;a&quot;, &quot;&quot;, &quot;b&quot;, &quot;c&quot; ]

QStringList list2 = str.split(QLatin1Char(','), Qt::SkipEmptyParts);
// list2: [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ]
</db:programlisting>
<db:para>If <db:code role="parameter">sep</db:code> is empty, split() returns an empty string, followed by each of the string's characters, followed by another empty string:</db:para>
<db:programlisting language="cpp">QString str = &quot;abc&quot;;
auto parts = str.split(QString());
// parts: {&quot;&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;&quot;}
</db:programlisting>
<db:para>To understand this behavior, recall that the empty string matches everywhere, so the above is qualitatively the same as:</db:para>
<db:programlisting language="cpp">QString str = &quot;/a/b/c/&quot;;
auto parts = str.split(QLatin1Char('/'));
// parts: {&quot;&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;&quot;}
</db:programlisting>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#join">QStringList::join</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#section">section</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="split-1">
<db:title>[since 5.14] QStringList QString::split(QChar <db:emphasis>sep</db:emphasis>, Qt::SplitBehavior <db:emphasis>behavior</db:emphasis> = Qt::KeepEmptyParts, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>split</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>sep</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::SplitBehavior</db:type>
<db:parameter>behavior</db:parameter>
<db:initializer>Qt::KeepEmptyParts</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList split(QChar sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="split-2">
<db:title>[since 5.14] QStringList QString::split(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>, Qt::SplitBehavior <db:emphasis>behavior</db:emphasis> = Qt::KeepEmptyParts) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>split</db:methodname>
<db:methodparam>
<db:type>const QRegularExpression &amp;</db:type>
<db:parameter>re</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::SplitBehavior</db:type>
<db:parameter>behavior</db:parameter>
<db:initializer>Qt::KeepEmptyParts</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList split(const QRegularExpression &amp;re, Qt::SplitBehavior behavior) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Splits the string into substrings wherever the regular expression <db:code role="parameter">re</db:code> matches, and returns the list of those strings. If <db:code role="parameter">re</db:code> does not match anywhere in the string, <db:link xlink:href="qstring.xml#split">split</db:link>() returns a single-element list containing this string.</db:para>
<db:para>Here is an example where we extract the words in a sentence using one or more whitespace characters as the separator:</db:para>
<db:programlisting language="cpp">QString str;
QStringList list;

str = &quot;Some  text\n\twith  strange whitespace.&quot;;
list = str.split(QRegularExpression(&quot;\\s+&quot;));
// list: [ &quot;Some&quot;, &quot;text&quot;, &quot;with&quot;, &quot;strange&quot;, &quot;whitespace.&quot; ]
</db:programlisting>
<db:para>Here is a similar example, but this time we use any sequence of non-word characters as the separator:</db:para>
<db:programlisting language="cpp">str = &quot;This time, a normal English sentence.&quot;;
list = str.split(QRegularExpression(&quot;\\W+&quot;), Qt::SkipEmptyParts);
// list: [ &quot;This&quot;, &quot;time&quot;, &quot;a&quot;, &quot;normal&quot;, &quot;English&quot;, &quot;sentence&quot; ]
</db:programlisting>
<db:para>Here is a third example where we use a zero-length assertion, <db:emphasis role="bold">\b</db:emphasis> (word boundary), to split the string into an alternating sequence of non-word and word tokens:</db:para>
<db:programlisting language="cpp">str = &quot;Now: this sentence fragment.&quot;;
list = str.split(QRegularExpression(&quot;\\b&quot;));
// list: [ &quot;&quot;, &quot;Now&quot;, &quot;: &quot;, &quot;this&quot;, &quot; &quot;, &quot;sentence&quot;, &quot; &quot;, &quot;fragment&quot;, &quot;.&quot; ]
</db:programlisting>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#join">QStringList::join</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#section">section</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="squeeze">
<db:title>void QString::squeeze()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>squeeze</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void squeeze()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Releases any memory not required to store the character data.</db:para>
<db:para>The sole purpose of this function is to provide a means of fine tuning <db:link xlink:href="qstring.xml">QString</db:link>'s memory usage. In general, you will rarely ever need to call this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#reserve">reserve</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#capacity">capacity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startsWith">
<db:title>bool QString::startsWith(const QString &amp;<db:emphasis>s</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>startsWith</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool startsWith(const QString &amp;s, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the string starts with <db:code role="parameter">s</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:programlisting language="cpp">QString str = &quot;Bananas&quot;;
str.startsWith(&quot;Ban&quot;);     // returns true
str.startsWith(&quot;Car&quot;);     // returns false
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startsWith-1">
<db:title>[since 5.10] bool QString::startsWith(QStringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>startsWith</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool startsWith(QStringView str, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the string starts with the string view <db:code role="parameter">str</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case-sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startsWith-2">
<db:title>bool QString::startsWith(QLatin1String <db:emphasis>s</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>startsWith</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool startsWith(QLatin1String s, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#startsWith">startsWith</db:link>().</db:para>
</db:section>
<db:section xml:id="startsWith-3">
<db:title>bool QString::startsWith(QChar <db:emphasis>c</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>startsWith</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool startsWith(QChar c, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#startsWith">startsWith</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if the string starts with <db:code role="parameter">c</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>void QString::swap(QString &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QString &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QString &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps string <db:code role="parameter">other</db:code> with this string. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="toCFString">
<db:title>[since 5.2] CFStringRef QString::toCFString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>CFStringRef</db:type>
<db:methodname>toCFString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">CFStringRef toCFString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a CFString from a <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:para>The caller owns the CFString and is responsible for releasing it.</db:para>
<db:note>
<db:para>this function is only available on macOS and iOS.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="toCaseFolded">
<db:title>QString QString::toCaseFolded() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toCaseFolded</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toCaseFolded() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the case folded equivalent of the string. For most Unicode characters this is the same as <db:link xlink:href="qstring.xml#toLower">toLower</db:link>().</db:para>
</db:section>
<db:section xml:id="toDouble">
<db:title>double QString::toDouble(bool *<db:emphasis>ok</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>double</db:type>
<db:methodname>toDouble</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">double toDouble(bool *ok) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the string converted to a <db:code>double</db:code> value.</db:para>
<db:para>Returns an infinity if the conversion overflows or 0.0 if the conversion fails for other reasons (e.g. underflow).</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:programlisting language="cpp">QString str = &quot;1234.56&quot;;
double val = str.toDouble();   // val == 1234.56
</db:programlisting>
<db:warning>
<db:para>The <db:link xlink:href="qstring.xml">QString</db:link> content may only contain valid numerical characters which includes the plus/minus sign, the character e used in scientific notation, and the decimal point. Including the unit or additional characters leads to a conversion error.</db:para>
</db:warning>
<db:programlisting language="cpp">bool ok;
double d;

d = QString( &quot;1234.56e-02&quot; ).toDouble(&amp;amp;ok); // ok == true, d == 12.3456

d = QString( &quot;1234.56e-02 Volt&quot; ).toDouble(&amp;amp;ok); // ok == false, d == 0
</db:programlisting>
<db:para>The string conversion will always happen in the 'C' locale. For locale-dependent conversion use <db:link xlink:href="qlocale.xml#toDouble">QLocale::toDouble</db:link>()</db:para>
<db:programlisting language="cpp">d = QString( &quot;1234,56&quot; ).toDouble(&amp;amp;ok); // ok == false
d = QString( &quot;1234.56&quot; ).toDouble(&amp;amp;ok); // ok == true, d == 1234.56
</db:programlisting>
<db:para>For historical reasons, this function does not handle thousands group separators. If you need to convert such numbers, use <db:link xlink:href="qlocale.xml#toDouble">QLocale::toDouble</db:link>().</db:para>
<db:programlisting language="cpp">d = QString( &quot;1,234,567.89&quot; ).toDouble(&amp;amp;ok); // ok == false
d = QString( &quot;1234567.89&quot; ).toDouble(&amp;amp;ok); // ok == true
</db:programlisting>
<db:para>This function ignores leading and trailing whitespace.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#number">number</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#setDefault">QLocale::setDefault</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toDouble">QLocale::toDouble</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#trimmed">trimmed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toFloat">
<db:title>float QString::toFloat(bool *<db:emphasis>ok</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>toFloat</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float toFloat(bool *ok) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the string converted to a <db:code>float</db:code> value.</db:para>
<db:para>Returns an infinity if the conversion overflows or 0.0 if the conversion fails for other reasons (e.g. underflow).</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:warning>
<db:para>The <db:link xlink:href="qstring.xml">QString</db:link> content may only contain valid numerical characters which includes the plus/minus sign, the character e used in scientific notation, and the decimal point. Including the unit or additional characters leads to a conversion error.</db:para>
</db:warning>
<db:para>The string conversion will always happen in the 'C' locale. For locale-dependent conversion use <db:link xlink:href="qlocale.xml#toFloat">QLocale::toFloat</db:link>()</db:para>
<db:para>For historical reasons, this function does not handle thousands group separators. If you need to convert such numbers, use <db:link xlink:href="qlocale.xml#toFloat">QLocale::toFloat</db:link>().</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str1 = &quot;1234.56&quot;;
str1.toFloat();             // returns 1234.56

bool ok;
QString str2 = &quot;R2D2&quot;;
str2.toFloat(&amp;amp;ok);          // returns 0.0, sets ok to false

QString str3 = &quot;1234.56 Volt&quot;;
str3.toFloat(&amp;amp;ok);          // returns 0.0, sets ok to false
</db:programlisting>
<db:para>This function ignores leading and trailing whitespace.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#number">number</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toDouble">toDouble</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toInt">toInt</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toFloat">QLocale::toFloat</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#trimmed">trimmed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toHtmlEscaped">
<db:title>[since 5.0] QString QString::toHtmlEscaped() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toHtmlEscaped</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toHtmlEscaped() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts a plain text string to an HTML string with HTML metacharacters <db:code>&lt;</db:code>, <db:code>&gt;</db:code>, <db:code>&amp;</db:code>, and <db:code>&quot;</db:code> replaced by HTML entities.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString plain = &quot;#include &amp;lt;QtCore&amp;gt;&quot;
QString html = plain.toHtmlEscaped();
// html == &quot;#include &amp;amp;lt;QtCore&amp;amp;gt;&quot;
</db:programlisting>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="toInt">
<db:title>int QString::toInt(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>toInt</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int toInt(bool *ok, int base) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the string converted to an <db:code>int</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale-dependent conversion use <db:link xlink:href="qlocale.xml#toInt">QLocale::toInt</db:link>()</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str = &quot;FF&quot;;
bool ok;
int hex = str.toInt(&amp;amp;ok, 16);       // hex == 255, ok == true
int dec = str.toInt(&amp;amp;ok, 10);       // dec == 0, ok == false
</db:programlisting>
<db:para>This function ignores leading and trailing whitespace.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#number">number</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toUInt">toUInt</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toDouble">toDouble</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toInt">QLocale::toInt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLatin1">
<db:title>QByteArray QString::toLatin1() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>toLatin1</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray toLatin1() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a Latin-1 representation of the string as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>The returned byte array is undefined if the string contains non-Latin1 characters. Those characters may be suppressed or replaced with a question mark.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#fromLatin1">fromLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toUtf8">toUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toLocal8Bit">toLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qstringencoder.xml">QStringEncoder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLocal8Bit">
<db:title>QByteArray QString::toLocal8Bit() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>toLocal8Bit</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray toLocal8Bit() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the local 8-bit representation of the string as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>. The returned byte array is undefined if the string contains characters not supported by the local 8-bit encoding.</db:para>
<db:para>On Unix systems this is equivalen to <db:link xlink:href="qstring.xml#toUtf8">toUtf8</db:link>(), on Windows the systems current code page is being used.</db:para>
<db:para>If this string contains any characters that cannot be encoded in the locale, the returned byte array is undefined. Those characters may be suppressed or replaced by another.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#fromLocal8Bit">fromLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toLatin1">toLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toUtf8">toUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qstringencoder.xml">QStringEncoder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLong">
<db:title>long QString::toLong(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>long</db:type>
<db:methodname>toLong</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">long toLong(bool *ok, int base) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the string converted to a <db:code>long</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale-dependent conversion use <db:link xlink:href="qlocale.xml#toLongLong">QLocale::toLongLong</db:link>()</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str = &quot;FF&quot;;
bool ok;

long hex = str.toLong(&amp;amp;ok, 16);     // hex == 255, ok == true
long dec = str.toLong(&amp;amp;ok, 10);     // dec == 0, ok == false
</db:programlisting>
<db:para>This function ignores leading and trailing whitespace.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#number">number</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toULong">toULong</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toInt">toInt</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toInt">QLocale::toInt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLongLong">
<db:title>qlonglong QString::toLongLong(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qlonglong</db:type>
<db:methodname>toLongLong</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qlonglong toLongLong(bool *ok, int base) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the string converted to a <db:code>long long</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale-dependent conversion use <db:link xlink:href="qlocale.xml#toLongLong">QLocale::toLongLong</db:link>()</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str = &quot;FF&quot;;
bool ok;

qint64 hex = str.toLongLong(&amp;amp;ok, 16);      // hex == 255, ok == true
qint64 dec = str.toLongLong(&amp;amp;ok, 10);      // dec == 0, ok == false
</db:programlisting>
<db:para>This function ignores leading and trailing whitespace.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#number">number</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toULongLong">toULongLong</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toInt">toInt</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toLongLong">QLocale::toLongLong</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLower">
<db:title>QString QString::toLower() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toLower</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toLower() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a lowercase copy of the string.</db:para>
<db:programlisting language="cpp">QString str = &quot;The Qt PROJECT&quot;;
str = str.toLower();        // str == &quot;the qt project&quot;
</db:programlisting>
<db:para>The case conversion will always happen in the 'C' locale. For locale-dependent case folding use <db:link xlink:href="qlocale.xml#toLower">QLocale::toLower</db:link>()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toUpper">toUpper</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toLower">QLocale::toLower</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toNSString">
<db:title>[since 5.2] NSString *QString::toNSString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>NSString *</db:type>
<db:methodname>toNSString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">NSString * toNSString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a NSString from a <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:para>The NSString is autoreleased.</db:para>
<db:note>
<db:para>this function is only available on macOS and iOS.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="toShort">
<db:title>short QString::toShort(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>short</db:type>
<db:methodname>toShort</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">short toShort(bool *ok, int base) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the string converted to a <db:code>short</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale-dependent conversion use <db:link xlink:href="qlocale.xml#toShort">QLocale::toShort</db:link>()</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str = &quot;FF&quot;;
bool ok;

short hex = str.toShort(&amp;amp;ok, 16);   // hex == 255, ok == true
short dec = str.toShort(&amp;amp;ok, 10);   // dec == 0, ok == false
</db:programlisting>
<db:para>This function ignores leading and trailing whitespace.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#number">number</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toUShort">toUShort</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toInt">toInt</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toShort">QLocale::toShort</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toStdString">
<db:title>std::string QString::toStdString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>std::string</db:type>
<db:methodname>toStdString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::string toStdString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a std::string object with the data contained in this <db:link xlink:href="qstring.xml">QString</db:link>. The Unicode data is converted into 8-bit characters using the <db:link xlink:href="qstring.xml#toUtf8">toUtf8</db:link>() function.</db:para>
<db:para>This method is mostly useful to pass a <db:link xlink:href="qstring.xml">QString</db:link> to a function that accepts a std::string object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toLatin1">toLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toUtf8">toUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toLocal8Bit">toLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearray.xml#toStdString">QByteArray::toStdString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toStdU16String">
<db:title>[since 5.5] std::u16string QString::toStdU16String() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>std::u16string</db:type>
<db:methodname>toStdU16String</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::u16string toStdU16String() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a std::u16string object with the data contained in this <db:link xlink:href="qstring.xml">QString</db:link>. The Unicode data is the same as returned by the <db:link xlink:href="qstring.xml#utf16">utf16</db:link>() method.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#utf16">utf16</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toStdWString">toStdWString</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toStdU32String">toStdU32String</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toStdU32String">
<db:title>[since 5.5] std::u32string QString::toStdU32String() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>std::u32string</db:type>
<db:methodname>toStdU32String</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::u32string toStdU32String() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a std::u32string object with the data contained in this <db:link xlink:href="qstring.xml">QString</db:link>. The Unicode data is the same as returned by the <db:link xlink:href="qstring.xml#toUcs4">toUcs4</db:link>() method.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toUcs4">toUcs4</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toStdWString">toStdWString</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toStdU16String">toStdU16String</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toStdWString">
<db:title>std::wstring QString::toStdWString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>std::wstring</db:type>
<db:methodname>toStdWString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::wstring toStdWString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a std::wstring object with the data contained in this <db:link xlink:href="qstring.xml">QString</db:link>. The std::wstring is encoded in utf16 on platforms where wchar_t is 2 bytes wide (e.g. windows) and in ucs4 on platforms where wchar_t is 4 bytes wide (most Unix systems).</db:para>
<db:para>This method is mostly useful to pass a <db:link xlink:href="qstring.xml">QString</db:link> to a function that accepts a std::wstring object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#utf16">utf16</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toLatin1">toLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toUtf8">toUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toLocal8Bit">toLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toStdU16String">toStdU16String</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toStdU32String">toStdU32String</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUInt">
<db:title>uint QString::toUInt(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>uint</db:type>
<db:methodname>toUInt</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint toUInt(bool *ok, int base) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the string converted to an <db:code>unsigned int</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale-dependent conversion use <db:link xlink:href="qlocale.xml#toUInt">QLocale::toUInt</db:link>()</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str = &quot;FF&quot;;
bool ok;

uint hex = str.toUInt(&amp;amp;ok, 16);     // hex == 255, ok == true
uint dec = str.toUInt(&amp;amp;ok, 10);     // dec == 0, ok == false
</db:programlisting>
<db:para>This function ignores leading and trailing whitespace.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#number">number</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toInt">toInt</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toUInt">QLocale::toUInt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toULong">
<db:title>ulong QString::toULong(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>ulong</db:type>
<db:methodname>toULong</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">ulong toULong(bool *ok, int base) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the string converted to an <db:code>unsigned long</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale-dependent conversion use <db:link xlink:href="qlocale.xml#toULongLong">QLocale::toULongLong</db:link>()</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str = &quot;FF&quot;;
bool ok;

ulong hex = str.toULong(&amp;amp;ok, 16);   // hex == 255, ok == true
ulong dec = str.toULong(&amp;amp;ok, 10);   // dec == 0, ok == false
</db:programlisting>
<db:para>This function ignores leading and trailing whitespace.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#number">number</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toUInt">QLocale::toUInt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toULongLong">
<db:title>qulonglong QString::toULongLong(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qulonglong</db:type>
<db:methodname>toULongLong</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qulonglong toULongLong(bool *ok, int base) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the string converted to an <db:code>unsigned long long</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale-dependent conversion use <db:link xlink:href="qlocale.xml#toULongLong">QLocale::toULongLong</db:link>()</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str = &quot;FF&quot;;
bool ok;

quint64 hex = str.toULongLong(&amp;amp;ok, 16);    // hex == 255, ok == true
quint64 dec = str.toULongLong(&amp;amp;ok, 10);    // dec == 0, ok == false
</db:programlisting>
<db:para>This function ignores leading and trailing whitespace.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#number">number</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toLongLong">toLongLong</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toULongLong">QLocale::toULongLong</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUShort">
<db:title>ushort QString::toUShort(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>ushort</db:type>
<db:methodname>toUShort</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">ushort toUShort(bool *ok, int base) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the string converted to an <db:code>unsigned short</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale-dependent conversion use <db:link xlink:href="qlocale.xml#toUShort">QLocale::toUShort</db:link>()</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str = &quot;FF&quot;;
bool ok;

ushort hex = str.toUShort(&amp;amp;ok, 16);     // hex == 255, ok == true
ushort dec = str.toUShort(&amp;amp;ok, 10);     // dec == 0, ok == false
</db:programlisting>
<db:para>This function ignores leading and trailing whitespace.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#number">number</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toShort">toShort</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toUShort">QLocale::toUShort</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUcs4">
<db:title>QList&lt;uint&gt; QString::toUcs4() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;uint&gt;</db:type>
<db:methodname>toUcs4</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;uint&gt; toUcs4() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a UCS-4/UTF-32 representation of the string as a <db:link xlink:href="qlist.xml">QList</db:link>&lt;uint&gt;.</db:para>
<db:para>UCS-4 is a Unicode codec and therefore it is lossless. All characters from this string will be encoded in UCS-4. Any invalid sequence of code units in this string is replaced by the Unicode's replacement character (<db:link xlink:href="qchar.xml#SpecialCharacter-enum">QChar::ReplacementCharacter</db:link>, which corresponds to <db:code>U+FFFD</db:code>).</db:para>
<db:para>The returned list is not \0'-terminated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toUtf8">toUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toLatin1">toLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toLocal8Bit">toLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qstringencoder.xml">QStringEncoder</db:link></db:member>
<db:member><db:link xlink:href="qstring.xml#fromUcs4">fromUcs4</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toWCharArray">toWCharArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUpper">
<db:title>QString QString::toUpper() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toUpper</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toUpper() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an uppercase copy of the string.</db:para>
<db:programlisting language="cpp">QString str = &quot;TeXt&quot;;
str = str.toUpper();        // str == &quot;TEXT&quot;
</db:programlisting>
<db:para>The case conversion will always happen in the 'C' locale. For locale-dependent case folding use <db:link xlink:href="qlocale.xml#toUpper">QLocale::toUpper</db:link>()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toLower">toLower</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toLower">QLocale::toLower</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUtf8">
<db:title>QByteArray QString::toUtf8() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>toUtf8</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray toUtf8() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a UTF-8 representation of the string as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>UTF-8 is a Unicode codec and can represent all characters in a Unicode string like <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toLatin1">toLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toLocal8Bit">toLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qstringencoder.xml">QStringEncoder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toWCharArray">
<db:title>qsizetype QString::toWCharArray(wchar_t *<db:emphasis>array</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>toWCharArray</db:methodname>
<db:methodparam>
<db:type>wchar_t *</db:type>
<db:parameter>array</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype toWCharArray(wchar_t *array) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Fills the <db:code role="parameter">array</db:code> with the data contained in this <db:link xlink:href="qstring.xml">QString</db:link> object. The array is encoded in UTF-16 on platforms where wchar_t is 2 bytes wide (e.g. windows) and in UCS-4 on platforms where wchar_t is 4 bytes wide (most Unix systems).</db:para>
<db:para><db:code role="parameter">array</db:code> has to be allocated by the caller and contain enough space to hold the complete string (allocating the array with the same length as the string is always sufficient).</db:para>
<db:para>This function returns the actual length of the string in <db:code role="parameter">array</db:code>.</db:para>
<db:note>
<db:para>This function does not append a null character to the array.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#utf16">utf16</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toUcs4">toUcs4</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toLatin1">toLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toUtf8">toUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toLocal8Bit">toLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#toStdWString">toStdWString</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#toWCharArray">QStringView::toWCharArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="trimmed">
<db:title>QString QString::trimmed() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>trimmed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString trimmed() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string that has whitespace removed from the start and the end.</db:para>
<db:para>Whitespace means any character for which <db:link xlink:href="qchar.xml#isSpace">QChar::isSpace</db:link>() returns <db:code>true</db:code>. This includes the ASCII characters '\t', '\n', '\v', '\f', '\r', and ' '.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str = &quot;  lots\t of\nwhitespace\r\n &quot;;
str = str.trimmed();
// str == &quot;lots\t of\nwhitespace&quot;
</db:programlisting>
<db:para>Unlike <db:link xlink:href="qstring.xml#simplified">simplified</db:link>(), trimmed() leaves internal whitespace alone.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#simplified">simplified</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="truncate">
<db:title>void QString::truncate(qsizetype <db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>truncate</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void truncate(qsizetype position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Truncates the string at the given <db:code role="parameter">position</db:code> index.</db:para>
<db:para>If the specified <db:code role="parameter">position</db:code> index is beyond the end of the string, nothing happens.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str = &quot;Vladivostok&quot;;
str.truncate(4);
// str == &quot;Vlad&quot;
</db:programlisting>
<db:para>If <db:code role="parameter">position</db:code> is negative, it is equivalent to passing zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#resize">resize</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qstringview.xml#truncate">QStringView::truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unicode">
<db:title>const QChar *QString::unicode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QChar *</db:type>
<db:methodname>unicode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QChar * unicode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a Unicode representation of the string. The result remains valid until the string is modified.</db:para>
<db:note>
<db:para>The returned string may not be '\0'-terminated. Use <db:link xlink:href="qstring.xml#size">size</db:link>() to determine the length of the array.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#setUnicode">setUnicode</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#utf16">utf16</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#fromRawData">fromRawData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="utf16">
<db:title>const ushort *QString::utf16() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const ushort *</db:type>
<db:methodname>utf16</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const ushort * utf16() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qstring.xml">QString</db:link> as a '\0'-terminated array of unsigned shorts. The result remains valid until the string is modified.</db:para>
<db:para>The returned string is in host byte order.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#setUtf16">setUtf16</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#unicode">unicode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="vasprintf">
<db:title>[static, since 5.5] QString QString::vasprintf(const char *<db:emphasis>cformat</db:emphasis>, va_list <db:emphasis>ap</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>vasprintf</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>cformat</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>va_list</db:type>
<db:parameter>ap</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString vasprintf(const char *cformat, va_list ap)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Equivalent method to <db:link xlink:href="qstring.xml#asprintf">asprintf</db:link>(), but takes a va_list <db:code role="parameter">ap</db:code> instead a list of variable arguments. See the <db:link xlink:href="qstring.xml#asprintf">asprintf</db:link>() documentation for an explanation of <db:code role="parameter">cformat</db:code>.</db:para>
<db:para>This method does not call the va_end macro, the caller is responsible to call va_end on <db:code role="parameter">ap</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#asprintf">asprintf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq-9">
<db:title>bool QString::operator!=(const char *<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const char *other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-not-eq">operator!=</db:link>().</db:para>
<db:para>The <db:code role="parameter">other</db:code> const char pointer is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-10">
<db:title>bool QString::operator!=(const QByteArray &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QByteArray &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-not-eq">operator!=</db:link>().</db:para>
<db:para>The <db:code role="parameter">other</db:code> byte array is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function. If any NUL characters ('\0') are embedded in the byte array, they will be included in the transformation.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>QString &amp;QString::operator+=(const QString &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>operator+=</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; operator+=(const QString &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends the string <db:code role="parameter">other</db:code> onto the end of this string and returns a reference to this string.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString x = &quot;free&quot;;
QString y = &quot;dom&quot;;
x += y;
// x == &quot;freedom&quot;
</db:programlisting>
<db:para>This operation is typically very fast (<db:link xlink:href="containers.xml#constant-time">constant time</db:link>), because <db:link xlink:href="qstring.xml">QString</db:link> preallocates extra space at the end of the string data so it can grow without reallocating the entire string each time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#prepend">prepend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-eq-1">
<db:title>QString &amp;QString::operator+=(QChar <db:emphasis>ch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>operator+=</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; operator+=(QChar ch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-2b-eq">operator+=</db:link>().</db:para>
<db:para>Appends the character <db:code role="parameter">ch</db:code> to the string.</db:para>
</db:section>
<db:section xml:id="operator-2b-eq-2">
<db:title>[since 6.0] QString &amp;QString::operator+=(QStringView <db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>operator+=</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; operator+=(QStringView str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-2b-eq">operator+=</db:link>().</db:para>
<db:para>Appends the string view <db:code role="parameter">str</db:code> to this string.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="operator-2b-eq-3">
<db:title>QString &amp;QString::operator+=(QLatin1String <db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>operator+=</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; operator+=(QLatin1String str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-2b-eq">operator+=</db:link>().</db:para>
<db:para>Appends the Latin-1 string <db:code role="parameter">str</db:code> to this string.</db:para>
</db:section>
<db:section xml:id="operator-2b-eq-4">
<db:title>QString &amp;QString::operator+=(const char *<db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>operator+=</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; operator+=(const char *str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-2b-eq">operator+=</db:link>().</db:para>
<db:para>Appends the string <db:code role="parameter">str</db:code> to this string. The const char pointer is converted to Unicode using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this function by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
</db:section>
<db:section xml:id="operator-2b-eq-5">
<db:title>QString &amp;QString::operator+=(const QByteArray &amp;<db:emphasis>ba</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>operator+=</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>ba</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; operator+=(const QByteArray &amp;ba)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-2b-eq">operator+=</db:link>().</db:para>
<db:para>Appends the byte array <db:code role="parameter">ba</db:code> to this string. The byte array is converted to Unicode using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function. If any NUL characters ('\0') are embedded in the <db:code role="parameter">ba</db:code> byte array, they will be included in the transformation.</db:para>
<db:para>You can disable this function by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
</db:section>
<db:section xml:id="operator-lt-9">
<db:title>bool QString::operator&lt;(const char *<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(const char *other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this string is lexically less than string <db:code role="parameter">other</db:code>. Otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-lt-1">operator&lt;</db:link>().</db:para>
<db:para>The <db:code role="parameter">other</db:code> const char pointer is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
</db:section>
<db:section xml:id="operator-lt-10">
<db:title>bool QString::operator&lt;(const QByteArray &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(const QByteArray &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-lt-1">operator&lt;</db:link>().</db:para>
<db:para>The <db:code role="parameter">other</db:code> byte array is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function. If any NUL characters ('\0') are embedded in the byte array, they will be included in the transformation.</db:para>
<db:para>You can disable this operator <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq-9">
<db:title>bool QString::operator&lt;=(const char *<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(const char *other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-lt-eq">operator&lt;=</db:link>().</db:para>
<db:para>The <db:code role="parameter">other</db:code> const char pointer is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq-10">
<db:title>bool QString::operator&lt;=(const QByteArray &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(const QByteArray &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-lt-eq">operator&lt;=</db:link>().</db:para>
<db:para>The <db:code role="parameter">other</db:code> byte array is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function. If any NUL characters ('\0') are embedded in the byte array, they will be included in the transformation.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QString &amp;QString::operator=(const QString &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; operator=(const QString &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this string and returns a reference to this string.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QString &amp;QString::operator=(QChar <db:emphasis>ch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; operator=(QChar ch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-eq">operator=</db:link>().</db:para>
<db:para>Sets the string to contain the single character <db:code role="parameter">ch</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-2">
<db:title>QString &amp;QString::operator=(QLatin1String <db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; operator=(QLatin1String str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-eq">operator=</db:link>().</db:para>
<db:para>Assigns the Latin-1 string <db:code role="parameter">str</db:code> to this string.</db:para>
</db:section>
<db:section xml:id="operator-eq-3">
<db:title>[since 5.2] QString &amp;QString::operator=(QString &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QString &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; operator=(QString &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qstring.xml">QString</db:link> instance.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="operator-eq-4">
<db:title>QString &amp;QString::operator=(const char *<db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; operator=(const char *str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-eq">operator=</db:link>().</db:para>
<db:para>Assigns <db:code role="parameter">str</db:code> to this string. The const char pointer is converted to Unicode using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> or <db:link xlink:href="qstring.xml#QT_RESTRICTED_CAST_FROM_ASCII">QT_RESTRICTED_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
</db:section>
<db:section xml:id="operator-eq-5">
<db:title>QString &amp;QString::operator=(const QByteArray &amp;<db:emphasis>ba</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>ba</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QString &amp; operator=(const QByteArray &amp;ba)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-eq">operator=</db:link>().</db:para>
<db:para>Assigns <db:code role="parameter">ba</db:code> to this string. The byte array is converted to Unicode using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function. This function stops conversion at the first NUL character found, or the end of the <db:code role="parameter">ba</db:code> byte array.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-9">
<db:title>bool QString::operator==(const char *<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const char *other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-eq-eq-1">operator==</db:link>().</db:para>
<db:para>The <db:code role="parameter">other</db:code> const char pointer is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-10">
<db:title>bool QString::operator==(const QByteArray &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QByteArray &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-eq-eq-1">operator==</db:link>().</db:para>
<db:para>The <db:code role="parameter">other</db:code> byte array is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function. This function stops conversion at the first NUL character found, or the end of the byte array.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
<db:para>Returns <db:code>true</db:code> if this string is lexically equal to the parameter string <db:code role="parameter">other</db:code>. Otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-9">
<db:title>bool QString::operator&gt;(const char *<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(const char *other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-gt">operator&gt;</db:link>().</db:para>
<db:para>The <db:code role="parameter">other</db:code> const char pointer is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
</db:section>
<db:section xml:id="operator-gt-10">
<db:title>bool QString::operator&gt;(const QByteArray &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(const QByteArray &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-gt">operator&gt;</db:link>().</db:para>
<db:para>The <db:code role="parameter">other</db:code> byte array is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function. If any NUL characters ('\0') are embedded in the byte array, they will be included in the transformation.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq-9">
<db:title>bool QString::operator&gt;=(const char *<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(const char *other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-gt-eq">operator&gt;=</db:link>().</db:para>
<db:para>The <db:code role="parameter">other</db:code> const char pointer is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq-10">
<db:title>bool QString::operator&gt;=(const QByteArray &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(const QByteArray &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-gt-eq">operator&gt;=</db:link>().</db:para>
<db:para>The <db:code role="parameter">other</db:code> byte array is converted to a <db:link xlink:href="qstring.xml">QString</db:link> using the <db:link xlink:href="qstring.xml#fromUtf8">fromUtf8</db:link>() function. If any NUL characters ('\0') are embedded in the byte array, they will be included in the transformation.</db:para>
<db:para>You can disable this operator by defining <db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), for example.</db:para>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>QChar &amp;QString::operator[](qsizetype <db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QChar &amp;</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QChar &amp; operator[](qsizetype position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the character at the specified <db:code role="parameter">position</db:code> in the string as a modifiable reference.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString str;

if (str[0] == QChar('?'))
    str[0] = QChar('_');
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#at">at</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5b-5d-1">
<db:title>const QChar QString::operator[](qsizetype <db:emphasis>position</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QChar</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const QChar operator[](qsizetype position) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-5b-5d">operator[]</db:link>().</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QString &amp;<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QString &amp;s1, const QString &amp;s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s1</db:code> is not equal to string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq-1">
<db:title>bool operator!=(const QString &amp;<db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QString &amp;s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s1</db:code> is not equal to string <db:code role="parameter">s2</db:code>. Otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-not-eq">operator!=</db:link>().</db:para>
</db:section>
<db:section xml:id="operator-not-eq-11">
<db:title>bool operator!=(const char *<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">11</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const char *s1, const QString &amp;s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">s1</db:code> is not equal to <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>For <db:code role="parameter">s1</db:code> != 0, this is equivalent to <db:code>compare(</db:code> <db:code role="parameter">s1</db:code>, <db:code role="parameter">s2</db:code> <db:code>) != 0</db:code>. Note that no string is equal to <db:code role="parameter">s1</db:code> being 0.</db:para>
</db:section>
<db:section xml:id="operator-2b">
<db:title>const QString operator+(const QString &amp;<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>const QString</db:type>
<db:methodname>operator+</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QString operator+(const QString &amp;s1, const QString &amp;s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string which is the result of concatenating <db:code role="parameter">s1</db:code> and <db:code role="parameter">s2</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2b-1">
<db:title>const QString operator+(const QString &amp;<db:emphasis>s1</db:emphasis>, const char *<db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>const QString</db:type>
<db:methodname>operator+</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const QString operator+(const QString &amp;s1, const char *s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string which is the result of concatenating <db:code role="parameter">s1</db:code> and <db:code role="parameter">s2</db:code> (<db:code role="parameter">s2</db:code> is converted to Unicode using the <db:link xlink:href="qstring.xml#fromUtf8">QString::fromUtf8</db:link>() function).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#fromUtf8">QString::fromUtf8</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2">
<db:title>const QString operator+(const char *<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>const QString</db:type>
<db:methodname>operator+</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">const QString operator+(const char *s1, const QString &amp;s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string which is the result of concatenating <db:code role="parameter">s1</db:code> and <db:code role="parameter">s2</db:code> (<db:code role="parameter">s1</db:code> is converted to Unicode using the <db:link xlink:href="qstring.xml#fromUtf8">QString::fromUtf8</db:link>() function).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#fromUtf8">QString::fromUtf8</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-1">
<db:title>bool operator&lt;(const QString &amp;<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(const QString &amp;s1, const QString &amp;s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads operator&lt;().</db:para>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s1</db:code> is lexically less than string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-2">
<db:title>bool operator&lt;(const QString &amp;<db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(const QString &amp;s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-lt-1">operator&lt;</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">s1</db:code> is lexically less than <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-3">
<db:title>bool operator&lt;(QLatin1String <db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(QLatin1String s1, const QString &amp;s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-lt-1">operator&lt;</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">s1</db:code> is lexically less than <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-11">
<db:title>bool operator&lt;(const char *<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">11</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(const char *s1, const QString &amp;s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">s1</db:code> is lexically less than <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>. For <db:code role="parameter">s1</db:code> != 0, this is equivalent to <db:code>compare(s1, s2) &lt; 0</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QString &amp;<db:emphasis>string</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QString &amp;string)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the given <db:code role="parameter">string</db:code> to the specified <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-eq">
<db:title>bool operator&lt;=(const QString &amp;<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(const QString &amp;s1, const QString &amp;s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s1</db:code> is lexically less than or equal to string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-eq-1">
<db:title>bool operator&lt;=(const QString &amp;<db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(const QString &amp;s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-lt-eq">operator&lt;=</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">s1</db:code> is lexically less than or equal to <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq-2">
<db:title>bool operator&lt;=(QLatin1String <db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(QLatin1String s1, const QString &amp;s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-lt-eq">operator&lt;=</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">s1</db:code> is lexically less than or equal to <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq-11">
<db:title>bool operator&lt;=(const char *<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">11</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(const char *s1, const QString &amp;s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">s1</db:code> is lexically less than or equal to <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>. For <db:code role="parameter">s1</db:code> != 0, this is equivalent to <db:code>compare(s1, s2) &lt;= 0</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq-1">
<db:title>bool operator==(const QString &amp;<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QString &amp;s1, const QString &amp;s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads operator==().</db:para>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s1</db:code> is equal to string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq-2">
<db:title>bool operator==(const QString &amp;<db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QString &amp;s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-eq-eq-1">operator==</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">s1</db:code> is equal to <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-3">
<db:title>bool operator==(QLatin1String <db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(QLatin1String s1, const QString &amp;s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-eq-eq-1">operator==</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">s1</db:code> is equal to <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-11">
<db:title>bool operator==(const char *<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">11</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const char *s1, const QString &amp;s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-eq-eq-1">operator==</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">s1</db:code> is equal to <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>. Note that no string is equal to <db:code role="parameter">s1</db:code> being 0.</db:para>
<db:para>Equivalent to <db:code>s1 != 0 &amp;&amp; compare(s1, s2) == 0</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt">
<db:title>bool operator&gt;(const QString &amp;<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(const QString &amp;s1, const QString &amp;s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s1</db:code> is lexically greater than string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-1">
<db:title>bool operator&gt;(const QString &amp;<db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(const QString &amp;s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-gt">operator&gt;</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">s1</db:code> is lexically greater than <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-2">
<db:title>bool operator&gt;(QLatin1String <db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(QLatin1String s1, const QString &amp;s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-gt">operator&gt;</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">s1</db:code> is lexically greater than <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-11">
<db:title>bool operator&gt;(const char *<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">11</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(const char *s1, const QString &amp;s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">s1</db:code> is lexically greater than <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>. Equivalent to <db:code>compare(s1, s2) &gt; 0</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-eq">
<db:title>bool operator&gt;=(const QString &amp;<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(const QString &amp;s1, const QString &amp;s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s1</db:code> is lexically greater than or equal to string <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-eq-1">
<db:title>bool operator&gt;=(const QString &amp;<db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(const QString &amp;s1, QLatin1String s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-gt-eq">operator&gt;=</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">s1</db:code> is lexically greater than or equal to <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq-2">
<db:title>bool operator&gt;=(QLatin1String <db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(QLatin1String s1, const QString &amp;s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstring.xml#operator-gt-eq">operator&gt;=</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">s1</db:code> is lexically greater than or equal to <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq-11">
<db:title>bool operator&gt;=(const char *<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>s1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">11</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(const char *s1, const QString &amp;s2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">s1</db:code> is lexically greater than or equal to <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>. For <db:code role="parameter">s1</db:code> != 0, this is equivalent to <db:code>compare(s1, s2) &gt;= 0</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#comparing-strings">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QString &amp;<db:emphasis>string</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QString &amp;</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QString &amp;string)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a string from the specified <db:code role="parameter">stream</db:code> into the given <db:code role="parameter">string</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QStringLiteral">
<db:title>QStringLiteral(<db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>QStringLiteral</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringLiteral(str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The macro generates the data for a <db:link xlink:href="qstring.xml">QString</db:link> out of the string literal <db:code role="parameter">str</db:code> at compile time. Creating a <db:link xlink:href="qstring.xml">QString</db:link> from it is free in this case, and the generated string data is stored in the read-only segment of the compiled object file.</db:para>
<db:para>If you have code that looks like this:</db:para>
<db:programlisting language="cpp">// hasAttribute takes a QString argument
if (node.hasAttribute(&quot;http-contents-length&quot;)) //...
</db:programlisting>
<db:para>then a temporary <db:link xlink:href="qstring.xml">QString</db:link> will be created to be passed as the <db:code>hasAttribute</db:code> function parameter. This can be quite expensive, as it involves a memory allocation and the copy/conversion of the data into <db:link xlink:href="qstring.xml">QString</db:link>'s internal encoding.</db:para>
<db:para>This cost can be avoided by using QStringLiteral instead:</db:para>
<db:programlisting language="cpp">if (node.hasAttribute(QStringLiteral(u&quot;http-contents-length&quot;))) //...
</db:programlisting>
<db:para>In this case, <db:link xlink:href="qstring.xml">QString</db:link>'s internal data will be generated at compile time; no conversion or allocation will occur at runtime.</db:para>
<db:para>Using QStringLiteral instead of a double quoted plain C++ string literal can significantly speed up creation of <db:link xlink:href="qstring.xml">QString</db:link> instances from data known at compile time.</db:para>
<db:note>
<db:para><db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> can still be more efficient than QStringLiteral when the string is passed to a function that has an overload taking <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> and this overload avoids conversion to <db:link xlink:href="qstring.xml">QString</db:link>. For instance, QString::operator==() can compare to a <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> directly:</db:para>
</db:note>
<db:programlisting language="cpp">if (attribute.name() == QLatin1String(&quot;http-contents-length&quot;)) //...
</db:programlisting>
<db:note>
<db:para>Some compilers have bugs encoding strings containing characters outside the US-ASCII character set. Make sure you prefix your string with <db:code>u</db:code> in those cases. It is optional otherwise.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearray.xml#QByteArrayLiteral">QByteArrayLiteral</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QT_NO_CAST_FROM_ASCII">
<db:title>QT_NO_CAST_FROM_ASCII</db:title>
<db:methodsynopsis>
<db:methodname>QT_NO_CAST_FROM_ASCII</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QT_NO_CAST_FROM_ASCII</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disables automatic conversions from 8-bit strings (<db:code>char *</db:code>) to Unicode QStrings, as well as from 8-bit <db:code>char</db:code> types (<db:code>char</db:code> and <db:code>unsigned char</db:code>) to <db:link xlink:href="qchar.xml">QChar</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#QT_NO_CAST_TO_ASCII">QT_NO_CAST_TO_ASCII</db:link></db:member>
<db:member><db:link xlink:href="qstring.xml#QT_RESTRICTED_CAST_FROM_ASCII">QT_RESTRICTED_CAST_FROM_ASCII</db:link></db:member>
<db:member><db:link xlink:href="qbytearray.xml#QT_NO_CAST_FROM_BYTEARRAY">QT_NO_CAST_FROM_BYTEARRAY</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QT_NO_CAST_TO_ASCII">
<db:title>QT_NO_CAST_TO_ASCII</db:title>
<db:methodsynopsis>
<db:methodname>QT_NO_CAST_TO_ASCII</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QT_NO_CAST_TO_ASCII</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disables automatic conversion from <db:link xlink:href="qstring.xml">QString</db:link> to 8-bit strings (<db:code>char *</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link></db:member>
<db:member><db:link xlink:href="qstring.xml#QT_RESTRICTED_CAST_FROM_ASCII">QT_RESTRICTED_CAST_FROM_ASCII</db:link></db:member>
<db:member><db:link xlink:href="qbytearray.xml#QT_NO_CAST_FROM_BYTEARRAY">QT_NO_CAST_FROM_BYTEARRAY</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QT_RESTRICTED_CAST_FROM_ASCII">
<db:title>QT_RESTRICTED_CAST_FROM_ASCII</db:title>
<db:methodsynopsis>
<db:methodname>QT_RESTRICTED_CAST_FROM_ASCII</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QT_RESTRICTED_CAST_FROM_ASCII</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disables most automatic conversions from source literals and 8-bit data to unicode QStrings, but allows the use of the <db:code>QChar(char)</db:code> and <db:code>QString(const char (&amp;ch)[N]</db:code> constructors, and the <db:code>QString::operator=(const char (&amp;ch)[N])</db:code> assignment operator. This gives most of the type-safety benefits of <db:code>QT_NO_CAST_FROM_ASCII</db:code> but does not require user code to wrap character and string literals with <db:link xlink:href="qlatin1char.xml">QLatin1Char</db:link>, <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> or similar.</db:para>
<db:para>Using this macro together with source strings outside the 7-bit range, non-literals, or literals with embedded NUL characters is undefined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link></db:member>
<db:member><db:link xlink:href="qstring.xml#QT_NO_CAST_TO_ASCII">QT_NO_CAST_TO_ASCII</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QString</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qstring.xml">QString</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="fromUcs4-1">
<db:title>[static] QString QString::fromUcs4(const uint *<db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>size</db:emphasis> = -1)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromUcs4</db:methodname>
<db:methodparam>
<db:type>const uint *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromUcs4(const uint *str, qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use the <db:code>char32_t</db:code> overload instead.</db:para>
</db:section>
<db:section xml:id="fromUtf16-1">
<db:title>[static] QString QString::fromUtf16(const ushort *<db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>size</db:emphasis> = -1)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fromUtf16</db:methodname>
<db:methodparam>
<db:type>const ushort *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fromUtf16(const ushort *str, qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use the <db:code>char16_t</db:code> overload.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
