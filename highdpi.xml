<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>High DPI</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes Qt's support for high DPI displays.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>High-DPI displays – also known as retina displays – are displays with high resolution (pixels) in relation to their physical size (mm), resulting in a high pixel density, or high number of <db:emphasis>dots per inch</db:emphasis> (DPI). The increased resolution is used to provide more detailed content on screen (smoother text, more detailed icons), rather than more content (more windows, larger window sizes).</db:para>
<db:para>Qt supports high-DPI displays on all platforms, and provides a unified API that abstracts over any platform differences. Qt will automatically account for the display resolution when using higher level APIs such as Qt Widgets and Qt Quick, and applications only need to provide high-resolution assets, such as images and icons. Changes in the platform's user preferences are automatically picked up.</db:para>
<db:para>Lower-level graphics drawing (such as OpenGL code) need to be high-DPI aware, but can use cross platform Qt APIs to learn about the platform's display resolutions.</db:para>
<db:section xml:id="conceptual-model">
<db:title>Conceptual Model</db:title>
<db:para>Qt uses a model where the application coordinate system is independent of the display device resolution. The application operates in <db:emphasis>device-independent pixels</db:emphasis>, which are then mapped to the physical pixels of the display via a scale factor, known as the <db:emphasis>device pixel ratio</db:emphasis>. The scale factor is expressed as a floating point number, for example 1.0 or 2.0, or informally as 1x and 2x.</db:para>
<db:para>For example, creating a <db:link xlink:href="qwindow.xml">QWindow</db:link> or <db:link xlink:href="qwidget.xml">QWidget</db:link>, and setting its size to 200x200 will cover 200x200 display pixels on a normal density display (with a device pixel ratio of 1.0), but will cover 400x400 pixels on a high density display (with a device pixel ratio of 2.0).</db:para>
<db:para>This model applies to most units in higher level Qt GUI, Widgets, and Quick APIs, including widget and item geometry, event geometry, desktop, window and screen geometry, as well as animation velocities.</db:para>
<db:note>
<db:para>The model does not handle differences between UI classes, such as the size of touch targets vs mouse targets.</db:para>
</db:note>
</db:section>
<db:section xml:id="drawing">
<db:title>Drawing</db:title>
<db:para>Qt will automatically take advantage of the increased density of a high-DPI display when using drawing APIs such as <db:link xlink:href="qpainter.xml">QPainter</db:link>, or when rendering graphic primitives or text in Qt Quick.</db:para>
<db:para>As a result the application can operate in a single unified coordinate system, without needing to account for the possible display densities the application will run on.</db:para>
<db:para>However, when using lower level drawing APIs, for example OpenGL, the application needs to take the device pixel ratio of the display into account. This is available both per window, as <db:link xlink:href="qwindow.xml#devicePixelRatio">QWindow::devicePixelRatio</db:link>() (tracking the device pixel ratio of the window when moved between displays), or per display, as <db:link xlink:href="qscreen.xml#devicePixelRatio-prop">QScreen::devicePixelRatio</db:link>().</db:para>
<db:para>Image buffers such as <db:link xlink:href="qimage.xml">QImage</db:link> and <db:link xlink:href="qpixmap.xml">QPixmap</db:link> represent the raw pixels, and as a result do not operate in the device independent coordinate system described earlier. A <db:link xlink:href="qimage.xml">QImage</db:link> of size 400x400, with a device pixel ratio of 2.0, will fit a 200x200 <db:link xlink:href="qwindow.xml">QWindow</db:link> on a high density (2x) display, or will be automatically down-scaled to 200x200 during drawing if targeting a normal density (1x) display. See <db:link xlink:href="qpainter.xml#drawing-high-resolution-versions-of-pixmaps-and-images">Drawing High Resolution Versions of Pixmaps and Images</db:link> for more details.</db:para>
</db:section>
<db:section xml:id="image-assets">
<db:title>Image Assets</db:title>
<db:para>To take advantage of the increased pixel density of high-DPI displays, the application should also include high-DPI versions of static image assets. This is achieved by using a special naming convention for the high density assets, for example logo@2x.png, and loading both the normal density image and the high-density image into a <db:link xlink:href="qicon.xml">QIcon</db:link>. Qt will automatically choose the best representation for the target display at runtime. See <db:link xlink:href="qicon.xml#high-dpi-icons">High DPI Icons</db:link> for more details.</db:para>
</db:section>
<db:section xml:id="device-independent-screen-geometry">
<db:title>Device Independent Screen Geometry</db:title>
<db:para>Qt applications generally operate in device independent pixels. This includes window and screen geometries reported to the application.</db:para>
<db:para>This means that <db:link xlink:href="qscreen.xml#geometry-prop">QScreen::geometry</db:link>() may not return the screen's physical pixel count, or the pixel size as reported by the operating system. This has implications for virtual desktop geometry:</db:para>
<db:para>Modern desktop operating systems typically create one shared coordinate system for all connected screens, and allows the user to position screens to match their physical screen setup, usually via a configuration dialog. If this positioning is done in a coordinate system equivalent to Qt's device independent pixels (like on macOS) then <db:link xlink:href="qscreen.xml">QScreen</db:link> geometry will match the native screen layout. If the positioning is done in screen physical pixels (like on Windows), then Qt's treatment of screen geometry may introduce &quot;gaps&quot; in virtual desktop geometry unused by any screen.</db:para>
<db:para>Specifically, Qt will scale the screen size (resulting in a &quot;smaller&quot; screen for positive scale factors), but will not change the screen position. This will produce an islands-of-screens type virtual desktop geometry.</db:para>
<db:para>Application code should not assume that positions immediately adjacent to and outside one screen is a valid position on the neighboring screen. Instead, get the screen list using <db:link xlink:href="qguiapplication.xml#screens">QGuiApplication::screens</db:link>() and use that list to reason about available screen geometry.</db:para>
</db:section>
<db:section xml:id="configuring">
<db:title>Configuring</db:title>
<db:para>As an end user you may want to adjust the DPI or scale settings to match display hardware, or to account for viewing distance and personal preferences. These adjustments should be done using the native display settings of the platform, so that all applications will agree on the same DPI or scale factor values. Qt does not provide end user facilities to configure the behavior of Qt's high-DPI support.</db:para>
<db:para>The operating system may represent the scale factor either as a factor (1.5), as a percentage (150%), or as dots per inch (144 DPI). Qt translates these to the device pixel ratio seen by the application. In the latter case Qt assumes a &quot;base&quot; DPI – e.g 96 on X11 – and calculates the resulting device pixel ratio accordingly.</db:para>
<db:para>Integer scale factors (e.g. 1.0 or 2.0) are preferred for best results. &quot;Rounding&quot; the scale factor to 25% increments can also give good results. Setting the scale factor or DPI to the exact physical display DPI may not give good visual results due to the fractional scaling involved. If the application suffers from visual artifacts in this scenario, it can use QGuiApplication::setHighDpiScaleFactorRoundingPolicy() to limit the scale factors it will see.</db:para>
<db:section xml:id="platform-details">
<db:title>Platform Details</db:title>
<db:para>The following table describes how to configure high-DPI on various platforms.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Platform</db:para>
</db:th>
<db:th>
<db:para>Configuration</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>macOS</db:para>
</db:td>
<db:td>
<db:para>Set the scale for each display in the display preferences. macOS will reflect this to Qt as an integer device pixel ratio.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Windows</db:para>
</db:td>
<db:td>
<db:para>Set the scale factor for each display in the display settings. The base scale factor is 100%, and can be adjusted in 25% steps.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ubuntu</db:para>
</db:td>
<db:td>
<db:para>Set the scale factor in display settings. On Ubuntu 20.04 and later this can be done per display, in increments of 25%. Earlier versions support setting a global scale to either 100% or 200%.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>X11</db:para>
</db:td>
<db:td>
<db:para>Set Xft.dpi, or opt-in to use physical DPI. See &quot;Configuring X11&quot; below.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Wayland</db:para>
</db:td>
<db:td>
<db:para>Qt reads wl_output::scale, which is restricted to integer values. Wayland compositors typically have a configuration option for setting the scale factor, for example weston --scale.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>EGLFS</db:para>
</db:td>
<db:td>
<db:para>Set QT_FONT_DPI to the desired logical DPI value, for example QT_FONT_DPI=192. Qt assumes that the base DPI is 96, and scales the UI accordingly.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>Some windowing systems may have limitations that are then reflected in Qt. Qt does not provide workarounds for these limitations. Instead, consider workarounds on the windowing system level.</db:para>
</db:note>
<db:section xml:id="configuring-x11">
<db:title>Configuring X11</db:title>
<db:para>The required configuration input to Qt is per-screen logical DPI. Currently, X11 provides either global logical DPI or per-screen physical DPI. Neither of these are exactly what Qt needs, which can make DPI configuration on X11 more complicated than on other platforms.</db:para>
<db:para>Desktops environments such as Ubuntu and Kubntu implement workarounds for the lack of logical DPI, and provide easily configurable high-DPI support. If you instead want to configure X11 DPI settings manually then this section describes which X11 settings Qt reads.</db:para>
<db:para>Some X11 configuration workflows involves overriding the reported physical size of the screen in order to make DPI calculations yield a specific DPI value. Qt supports this workflow, but this requires opting in, as described below.</db:para>
<db:para>The exact configuration priority is as follows, where Qt uses the first option available. Note that the behavior depends on the Qt version in use. Qt 5 behavior assumes that AA_EnableHighDpiScaling has been set (this flag is not needed on Qt 6).</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th colspan="3">
<db:para>X11 DPI Configuration Priority</db:para>
</db:th>
</db:tr>
<db:tr>
<db:th>
<db:para>Property</db:para>
</db:th>
<db:th>
<db:para>Notes</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>1. Xft/DPI</db:para>
</db:td>
<db:td>
<db:para>From X settings. Global logical DPI value.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>2. Xft.dpi</db:para>
</db:td>
<db:td>
<db:para>From X resources. Global logical DPI value.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>3. RandR physical DPI [Qt 5 Only]</db:para>
</db:td>
<db:td>
<db:para>DPI calculated from per-screen physical size and pixel size, as reported by randr. specifically, the mwidth and mheight fields of the xcb_randr_screen_change_notify_event_t structure is used. The DPI will be rounded to an integer and clamped to be not less than 96.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>4. 96 DPI</db:para>
</db:td>
<db:td>
<db:para>Fallback value.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The QT_USE_PHYSICAL_DPI override</db:para>
<db:para>Set QT_USE_PHYSICAL_DPI=1 to make Qt use RandR physical DPI unconditionally; specifically the mwidth and mheight fields of the xcb_randr_screen_change_notify_event_t structure is used. The DPI value will be rounded to an integer.</db:para>
</db:section>
<db:section xml:id="configuring-windows">
<db:title>Configuring Windows</db:title>
<db:para>Qt uses the Windows display scale settings automatically; no specific settings are required. For example, if a display is configured for 175% scale then Qt apps will see a device pixel ratio of 1.75 on that screen.</db:para>
<db:para>Windows defines several<db:link xlink:href="https://docs.microsoft.com/en-us/windows/win32/hidpi/high-dpi-desktop-application-development-on-windows">DPI Awareness</db:link> levels, which applications set in order to opt-in to high-DPI features. Qt 6 is Per-Monitor DPI Aware V2 by default. If you are incorporating code which assumes a single global DPI then you might want to set a different awareness level. This can be done by adding an entry to qt.conf:</db:para>
<db:programlisting language="cpp" role="bad">[Platforms]
WindowsArguments = dpiawareness=0,1,2
</db:programlisting>
</db:section>
</db:section>
</db:section>
<db:section xml:id="testing">
<db:title>Testing</db:title>
<db:section xml:id="qt-scale-factor">
<db:title>QT_SCALE_FACTOR</db:title>
<db:para>Set the QT_SCALE_FACTOR environment variable to provide a global scale factor for the application.</db:para>
<db:programlisting language="cpp" role="bad">QT_SCALE_FACTOR=2 ./myapp
</db:programlisting>
<db:para>This scales all application geometry (including the device pixel ratio) by the given factor, which enables testing high-DPI support independently of available hardware. The set scale factor will be used as-is by Qt, and will not be affected by the <db:link xlink:href="qt.xml#HighDpiScaleFactorRoundingPolicy-enum">rounding policy</db:link>.</db:para>
<db:para>The effective device pixel ratio, as returned by <db:link xlink:href="qwindow.xml#devicePixelRatio">QWindow::devicePixelRatio</db:link>(), will be a product of the set scale factor and the native device pixel ratio. For example, setting QT_SCALE_FACTOR=2 on a 2x Wayland display will result in the application seeing a device pixel ratio of 4.</db:para>
</db:section>
<db:section xml:id="dprgadget">
<db:title>DprGadget</db:title>
<db:para>The DprGadget test application can be used to inspect the native configuration, and how Qt reacts to it:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/dprgadget.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>DprGadget displays the device pixel ratio of the window, as reported by <db:link xlink:href="qwindow.xml#devicePixelRatio">QWindow::devicePixelRatio</db:link>(). In addition is displays the native DPI and device pixel ratio of the screen the widow is on, as reported by <db:link xlink:href="qplatformscreen.xml#logicalDpi">QPlatformScreen::logicalDpi</db:link>() and <db:link xlink:href="qplatformscreen.xml#devicePixelRatio">QPlatformScreen::devicePixelRatio</db:link>().</db:para>
<db:para>The displayed values should be updated automatically on screen and DPI changes, and the dialog should maintain the same size. If not, it might be a Qt bug.</db:para>
<db:para>DprGradget is a part Qt's manual test suite, and can be found at qtbase/tests/manual/highdpi/dprgadget.</db:para>
</db:section>
</db:section>
<db:section xml:id="environment-variable-reference">
<db:title>Environment Variable Reference</db:title>
<db:para>This section lists high-DPI related environment variables recognized by Qt. In alphabetical order:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>QT_ENABLE_HIGHDPI_SCALING Set to 0 to disable high-dpi scaling; effectively reverting to Qt 5 default behavior. Note that this has no effect on platforms such as Wayland or macOS - it does not disable any native high-DPI support. This variable is intended for testing purposes only, and we do not recommend setting it on a permanent basis.</db:para>
</db:listitem>
<db:listitem>
<db:para>QT_FONT_DPI Sets a global DPI. This is a legacy environment variable provided for backwards compatibility.</db:para>
</db:listitem>
<db:listitem>
<db:para>QT_SCALE_FACTOR Sets a global scale factor. For debugging and testing purposes.</db:para>
</db:listitem>
<db:listitem>
<db:para>QT_SCALE_FACTOR_ROUNDING_POLICY Sets the scale factor <db:link xlink:href="qt.xml#HighDpiScaleFactorRoundingPolicy-enum">rounding policy</db:link>, which is applied to the scale factor computed from screen DPI. Supported values include</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Round (Qt 5 default)</db:para>
</db:listitem>
<db:listitem>
<db:para>PassThrough (Qt 6 default)</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>QT_SCREEN_SCALE_FACTORS Sets a list of screen scale factors. The list can be in one of two formats; either a semicolon-separated list of screen scale factors (&quot;1;1.5;2&quot;), or a semicolon-separated list of screen=factor entries (&quot;screenA=1;screenB=1.5;screenC=2&quot;). Setting this environment variable is not recommended since it prevents Qt from using system DPI values.</db:para>
</db:listitem>
<db:listitem>
<db:para>QT_USE_PHYSICAL_DPI Makes Qt use physical DPI instead of logical DPI. Using logical DPI is normally the best option; this environment variable can be set in cases where logical DPI is not available and the physical DPI is known to be correct.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="coordinate-systems-reference">
<db:title>Coordinate Systems Reference</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Device Independent Pixels This is Qt's main coordinate system. Window, widget, Quick item, event, and screen geometry are all in device independent pixels. Typically, a device independent pixel has a constant visual size across device types and screen densities. Though this is a generalization, the exact size depends on device configuration.</db:para>
</db:listitem>
<db:listitem>
<db:para>Device Pixels This coordinate system is used for rasterization and low-level graphics tasks, for example when using the OpenGL API. The device pixel coordinate system is often equivalent to the physical coordinate system of the display, but this is not guaranteed. For example, both macOS and Ubuntu may apply additional scaling, depending on display settings.</db:para>
</db:listitem>
<db:listitem>
<db:para>Native Pixels This is the coordinate system used by the native API, such as Win32 or Cocoa (macOS). Depending on platform and screen configuration, native pixels may be equivalent to device independent or device pixels.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
