<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>High DPI</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes Qt's support for high DPI displays.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>High-DPI displays – also known as retina displays – are displays with high resolution (pixels) in relation to their physical size (mm), resulting in a high pixel density, or high number of <db:emphasis>dots per inch</db:emphasis> (DPI). The increased resolution is used to provide more detailed content on screen (smoother text, more detailed icons), rather than more content (more windows, larger window sizes).</db:para>
<db:para>Qt supports high-DPI displays on all platforms, and provides a unified API that abstracts over any platform differences. Qt will automatically account for the display resolution when using higher level APIs such as Qt Widgets and Qt Quick, and applications only need to provide high-resolution assets, such as images and icons. Changes in the platform's user preferences are automatically picked up.</db:para>
<db:para>Lower-level graphics drawing (such as OpenGL code) need to be high-DPI aware, but can use cross platform Qt APIs to learn about the platform's display resolutions.</db:para>
<db:section xml:id="conceptual-model">
<db:title>Conceptual Model</db:title>
<db:para>Qt uses a model where the application coordinate system is independent of the display device resolution. The application operates in <db:emphasis>device-independent pixels</db:emphasis>, which are then mapped to the physical pixels of the display via a scale factor, known as the <db:emphasis>device pixel ratio</db:emphasis>. The scale factor is expressed as a floating point number, for example 1.0 or 2.0, or informally as 1x and 2x.</db:para>
<db:para>For example, creating a <db:link xlink:href="qwindow.xml">QWindow</db:link> or <db:link xlink:href="qwidget.xml">QWidget</db:link>, and setting its size to 200x200 will result in a corresponding window of 200x200 pixels on a normal density display (with a device pixel ratio of 1.0), but will result in a window of 400x400 pixel on a high density display (with a device pixel ratio of 2.0).</db:para>
<db:para>This model applies to most units in higher level Qt Gui, Widgets, and Quick APIs, including widget and item geometry, event geometry, desktop, window and screen geometry, as well as animation velocities.</db:para>
<db:note>
<db:para>The model does not handle differences between UI classes, such as the size of touch targets vs mouse targets.</db:para>
</db:note>
</db:section>
<db:section xml:id="drawing">
<db:title>Drawing</db:title>
<db:para>Qt will automatically take advantage of the increased density of a high-DPI display when using drawing APIs such as <db:link xlink:href="qpainter.xml">QPainter</db:link>, or when rendering graphic primitives or text in Qt Quick.</db:para>
<db:para>As a result the application can operate in a single unified coordinate system, without needing to account for the possible display densities the application will run on.</db:para>
<db:para>However, when using lower level drawing APIs, for example OpenGL, the application needs to take the device pixel ratio of the display into account. This is available both per window, as <db:link xlink:href="qwindow.xml#devicePixelRatio">QWindow::devicePixelRatio</db:link>() (tracking the device pixel ratio of the window when moved between displays), or per display, as <db:link xlink:href="qscreen.xml#devicePixelRatio-prop">QScreen::devicePixelRatio</db:link>().</db:para>
<db:para>Image buffers such as <db:link xlink:href="qimage.xml">QImage</db:link> and <db:link xlink:href="qpixmap.xml">QPixmap</db:link> represent the raw pixels, and as a result do not operate in the device independent coordinate system described earlier. A <db:link xlink:href="qimage.xml">QImage</db:link> of size 400x400, with a device pixel ratio of 2.0, will fit a 200x200 <db:link xlink:href="qwindow.xml">QWindow</db:link> on a high density (2x) display, or will be automatically downscaled to 200x200 during drawing if targeting a normal density (1x) display. See <db:link xlink:href="qpainter.xml#drawing-high-resolution-versions-of-pixmaps-and-images">Drawing High Resolution Versions of Pixmaps and Images</db:link> for more details.</db:para>
</db:section>
<db:section xml:id="image-assets">
<db:title>Image Assets</db:title>
<db:para>To take advantage of the increased pixel density of high-DPI displays, the application should also include high-DPI versions of static image assets. This is achieved by using a special naming convention for the high density assets, for example logo@2x.png, and loading both the normal density image and the high-density image into a <db:link xlink:href="qicon.xml">QIcon</db:link>. Qt will automatically choose the best representation for the target display at runtime. See <db:link xlink:href="qicon.xml#high-dpi-icons">High DPI Icons</db:link> for more details.</db:para>
</db:section>
<db:section xml:id="configuring">
<db:title>Configuring</db:title>
<db:para>As an end user you may want to adjust the DPI or scale settings to match display hardware, or to account for viewing distance and personal preferences. These adjustments should be done using the native display settings of the platform, so that all applications will agree on the same DPI or scale factor values. Qt does not provide end user facilities to configure the behavior of Qt's high-DPI support.</db:para>
<db:para>The operating system may represent the scale factor either as a factor (1.5), as a percentage (150%), or as dots per inch (144 DPI). Qt translates these to the device pixel ratio seen by the application. In the latter case Qt assumes a &quot;base&quot; DPI – e.g 96 on X11 – and calculates the resulting device pixel ratio accordingly.</db:para>
<db:para>Integer scale factors (e.g. 1.0 or 2.0) are preferred for best results. &quot;Rounding&quot; the scale factor to 25% increments can also give good results. Setting the scale factor or DPI to the exact physical display DPI may not give good visual results due to the fractional scaling involved. If the application suffers from visual artifacts in this scenario, it can use <db:link xlink:href="qguiapplication.xml#setHighDpiScaleFactorRoundingPolicy">QGuiApplication::setHighDpiScaleFactorRoundingPolicy</db:link>() to limit the scale factors it will see.</db:para>
<db:section xml:id="platform-details">
<db:title>Platform Details</db:title>
<db:para>The following table describes how to configure high-DPI on various platforms.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Platform</db:para>
</db:th>
<db:th>
<db:para>Configuration</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>macOS</db:para>
</db:td>
<db:td>
<db:para>Set the scale for each display in the display preferences. macOS will reflect this to Qt as an integer device pixel ratio.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Windows</db:para>
</db:td>
<db:td>
<db:para>Set the scale factor for each display in the display settings. The base scale factor is 100%, and can be adjusted in 25% steps.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ubuntu</db:para>
</db:td>
<db:td>
<db:para>Set the scale factor in display settings. On Ubuntu 20.04 and later this can be done per display, in increments of 25%. Earlier versions support setting a global scale to either 100% or 200%.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>X11</db:para>
</db:td>
<db:td>
<db:para>Set the Xft.dpi setting, which is a global logical DPI. Qt assumes that the base DPI is 96, and scales the UI accordingly.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Wayland</db:para>
</db:td>
<db:td>
<db:para>Qt reads wl_output::scale, which is restricted to integer values. Wayland compositors typically have a configuration option for setting the scale factor, for example weston --scale.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>EGLFS</db:para>
</db:td>
<db:td>
<db:para>Set QT_FONT_DPI to the desired logical DPI value, for example QT_FONT_DPI=192. Qt assumes that the base DPI is 96, and scales the UI accordingly.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>Some windowing systems may have limitations that are then reflected in Qt. Qt does not provide workarounds for these limitations. Instead, consider workarounds on the windowing system level.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="testing">
<db:title>Testing</db:title>
<db:para>The DprGadget test application can be used to inspect the native configuration, and how Qt reacts to it:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/dprgadget.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>DprGadget displays the device pixel ratio of the window, as reported by <db:link xlink:href="qwindow.xml#devicePixelRatio">QWindow::devicePixelRatio</db:link>(). In addition is displays the native DPI and device pixel ratio of the screen the widow is on, as reported by <db:link xlink:href="qplatformscreen.xml#logicalDpi">QPlatformScreen::logicalDpi</db:link>() and <db:link xlink:href="qplatformscreen.xml#devicePixelRatio">QPlatformScreen::devicePixelRatio</db:link>().</db:para>
<db:para>The displayed values should be updated automatically on screen and DPI changes, and the dialog should maintain the same size. If this does happen then that indicate there might be a bug in Qt.</db:para>
<db:para>DprGradget is a part Qt's manual test suite, and can be found at qtbase/tests/manual/highdpi/pixelgadget.</db:para>
</db:section>
</db:article>
