<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWebChannelAbstractTransport Class</db:title>
<db:productname>QtWebChannel</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebChannel Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Communication channel between the C++ <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> server and a HTML/JS client.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWebChannelAbstractTransport</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += webchannel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Users of the <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> must implement this interface and connect instances of it to the <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> server for every client that should be connected to the <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link>. The <db:link xlink:href="qtwebchannel-standalone-example.xml">Qt WebChannel Standalone Example</db:link> shows how this can be done using <db:link xlink:href="qtwebsockets-index.xml">Qt WebSockets</db:link>.</db:para>
<db:note>
<db:para>The JSON message protocol is considered internal and might change over time.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwebchannel-standalone-example.xml">Qt WebChannel Standalone Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWebChannelAbstractTransport">
<db:title>[explicit] QWebChannelAbstractTransport::QWebChannelAbstractTransport(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QWebChannelAbstractTransport</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebChannelAbstractTransport(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a transport object with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QWebChannelAbstractTransport">
<db:title>[override virtual] QWebChannelAbstractTransport::~QWebChannelAbstractTransport()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QWebChannelAbstractTransport</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QWebChannelAbstractTransport() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the transport object.</db:para>
</db:section>
<db:section xml:id="messageReceived">
<db:title>void QWebChannelAbstractTransport::messageReceived(const QJsonObject &amp;<db:emphasis>message</db:emphasis>, QWebChannelAbstractTransport *<db:emphasis>transport</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>messageReceived</db:methodname>
<db:methodparam>
<db:type>const QJsonObject &amp;</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWebChannelAbstractTransport *</db:type>
<db:parameter>transport</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void messageReceived(const QJsonObject &amp;message, QWebChannelAbstractTransport *transport)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal must be emitted when a new JSON <db:code role="parameter">message</db:code> was received from the remote client. The <db:code role="parameter">transport</db:code> argument should be set to this transport object.</db:para>
</db:section>
<db:section xml:id="sendMessage">
<db:title>[pure virtual] void QWebChannelAbstractTransport::sendMessage(const QJsonObject &amp;<db:emphasis>message</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>sendMessage</db:methodname>
<db:methodparam>
<db:type>const QJsonObject &amp;</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sendMessage(const QJsonObject &amp;message) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a JSON <db:code role="parameter">message</db:code> to the remote client. An implementation would serialize the message and transmit it to the remote JavaScript client.</db:para>
</db:section>
</db:section>
</db:article>
