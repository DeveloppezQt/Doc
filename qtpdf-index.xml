<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt PDF</db:title>
<db:productname>QtPdf</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Pdf Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Renders pages from PDF documents.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt PDF module contains classes and functions for rendering PDF documents. The <db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link> class loads a PDF document and renders pages from it according to the options provided by the <db:link xlink:href="qpdfdocumentrenderoptions.xml">QPdfDocumentRenderOptions</db:link> class. The <db:link xlink:href="qpdfpagerenderer.xml">QPdfPageRenderer</db:link> class manages a queue that collects all render requests. The <db:link xlink:href="qpdfpagenavigator.xml">QPdfPageNavigator</db:link> class handles the navigation through a PDF document. The <db:link xlink:href="qpdfsearchmodel.xml">QPdfSearchModel</db:link> class searches for a string and holds the search results. The <db:link xlink:href="qpdfbookmarkmodel.xml">QPdfBookmarkModel</db:link> class holds the table of contents, if present. The QPdfLinkModel holds information about hyperlinks on a page. The <db:link xlink:href="qpdfview.xml">QPdfView</db:link> widget is a complete PDF viewer, and the <db:link xlink:href="qtpdf-pdfviewer-example.xml">PDF Viewer Example</db:link> shows how to use it.</db:para>
<db:para>For Qt Quick applications, three kinds of full-featured viewer components are provided. <db:link xlink:href="qml-qtquick-pdf-pdfmultipageview.xml">PdfMultiPageView</db:link> should be your first choice for the most common user experience: flicking through the pages in the entire document. <db:link xlink:href="qml-qtquick-pdf-pdfscrollablepageview.xml">PdfScrollablePageView</db:link> shows one page at a time, with scrolling; and <db:link xlink:href="qml-qtquick-pdf-pdfpageview.xml">PdfPageView</db:link> shows one full page at a time, without scrolling.</db:para>
<db:para>The full-featured viewer components are composed of lower-level QML components that can be used separately if you need to write a more customized PDF viewing application: <db:link xlink:href="qml-qtquick-pdf-pdfdocument.xml">PdfDocument</db:link>, <db:link xlink:href="qml-qtquick-pdf-pdfpageimage.xml">PdfPageImage</db:link>, <db:link xlink:href="qml-qtquick-pdf-pdfpagenavigator.xml">PdfPageNavigator</db:link>, <db:link xlink:href="qml-qtquick-pdf-pdfselection.xml">PdfSelection</db:link>, <db:link xlink:href="qml-qtquick-pdf-pdfsearchmodel.xml">PdfSearchModel</db:link>, <db:link xlink:href="qml-qtquick-pdf-pdflinkmodel.xml">PdfLinkModel</db:link>, and <db:link xlink:href="qml-qtquick-pdf-pdfbookmarkmodel.xml">PdfBookmarkModel</db:link>.</db:para>
<db:para>If you only need to render page images, without features such as text selection, search and navigation, this module includes a <db:link xlink:href="qimageiohandler.xml">QImageIOHandler</db:link> plugin that treats PDF as a scalable <db:link xlink:href="license-changes.xml#qt-image-formats">image format</db:link>, similar to <db:link xlink:href="qtsvg-index.xml">SVG</db:link>. You can simply use <db:link xlink:href="qml-qtquick-image.xml">Image</db:link>, and set the <db:link xlink:href="qml-qtquick-image.xml#currentFrame-prop">currentFrame</db:link> property to the page index that you wish to display. If the PDF file does not render its own background, the image has a transparent background.</db:para>
<db:section xml:id="using-the-module">
<db:title>Using the Module</db:title>
<db:para>Using a Qt module requires linking against the module library, either directly or through other dependencies. Several build tools have dedicated support for this, including <db:link xlink:href="https://cmake.org/cmake/help/latest/">CMake</db:link> and <db:link xlink:href="qmake-manual.xml">qmake</db:link>.</db:para>
<db:section xml:id="building-with-cmake">
<db:title>Building with CMake</db:title>
<db:para>Use the <db:code>find_package()</db:code> command to locate the needed module components in the <db:code>Qt6</db:code> package:</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS Pdf)
target_link_libraries(mytarget Qt6::Pdf)
</db:programlisting>
<db:para>See also the <db:link xlink:href="cmake-manual.xml">Build with CMake</db:link> overview.</db:para>
</db:section>
<db:section xml:id="building-with-qmake">
<db:title>Building with qmake</db:title>
<db:para>To link against the module, add this line to your qmake project file:</db:para>
<db:programlisting language="cpp">QT += pdf
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtpdf-examples.xml">Qt PDF Examples</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="api-reference">
<db:title>API Reference</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtpdf-module.xml">Qt PDF C++ Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-pdf-qmlmodule.xml">Qt Quick PDF QML Types</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
