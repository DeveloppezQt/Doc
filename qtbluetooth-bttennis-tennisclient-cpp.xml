<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Bluetooth Tennis Example</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Bluetooth Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Digia gives you certain additional
** rights.  These rights are described in the Digia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;tennisclient.h&quot;

#include &lt;qbluetoothsocket.h&gt;

#include &lt;QtCore/QDataStream&gt;
#include &lt;QtCore/QByteArray&gt;

#include &lt;QtCore/QStringList&gt;

TennisClient::TennisClient(QObject *parent)
:   QObject(parent), socket(0), stream(0), elapsed(new QTime), lagTimeout(0)
{
    lagTimer.setInterval(1000);
    connect(&amp;lagTimer, SIGNAL(timeout()), this, SLOT(sendEcho()));
}

TennisClient::~TennisClient()
{
    stopClient();
}

void TennisClient::startClient(const QBluetoothServiceInfo &amp;remoteService)
{
    if (socket)
        return;

    serviceInfo = remoteService;

    // Connect to service
    socket = new QBluetoothSocket(QBluetoothServiceInfo::L2capProtocol);
    qDebug() &lt;&lt; &quot;Create socket&quot;;
    socket-&gt;connectToService(remoteService);
    qDebug() &lt;&lt; &quot;ConnecttoService done&quot;;

    connect(socket, SIGNAL(readyRead()), this, SLOT(readSocket()));
    connect(socket, SIGNAL(connected()), this, SLOT(connected()));
    connect(socket, SIGNAL(disconnected()), this, SIGNAL(disconnected()));
    connect(socket, SIGNAL(disconnected()), this, SLOT(socketDisconnected()));
    connect(socket, SIGNAL(error(QBluetoothSocket::SocketError)), this, SLOT(error(QBluetoothSocket::SocketError)));

    lagTimer.start();
}

void TennisClient::stopClient()
{
    if (socket == 0) // already stopped
        return;

    qDebug() &lt;&lt; Q_FUNC_INFO &lt;&lt; &quot;closing client!&quot;;

    lagTimer.stop();

    delete stream;
    stream = 0;

    socket-&gt;deleteLater();
    socket = 0;
}

void TennisClient::socketDisconnected()
{
    qDebug() &lt;&lt; &quot;Got socketDisconnected&quot;;
    stopClient();
}

void TennisClient::readSocket()
{
    if (!socket)
        return;

    while (socket-&gt;bytesAvailable()) {
        QString str;

        *stream &gt;&gt; str;

        QStringList args = str.split(QChar(' '));
        QString s = args.takeFirst();

        if (s == &quot;m&quot; &amp;&amp; args.count() == 2) {
            emit moveBall(args.at(0).toInt(), args.at(1).toInt());
        }
        else if (s == &quot;s&quot; &amp;&amp; args.count() == 2){
            emit score(args.at(0).toInt(), args.at(1).toInt());
        }
        else if (s == &quot;l&quot; &amp;&amp; args.count() == 1){
            emit moveLeftPaddle(args.at(0).toInt());
        }
        else if (s == &quot;e&quot;){ // echo
            QByteArray b;
            QDataStream s(&amp;b, QIODevice::WriteOnly);
            s &lt;&lt; str;
            socket-&gt;write(b);
        }
        else if (s == &quot;E&quot;){
            lagTimeout = 0;
            QTime then = QTime::fromString(args.at(0), &quot;hh:mm:ss.zzz&quot;);
            if (then.isValid()) {
                emit lag(then.msecsTo(QTime::currentTime()));
//                qDebug() &lt;&lt; &quot;RTT: &quot; &lt;&lt; then.msecsTo(QTime::currentTime()) &lt;&lt; &quot;ms&quot;;
            }
        }
        else {
            qDebug() &lt;&lt; Q_FUNC_INFO &lt;&lt; &quot;Unknown command&quot; &lt;&lt; str;
        }
    }
}

void TennisClient::moveRightPaddle(int y)
{
    int msec = elapsed-&gt;elapsed();

    if (stream &amp;&amp; msec &gt; 50) {
        QByteArray b;
        QDataStream s(&amp;b, QIODevice::WriteOnly);
        s &lt;&lt; QString(&quot;r %1&quot;).arg(y);
        socket-&gt;write(b);
        elapsed-&gt;restart();
    }
}

void TennisClient::connected()
{
    stream = new QDataStream(socket);
    emit connected(socket-&gt;peerName());
}

void TennisClient::error(QBluetoothSocket::SocketError err)
{
    qDebug() &lt;&lt; &quot;Got socket error&quot; &lt;&lt;Q_FUNC_INFO &lt;&lt; &quot;error&quot; &lt;&lt; err;
    emit disconnected();
}

void TennisClient::sendEcho()
{
    if (lagTimeout) {
        lagTimeout--;
        return;
    }

    if (stream) {
        QByteArray b;
        QDataStream s(&amp;b, QIODevice::WriteOnly);
        s &lt;&lt; QString(&quot;E %1&quot;).arg(QTime::currentTime().toString(&quot;hh:mm:ss.zzz&quot;));
        socket-&gt;write(b);
        lagTimeout = 10;
    }
}

</db:programlisting>
</db:article>
