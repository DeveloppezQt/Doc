<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Virtual Keyboard in Qt Quick</db:title>
<db:productname>QtVirtualKeyboard</db:productname>
<db:edition>Qt Virtual Keyboard | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Virtual Keyboard</db:titleabbrev>
<db:abstract>
<db:para>This example shows how to use the virtual keyboard in a Qt Quick application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/basic-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The example has two implementations: one for desktop platforms and another for embedded platforms. The former version enables text input into several text fields using the virtual keyboard, whereas the latter version uses the same UI but with a custom virtual keyboard <db:link xlink:href="qml-qtquick-virtualkeyboard-inputpanel.xml">InputPanel</db:link>. The following snippet from <db:code>basic.pro</db:code> shows how the qmake project is set up to choose the appropriate implementation based on the CONFIG options:</db:para>
<db:programlisting language="cpp">!qtConfig(vkb-desktop) {
    DEFINES += MAIN_QML=\\\&quot;basic-b2qt.qml\\\&quot;
} else {
    DEFINES += MAIN_QML=\\\&quot;Basic.qml\\\&quot;
}
</db:programlisting>
<db:para>The example enables the virtual keyboard by setting the <db:code>QT_IM_MODULE</db:code> environment variable before loading the <db:code>.qml</db:code> file:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QQuickView&amp;gt;
#include &amp;lt;QGuiApplication&amp;gt;
#include &amp;lt;QQmlEngine&amp;gt;

int main(int argc, char *argv[])
{
    qputenv(&quot;QT_IM_MODULE&quot;, QByteArray(&quot;qtvirtualkeyboard&quot;));

    QGuiApplication app(argc, argv);
    QQuickView view(QString(&quot;qrc:/%2&quot;).arg(MAIN_QML));
    if (view.status() == QQuickView::Error)
        return -1;
    view.setResizeMode(QQuickView::SizeRootObjectToView);

    view.show();

    return app.exec();
}
</db:programlisting>
<db:para>Besides this, it uses custom <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> and <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> items to configure the <db:emphasis>[ENTER]</db:emphasis> key behavior using the <db:link xlink:href="qml-qtquick-virtualkeyboard-enterkeyaction.xml">EnterKeyAction</db:link> attached property.</db:para>
<db:programlisting language="cpp">import QtQuick
import QtQuick.Controls
import QtQuick.VirtualKeyboard
import &quot;content&quot;

Rectangle {
    ...
                TextField {
                    width: parent.width
                    placeholderText: &quot;One line field&quot;
                    enterKeyAction: EnterKeyAction.Next
                    onAccepted: passwordField.focus = true
                }
    ...
                TextArea {
                    id: textArea
                    width: parent.width
                    placeholderText: &quot;Multiple line field&quot;
                    height: Math.max(206, implicitHeight)
                }
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> and <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> controls extend the respective <db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls 2</db:link> types with <db:code>enterKeyEnabled</db:code> and <db:code>enterKeyAction</db:code> properties. The <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> and <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> instances in the snippet can set these properties to change the default behavior.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtvirtualkeyboard.git/tree/examples/virtualkeyboard/basic?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
