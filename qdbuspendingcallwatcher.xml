<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDBusPendingCallWatcher Class</db:title>
<db:productname>QtDBus</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt D-Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdbuspendingcallwatcher.xml">QDBusPendingCallWatcher</db:link> class provides a convenient way for waiting for asynchronous replies.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDBusPendingCallWatcher</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Dbus)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Dbus)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += dbus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link> and <db:link xlink:href="qdbuspendingcall.xml" xlink:role="class">QDBusPendingCall</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qdbuspendingcallwatcher.xml">QDBusPendingCallWatcher</db:link> provides the <db:link xlink:href="qdbuspendingcallwatcher.xml#finished">finished</db:link>() signal that will be emitted when a reply arrives.</db:para>
<db:para>It is usually used like the following example:</db:para>
<db:programlisting language="cpp">    QDBusPendingCall async = iface-&amp;gt;asyncCall(&quot;RemoteMethod&quot;, value1, value2);
    QDBusPendingCallWatcher *watcher = new QDBusPendingCallWatcher(async, this);

    QObject::connect(watcher, SIGNAL(finished(QDBusPendingCallWatcher*)),
                     this, SLOT(callFinishedSlot(QDBusPendingCallWatcher*)));
</db:programlisting>
<db:para>Note that it is not necessary to keep the original <db:link xlink:href="qdbuspendingcall.xml">QDBusPendingCall</db:link> object around since <db:link xlink:href="qdbuspendingcallwatcher.xml">QDBusPendingCallWatcher</db:link> inherits from that class too.</db:para>
<db:para>The slot connected to by the above code could be something similar to the following:</db:para>
<db:programlisting language="cpp">void DBus_PendingCall_Interface::callFinishedSlot(QDBusPendingCallWatcher *call)
{
    QDBusPendingReply&amp;lt;QString, QByteArray&amp;gt; reply = *call;
    if (reply.isError()) {
        showError();
    } else {
        QString text = reply.argumentAt&amp;lt;0&amp;gt;();
        QByteArray data = reply.argumentAt&amp;lt;1&amp;gt;();
        showReply(text, data);
    }
    call-&amp;gt;deleteLater();
}
</db:programlisting>
<db:para>Note the use of <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link> to validate the argument types in the reply. If the reply did not contain exactly two arguments (one string and one <db:link xlink:href="qbytearray.xml">QByteArray</db:link>), <db:link xlink:href="qdbuspendingreply.xml#isError">QDBusPendingReply::isError</db:link>() will return true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDBusPendingCallWatcher">
<db:title>[explicit] QDBusPendingCallWatcher::QDBusPendingCallWatcher(const QDBusPendingCall &amp;<db:emphasis>call</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QDBusPendingCallWatcher</db:methodname>
<db:methodparam>
<db:type>const QDBusPendingCall &amp;</db:type>
<db:parameter>call</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusPendingCallWatcher(const QDBusPendingCall &amp;call, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qdbuspendingcallwatcher.xml">QDBusPendingCallWatcher</db:link> object to watch for replies on the asynchronous pending call <db:code role="parameter">call</db:code> and sets this object's parent to <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QDBusPendingCallWatcher">
<db:title>[virtual] QDBusPendingCallWatcher::~QDBusPendingCallWatcher()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QDBusPendingCallWatcher</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QDBusPendingCallWatcher()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this object. If this <db:link xlink:href="qdbuspendingcallwatcher.xml">QDBusPendingCallWatcher</db:link> object was the last reference to the unfinished pending call, the call will be canceled.</db:para>
</db:section>
<db:section xml:id="finished">
<db:title>void QDBusPendingCallWatcher::finished(QDBusPendingCallWatcher *<db:emphasis>self</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>finished</db:methodname>
<db:methodparam>
<db:type>QDBusPendingCallWatcher *</db:type>
<db:parameter>self</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void finished(QDBusPendingCallWatcher *self)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the pending call has finished and its reply is available. The <db:code role="parameter">self</db:code> parameter is a pointer to the object itself, passed for convenience so that the slot can access the properties and determine the contents of the reply.</db:para>
</db:section>
<db:section xml:id="isFinished">
<db:title>bool QDBusPendingCallWatcher::isFinished() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isFinished</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isFinished() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the pending call has finished processing and the reply has been received.</db:para>
<db:para>Note that this function only changes state if you call <db:link xlink:href="qdbuspendingcallwatcher.xml#waitForFinished">waitForFinished</db:link>() or if an external D-Bus event happens, which in general only happens if you return to the event loop execution.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbuspendingreply.xml#isFinished">QDBusPendingReply::isFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="waitForFinished">
<db:title>void QDBusPendingCallWatcher::waitForFinished()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>waitForFinished</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void waitForFinished()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Suspends the execution of the calling thread until the reply is received and processed. After this function returns, <db:link xlink:href="qdbuspendingcallwatcher.xml#isFinished">isFinished</db:link>() should return true, indicating the reply's contents are ready to be processed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbuspendingreply.xml#waitForFinished">QDBusPendingReply::waitForFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
