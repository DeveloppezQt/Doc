<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPainter Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpainter.xml">QPainter</db:link> class performs low-level painting on widgets and other paint devices.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPainter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qstylepainter.xml" xlink:role="class">QStylePainter</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPainter is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qpainter.xml">QPainter</db:link> provides highly optimized functions to do most of the drawing GUI programs require. It can draw everything from simple lines to complex shapes like pies and chords. It can also draw aligned text and pixmaps. Normally, it draws in a &quot;natural&quot; coordinate system, but it can also do view and world transformation. <db:link xlink:href="qpainter.xml">QPainter</db:link> can operate on any object that inherits the <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> class.</db:para>
<db:para>The common use of <db:link xlink:href="qpainter.xml">QPainter</db:link> is inside a widget's paint event: Construct and customize (e.g. set the pen or the brush) the painter. Then draw. Remember to destroy the <db:link xlink:href="qpainter.xml">QPainter</db:link> object after drawing. For example:</db:para>
<db:programlisting language="cpp">void SimpleExampleWidget::paintEvent(QPaintEvent *)
{
    QPainter painter(this);
    painter.setPen(Qt::blue);
    painter.setFont(QFont(&quot;Arial&quot;, 30));
    painter.drawText(rect(), Qt::AlignCenter, &quot;Qt&quot;);
}
</db:programlisting>
<db:para>The core functionality of <db:link xlink:href="qpainter.xml">QPainter</db:link> is drawing, but the class also provide several functions that allows you to customize <db:link xlink:href="qpainter.xml">QPainter</db:link>'s settings and its rendering quality, and others that enable clipping. In addition you can control how different shapes are merged together by specifying the painter's composition mode.</db:para>
<db:para>The <db:link xlink:href="qpainter.xml#isActive">isActive</db:link>() function indicates whether the painter is active. A painter is activated by the <db:link xlink:href="qpainter.xml#begin">begin</db:link>() function and the constructor that takes a <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> argument. The <db:link xlink:href="qpainter.xml#end">end</db:link>() function, and the destructor, deactivates it.</db:para>
<db:para>Together with the <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> and <db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link> classes, <db:link xlink:href="qpainter.xml">QPainter</db:link> form the basis for Qt's paint system. <db:link xlink:href="qpainter.xml">QPainter</db:link> is the class used to perform drawing operations. <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> represents a device that can be painted on using a <db:link xlink:href="qpainter.xml">QPainter</db:link>. <db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link> provides the interface that the painter uses to draw onto different types of devices. If the painter is active, <db:link xlink:href="qpainter.xml#device">device</db:link>() returns the paint device on which the painter paints, and <db:link xlink:href="qpainter.xml#paintEngine">paintEngine</db:link>() returns the paint engine that the painter is currently operating on. For more information, see the <db:link xlink:href="paintsystem.xml">Paint System</db:link>.</db:para>
<db:para>Sometimes it is desirable to make someone else paint on an unusual <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link>. <db:link xlink:href="qpainter.xml">QPainter</db:link> supports a static function to do this, setRedirected().</db:para>
<db:warning>
<db:para>When the paintdevice is a widget, <db:link xlink:href="qpainter.xml">QPainter</db:link> can only be used inside a paintEvent() function or in a function called by paintEvent().</db:para>
</db:warning>
<db:section xml:id="settings">
<db:title>Settings</db:title>
<db:para>There are several settings that you can customize to make <db:link xlink:href="qpainter.xml">QPainter</db:link> draw according to your preferences:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qpainter.xml#font">font</db:link>() is the font used for drawing text. If the painter <db:link xlink:href="qpainter.xml#isActive">isActive</db:link>(), you can retrieve information about the currently set font, and its metrics, using the <db:link xlink:href="qpainter.xml#fontInfo">fontInfo</db:link>() and <db:link xlink:href="qpainter.xml#fontMetrics">fontMetrics</db:link>() functions respectively.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpainter.xml#brush">brush</db:link>() defines the color or pattern that is used for filling shapes.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpainter.xml#pen">pen</db:link>() defines the color or stipple that is used for drawing lines or boundaries.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpainter.xml#backgroundMode">backgroundMode</db:link>() defines whether there is a <db:link xlink:href="qpainter.xml#background">background</db:link>() or not, i.e it is either <db:link xlink:href="qt.xml#BGMode-enum">Qt::OpaqueMode</db:link> or <db:link xlink:href="qt.xml#BGMode-enum">Qt::TransparentMode</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpainter.xml#background">background</db:link>() only applies when <db:link xlink:href="qpainter.xml#backgroundMode">backgroundMode</db:link>() is <db:link xlink:href="qt.xml#BGMode-enum">Qt::OpaqueMode</db:link> and <db:link xlink:href="qpainter.xml#pen">pen</db:link>() is a stipple. In that case, it describes the color of the background pixels in the stipple.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpainter.xml#brushOrigin">brushOrigin</db:link>() defines the origin of the tiled brushes, normally the origin of widget's background.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpainter.xml#viewport">viewport</db:link>(), <db:link xlink:href="qpainter.xml#window">window</db:link>(), <db:link xlink:href="qpainter.xml#worldTransform">worldTransform</db:link>() make up the painter's coordinate transformation system. For more information, see the <db:link xlink:href="qpainter.xml#coordinate-transformations">Coordinate Transformations</db:link> section and the <db:link xlink:href="coordsys.xml">Coordinate System</db:link> documentation.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpainter.xml#hasClipping">hasClipping</db:link>() tells whether the painter clips at all. (The paint device clips, too.) If the painter clips, it clips to <db:link xlink:href="qpainter.xml#clipRegion">clipRegion</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpainter.xml#layoutDirection">layoutDirection</db:link>() defines the layout direction used by the painter when drawing text.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpainter.xml#worldMatrixEnabled">worldMatrixEnabled</db:link>() tells whether world transformation is enabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpainter.xml#viewTransformEnabled">viewTransformEnabled</db:link>() tells whether view transformation is enabled.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Note that some of these settings mirror settings in some paint devices, e.g. <db:link xlink:href="qwidget.xml#font-prop">QWidget::font</db:link>(). The <db:link xlink:href="qpainter.xml#begin">QPainter::begin</db:link>() function (or equivalently the <db:link xlink:href="qpainter.xml">QPainter</db:link> constructor) copies these attributes from the paint device.</db:para>
<db:para>You can at any time save the <db:link xlink:href="qpainter.xml">QPainter</db:link>'s state by calling the <db:link xlink:href="qpainter.xml#save">save</db:link>() function which saves all the available settings on an internal stack. The <db:link xlink:href="qpainter.xml#restore">restore</db:link>() function pops them back.</db:para>
</db:section>
<db:section xml:id="drawing">
<db:title>Drawing</db:title>
<db:para><db:link xlink:href="qpainter.xml">QPainter</db:link> provides functions to draw most primitives: <db:link xlink:href="qpainter.xml#drawPoint">drawPoint</db:link>(), <db:link xlink:href="qpainter.xml#drawPoints">drawPoints</db:link>(), <db:link xlink:href="qpainter.xml#drawLine">drawLine</db:link>(), <db:link xlink:href="qpainter.xml#drawRect">drawRect</db:link>(), <db:link xlink:href="qpainter.xml#drawRoundedRect">drawRoundedRect</db:link>(), <db:link xlink:href="qpainter.xml#drawEllipse">drawEllipse</db:link>(), <db:link xlink:href="qpainter.xml#drawArc">drawArc</db:link>(), <db:link xlink:href="qpainter.xml#drawPie">drawPie</db:link>(), <db:link xlink:href="qpainter.xml#drawChord">drawChord</db:link>(), <db:link xlink:href="qpainter.xml#drawPolyline">drawPolyline</db:link>(), <db:link xlink:href="qpainter.xml#drawPolygon">drawPolygon</db:link>(), <db:link xlink:href="qpainter.xml#drawConvexPolygon">drawConvexPolygon</db:link>() and drawCubicBezier(). The two convenience functions, <db:link xlink:href="qpainter.xml#drawRects">drawRects</db:link>() and <db:link xlink:href="qpainter.xml#drawLines">drawLines</db:link>(), draw the given number of rectangles or lines in the given array of <db:link xlink:href="qrect.xml">QRects</db:link> or <db:link xlink:href="qline.xml">QLines</db:link> using the current pen and brush.</db:para>
<db:para>The <db:link xlink:href="qpainter.xml">QPainter</db:link> class also provides the <db:link xlink:href="qpainter.xml#fillRect">fillRect</db:link>() function which fills the given <db:link xlink:href="qrect.xml">QRect</db:link>, with the given <db:link xlink:href="qbrush.xml">QBrush</db:link>, and the <db:link xlink:href="qpainter.xml#eraseRect">eraseRect</db:link>() function that erases the area inside the given rectangle.</db:para>
<db:para>All of these functions have both integer and floating point versions.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-basicdrawing.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Basic Drawing Example</db:emphasis></db:para>
<db:para>The <db:link xlink:href="qtwidgets-painting-basicdrawing-example.xml">Basic Drawing</db:link> example shows how to display basic graphics primitives in a variety of styles using the <db:link xlink:href="qpainter.xml">QPainter</db:link> class.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If you need to draw a complex shape, especially if you need to do so repeatedly, consider creating a <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> and drawing it using <db:link xlink:href="qpainter.xml#drawPath">drawPath</db:link>().</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Painter Paths example</db:emphasis></db:para>
<db:para>The <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> class provides a container for painting operations, enabling graphical shapes to be constructed and reused.</db:para>
<db:para>The <db:link xlink:href="qtwidgets-painting-painterpaths-example.xml">Painter Paths</db:link> example shows how painter paths can be used to build complex shapes for rendering.</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-painterpaths.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:link xlink:href="qpainter.xml">QPainter</db:link> also provides the <db:link xlink:href="qpainter.xml#fillPath">fillPath</db:link>() function which fills the given <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> with the given <db:link xlink:href="qbrush.xml">QBrush</db:link>, and the <db:link xlink:href="qpainter.xml#strokePath">strokePath</db:link>() function that draws the outline of the given path (i.e. strokes the path).</db:para>
<db:para>See also the <db:link xlink:href="qtwidgets-painting-deform-example.xml">Vector Deformation</db:link> example which shows how to use advanced vector techniques to draw text using a <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link>, the <db:link xlink:href="qtwidgets-painting-gradients-example.xml">Gradients</db:link> example which shows the different types of gradients that are available in Qt, and the <db:link xlink:href="qtwidgets-painting-pathstroke-example.xml">Path Stroking</db:link> example which shows Qt's built-in dash patterns and shows how custom patterns can be used to extend the range of available patterns.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:link xlink:href="qtwidgets-painting-deform-example.xml">Vector Deformation</db:link></db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qtwidgets-painting-gradients-example.xml">Gradients</db:link></db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qtwidgets-painting-pathstroke-example.xml">Path Stroking</db:link></db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-vectordeformation.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-gradients.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-pathstroking.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Text drawing is done using <db:link xlink:href="qpainter.xml#drawText">drawText</db:link>(). When you need fine-grained positioning, <db:link xlink:href="qpainter.xml#boundingRect">boundingRect</db:link>() tells you where a given <db:link xlink:href="qpainter.xml#drawText">drawText</db:link>() command will draw.</db:para>
</db:section>
<db:section xml:id="drawing-pixmaps-and-images">
<db:title>Drawing Pixmaps and Images</db:title>
<db:para>There are functions to draw pixmaps/images, namely <db:link xlink:href="qpainter.xml#drawPixmap">drawPixmap</db:link>(), <db:link xlink:href="qpainter.xml#drawImage">drawImage</db:link>() and <db:link xlink:href="qpainter.xml#drawTiledPixmap">drawTiledPixmap</db:link>(). Both <db:link xlink:href="qpainter.xml#drawPixmap">drawPixmap</db:link>() and <db:link xlink:href="qpainter.xml#drawImage">drawImage</db:link>() produce the same result, except that <db:link xlink:href="qpainter.xml#drawPixmap">drawPixmap</db:link>() is faster on-screen while <db:link xlink:href="qpainter.xml#drawImage">drawImage</db:link>() may be faster on a <db:link xlink:href="qprinter.xml">QPrinter</db:link> or other devices.</db:para>
<db:para>There is a <db:link xlink:href="qpainter.xml#drawPicture">drawPicture</db:link>() function that draws the contents of an entire <db:link xlink:href="qpicture.xml">QPicture</db:link>. The <db:link xlink:href="qpainter.xml#drawPicture">drawPicture</db:link>() function is the only function that disregards all the painter's settings as <db:link xlink:href="qpicture.xml">QPicture</db:link> has its own settings.</db:para>
<db:section xml:id="drawing-high-resolution-versions-of-pixmaps-and-images">
<db:title>Drawing High Resolution Versions of Pixmaps and Images</db:title>
<db:para>High resolution versions of pixmaps have a <db:emphasis>device pixel ratio</db:emphasis> value larger than 1 (see <db:link xlink:href="qimagereader.xml">QImageReader</db:link>, <db:link xlink:href="qpixmap.xml#devicePixelRatio">QPixmap::devicePixelRatio</db:link>()). Should it match the value of the underlying <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link>, it is drawn directly onto the device with no additional transformation applied.</db:para>
<db:para>This is for example the case when drawing a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> of 64x64 pixels size with a device pixel ratio of 2 onto a high DPI screen which also has a device pixel ratio of 2. Note that the pixmap is then effectively 32x32 pixels in <db:emphasis>user space</db:emphasis>. Code paths in Qt that calculate layout geometry based on the pixmap size will use this size. The net effect of this is that the pixmap is displayed as high DPI pixmap rather than a large pixmap.</db:para>
</db:section>
</db:section>
<db:section xml:id="rendering-quality">
<db:title>Rendering Quality</db:title>
<db:para>To get the optimal rendering result using <db:link xlink:href="qpainter.xml">QPainter</db:link>, you should use the platform independent <db:link xlink:href="qimage.xml">QImage</db:link> as paint device; i.e. using <db:link xlink:href="qimage.xml">QImage</db:link> will ensure that the result has an identical pixel representation on any platform.</db:para>
<db:para>The <db:link xlink:href="qpainter.xml">QPainter</db:link> class also provides a means of controlling the rendering quality through its <db:link xlink:href="qpainter.xml#RenderHint-enum">RenderHint</db:link> enum and the support for floating point precision: All the functions for drawing primitives has a floating point version. These are often used in combination with the <db:link xlink:href="qpainter.xml#RenderHint-enum">QPainter::Antialiasing</db:link> render hint.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-concentriccircles.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Concentric Circles Example</db:emphasis></db:para>
<db:para>The <db:link xlink:href="qtwidgets-painting-concentriccircles-example.xml">Concentric Circles</db:link> example shows the improved rendering quality that can be obtained using floating point precision and anti-aliasing when drawing custom widgets.</db:para>
<db:para>The application's main window displays several widgets which are drawn using the various combinations of precision and anti-aliasing.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:link xlink:href="qpainter.xml#RenderHint-enum">RenderHint</db:link> enum specifies flags to <db:link xlink:href="qpainter.xml">QPainter</db:link> that may or may not be respected by any given engine. <db:link xlink:href="qpainter.xml#RenderHint-enum">QPainter::Antialiasing</db:link> indicates that the engine should antialias edges of primitives if possible, <db:link xlink:href="qpainter.xml#RenderHint-enum">QPainter::TextAntialiasing</db:link> indicates that the engine should antialias text if possible, and the <db:link xlink:href="qpainter.xml#RenderHint-enum">QPainter::SmoothPixmapTransform</db:link> indicates that the engine should use a smooth pixmap transformation algorithm.</db:para>
<db:para>The <db:link xlink:href="qpainter.xml#renderHints">renderHints</db:link>() function returns a flag that specifies the rendering hints that are set for this painter. Use the <db:link xlink:href="qpainter.xml#setRenderHint">setRenderHint</db:link>() function to set or clear the currently set <db:link xlink:href="qpainter.xml#RenderHint-enum">RenderHints</db:link>.</db:para>
</db:section>
<db:section xml:id="coordinate-transformations">
<db:title>Coordinate Transformations</db:title>
<db:para>Normally, the <db:link xlink:href="qpainter.xml">QPainter</db:link> operates on the device's own coordinate system (usually pixels), but <db:link xlink:href="qpainter.xml">QPainter</db:link> has good support for coordinate transformations.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>nop</db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qpainter.xml#rotate">rotate</db:link>()</db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qpainter.xml#scale">scale</db:link>()</db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qpainter.xml#translate">translate</db:link>()</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-clock.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-rotation.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-scale.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-translation.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The most commonly used transformations are scaling, rotation, translation and shearing. Use the <db:link xlink:href="qpainter.xml#scale">scale</db:link>() function to scale the coordinate system by a given offset, the <db:link xlink:href="qpainter.xml#rotate">rotate</db:link>() function to rotate it clockwise and <db:link xlink:href="qpainter.xml#translate">translate</db:link>() to translate it (i.e. adding a given offset to the points). You can also twist the coordinate system around the origin using the <db:link xlink:href="qpainter.xml#shear">shear</db:link>() function. See the <db:link xlink:href="qtwidgets-painting-affine-example.xml">Affine Transformations</db:link> example for a visualization of a sheared coordinate system.</db:para>
<db:para>See also the <db:link xlink:href="qtwidgets-painting-transformations-example.xml">Transformations</db:link> example which shows how transformations influence the way that <db:link xlink:href="qpainter.xml">QPainter</db:link> renders graphics primitives. In particular it shows how the order of transformations affects the result.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Affine Transformations Example</db:emphasis></db:para>
<db:para>The <db:link xlink:href="qtwidgets-painting-affine-example.xml">Affine Transformations</db:link> example shows Qt's ability to perform affine transformations on painting operations. The demo also allows the user to experiment with the transformation operations and see the results immediately.</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-affinetransformations.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>All the tranformation operations operate on the transformation <db:link xlink:href="qpainter.xml#worldTransform">worldTransform</db:link>(). A matrix transforms a point in the plane to another point. For more information about the transformation matrix, see the <db:link xlink:href="coordsys.xml">Coordinate System</db:link> and <db:link xlink:href="qtransform.xml">QTransform</db:link> documentation.</db:para>
<db:para>The <db:link xlink:href="qpainter.xml#setWorldTransform">setWorldTransform</db:link>() function can replace or add to the currently set <db:link xlink:href="qpainter.xml#worldTransform">worldTransform</db:link>(). The <db:link xlink:href="qpainter.xml#resetTransform">resetTransform</db:link>() function resets any transformations that were made using <db:link xlink:href="qpainter.xml#translate">translate</db:link>(), <db:link xlink:href="qpainter.xml#scale">scale</db:link>(), <db:link xlink:href="qpainter.xml#shear">shear</db:link>(), <db:link xlink:href="qpainter.xml#rotate">rotate</db:link>(), <db:link xlink:href="qpainter.xml#setWorldTransform">setWorldTransform</db:link>(), <db:link xlink:href="qpainter.xml#setViewport">setViewport</db:link>() and <db:link xlink:href="qpainter.xml#setWindow">setWindow</db:link>() functions. The <db:link xlink:href="qpainter.xml#deviceTransform">deviceTransform</db:link>() returns the matrix that transforms from logical coordinates to device coordinates of the platform dependent paint device. The latter function is only needed when using platform painting commands on the platform dependent handle, and the platform does not do transformations nativly.</db:para>
<db:para>When drawing with <db:link xlink:href="qpainter.xml">QPainter</db:link>, we specify points using logical coordinates which then are converted into the physical coordinates of the paint device. The mapping of the logical coordinates to the physical coordinates are handled by <db:link xlink:href="qpainter.xml">QPainter</db:link>'s <db:link xlink:href="qpainter.xml#combinedTransform">combinedTransform</db:link>(), a combination of <db:link xlink:href="qpainter.xml#viewport">viewport</db:link>() and <db:link xlink:href="qpainter.xml#window">window</db:link>() and <db:link xlink:href="qpainter.xml#worldTransform">worldTransform</db:link>(). The <db:link xlink:href="qpainter.xml#viewport">viewport</db:link>() represents the physical coordinates specifying an arbitrary rectangle, the <db:link xlink:href="qpainter.xml#window">window</db:link>() describes the same rectangle in logical coordinates, and the <db:link xlink:href="qpainter.xml#worldTransform">worldTransform</db:link>() is identical with the transformation matrix.</db:para>
<db:para>See also <db:link xlink:href="coordsys.xml">Coordinate System</db:link></db:para>
</db:section>
<db:section xml:id="clipping">
<db:title>Clipping</db:title>
<db:para><db:link xlink:href="qpainter.xml">QPainter</db:link> can clip any drawing operation to a rectangle, a region, or a vector path. The current clip is available using the functions <db:link xlink:href="qpainter.xml#clipRegion">clipRegion</db:link>() and <db:link xlink:href="qpainter.xml#clipPath">clipPath</db:link>(). Whether paths or regions are preferred (faster) depends on the underlying <db:link xlink:href="qpainter.xml#paintEngine">paintEngine</db:link>(). For example, the <db:link xlink:href="qimage.xml">QImage</db:link> paint engine prefers paths while the X11 paint engine prefers regions. Setting a clip is done in the painters logical coordinates.</db:para>
<db:para>After <db:link xlink:href="qpainter.xml">QPainter</db:link>'s clipping, the paint device may also clip. For example, most widgets clip away the pixels used by child widgets, and most printers clip away an area near the edges of the paper. This additional clipping is not reflected by the return value of <db:link xlink:href="qpainter.xml#clipRegion">clipRegion</db:link>() or <db:link xlink:href="qpainter.xml#hasClipping">hasClipping</db:link>().</db:para>
</db:section>
<db:section xml:id="composition-modes">
<db:title>Composition Modes</db:title>
<db:anchor xml:id="composition-modes"/>
<db:para><db:link xlink:href="qpainter.xml">QPainter</db:link> provides the <db:link xlink:href="qpainter.xml#CompositionMode-enum">CompositionMode</db:link> enum which defines the Porter-Duff rules for digital image compositing; it describes a model for combining the pixels in one image, the source, with the pixels in another image, the destination.</db:para>
<db:para>The two most common forms of composition are <db:link xlink:href="qpainter.xml#CompositionMode-enum">Source</db:link> and <db:link xlink:href="qpainter.xml#CompositionMode-enum">SourceOver</db:link>. <db:link xlink:href="qpainter.xml#CompositionMode-enum">Source</db:link> is used to draw opaque objects onto a paint device. In this mode, each pixel in the source replaces the corresponding pixel in the destination. In <db:link xlink:href="qpainter.xml#CompositionMode-enum">SourceOver</db:link> composition mode, the source object is transparent and is drawn on top of the destination.</db:para>
<db:para>Note that composition transformation operates pixelwise. For that reason, there is a difference between using the graphic primitive itself and its bounding rectangle: The bounding rect contains pixels with alpha == 0 (i.e the pixels surrounding the primitive). These pixels will overwrite the other image's pixels, effectively clearing those, while the primitive only overwrites its own area.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-compositiondemo.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Composition Modes Example</db:emphasis></db:para>
<db:para>The <db:link xlink:href="qtwidgets-painting-composition-example.xml">Composition Modes</db:link> example, available in Qt's examples directory, allows you to experiment with the various composition modes and see the results immediately.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="limitations">
<db:title>Limitations</db:title>
<db:anchor xml:id="limitations"/>
<db:para>If you are using coordinates with Qt's raster-based paint engine, it is important to note that, while coordinates greater than +/- 2<db:superscript>15</db:superscript> can be used, any painting performed with coordinates outside this range is not guaranteed to be shown; the drawing may be clipped. This is due to the use of <db:code>short int</db:code> in the implementation.</db:para>
<db:para>The outlines generated by Qt's stroker are only an approximation when dealing with curved shapes. It is in most cases impossible to represent the outline of a bezier curve segment using another bezier curve segment, and so Qt approximates the curve outlines by using several smaller curves. For performance reasons there is a limit to how many curves Qt uses for these outlines, and thus when using large pen widths or scales the outline error increases. To generate outlines with smaller errors it is possible to use the <db:link xlink:href="qpainterpathstroker.xml">QPainterPathStroker</db:link> class, which has the setCurveThreshold member function which let's the user specify the error tolerance. Another workaround is to convert the paths to polygons first and then draw the polygons instead.</db:para>
</db:section>
<db:section xml:id="performance">
<db:title>Performance</db:title>
<db:para><db:link xlink:href="qpainter.xml">QPainter</db:link> is a rich framework that allows developers to do a great variety of graphical operations, such as gradients, composition modes and vector graphics. And <db:link xlink:href="qpainter.xml">QPainter</db:link> can do this across a variety of different hardware and software stacks. Naturally the underlying combination of hardware and software has some implications for performance, and ensuring that every single operation is fast in combination with all the various combinations of composition modes, brushes, clipping, transformation, etc, is close to an impossible task because of the number of permutations. As a compromise we have selected a subset of the <db:link xlink:href="qpainter.xml">QPainter</db:link> API and backends, where performance is guaranteed to be as good as we can sensibly get it for the given combination of hardware and software.</db:para>
<db:para>The backends we focus on as high-performance engines are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Raster - This backend implements all rendering in pure software and is always used to render into QImages. For optimal performance only use the format types <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_ARGB32_Premultiplied</db:link>, <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_RGB32</db:link> or <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_RGB16</db:link>. Any other format, including <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_ARGB32</db:link>, has significantly worse performance. This engine is used by default for <db:link xlink:href="qwidget.xml">QWidget</db:link> and <db:link xlink:href="qpixmap.xml">QPixmap</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>OpenGL 2.0 (ES) - This backend is the primary backend for hardware accelerated graphics. It can be run on desktop machines and embedded devices supporting the OpenGL 2.0 or OpenGL/ES 2.0 specification. This includes most graphics chips produced in the last couple of years. The engine can be enabled by using <db:link xlink:href="qpainter.xml">QPainter</db:link> onto a <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>These operations are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Simple transformations, meaning translation and scaling, pluss 0, 90, 180, 270 degree rotations.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>drawPixmap()</db:code> in combination with simple transformations and opacity with non-smooth transformation mode (<db:code>QPainter::SmoothPixmapTransform</db:code> not enabled as a render hint).</db:para>
</db:listitem>
<db:listitem>
<db:para>Rectangle fills with solid color, two-color linear gradients and simple transforms.</db:para>
</db:listitem>
<db:listitem>
<db:para>Rectangular clipping with simple transformations and intersect clip.</db:para>
</db:listitem>
<db:listitem>
<db:para>Composition Modes <db:code>QPainter::CompositionMode_Source</db:code> and <db:link xlink:href="qpainter.xml#CompositionMode-enum">QPainter::CompositionMode_SourceOver</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Rounded rectangle filling using solid color and two-color linear gradients fills.</db:para>
</db:listitem>
<db:listitem>
<db:para>3x3 patched pixmaps, via qDrawBorderPixmap.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This list gives an indication of which features to safely use in an application where performance is critical. For certain setups, other operations may be fast too, but before making extensive use of them, it is recommended to benchmark and verify them on the system where the software will run in the end. There are also cases where expensive operations are ok to use, for instance when the result is cached in a <db:link xlink:href="qpixmap.xml">QPixmap</db:link>.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link></db:member>
<db:member><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:member>
<db:member><db:link xlink:href="qtsvg-index.xml">Qt SVG</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-painting-basicdrawing-example.xml">Basic Drawing Example</db:link></db:member>
<db:member><db:link xlink:href="qdrawutil-h.xml">Drawing Utility Functions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CompositionMode-enum">
<db:title>enum QPainter::CompositionMode</db:title>
<db:enumsynopsis>
<db:enumname>CompositionMode</db:enumname>
<db:enumitem>
<db:enumidentifier>CompositionMode_SourceOver</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_DestinationOver</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_Clear</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_Source</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_Destination</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_SourceIn</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_DestinationIn</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_SourceOut</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_DestinationOut</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_SourceAtop</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_DestinationAtop</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_Xor</db:enumidentifier>
<db:enumvalue>11</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_Plus</db:enumidentifier>
<db:enumvalue>12</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_Multiply</db:enumidentifier>
<db:enumvalue>13</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_Screen</db:enumidentifier>
<db:enumvalue>14</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_Overlay</db:enumidentifier>
<db:enumvalue>15</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_Darken</db:enumidentifier>
<db:enumvalue>16</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_Lighten</db:enumidentifier>
<db:enumvalue>17</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_ColorDodge</db:enumidentifier>
<db:enumvalue>18</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_ColorBurn</db:enumidentifier>
<db:enumvalue>19</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_HardLight</db:enumidentifier>
<db:enumvalue>20</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_SoftLight</db:enumidentifier>
<db:enumvalue>21</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_Difference</db:enumidentifier>
<db:enumvalue>22</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompositionMode_Exclusion</db:enumidentifier>
<db:enumvalue>23</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RasterOp_SourceOrDestination</db:enumidentifier>
<db:enumvalue>24</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RasterOp_SourceAndDestination</db:enumidentifier>
<db:enumvalue>25</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RasterOp_SourceXorDestination</db:enumidentifier>
<db:enumvalue>26</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RasterOp_NotSourceAndNotDestination</db:enumidentifier>
<db:enumvalue>27</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RasterOp_NotSourceOrNotDestination</db:enumidentifier>
<db:enumvalue>28</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RasterOp_NotSourceXorDestination</db:enumidentifier>
<db:enumvalue>29</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RasterOp_NotSource</db:enumidentifier>
<db:enumvalue>30</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RasterOp_NotSourceAndDestination</db:enumidentifier>
<db:enumvalue>31</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RasterOp_SourceAndNotDestination</db:enumidentifier>
<db:enumvalue>32</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RasterOp_NotSourceOrDestination</db:enumidentifier>
<db:enumvalue>33</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RasterOp_SourceOrNotDestination</db:enumidentifier>
<db:enumvalue>34</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RasterOp_ClearDestination</db:enumidentifier>
<db:enumvalue>35</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RasterOp_SetDestination</db:enumidentifier>
<db:enumvalue>36</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RasterOp_NotDestination</db:enumidentifier>
<db:enumvalue>37</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Defines the modes supported for digital image compositing. Composition modes are used to specify how the pixels in one image, the source, are merged with the pixel in another image, the destination.</db:para>
<db:para>Please note that the bitwise raster operation modes, denoted with a RasterOp prefix, are only natively supported in the X11 and raster paint engines. This means that the only way to utilize these modes on the Mac is via a <db:link xlink:href="qimage.xml">QImage</db:link>. The RasterOp denoted blend modes are <db:emphasis>not</db:emphasis> supported for pens and brushes with alpha components. Also, turning on the <db:link xlink:href="qpainter.xml#RenderHint-enum">QPainter::Antialiasing</db:link> render hint will effectively disable the RasterOp modes.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-compositionmode1.png"/>
</db:imageobject>
</db:mediaobject>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-compositionmode2.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The most common type is SourceOver (often referred to as just alpha blending) where the source pixel is blended on top of the destination pixel in such a way that the alpha component of the source defines the translucency of the pixel.</db:para>
<db:para>Several composition modes require an alpha channel in the source or target images to have an effect. For optimal performance the image format <db:link xlink:href="qimage.xml#Format-enum">Format_ARGB32_Premultiplied</db:link> is preferred.</db:para>
<db:para>When a composition mode is set it applies to all painting operator, pens, brushes, gradients and pixmap/image drawing.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_SourceOver</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>This is the default mode. The alpha of the source is used to blend the pixel on top of the destination.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_DestinationOver</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The alpha of the destination is used to blend it on top of the source pixels. This mode is the inverse of CompositionMode_SourceOver.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_Clear</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The pixels in the destination are cleared (set to fully transparent) independent of the source.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_Source</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The output is the source pixel. (This means a basic copy operation and is identical to SourceOver when the source pixel is opaque).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_Destination</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The output is the destination pixel. This means that the blending has no effect. This mode is the inverse of CompositionMode_Source.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_SourceIn</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The output is the source, where the alpha is reduced by that of the destination.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_DestinationIn</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The output is the destination, where the alpha is reduced by that of the source. This mode is the inverse of CompositionMode_SourceIn.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_SourceOut</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The output is the source, where the alpha is reduced by the inverse of destination.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_DestinationOut</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>The output is the destination, where the alpha is reduced by the inverse of the source. This mode is the inverse of CompositionMode_SourceOut.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_SourceAtop</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>The source pixel is blended on top of the destination, with the alpha of the source pixel reduced by the alpha of the destination pixel.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_DestinationAtop</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>The destination pixel is blended on top of the source, with the alpha of the destination pixel is reduced by the alpha of the destination pixel. This mode is the inverse of CompositionMode_SourceAtop.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_Xor</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>The source, whose alpha is reduced with the inverse of the destination alpha, is merged with the destination, whose alpha is reduced by the inverse of the source alpha. CompositionMode_Xor is not the same as the bitwise Xor.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_Plus</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>Both the alpha and color of the source and destination pixels are added together.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_Multiply</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>The output is the source color multiplied by the destination. Multiplying a color with white leaves the color unchanged, while multiplying a color with black produces black.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_Screen</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td>
<db:para>The source and destination colors are inverted and then multiplied. Screening a color with white produces white, whereas screening a color with black leaves the color unchanged.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_Overlay</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
<db:td>
<db:para>Multiplies or screens the colors depending on the destination color. The destination color is mixed with the source color to reflect the lightness or darkness of the destination.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_Darken</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td>
<db:para>The darker of the source and destination colors is selected.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_Lighten</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
<db:td>
<db:para>The lighter of the source and destination colors is selected.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_ColorDodge</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
<db:td>
<db:para>The destination color is brightened to reflect the source color. A black source color leaves the destination color unchanged.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_ColorBurn</db:code></db:para>
</db:td>
<db:td><db:code>19</db:code></db:td>
<db:td>
<db:para>The destination color is darkened to reflect the source color. A white source color leaves the destination color unchanged.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_HardLight</db:code></db:para>
</db:td>
<db:td><db:code>20</db:code></db:td>
<db:td>
<db:para>Multiplies or screens the colors depending on the source color. A light source color will lighten the destination color, whereas a dark source color will darken the destination color.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_SoftLight</db:code></db:para>
</db:td>
<db:td><db:code>21</db:code></db:td>
<db:td>
<db:para>Darkens or lightens the colors depending on the source color. Similar to CompositionMode_HardLight.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_Difference</db:code></db:para>
</db:td>
<db:td><db:code>22</db:code></db:td>
<db:td>
<db:para>Subtracts the darker of the colors from the lighter. Painting with white inverts the destination color, whereas painting with black leaves the destination color unchanged.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::CompositionMode_Exclusion</db:code></db:para>
</db:td>
<db:td><db:code>23</db:code></db:td>
<db:td>
<db:para>Similar to CompositionMode_Difference, but with a lower contrast. Painting with white inverts the destination color, whereas painting with black leaves the destination color unchanged.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::RasterOp_SourceOrDestination</db:code></db:para>
</db:td>
<db:td><db:code>24</db:code></db:td>
<db:td>
<db:para>Does a bitwise OR operation on the source and destination pixels (src OR dst).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::RasterOp_SourceAndDestination</db:code></db:para>
</db:td>
<db:td><db:code>25</db:code></db:td>
<db:td>
<db:para>Does a bitwise AND operation on the source and destination pixels (src AND dst).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::RasterOp_SourceXorDestination</db:code></db:para>
</db:td>
<db:td><db:code>26</db:code></db:td>
<db:td>
<db:para>Does a bitwise XOR operation on the source and destination pixels (src XOR dst).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::RasterOp_NotSourceAndNotDestination</db:code></db:para>
</db:td>
<db:td><db:code>27</db:code></db:td>
<db:td>
<db:para>Does a bitwise NOR operation on the source and destination pixels ((NOT src) AND (NOT dst)).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::RasterOp_NotSourceOrNotDestination</db:code></db:para>
</db:td>
<db:td><db:code>28</db:code></db:td>
<db:td>
<db:para>Does a bitwise NAND operation on the source and destination pixels ((NOT src) OR (NOT dst)).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::RasterOp_NotSourceXorDestination</db:code></db:para>
</db:td>
<db:td><db:code>29</db:code></db:td>
<db:td>
<db:para>Does a bitwise operation where the source pixels are inverted and then XOR'ed with the destination ((NOT src) XOR dst).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::RasterOp_NotSource</db:code></db:para>
</db:td>
<db:td><db:code>30</db:code></db:td>
<db:td>
<db:para>Does a bitwise operation where the source pixels are inverted (NOT src).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::RasterOp_NotSourceAndDestination</db:code></db:para>
</db:td>
<db:td><db:code>31</db:code></db:td>
<db:td>
<db:para>Does a bitwise operation where the source is inverted and then AND'ed with the destination ((NOT src) AND dst).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::RasterOp_SourceAndNotDestination</db:code></db:para>
</db:td>
<db:td><db:code>32</db:code></db:td>
<db:td>
<db:para>Does a bitwise operation where the source is AND'ed with the inverted destination pixels (src AND (NOT dst)).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::RasterOp_NotSourceOrDestination</db:code></db:para>
</db:td>
<db:td><db:code>33</db:code></db:td>
<db:td>
<db:para>Does a bitwise operation where the source is inverted and then OR'ed with the destination ((NOT src) OR dst).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::RasterOp_ClearDestination</db:code></db:para>
</db:td>
<db:td><db:code>35</db:code></db:td>
<db:td>
<db:para>The pixels in the destination are cleared (set to 0) independent of the source.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::RasterOp_SetDestination</db:code></db:para>
</db:td>
<db:td><db:code>36</db:code></db:td>
<db:td>
<db:para>The pixels in the destination are set (set to 1) independent of the source.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::RasterOp_NotDestination</db:code></db:para>
</db:td>
<db:td><db:code>37</db:code></db:td>
<db:td>
<db:para>Does a bitwise operation where the destination pixels are inverted (NOT dst).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::RasterOp_SourceOrNotDestination</db:code></db:para>
</db:td>
<db:td><db:code>34</db:code></db:td>
<db:td>
<db:para>Does a bitwise operation where the source is OR'ed with the inverted destination pixels (src OR (NOT dst)).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#compositionMode">compositionMode</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setCompositionMode">setCompositionMode</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#composition-modes">Composition Modes</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-painting-imagecomposition-example.xml">Image Composition Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="PixmapFragmentHint-enum">
<db:title>enum QPainter::PixmapFragmentHint</db:title>
<db:bridgehead renderas="sect2">flags QPainter::PixmapFragmentHints</db:bridgehead>
<db:enumsynopsis>
<db:enumname>PixmapFragmentHint</db:enumname>
<db:enumitem>
<db:enumidentifier>OpaqueHint</db:enumidentifier>
<db:enumvalue>0x01</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QPainter::PixmapFragmentHints</db:typedefname>
</db:typedefsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::OpaqueHint</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Indicates that the pixmap fragments to be drawn are opaque. Opaque fragments are potentially faster to draw.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>PixmapFragmentHints</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;PixmapFragmentHint&gt;. </db:code>It stores an OR combination of <db:code>PixmapFragmentHint</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#drawPixmapFragments">QPainter::drawPixmapFragments</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter-pixmapfragment.xml">QPainter::PixmapFragment</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="RenderHint-enum">
<db:title>enum QPainter::RenderHint</db:title>
<db:bridgehead renderas="sect2">flags QPainter::RenderHints</db:bridgehead>
<db:enumsynopsis>
<db:enumname>RenderHint</db:enumname>
<db:enumitem>
<db:enumidentifier>Antialiasing</db:enumidentifier>
<db:enumvalue>0x01</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TextAntialiasing</db:enumidentifier>
<db:enumvalue>0x02</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SmoothPixmapTransform</db:enumidentifier>
<db:enumvalue>0x04</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>VerticalSubpixelPositioning</db:enumidentifier>
<db:enumvalue>0x08</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LosslessImageRendering</db:enumidentifier>
<db:enumvalue>0x40</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QPainter::RenderHints</db:typedefname>
</db:typedefsynopsis>
<db:para>Renderhints are used to specify flags to <db:link xlink:href="qpainter.xml">QPainter</db:link> that may or may not be respected by any given engine.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::Antialiasing</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Indicates that the engine should antialias edges of primitives if possible.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::TextAntialiasing</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Indicates that the engine should antialias text if possible. To forcibly disable antialiasing for text, do not use this hint. Instead, set <db:link xlink:href="qfont.xml#StyleStrategy-enum">QFont::NoAntialias</db:link> on your font's style strategy.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::SmoothPixmapTransform</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>Indicates that the engine should use a smooth pixmap transformation algorithm (such as bilinear) rather than nearest neighbor.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::VerticalSubpixelPositioning</db:code></db:para>
</db:td>
<db:td><db:code>0x08</db:code></db:td>
<db:td>
<db:para>Allow text to be positioned at fractions of pixels vertically as well as horizontally, if this is supported by the font engine. This is currently supported by Freetype on all platforms when the hinting preference is <db:link xlink:href="qfont.xml#HintingPreference-enum">QFont::PreferNoHinting</db:link>, and also on macOS. For most use cases this will not improve visual quality, but may increase memory consumption and some reduction in text rendering performance. Therefore, enabling this is not recommended unless the use case requires it. One such use case could be aligning glyphs with other visual primitives. This value was added in Qt 6.1.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainter.xml">QPainter</db:link></db:emphasis>::LosslessImageRendering</db:code></db:para>
</db:td>
<db:td><db:code>0x40</db:code></db:td>
<db:td>
<db:para>Use a lossless image rendering, whenever possible. Currently, this hint is only used when <db:link xlink:href="qpainter.xml">QPainter</db:link> is employed to output a PDF file through <db:link xlink:href="qprinter.xml">QPrinter</db:link> or <db:link xlink:href="qpdfwriter.xml">QPdfWriter</db:link>, where <db:link xlink:href="qpainter.xml#drawImage">drawImage</db:link>()/<db:link xlink:href="qpainter.xml#drawPixmap">drawPixmap</db:link>() calls will encode images using a lossless compression algorithm instead of lossy JPEG compression. This value was added in Qt 5.13.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>RenderHints</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;RenderHint&gt;. </db:code>It stores an OR combination of <db:code>RenderHint</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#renderHints">renderHints</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setRenderHint">setRenderHint</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#rendering-quality">Rendering Quality</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-painting-concentriccircles-example.xml">Concentric Circles Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPainter">
<db:title>QPainter::QPainter()</db:title>
<db:constructorsynopsis>
<db:methodname>QPainter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a painter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPainter-1">
<db:title>[explicit] QPainter::QPainter(QPaintDevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPainter</db:methodname>
<db:methodparam>
<db:type>QPaintDevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainter(QPaintDevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a painter that begins painting the paint <db:code role="parameter">device</db:code> immediately.</db:para>
<db:para>This constructor is convenient for short-lived painters, e.g. in a <db:link xlink:href="qwidget.xml#paintEvent">QWidget::paintEvent</db:link>() and should be used only once. The constructor calls <db:link xlink:href="qpainter.xml#begin">begin</db:link>() for you and the <db:link xlink:href="qpainter.xml">QPainter</db:link> destructor automatically calls <db:link xlink:href="qpainter.xml#end">end</db:link>().</db:para>
<db:para>Here's an example using <db:link xlink:href="qpainter.xml#begin">begin</db:link>() and <db:link xlink:href="qpainter.xml#end">end</db:link>():</db:para>
<db:programlisting language="cpp">void MyWidget::paintEvent(QPaintEvent *)
{
    QPainter p;
    p.begin(this);
    p.drawLine(drawingCode);        // drawing code
    p.end();
}
</db:programlisting>
<db:para>The same example using this constructor:</db:para>
<db:programlisting language="cpp">void MyWidget::paintEvent(QPaintEvent *)
{
    QPainter p(this);
    p.drawLine(drawingCode);        // drawing code
}
</db:programlisting>
<db:para>Since the constructor cannot provide feedback when the initialization of the painter failed you should rather use <db:link xlink:href="qpainter.xml#begin">begin</db:link>() and <db:link xlink:href="qpainter.xml#end">end</db:link>() to paint on external devices, e.g. printers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QPainter">
<db:title>QPainter::~QPainter()</db:title>
<db:destructorsynopsis>
<db:methodname>~QPainter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPainter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the painter.</db:para>
</db:section>
<db:section xml:id="background">
<db:title>const QBrush &amp;QPainter::background() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QBrush &amp;</db:type>
<db:methodname>background</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QBrush &amp; background() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current background brush.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setBackground">setBackground</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#settings">Settings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="backgroundMode">
<db:title>Qt::BGMode QPainter::backgroundMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::BGMode</db:type>
<db:methodname>backgroundMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::BGMode backgroundMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current background mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setBackgroundMode">setBackgroundMode</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#settings">Settings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="begin">
<db:title>bool QPainter::begin(QPaintDevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>begin</db:methodname>
<db:methodparam>
<db:type>QPaintDevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool begin(QPaintDevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Begins painting the paint <db:code role="parameter">device</db:code> and returns <db:code>true</db:code> if successful; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Notice that all painter settings (<db:link xlink:href="qpainter.xml#setPen">setPen</db:link>(), <db:link xlink:href="qpainter.xml#setBrush">setBrush</db:link>() etc.) are reset to default values when begin() is called.</db:para>
<db:para>The errors that can occur are serious problems, such as these:</db:para>
<db:programlisting language="cpp">painter-&amp;gt;begin(0); // impossible - paint device cannot be 0

QPixmap image(0, 0);
painter-&amp;gt;begin(&amp;amp;image); // impossible - image.isNull() == true;

painter-&amp;gt;begin(myWidget);
painter2-&amp;gt;begin(myWidget); // impossible - only one painter at a time
</db:programlisting>
<db:para>Note that most of the time, you can use one of the constructors instead of begin(), and that <db:link xlink:href="qpainter.xml#end">end</db:link>() is automatically done at destruction.</db:para>
<db:warning>
<db:para>A paint device can only be painted by one painter at a time.</db:para>
</db:warning>
<db:warning>
<db:para>Painting on a <db:link xlink:href="qimage.xml">QImage</db:link> with the format <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_Indexed8</db:link> is not supported.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#QPainter">QPainter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginNativePainting">
<db:title>void QPainter::beginNativePainting()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>beginNativePainting</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void beginNativePainting()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Flushes the painting pipeline and prepares for the user issuing commands directly to the underlying graphics context. Must be followed by a call to <db:link xlink:href="qpainter.xml#endNativePainting">endNativePainting</db:link>().</db:para>
<db:para>Note that only the states the underlying paint engine changes will be reset to their respective default states. The states we reset may change from release to release. The following states are currently reset in the OpenGL 2 engine:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>blending is disabled</db:para>
</db:listitem>
<db:listitem>
<db:para>the depth, stencil and scissor tests are disabled</db:para>
</db:listitem>
<db:listitem>
<db:para>the active texture unit is reset to 0</db:para>
</db:listitem>
<db:listitem>
<db:para>the depth mask, depth function and the clear depth are reset to their default values</db:para>
</db:listitem>
<db:listitem>
<db:para>the stencil mask, stencil operation and stencil function are reset to their default values</db:para>
</db:listitem>
<db:listitem>
<db:para>the current color is reset to solid white</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If, for example, the OpenGL polygon mode is changed by the user inside a beginNativePaint()/<db:link xlink:href="qpainter.xml#endNativePainting">endNativePainting</db:link>() block, it will not be reset to the default state by <db:link xlink:href="qpainter.xml#endNativePainting">endNativePainting</db:link>(). Here is an example that shows intermixing of painter commands and raw OpenGL commands:</db:para>
<db:programlisting language="cpp">QPainter painter(this);
painter.fillRect(0, 0, 128, 128, Qt::green);
painter.beginNativePainting();

glEnable(GL_SCISSOR_TEST);
glScissor(0, 0, 64, 64);

glClearColor(1, 0, 0, 1);
glClear(GL_COLOR_BUFFER_BIT);

glDisable(GL_SCISSOR_TEST);

painter.endNativePainting();
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#endNativePainting">endNativePainting</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundingRect">
<db:title>QRectF QPainter::boundingRect(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>, int <db:emphasis>flags</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRectF</db:type>
<db:methodname>boundingRect</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF boundingRect(const QRectF &amp;rectangle, int flags, const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the bounding rectangle of the <db:code role="parameter">text</db:code> as it will appear when drawn inside the given <db:code role="parameter">rectangle</db:code> with the specified <db:code role="parameter">flags</db:code> using the currently set <db:link xlink:href="qpainter.xml#font">font</db:link>(); i.e the function tells you where the <db:link xlink:href="qpainter.xml#drawText">drawText</db:link>() function will draw when given the same arguments.</db:para>
<db:para>If the <db:code role="parameter">text</db:code> does not fit within the given <db:code role="parameter">rectangle</db:code> using the specified <db:code role="parameter">flags</db:code>, the function returns the required rectangle.</db:para>
<db:para>The <db:code role="parameter">flags</db:code> argument is a bitwise OR of the following flags:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignLeft</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignRight</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignHCenter</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignTop</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignBottom</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignVCenter</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignCenter</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextSingleLine</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextExpandTabs</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextShowMnemonic</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextWordWrap</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextIncludeTrailingSpaces</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If several of the horizontal or several of the vertical alignment flags are set, the resulting alignment is undefined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#drawText">drawText</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:member>
<db:member><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextFlag</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundingRect-1">
<db:title>QRect QPainter::boundingRect(const QRect &amp;<db:emphasis>rectangle</db:emphasis>, int <db:emphasis>flags</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRect</db:type>
<db:methodname>boundingRect</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect boundingRect(const QRect &amp;rectangle, int flags, const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the bounding rectangle of the <db:code role="parameter">text</db:code> as it will appear when drawn inside the given <db:code role="parameter">rectangle</db:code> with the specified <db:code role="parameter">flags</db:code> using the currently set <db:link xlink:href="qpainter.xml#font">font</db:link>().</db:para>
</db:section>
<db:section xml:id="boundingRect-2">
<db:title>QRect QPainter::boundingRect(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>w</db:emphasis>, int <db:emphasis>h</db:emphasis>, int <db:emphasis>flags</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRect</db:type>
<db:methodname>boundingRect</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect boundingRect(int x, int y, int w, int h, int flags, const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the bounding rectangle of the given <db:code role="parameter">text</db:code> as it will appear when drawn inside the rectangle beginning at the point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) with width <db:code role="parameter">w</db:code> and height <db:code role="parameter">h</db:code>.</db:para>
</db:section>
<db:section xml:id="boundingRect-3">
<db:title>QRectF QPainter::boundingRect(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, const QTextOption &amp;<db:emphasis>option</db:emphasis> = QTextOption())</db:title>
<db:methodsynopsis>
<db:type>QRectF</db:type>
<db:methodname>boundingRect</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTextOption &amp;</db:type>
<db:parameter>option</db:parameter>
<db:initializer>QTextOption()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF boundingRect(const QRectF &amp;rectangle, const QString &amp;text, const QTextOption &amp;option)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Instead of specifying flags as a bitwise OR of the <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignmentFlag</db:link> and <db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextFlag</db:link>, this overloaded function takes an <db:code role="parameter">option</db:code> argument. The <db:link xlink:href="qtextoption.xml">QTextOption</db:link> class provides a description of general rich text properties.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextoption.xml">QTextOption</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="brush">
<db:title>const QBrush &amp;QPainter::brush() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QBrush &amp;</db:type>
<db:methodname>brush</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QBrush &amp; brush() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the painter's current brush.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setBrush">QPainter::setBrush</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#settings">Settings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="brushOrigin">
<db:title>QPoint QPainter::brushOrigin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>brushOrigin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint brushOrigin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the currently set brush origin.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setBrushOrigin">setBrushOrigin</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#settings">Settings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clipBoundingRect">
<db:title>QRectF QPainter::clipBoundingRect() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>clipBoundingRect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF clipBoundingRect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the bounding rectangle of the current clip if there is a clip; otherwise returns an empty rectangle. Note that the clip region is given in logical coordinates.</db:para>
<db:para>The bounding rectangle is not guaranteed to be tight.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setClipRect">setClipRect</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setClipPath">setClipPath</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setClipRegion">setClipRegion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clipPath">
<db:title>QPainterPath QPainter::clipPath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPainterPath</db:type>
<db:methodname>clipPath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainterPath clipPath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current clip path in logical coordinates.</db:para>
<db:warning>
<db:para><db:link xlink:href="qpainter.xml">QPainter</db:link> does not store the combined clip explicitly as this is handled by the underlying <db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link>, so the path is recreated on demand and transformed to the current logical coordinate system. This is potentially an expensive operation.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setClipPath">setClipPath</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#clipRegion">clipRegion</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setClipping">setClipping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clipRegion">
<db:title>QRegion QPainter::clipRegion() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>clipRegion</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion clipRegion() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the currently set clip region. Note that the clip region is given in logical coordinates.</db:para>
<db:warning>
<db:para><db:link xlink:href="qpainter.xml">QPainter</db:link> does not store the combined clip explicitly as this is handled by the underlying <db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link>, so the path is recreated on demand and transformed to the current logical coordinate system. This is potentially an expensive operation.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setClipRegion">setClipRegion</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#clipPath">clipPath</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setClipping">setClipping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="combinedTransform">
<db:title>QTransform QPainter::combinedTransform() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTransform</db:type>
<db:methodname>combinedTransform</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTransform combinedTransform() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the transformation matrix combining the current window/viewport and world transformation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setWorldTransform">setWorldTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setWindow">setWindow</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setViewport">setViewport</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compositionMode">
<db:title>QPainter::CompositionMode QPainter::compositionMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPainter::CompositionMode</db:type>
<db:methodname>compositionMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainter::CompositionMode compositionMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current composition mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#CompositionMode-enum">CompositionMode</db:link></db:member>
<db:member><db:link xlink:href="qpainter.xml#setCompositionMode">setCompositionMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="device">
<db:title>QPaintDevice *QPainter::device() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPaintDevice *</db:type>
<db:methodname>device</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPaintDevice * device() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the paint device on which this painter is currently painting, or <db:code>nullptr</db:code> if the painter is not active.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#isActive">isActive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deviceTransform">
<db:title>const QTransform &amp;QPainter::deviceTransform() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QTransform &amp;</db:type>
<db:methodname>deviceTransform</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QTransform &amp; deviceTransform() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the matrix that transforms from logical coordinates to device coordinates of the platform dependent paint device.</db:para>
<db:para>This function is <db:emphasis>only</db:emphasis> needed when using platform painting commands on the platform dependent handle (<db:link xlink:href="qt.xml#HANDLE-typedef">Qt::HANDLE</db:link>), and the platform does not do transformations nativly.</db:para>
<db:para>The <db:link xlink:href="qpaintengine.xml#PaintEngineFeature-enum">QPaintEngine::PaintEngineFeature</db:link> enum can be queried to determine whether the platform performs the transformations or not.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#worldTransform">worldTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintengine.xml#hasFeature">QPaintEngine::hasFeature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawArc">
<db:title>void QPainter::drawArc(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>, int <db:emphasis>startAngle</db:emphasis>, int <db:emphasis>spanAngle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawArc</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>startAngle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>spanAngle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawArc(const QRectF &amp;rectangle, int startAngle, int spanAngle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the arc defined by the given <db:code role="parameter">rectangle</db:code>, <db:code role="parameter">startAngle</db:code> and <db:code role="parameter">spanAngle</db:code>.</db:para>
<db:para>The <db:code role="parameter">startAngle</db:code> and <db:code role="parameter">spanAngle</db:code> must be specified in 1/16th of a degree, i.e. a full circle equals 5760 (16 * 360). Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-arc.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">QRectF rectangle(10.0, 20.0, 80.0, 60.0);
int startAngle = 30 * 16;
int spanAngle = 120 * 16;

QPainter painter(this);
painter.drawArc(rectangle, startAngle, spanAngle);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#drawPie">drawPie</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawChord">drawChord</db:link>()</db:member>
<db:member><db:link xlink:href="coordsys.xml">Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawArc-1">
<db:title>void QPainter::drawArc(const QRect &amp;<db:emphasis>rectangle</db:emphasis>, int <db:emphasis>startAngle</db:emphasis>, int <db:emphasis>spanAngle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawArc</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>startAngle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>spanAngle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawArc(const QRect &amp;rectangle, int startAngle, int spanAngle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the arc defined by the given <db:code role="parameter">rectangle</db:code>, <db:code role="parameter">startAngle</db:code> and <db:code role="parameter">spanAngle</db:code>.</db:para>
</db:section>
<db:section xml:id="drawArc-2">
<db:title>void QPainter::drawArc(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, int <db:emphasis>startAngle</db:emphasis>, int <db:emphasis>spanAngle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawArc</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>startAngle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>spanAngle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawArc(int x, int y, int width, int height, int startAngle, int spanAngle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the arc defined by the rectangle beginning at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) with the specified <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>, and the given <db:code role="parameter">startAngle</db:code> and <db:code role="parameter">spanAngle</db:code>.</db:para>
</db:section>
<db:section xml:id="drawChord">
<db:title>void QPainter::drawChord(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>, int <db:emphasis>startAngle</db:emphasis>, int <db:emphasis>spanAngle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawChord</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>startAngle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>spanAngle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawChord(const QRectF &amp;rectangle, int startAngle, int spanAngle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the chord defined by the given <db:code role="parameter">rectangle</db:code>, <db:code role="parameter">startAngle</db:code> and <db:code role="parameter">spanAngle</db:code>. The chord is filled with the current <db:link xlink:href="qpainter.xml#brush">brush</db:link>().</db:para>
<db:para>The startAngle and spanAngle must be specified in 1/16th of a degree, i.e. a full circle equals 5760 (16 * 360). Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-chord.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">QRectF rectangle(10.0, 20.0, 80.0, 60.0);
int startAngle = 30 * 16;
int spanAngle = 120 * 16;

QPainter painter(this);
painter.drawChord(rect, startAngle, spanAngle);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#drawArc">drawArc</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawPie">drawPie</db:link>()</db:member>
<db:member><db:link xlink:href="coordsys.xml">Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawChord-1">
<db:title>void QPainter::drawChord(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, int <db:emphasis>startAngle</db:emphasis>, int <db:emphasis>spanAngle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawChord</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>startAngle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>spanAngle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawChord(int x, int y, int width, int height, int startAngle, int spanAngle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the chord defined by the rectangle beginning at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) with the specified <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>, and the given <db:code role="parameter">startAngle</db:code> and <db:code role="parameter">spanAngle</db:code>.</db:para>
</db:section>
<db:section xml:id="drawChord-2">
<db:title>void QPainter::drawChord(const QRect &amp;<db:emphasis>rectangle</db:emphasis>, int <db:emphasis>startAngle</db:emphasis>, int <db:emphasis>spanAngle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawChord</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>startAngle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>spanAngle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawChord(const QRect &amp;rectangle, int startAngle, int spanAngle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the chord defined by the given <db:code role="parameter">rectangle</db:code>, <db:code role="parameter">startAngle</db:code> and <db:code role="parameter">spanAngle</db:code>.</db:para>
</db:section>
<db:section xml:id="drawConvexPolygon">
<db:title>void QPainter::drawConvexPolygon(const QPointF *<db:emphasis>points</db:emphasis>, int <db:emphasis>pointCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawConvexPolygon</db:methodname>
<db:methodparam>
<db:type>const QPointF *</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pointCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawConvexPolygon(const QPointF *points, int pointCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the convex polygon defined by the first <db:code role="parameter">pointCount</db:code> points in the array <db:code role="parameter">points</db:code> using the current pen.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-polygon.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">static const QPointF points[4] = {
    QPointF(10.0, 80.0),
    QPointF(20.0, 10.0),
    QPointF(80.0, 30.0),
    QPointF(90.0, 70.0)
};

QPainter painter(this);
painter.drawConvexPolygon(points, 4);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The first point is implicitly connected to the last point, and the polygon is filled with the current <db:link xlink:href="qpainter.xml#brush">brush</db:link>(). If the supplied polygon is not convex, i.e. it contains at least one angle larger than 180 degrees, the results are undefined.</db:para>
<db:para>On some platforms (e.g. X11), the drawConvexPolygon() function can be faster than the <db:link xlink:href="qpainter.xml#drawPolygon">drawPolygon</db:link>() function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#drawPolygon">drawPolygon</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawPolyline">drawPolyline</db:link>()</db:member>
<db:member><db:link xlink:href="coordsys.xml">Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawConvexPolygon-1">
<db:title>void QPainter::drawConvexPolygon(const QPolygonF &amp;<db:emphasis>polygon</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawConvexPolygon</db:methodname>
<db:methodparam>
<db:type>const QPolygonF &amp;</db:type>
<db:parameter>polygon</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawConvexPolygon(const QPolygonF &amp;polygon)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the convex polygon defined by <db:code role="parameter">polygon</db:code> using the current pen and brush.</db:para>
</db:section>
<db:section xml:id="drawConvexPolygon-2">
<db:title>void QPainter::drawConvexPolygon(const QPoint *<db:emphasis>points</db:emphasis>, int <db:emphasis>pointCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawConvexPolygon</db:methodname>
<db:methodparam>
<db:type>const QPoint *</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pointCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawConvexPolygon(const QPoint *points, int pointCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the convex polygon defined by the first <db:code role="parameter">pointCount</db:code> points in the array <db:code role="parameter">points</db:code> using the current pen.</db:para>
</db:section>
<db:section xml:id="drawConvexPolygon-3">
<db:title>void QPainter::drawConvexPolygon(const QPolygon &amp;<db:emphasis>polygon</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawConvexPolygon</db:methodname>
<db:methodparam>
<db:type>const QPolygon &amp;</db:type>
<db:parameter>polygon</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawConvexPolygon(const QPolygon &amp;polygon)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the convex polygon defined by <db:code role="parameter">polygon</db:code> using the current pen and brush.</db:para>
</db:section>
<db:section xml:id="drawEllipse">
<db:title>void QPainter::drawEllipse(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawEllipse</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawEllipse(const QRectF &amp;rectangle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the ellipse defined by the given <db:code role="parameter">rectangle</db:code>.</db:para>
<db:para>A filled ellipse has a size of <db:code role="parameter">rectangle</db:code>.<db:link xlink:href="qrect.xml#size">size</db:link>(). A stroked ellipse has a size of <db:code role="parameter">rectangle</db:code>.<db:link xlink:href="qrect.xml#size">size</db:link>() plus the pen width.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-ellipse.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">QRectF rectangle(10.0, 20.0, 80.0, 60.0);

QPainter painter(this);
painter.drawEllipse(rectangle);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#drawPie">drawPie</db:link>()</db:member>
<db:member><db:link xlink:href="coordsys.xml">Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawEllipse-1">
<db:title>void QPainter::drawEllipse(const QRect &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawEllipse</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawEllipse(const QRect &amp;rectangle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the ellipse defined by the given <db:code role="parameter">rectangle</db:code>.</db:para>
</db:section>
<db:section xml:id="drawEllipse-2">
<db:title>void QPainter::drawEllipse(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawEllipse</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawEllipse(int x, int y, int width, int height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the ellipse defined by the rectangle beginning at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>.</db:para>
</db:section>
<db:section xml:id="drawEllipse-3">
<db:title>void QPainter::drawEllipse(const QPointF &amp;<db:emphasis>center</db:emphasis>, qreal <db:emphasis>rx</db:emphasis>, qreal <db:emphasis>ry</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawEllipse</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>center</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>rx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>ry</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawEllipse(const QPointF &amp;center, qreal rx, qreal ry)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the ellipse positioned at <db:code role="parameter">center</db:code> with radii <db:code role="parameter">rx</db:code> and <db:code role="parameter">ry</db:code>.</db:para>
</db:section>
<db:section xml:id="drawEllipse-4">
<db:title>void QPainter::drawEllipse(const QPoint &amp;<db:emphasis>center</db:emphasis>, int <db:emphasis>rx</db:emphasis>, int <db:emphasis>ry</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawEllipse</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>center</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>ry</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawEllipse(const QPoint &amp;center, int rx, int ry)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the ellipse positioned at <db:code role="parameter">center</db:code> with radii <db:code role="parameter">rx</db:code> and <db:code role="parameter">ry</db:code>.</db:para>
</db:section>
<db:section xml:id="drawGlyphRun">
<db:title>void QPainter::drawGlyphRun(const QPointF &amp;<db:emphasis>position</db:emphasis>, const QGlyphRun &amp;<db:emphasis>glyphs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawGlyphRun</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QGlyphRun &amp;</db:type>
<db:parameter>glyphs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawGlyphRun(const QPointF &amp;position, const QGlyphRun &amp;glyphs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the glyphs represented by <db:code role="parameter">glyphs</db:code> at <db:code role="parameter">position</db:code>. The <db:code role="parameter">position</db:code> gives the edge of the baseline for the string of glyphs. The glyphs will be retrieved from the font selected on <db:code role="parameter">glyphs</db:code> and at offsets given by the positions in <db:code role="parameter">glyphs</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglyphrun.xml#setRawFont">QGlyphRun::setRawFont</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml#setPositions">QGlyphRun::setPositions</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml#setGlyphIndexes">QGlyphRun::setGlyphIndexes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawImage">
<db:title>void QPainter::drawImage(const QRectF &amp;<db:emphasis>target</db:emphasis>, const QImage &amp;<db:emphasis>image</db:emphasis>, const QRectF &amp;<db:emphasis>source</db:emphasis>, Qt::ImageConversionFlags <db:emphasis>flags</db:emphasis> = Qt::AutoColor)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawImage</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ImageConversionFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::AutoColor</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawImage(const QRectF &amp;target, const QImage &amp;image, const QRectF &amp;source, Qt::ImageConversionFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the rectangular portion <db:code role="parameter">source</db:code> of the given <db:code role="parameter">image</db:code> into the <db:code role="parameter">target</db:code> rectangle in the paint device.</db:para>
<db:note>
<db:para>The image is scaled to fit the rectangle, if both the image and rectangle size disagree.</db:para>
</db:note>
<db:note>
<db:para>See <db:link xlink:href="qpainter.xml#drawing-high-resolution-versions-of-pixmaps-and-images">Drawing High Resolution Versions of Pixmaps and Images</db:link> on how this is affected by <db:link xlink:href="qimage.xml#devicePixelRatio">QImage::devicePixelRatio</db:link>().</db:para>
</db:note>
<db:para>If the image needs to be modified to fit in a lower-resolution result (e.g. converting from 32-bit to 8-bit), use the <db:code role="parameter">flags</db:code> to specify how you would prefer this to happen.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:programlisting language="cpp">QRectF target(10.0, 20.0, 80.0, 60.0);
QRectF source(0.0, 0.0, 70.0, 40.0);
QImage image(&quot;:/images/myImage.png&quot;);

QPainter painter(this);
painter.drawImage(target, image, source);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#drawPixmap">drawPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qimage.xml#devicePixelRatio">QImage::devicePixelRatio</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawImage-1">
<db:title>void QPainter::drawImage(const QRect &amp;<db:emphasis>target</db:emphasis>, const QImage &amp;<db:emphasis>image</db:emphasis>, const QRect &amp;<db:emphasis>source</db:emphasis>, Qt::ImageConversionFlags <db:emphasis>flags</db:emphasis> = Qt::AutoColor)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawImage</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ImageConversionFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::AutoColor</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawImage(const QRect &amp;target, const QImage &amp;image, const QRect &amp;source, Qt::ImageConversionFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the rectangular portion <db:code role="parameter">source</db:code> of the given <db:code role="parameter">image</db:code> into the <db:code role="parameter">target</db:code> rectangle in the paint device.</db:para>
<db:note>
<db:para>The image is scaled to fit the rectangle, if both the image and rectangle size disagree.</db:para>
</db:note>
</db:section>
<db:section xml:id="drawImage-2">
<db:title>void QPainter::drawImage(const QPointF &amp;<db:emphasis>point</db:emphasis>, const QImage &amp;<db:emphasis>image</db:emphasis>, const QRectF &amp;<db:emphasis>source</db:emphasis>, Qt::ImageConversionFlags <db:emphasis>flags</db:emphasis> = Qt::AutoColor)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawImage</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ImageConversionFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::AutoColor</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawImage(const QPointF &amp;point, const QImage &amp;image, const QRectF &amp;source, Qt::ImageConversionFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the rectangular portion <db:code role="parameter">source</db:code> of the given <db:code role="parameter">image</db:code> with its origin at the given <db:code role="parameter">point</db:code>.</db:para>
</db:section>
<db:section xml:id="drawImage-3">
<db:title>void QPainter::drawImage(const QPoint &amp;<db:emphasis>point</db:emphasis>, const QImage &amp;<db:emphasis>image</db:emphasis>, const QRect &amp;<db:emphasis>source</db:emphasis>, Qt::ImageConversionFlags <db:emphasis>flags</db:emphasis> = Qt::AutoColor)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawImage</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ImageConversionFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::AutoColor</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawImage(const QPoint &amp;point, const QImage &amp;image, const QRect &amp;source, Qt::ImageConversionFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the rectangular portion <db:code role="parameter">source</db:code> of the given <db:code role="parameter">image</db:code> with its origin at the given <db:code role="parameter">point</db:code>.</db:para>
</db:section>
<db:section xml:id="drawImage-4">
<db:title>void QPainter::drawImage(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>, const QImage &amp;<db:emphasis>image</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawImage</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawImage(const QRectF &amp;rectangle, const QImage &amp;image)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the given <db:code role="parameter">image</db:code> into the given <db:code role="parameter">rectangle</db:code>.</db:para>
<db:note>
<db:para>The image is scaled to fit the rectangle, if both the image and rectangle size disagree.</db:para>
</db:note>
</db:section>
<db:section xml:id="drawImage-5">
<db:title>void QPainter::drawImage(const QRect &amp;<db:emphasis>rectangle</db:emphasis>, const QImage &amp;<db:emphasis>image</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawImage</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawImage(const QRect &amp;rectangle, const QImage &amp;image)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the given <db:code role="parameter">image</db:code> into the given <db:code role="parameter">rectangle</db:code>.</db:para>
<db:note>
<db:para>The image is scaled to fit the rectangle, if both the image and rectangle size disagree.</db:para>
</db:note>
</db:section>
<db:section xml:id="drawImage-6">
<db:title>void QPainter::drawImage(const QPointF &amp;<db:emphasis>point</db:emphasis>, const QImage &amp;<db:emphasis>image</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawImage</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawImage(const QPointF &amp;point, const QImage &amp;image)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the given <db:code role="parameter">image</db:code> at the given <db:code role="parameter">point</db:code>.</db:para>
</db:section>
<db:section xml:id="drawImage-7">
<db:title>void QPainter::drawImage(const QPoint &amp;<db:emphasis>point</db:emphasis>, const QImage &amp;<db:emphasis>image</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawImage</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawImage(const QPoint &amp;point, const QImage &amp;image)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the given <db:code role="parameter">image</db:code> at the given <db:code role="parameter">point</db:code>.</db:para>
</db:section>
<db:section xml:id="drawImage-8">
<db:title>void QPainter::drawImage(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, const QImage &amp;<db:emphasis>image</db:emphasis>, int <db:emphasis>sx</db:emphasis> = 0, int <db:emphasis>sy</db:emphasis> = 0, int <db:emphasis>sw</db:emphasis> = -1, int <db:emphasis>sh</db:emphasis> = -1, Qt::ImageConversionFlags <db:emphasis>flags</db:emphasis> = Qt::AutoColor)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawImage</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sx</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sy</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sw</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sh</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ImageConversionFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::AutoColor</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawImage(int x, int y, const QImage &amp;image, int sx, int sy, int sw, int sh, Qt::ImageConversionFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws an image at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) by copying a part of <db:code role="parameter">image</db:code> into the paint device.</db:para>
<db:para>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) specifies the top-left point in the paint device that is to be drawn onto. (<db:code role="parameter">sx</db:code>, <db:code role="parameter">sy</db:code>) specifies the top-left point in <db:code role="parameter">image</db:code> that is to be drawn. The default is (0, 0).</db:para>
<db:para>(<db:code role="parameter">sw</db:code>, <db:code role="parameter">sh</db:code>) specifies the size of the image that is to be drawn. The default, (0, 0) (and negative) means all the way to the bottom-right of the image.</db:para>
</db:section>
<db:section xml:id="drawLine">
<db:title>void QPainter::drawLine(const QLineF &amp;<db:emphasis>line</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawLine</db:methodname>
<db:methodparam>
<db:type>const QLineF &amp;</db:type>
<db:parameter>line</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawLine(const QLineF &amp;line)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws a line defined by <db:code role="parameter">line</db:code>.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-line.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">QLineF line(10.0, 80.0, 90.0, 20.0);

QPainter(this);
painter.drawLine(line);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#drawLines">drawLines</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawPolyline">drawPolyline</db:link>()</db:member>
<db:member><db:link xlink:href="coordsys.xml">Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawLine-1">
<db:title>void QPainter::drawLine(const QLine &amp;<db:emphasis>line</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawLine</db:methodname>
<db:methodparam>
<db:type>const QLine &amp;</db:type>
<db:parameter>line</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawLine(const QLine &amp;line)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws a line defined by <db:code role="parameter">line</db:code>.</db:para>
</db:section>
<db:section xml:id="drawLine-2">
<db:title>void QPainter::drawLine(int <db:emphasis>x1</db:emphasis>, int <db:emphasis>y1</db:emphasis>, int <db:emphasis>x2</db:emphasis>, int <db:emphasis>y2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawLine</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawLine(int x1, int y1, int x2, int y2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws a line from (<db:code role="parameter">x1</db:code>, <db:code role="parameter">y1</db:code>) to (<db:code role="parameter">x2</db:code>, <db:code role="parameter">y2</db:code>).</db:para>
</db:section>
<db:section xml:id="drawLine-3">
<db:title>void QPainter::drawLine(const QPoint &amp;<db:emphasis>p1</db:emphasis>, const QPoint &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawLine</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>p1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>p2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawLine(const QPoint &amp;p1, const QPoint &amp;p2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws a line from <db:code role="parameter">p1</db:code> to <db:code role="parameter">p2</db:code>.</db:para>
</db:section>
<db:section xml:id="drawLine-4">
<db:title>void QPainter::drawLine(const QPointF &amp;<db:emphasis>p1</db:emphasis>, const QPointF &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawLine</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>p1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>p2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawLine(const QPointF &amp;p1, const QPointF &amp;p2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws a line from <db:code role="parameter">p1</db:code> to <db:code role="parameter">p2</db:code>.</db:para>
</db:section>
<db:section xml:id="drawLines">
<db:title>void QPainter::drawLines(const QLineF *<db:emphasis>lines</db:emphasis>, int <db:emphasis>lineCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawLines</db:methodname>
<db:methodparam>
<db:type>const QLineF *</db:type>
<db:parameter>lines</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>lineCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawLines(const QLineF *lines, int lineCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the first <db:code role="parameter">lineCount</db:code> lines in the array <db:code role="parameter">lines</db:code> using the current pen.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#drawLine">drawLine</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawPolyline">drawPolyline</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawLines-1">
<db:title>void QPainter::drawLines(const QList&lt;QLineF&gt; &amp;<db:emphasis>lines</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawLines</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QLineF&gt; &amp;</db:type>
<db:parameter>lines</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawLines(const QList&lt;QLineF&gt; &amp;lines)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the set of lines defined by the list <db:code role="parameter">lines</db:code> using the current pen and brush.</db:para>
</db:section>
<db:section xml:id="drawLines-2">
<db:title>void QPainter::drawLines(const QPointF *<db:emphasis>pointPairs</db:emphasis>, int <db:emphasis>lineCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawLines</db:methodname>
<db:methodparam>
<db:type>const QPointF *</db:type>
<db:parameter>pointPairs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>lineCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawLines(const QPointF *pointPairs, int lineCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the first <db:code role="parameter">lineCount</db:code> lines in the array <db:code role="parameter">pointPairs</db:code> using the current pen. The lines are specified as pairs of points so the number of entries in <db:code role="parameter">pointPairs</db:code> must be at least <db:code role="parameter">lineCount</db:code> * 2.</db:para>
</db:section>
<db:section xml:id="drawLines-3">
<db:title>void QPainter::drawLines(const QList&lt;QPointF&gt; &amp;<db:emphasis>pointPairs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawLines</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QPointF&gt; &amp;</db:type>
<db:parameter>pointPairs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawLines(const QList&lt;QPointF&gt; &amp;pointPairs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws a line for each pair of points in the vector <db:code role="parameter">pointPairs</db:code> using the current pen. If there is an odd number of points in the array, the last point will be ignored.</db:para>
</db:section>
<db:section xml:id="drawLines-4">
<db:title>void QPainter::drawLines(const QLine *<db:emphasis>lines</db:emphasis>, int <db:emphasis>lineCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawLines</db:methodname>
<db:methodparam>
<db:type>const QLine *</db:type>
<db:parameter>lines</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>lineCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawLines(const QLine *lines, int lineCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the first <db:code role="parameter">lineCount</db:code> lines in the array <db:code role="parameter">lines</db:code> using the current pen.</db:para>
</db:section>
<db:section xml:id="drawLines-5">
<db:title>void QPainter::drawLines(const QList&lt;QLine&gt; &amp;<db:emphasis>lines</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawLines</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QLine&gt; &amp;</db:type>
<db:parameter>lines</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawLines(const QList&lt;QLine&gt; &amp;lines)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the set of lines defined by the list <db:code role="parameter">lines</db:code> using the current pen and brush.</db:para>
</db:section>
<db:section xml:id="drawLines-6">
<db:title>void QPainter::drawLines(const QPoint *<db:emphasis>pointPairs</db:emphasis>, int <db:emphasis>lineCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawLines</db:methodname>
<db:methodparam>
<db:type>const QPoint *</db:type>
<db:parameter>pointPairs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>lineCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawLines(const QPoint *pointPairs, int lineCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the first <db:code role="parameter">lineCount</db:code> lines in the array <db:code role="parameter">pointPairs</db:code> using the current pen.</db:para>
</db:section>
<db:section xml:id="drawLines-7">
<db:title>void QPainter::drawLines(const QList&lt;QPoint&gt; &amp;<db:emphasis>pointPairs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawLines</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QPoint&gt; &amp;</db:type>
<db:parameter>pointPairs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawLines(const QList&lt;QPoint&gt; &amp;pointPairs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws a line for each pair of points in the vector <db:code role="parameter">pointPairs</db:code> using the current pen.</db:para>
</db:section>
<db:section xml:id="drawPath">
<db:title>void QPainter::drawPath(const QPainterPath &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPath</db:methodname>
<db:methodparam>
<db:type>const QPainterPath &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPath(const QPainterPath &amp;path)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the given painter <db:code role="parameter">path</db:code> using the current pen for outline and the current brush for filling.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-path.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">QPainterPath path;
path.moveTo(20, 80);
path.lineTo(20, 30);
path.cubicTo(80, 0, 50, 50, 80, 80);

QPainter painter(this);
painter.drawPath(path);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwidgets-painting-painterpaths-example.xml">the Painter Paths example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-painting-deform-example.xml">the Vector Deformation example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawPicture">
<db:title>void QPainter::drawPicture(const QPointF &amp;<db:emphasis>point</db:emphasis>, const QPicture &amp;<db:emphasis>picture</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPicture</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPicture &amp;</db:type>
<db:parameter>picture</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPicture(const QPointF &amp;point, const QPicture &amp;picture)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replays the given <db:code role="parameter">picture</db:code> at the given <db:code role="parameter">point</db:code>.</db:para>
<db:para>The <db:link xlink:href="qpicture.xml">QPicture</db:link> class is a paint device that records and replays <db:link xlink:href="qpainter.xml">QPainter</db:link> commands. A picture serializes the painter commands to an IO device in a platform-independent format. Everything that can be painted on a widget or pixmap can also be stored in a picture.</db:para>
<db:para>This function does exactly the same as <db:link xlink:href="qpicture.xml#play">QPicture::play</db:link>() when called with <db:code role="parameter">point</db:code> = <db:link xlink:href="qpointf.xml">QPointF</db:link>(0, 0).</db:para>
<db:note>
<db:para>The state of the painter is preserved by this function.</db:para>
</db:note>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:programlisting language="cpp">QPicture picture;
QPointF point(10.0, 20.0);
picture.load(&quot;drawing.pic&quot;);

QPainter painter(this);
painter.drawPicture(0, 0, picture);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpicture.xml#play">QPicture::play</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawPicture-1">
<db:title>void QPainter::drawPicture(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, const QPicture &amp;<db:emphasis>picture</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPicture</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPicture &amp;</db:type>
<db:parameter>picture</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPicture(int x, int y, const QPicture &amp;picture)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the given <db:code role="parameter">picture</db:code> at point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
</db:section>
<db:section xml:id="drawPicture-2">
<db:title>void QPainter::drawPicture(const QPoint &amp;<db:emphasis>point</db:emphasis>, const QPicture &amp;<db:emphasis>picture</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPicture</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPicture &amp;</db:type>
<db:parameter>picture</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPicture(const QPoint &amp;point, const QPicture &amp;picture)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Replays the given <db:code role="parameter">picture</db:code> at the given <db:code role="parameter">point</db:code>.</db:para>
</db:section>
<db:section xml:id="drawPie">
<db:title>void QPainter::drawPie(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>, int <db:emphasis>startAngle</db:emphasis>, int <db:emphasis>spanAngle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPie</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>startAngle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>spanAngle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPie(const QRectF &amp;rectangle, int startAngle, int spanAngle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws a pie defined by the given <db:code role="parameter">rectangle</db:code>, <db:code role="parameter">startAngle</db:code> and <db:code role="parameter">spanAngle</db:code>.</db:para>
<db:para>The pie is filled with the current <db:link xlink:href="qpainter.xml#brush">brush</db:link>().</db:para>
<db:para>The startAngle and spanAngle must be specified in 1/16th of a degree, i.e. a full circle equals 5760 (16 * 360). Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-pie.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">QRectF rectangle(10.0, 20.0, 80.0, 60.0);
int startAngle = 30 * 16;
int spanAngle = 120 * 16;

QPainter painter(this);
painter.drawPie(rectangle, startAngle, spanAngle);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#drawEllipse">drawEllipse</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawChord">drawChord</db:link>()</db:member>
<db:member><db:link xlink:href="coordsys.xml">Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawPie-1">
<db:title>void QPainter::drawPie(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, int <db:emphasis>startAngle</db:emphasis>, int <db:emphasis>spanAngle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPie</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>startAngle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>spanAngle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPie(int x, int y, int width, int height, int startAngle, int spanAngle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the pie defined by the rectangle beginning at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) with the specified <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>, and the given <db:code role="parameter">startAngle</db:code> and <db:code role="parameter">spanAngle</db:code>.</db:para>
</db:section>
<db:section xml:id="drawPie-2">
<db:title>void QPainter::drawPie(const QRect &amp;<db:emphasis>rectangle</db:emphasis>, int <db:emphasis>startAngle</db:emphasis>, int <db:emphasis>spanAngle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPie</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>startAngle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>spanAngle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPie(const QRect &amp;rectangle, int startAngle, int spanAngle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws a pie defined by the given <db:code role="parameter">rectangle</db:code>, <db:code role="parameter">startAngle</db:code> and and <db:code role="parameter">spanAngle</db:code>.</db:para>
</db:section>
<db:section xml:id="drawPixmap">
<db:title>void QPainter::drawPixmap(const QRectF &amp;<db:emphasis>target</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, const QRectF &amp;<db:emphasis>source</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPixmap</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPixmap(const QRectF &amp;target, const QPixmap &amp;pixmap, const QRectF &amp;source)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the rectangular portion <db:code role="parameter">source</db:code> of the given <db:code role="parameter">pixmap</db:code> into the given <db:code role="parameter">target</db:code> in the paint device.</db:para>
<db:note>
<db:para>The pixmap is scaled to fit the rectangle, if both the pixmap and rectangle size disagree.</db:para>
</db:note>
<db:note>
<db:para>See <db:link xlink:href="qpainter.xml#drawing-high-resolution-versions-of-pixmaps-and-images">Drawing High Resolution Versions of Pixmaps and Images</db:link> on how this is affected by <db:link xlink:href="qpixmap.xml#devicePixelRatio">QPixmap::devicePixelRatio</db:link>().</db:para>
</db:note>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:programlisting language="cpp">QRectF target(10.0, 20.0, 80.0, 60.0);
QRectF source(0.0, 0.0, 70.0, 40.0);
QPixmap pixmap(&quot;:myPixmap.png&quot;);

QPainter(this);
painter.drawPixmap(target, pixmap, source);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If <db:code role="parameter">pixmap</db:code> is a <db:link xlink:href="qbitmap.xml">QBitmap</db:link> it is drawn with the bits that are &quot;set&quot; using the pens color. If <db:link xlink:href="qpainter.xml#backgroundMode">backgroundMode</db:link> is <db:link xlink:href="qt.xml#BGMode-enum">Qt::OpaqueMode</db:link>, the &quot;unset&quot; bits are drawn using the color of the background brush; if <db:link xlink:href="qpainter.xml#backgroundMode">backgroundMode</db:link> is <db:link xlink:href="qt.xml#BGMode-enum">Qt::TransparentMode</db:link>, the &quot;unset&quot; bits are transparent. Drawing bitmaps with gradient or texture colors is not supported.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#drawImage">drawImage</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#devicePixelRatio">QPixmap::devicePixelRatio</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawPixmap-1">
<db:title>void QPainter::drawPixmap(const QRect &amp;<db:emphasis>target</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, const QRect &amp;<db:emphasis>source</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPixmap</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPixmap(const QRect &amp;target, const QPixmap &amp;pixmap, const QRect &amp;source)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the rectangular portion <db:code role="parameter">source</db:code> of the given <db:code role="parameter">pixmap</db:code> into the given <db:code role="parameter">target</db:code> in the paint device.</db:para>
<db:note>
<db:para>The pixmap is scaled to fit the rectangle, if both the pixmap and rectangle size disagree.</db:para>
</db:note>
</db:section>
<db:section xml:id="drawPixmap-2">
<db:title>void QPainter::drawPixmap(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>w</db:emphasis>, int <db:emphasis>h</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, int <db:emphasis>sx</db:emphasis>, int <db:emphasis>sy</db:emphasis>, int <db:emphasis>sw</db:emphasis>, int <db:emphasis>sh</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPixmap</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sy</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sw</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sh</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPixmap(int x, int y, int w, int h, const QPixmap &amp;pixmap, int sx, int sy, int sw, int sh)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the rectangular portion with the origin (<db:code role="parameter">sx</db:code>, <db:code role="parameter">sy</db:code>), width <db:code role="parameter">sw</db:code> and height <db:code role="parameter">sh</db:code>, of the given <db:code role="parameter">pixmap</db:code> , at the point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>), with a width of <db:code role="parameter">w</db:code> and a height of <db:code role="parameter">h</db:code>. If sw or sh are equal to zero the width/height of the pixmap is used and adjusted by the offset sx/sy;</db:para>
</db:section>
<db:section xml:id="drawPixmap-3">
<db:title>void QPainter::drawPixmap(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, int <db:emphasis>sx</db:emphasis>, int <db:emphasis>sy</db:emphasis>, int <db:emphasis>sw</db:emphasis>, int <db:emphasis>sh</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPixmap</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sy</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sw</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sh</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPixmap(int x, int y, const QPixmap &amp;pixmap, int sx, int sy, int sw, int sh)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws a pixmap at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) by copying a part of the given <db:code role="parameter">pixmap</db:code> into the paint device.</db:para>
<db:para>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) specifies the top-left point in the paint device that is to be drawn onto. (<db:code role="parameter">sx</db:code>, <db:code role="parameter">sy</db:code>) specifies the top-left point in <db:code role="parameter">pixmap</db:code> that is to be drawn. The default is (0, 0).</db:para>
<db:para>(<db:code role="parameter">sw</db:code>, <db:code role="parameter">sh</db:code>) specifies the size of the pixmap that is to be drawn. The default, (0, 0) (and negative) means all the way to the bottom-right of the pixmap.</db:para>
</db:section>
<db:section xml:id="drawPixmap-4">
<db:title>void QPainter::drawPixmap(const QPointF &amp;<db:emphasis>point</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, const QRectF &amp;<db:emphasis>source</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPixmap</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPixmap(const QPointF &amp;point, const QPixmap &amp;pixmap, const QRectF &amp;source)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the rectangular portion <db:code role="parameter">source</db:code> of the given <db:code role="parameter">pixmap</db:code> with its origin at the given <db:code role="parameter">point</db:code>.</db:para>
</db:section>
<db:section xml:id="drawPixmap-5">
<db:title>void QPainter::drawPixmap(const QPoint &amp;<db:emphasis>point</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, const QRect &amp;<db:emphasis>source</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPixmap</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPixmap(const QPoint &amp;point, const QPixmap &amp;pixmap, const QRect &amp;source)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the rectangular portion <db:code role="parameter">source</db:code> of the given <db:code role="parameter">pixmap</db:code> with its origin at the given <db:code role="parameter">point</db:code>.</db:para>
</db:section>
<db:section xml:id="drawPixmap-6">
<db:title>void QPainter::drawPixmap(const QPointF &amp;<db:emphasis>point</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPixmap</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPixmap(const QPointF &amp;point, const QPixmap &amp;pixmap)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the given <db:code role="parameter">pixmap</db:code> with its origin at the given <db:code role="parameter">point</db:code>.</db:para>
</db:section>
<db:section xml:id="drawPixmap-7">
<db:title>void QPainter::drawPixmap(const QPoint &amp;<db:emphasis>point</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPixmap</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPixmap(const QPoint &amp;point, const QPixmap &amp;pixmap)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the given <db:code role="parameter">pixmap</db:code> with its origin at the given <db:code role="parameter">point</db:code>.</db:para>
</db:section>
<db:section xml:id="drawPixmap-8">
<db:title>void QPainter::drawPixmap(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPixmap</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPixmap(int x, int y, const QPixmap &amp;pixmap)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the given <db:code role="parameter">pixmap</db:code> at position (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
</db:section>
<db:section xml:id="drawPixmap-9">
<db:title>void QPainter::drawPixmap(const QRect &amp;<db:emphasis>rectangle</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPixmap</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPixmap(const QRect &amp;rectangle, const QPixmap &amp;pixmap)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the given <db:code role="parameter">pixmap</db:code> into the given <db:code role="parameter">rectangle</db:code>.</db:para>
<db:note>
<db:para>The pixmap is scaled to fit the rectangle, if both the pixmap and rectangle size disagree.</db:para>
</db:note>
</db:section>
<db:section xml:id="drawPixmap-10">
<db:title>void QPainter::drawPixmap(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPixmap</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPixmap(int x, int y, int width, int height, const QPixmap &amp;pixmap)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the <db:code role="parameter">pixmap</db:code> into the rectangle at position (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>.</db:para>
</db:section>
<db:section xml:id="drawPixmapFragments">
<db:title>void QPainter::drawPixmapFragments(const QPainter::PixmapFragment *<db:emphasis>fragments</db:emphasis>, int <db:emphasis>fragmentCount</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, QPainter::PixmapFragmentHints <db:emphasis>hints</db:emphasis> = PixmapFragmentHints())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPixmapFragments</db:methodname>
<db:methodparam>
<db:type>const QPainter::PixmapFragment *</db:type>
<db:parameter>fragments</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>fragmentCount</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPainter::PixmapFragmentHints</db:type>
<db:parameter>hints</db:parameter>
<db:initializer>PixmapFragmentHints()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPixmapFragments(const QPainter::PixmapFragment *fragments, int fragmentCount, const QPixmap &amp;pixmap, QPainter::PixmapFragmentHints hints)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is used to draw <db:code role="parameter">pixmap</db:code>, or a sub-rectangle of <db:code role="parameter">pixmap</db:code>, at multiple positions with different scale, rotation and opacity. <db:code role="parameter">fragments</db:code> is an array of <db:code role="parameter">fragmentCount</db:code> elements specifying the parameters used to draw each pixmap fragment. The <db:code role="parameter">hints</db:code> parameter can be used to pass in drawing hints.</db:para>
<db:para>This function is potentially faster than multiple calls to <db:link xlink:href="qpainter.xml#drawPixmap">drawPixmap</db:link>(), since the backend can optimize state changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter-pixmapfragment.xml">QPainter::PixmapFragment</db:link></db:member>
<db:member><db:link xlink:href="qpainter.xml#PixmapFragmentHint-enum">QPainter::PixmapFragmentHint</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawPoint">
<db:title>void QPainter::drawPoint(const QPointF &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPoint</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPoint(const QPointF &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws a single point at the given <db:code role="parameter">position</db:code> using the current pen's color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="coordsys.xml">Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawPoint-1">
<db:title>void QPainter::drawPoint(const QPoint &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPoint</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPoint(const QPoint &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws a single point at the given <db:code role="parameter">position</db:code> using the current pen's color.</db:para>
</db:section>
<db:section xml:id="drawPoint-2">
<db:title>void QPainter::drawPoint(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPoint</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPoint(int x, int y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws a single point at position (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
</db:section>
<db:section xml:id="drawPoints">
<db:title>void QPainter::drawPoints(const QPointF *<db:emphasis>points</db:emphasis>, int <db:emphasis>pointCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPoints</db:methodname>
<db:methodparam>
<db:type>const QPointF *</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pointCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPoints(const QPointF *points, int pointCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the first <db:code role="parameter">pointCount</db:code> points in the array <db:code role="parameter">points</db:code> using the current pen's color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="coordsys.xml">Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawPoints-1">
<db:title>void QPainter::drawPoints(const QPolygonF &amp;<db:emphasis>points</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPoints</db:methodname>
<db:methodparam>
<db:type>const QPolygonF &amp;</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPoints(const QPolygonF &amp;points)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the points in the vector <db:code role="parameter">points</db:code>.</db:para>
</db:section>
<db:section xml:id="drawPoints-2">
<db:title>void QPainter::drawPoints(const QPoint *<db:emphasis>points</db:emphasis>, int <db:emphasis>pointCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPoints</db:methodname>
<db:methodparam>
<db:type>const QPoint *</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pointCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPoints(const QPoint *points, int pointCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the first <db:code role="parameter">pointCount</db:code> points in the array <db:code role="parameter">points</db:code> using the current pen's color.</db:para>
</db:section>
<db:section xml:id="drawPoints-3">
<db:title>void QPainter::drawPoints(const QPolygon &amp;<db:emphasis>points</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPoints</db:methodname>
<db:methodparam>
<db:type>const QPolygon &amp;</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPoints(const QPolygon &amp;points)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the points in the vector <db:code role="parameter">points</db:code>.</db:para>
</db:section>
<db:section xml:id="drawPolygon">
<db:title>void QPainter::drawPolygon(const QPointF *<db:emphasis>points</db:emphasis>, int <db:emphasis>pointCount</db:emphasis>, Qt::FillRule <db:emphasis>fillRule</db:emphasis> = Qt::OddEvenFill)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPolygon</db:methodname>
<db:methodparam>
<db:type>const QPointF *</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pointCount</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::FillRule</db:type>
<db:parameter>fillRule</db:parameter>
<db:initializer>Qt::OddEvenFill</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPolygon(const QPointF *points, int pointCount, Qt::FillRule fillRule)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the polygon defined by the first <db:code role="parameter">pointCount</db:code> points in the array <db:code role="parameter">points</db:code> using the current pen and brush.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-polygon.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">static const QPointF points[4] = {
    QPointF(10.0, 80.0),
    QPointF(20.0, 10.0),
    QPointF(80.0, 30.0),
    QPointF(90.0, 70.0)
};

QPainter painter(this);
painter.drawPolygon(points, 4);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The first point is implicitly connected to the last point, and the polygon is filled with the current <db:link xlink:href="qpainter.xml#brush">brush</db:link>().</db:para>
<db:para>If <db:code role="parameter">fillRule</db:code> is <db:link xlink:href="qt.xml#FillRule-enum">Qt::WindingFill</db:link>, the polygon is filled using the winding fill algorithm. If <db:code role="parameter">fillRule</db:code> is <db:link xlink:href="qt.xml#FillRule-enum">Qt::OddEvenFill</db:link>, the polygon is filled using the odd-even fill algorithm. See <db:link xlink:href="qt.xml#FillRule-enum">Qt::FillRule</db:link> for a more detailed description of these fill rules.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#drawConvexPolygon">drawConvexPolygon</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawPolyline">drawPolyline</db:link>()</db:member>
<db:member><db:link xlink:href="coordsys.xml">Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawPolygon-1">
<db:title>void QPainter::drawPolygon(const QPolygonF &amp;<db:emphasis>points</db:emphasis>, Qt::FillRule <db:emphasis>fillRule</db:emphasis> = Qt::OddEvenFill)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPolygon</db:methodname>
<db:methodparam>
<db:type>const QPolygonF &amp;</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::FillRule</db:type>
<db:parameter>fillRule</db:parameter>
<db:initializer>Qt::OddEvenFill</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPolygon(const QPolygonF &amp;points, Qt::FillRule fillRule)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the polygon defined by the given <db:code role="parameter">points</db:code> using the fill rule <db:code role="parameter">fillRule</db:code>.</db:para>
</db:section>
<db:section xml:id="drawPolygon-2">
<db:title>void QPainter::drawPolygon(const QPoint *<db:emphasis>points</db:emphasis>, int <db:emphasis>pointCount</db:emphasis>, Qt::FillRule <db:emphasis>fillRule</db:emphasis> = Qt::OddEvenFill)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPolygon</db:methodname>
<db:methodparam>
<db:type>const QPoint *</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pointCount</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::FillRule</db:type>
<db:parameter>fillRule</db:parameter>
<db:initializer>Qt::OddEvenFill</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPolygon(const QPoint *points, int pointCount, Qt::FillRule fillRule)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the polygon defined by the first <db:code role="parameter">pointCount</db:code> points in the array <db:code role="parameter">points</db:code>.</db:para>
</db:section>
<db:section xml:id="drawPolygon-3">
<db:title>void QPainter::drawPolygon(const QPolygon &amp;<db:emphasis>points</db:emphasis>, Qt::FillRule <db:emphasis>fillRule</db:emphasis> = Qt::OddEvenFill)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPolygon</db:methodname>
<db:methodparam>
<db:type>const QPolygon &amp;</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::FillRule</db:type>
<db:parameter>fillRule</db:parameter>
<db:initializer>Qt::OddEvenFill</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPolygon(const QPolygon &amp;points, Qt::FillRule fillRule)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the polygon defined by the given <db:code role="parameter">points</db:code> using the fill rule <db:code role="parameter">fillRule</db:code>.</db:para>
</db:section>
<db:section xml:id="drawPolyline">
<db:title>void QPainter::drawPolyline(const QPointF *<db:emphasis>points</db:emphasis>, int <db:emphasis>pointCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPolyline</db:methodname>
<db:methodparam>
<db:type>const QPointF *</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pointCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPolyline(const QPointF *points, int pointCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the polyline defined by the first <db:code role="parameter">pointCount</db:code> points in <db:code role="parameter">points</db:code> using the current pen.</db:para>
<db:para>Note that unlike the <db:link xlink:href="qpainter.xml#drawPolygon">drawPolygon</db:link>() function the last point is <db:emphasis>not</db:emphasis> connected to the first, neither is the polyline filled.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:programlisting language="cpp">static const QPointF points[3] = {
    QPointF(10.0, 80.0),
    QPointF(20.0, 10.0),
    QPointF(80.0, 30.0),
};

QPainter painter(this);
painter.drawPolyline(points, 3);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#drawLines">drawLines</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawPolygon">drawPolygon</db:link>()</db:member>
<db:member><db:link xlink:href="coordsys.xml">Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawPolyline-1">
<db:title>void QPainter::drawPolyline(const QPolygonF &amp;<db:emphasis>points</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPolyline</db:methodname>
<db:methodparam>
<db:type>const QPolygonF &amp;</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPolyline(const QPolygonF &amp;points)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the polyline defined by the given <db:code role="parameter">points</db:code> using the current pen.</db:para>
</db:section>
<db:section xml:id="drawPolyline-2">
<db:title>void QPainter::drawPolyline(const QPoint *<db:emphasis>points</db:emphasis>, int <db:emphasis>pointCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPolyline</db:methodname>
<db:methodparam>
<db:type>const QPoint *</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pointCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPolyline(const QPoint *points, int pointCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the polyline defined by the first <db:code role="parameter">pointCount</db:code> points in <db:code role="parameter">points</db:code> using the current pen.</db:para>
</db:section>
<db:section xml:id="drawPolyline-3">
<db:title>void QPainter::drawPolyline(const QPolygon &amp;<db:emphasis>points</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawPolyline</db:methodname>
<db:methodparam>
<db:type>const QPolygon &amp;</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPolyline(const QPolygon &amp;points)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the polyline defined by the given <db:code role="parameter">points</db:code> using the current pen.</db:para>
</db:section>
<db:section xml:id="drawRect">
<db:title>void QPainter::drawRect(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawRect</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawRect(const QRectF &amp;rectangle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the current <db:code role="parameter">rectangle</db:code> with the current pen and brush.</db:para>
<db:para>A filled rectangle has a size of <db:code role="parameter">rectangle</db:code>.<db:link xlink:href="qml-qtquick-controls2-stackview.xml#size">size()</db:link>. A stroked rectangle has a size of <db:code role="parameter">rectangle</db:code>.<db:link xlink:href="qml-qtquick-controls2-stackview.xml#size">size()</db:link> plus the pen width.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-rectangle.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">QRectF rectangle(10.0, 20.0, 80.0, 60.0);

QPainter painter(this);
painter.drawRect(rectangle);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#drawRects">drawRects</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawPolygon">drawPolygon</db:link>()</db:member>
<db:member><db:link xlink:href="coordsys.xml">Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawRect-1">
<db:title>void QPainter::drawRect(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawRect</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawRect(int x, int y, int width, int height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws a rectangle with upper left corner at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) and with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>.</db:para>
</db:section>
<db:section xml:id="drawRect-2">
<db:title>void QPainter::drawRect(const QRect &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawRect</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawRect(const QRect &amp;rectangle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the current <db:code role="parameter">rectangle</db:code> with the current pen and brush.</db:para>
</db:section>
<db:section xml:id="drawRects">
<db:title>void QPainter::drawRects(const QRectF *<db:emphasis>rectangles</db:emphasis>, int <db:emphasis>rectCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawRects</db:methodname>
<db:methodparam>
<db:type>const QRectF *</db:type>
<db:parameter>rectangles</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rectCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawRects(const QRectF *rectangles, int rectCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the first <db:code role="parameter">rectCount</db:code> of the given <db:code role="parameter">rectangles</db:code> using the current pen and brush.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#drawRect">drawRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawRects-1">
<db:title>void QPainter::drawRects(const QList&lt;QRectF&gt; &amp;<db:emphasis>rectangles</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawRects</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QRectF&gt; &amp;</db:type>
<db:parameter>rectangles</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawRects(const QList&lt;QRectF&gt; &amp;rectangles)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the given <db:code role="parameter">rectangles</db:code> using the current pen and brush.</db:para>
</db:section>
<db:section xml:id="drawRects-2">
<db:title>void QPainter::drawRects(const QRect *<db:emphasis>rectangles</db:emphasis>, int <db:emphasis>rectCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawRects</db:methodname>
<db:methodparam>
<db:type>const QRect *</db:type>
<db:parameter>rectangles</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rectCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawRects(const QRect *rectangles, int rectCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the first <db:code role="parameter">rectCount</db:code> of the given <db:code role="parameter">rectangles</db:code> using the current pen and brush.</db:para>
</db:section>
<db:section xml:id="drawRects-3">
<db:title>void QPainter::drawRects(const QList&lt;QRect&gt; &amp;<db:emphasis>rectangles</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawRects</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QRect&gt; &amp;</db:type>
<db:parameter>rectangles</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawRects(const QList&lt;QRect&gt; &amp;rectangles)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the given <db:code role="parameter">rectangles</db:code> using the current pen and brush.</db:para>
</db:section>
<db:section xml:id="drawRoundedRect">
<db:title>void QPainter::drawRoundedRect(const QRectF &amp;<db:emphasis>rect</db:emphasis>, qreal <db:emphasis>xRadius</db:emphasis>, qreal <db:emphasis>yRadius</db:emphasis>, Qt::SizeMode <db:emphasis>mode</db:emphasis> = Qt::AbsoluteSize)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawRoundedRect</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>xRadius</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>yRadius</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::SizeMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Qt::AbsoluteSize</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawRoundedRect(const QRectF &amp;rect, qreal xRadius, qreal yRadius, Qt::SizeMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the given rectangle <db:code role="parameter">rect</db:code> with rounded corners.</db:para>
<db:para>The <db:code role="parameter">xRadius</db:code> and <db:code role="parameter">yRadius</db:code> arguments specify the radii of the ellipses defining the corners of the rounded rectangle. When <db:code role="parameter">mode</db:code> is <db:link xlink:href="qt.xml#SizeMode-enum">Qt::RelativeSize</db:link>, <db:code role="parameter">xRadius</db:code> and <db:code role="parameter">yRadius</db:code> are specified in percentage of half the rectangle's width and height respectively, and should be in the range 0.0 to 100.0.</db:para>
<db:para>A filled rectangle has a size of rect.<db:link xlink:href="qml-qtquick-controls2-stackview.xml#size">size()</db:link>. A stroked rectangle has a size of rect.<db:link xlink:href="qml-qtquick-controls2-stackview.xml#size">size()</db:link> plus the pen width.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-roundrect.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">QRectF rectangle(10.0, 20.0, 80.0, 60.0);

QPainter painter(this);
painter.drawRoundedRect(rectangle, 20.0, 15.0);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#drawRect">drawRect</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml">QPen</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawRoundedRect-1">
<db:title>void QPainter::drawRoundedRect(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>w</db:emphasis>, int <db:emphasis>h</db:emphasis>, qreal <db:emphasis>xRadius</db:emphasis>, qreal <db:emphasis>yRadius</db:emphasis>, Qt::SizeMode <db:emphasis>mode</db:emphasis> = Qt::AbsoluteSize)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawRoundedRect</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>xRadius</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>yRadius</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::SizeMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Qt::AbsoluteSize</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawRoundedRect(int x, int y, int w, int h, qreal xRadius, qreal yRadius, Qt::SizeMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the given rectangle <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code> with rounded corners.</db:para>
</db:section>
<db:section xml:id="drawRoundedRect-2">
<db:title>void QPainter::drawRoundedRect(const QRect &amp;<db:emphasis>rect</db:emphasis>, qreal <db:emphasis>xRadius</db:emphasis>, qreal <db:emphasis>yRadius</db:emphasis>, Qt::SizeMode <db:emphasis>mode</db:emphasis> = Qt::AbsoluteSize)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawRoundedRect</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>xRadius</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>yRadius</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::SizeMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Qt::AbsoluteSize</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawRoundedRect(const QRect &amp;rect, qreal xRadius, qreal yRadius, Qt::SizeMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the given rectangle <db:code role="parameter">rect</db:code> with rounded corners.</db:para>
</db:section>
<db:section xml:id="drawStaticText">
<db:title>void QPainter::drawStaticText(const QPointF &amp;<db:emphasis>topLeftPosition</db:emphasis>, const QStaticText &amp;<db:emphasis>staticText</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawStaticText</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>topLeftPosition</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStaticText &amp;</db:type>
<db:parameter>staticText</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawStaticText(const QPointF &amp;topLeftPosition, const QStaticText &amp;staticText)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the given <db:code role="parameter">staticText</db:code> at the given <db:code role="parameter">topLeftPosition</db:code>.</db:para>
<db:para>The text will be drawn using the font and the transformation set on the painter. If the font and/or transformation set on the painter are different from the ones used to initialize the layout of the <db:link xlink:href="qstatictext.xml">QStaticText</db:link>, then the layout will have to be recalculated. Use <db:link xlink:href="qstatictext.xml#prepare">QStaticText::prepare</db:link>() to initialize <db:code role="parameter">staticText</db:code> with the font and transformation with which it will later be drawn.</db:para>
<db:para>If <db:code role="parameter">topLeftPosition</db:code> is not the same as when <db:code role="parameter">staticText</db:code> was initialized, or when it was last drawn, then there will be a slight overhead when translating the text to its new position.</db:para>
<db:note>
<db:para>If the painter's transformation is not affine, then <db:code role="parameter">staticText</db:code> will be drawn using regular calls to <db:link xlink:href="qpainter.xml#drawText">drawText</db:link>(), losing any potential for performance improvement.</db:para>
</db:note>
<db:note>
<db:para>The y-position is used as the top of the font.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatictext.xml">QStaticText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawStaticText-1">
<db:title>void QPainter::drawStaticText(const QPoint &amp;<db:emphasis>topLeftPosition</db:emphasis>, const QStaticText &amp;<db:emphasis>staticText</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawStaticText</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>topLeftPosition</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStaticText &amp;</db:type>
<db:parameter>staticText</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawStaticText(const QPoint &amp;topLeftPosition, const QStaticText &amp;staticText)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the <db:code role="parameter">staticText</db:code> at the <db:code role="parameter">topLeftPosition</db:code>.</db:para>
<db:note>
<db:para>The y-position is used as the top of the font.</db:para>
</db:note>
</db:section>
<db:section xml:id="drawStaticText-2">
<db:title>void QPainter::drawStaticText(int <db:emphasis>left</db:emphasis>, int <db:emphasis>top</db:emphasis>, const QStaticText &amp;<db:emphasis>staticText</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawStaticText</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>left</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>top</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStaticText &amp;</db:type>
<db:parameter>staticText</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawStaticText(int left, int top, const QStaticText &amp;staticText)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the <db:code role="parameter">staticText</db:code> at coordinates <db:code role="parameter">left</db:code> and <db:code role="parameter">top</db:code>.</db:para>
<db:note>
<db:para>The y-position is used as the top of the font.</db:para>
</db:note>
</db:section>
<db:section xml:id="drawText">
<db:title>void QPainter::drawText(const QPointF &amp;<db:emphasis>position</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawText</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawText(const QPointF &amp;position, const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the given <db:code role="parameter">text</db:code> with the currently defined text direction, beginning at the given <db:code role="parameter">position</db:code>.</db:para>
<db:para>This function does not handle the newline character (\n), as it cannot break text into multiple lines, and it cannot display the newline character. Use the QPainter::drawText() overload that takes a rectangle instead if you want to draw multiple lines of text with the newline character, or if you want the text to be wrapped.</db:para>
<db:para>By default, <db:link xlink:href="qpainter.xml">QPainter</db:link> draws text anti-aliased.</db:para>
<db:note>
<db:para>The y-position is used as the baseline of the font.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setFont">setFont</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setPen">setPen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawText-1">
<db:title>void QPainter::drawText(const QPoint &amp;<db:emphasis>position</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawText</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawText(const QPoint &amp;position, const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the given <db:code role="parameter">text</db:code> with the currently defined text direction, beginning at the given <db:code role="parameter">position</db:code>.</db:para>
<db:para>By default, <db:link xlink:href="qpainter.xml">QPainter</db:link> draws text anti-aliased.</db:para>
<db:note>
<db:para>The y-position is used as the baseline of the font.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setFont">setFont</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setPen">setPen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawText-2">
<db:title>void QPainter::drawText(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawText</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawText(int x, int y, const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the given <db:code role="parameter">text</db:code> at position (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>), using the painter's currently defined text direction.</db:para>
<db:para>By default, <db:link xlink:href="qpainter.xml">QPainter</db:link> draws text anti-aliased.</db:para>
<db:note>
<db:para>The y-position is used as the baseline of the font.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setFont">setFont</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setPen">setPen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawText-3">
<db:title>void QPainter::drawText(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>, int <db:emphasis>flags</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, QRectF *<db:emphasis>boundingRect</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawText</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QRectF *</db:type>
<db:parameter>boundingRect</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawText(const QRectF &amp;rectangle, int flags, const QString &amp;text, QRectF *boundingRect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the given <db:code role="parameter">text</db:code> within the provided <db:code role="parameter">rectangle</db:code>. The <db:code role="parameter">rectangle</db:code> along with alignment <db:code role="parameter">flags</db:code> defines the anchors for the <db:code role="parameter">text</db:code>.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-text.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">QPainter painter(this);
painter.drawText(rect, Qt::AlignCenter, tr(&quot;Qt\nProject&quot;));
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code role="parameter">boundingRect</db:code> (if not null) is set to what the bounding rectangle should be in order to enclose the whole text. For example, in the following image, the dotted line represents <db:code role="parameter">boundingRect</db:code> as calculated by the function, and the dashed line represents <db:code role="parameter">rectangle</db:code>:</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-text-bounds.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">QPainter painter(this);
QFont font = painter.font();
font.setPixelSize(48);
painter.setFont(font);

const QRect rectangle = QRect(0, 0, 100, 50);
QRect boundingRect;
painter.drawText(rectangle, 0, tr(&quot;Hello&quot;), &amp;amp;boundingRect);

QPen pen = painter.pen();
pen.setStyle(Qt::DotLine);
painter.setPen(pen);
painter.drawRect(boundingRect.adjusted(0, 0, -pen.width(), -pen.width()));

pen.setStyle(Qt::DashLine);
painter.setPen(pen);
painter.drawRect(rectangle.adjusted(0, 0, -pen.width(), -pen.width()));
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code role="parameter">flags</db:code> argument is a bitwise OR of the following flags:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignLeft</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignRight</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignHCenter</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignJustify</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignTop</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignBottom</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignVCenter</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignCenter</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextDontClip</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextSingleLine</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextExpandTabs</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextShowMnemonic</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextWordWrap</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextIncludeTrailingSpaces</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>By default, <db:link xlink:href="qpainter.xml">QPainter</db:link> draws text anti-aliased.</db:para>
<db:note>
<db:para>The y-coordinate of <db:code role="parameter">rectangle</db:code> is used as the top of the font.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignmentFlag</db:link></db:member>
<db:member><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextFlag</db:link></db:member>
<db:member><db:link xlink:href="qpainter.xml#boundingRect">boundingRect</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#layoutDirection">layoutDirection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawText-4">
<db:title>void QPainter::drawText(const QRect &amp;<db:emphasis>rectangle</db:emphasis>, int <db:emphasis>flags</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, QRect *<db:emphasis>boundingRect</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawText</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QRect *</db:type>
<db:parameter>boundingRect</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawText(const QRect &amp;rectangle, int flags, const QString &amp;text, QRect *boundingRect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the given <db:code role="parameter">text</db:code> within the provided <db:code role="parameter">rectangle</db:code> according to the specified <db:code role="parameter">flags</db:code>.</db:para>
<db:para>The <db:code role="parameter">boundingRect</db:code> (if not null) is set to the what the bounding rectangle should be in order to enclose the whole text. For example, in the following image, the dotted line represents <db:code role="parameter">boundingRect</db:code> as calculated by the function, and the dashed line represents <db:code role="parameter">rectangle</db:code>:</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-text-bounds.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">QPainter painter(this);
QFont font = painter.font();
font.setPixelSize(48);
painter.setFont(font);

const QRect rectangle = QRect(0, 0, 100, 50);
QRect boundingRect;
painter.drawText(rectangle, 0, tr(&quot;Hello&quot;), &amp;amp;boundingRect);

QPen pen = painter.pen();
pen.setStyle(Qt::DotLine);
painter.setPen(pen);
painter.drawRect(boundingRect.adjusted(0, 0, -pen.width(), -pen.width()));

pen.setStyle(Qt::DashLine);
painter.setPen(pen);
painter.drawRect(rectangle.adjusted(0, 0, -pen.width(), -pen.width()));
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>By default, <db:link xlink:href="qpainter.xml">QPainter</db:link> draws text anti-aliased.</db:para>
<db:note>
<db:para>The y-coordinate of <db:code role="parameter">rectangle</db:code> is used as the top of the font.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setFont">setFont</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setPen">setPen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawText-5">
<db:title>void QPainter::drawText(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, int <db:emphasis>flags</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, QRect *<db:emphasis>boundingRect</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawText</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QRect *</db:type>
<db:parameter>boundingRect</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawText(int x, int y, int width, int height, int flags, const QString &amp;text, QRect *boundingRect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the given <db:code role="parameter">text</db:code> within the rectangle with origin (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>), <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>.</db:para>
<db:para>The <db:code role="parameter">boundingRect</db:code> (if not null) is set to the what the bounding rectangle should be in order to enclose the whole text. For example, in the following image, the dotted line represents <db:code role="parameter">boundingRect</db:code> as calculated by the function, and the dashed line represents the rectangle defined by <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>:</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainter-text-bounds.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">QPainter painter(this);
QFont font = painter.font();
font.setPixelSize(48);
painter.setFont(font);

const QRect rectangle = QRect(0, 0, 100, 50);
QRect boundingRect;
painter.drawText(rectangle, 0, tr(&quot;Hello&quot;), &amp;amp;boundingRect);

QPen pen = painter.pen();
pen.setStyle(Qt::DotLine);
painter.setPen(pen);
painter.drawRect(boundingRect.adjusted(0, 0, -pen.width(), -pen.width()));

pen.setStyle(Qt::DashLine);
painter.setPen(pen);
painter.drawRect(rectangle.adjusted(0, 0, -pen.width(), -pen.width()));
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code role="parameter">flags</db:code> argument is a bitwise OR of the following flags:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignLeft</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignRight</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignHCenter</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignJustify</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignTop</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignBottom</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignVCenter</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignCenter</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextSingleLine</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextExpandTabs</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextShowMnemonic</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextWordWrap</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>By default, <db:link xlink:href="qpainter.xml">QPainter</db:link> draws text anti-aliased.</db:para>
<db:note>
<db:para>The y-position is used as the top of the font.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignmentFlag</db:link></db:member>
<db:member><db:link xlink:href="qt.xml#TextFlag-enum">Qt::TextFlag</db:link></db:member>
<db:member><db:link xlink:href="qpainter.xml#setFont">setFont</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setPen">setPen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawText-6">
<db:title>void QPainter::drawText(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, const QTextOption &amp;<db:emphasis>option</db:emphasis> = QTextOption())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawText</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTextOption &amp;</db:type>
<db:parameter>option</db:parameter>
<db:initializer>QTextOption()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawText(const QRectF &amp;rectangle, const QString &amp;text, const QTextOption &amp;option)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws the given <db:code role="parameter">text</db:code> in the <db:code role="parameter">rectangle</db:code> specified using the <db:code role="parameter">option</db:code> to control its positioning, direction, and orientation. The options given in <db:code role="parameter">option</db:code> override those set on the <db:link xlink:href="qpainter.xml">QPainter</db:link> object itself.</db:para>
<db:para>By default, <db:link xlink:href="qpainter.xml">QPainter</db:link> draws text anti-aliased.</db:para>
<db:note>
<db:para>The y-coordinate of <db:code role="parameter">rectangle</db:code> is used as the top of the font.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setFont">setFont</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setPen">setPen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawTiledPixmap">
<db:title>void QPainter::drawTiledPixmap(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, const QPointF &amp;<db:emphasis>position</db:emphasis> = QPointF())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawTiledPixmap</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>position</db:parameter>
<db:initializer>QPointF()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawTiledPixmap(const QRectF &amp;rectangle, const QPixmap &amp;pixmap, const QPointF &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws a tiled <db:code role="parameter">pixmap</db:code>, inside the given <db:code role="parameter">rectangle</db:code> with its origin at the given <db:code role="parameter">position</db:code>.</db:para>
<db:para>Calling drawTiledPixmap() is similar to calling <db:link xlink:href="qpainter.xml#drawPixmap">drawPixmap</db:link>() several times to fill (tile) an area with a pixmap, but is potentially much more efficient depending on the underlying window system.</db:para>
<db:para>drawTiledPixmap() will produce the same visual tiling pattern on high-dpi displays (with devicePixelRatio &gt; 1), compared to normal- dpi displays. Set the devicePixelRatio on the <db:code role="parameter">pixmap</db:code> to control the tile size. For example, setting it to 2 halves the tile width and height (on both 1x and 2x displays), and produces high-resolution output on 2x displays.</db:para>
<db:para>The <db:code role="parameter">position</db:code> offset is always in the painter coordinate system, indepentent of display devicePixelRatio.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#drawPixmap">drawPixmap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawTiledPixmap-1">
<db:title>void QPainter::drawTiledPixmap(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, int <db:emphasis>sx</db:emphasis> = 0, int <db:emphasis>sy</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawTiledPixmap</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sx</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sy</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawTiledPixmap(int x, int y, int width, int height, const QPixmap &amp;pixmap, int sx, int sy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws a tiled <db:code role="parameter">pixmap</db:code> in the specified rectangle.</db:para>
<db:para>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) specifies the top-left point in the paint device that is to be drawn onto; with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>. (<db:code role="parameter">sx</db:code>, <db:code role="parameter">sy</db:code>) specifies the top-left point in the <db:code role="parameter">pixmap</db:code> that is to be drawn; this defaults to (0, 0).</db:para>
</db:section>
<db:section xml:id="drawTiledPixmap-2">
<db:title>void QPainter::drawTiledPixmap(const QRect &amp;<db:emphasis>rectangle</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, const QPoint &amp;<db:emphasis>position</db:emphasis> = QPoint())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>drawTiledPixmap</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>position</db:parameter>
<db:initializer>QPoint()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawTiledPixmap(const QRect &amp;rectangle, const QPixmap &amp;pixmap, const QPoint &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws a tiled <db:code role="parameter">pixmap</db:code>, inside the given <db:code role="parameter">rectangle</db:code> with its origin at the given <db:code role="parameter">position</db:code>.</db:para>
</db:section>
<db:section xml:id="end">
<db:title>bool QPainter::end()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>end</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool end()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Ends painting. Any resources used while painting are released. You don't normally need to call this since it is called by the destructor.</db:para>
<db:para>Returns <db:code>true</db:code> if the painter is no longer active; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#isActive">isActive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endNativePainting">
<db:title>void QPainter::endNativePainting()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>endNativePainting</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void endNativePainting()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Restores the painter after manually issuing native painting commands. Lets the painter restore any native state that it relies on before calling any other painter commands.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#beginNativePainting">beginNativePainting</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="eraseRect">
<db:title>void QPainter::eraseRect(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>eraseRect</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void eraseRect(const QRectF &amp;rectangle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Erases the area inside the given <db:code role="parameter">rectangle</db:code>. Equivalent to calling</db:para>
<db:programlisting language="cpp">fillRect(rectangle, background());
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#fillRect">fillRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="eraseRect-1">
<db:title>void QPainter::eraseRect(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>eraseRect</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void eraseRect(int x, int y, int width, int height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Erases the area inside the rectangle beginning at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>.</db:para>
</db:section>
<db:section xml:id="eraseRect-2">
<db:title>void QPainter::eraseRect(const QRect &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>eraseRect</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void eraseRect(const QRect &amp;rectangle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Erases the area inside the given <db:code role="parameter">rectangle</db:code>.</db:para>
</db:section>
<db:section xml:id="fillPath">
<db:title>void QPainter::fillPath(const QPainterPath &amp;<db:emphasis>path</db:emphasis>, const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fillPath</db:methodname>
<db:methodparam>
<db:type>const QPainterPath &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fillPath(const QPainterPath &amp;path, const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Fills the given <db:code role="parameter">path</db:code> using the given <db:code role="parameter">brush</db:code>. The outline is not drawn.</db:para>
<db:para>Alternatively, you can specify a <db:link xlink:href="qcolor.xml">QColor</db:link> instead of a <db:link xlink:href="qbrush.xml">QBrush</db:link>; the <db:link xlink:href="qbrush.xml">QBrush</db:link> constructor (taking a <db:link xlink:href="qcolor.xml">QColor</db:link> argument) will automatically create a solid pattern brush.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#drawPath">drawPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fillRect">
<db:title>void QPainter::fillRect(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>, const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fillRect</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fillRect(const QRectF &amp;rectangle, const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Fills the given <db:code role="parameter">rectangle</db:code> with the <db:code role="parameter">brush</db:code> specified.</db:para>
<db:para>Alternatively, you can specify a <db:link xlink:href="qcolor.xml">QColor</db:link> instead of a <db:link xlink:href="qbrush.xml">QBrush</db:link>; the <db:link xlink:href="qbrush.xml">QBrush</db:link> constructor (taking a <db:link xlink:href="qcolor.xml">QColor</db:link> argument) will automatically create a solid pattern brush.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#drawRect">drawRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fillRect-1">
<db:title>void QPainter::fillRect(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fillRect</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void fillRect(int x, int y, int width, int height, const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Fills the rectangle beginning at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>, using the given <db:code role="parameter">brush</db:code>.</db:para>
</db:section>
<db:section xml:id="fillRect-2">
<db:title>void QPainter::fillRect(const QRect &amp;<db:emphasis>rectangle</db:emphasis>, const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fillRect</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void fillRect(const QRect &amp;rectangle, const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Fills the given <db:code role="parameter">rectangle</db:code> with the specified <db:code role="parameter">brush</db:code>.</db:para>
</db:section>
<db:section xml:id="fillRect-3">
<db:title>void QPainter::fillRect(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>, const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fillRect</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void fillRect(const QRectF &amp;rectangle, const QColor &amp;color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Fills the given <db:code role="parameter">rectangle</db:code> with the <db:code role="parameter">color</db:code> specified.</db:para>
</db:section>
<db:section xml:id="fillRect-4">
<db:title>void QPainter::fillRect(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fillRect</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">void fillRect(int x, int y, int width, int height, const QColor &amp;color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Fills the rectangle beginning at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>, using the given <db:code role="parameter">color</db:code>.</db:para>
</db:section>
<db:section xml:id="fillRect-5">
<db:title>void QPainter::fillRect(const QRect &amp;<db:emphasis>rectangle</db:emphasis>, const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fillRect</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">void fillRect(const QRect &amp;rectangle, const QColor &amp;color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Fills the given <db:code role="parameter">rectangle</db:code> with the <db:code role="parameter">color</db:code> specified.</db:para>
</db:section>
<db:section xml:id="fillRect-6">
<db:title>void QPainter::fillRect(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, Qt::GlobalColor <db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fillRect</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::GlobalColor</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">void fillRect(int x, int y, int width, int height, Qt::GlobalColor color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Fills the rectangle beginning at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>, using the given <db:code role="parameter">color</db:code>.</db:para>
</db:section>
<db:section xml:id="fillRect-7">
<db:title>void QPainter::fillRect(const QRect &amp;<db:emphasis>rectangle</db:emphasis>, Qt::GlobalColor <db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fillRect</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::GlobalColor</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">void fillRect(const QRect &amp;rectangle, Qt::GlobalColor color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Fills the given <db:code role="parameter">rectangle</db:code> with the specified <db:code role="parameter">color</db:code>.</db:para>
</db:section>
<db:section xml:id="fillRect-8">
<db:title>void QPainter::fillRect(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>, Qt::GlobalColor <db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fillRect</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::GlobalColor</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">void fillRect(const QRectF &amp;rectangle, Qt::GlobalColor color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Fills the given <db:code role="parameter">rectangle</db:code> with the specified <db:code role="parameter">color</db:code>.</db:para>
</db:section>
<db:section xml:id="fillRect-9">
<db:title>void QPainter::fillRect(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, Qt::BrushStyle <db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fillRect</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::BrushStyle</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">void fillRect(int x, int y, int width, int height, Qt::BrushStyle style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Fills the rectangle beginning at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>, using the brush <db:code role="parameter">style</db:code> specified.</db:para>
</db:section>
<db:section xml:id="fillRect-10">
<db:title>void QPainter::fillRect(const QRect &amp;<db:emphasis>rectangle</db:emphasis>, Qt::BrushStyle <db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fillRect</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::BrushStyle</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">void fillRect(const QRect &amp;rectangle, Qt::BrushStyle style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Fills the given <db:code role="parameter">rectangle</db:code> with the brush <db:code role="parameter">style</db:code> specified.</db:para>
</db:section>
<db:section xml:id="fillRect-11">
<db:title>void QPainter::fillRect(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>, Qt::BrushStyle <db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fillRect</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::BrushStyle</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">11</db:synopsisinfo>
<db:synopsisinfo role="signature">void fillRect(const QRectF &amp;rectangle, Qt::BrushStyle style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Fills the given <db:code role="parameter">rectangle</db:code> with the brush <db:code role="parameter">style</db:code> specified.</db:para>
</db:section>
<db:section xml:id="fillRect-12">
<db:title>[since 5.12] void QPainter::fillRect(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, QGradient::Preset <db:emphasis>preset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fillRect</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGradient::Preset</db:type>
<db:parameter>preset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">12</db:synopsisinfo>
<db:synopsisinfo role="signature">void fillRect(int x, int y, int width, int height, QGradient::Preset preset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Fills the rectangle beginning at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>, using the given gradient <db:code role="parameter">preset</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
</db:section>
<db:section xml:id="fillRect-13">
<db:title>[since 5.12] void QPainter::fillRect(const QRect &amp;<db:emphasis>rectangle</db:emphasis>, QGradient::Preset <db:emphasis>preset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fillRect</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGradient::Preset</db:type>
<db:parameter>preset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">13</db:synopsisinfo>
<db:synopsisinfo role="signature">void fillRect(const QRect &amp;rectangle, QGradient::Preset preset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Fills the given <db:code role="parameter">rectangle</db:code> with the specified gradient <db:code role="parameter">preset</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
</db:section>
<db:section xml:id="fillRect-14">
<db:title>[since 5.12] void QPainter::fillRect(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>, QGradient::Preset <db:emphasis>preset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fillRect</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGradient::Preset</db:type>
<db:parameter>preset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">14</db:synopsisinfo>
<db:synopsisinfo role="signature">void fillRect(const QRectF &amp;rectangle, QGradient::Preset preset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Fills the given <db:code role="parameter">rectangle</db:code> with the specified gradient <db:code role="parameter">preset</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
</db:section>
<db:section xml:id="font">
<db:title>const QFont &amp;QPainter::font() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QFont &amp;</db:type>
<db:methodname>font</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QFont &amp; font() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the currently set font used for drawing text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setFont">setFont</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawText">drawText</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#settings">Settings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontInfo">
<db:title>QFontInfo QPainter::fontInfo() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFontInfo</db:type>
<db:methodname>fontInfo</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFontInfo fontInfo() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the font info for the painter if the painter is active. Otherwise, the return value is undefined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#font">font</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#isActive">isActive</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#settings">Settings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontMetrics">
<db:title>QFontMetrics QPainter::fontMetrics() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFontMetrics</db:type>
<db:methodname>fontMetrics</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFontMetrics fontMetrics() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the font metrics for the painter if the painter is active. Otherwise, the return value is undefined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#font">font</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#isActive">isActive</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#settings">Settings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasClipping">
<db:title>bool QPainter::hasClipping() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasClipping</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasClipping() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if clipping has been set; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setClipping">setClipping</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#clipping">Clipping</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isActive">
<db:title>bool QPainter::isActive() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isActive</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isActive() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:link xlink:href="qpainter.xml#begin">begin</db:link>() has been called and <db:link xlink:href="qpainter.xml#end">end</db:link>() has not yet been called; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintdevice.xml#paintingActive">QPaintDevice::paintingActive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layoutDirection">
<db:title>Qt::LayoutDirection QPainter::layoutDirection() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::LayoutDirection</db:type>
<db:methodname>layoutDirection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::LayoutDirection layoutDirection() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the layout direction used by the painter when drawing text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextoption.xml#textDirection">QTextOption::textDirection</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setLayoutDirection">setLayoutDirection</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawText">drawText</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#settings">Settings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="opacity">
<db:title>qreal QPainter::opacity() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>opacity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal opacity() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the opacity of the painter. The default value is 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setOpacity">setOpacity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintEngine">
<db:title>QPaintEngine *QPainter::paintEngine() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPaintEngine *</db:type>
<db:methodname>paintEngine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPaintEngine * paintEngine() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the paint engine that the painter is currently operating on if the painter is active; otherwise 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#isActive">isActive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pen">
<db:title>const QPen &amp;QPainter::pen() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QPen &amp;</db:type>
<db:methodname>pen</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QPen &amp; pen() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the painter's current pen.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setPen">setPen</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#settings">Settings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="renderHints">
<db:title>QPainter::RenderHints QPainter::renderHints() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPainter::RenderHints</db:type>
<db:methodname>renderHints</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainter::RenderHints renderHints() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a flag that specifies the rendering hints that are set for this painter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setRenderHints">setRenderHints</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#testRenderHint">testRenderHint</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#rendering-quality">Rendering Quality</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resetTransform">
<db:title>void QPainter::resetTransform()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resetTransform</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resetTransform()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets any transformations that were made using <db:link xlink:href="qpainter.xml#translate">translate</db:link>(), <db:link xlink:href="qpainter.xml#scale">scale</db:link>(), <db:link xlink:href="qpainter.xml#shear">shear</db:link>(), <db:link xlink:href="qpainter.xml#rotate">rotate</db:link>(), <db:link xlink:href="qpainter.xml#setWorldTransform">setWorldTransform</db:link>(), <db:link xlink:href="qpainter.xml#setViewport">setViewport</db:link>() and <db:link xlink:href="qpainter.xml#setWindow">setWindow</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#coordinate-transformations">Coordinate Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="restore">
<db:title>void QPainter::restore()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>restore</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void restore()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Restores the current painter state (pops a saved state off the stack).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#save">save</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rotate">
<db:title>void QPainter::rotate(qreal <db:emphasis>angle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>rotate</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>angle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void rotate(qreal angle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Rotates the coordinate system clockwise. The given <db:code role="parameter">angle</db:code> parameter is in degrees.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setWorldTransform">setWorldTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#coordinate-transformations">Coordinate Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="save">
<db:title>void QPainter::save()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>save</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void save()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Saves the current painter state (pushes the state onto a stack). A save() must be followed by a corresponding <db:link xlink:href="qpainter.xml#restore">restore</db:link>(); the <db:link xlink:href="qpainter.xml#end">end</db:link>() function unwinds the stack.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#restore">restore</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scale">
<db:title>void QPainter::scale(qreal <db:emphasis>sx</db:emphasis>, qreal <db:emphasis>sy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>scale</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>sx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>sy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void scale(qreal sx, qreal sy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Scales the coordinate system by (<db:code role="parameter">sx</db:code>, <db:code role="parameter">sy</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setWorldTransform">setWorldTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#coordinate-transformations">Coordinate Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBackground">
<db:title>void QPainter::setBackground(const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBackground</db:methodname>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBackground(const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the background brush of the painter to the given <db:code role="parameter">brush</db:code>.</db:para>
<db:para>The background brush is the brush that is filled in when drawing opaque text, stippled lines and bitmaps. The background brush has no effect in transparent background mode (which is the default).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#background">background</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setBackgroundMode">setBackgroundMode</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#settings">Settings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBackgroundMode">
<db:title>void QPainter::setBackgroundMode(Qt::BGMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBackgroundMode</db:methodname>
<db:methodparam>
<db:type>Qt::BGMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBackgroundMode(Qt::BGMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the background mode of the painter to the given <db:code role="parameter">mode</db:code></db:para>
<db:para><db:link xlink:href="qt.xml#BGMode-enum">Qt::TransparentMode</db:link> (the default) draws stippled lines and text without setting the background pixels. <db:link xlink:href="qt.xml#BGMode-enum">Qt::OpaqueMode</db:link> fills these space with the current background color.</db:para>
<db:para>Note that in order to draw a bitmap or pixmap transparently, you must use <db:link xlink:href="qpixmap.xml#setMask">QPixmap::setMask</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#backgroundMode">backgroundMode</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setBackground">setBackground</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#settings">Settings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBrush">
<db:title>void QPainter::setBrush(const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBrush</db:methodname>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBrush(const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the painter's brush to the given <db:code role="parameter">brush</db:code>.</db:para>
<db:para>The painter's brush defines how shapes are filled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#brush">brush</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#settings">Settings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBrush-1">
<db:title>void QPainter::setBrush(Qt::BrushStyle <db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBrush</db:methodname>
<db:methodparam>
<db:type>Qt::BrushStyle</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBrush(Qt::BrushStyle style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the painter's brush to black color and the specified <db:code role="parameter">style</db:code>.</db:para>
</db:section>
<db:section xml:id="setBrushOrigin">
<db:title>void QPainter::setBrushOrigin(const QPointF &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBrushOrigin</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBrushOrigin(const QPointF &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the brush origin to <db:code role="parameter">position</db:code>.</db:para>
<db:para>The brush origin specifies the (0, 0) coordinate of the painter's brush.</db:para>
<db:para>Note that while the <db:link xlink:href="qpainter.xml#brushOrigin">brushOrigin</db:link>() was necessary to adopt the parent's background for a widget in Qt 3, this is no longer the case since the Qt 4 painter doesn't paint the background unless you explicitly tell it to do so by setting the widget's <db:link xlink:href="qwidget.xml#autoFillBackground-prop">autoFillBackground</db:link> property to true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#brushOrigin">brushOrigin</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#settings">Settings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBrushOrigin-1">
<db:title>void QPainter::setBrushOrigin(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBrushOrigin</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBrushOrigin(int x, int y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the brush's origin to point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
</db:section>
<db:section xml:id="setBrushOrigin-2">
<db:title>void QPainter::setBrushOrigin(const QPoint &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBrushOrigin</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBrushOrigin(const QPoint &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the brush's origin to the given <db:code role="parameter">position</db:code>.</db:para>
</db:section>
<db:section xml:id="setClipPath">
<db:title>void QPainter::setClipPath(const QPainterPath &amp;<db:emphasis>path</db:emphasis>, Qt::ClipOperation <db:emphasis>operation</db:emphasis> = Qt::ReplaceClip)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setClipPath</db:methodname>
<db:methodparam>
<db:type>const QPainterPath &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ClipOperation</db:type>
<db:parameter>operation</db:parameter>
<db:initializer>Qt::ReplaceClip</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setClipPath(const QPainterPath &amp;path, Qt::ClipOperation operation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables clipping, and sets the clip path for the painter to the given <db:code role="parameter">path</db:code>, with the clip <db:code role="parameter">operation</db:code>.</db:para>
<db:para>Note that the clip path is specified in logical (painter) coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#clipPath">clipPath</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#clipRegion">clipRegion</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#clipping">Clipping</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setClipRect">
<db:title>void QPainter::setClipRect(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>, Qt::ClipOperation <db:emphasis>operation</db:emphasis> = Qt::ReplaceClip)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setClipRect</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ClipOperation</db:type>
<db:parameter>operation</db:parameter>
<db:initializer>Qt::ReplaceClip</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setClipRect(const QRectF &amp;rectangle, Qt::ClipOperation operation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables clipping, and sets the clip region to the given <db:code role="parameter">rectangle</db:code> using the given clip <db:code role="parameter">operation</db:code>. The default operation is to replace the current clip rectangle.</db:para>
<db:para>Note that the clip rectangle is specified in logical (painter) coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#clipRegion">clipRegion</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setClipping">setClipping</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#clipping">Clipping</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setClipRect-1">
<db:title>void QPainter::setClipRect(const QRect &amp;<db:emphasis>rectangle</db:emphasis>, Qt::ClipOperation <db:emphasis>operation</db:emphasis> = Qt::ReplaceClip)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setClipRect</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ClipOperation</db:type>
<db:parameter>operation</db:parameter>
<db:initializer>Qt::ReplaceClip</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setClipRect(const QRect &amp;rectangle, Qt::ClipOperation operation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Enables clipping, and sets the clip region to the given <db:code role="parameter">rectangle</db:code> using the given clip <db:code role="parameter">operation</db:code>.</db:para>
</db:section>
<db:section xml:id="setClipRect-2">
<db:title>void QPainter::setClipRect(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, Qt::ClipOperation <db:emphasis>operation</db:emphasis> = Qt::ReplaceClip)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setClipRect</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ClipOperation</db:type>
<db:parameter>operation</db:parameter>
<db:initializer>Qt::ReplaceClip</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void setClipRect(int x, int y, int width, int height, Qt::ClipOperation operation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables clipping, and sets the clip region to the rectangle beginning at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>.</db:para>
</db:section>
<db:section xml:id="setClipRegion">
<db:title>void QPainter::setClipRegion(const QRegion &amp;<db:emphasis>region</db:emphasis>, Qt::ClipOperation <db:emphasis>operation</db:emphasis> = Qt::ReplaceClip)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setClipRegion</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>region</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ClipOperation</db:type>
<db:parameter>operation</db:parameter>
<db:initializer>Qt::ReplaceClip</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setClipRegion(const QRegion &amp;region, Qt::ClipOperation operation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the clip region to the given <db:code role="parameter">region</db:code> using the specified clip <db:code role="parameter">operation</db:code>. The default clip operation is to replace the current clip region.</db:para>
<db:para>Note that the clip region is given in logical coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#clipRegion">clipRegion</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setClipRect">setClipRect</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#clipping">Clipping</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setClipping">
<db:title>void QPainter::setClipping(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setClipping</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setClipping(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables clipping if <db:code role="parameter">enable</db:code> is true, or disables clipping if <db:code role="parameter">enable</db:code> is false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#hasClipping">hasClipping</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#clipping">Clipping</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCompositionMode">
<db:title>void QPainter::setCompositionMode(QPainter::CompositionMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCompositionMode</db:methodname>
<db:methodparam>
<db:type>QPainter::CompositionMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCompositionMode(QPainter::CompositionMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the composition mode to the given <db:code role="parameter">mode</db:code>.</db:para>
<db:warning>
<db:para>Only a <db:link xlink:href="qpainter.xml">QPainter</db:link> operating on a <db:link xlink:href="qimage.xml">QImage</db:link> fully supports all composition modes. The RasterOp modes are supported for X11 as described in <db:link xlink:href="qpainter.xml#compositionMode">compositionMode</db:link>().</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#compositionMode">compositionMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFont">
<db:title>void QPainter::setFont(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFont</db:methodname>
<db:methodparam>
<db:type>const QFont &amp;</db:type>
<db:parameter>font</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFont(const QFont &amp;font)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the painter's font to the given <db:code role="parameter">font</db:code>.</db:para>
<db:para>This font is used by subsequent <db:link xlink:href="qpainter.xml#drawText">drawText</db:link>() functions. The text color is the same as the pen color.</db:para>
<db:para>If you set a font that isn't available, Qt finds a close match. <db:link xlink:href="qpainter.xml#font">font</db:link>() will return what you set using setFont() and <db:link xlink:href="qpainter.xml#fontInfo">fontInfo</db:link>() returns the font actually being used (which may be the same).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#font">font</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawText">drawText</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#settings">Settings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLayoutDirection">
<db:title>void QPainter::setLayoutDirection(Qt::LayoutDirection <db:emphasis>direction</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLayoutDirection</db:methodname>
<db:methodparam>
<db:type>Qt::LayoutDirection</db:type>
<db:parameter>direction</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLayoutDirection(Qt::LayoutDirection direction)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the layout direction used by the painter when drawing text, to the specified <db:code role="parameter">direction</db:code>.</db:para>
<db:para>The default is <db:link xlink:href="qt.xml#LayoutDirection-enum">Qt::LayoutDirectionAuto</db:link>, which will implicitly determine the direction from the text drawn.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextoption.xml#setTextDirection">QTextOption::setTextDirection</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#layoutDirection">layoutDirection</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawText">drawText</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#settings">Settings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOpacity">
<db:title>void QPainter::setOpacity(qreal <db:emphasis>opacity</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOpacity</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>opacity</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOpacity(qreal opacity)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the opacity of the painter to <db:code role="parameter">opacity</db:code>. The value should be in the range 0.0 to 1.0, where 0.0 is fully transparent and 1.0 is fully opaque.</db:para>
<db:para>Opacity set on the painter will apply to all drawing operations individually.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#opacity">opacity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPen">
<db:title>void QPainter::setPen(const QPen &amp;<db:emphasis>pen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPen</db:methodname>
<db:methodparam>
<db:type>const QPen &amp;</db:type>
<db:parameter>pen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPen(const QPen &amp;pen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the painter's pen to be the given <db:code role="parameter">pen</db:code>.</db:para>
<db:para>The <db:code role="parameter">pen</db:code> defines how to draw lines and outlines, and it also defines the text color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#pen">pen</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#settings">Settings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPen-1">
<db:title>void QPainter::setPen(const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPen</db:methodname>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPen(const QColor &amp;color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the painter's pen to have style <db:link xlink:href="qt.xml#PenStyle-enum">Qt::SolidLine</db:link>, width 1 and the specified <db:code role="parameter">color</db:code>.</db:para>
</db:section>
<db:section xml:id="setPen-2">
<db:title>void QPainter::setPen(Qt::PenStyle <db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPen</db:methodname>
<db:methodparam>
<db:type>Qt::PenStyle</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPen(Qt::PenStyle style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the painter's pen to have the given <db:code role="parameter">style</db:code>, width 1 and black color.</db:para>
</db:section>
<db:section xml:id="setRenderHint">
<db:title>void QPainter::setRenderHint(QPainter::RenderHint <db:emphasis>hint</db:emphasis>, bool <db:emphasis>on</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRenderHint</db:methodname>
<db:methodparam>
<db:type>QPainter::RenderHint</db:type>
<db:parameter>hint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>on</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRenderHint(QPainter::RenderHint hint, bool on)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the given render <db:code role="parameter">hint</db:code> on the painter if <db:code role="parameter">on</db:code> is true; otherwise clears the render hint.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setRenderHints">setRenderHints</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#renderHints">renderHints</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#rendering-quality">Rendering Quality</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRenderHints">
<db:title>void QPainter::setRenderHints(QPainter::RenderHints <db:emphasis>hints</db:emphasis>, bool <db:emphasis>on</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRenderHints</db:methodname>
<db:methodparam>
<db:type>QPainter::RenderHints</db:type>
<db:parameter>hints</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>on</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRenderHints(QPainter::RenderHints hints, bool on)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the given render <db:code role="parameter">hints</db:code> on the painter if <db:code role="parameter">on</db:code> is true; otherwise clears the render hints.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setRenderHint">setRenderHint</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#renderHints">renderHints</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#rendering-quality">Rendering Quality</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransform">
<db:title>void QPainter::setTransform(const QTransform &amp;<db:emphasis>transform</db:emphasis>, bool <db:emphasis>combine</db:emphasis> = false)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTransform</db:methodname>
<db:methodparam>
<db:type>const QTransform &amp;</db:type>
<db:parameter>transform</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>combine</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTransform(const QTransform &amp;transform, bool combine)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the world transformation matrix. If <db:code role="parameter">combine</db:code> is true, the specified <db:code role="parameter">transform</db:code> is combined with the current matrix; otherwise it replaces the current matrix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setWorldTransform">setWorldTransform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setViewTransformEnabled">
<db:title>void QPainter::setViewTransformEnabled(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setViewTransformEnabled</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setViewTransformEnabled(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables view transformations if <db:code role="parameter">enable</db:code> is true, or disables view transformations if <db:code role="parameter">enable</db:code> is false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#viewTransformEnabled">viewTransformEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="coordsys.xml#window-viewport-conversion">Window-Viewport Conversion</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setViewport">
<db:title>void QPainter::setViewport(const QRect &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setViewport</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setViewport(const QRect &amp;rectangle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the painter's viewport rectangle to the given <db:code role="parameter">rectangle</db:code>, and enables view transformations.</db:para>
<db:para>The viewport rectangle is part of the view transformation. The viewport specifies the device coordinate system. Its sister, the <db:link xlink:href="qpainter.xml#window">window</db:link>(), specifies the logical coordinate system.</db:para>
<db:para>The default viewport rectangle is the same as the device's rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#viewport">viewport</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#viewTransformEnabled">viewTransformEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="coordsys.xml#window-viewport-conversion">Window-Viewport Conversion</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setViewport-1">
<db:title>void QPainter::setViewport(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setViewport</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setViewport(int x, int y, int width, int height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the painter's viewport rectangle to be the rectangle beginning at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>.</db:para>
</db:section>
<db:section xml:id="setWindow">
<db:title>void QPainter::setWindow(const QRect &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWindow</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWindow(const QRect &amp;rectangle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the painter's window to the given <db:code role="parameter">rectangle</db:code>, and enables view transformations.</db:para>
<db:para>The window rectangle is part of the view transformation. The window specifies the logical coordinate system. Its sister, the <db:link xlink:href="qpainter.xml#viewport">viewport</db:link>(), specifies the device coordinate system.</db:para>
<db:para>The default window rectangle is the same as the device's rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#window">window</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#viewTransformEnabled">viewTransformEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="coordsys.xml#window-viewport-conversion">Window-Viewport Conversion</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWindow-1">
<db:title>void QPainter::setWindow(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWindow</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWindow(int x, int y, int width, int height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the painter's window to the rectangle beginning at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) and the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>.</db:para>
</db:section>
<db:section xml:id="setWorldMatrixEnabled">
<db:title>void QPainter::setWorldMatrixEnabled(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWorldMatrixEnabled</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWorldMatrixEnabled(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables transformations if <db:code role="parameter">enable</db:code> is true, or disables transformations if <db:code role="parameter">enable</db:code> is false. The world transformation matrix is not changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#worldMatrixEnabled">worldMatrixEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#worldTransform">worldTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#coordinate-transformations">Coordinate Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWorldTransform">
<db:title>void QPainter::setWorldTransform(const QTransform &amp;<db:emphasis>matrix</db:emphasis>, bool <db:emphasis>combine</db:emphasis> = false)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWorldTransform</db:methodname>
<db:methodparam>
<db:type>const QTransform &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>combine</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWorldTransform(const QTransform &amp;matrix, bool combine)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the world transformation matrix. If <db:code role="parameter">combine</db:code> is true, the specified <db:code role="parameter">matrix</db:code> is combined with the current matrix; otherwise it replaces the current matrix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#worldTransform">worldTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setTransform">setTransform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shear">
<db:title>void QPainter::shear(qreal <db:emphasis>sh</db:emphasis>, qreal <db:emphasis>sv</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>shear</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>sh</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>sv</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void shear(qreal sh, qreal sv)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Shears the coordinate system by (<db:code role="parameter">sh</db:code>, <db:code role="parameter">sv</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setWorldTransform">setWorldTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#coordinate-transformations">Coordinate Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="strokePath">
<db:title>void QPainter::strokePath(const QPainterPath &amp;<db:emphasis>path</db:emphasis>, const QPen &amp;<db:emphasis>pen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>strokePath</db:methodname>
<db:methodparam>
<db:type>const QPainterPath &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPen &amp;</db:type>
<db:parameter>pen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void strokePath(const QPainterPath &amp;path, const QPen &amp;pen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the outline (strokes) the path <db:code role="parameter">path</db:code> with the pen specified by <db:code role="parameter">pen</db:code></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#fillPath">fillPath</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawing">Drawing</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="testRenderHint">
<db:title>bool QPainter::testRenderHint(QPainter::RenderHint <db:emphasis>hint</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>testRenderHint</db:methodname>
<db:methodparam>
<db:type>QPainter::RenderHint</db:type>
<db:parameter>hint</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool testRenderHint(QPainter::RenderHint hint) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">hint</db:code> is set; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#renderHints">renderHints</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setRenderHint">setRenderHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transform">
<db:title>const QTransform &amp;QPainter::transform() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QTransform &amp;</db:type>
<db:methodname>transform</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QTransform &amp; transform() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Alias for <db:link xlink:href="qpainter.xml#worldTransform">worldTransform</db:link>(). Returns the world transformation matrix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setTransform">setTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#worldTransform">worldTransform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translate">
<db:title>void QPainter::translate(const QPointF &amp;<db:emphasis>offset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>translate</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>offset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void translate(const QPointF &amp;offset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Translates the coordinate system by the given <db:code role="parameter">offset</db:code>; i.e. the given <db:code role="parameter">offset</db:code> is added to points.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setWorldTransform">setWorldTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#coordinate-transformations">Coordinate Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translate-1">
<db:title>void QPainter::translate(const QPoint &amp;<db:emphasis>offset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>translate</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>offset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void translate(const QPoint &amp;offset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Translates the coordinate system by the given <db:code role="parameter">offset</db:code>.</db:para>
</db:section>
<db:section xml:id="translate-2">
<db:title>void QPainter::translate(qreal <db:emphasis>dx</db:emphasis>, qreal <db:emphasis>dy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>translate</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>dx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void translate(qreal dx, qreal dy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Translates the coordinate system by the vector (<db:code role="parameter">dx</db:code>, <db:code role="parameter">dy</db:code>).</db:para>
</db:section>
<db:section xml:id="viewTransformEnabled">
<db:title>bool QPainter::viewTransformEnabled() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>viewTransformEnabled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool viewTransformEnabled() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if view transformation is enabled; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setViewTransformEnabled">setViewTransformEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#worldTransform">worldTransform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="viewport">
<db:title>QRect QPainter::viewport() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>viewport</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect viewport() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the viewport rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setViewport">setViewport</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setViewTransformEnabled">setViewTransformEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="window">
<db:title>QRect QPainter::window() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>window</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect window() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the window rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setWindow">setWindow</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setViewTransformEnabled">setViewTransformEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="worldMatrixEnabled">
<db:title>bool QPainter::worldMatrixEnabled() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>worldMatrixEnabled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool worldMatrixEnabled() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if world transformation is enabled; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setWorldMatrixEnabled">setWorldMatrixEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#worldTransform">worldTransform</db:link>()</db:member>
<db:member><db:link xlink:href="coordsys.xml">Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="worldTransform">
<db:title>const QTransform &amp;QPainter::worldTransform() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QTransform &amp;</db:type>
<db:methodname>worldTransform</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QTransform &amp; worldTransform() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the world transformation matrix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setWorldTransform">setWorldTransform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
