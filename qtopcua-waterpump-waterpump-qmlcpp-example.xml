<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Water Pump</db:title>
<db:productname>QtOpcUa</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>An OPC UA module for Qt</db:titleabbrev>
<db:abstract>
<db:para>Interacting with an OPC UA server to build a QML-based HMI for a simple water pump machine.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis>Water Pump</db:emphasis> example shows how to use Qt OPC UA to interact with an OPC UA server to build a QML based HMI for a simple machine.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/tankexample.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="building-the-server">
<db:title>Building the Server</db:title>
<db:para>Before you can use the Water Pump examples, you need to build the <db:link xlink:href="qtopcua-waterpump-simulationserver-example.xml">Water Pump Simulation Server</db:link>. You can open and build it in QtCreator or from the terminal as usual.</db:para>
</db:section>
<db:section xml:id="the-simulation">
<db:title>The Simulation</db:title>
<db:para>The OPC UA server included in this example runs a simulation of a machine containing two tanks, a water pump, and a valve. Water can be pumped from the first tank into the second tank and then be flushed from the second tank by opening the valve. Both operations have a user-configurable setpoint, allowing control over the amount of water pumped into or flushed from the second tank.</db:para>
<db:para>The following nodes exist on the server:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:link xlink:href="qml-qtopcua-nodeid.xml">NodeId</db:link></db:para>
</db:th>
<db:th>
<db:para>Function</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>ns=2;s=Machine</db:para>
</db:td>
<db:td>
<db:para>The folder containing the method and variable nodes for the machine</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ns=2;s=Machine.State</db:para>
</db:td>
<db:td>
<db:para>The state of the machine</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ns=2;s=Machine.Tank1.PercentFilled</db:para>
</db:td>
<db:td>
<db:para>The current fill status of the first tank</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ns=2;s=Machine.Tank2.PercentFilled</db:para>
</db:td>
<db:td>
<db:para>The current fill status of the second tank</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ns=2;s=Machine.Tank2.TargetPercent</db:para>
</db:td>
<db:td>
<db:para>The setpoint for pumping and flushing</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ns=2;s=Machine.Tank2.ValveState</db:para>
</db:td>
<db:td>
<db:para>The state of the valve of the second tank</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ns=2;s=Machine.Designation</db:para>
</db:td>
<db:td>
<db:para>A human readable designation of the machine for display purposes</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ns=2;s=Machine.Start</db:para>
</db:td>
<db:td>
<db:para>Call this method to start the pump</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ns=2;s=Machine.Stop</db:para>
</db:td>
<db:td>
<db:para>Call this method to stop the pump</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ns=2;s=Machine.FlushTank2</db:para>
</db:td>
<db:td>
<db:para>Call this method to flush tank 2</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ns=2;s=Machine.Reset</db:para>
</db:td>
<db:td>
<db:para>Call this method to reset the simulation</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>All methods return <db:link xlink:href="qopcua.xml#UaStatusCode-enum">Good</db:link> in case of success and <db:link xlink:href="qopcua.xml#UaStatusCode-enum">BadUserAccessDenied</db:link> if the operation is illegal (for example, trying to start the pump if the first tank is empty).</db:para>
</db:section>
<db:section xml:id="client-features">
<db:title>Client Features</db:title>
<db:para>This example uses read, write, method calls, and data change subscriptions and shows how to set up handlers for the asynchronous operations offered by QOpcUaClient and QOpcUaNode.</db:para>
</db:section>
<db:section xml:id="implementation">
<db:title>Implementation</db:title>
<db:para>A backend class is used to handle the communication with the OPC UA server and expose the content of this server by means of properties and <db:code>Q_INVOKABLE</db:code> methods wrapping the OPC UA method calls.</db:para>
<db:section xml:id="member-variables">
<db:title>Member Variables</db:title>
<db:para>A pointer to QOpcUaClient is required for connection management. An additional pointer to a QOpcUaNode object is needed for each OPC UA node the HMI interacts with. For the values of these nodes, member variables containing the last value reported by the server are added.</db:para>
<db:programlisting language="cpp">    ...
    QScopedPointer&amp;lt;QOpcUaClient&amp;gt; m_client;
    QScopedPointer&amp;lt;QOpcUaNode&amp;gt; m_machineStateNode;
    QScopedPointer&amp;lt;QOpcUaNode&amp;gt; m_percentFilledTank1Node;
    QScopedPointer&amp;lt;QOpcUaNode&amp;gt; m_percentFilledTank2Node;
    QScopedPointer&amp;lt;QOpcUaNode&amp;gt; m_tank2TargetPercentNode;
    QScopedPointer&amp;lt;QOpcUaNode&amp;gt; m_tank2ValveStateNode;
    QScopedPointer&amp;lt;QOpcUaNode&amp;gt; m_machineNode;
    QScopedPointer&amp;lt;QOpcUaNode&amp;gt; m_machineDesignationNode;
    double m_percentFilledTank1;
    double m_percentFilledTank2;
    double m_tank2TargetPercent;
    bool m_tank2ValveState;
    MachineState m_machineState;
    QString m_machineDesignation;
    ...
</db:programlisting>
<db:para>For each value used in the HMI, a getter, a changed signal, and a property are added to enable property bindings in QML</db:para>
<db:programlisting language="cpp">    ...
    Q_PROPERTY(double percentFilledTank1 READ percentFilledTank1 NOTIFY percentFilledTank1Changed)
    Q_PROPERTY(double percentFilledTank2 READ percentFilledTank2 NOTIFY percentFilledTank2Changed)
    Q_PROPERTY(double tank2TargetPercent READ tank2TargetPercent NOTIFY tank2TargetPercentChanged)
    Q_PROPERTY(OpcUaMachineBackend::MachineState machineState READ machineState NOTIFY machineStateChanged)
    Q_PROPERTY(bool tank2ValveState READ tank2ValveState NOTIFY tank2ValveStateChanged)
    Q_PROPERTY(bool connected READ connected NOTIFY connectedChanged)
    Q_PROPERTY(QString machineDesignation READ machineDesignation NOTIFY machineDesignationChanged)
    Q_PROPERTY(QString message READ message NOTIFY messageChanged)
    ...
</db:programlisting>
</db:section>
<db:section xml:id="asynchronous-handlers">
<db:title>Asynchronous Handlers</db:title>
<db:para>The asynchronous API of Qt OPC UA requires signal handlers for all operations.</db:para>
<db:para>Data change subscriptions report their updates using <db:link xlink:href="">QOpcUaNode::attributeUpdated</db:link>. A handler connected to this signal gets the new value as <db:link xlink:href="qvariant.xml">QVariant</db:link> and can write that value to a variable or emit a signal with the new value, for example.</db:para>
<db:programlisting language="cpp">void OpcUaMachineBackend::percentFilledTank1Updated(QOpcUa::NodeAttribute attr, const QVariant &amp;amp;value)
{
    Q_UNUSED(attr);
    m_percentFilledTank1 = value.toDouble();
    emit percentFilledTank1Changed(m_percentFilledTank1);
}
</db:programlisting>
<db:para>A read operation emits the <db:link xlink:href="">QOpcUaNode::attributeRead</db:link> signal on completion. The client has to check the status code and then get the result from the node.</db:para>
<db:programlisting language="cpp">void OpcUaMachineBackend::machineDesignationRead(QOpcUa::NodeAttributes attr)
{
    if (attr &amp;amp; QOpcUa::NodeAttribute::Value) { // Make sure the value attribute has been read
        if (m_machineDesignationNode-&amp;gt;attributeError(QOpcUa::NodeAttribute::Value) == QOpcUa::UaStatusCode::Good) { // Make sure there was no error
            m_machineDesignation = m_machineDesignationNode-&amp;gt;attribute(QOpcUa::NodeAttribute::Value).toString(); // Get the attribute from the cache
            emit machineDesignationChanged(m_machineDesignation);
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="interaction-with-the-server">
<db:title>Interaction with the Server</db:title>
<db:para>In the constructor, a QOpcUaProvider is created and the available backends are saved to provide a model for the backend selection dropdown menu.</db:para>
<db:programlisting language="cpp">    ...
    QOpcUaProvider provider;
    setBackends(provider.availableBackends());
    ...
</db:programlisting>
<db:para>Before attempting a connection, a QOpcUaClient with the selected backend is created. Its <db:link xlink:href="">QOpcUaClient::endpointsRequestFinished</db:link> signal is connected to the backend's <db:code>requestEndpointsFinished</db:code> slot. The <db:link xlink:href="">QOpcUaClient::stateChanged</db:link> signal must be connected to the backend's <db:code>clientStateHandler</db:code> slot.</db:para>
<db:programlisting language="cpp">void OpcUaMachineBackend::connectToEndpoint(const QString &amp;amp;url, qint32 index)
{
    if (m_connected)
        return;

    QOpcUaProvider provider;

    if (index &amp;lt; 0 || index &amp;gt;= m_backends.size())
        return; // Invalid index

    if (!m_client || (m_client &amp;amp;&amp;amp; m_client-&amp;gt;backend() != m_backends.at(index))) {
        m_client.reset(provider.createClient(m_backends.at(index)));
        if (m_client) {
            QObject::connect(m_client.data(),
                             &amp;amp;QOpcUaClient::endpointsRequestFinished,
                             this,
                             &amp;amp;OpcUaMachineBackend::requestEndpointsFinished);
            QObject::connect(m_client.data(),
                             &amp;amp;QOpcUaClient::stateChanged,
                             this,
                             &amp;amp;OpcUaMachineBackend::clientStateHandler);
        }
    }

    if (!m_client) {
        qWarning() &amp;lt;&amp;lt; &quot;Could not create client&quot;;
        m_successfullyCreated = false;
        return;
    }

    m_successfullyCreated = true;
    m_client-&amp;gt;requestEndpoints(url);
}
</db:programlisting>
<db:para>The <db:code>OpcUaMachineBackend::requestEndpointsFinished</db:code> slot receives the list of available endpoints on the server and starts a connection to the first entry in the list. If there are no available endpoints, the connection establishment is aborted.</db:para>
<db:programlisting language="cpp">void OpcUaMachineBackend::requestEndpointsFinished(const QList&amp;lt;QOpcUaEndpointDescription&amp;gt; &amp;amp;endpoints)
{
    if (endpoints.isEmpty()) {
       qWarning() &amp;lt;&amp;lt; &quot;The server did not return any endpoints&quot;;
       clientStateHandler(QOpcUaClient::ClientState::Disconnected);
       return;
    }
    m_client-&amp;gt;connectToEndpoint(endpoints.at(0));
}
</db:programlisting>
<db:para><db:code>clientStateHandler</db:code> acts on QOpcUaClient being connected or disconnected. In case of a successful connection, the node member variables created before are filled with node objects.</db:para>
<db:programlisting language="cpp">    ...
    if (state == QOpcUaClient::ClientState::Connected) {
        setMessage(u&quot;Connected&quot;_s);
        // Create node objects for reading, writing and subscriptions
        m_machineNode.reset(m_client-&amp;gt;node(u&quot;ns=2;s=Machine&quot;_s));
        m_machineStateNode.reset(m_client-&amp;gt;node(u&quot;ns=2;s=Machine.State&quot;_s));
        m_percentFilledTank1Node.reset(m_client-&amp;gt;node(u&quot;ns=2;s=Machine.Tank1.PercentFilled&quot;_s));
        m_percentFilledTank2Node.reset(m_client-&amp;gt;node(u&quot;ns=2;s=Machine.Tank2.PercentFilled&quot;_s));
        m_tank2TargetPercentNode.reset(m_client-&amp;gt;node(u&quot;ns=2;s=Machine.Tank2.TargetPercent&quot;_s));
        m_tank2ValveStateNode.reset(m_client-&amp;gt;node(u&quot;ns=2;s=Machine.Tank2.ValveState&quot;_s));
        m_machineDesignationNode.reset(m_client-&amp;gt;node(u&quot;ns=2;s=Machine.Designation&quot;_s));
    ...
</db:programlisting>
<db:para>After all node objects have been created, the data change handlers are connected to the node objects and monitoring is enabled.</db:para>
<db:programlisting language="cpp">    ...
        // Connect signal handlers for subscribed values
        QObject::connect(m_machineStateNode.data(),
                         &amp;amp;QOpcUaNode::dataChangeOccurred,
                         this,
                         &amp;amp;OpcUaMachineBackend::machineStateUpdated);
        QObject::connect(m_percentFilledTank1Node.data(),
                         &amp;amp;QOpcUaNode::dataChangeOccurred,
                         this,
                         &amp;amp;OpcUaMachineBackend::percentFilledTank1Updated);
        QObject::connect(m_percentFilledTank2Node.data(),
                         &amp;amp;QOpcUaNode::dataChangeOccurred,
                         this,
                         &amp;amp;OpcUaMachineBackend::percentFilledTank2Updated);
        QObject::connect(m_tank2TargetPercentNode.data(),
                         &amp;amp;QOpcUaNode::dataChangeOccurred,
                         this,
                         &amp;amp;OpcUaMachineBackend::tank2TargetPercentUpdated);
        QObject::connect(m_tank2ValveStateNode.data(),
                         &amp;amp;QOpcUaNode::dataChangeOccurred,
                         this,
                         &amp;amp;OpcUaMachineBackend::tank2ValveStateUpdated);

        // Subscribe to data changes
        m_machineStateNode-&amp;gt;enableMonitoring(
                QOpcUa::NodeAttribute::Value, QOpcUaMonitoringParameters(100));
        m_percentFilledTank1Node-&amp;gt;enableMonitoring(
                QOpcUa::NodeAttribute::Value, QOpcUaMonitoringParameters(100));
        m_percentFilledTank2Node-&amp;gt;enableMonitoring(
                QOpcUa::NodeAttribute::Value, QOpcUaMonitoringParameters(100));
        m_tank2TargetPercentNode-&amp;gt;enableMonitoring(
                QOpcUa::NodeAttribute::Value, QOpcUaMonitoringParameters(100));
        m_tank2ValveStateNode-&amp;gt;enableMonitoring(
    ...
</db:programlisting>
<db:para>The machine designation is not supposed to change and will be read once at startup.</db:para>
<db:programlisting language="cpp">    ...
        // Connect the handler for async reading
        QObject::connect(m_machineDesignationNode.data(),
                         &amp;amp;QOpcUaNode::attributeRead,
                         this,
                         &amp;amp;OpcUaMachineBackend::machineDesignationRead);

        // Request the value attribute of the machine designation node
        m_machineDesignationNode-&amp;gt;readAttributes(QOpcUa::NodeAttribute::Value);
    ...
</db:programlisting>
<db:para>A setter for the setpoint is added to the backend.</db:para>
<db:programlisting language="cpp">void OpcUaMachineBackend::machineWriteTank2TargetPercent(double value)
{
    if (m_tank2TargetPercentNode)
        m_tank2TargetPercentNode-&amp;gt;writeAttribute(QOpcUa::NodeAttribute::Value, value);
}
</db:programlisting>
<db:para>For the methods, wrappers which call the OPC UA server method are created.</db:para>
<db:programlisting language="cpp">void OpcUaMachineBackend::startPump()
{
    m_machineNode-&amp;gt;callMethod(u&quot;ns=2;s=Machine.Start&quot;_s);
}
</db:programlisting>
</db:section>
<db:section xml:id="the-hmi">
<db:title>The HMI</db:title>
<db:para>A backend instance is created and handed to the QML part as a context property named <db:code>uaBackend</db:code>.</db:para>
<db:programlisting language="cpp">    ...
    OpcUaMachineBackend backend;

    QQmlApplicationEngine engine;
    engine.rootContext()-&amp;gt;setContextProperty(&quot;uaBackend&quot;, &amp;amp;backend);
    ...
</db:programlisting>
<db:para>The properties, signals and <db:code>Q_INVOKABLE</db:code> methods of uaBackend can now be accessed by the QML code. For example, the button to flush the second tank is enabled only if the backend is connected to the server, the machine is idle and the tank level is above the setpoint. On click, the <db:code>flushTank2()</db:code> method is called on the server.</db:para>
<db:programlisting language="cpp">        Button {
            id: flushButton
            text: &quot;Flush&quot;
            enabled: uaBackend.connected
                     &amp;amp;&amp;amp; uaBackend.machineState === OpcUaMachineBackend.MachineState.Idle
                     &amp;amp;&amp;amp; uaBackend.percentFilledTank2 &amp;gt; uaBackend.tank2TargetPercent
            onClicked: {
                uaBackend.flushTank2()
            }
        }
</db:programlisting>
<db:para>Signals from the backend can also be used directly in the QML code.</db:para>
<db:programlisting language="cpp">    Connections {
        target: uaBackend

        function onPercentFilledTank2Changed(value) {
            if (uaBackend.machineState === OpcUaMachineBackend.MachineState.Pumping)
                rotation += 15
        }
    }
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="usage">
<db:title>Usage</db:title>
<db:para>The server is started automatically by the HMI application. After connecting to the server by clicking the <db:guilabel>Connect</db:guilabel> button, drag the slider to set a setpoint. Then, click <db:guilabel>Start</db:guilabel> to begin pumping water from the first tank to the second tank. If you set a setpoint lower than the current value of the second tank, clicking <db:guilabel>Flush</db:guilabel> opens the valve.</db:para>
<db:para>If there is no water left, click <db:guilabel>Reset simulation</db:guilabel> to refill the first tank.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="waterpump/waterpump-qmlcpp/CMakeLists.txt">waterpump/waterpump-qmlcpp/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="waterpump/waterpump-qmlcpp/main.cpp">waterpump/waterpump-qmlcpp/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="waterpump/waterpump-qmlcpp/opcuamachinebackend.cpp">waterpump/waterpump-qmlcpp/opcuamachinebackend.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="waterpump/waterpump-qmlcpp/qml.qrc">waterpump/waterpump-qmlcpp/qml.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="waterpump/waterpump-qmlcpp/waterpump-qmlcpp.pro">waterpump/waterpump-qmlcpp/waterpump-qmlcpp.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtopcua-waterpump-waterpump-qml-example.xml">Qt Quick Water Pump</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section></db:article>
