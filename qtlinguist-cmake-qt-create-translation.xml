<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_create_translation</db:title>
<db:productname>QtLinguist</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Linguist Manual</db:titleabbrev>
<db:abstract>
<db:para>Sets up the Qt Linguist translation toolchain.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="qt6-create-translation"/>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt6_create_translation(&amp;lt;VAR&amp;gt; ts-file-or-sources [ts-file-or-sources2 ...]
                       [OPTIONS ...])
</db:programlisting>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para>Processes given sources (directories or individual files) to generate Qt Linguist <db:code>.ts</db:code> files. The <db:code>.ts</db:code> files are in turn compiled into <db:code>.qm</db:code> files of the same base name that are stored in the build directory. Paths to the generated <db:code>.qm</db:code> files are added to <db:code>&lt;VAR&gt;</db:code>.</db:para>
<db:para>The translation files to create or update need to have a <db:code>.ts</db:code> suffix. If the given file path is not absolute it is resolved relative to the current source directory. If no <db:code>.ts</db:code> file is passed as an argument, the macro does nothing.</db:para>
<db:para>Any arguments that do not have a <db:code>.ts</db:code> suffix are passed as input to the <db:code>lupdate</db:code>. <db:code>lupdate</db:code> accepts directories and source files as input. See also the <db:link xlink:href="linguist-manager.xml#lupdate">lupdate documentation</db:link> on further details.</db:para>
</db:section>
<db:section xml:id="options">
<db:title>Options</db:title>
<db:para>You can set additional <db:code>OPTIONS</db:code> that should be passed when <db:code>lupdate</db:code> is invoked. You can find possible options in the <db:link xlink:href="linguist-manager.xml#lupdate">lupdate documentation</db:link>.</db:para>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:para>Recursively look up Qt translations from source files in current directory and generate or update <db:code>helloworld_en.ts</db:code> and <db:code>helloworld_de.ts</db:code> file using <db:code>lupdate</db:code>. Compile said files into <db:code>helloworld_en.qm</db:code> and <db:code>helloworld.de.qm</db:code> files in the build directory:</db:para>
<db:programlisting language="cpp">qt_create_translation(QM_FILES ${CMAKE_SOURCE_DIR} helloworld_en.ts helloworld_de.ts)
</db:programlisting>
</db:section>
</db:article>
