<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Porting to iOS</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides instructions to port your existing Qt application to iOS.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>In this section, we are going to port an existing Qt application to <db:link xlink:href="ios.xml">iOS</db:link> and deploy it to the device.</db:para>
<db:para>Most Qt applications should be portable to iOS with ease, unless they depend on a specific hardware or software feature not supported on iOS. A major part of the porting effort consists of ensuring that all the application's assets (for example, QML files, images, and icons) are deployed correctly to the device.</db:para>
<db:para>Like most UI applications, Qt applications also depend on resources such as images, icons, translation files, and so on. These resources must be made available on the device as they are required for the application to function correctly.</db:para>
<db:para>The most convenient option is to bundle the resources into a qrc file, which gets built into the application binary. This approach reduces the porting effort considerably and provides faster access to the resources. It is also a cross-platform approach, which makes porting to other platforms easier.</db:para>
<db:para>By default, all Qt applications can access the contents of a qrc file using the &quot;:/&quot; prefix or the URL scheme prefix, &quot;qrc:&quot;. To know more about qrc files and how they are handled, see <db:link xlink:href="resources.xml">the Qt Resource System</db:link>.</db:para>
<db:para>The following step-by-step instructions guide you to port an existing Qt Quick application to iOS using the qrc approach:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Open the existing project in Qt Creator and configure it with <db:emphasis>iOS</db:emphasis> or <db:emphasis>iOS Simulator</db:emphasis> kit. For more information, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-configuring-projects.html">Qt Creator: Configuring Projects</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Update all local directory imports in the qml files to use a local namespace. For example, to import the QML documents in the &quot;contents&quot; directory relative to main.qml, use the following import statement:</db:para>
<db:programlisting language="cpp">import &quot;contents&quot; as Contents
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Identify all the resources used by your application and add them to one or more qrc files. Qt Creator updates your qmake project file with the RESOURCES variable, listing the qrc files you added.</db:para>
</db:listitem>
<db:listitem>
<db:para>To load or refer to the resources in the qrc file from a C++ file, use the &quot;qrc:&quot; prefix for the URL. For example:</db:para>
<db:programlisting language="cpp">QQuickView viewer;
viewer.setSource(QUrl(&quot;qrc:qml/main.qml&quot;));
viewer.show();
</db:programlisting>
<db:note>
<db:para>QML documents can refer to files in the resources simply by using the relative path to the document. Such references do not require the &quot;qrc:&quot; or &quot;:/&quot; prefix.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>Update the &quot;Run&quot; settings for your project as described in the <db:link xlink:href="https://doc.qt.io/qtcreator/creator-run-settings.html">Qt Creator: Specifying Run Settings</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>If your application uses imports or plugins which depend on special Qt modules, these Qt modules should be added to the .pro file. For example, if your application uses the Qt Multimedia import in QML, you should add the following to your .pro file:</db:para>
<db:programlisting language="cpp" role="bad">QT += multimedia
</db:programlisting>
<db:para>In Qt for iOS, everything is compiled statically and placed into the application bundle. The applications are &quot;sandboxed&quot; inside their bundles and cannot make use of shared object files. Because of this, also the plugins used by the Qt modules need to be statically linked. To do this, define the required plugins using the <db:link xlink:href="qmake-variable-reference.xml#qtplugin">QTPLUGIN</db:link> variable.</db:para>
</db:listitem>
<db:listitem>
<db:para>Save the changes to your project and run the application.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Qt Creator deploys your application on the iOS device, if the device is detected and configured correctly in Xcode. It is also possible to test the application in iOS Simulator. For more information, see <db:link xlink:href="http://doc.qt.io/qtcreator/creator-developing-ios.html">Connecting iOS Devices</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="ios-platform-notes.xml">Platform Notes - iOS</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
