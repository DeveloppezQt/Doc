<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SatelliteInfo (C++/QML)</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The SatelliteInfo example shows how the available satellites at the user's current position and marks the satellites currently contributing to the GPS fix as pink.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

import QtQuick 2.0
import Local 1.0

Rectangle {
    id: page
    width: 360
    height: 360

    SatelliteModel {
        id: satelliteModel
        running: true
        onErrorFound: errorLabel.text = qsTr(&quot;Last Error: %1&quot;, &quot;%1=error number&quot;).arg(code)
    }

    Item {
        id: header
        height: column.height + 30
        width: parent.width
        state: &quot;running&quot;

        anchors.top: parent.top

        function toggle()
        {
            switch (header.state) {
            case &quot;single&quot;: header.state = &quot;running&quot;; break;
            default:
            case &quot;running&quot;: header.state = &quot;stopped&quot;; break;
            case &quot;stopped&quot;: header.state = &quot;single&quot;; break;
            }
        }

        function enterSingle()
        {
            satelliteModel.singleRequestMode = true;
            satelliteModel.running = true;
        }

        function enterRunning()
        {
            satelliteModel.running = false;
            satelliteModel.singleRequestMode = false;
            satelliteModel.running = true;
        }

        states: [
            State {
                name: &quot;stopped&quot;
                PropertyChanges { target: startStop; bText: qsTr(&quot;Single&quot;) }
                PropertyChanges {
                    target: modeLabel; text: qsTr(&quot;Current Mode: stopped&quot;)
                }
                PropertyChanges { target: satelliteModel; running: false; }
            },
            State {
                name: &quot;single&quot;
                PropertyChanges { target: startStop; bText: qsTr(&quot;Start&quot;) }
                PropertyChanges {
                    target: modeLabel; text: qsTr(&quot;Current Mode: single&quot;)
                }
                StateChangeScript { script: header.enterSingle(); }
            },
            State {
                name: &quot;running&quot;
                PropertyChanges { target: startStop; bText: qsTr(&quot;Stop&quot;) }
                PropertyChanges {
                    target: modeLabel; text: qsTr(&quot;Current Mode: running&quot;)
                }
                StateChangeScript { script: header.enterRunning(); }
            }
        ]

        Column {
            id: column
            anchors.verticalCenter: parent.verticalCenter
            anchors.left: parent.left
            anchors.margins: 7
            Text {
                id:  overview
                text: satelliteModel.satelliteInfoAvailable
                      ? qsTr(&quot;Known Satellites&quot;)
                      : qsTr(&quot;Known Satellites (Demo Mode)&quot;)
                font.pointSize: 12
            }

            Text {
                id: modeLabel
                font.pointSize: 12
            }

            Text {
                id: errorLabel
                text: qsTr(&quot;Last Error: None&quot;)
                font.pointSize: 12
            }
        }
        Rectangle {
            id: startStop
            border.color: &quot;black&quot;
            border.width: 3
            anchors.right: parent.right
            anchors.verticalCenter: parent.verticalCenter
            anchors.margins: 7
            radius: 10
            height: maxField.height*1.4
            width: maxField.width*1.4

            property string bText: qsTr(&quot;Stop&quot;);

            Text { //need this for sizing
                id: maxField
                text: qsTr(&quot;Single&quot;)
                font.pointSize: 13
                opacity: 0
            }

            Text {
                id: buttonText
                anchors.centerIn: parent
                text: startStop.bText
                font.pointSize: 13
            }

            MouseArea {
                anchors.fill: parent
                onPressed: { startStop.color = &quot;lightGray&quot; }
                onClicked: { header.toggle() }
                onReleased: { startStop.color = &quot;white&quot; }
            }
        }
    }

    Rectangle {
        anchors.top: header.bottom
        anchors.bottom: parent.bottom
        anchors.left: parent.left
        anchors.right: parent.right
        anchors.margins: rect.myMargin
        border.width: 3
        radius: 10
        border.color: &quot;black&quot;

        Item {
            id: rect
            anchors.fill: parent
            anchors.margins: myMargin
            property int myMargin: 7

            Row {
                id: view
                property int rows: repeater.model.entryCount
                property int singleWidth: ((rect.width - scale.width)/rows )-rect.myMargin
                spacing: rect.myMargin

                Rectangle {
                    id: scale
                    width: strengthLabel.width+10
                    height: rect.height
                    color: &quot;#32cd32&quot;
                    Text {
                        anchors.horizontalCenter: parent.horizontalCenter
                        anchors.bottom: lawngreenRect.top
                        font.pointSize: 11
                        text: &quot;50&quot;
                    }
                    Text {
                        anchors.horizontalCenter: parent.horizontalCenter
                        anchors.top: parent.top
                        font.pointSize: 11
                        text: &quot;100&quot;
                    }

                    Rectangle {
                        id: redRect
                        width: parent.width
                        color: &quot;red&quot;
                        height: parent.height*10/100
                        anchors.bottom: parent.bottom
                        Text {
                            id: strengthLabel
                            anchors.horizontalCenter: parent.horizontalCenter
                            anchors.bottom: parent.bottom
                            font.pointSize: 11
                            text: &quot;00&quot;
                        }
                    }
                    Rectangle {
                        id: orangeRect
                        height: parent.height*10/100
                        anchors.bottom: redRect.top
                        width: parent.width
                        color: &quot;#ffa500&quot;
                        Text {
                            anchors.horizontalCenter: parent.horizontalCenter
                            anchors.bottom: parent.bottom
                            font.pointSize: 11
                            text: &quot;10&quot;
                        }
                    }
                    Rectangle {
                        id: goldRect
                        height: parent.height*10/100
                        anchors.bottom: orangeRect.top
                        width: parent.width
                        color: &quot;#ffd700&quot;
                        Text {
                            anchors.horizontalCenter: parent.horizontalCenter
                            anchors.bottom: parent.bottom
                            font.pointSize: 11
                            text: &quot;20&quot;
                        }
                    }
                    Rectangle {
                        id: yellowRect
                        height: parent.height*10/100
                        anchors.bottom: goldRect.top
                        width: parent.width
                        color: &quot;yellow&quot;
                        Text {
                            anchors.horizontalCenter: parent.horizontalCenter
                            anchors.bottom: parent.bottom
                            font.pointSize: 11
                            text: &quot;30&quot;
                        }
                    }
                    Rectangle {
                        id: lawngreenRect
                        height: parent.height*10/100
                        anchors.bottom: yellowRect.top
                        width: parent.width
                        color: &quot;#7cFc00&quot;
                        Text {
                            anchors.horizontalCenter: parent.horizontalCenter
                            anchors.bottom: parent.bottom
                            font.pointSize: 11
                            text: &quot;40&quot;
                        }
                    }
                }

                Repeater {
                    id: repeater
                    model: satelliteModel
                    delegate: Rectangle {
                        height: rect.height
                        width: view.singleWidth
                        Rectangle {
                            anchors.bottom: parent.bottom
                            width: parent.width
                            height: parent.height*signalStrength/100
                            color: isInUse ? &quot;#7FFF0000&quot; : &quot;#7F0000FF&quot;
                        }
                        Text {
                            anchors.horizontalCenter: parent.horizontalCenter
                            anchors.bottom: parent.bottom
                            text: satelliteIdentifier
                        }
                    }
                }
            }
        }
    }
}

</db:programlisting>
</db:article>
