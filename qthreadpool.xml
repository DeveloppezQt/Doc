<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QThreadPool Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qthreadpool.xml">QThreadPool</db:link> class manages a collection of QThreads.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QThreadPool</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QThreadPool is part of <db:simplelist><db:member>thread</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qthreadpool.xml">QThreadPool</db:link> manages and recyles individual <db:link xlink:href="qthread.xml">QThread</db:link> objects to help reduce thread creation costs in programs that use threads. Each Qt application has one global <db:link xlink:href="qthreadpool.xml">QThreadPool</db:link> object, which can be accessed by calling <db:link xlink:href="qthreadpool.xml#globalInstance">globalInstance</db:link>().</db:para>
<db:para>To use one of the <db:link xlink:href="qthreadpool.xml">QThreadPool</db:link> threads, subclass <db:link xlink:href="qrunnable.xml">QRunnable</db:link> and implement the run() virtual function. Then create an object of that class and pass it to <db:link xlink:href="qthreadpool.xml#start">QThreadPool::start</db:link>().</db:para>
<db:programlisting language="cpp">class HelloWorldTask : public QRunnable
{
    void run()
    {
        qDebug() &lt;&lt; &quot;Hello world from thread&quot; &lt;&lt; QThread::currentThread();
    }
}

HelloWorldTask *hello = new HelloWorldTask();
// QThreadPool takes ownership and deletes 'hello' automatically
QThreadPool::globalInstance()-&gt;start(hello);
</db:programlisting>
<db:para><db:link xlink:href="qthreadpool.xml">QThreadPool</db:link> deletes the <db:link xlink:href="qrunnable.xml">QRunnable</db:link> automatically by default. Use <db:link xlink:href="qrunnable.xml#setAutoDelete">QRunnable::setAutoDelete</db:link>() to change the auto-deletion flag.</db:para>
<db:para><db:link xlink:href="qthreadpool.xml">QThreadPool</db:link> supports executing the same <db:link xlink:href="qrunnable.xml">QRunnable</db:link> more than once by calling <db:link xlink:href="qthreadpool.xml#tryStart">tryStart</db:link>(this) from within <db:link xlink:href="qrunnable.xml#run">QRunnable::run</db:link>(). If autoDelete is enabled the <db:link xlink:href="qrunnable.xml">QRunnable</db:link> will be deleted when the last thread exits the run function. Calling <db:link xlink:href="qthreadpool.xml#start">start</db:link>() multiple times with the same <db:link xlink:href="qrunnable.xml">QRunnable</db:link> when autoDelete is enabled creates a race condition and is not recommended.</db:para>
<db:para>Threads that are unused for a certain amount of time will expire. The default expiry timeout is 30000 milliseconds (30 seconds). This can be changed using <db:link xlink:href="qthreadpool.xml#expiryTimeout-prop">setExpiryTimeout</db:link>(). Setting a negative expiry timeout disables the expiry mechanism.</db:para>
<db:para>Call <db:link xlink:href="qthreadpool.xml#maxThreadCount-prop">maxThreadCount</db:link>() to query the maximum number of threads to be used. If needed, you can change the limit with <db:link xlink:href="qthreadpool.xml#maxThreadCount-prop">setMaxThreadCount</db:link>(). The default <db:link xlink:href="qthreadpool.xml#maxThreadCount-prop">maxThreadCount</db:link>() is <db:link xlink:href="qthread.xml#idealThreadCount">QThread::idealThreadCount</db:link>(). The <db:link xlink:href="qthreadpool.xml#activeThreadCount-prop">activeThreadCount</db:link>() function returns the number of threads currently doing work.</db:para>
<db:para>The <db:link xlink:href="qthreadpool.xml#reserveThread">reserveThread</db:link>() function reserves a thread for external use. Use <db:link xlink:href="qthreadpool.xml#releaseThread">releaseThread</db:link>() when your are done with the thread, so that it may be reused. Essentially, these functions temporarily increase or reduce the active thread count and are useful when implementing time-consuming operations that are not visible to the <db:link xlink:href="qthreadpool.xml">QThreadPool</db:link>.</db:para>
<db:para>Note that <db:link xlink:href="qthreadpool.xml">QThreadPool</db:link> is a low-level class for managing threads, see the Qt Concurrent module for higher level alternatives.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrunnable.xml">QRunnable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="activeThreadCount-prop">
<db:title>[read-only] activeThreadCount : const int</db:title>
<db:para>This property represents the number of active threads in the thread pool.</db:para>
<db:note>
<db:para>It is possible for this function to return a value that is greater than <db:link xlink:href="qthreadpool.xml#maxThreadCount-prop">maxThreadCount</db:link>(). See <db:link xlink:href="qthreadpool.xml#reserveThread">reserveThread</db:link>() for more details.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">activeThreadCount</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qthreadpool.xml#reserveThread">reserveThread</db:link>()</db:member>
<db:member><db:link xlink:href="qthreadpool.xml#releaseThread">releaseThread</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="expiryTimeout-prop">
<db:title>expiryTimeout : int</db:title>
<db:para>Threads that are unused for <db:code role="parameter">expiryTimeout</db:code> milliseconds are considered to have expired and will exit. Such threads will be restarted as needed. The default <db:code role="parameter">expiryTimeout</db:code> is 30000 milliseconds (30 seconds). If <db:code role="parameter">expiryTimeout</db:code> is negative, newly created threads will not expire, e.g., they will not exit until the thread pool is destroyed.</db:para>
<db:para>Note that setting <db:code role="parameter">expiryTimeout</db:code> has no effect on already running threads. Only newly created threads will use the new <db:code role="parameter">expiryTimeout</db:code>. We recommend setting the <db:code role="parameter">expiryTimeout</db:code> immediately after creating the thread pool, but before calling <db:link xlink:href="qthreadpool.xml#start">start</db:link>().</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">expiryTimeout</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setExpiryTimeout</db:emphasis>(<db:type>int</db:type> <db:emphasis>expiryTimeout</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maxThreadCount-prop">
<db:title>maxThreadCount : int</db:title>
<db:para>This property represents the maximum number of threads used by the thread pool.</db:para>
<db:note>
<db:para>The thread pool will always use at least 1 thread, even if <db:code role="parameter">maxThreadCount</db:code> limit is zero or negative.</db:para>
</db:note>
<db:para>The default <db:code role="parameter">maxThreadCount</db:code> is <db:link xlink:href="qthread.xml#idealThreadCount">QThread::idealThreadCount</db:link>().</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxThreadCount</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMaxThreadCount</db:emphasis>(<db:type>int</db:type> <db:emphasis>maxThreadCount</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QThreadPool">
<db:title>QThreadPool::QThreadPool(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a thread pool with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QThreadPool">
<db:title>[virtual noexcept] QThreadPool::~QThreadPool()</db:title>
<db:para>Destroys the <db:link xlink:href="qthreadpool.xml">QThreadPool</db:link>. This function will block until all runnables have been completed.</db:para>
</db:section>
<db:section xml:id="cancel">
<db:title>[since 5.5] void QThreadPool::cancel(QRunnable *<db:emphasis>runnable</db:emphasis>)</db:title>
<db:para>Removes the specified <db:code role="parameter">runnable</db:code> from the queue if it is not yet started. The runnables for which <db:link xlink:href="qrunnable.xml#autoDelete">runnable-&gt;autoDelete</db:link>() returns true are deleted.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qthreadpool.xml#start">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>[since 5.2] void QThreadPool::clear()</db:title>
<db:para>Removes the runnables that are not yet started from the queue. The runnables for which <db:link xlink:href="qrunnable.xml#autoDelete">runnable-&gt;autoDelete</db:link>() returns true are deleted.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qthreadpool.xml#start">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="globalInstance">
<db:title>[static] QThreadPool *QThreadPool::globalInstance()</db:title>
<db:para>Returns the global <db:link xlink:href="qthreadpool.xml">QThreadPool</db:link> instance.</db:para>
</db:section>
<db:section xml:id="releaseThread">
<db:title>void QThreadPool::releaseThread()</db:title>
<db:para>Releases a thread previously reserved by a call to <db:link xlink:href="qthreadpool.xml#reserveThread">reserveThread</db:link>().</db:para>
<db:note>
<db:para>Calling this function without previously reserving a thread temporarily increases <db:link xlink:href="qthreadpool.xml#maxThreadCount-prop">maxThreadCount</db:link>(). This is useful when a thread goes to sleep waiting for more work, allowing other threads to continue. Be sure to call <db:link xlink:href="qthreadpool.xml#reserveThread">reserveThread</db:link>() when done waiting, so that the thread pool can correctly maintain the <db:link xlink:href="qthreadpool.xml#activeThreadCount-prop">activeThreadCount</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qthreadpool.xml#reserveThread">reserveThread</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reserveThread">
<db:title>void QThreadPool::reserveThread()</db:title>
<db:para>Reserves one thread, disregarding <db:link xlink:href="qthreadpool.xml#activeThreadCount-prop">activeThreadCount</db:link>() and <db:link xlink:href="qthreadpool.xml#maxThreadCount-prop">maxThreadCount</db:link>().</db:para>
<db:para>Once you are done with the thread, call <db:link xlink:href="qthreadpool.xml#releaseThread">releaseThread</db:link>() to allow it to be reused.</db:para>
<db:note>
<db:para>This function will always increase the number of active threads. This means that by using this function, it is possible for <db:link xlink:href="qthreadpool.xml#activeThreadCount-prop">activeThreadCount</db:link>() to return a value greater than <db:link xlink:href="qthreadpool.xml#maxThreadCount-prop">maxThreadCount</db:link>() .</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qthreadpool.xml#releaseThread">releaseThread</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start">
<db:title>void QThreadPool::start(QRunnable *<db:emphasis>runnable</db:emphasis>, int <db:emphasis>priority</db:emphasis> = 0)</db:title>
<db:para>Reserves a thread and uses it to run <db:code role="parameter">runnable</db:code>, unless this thread will make the current thread count exceed <db:link xlink:href="qthreadpool.xml#maxThreadCount-prop">maxThreadCount</db:link>(). In that case, <db:code role="parameter">runnable</db:code> is added to a run queue instead. The <db:code role="parameter">priority</db:code> argument can be used to control the run queue's order of execution.</db:para>
<db:para>Note that the thread pool takes ownership of the <db:code role="parameter">runnable</db:code> if <db:link xlink:href="qrunnable.xml#autoDelete">runnable-&gt;autoDelete</db:link>() returns true, and the <db:code role="parameter">runnable</db:code> will be deleted automatically by the thread pool after the <db:link xlink:href="qrunnable.xml#run">runnable-&gt;run</db:link>() returns. If <db:link xlink:href="qrunnable.xml#autoDelete">runnable-&gt;autoDelete</db:link>() returns false, ownership of <db:code role="parameter">runnable</db:code> remains with the caller. Note that changing the auto-deletion on <db:code role="parameter">runnable</db:code> after calling this functions results in undefined behavior.</db:para>
</db:section>
<db:section xml:id="tryStart">
<db:title>bool QThreadPool::tryStart(QRunnable *<db:emphasis>runnable</db:emphasis>)</db:title>
<db:para>Attempts to reserve a thread to run <db:code role="parameter">runnable</db:code>.</db:para>
<db:para>If no threads are available at the time of calling, then this function does nothing and returns false. Otherwise, <db:code role="parameter">runnable</db:code> is run immediately using one available thread and this function returns true.</db:para>
<db:para>Note that the thread pool takes ownership of the <db:code role="parameter">runnable</db:code> if <db:link xlink:href="qrunnable.xml#autoDelete">runnable-&gt;autoDelete</db:link>() returns true, and the <db:code role="parameter">runnable</db:code> will be deleted automatically by the thread pool after the <db:link xlink:href="qrunnable.xml#run">runnable-&gt;run</db:link>() returns. If <db:link xlink:href="qrunnable.xml#autoDelete">runnable-&gt;autoDelete</db:link>() returns false, ownership of <db:code role="parameter">runnable</db:code> remains with the caller. Note that changing the auto-deletion on <db:code role="parameter">runnable</db:code> after calling this function results in undefined behavior.</db:para>
</db:section>
<db:section xml:id="waitForDone">
<db:title>bool QThreadPool::waitForDone(int <db:emphasis>msecs</db:emphasis> = -1)</db:title>
<db:para>Waits up to <db:code role="parameter">msecs</db:code> milliseconds for all threads to exit and removes all threads from the thread pool. Returns true if all threads were removed; otherwise it returns false. If <db:code role="parameter">msecs</db:code> is -1 (the default), the timeout is ignored (waits for the last thread to exit).</db:para>
</db:section>
</db:section>
</db:article>
