<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Draggable Icons Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Draggable Icons example shows how to drag and drop image data between widgets in the same application, and between different applications.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;

#include &quot;dragwidget.h&quot;

DragWidget::DragWidget(QWidget *parent)
    : QFrame(parent)
{
    setMinimumSize(200, 200);
    setFrameStyle(QFrame::Sunken | QFrame::StyledPanel);
    setAcceptDrops(true);

    QLabel *boatIcon = new QLabel(this);
    boatIcon-&amp;gt;setPixmap(QPixmap(&quot;:/images/boat.png&quot;));
    boatIcon-&amp;gt;move(10, 10);
    boatIcon-&amp;gt;show();
    boatIcon-&amp;gt;setAttribute(Qt::WA_DeleteOnClose);

    QLabel *carIcon = new QLabel(this);
    carIcon-&amp;gt;setPixmap(QPixmap(&quot;:/images/car.png&quot;));
    carIcon-&amp;gt;move(100, 10);
    carIcon-&amp;gt;show();
    carIcon-&amp;gt;setAttribute(Qt::WA_DeleteOnClose);

    QLabel *houseIcon = new QLabel(this);
    houseIcon-&amp;gt;setPixmap(QPixmap(&quot;:/images/house.png&quot;));
    houseIcon-&amp;gt;move(10, 80);
    houseIcon-&amp;gt;show();
    houseIcon-&amp;gt;setAttribute(Qt::WA_DeleteOnClose);
}

void DragWidget::dragEnterEvent(QDragEnterEvent *event)
{
    if (event-&amp;gt;mimeData()-&amp;gt;hasFormat(&quot;application/x-dnditemdata&quot;)) {
        if (event-&amp;gt;source() == this) {
            event-&amp;gt;setDropAction(Qt::MoveAction);
            event-&amp;gt;accept();
        } else {
            event-&amp;gt;acceptProposedAction();
        }
    } else {
        event-&amp;gt;ignore();
    }
}

void DragWidget::dragMoveEvent(QDragMoveEvent *event)
{
    if (event-&amp;gt;mimeData()-&amp;gt;hasFormat(&quot;application/x-dnditemdata&quot;)) {
        if (event-&amp;gt;source() == this) {
            event-&amp;gt;setDropAction(Qt::MoveAction);
            event-&amp;gt;accept();
        } else {
            event-&amp;gt;acceptProposedAction();
        }
    } else {
        event-&amp;gt;ignore();
    }
}

void DragWidget::dropEvent(QDropEvent *event)
{
    if (event-&amp;gt;mimeData()-&amp;gt;hasFormat(&quot;application/x-dnditemdata&quot;)) {
        QByteArray itemData = event-&amp;gt;mimeData()-&amp;gt;data(&quot;application/x-dnditemdata&quot;);
        QDataStream dataStream(&amp;amp;itemData, QIODevice::ReadOnly);

        QPixmap pixmap;
        QPoint offset;
        dataStream &amp;gt;&amp;gt; pixmap &amp;gt;&amp;gt; offset;

        QLabel *newIcon = new QLabel(this);
        newIcon-&amp;gt;setPixmap(pixmap);
        newIcon-&amp;gt;move(event-&amp;gt;pos() - offset);
        newIcon-&amp;gt;show();
        newIcon-&amp;gt;setAttribute(Qt::WA_DeleteOnClose);

        if (event-&amp;gt;source() == this) {
            event-&amp;gt;setDropAction(Qt::MoveAction);
            event-&amp;gt;accept();
        } else {
            event-&amp;gt;acceptProposedAction();
        }
    } else {
        event-&amp;gt;ignore();
    }
}

void DragWidget::mousePressEvent(QMouseEvent *event)
{
    QLabel *child = static_cast&amp;lt;QLabel*&amp;gt;(childAt(event-&amp;gt;pos()));
    if (!child)
        return;

    QPixmap pixmap = *child-&amp;gt;pixmap();

    QByteArray itemData;
    QDataStream dataStream(&amp;amp;itemData, QIODevice::WriteOnly);
    dataStream &amp;lt;&amp;lt; pixmap &amp;lt;&amp;lt; QPoint(event-&amp;gt;pos() - child-&amp;gt;pos());

    QMimeData *mimeData = new QMimeData;
    mimeData-&amp;gt;setData(&quot;application/x-dnditemdata&quot;, itemData);

    QDrag *drag = new QDrag(this);
    drag-&amp;gt;setMimeData(mimeData);
    drag-&amp;gt;setPixmap(pixmap);
    drag-&amp;gt;setHotSpot(event-&amp;gt;pos() - child-&amp;gt;pos());

    QPixmap tempPixmap = pixmap;
    QPainter painter;
    painter.begin(&amp;amp;tempPixmap);
    painter.fillRect(pixmap.rect(), QColor(127, 127, 127, 127));
    painter.end();

    child-&amp;gt;setPixmap(tempPixmap);

    if (drag-&amp;gt;exec(Qt::CopyAction | Qt::MoveAction, Qt::CopyAction) == Qt::MoveAction) {
        child-&amp;gt;close();
    } else {
        child-&amp;gt;show();
        child-&amp;gt;setPixmap(pixmap);
    }
}

</db:programlisting>
</db:article>
