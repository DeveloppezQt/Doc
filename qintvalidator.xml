<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QIntValidator Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qintvalidator.xml">QIntValidator</db:link> class provides a validator that ensures a string contains a valid integer within a specified range.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QIntValidator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtquick-intvalidator.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qvalidator.xml" xlink:role="class">QValidator</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Example of use:</db:para>
<db:programlisting language="cpp">QValidator *validator = new QIntValidator(100, 999, this);
QLineEdit *edit = new QLineEdit(this);

// the edit lineedit will only accept integers between 100 and 999
edit-&amp;gt;setValidator(validator);
</db:programlisting>
<db:para>Below we present some examples of validators. In practice they would normally be associated with a widget as in the example above.</db:para>
<db:programlisting language="cpp">QString str;
int pos = 0;
QIntValidator v(100, 900, this);

str = &quot;1&quot;;
v.validate(str, pos);     // returns Intermediate
str = &quot;012&quot;;
v.validate(str, pos);     // returns Intermediate

str = &quot;123&quot;;
v.validate(str, pos);     // returns Acceptable
str = &quot;678&quot;;
v.validate(str, pos);     // returns Acceptable

str = &quot;999&quot;;
v.validate(str, pos);    // returns Intermediate

str = &quot;1234&quot;;
v.validate(str, pos);     // returns Invalid
str = &quot;-123&quot;;
v.validate(str, pos);     // returns Invalid
str = &quot;abc&quot;;
v.validate(str, pos);     // returns Invalid
str = &quot;12cm&quot;;
v.validate(str, pos);     // returns Invalid
</db:programlisting>
<db:para>Notice that the value <db:code>999</db:code> returns Intermediate. Values consisting of a number of digits equal to or less than the max value are considered intermediate. This is intended because the digit that prevents a number from being in range is not necessarily the last digit typed. This also means that an intermediate number can have leading zeros.</db:para>
<db:para>The minimum and maximum values are set in one call with <db:link xlink:href="qintvalidator.xml#setRange">setRange</db:link>(), or individually with <db:link xlink:href="qintvalidator.xml#bottom-prop">setBottom</db:link>() and <db:link xlink:href="qintvalidator.xml#top-prop">setTop</db:link>().</db:para>
<db:para><db:link xlink:href="qintvalidator.xml">QIntValidator</db:link> uses its <db:link xlink:href="qvalidator.xml#locale">locale</db:link>() to interpret the number. For example, in Arabic locales, <db:link xlink:href="qintvalidator.xml">QIntValidator</db:link> will accept Arabic digits.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qlocale.xml#NumberOption-enum">QLocale::NumberOptions</db:link> set on the <db:link xlink:href="qvalidator.xml#locale">locale</db:link>() also affect the way the number is interpreted. For example, since <db:link xlink:href="qlocale.xml#NumberOption-enum">QLocale::RejectGroupSeparator</db:link> is not set by default, the validator will accept group separators. It is thus recommended to use <db:link xlink:href="qlocale.xml#toInt">QLocale::toInt</db:link>() to obtain the numeric value.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdoublevalidator.xml">QDoubleValidator</db:link></db:member>
<db:member><db:link xlink:href="qregexpvalidator.xml">QRegExpValidator</db:link></db:member>
<db:member><db:link xlink:href="qlocale.xml#toInt">QLocale::toInt</db:link>()</db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-lineedits-example.xml">Line Edits Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="bottom-prop">
<db:title>bottom : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>bottom</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">bottom</db:synopsisinfo>
<db:synopsisinfo role="setter">setBottom</db:synopsisinfo>
<db:synopsisinfo role="notifier">bottomChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the validator's lowest acceptable value</db:para>
<db:para>By default, this property's value is derived from the lowest signed integer available (typically -2147483647).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">bottom</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBottom</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">bottomChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>bottom</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qintvalidator.xml#setRange">setRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="top-prop">
<db:title>top : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>top</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">top</db:synopsisinfo>
<db:synopsisinfo role="setter">setTop</db:synopsisinfo>
<db:synopsisinfo role="notifier">topChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the validator's highest acceptable value</db:para>
<db:para>By default, this property's value is derived from the highest signed integer available (typically 2147483647).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">top</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTop</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">topChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>top</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qintvalidator.xml#setRange">setRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QIntValidator">
<db:title>[explicit] QIntValidator::QIntValidator(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QIntValidator</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QIntValidator(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a validator with a <db:code role="parameter">parent</db:code> object that accepts all integers.</db:para>
</db:section>
<db:section xml:id="QIntValidator-1">
<db:title>QIntValidator::QIntValidator(int <db:emphasis>minimum</db:emphasis>, int <db:emphasis>maximum</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QIntValidator</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>minimum</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>maximum</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QIntValidator(int minimum, int maximum, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a validator with a <db:code role="parameter">parent</db:code>, that accepts integers from <db:code role="parameter">minimum</db:code> to <db:code role="parameter">maximum</db:code> inclusive.</db:para>
</db:section>
<db:section xml:id="dtor.QIntValidator">
<db:title>[virtual] QIntValidator::~QIntValidator()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QIntValidator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QIntValidator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the validator.</db:para>
</db:section>
<db:section xml:id="fixup">
<db:title>[override virtual] void QIntValidator::fixup(QString &amp;<db:emphasis>input</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>fixup</db:methodname>
<db:methodparam>
<db:type>QString &amp;</db:type>
<db:parameter>input</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fixup(QString &amp;input) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qvalidator.xml#fixup" role="function">QValidator::fixup(QString &amp;input) const</db:link>.</db:para>
</db:section>
<db:section xml:id="setRange">
<db:title>[virtual] void QIntValidator::setRange(int <db:emphasis>bottom</db:emphasis>, int <db:emphasis>top</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setRange</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>bottom</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>top</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRange(int bottom, int top)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the range of the validator to only accept integers between <db:code role="parameter">bottom</db:code> and <db:code role="parameter">top</db:code> inclusive.</db:para>
</db:section>
<db:section xml:id="validate">
<db:title>[override virtual] QValidator::State QIntValidator::validate(QString &amp;<db:emphasis>input</db:emphasis>, int &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QValidator::State</db:type>
<db:methodname>validate</db:methodname>
<db:methodparam>
<db:type>QString &amp;</db:type>
<db:parameter>input</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QValidator::State validate(QString &amp;input, int &amp;pos) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qvalidator.xml#validate" role="function">QValidator::validate(QString &amp;input, int &amp;pos) const</db:link>.</db:para>
<db:para>Returns <db:link xlink:href="qvalidator.xml#State-enum">Acceptable</db:link> if the <db:code role="parameter">input</db:code> is an integer within the valid range. If <db:code role="parameter">input</db:code> has at most as many digits as the top of the range, or is a prefix of an integer in the valid range, returns <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link>. Otherwise, returns <db:link xlink:href="qvalidator.xml#State-enum">Invalid</db:link>.</db:para>
<db:para>If the valid range consists of just positive integers (e.g., 32 to 100) and <db:code role="parameter">input</db:code> is a negative integer, then Invalid is returned. (On the other hand, if the range consists of negative integers (e.g., -100 to -32) and <db:code role="parameter">input</db:code> is a positive integer, then Intermediate is returned, because the user might be just about to type the minus (especially for right-to-left languages).</db:para>
<db:para>Similarly, if the valid range is between 46 and 53, then 41 and 59 will be evaluated as <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link>, as otherwise the user wouldn't be able to change a value from 49 to 51.</db:para>
<db:programlisting language="cpp">int pos = 0;

s = &quot;abc&quot;;
v.validate(s, pos);    // returns Invalid

s = &quot;5&quot;;
v.validate(s, pos);    // returns Intermediate

s = &quot;50&quot;;
v.validate(s, pos);    // returns Acceptable
</db:programlisting>
<db:para>By default, the <db:code role="parameter">pos</db:code> parameter is not used by this validator.</db:para>
</db:section>
</db:section>
</db:article>
