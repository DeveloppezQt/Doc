<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Document Viewer</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A Widgets application to display and print Json, text and PDF files. Demonstrates various features to use in widget applications: Using <db:link xlink:href="qsettings.xml">QSettings</db:link>, query and save user preferences, manage file histories and control cursor behavior when hovering over widgets.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/documentviewer_open.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Document Viewer</db:emphasis> demonstrates how to use a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> with static and dynamic tool bars, menus and actions.</db:para>
<db:para>The MainWindow class provides a common application screen with general menus, actions and a tool bar. It provides functionality to open a file, determine the content type and keep a list of previously opened files. It stores information in <db:link xlink:href="qsettings.xml">QSettings</db:link> and reads settings when launched. Depending on the opened file's content type, it creates a suitable viewer to display it and provide printing functionality.</db:para>
<db:section xml:id="creating-an-executable">
<db:title>Creating an executable</db:title>
<db:para>To create an executable, we use a standard main.cpp file. First, we set the application's organization name:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    QApplication::setOrganizationName(QApplication::translate(&quot;main&quot;, &quot;QtExamples&quot;));
</db:programlisting>
</db:section>
<db:section xml:id="creating-an-application-and-showing-the-main-window">
<db:title>Creating an application and showing the main window</db:title>
<db:programlisting language="cpp">    QApplication app(argc, argv);
    QApplication::setOrganizationName(QApplication::translate(&quot;main&quot;, &quot;QtExamples&quot;));
    QApplication::setApplicationName(QApplication::translate(&quot;main&quot;, &quot;DocumentViewer&quot;));
    QApplication::setApplicationVersion(&quot;1.0&quot;);

    QCommandLineParser parser;
    parser.setApplicationDescription(QApplication::translate(&quot;main&quot;,
                                                     &quot;A viewer for JSON, PDF and text files&quot;));
    parser.addHelpOption();
    parser.addVersionOption();
    parser.addPositionalArgument(&quot;File&quot;, QApplication::translate(&quot;main&quot;,
                                                                 &quot;JSON, PDF or text file to open&quot;));
    parser.process(app);

    const QStringList &amp;amp;positionalArguments = parser.positionalArguments();
    const QString &amp;amp;fileName = (positionalArguments.count() &amp;gt; 0) ? positionalArguments.at(0)
                                                                : QString();

    MainWindow w;
    w.show();
    if (!fileName.isEmpty())
        w.openFile(fileName);

    return app.exec();
}
</db:programlisting>
</db:section>
<db:section xml:id="the-mainwindow-class">
<db:title>The MainWindow class</db:title>
<db:para>The class constructor initializes the user interface created in Qt Designer. It links the actions for opening a file and the about dialog to their implementation.</db:para>
<db:programlisting language="cpp">    ui-&amp;gt;setupUi(this);
    readSettings();
}

MainWindow::~MainWindow()
{
    saveSettings();
}

void MainWindow::on_actionOpen_triggered()
</db:programlisting>
<db:para>The mainwindow.ui file provides a <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link> on the left, where bookmarks and thumbnails can be displayed. It provides a <db:link xlink:href="qscrollarea.xml">QScrollArea</db:link> on the right, where the viewed file contents are displayed.</db:para>
<db:para>The ViewerFactory class provides a static method to create a file type specific viewer.</db:para>
<db:programlisting language="cpp">m_viewer = ViewerFactory::makeViewer(&amp;amp;file, ui-&amp;gt;viewArea, this, questions());
</db:programlisting>
<db:para>If the application settings contain a section for the viewer, it is passed to the viewer's virtual restoreState method. Afterwards, the standard UI assets are passed to the viewer and it's display widget is displayed in the main scroll area.</db:para>
<db:programlisting language="cpp">    m_viewer-&amp;gt;initViewer(ui-&amp;gt;actionBack, ui-&amp;gt;actionForward, ui-&amp;gt;menuHelp-&amp;gt;menuAction(), ui-&amp;gt;tabWidget);
    ui-&amp;gt;scrollArea-&amp;gt;setWidget(m_viewer-&amp;gt;widget());
}
</db:programlisting>
</db:section>
<db:section xml:id="the-viewerfactory-class">
<db:title>The ViewerFactory class</db:title>
<db:para>The only static method of the class takes a file, the widget where the viewed content is to be displayed, the main window and the user questions. Depending on the file's mime type, it creates an appropriate document viewer.</db:para>
<db:programlisting language="cpp">    connect(m_viewer.get(), &amp;amp;AbstractViewer::printingEnabledChanged, ui-&amp;gt;actionPrint, &amp;amp;QAction::setEnabled);
    connect(ui-&amp;gt;actionPrint, &amp;amp;QAction::triggered, m_viewer.get(), &amp;amp;AbstractViewer::print);
    connect(m_viewer.get(), &amp;amp;AbstractViewer::showMessage, statusBar(), &amp;amp;QStatusBar::showMessage);

    m_viewer-&amp;gt;initViewer(ui-&amp;gt;actionBack, ui-&amp;gt;actionForward, ui-&amp;gt;menuHelp-&amp;gt;menuAction(), ui-&amp;gt;tabWidget);
    ui-&amp;gt;scrollArea-&amp;gt;setWidget(m_viewer-&amp;gt;widget());
}
</db:programlisting>
</db:section>
<db:section xml:id="the-abstractviewer-class">
<db:title>The AbstractViewer class</db:title>
<db:para>The class provides a generalized API to view and browse through a document, save and print it. Properties of the document and the viewer itself can be queried: Does the document have content? Has it been modified? Is an overview (thumbnails or bookmarks) supported? The viewer's state can be saved to and restored from a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, which the application can access to store in its settings.</db:para>
<db:para>AbstractViewer provides protected methods for classes inheriting from it, to create actions and menus on the main window. In order to display these assets on the main window, they are parented to it. AbstractViewer takes responsibility to remove and destroy the UI assets it created. It inherits from <db:link xlink:href="qobject.xml">QObject</db:link> to provide access to signals and slots.</db:para>
<db:section xml:id="signals">
<db:title>Signals</db:title>
<db:programlisting language="cpp">void uiInitialized();
</db:programlisting>
<db:para>The signal is emitted when AbstractViewer has received all necessary information about UI assets on the main window.</db:para>
<db:programlisting language="cpp">void printingEnabledChanged(bool enabled);
</db:programlisting>
<db:para>This signal is emitted when document printing has been enabled or disabled, e.g. because a new document has been successfully loaded or all content has been removed.</db:para>
<db:programlisting language="cpp">void printStatusChanged(AbstractViewer::PrintStatus status);
</db:programlisting>
<db:para>When printing has been started, this signal notifies about the printing progress.</db:para>
<db:programlisting language="cpp">void documentLoaded(const QString &amp;amp;fileName);
</db:programlisting>
<db:para>The signal notifies the application that a document has been loaded successfully.</db:para>
</db:section>
</db:section>
<db:section xml:id="the-textviewer-class">
<db:title>The TextViewer class</db:title>
<db:para>A simple text viewer, inheriting from AbstractViewer. It features editing text files, copy/cut and paste, printing and saving changes.</db:para>
</db:section>
<db:section xml:id="the-jsonviewer-class">
<db:title>The JsonViewer class</db:title>
<db:para>The class displays a JSON file in a <db:link xlink:href="qtreeview.xml">QTreeView</db:link>. It loads a file into a <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link>, used to populate a custom tree model with JsonItemModel. This part of the JSON viewer demonstrates, how to implement custom item models inheriting from <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>. The JsonTreeItem class provides basic API for manipulating JSON data and propagating it back to the underlying <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link>.</db:para>
<db:para>JsonViewer uses the toplevel objects as bookmarks for navigation. Other nodes (keys or values) can be added as additional bookmarks or removed from the bookmark list. A <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> is used as a search field to navigate through the JSON tree.</db:para>
</db:section>
<db:section xml:id="the-pdfviewer-class">
<db:title>The PdfViewer class</db:title>
<db:para>This is a fork of the QPdfViewerWidgets example. It demonstrates the use of <db:link xlink:href="qscroller.xml">QScroller</db:link> to smoothly flick through the document.</db:para>
</db:section>
<db:section xml:id="additional-classes-for-application-features">
<db:title>Additional classes for application features</db:title>
<db:section xml:id="the-hoverwatcher-class">
<db:title>The HoverWatcher class</db:title>
<db:para>The class can be used to set override cursors when the mouse is hovering over a widget and to restore them upon departure. In order to prevent multiple HoverWatcher instances created for the same widget, it is implemented as a singleton per widget.</db:para>
<db:para>HoverWatcher inherits from <db:link xlink:href="qobject.xml">QObject</db:link> and the <db:link xlink:href="qwidget.xml">QWidget</db:link> watched becomes the instance's parent. An event filter is used to intercept the hover events without consuming them.</db:para>
<db:programlisting language="cpp">HoverWatcher::HoverWatcher(QWidget *watched)
    : QObject(watched), m_watched(watched)
{
    Q_ASSERT(watched);
    m_cursorShapes[Entered].emplace(Qt::OpenHandCursor);
    m_cursorShapes[MousePress].emplace(Qt::ClosedHandCursor);
    m_cursorShapes[MouseRelease].emplace(Qt::OpenHandCursor);
    // no default for Left =&amp;gt; restore override cursor
    m_watched-&amp;gt;installEventFilter(this);
}
</db:programlisting>
<db:para>The actions watched are represented in an enum.</db:para>
<db:programlisting language="cpp">    enum HoverAction {
        Entered,
        MousePress,
        MouseRelease,
        Left,
        Ignore
    };
</db:programlisting>
<db:para>Static methods create watchers, check their existence for a specific <db:link xlink:href="qwidget.xml">QWidget</db:link> or dismiss a watcher.</db:para>
<db:programlisting language="cpp">    static HoverWatcher *watcher(QWidget *watched);
    static const HoverWatcher *watcher(const QWidget *watched);
    static bool hasWatcher(QWidget *widget);
    static void dismiss(QWidget *watched);
</db:programlisting>
<db:para>A cursor shape can be specified or unset for each HoverAction. If no cursor shape is specified for an action, the application's override cursor will be restored when it occurs.</db:para>
<db:programlisting language="cpp">public slots:
    void setCursorShape(HoverAction type, Qt::CursorShape shape);
    void unSetCursorShape(HoverAction type);
</db:programlisting>
<db:para>The mouseButtons property specifies, which mouse buttons to consider for the MousePress action.</db:para>
<db:programlisting language="cpp">    void setMouseButtons(Qt::MouseButtons buttons);
    void setMouseButton(Qt::MouseButton button, bool enable);
</db:programlisting>
<db:para>Action specific signals are emitted when an action has been processed.</db:para>
<db:programlisting language="cpp">signals:
    void entered();
    void mousePressed();
    void mouseReleased();
    void left();
</db:programlisting>
<db:para>A general signal is emitted which passes the processed action as an argument.</db:para>
<db:programlisting language="cpp">void hoverAction(HoverAction action);
</db:programlisting>
</db:section>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdoc.git/tree/examples/demos/documentviewer?h=6.5">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
