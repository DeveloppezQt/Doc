<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Document Viewer</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A Widgets application to display and print JSON, text, and PDF files.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis>Document Viewer</db:emphasis> demonstrates how to use a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> with static and dynamic toolbars, menus, and actions. Additionally, it demonstrates the following features in widget-based applications:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Using <db:link xlink:href="qsettings.xml">QSettings</db:link> to query and save user preferences, and managing previously opened file history.</db:para>
</db:listitem>
<db:listitem>
<db:para>Controlling cursor behavior when hovering over widgets.</db:para>
</db:listitem>
<db:listitem>
<db:para>Creating dynamically loaded plugins.</db:para>
</db:listitem>
</db:itemizedlist>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/documentviewer_open.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="creating-an-application-and-the-main-window">
<db:title>Creating an application and the main window</db:title>
<db:para>The application and its main window is constructed in main.cpp. The main() function uses <db:link xlink:href="qcommandlineparser.xml">QCommandLineParser</db:link> to process command line arguments â€“ <db:emphasis>help</db:emphasis>, <db:emphasis>version</db:emphasis>, and an optional positional argument, <db:emphasis>file</db:emphasis>. If the user provided a path to a file when launching the application, the main window opens it:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    QCoreApplication::setOrganizationName(&quot;QtProject&quot;_L1);
    QCoreApplication::setApplicationName(&quot;DocumentViewer&quot;_L1);
    QCoreApplication::setApplicationVersion(&quot;1.0&quot;_L1);

    QCommandLineParser parser;
    parser.setApplicationDescription(QApplication::translate(&quot;main&quot;,
                                                     &quot;A viewer for JSON, PDF and text files&quot;));
    parser.addHelpOption();
    parser.addVersionOption();
    parser.addPositionalArgument(&quot;File&quot;_L1, QApplication::translate(&quot;main&quot;,
                                                                    &quot;JSON, PDF or text file to open&quot;));
    parser.process(app);

    const QStringList &amp;amp;positionalArguments = parser.positionalArguments();
    const QString &amp;amp;fileName = (positionalArguments.count() &amp;gt; 0) ? positionalArguments.at(0)
                                                                : QString();

    MainWindow w;
    w.show();
    if (!fileName.isEmpty())
        w.openFile(fileName);

    return app.exec();
}
</db:programlisting>
</db:section>
<db:section xml:id="mainwindow-class">
<db:title>MainWindow class</db:title>
<db:para>The MainWindow class provides an application screen with menus, actions, and a toolbar. It can open a file, automatically detecting its content type. It also maintains a list of previously opened files, using <db:link xlink:href="qsettings.xml">QSettings</db:link> to store and reload settings when launched. The MainWindow creates a suitable <db:emphasis>viewer</db:emphasis> for the opened file, based on its content type, and provides support for printing a document.</db:para>
<db:para>MainWindow's constructor initializes the user interface created in Qt Designer. The mainwindow.ui file provides a <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link> on the left, showing bookmarks and thumbnails. On the right, there is a <db:link xlink:href="qscrollarea.xml">QScrollArea</db:link> for viewing file content.</db:para>
</db:section>
<db:section xml:id="viewerfactory-class">
<db:title>ViewerFactory class</db:title>
<db:para>The ViewerFactory class manages viewers for known file types. These viewers are implemented as plugins. When an instance of a ViewerFactory is created, pointers to the view area and the main window are passed to the constructor:</db:para>
<db:programlisting language="cpp">m_factory.reset(new ViewerFactory(ui-&amp;gt;viewArea, this));
</db:programlisting>
<db:para>ViewerFactory loads all available plugins on construction. It provides a public API to query the loaded plugins, their names, and supported MIME types:</db:para>
<db:programlisting language="cpp">    using ViewerList = QList&amp;lt;AbstractViewer *&amp;gt;;
    QStringList viewerNames(bool showDefault = false) const;
    ViewerList viewers() const;
    AbstractViewer *findViewer(const QString &amp;amp;viewerName) const;
    AbstractViewer *defaultViewer() const;
    QStringList supportedMimeTypes() const;
</db:programlisting>
<db:para>The viewer() function returns a pointer to the plugin suitable to open the <db:link xlink:href="qfile.xml">QFile</db:link> passed as an argument:</db:para>
<db:programlisting language="cpp">m_viewer = m_factory-&amp;gt;viewer(file);
</db:programlisting>
<db:para>If the application settings contain a section for the viewer, it's passed to the viewer's virtual restoreState() function:</db:para>
<db:programlisting language="cpp">void MainWindow::restoreViewerSettings()
{
    if (!m_viewer)
        return;

    QSettings settings;
    settings.beginGroup(settingsViewers);
    QByteArray viewerSettings = settings.value(m_viewer-&amp;gt;viewerName(), QByteArray()).toByteArray();
    settings.endGroup();
    if (!viewerSettings.isEmpty())
        m_viewer-&amp;gt;restoreState(viewerSettings);
}
</db:programlisting>
<db:para>Then, the standard UI assets are passed to the viewer and the main scroll area is set to show the viewer's display widget:</db:para>
<db:programlisting language="cpp">    m_viewer-&amp;gt;initViewer(ui-&amp;gt;actionBack, ui-&amp;gt;actionForward, ui-&amp;gt;menuHelp-&amp;gt;menuAction(), ui-&amp;gt;tabWidget);
    restoreViewerSettings();
    ui-&amp;gt;scrollArea-&amp;gt;setWidget(m_viewer-&amp;gt;widget());
    return true;
}
</db:programlisting>
</db:section>
<db:section xml:id="abstractviewer-class">
<db:title>AbstractViewer class</db:title>
<db:para>AbstractViewer provides a generalized API to view, save, and print a document. Properties of both the document and the viewer can be queried:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Does the document have content?</db:para>
</db:listitem>
<db:listitem>
<db:para>Has it been modified?</db:para>
</db:listitem>
<db:listitem>
<db:para>Is an overview (thumbnails or bookmarks) supported?</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>AbstractViewer provides protected methods for derived classes to create actions and menus on the main window. In order to display these assets on the main window, they are parented to it. AbstractViewer is responsible for removing and destroying the UI assets it creates. It inherits from <db:link xlink:href="qobject.xml">QObject</db:link> to implement signals and slots.</db:para>
<db:section xml:id="signals">
<db:title>Signals</db:title>
<db:para>void uiInitialized();</db:para>
<db:para>This signal is emitted after a viewer receives all necessary information about UI assets on the main window.</db:para>
<db:para>void printingEnabledChanged(bool enabled);</db:para>
<db:para>This signal is emitted when document printing is either enabled or disabled. This happens after a new document was successfully loaded, or, for example, all content was removed.</db:para>
<db:para>void printStatusChanged(AbstractViewer::PrintStatus status);</db:para>
<db:para>After starting the printing process, this signal notifies about changes in its progress.</db:para>
<db:para>void documentLoaded(const QString &amp;fileName);</db:para>
<db:para>This signal notifies the application that a document was successfully loaded.</db:para>
</db:section>
</db:section>
<db:section xml:id="txtviewer-class">
<db:title>TxtViewer class</db:title>
<db:para>TxtViewer is a simple text viewer, inheriting from AbstractViewer. It supports editing text files, copy/cut and paste, printing, and saving changes.</db:para>
</db:section>
<db:section xml:id="jsonviewer-class">
<db:title>JsonViewer class</db:title>
<db:para>JsonViewer displays a JSON file in a <db:link xlink:href="qtreeview.xml">QTreeView</db:link>. Internally, it loads the contents of a file into a <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> and uses it to populate a custom tree model with JsonItemModel.</db:para>
<db:para>The JSON viewer plugin demonstrates how to implement a custom item model inherited from <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>. The JsonTreeItem class provides a basic API for manipulating JSON data and propagating it back to the underlying <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link>.</db:para>
<db:para>JsonViewer uses the top-level objects of the document as bookmarks for navigation. Other nodes (keys and values) can be added as additional bookmarks, or removed from the bookmark list. A <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> is used as a search field to navigate through the JSON tree.</db:para>
</db:section>
<db:section xml:id="pdfviewer-class">
<db:title>PdfViewer class</db:title>
<db:para>The PdfViewer class (and plugin) is a fork of the <db:link xlink:href="qtpdf-pdfviewer-example.xml">PDF Viewer Widget Example</db:link>. It demonstrates the use of <db:link xlink:href="qscroller.xml">QScroller</db:link> to smoothly flick through a document.</db:para>
</db:section>
<db:section xml:id="other-relevant-classes">
<db:title>Other relevant classes</db:title>
<db:section xml:id="hoverwatcher-class">
<db:title>HoverWatcher class</db:title>
<db:para>The HoverWatcher class sets an override cursor when hovering the mouse over a widget, restoring it upon departure. To prevent multiple HoverWatcher instances being created for the same widget, it is implemented as a singleton per widget.</db:para>
<db:para>HoverWatcher inherits from <db:link xlink:href="qobject.xml">QObject</db:link> and takes the <db:link xlink:href="qwidget.xml">QWidget</db:link> it watches as the instance's parent. It installs an event filter to intercept hover events without consuming them:</db:para>
<db:programlisting language="cpp">HoverWatcher::HoverWatcher(QWidget *watched)
    : QObject(watched), m_watched(watched)
{
    Q_ASSERT(watched);
    m_cursorShapes[Entered].emplace(Qt::OpenHandCursor);
    m_cursorShapes[MousePress].emplace(Qt::ClosedHandCursor);
    m_cursorShapes[MouseRelease].emplace(Qt::OpenHandCursor);
    // no default for Left =&amp;gt; restore override cursor
    m_watched-&amp;gt;installEventFilter(this);
}
</db:programlisting>
<db:para>The HoverAction enum lists the actions that HoverWatcher reacts to:</db:para>
<db:programlisting language="cpp">    enum HoverAction {
        Entered,
        MousePress,
        MouseRelease,
        Left,
        Ignore
    };
</db:programlisting>
<db:para>Static functions create watchers, check their existence for a specific <db:link xlink:href="qwidget.xml">QWidget</db:link>, or dismiss a watcher:</db:para>
<db:programlisting language="cpp">    static HoverWatcher *watcher(QWidget *watched);
    static const HoverWatcher *watcher(const QWidget *watched);
    static bool hasWatcher(QWidget *widget);
    static void dismiss(QWidget *watched);
</db:programlisting>
<db:para>A cursor shape can be set or unset for each HoverAction. If there is no associated cursor shape, the application's override cursor is restored when the action is triggered.</db:para>
<db:programlisting language="cpp">public slots:
    void setCursorShape(HoverAction type, Qt::CursorShape shape);
    void unSetCursorShape(HoverAction type);
</db:programlisting>
<db:para>The mouseButtons property holds the mouse buttons to consider for a MousePress action:</db:para>
<db:programlisting language="cpp">    void setMouseButtons(Qt::MouseButtons buttons);
    void setMouseButton(Qt::MouseButton button, bool enable);
</db:programlisting>
<db:para>Action-specific signals are emitted after processing an action:</db:para>
<db:programlisting language="cpp">signals:
    void entered();
    void mousePressed();
    void mouseReleased();
    void left();
</db:programlisting>
<db:para>A general signal is emitted which passes the processed action as an argument:</db:para>
<db:programlisting language="cpp">void hoverAction(HoverAction action);
</db:programlisting>
</db:section>
<db:section xml:id="recentfiles-class">
<db:title>RecentFiles class</db:title>
<db:para>RecentFiles is a <db:link xlink:href="qstringlist.xml">QStringList</db:link> that is specialized to manage a list of recently opened files.</db:para>
<db:para>RecentFiles has slots to add either a single file or multiple files in one go. An entry is added to the list of recent files if the path points to a file that exists and can be opened. If a file is already in the list, it is removed from its original position and added to the top.</db:para>
<db:programlisting language="cpp">public slots:
    void addFile(const QString &amp;amp;fileName) { addFile(fileName, EmitPolicy::EmitWhenChanged); }
    void addFiles(const QStringList &amp;amp;fileNames);
</db:programlisting>
<db:para>Files are removed from the list either by name or by index:</db:para>
<db:programlisting language="cpp">    void removeFile(const QString &amp;amp;fileName) { removeFile(m_files.indexOf(fileName)); }
    void removeFile(qsizetype index) {removeFile(index, RemoveReason::Other); }
</db:programlisting>
<db:para>Slots that implement saving and restoring from <db:link xlink:href="qsettings.xml">QSettings</db:link>:</db:para>
<db:programlisting language="cpp">    void saveSettings(QSettings &amp;amp;settings, const QString &amp;amp;key) const;
    bool restoreFromSettings(QSettings &amp;amp;settings, const QString &amp;amp;key);
</db:programlisting>
<db:para>When restoring settings, nonexistent files are ignored. The maxFiles property holds the maximum amount of recent files to store (default is 10).</db:para>
<db:programlisting language="cpp">qsizetype maxFiles();
void setMaxFiles(qsizetype maxFiles);
</db:programlisting>
<db:para>RecentFiles verifies that a file can be read before accepting it.</db:para>
</db:section>
<db:section xml:id="recentfilemenu-class">
<db:title>RecentFileMenu class</db:title>
<db:para>RecentFileMenu is a <db:link xlink:href="qmenu.xml">QMenu</db:link>, specialized to display a <db:link xlink:href="qtdoc-demos-documentviewer-example.xml#recentfiles-class">RecentFiles</db:link> object as a submenu.</db:para>
<db:para>Its constructor takes a pointer to a parent <db:link xlink:href="qobject.xml">QObject</db:link> and a pointer to a RecentFiles object, the content of which it will visualize. Its fileOpened() signal, triggered when the user selects a recent file from the list, passes the absolute path to the file as an argument.</db:para>
<db:note>
<db:para>RecentFileMenu is destroyed either by its parent widget, or by the RecentFiles object passed to its constructor.</db:para>
</db:note>
<db:programlisting language="cpp">class RecentFileMenu : public QMenu
{
    Q_OBJECT

public:
    explicit RecentFileMenu(QWidget *parent, RecentFiles *recent);

signals:
    void fileOpened(const QString &amp;amp;fileName);
    ...
};
</db:programlisting>
</db:section>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdoc.git/tree/examples/demos/documentviewer?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
