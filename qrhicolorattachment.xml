<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRhiColorAttachment Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes the a single color attachment of a render target.</db:para>
<db:para>This class was introduced in Qt 6.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>rhi/qrhi.h</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::GuiPrivate)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui-private</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A color attachment is either a <db:link xlink:href="qrhitexture.xml">QRhiTexture</db:link> or a <db:link xlink:href="qrhirenderbuffer.xml">QRhiRenderBuffer</db:link>. The former, i.e. when texture() is set, is used in most cases. <db:link xlink:href="qrhicolorattachment.xml">QRhiColorAttachment</db:link> is commonly used in combination with <db:link xlink:href="qrhitexturerendertargetdescription.xml">QRhiTextureRenderTargetDescription</db:link>.</db:para>
<db:note>
<db:para>texture() and renderBuffer() cannot be both set (be non-null at the same time).</db:para>
</db:note>
<db:para>Setting renderBuffer instead is recommended only when multisampling is needed. Relying on <db:link xlink:href="qrhi.xml#Feature-enum">QRhi::MultisampleRenderBuffer</db:link> is a better choice than <db:link xlink:href="qrhi.xml#Feature-enum">QRhi::MultisampleTexture</db:link> in practice since the former is available in more run time configurations (e.g. when running on OpenGL ES 3.0 which has no support for multisample textures, but does support multisample renderbuffers).</db:para>
<db:para>When targeting a non-multisample texture, the layer() and level() indicate the targeted layer (face index <db:code>0-5</db:code> for cubemaps) and mip level. For 3D textures layer() specifies the slice (one 2D image within the 3D texture) to render to. For texture arrays layer() is the array index.</db:para>
<db:para>When texture() or renderBuffer() is multisample, resolveTexture() can be set optionally. When set, samples are resolved automatically into that (non-multisample) texture at the end of the render pass. When rendering into a multisample renderbuffers, this is the only way to get resolved, non-multisample content out of them. Multisample textures allow sampling in shaders so for them this is just one option.</db:para>
<db:note>
<db:para>when resolving is enabled, the multisample data may not be written out at all. This means that the multisample texture() must not be used afterwards with shaders for sampling when resolveTexture() is set.</db:para>
</db:note>
<db:note>
<db:para>This is a RHI API with limited compatibility guarantees, see <db:link xlink:href="qrhi.xml">QRhi</db:link> for details.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrhitexturerendertargetdescription.xml">QRhiTextureRenderTargetDescription</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRhiColorAttachment">
<db:title>QRhiColorAttachment::QRhiColorAttachment(QRhiRenderBuffer *<db:emphasis>renderBuffer</db:emphasis>)</db:title>
<db:para>Constructs a color attachment description that specifies <db:code role="parameter">renderBuffer</db:code> as the associated color buffer.</db:para>
</db:section>
<db:section xml:id="QRhiColorAttachment-1">
<db:title>QRhiColorAttachment::QRhiColorAttachment(QRhiTexture *<db:emphasis>texture</db:emphasis>)</db:title>
<db:para>Constructs a color attachment description that specifies <db:code role="parameter">texture</db:code> as the associated color buffer.</db:para>
</db:section>
</db:section>
</db:article>
