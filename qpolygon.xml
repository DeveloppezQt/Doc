<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPolygon Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpolygon.xml">QPolygon</db:link> class provides a list of points using integer precision.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPolygon</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qlist.xml" xlink:role="class">QList</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPolygon is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qpolygon.xml">QPolygon</db:link> object is a <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qpoint.xml">QPoint</db:link>&gt;. The easiest way to add points to a <db:link xlink:href="qpolygon.xml">QPolygon</db:link> is to use <db:link xlink:href="qlist.xml">QList</db:link>'s streaming operator, as illustrated below:</db:para>
<db:programlisting language="cpp">QPolygon polygon;
polygon &lt;&lt; QPoint(10, 20) &lt;&lt; QPoint(20, 30);
</db:programlisting>
<db:para>In addition to the functions provided by <db:link xlink:href="qlist.xml">QList</db:link>, <db:link xlink:href="qpolygon.xml">QPolygon</db:link> provides some point-specific functions.</db:para>
<db:para>Each point in a polygon can be retrieved by passing its index to the <db:link xlink:href="qpolygon.xml#point">point</db:link>() function. To populate the polygon, <db:link xlink:href="qpolygon.xml">QPolygon</db:link> provides the <db:link xlink:href="qpolygon.xml#setPoint">setPoint</db:link>() function to set the point at a given index, the <db:link xlink:href="qpolygon.xml#setPoints">setPoints</db:link>() function to set all the points in the polygon (resizing it to the given number of points), and the <db:link xlink:href="qpolygon.xml#putPoints">putPoints</db:link>() function which copies a number of given points into the polygon from a specified index (resizing the polygon if necessary).</db:para>
<db:para><db:link xlink:href="qpolygon.xml">QPolygon</db:link> provides the <db:link xlink:href="qpolygon.xml#boundingRect">boundingRect</db:link>() and <db:link xlink:href="qpolygon.xml#translate">translate</db:link>() functions for geometry functions. Use the <db:link xlink:href="qtransform.xml#map">QTransform::map</db:link>() function for more general transformations of QPolygons.</db:para>
<db:para>The <db:link xlink:href="qpolygon.xml">QPolygon</db:link> class is <db:link xlink:href="implicit-sharing.xml">implicitly shared</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist.xml">QList</db:link></db:member>
<db:member><db:link xlink:href="qpolygonf.xml">QPolygonF</db:link></db:member>
<db:member><db:link xlink:href="qline.xml">QLine</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPolygon">
<db:title>[constexpr noexcept] QPolygon::QPolygon()</db:title>
<db:para>Constructs a polygon with no points.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist.xml#isEmpty">QList::isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPolygon-1">
<db:title>QPolygon::QPolygon(const QList&lt;QPoint&gt; &amp;<db:emphasis>points</db:emphasis>)</db:title>
<db:para>Constructs a polygon containing the specified <db:code role="parameter">points</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolygon.xml#setPoints">setPoints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPolygon-2">
<db:title>QPolygon::QPolygon(const QRect &amp;<db:emphasis>rectangle</db:emphasis>, bool <db:emphasis>closed</db:emphasis> = false)</db:title>
<db:para>Constructs a polygon from the given <db:code role="parameter">rectangle</db:code>. If <db:code role="parameter">closed</db:code> is false, the polygon just contains the four points of the rectangle ordered clockwise, otherwise the polygon's fifth point is set to <db:code role="parameter">rectangle</db:code>.topLeft().</db:para>
<db:para>Note that the bottom-right corner of the rectangle is located at (rectangle.x() + rectangle.width(), rectangle.y() + rectangle.height()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolygon.xml#setPoints">setPoints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundingRect">
<db:title>QRect QPolygon::boundingRect() const</db:title>
<db:para>Returns the bounding rectangle of the polygon, or <db:link xlink:href="qrect.xml">QRect</db:link>(0, 0, 0, 0) if the polygon is empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist.xml#isEmpty">QList::isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="containsPoint">
<db:title>bool QPolygon::containsPoint(const QPoint &amp;<db:emphasis>point</db:emphasis>, Qt::FillRule <db:emphasis>fillRule</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the given <db:code role="parameter">point</db:code> is inside the polygon according to the specified <db:code role="parameter">fillRule</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="intersected">
<db:title>QPolygon QPolygon::intersected(const QPolygon &amp;<db:emphasis>r</db:emphasis>) const</db:title>
<db:para>Returns a polygon which is the intersection of this polygon and <db:code role="parameter">r</db:code>.</db:para>
<db:para>Set operations on polygons will treat the polygons as areas. Non-closed polygons will be treated as implicitly closed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolygon.xml#intersects">intersects</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="intersects">
<db:title>bool QPolygon::intersects(const QPolygon &amp;<db:emphasis>p</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the current polygon intersects at any point the given polygon <db:code role="parameter">p</db:code>. Also returns <db:code>true</db:code> if the current polygon contains or is contained by any part of <db:code role="parameter">p</db:code>.</db:para>
<db:para>Set operations on polygons will treat the polygons as areas. Non-closed polygons will be treated as implicitly closed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolygon.xml#intersected">intersected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="point">
<db:title>void QPolygon::point(int <db:emphasis>index</db:emphasis>, int *<db:emphasis>x</db:emphasis>, int *<db:emphasis>y</db:emphasis>) const</db:title>
<db:para>Extracts the coordinates of the point at the given <db:code role="parameter">index</db:code> to *<db:code role="parameter">x</db:code> and *<db:code role="parameter">y</db:code> (if they are valid pointers).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolygon.xml#setPoint">setPoint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="point-1">
<db:title>QPoint QPolygon::point(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the point at the given <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="putPoints">
<db:title>void QPolygon::putPoints(int <db:emphasis>index</db:emphasis>, int <db:emphasis>nPoints</db:emphasis>, int <db:emphasis>firstx</db:emphasis>, int <db:emphasis>firsty</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:para>Copies <db:code role="parameter">nPoints</db:code> points from the variable argument list into this polygon from the given <db:code role="parameter">index</db:code>.</db:para>
<db:para>The points are given as a sequence of integers, starting with <db:code role="parameter">firstx</db:code> then <db:code role="parameter">firsty</db:code>, and so on. The polygon is resized if <db:code>index+nPoints</db:code> exceeds its current size.</db:para>
<db:para>The example code creates a polygon with three points (4,5), (6,7) and (8,9), by expanding the polygon from 1 to 3 points:</db:para>
<db:programlisting language="cpp">QPolygon polygon(1);
polygon[0] = QPoint(4, 5);
polygon.putPoints(1, 2, 6,7, 8,9);
</db:programlisting>
<db:para>The following code has the same result, but here the putPoints() function overwrites rather than extends:</db:para>
<db:programlisting language="cpp">QPolygon polygon(3);
polygon.putPoints(0, 3, 4,5, 0,0, 8,9);
polygon.putPoints(1, 1, 6,7);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolygon.xml#setPoints">setPoints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="putPoints-1">
<db:title>void QPolygon::putPoints(int <db:emphasis>index</db:emphasis>, int <db:emphasis>nPoints</db:emphasis>, const QPolygon &amp;<db:emphasis>fromPolygon</db:emphasis>, int <db:emphasis>fromIndex</db:emphasis> = 0)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Copies <db:code role="parameter">nPoints</db:code> points from the given <db:code role="parameter">fromIndex</db:code> ( 0 by default) in <db:code role="parameter">fromPolygon</db:code> into this polygon, starting at the specified <db:code role="parameter">index</db:code>. For example:</db:para>
<db:programlisting language="cpp">QPolygon polygon1;
polygon1.putPoints(0, 3, 1,2, 0,0, 5,6);
// polygon1 is now the three-point polygon(1,2, 0,0, 5,6);

QPolygon polygon2;
polygon2.putPoints(0, 3, 4,4, 5,5, 6,6);
// polygon2 is now (4,4, 5,5, 6,6);

polygon1.putPoints(2, 3, polygon2);
// polygon1 is now the five-point polygon(1,2, 0,0, 4,4, 5,5, 6,6);
</db:programlisting>
</db:section>
<db:section xml:id="setPoint">
<db:title>void QPolygon::setPoint(int <db:emphasis>index</db:emphasis>, int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Sets the point at the given <db:code role="parameter">index</db:code> to the point specified by (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolygon.xml#point">point</db:link>()</db:member>
<db:member><db:link xlink:href="qpolygon.xml#putPoints">putPoints</db:link>()</db:member>
<db:member><db:link xlink:href="qpolygon.xml#setPoints">setPoints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPoint-1">
<db:title>void QPolygon::setPoint(int <db:emphasis>index</db:emphasis>, const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the point at the given <db:code role="parameter">index</db:code> to the given <db:code role="parameter">point</db:code>.</db:para>
</db:section>
<db:section xml:id="setPoints">
<db:title>void QPolygon::setPoints(int <db:emphasis>nPoints</db:emphasis>, const int *<db:emphasis>points</db:emphasis>)</db:title>
<db:para>Resizes the polygon to <db:code role="parameter">nPoints</db:code> and populates it with the given <db:code role="parameter">points</db:code>.</db:para>
<db:para>The example code creates a polygon with two points (10, 20) and (30, 40):</db:para>
<db:programlisting language="cpp">static const int points[] = { 10, 20, 30, 40 };
QPolygon polygon;
polygon.setPoints(2, points);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolygon.xml#setPoint">setPoint</db:link>()</db:member>
<db:member><db:link xlink:href="qpolygon.xml#putPoints">putPoints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPoints-1">
<db:title>void QPolygon::setPoints(int <db:emphasis>nPoints</db:emphasis>, int <db:emphasis>firstx</db:emphasis>, int <db:emphasis>firsty</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Resizes the polygon to <db:code role="parameter">nPoints</db:code> and populates it with the points specified by the variable argument list. The points are given as a sequence of integers, starting with <db:code role="parameter">firstx</db:code> then <db:code role="parameter">firsty</db:code>, and so on.</db:para>
<db:para>The example code creates a polygon with two points (10, 20) and (30, 40):</db:para>
<db:programlisting language="cpp">QPolygon polygon;
polygon.setPoints(2, 10, 20, 30, 40);
</db:programlisting>
</db:section>
<db:section xml:id="subtracted">
<db:title>QPolygon QPolygon::subtracted(const QPolygon &amp;<db:emphasis>r</db:emphasis>) const</db:title>
<db:para>Returns a polygon which is <db:code role="parameter">r</db:code> subtracted from this polygon.</db:para>
<db:para>Set operations on polygons will treat the polygons as areas. Non-closed polygons will be treated as implicitly closed.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QPolygon::swap(QPolygon &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this polygon with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="toPolygonF">
<db:title>[since 6.4] QPolygonF QPolygon::toPolygonF() const</db:title>
<db:para>Returns this polygon as a polygon with floating point accuracy.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolygonf.xml#toPolygon">QPolygonF::toPolygon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translate">
<db:title>void QPolygon::translate(int <db:emphasis>dx</db:emphasis>, int <db:emphasis>dy</db:emphasis>)</db:title>
<db:para>Translates all points in the polygon by (<db:code role="parameter">dx</db:code>, <db:code role="parameter">dy</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolygon.xml#translated">translated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translate-1">
<db:title>void QPolygon::translate(const QPoint &amp;<db:emphasis>offset</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Translates all points in the polygon by the given <db:code role="parameter">offset</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolygon.xml#translated">translated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translated">
<db:title>QPolygon QPolygon::translated(int <db:emphasis>dx</db:emphasis>, int <db:emphasis>dy</db:emphasis>) const</db:title>
<db:para>Returns a copy of the polygon that is translated by (<db:code role="parameter">dx</db:code>, <db:code role="parameter">dy</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolygon.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translated-1">
<db:title>QPolygon QPolygon::translated(const QPoint &amp;<db:emphasis>offset</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a copy of the polygon that is translated by the given <db:code role="parameter">offset</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolygon.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="united">
<db:title>QPolygon QPolygon::united(const QPolygon &amp;<db:emphasis>r</db:emphasis>) const</db:title>
<db:para>Returns a polygon which is the union of this polygon and <db:code role="parameter">r</db:code>.</db:para>
<db:para>Set operations on polygons, will treat the polygons as areas, and implicitly close the polygon.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolygon.xml#intersected">intersected</db:link>()</db:member>
<db:member><db:link xlink:href="qpolygon.xml#subtracted">subtracted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QPolygon::operator QVariant() const</db:title>
<db:para>Returns the polygon as a <db:link xlink:href="qvariant.xml">QVariant</db:link></db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt-20">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QPolygon &amp;<db:emphasis>polygon</db:emphasis>)</db:title>
<db:para>Writes the given <db:code role="parameter">polygon</db:code> to the given <db:code role="parameter">stream</db:code>, and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-17">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QPolygon &amp;<db:emphasis>polygon</db:emphasis>)</db:title>
<db:para>Reads a polygon from the given <db:code role="parameter">stream</db:code> into the given <db:code role="parameter">polygon</db:code>, and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
