<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoRoute Class</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeoroute.xml">QGeoRoute</db:link> class represents a route between two points.</db:para>
<db:para>This class was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoRoute</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += location</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGeoRoute is part of <db:simplelist><db:member>QtLocation-routing</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qgeoroute.xml">QGeoRoute</db:link> object contains high level information about a route, such as the length the route, the estimated travel time for the route, and enough information to render a basic image of the route on a map.</db:para>
<db:para>The <db:link xlink:href="qgeoroute.xml">QGeoRoute</db:link> object also contains a list of <db:link xlink:href="qgeoroutesegment.xml">QGeoRouteSegment</db:link> objecs which describe subsections of the route in greater detail.</db:para>
<db:para>Routing information is normally requested using <db:link xlink:href="qgeoroutingmanager.xml#calculateRoute">QGeoRoutingManager::calculateRoute</db:link>(), which returns a <db:link xlink:href="qgeoroutereply.xml">QGeoRouteReply</db:link> instance. If the operation is completed successfully the routing information can be accessed with <db:link xlink:href="qgeoroutereply.xml#routes">QGeoRouteReply::routes</db:link>()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanager.xml">QGeoRoutingManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGeoRoute">
<db:title>QGeoRoute::QGeoRoute()</db:title>
<db:para>Constructs a route object.</db:para>
</db:section>
<db:section xml:id="QGeoRoute-1">
<db:title>QGeoRoute::QGeoRoute(const QGeoRoute &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a route object from the contents of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGeoRoute">
<db:title>[noexcept] QGeoRoute::~QGeoRoute()</db:title>
<db:para>Destroys this route object.</db:para>
</db:section>
<db:section xml:id="bounds">
<db:title>QGeoRectangle QGeoRoute::bounds() const</db:title>
<db:para>Returns a bounding box which encompasses the entire route.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroute.xml#setBounds">setBounds</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="distance">
<db:title>qreal QGeoRoute::distance() const</db:title>
<db:para>Returns the distance covered by this route, in meters.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroute.xml#setDistance">setDistance</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="firstRouteSegment">
<db:title>QGeoRouteSegment QGeoRoute::firstRouteSegment() const</db:title>
<db:para>Returns the first route segment in the route.</db:para>
<db:para>Will return an invalid route segment if there are no route segments associated with the route.</db:para>
<db:para>The remaining route segments can be accessed sequentially with <db:link xlink:href="qgeoroutesegment.xml#nextRouteSegment">QGeoRouteSegment::nextRouteSegment</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroute.xml#setFirstRouteSegment">setFirstRouteSegment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="path">
<db:title>QList&lt;QGeoCoordinate&gt; QGeoRoute::path() const</db:title>
<db:para>Returns the geometric shape of the route.</db:para>
<db:para>The coordinates should be listed in the order in which they would be traversed by someone traveling along this segment of the route.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroute.xml#setPath">setPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="request">
<db:title>QGeoRouteRequest QGeoRoute::request() const</db:title>
<db:para>Returns the route request which describes the criteria used in the calculation of this route.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroute.xml#setRequest">setRequest</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="routeId">
<db:title>QString QGeoRoute::routeId() const</db:title>
<db:para>Returns the identifier of this route.</db:para>
<db:para>Service providers which support the updating of routes commonly assign identifiers to routes. If this route did not come from such a service provider the function will return an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroute.xml#setRouteId">setRouteId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBounds">
<db:title>void QGeoRoute::setBounds(const QGeoRectangle &amp;<db:emphasis>bounds</db:emphasis>)</db:title>
<db:para>Sets the bounding box which encompasses the entire route to <db:code role="parameter">bounds</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroute.xml#bounds">bounds</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDistance">
<db:title>void QGeoRoute::setDistance(qreal <db:emphasis>distance</db:emphasis>)</db:title>
<db:para>Sets the distance covered by this route, in meters, to <db:code role="parameter">distance</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroute.xml#distance">distance</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFirstRouteSegment">
<db:title>void QGeoRoute::setFirstRouteSegment(const QGeoRouteSegment &amp;<db:emphasis>routeSegment</db:emphasis>)</db:title>
<db:para>Sets the first route segment in the route to <db:code role="parameter">routeSegment</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroute.xml#firstRouteSegment">firstRouteSegment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPath">
<db:title>void QGeoRoute::setPath(const QList&lt;QGeoCoordinate&gt; &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Sets the geometric shape of the route to <db:code role="parameter">path</db:code>.</db:para>
<db:para>The coordinates in <db:code role="parameter">path</db:code> should be listed in the order in which they would be traversed by someone traveling along this segment of the route.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroute.xml#path">path</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRequest">
<db:title>void QGeoRoute::setRequest(const QGeoRouteRequest &amp;<db:emphasis>request</db:emphasis>)</db:title>
<db:para>Sets the route request which describes the criteria used in the calculcation of this route to <db:code role="parameter">request</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroute.xml#request">request</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRouteId">
<db:title>void QGeoRoute::setRouteId(const QString &amp;<db:emphasis>id</db:emphasis>)</db:title>
<db:para>Sets the identifier of this route to <db:code role="parameter">id</db:code>.</db:para>
<db:para>Service providers which support the updating of routes commonly assign identifiers to routes. If this route came from such a service provider changing the identifier will probably cause route updates to stop working.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroute.xml#routeId">routeId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTravelMode">
<db:title>void QGeoRoute::setTravelMode(QGeoRouteRequest::TravelMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Sets the travel mode for this route to <db:code role="parameter">mode</db:code>.</db:para>
<db:para>This should be one of the travel modes returned by <db:link xlink:href="qgeoroute.xml#request">request</db:link>().travelModes().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroute.xml#travelMode">travelMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTravelTime">
<db:title>void QGeoRoute::setTravelTime(int <db:emphasis>secs</db:emphasis>)</db:title>
<db:para>Sets the estimated amount of time it will take to traverse this route, in seconds, to <db:code role="parameter">secs</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroute.xml#travelTime">travelTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="travelMode">
<db:title>QGeoRouteRequest::TravelMode QGeoRoute::travelMode() const</db:title>
<db:para>Returns the travel mode for the this route.</db:para>
<db:para>This should be one of the travel modes returned by <db:link xlink:href="qgeoroute.xml#request">request</db:link>().travelModes().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroute.xml#setTravelMode">setTravelMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="travelTime">
<db:title>int QGeoRoute::travelTime() const</db:title>
<db:para>Returns the estimated amount of time it will take to traverse this route, in seconds.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroute.xml#setTravelTime">setTravelTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QGeoRoute::operator!=(const QGeoRoute &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns whether this route and <db:code role="parameter">other</db:code> are not equal.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QGeoRoute &amp;QGeoRoute::operator=(const QGeoRoute &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns the contents of <db:code role="parameter">other</db:code> to this route and returns a reference to this route.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QGeoRoute::operator==(const QGeoRoute &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns whether this route and <db:code role="parameter">other</db:code> are equal.</db:para>
</db:section>
</db:section>
</db:article>
