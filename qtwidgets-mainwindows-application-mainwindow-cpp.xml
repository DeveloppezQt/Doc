<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Application Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Application example shows how to implement a standard GUI application with menus, toolbars, and a status bar. The example itself is a simple text editor program built around QPlainTextEdit.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;mainwindow.h&quot;

MainWindow::MainWindow()
{
    textEdit = new QPlainTextEdit;
    setCentralWidget(textEdit);

    createActions();
    createMenus();
    createToolBars();
    createStatusBar();

    readSettings();

    connect(textEdit-&gt;document(), SIGNAL(contentsChanged()),
            this, SLOT(documentWasModified()));

    setCurrentFile(&quot;&quot;);
    setUnifiedTitleAndToolBarOnMac(true);
}

void MainWindow::closeEvent(QCloseEvent *event)
{
    if (maybeSave()) {
        writeSettings();
        event-&gt;accept();
    } else {
        event-&gt;ignore();
    }
}

void MainWindow::newFile()
{
    if (maybeSave()) {
        textEdit-&gt;clear();
        setCurrentFile(&quot;&quot;);
    }
}

void MainWindow::open()
{
    if (maybeSave()) {
        QString fileName = QFileDialog::getOpenFileName(this);
        if (!fileName.isEmpty())
            loadFile(fileName);
    }
}

bool MainWindow::save()
{
    if (curFile.isEmpty()) {
        return saveAs();
    } else {
        return saveFile(curFile);
    }
}

bool MainWindow::saveAs()
{
    QFileDialog dialog(this);
    dialog.setWindowModality(Qt::WindowModal);
    dialog.setAcceptMode(QFileDialog::AcceptSave);
    QStringList files;
    if (dialog.exec())
        files = dialog.selectedFiles();
    else
        return false;

    return saveFile(files.at(0));
}

void MainWindow::about()
{
   QMessageBox::about(this, tr(&quot;About Application&quot;),
            tr(&quot;The &lt;b&gt;Application&lt;/b&gt; example demonstrates how to &quot;
               &quot;write modern GUI applications using Qt, with a menu bar, &quot;
               &quot;toolbars, and a status bar.&quot;));
}

void MainWindow::documentWasModified()
{
    setWindowModified(textEdit-&gt;document()-&gt;isModified());
}

void MainWindow::createActions()
{
    newAct = new QAction(QIcon(&quot;:/images/new.png&quot;), tr(&quot;&amp;New&quot;), this);
    newAct-&gt;setShortcuts(QKeySequence::New);
    newAct-&gt;setStatusTip(tr(&quot;Create a new file&quot;));
    connect(newAct, SIGNAL(triggered()), this, SLOT(newFile()));

    openAct = new QAction(QIcon(&quot;:/images/open.png&quot;), tr(&quot;&amp;Open...&quot;), this);
    openAct-&gt;setShortcuts(QKeySequence::Open);
    openAct-&gt;setStatusTip(tr(&quot;Open an existing file&quot;));
    connect(openAct, SIGNAL(triggered()), this, SLOT(open()));

    saveAct = new QAction(QIcon(&quot;:/images/save.png&quot;), tr(&quot;&amp;Save&quot;), this);
    saveAct-&gt;setShortcuts(QKeySequence::Save);
    saveAct-&gt;setStatusTip(tr(&quot;Save the document to disk&quot;));
    connect(saveAct, SIGNAL(triggered()), this, SLOT(save()));

    saveAsAct = new QAction(tr(&quot;Save &amp;As...&quot;), this);
    saveAsAct-&gt;setShortcuts(QKeySequence::SaveAs);
    saveAsAct-&gt;setStatusTip(tr(&quot;Save the document under a new name&quot;));
    connect(saveAsAct, SIGNAL(triggered()), this, SLOT(saveAs()));

    exitAct = new QAction(tr(&quot;E&amp;xit&quot;), this);
    exitAct-&gt;setShortcuts(QKeySequence::Quit);
    exitAct-&gt;setStatusTip(tr(&quot;Exit the application&quot;));
    connect(exitAct, SIGNAL(triggered()), this, SLOT(close()));

    cutAct = new QAction(QIcon(&quot;:/images/cut.png&quot;), tr(&quot;Cu&amp;t&quot;), this);
    cutAct-&gt;setShortcuts(QKeySequence::Cut);
    cutAct-&gt;setStatusTip(tr(&quot;Cut the current selection's contents to the &quot;
                            &quot;clipboard&quot;));
    connect(cutAct, SIGNAL(triggered()), textEdit, SLOT(cut()));

    copyAct = new QAction(QIcon(&quot;:/images/copy.png&quot;), tr(&quot;&amp;Copy&quot;), this);
    copyAct-&gt;setShortcuts(QKeySequence::Copy);
    copyAct-&gt;setStatusTip(tr(&quot;Copy the current selection's contents to the &quot;
                             &quot;clipboard&quot;));
    connect(copyAct, SIGNAL(triggered()), textEdit, SLOT(copy()));

    pasteAct = new QAction(QIcon(&quot;:/images/paste.png&quot;), tr(&quot;&amp;Paste&quot;), this);
    pasteAct-&gt;setShortcuts(QKeySequence::Paste);
    pasteAct-&gt;setStatusTip(tr(&quot;Paste the clipboard's contents into the current &quot;
                              &quot;selection&quot;));
    connect(pasteAct, SIGNAL(triggered()), textEdit, SLOT(paste()));

    aboutAct = new QAction(tr(&quot;&amp;About&quot;), this);
    aboutAct-&gt;setStatusTip(tr(&quot;Show the application's About box&quot;));
    connect(aboutAct, SIGNAL(triggered()), this, SLOT(about()));

    aboutQtAct = new QAction(tr(&quot;About &amp;Qt&quot;), this);
    aboutQtAct-&gt;setStatusTip(tr(&quot;Show the Qt library's About box&quot;));
    connect(aboutQtAct, SIGNAL(triggered()), qApp, SLOT(aboutQt()));

    cutAct-&gt;setEnabled(false);
    copyAct-&gt;setEnabled(false);
    connect(textEdit, SIGNAL(copyAvailable(bool)),
            cutAct, SLOT(setEnabled(bool)));
    connect(textEdit, SIGNAL(copyAvailable(bool)),
            copyAct, SLOT(setEnabled(bool)));
}

void MainWindow::createMenus()
{
    fileMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;File&quot;));
    fileMenu-&gt;addAction(newAct);
    fileMenu-&gt;addAction(openAct);
    fileMenu-&gt;addAction(saveAct);
    fileMenu-&gt;addAction(saveAsAct);
    fileMenu-&gt;addSeparator();
    fileMenu-&gt;addAction(exitAct);

    editMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Edit&quot;));
    editMenu-&gt;addAction(cutAct);
    editMenu-&gt;addAction(copyAct);
    editMenu-&gt;addAction(pasteAct);

    menuBar()-&gt;addSeparator();

    helpMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Help&quot;));
    helpMenu-&gt;addAction(aboutAct);
    helpMenu-&gt;addAction(aboutQtAct);
}

void MainWindow::createToolBars()
{
    fileToolBar = addToolBar(tr(&quot;File&quot;));
    fileToolBar-&gt;addAction(newAct);
    fileToolBar-&gt;addAction(openAct);
    fileToolBar-&gt;addAction(saveAct);

    editToolBar = addToolBar(tr(&quot;Edit&quot;));
    editToolBar-&gt;addAction(cutAct);
    editToolBar-&gt;addAction(copyAct);
    editToolBar-&gt;addAction(pasteAct);
}

void MainWindow::createStatusBar()
{
    statusBar()-&gt;showMessage(tr(&quot;Ready&quot;));
}

void MainWindow::readSettings()
{
    QSettings settings(&quot;QtProject&quot;, &quot;Application Example&quot;);
    QPoint pos = settings.value(&quot;pos&quot;, QPoint(200, 200)).toPoint();
    QSize size = settings.value(&quot;size&quot;, QSize(400, 400)).toSize();
    resize(size);
    move(pos);
}

void MainWindow::writeSettings()
{
    QSettings settings(&quot;QtProject&quot;, &quot;Application Example&quot;);
    settings.setValue(&quot;pos&quot;, pos());
    settings.setValue(&quot;size&quot;, size());
}

bool MainWindow::maybeSave()
{
    if (textEdit-&gt;document()-&gt;isModified()) {
        QMessageBox::StandardButton ret;
        ret = QMessageBox::warning(this, tr(&quot;Application&quot;),
                     tr(&quot;The document has been modified.\n&quot;
                        &quot;Do you want to save your changes?&quot;),
                     QMessageBox::Save | QMessageBox::Discard | QMessageBox::Cancel);
        if (ret == QMessageBox::Save)
            return save();
        else if (ret == QMessageBox::Cancel)
            return false;
    }
    return true;
}

void MainWindow::loadFile(const QString &amp;fileName)
{
    QFile file(fileName);
    if (!file.open(QFile::ReadOnly | QFile::Text)) {
        QMessageBox::warning(this, tr(&quot;Application&quot;),
                             tr(&quot;Cannot read file %1:\n%2.&quot;)
                             .arg(fileName)
                             .arg(file.errorString()));
        return;
    }

    QTextStream in(&amp;file);
#ifndef QT_NO_CURSOR
    QApplication::setOverrideCursor(Qt::WaitCursor);
#endif
    textEdit-&gt;setPlainText(in.readAll());
#ifndef QT_NO_CURSOR
    QApplication::restoreOverrideCursor();
#endif

    setCurrentFile(fileName);
    statusBar()-&gt;showMessage(tr(&quot;File loaded&quot;), 2000);
}

bool MainWindow::saveFile(const QString &amp;fileName)
{
    QFile file(fileName);
    if (!file.open(QFile::WriteOnly | QFile::Text)) {
        QMessageBox::warning(this, tr(&quot;Application&quot;),
                             tr(&quot;Cannot write file %1:\n%2.&quot;)
                             .arg(fileName)
                             .arg(file.errorString()));
        return false;
    }

    QTextStream out(&amp;file);
#ifndef QT_NO_CURSOR
    QApplication::setOverrideCursor(Qt::WaitCursor);
#endif
    out &lt;&lt; textEdit-&gt;toPlainText();
#ifndef QT_NO_CURSOR
    QApplication::restoreOverrideCursor();
#endif

    setCurrentFile(fileName);
    statusBar()-&gt;showMessage(tr(&quot;File saved&quot;), 2000);
    return true;
}

void MainWindow::setCurrentFile(const QString &amp;fileName)
{
    curFile = fileName;
    textEdit-&gt;document()-&gt;setModified(false);
    setWindowModified(false);

    QString shownName = curFile;
    if (curFile.isEmpty())
        shownName = &quot;untitled.txt&quot;;
    setWindowFilePath(shownName);
}

QString MainWindow::strippedName(const QString &amp;fullFileName)
{
    return QFileInfo(fullFileName).fileName();
}

</db:programlisting>
</db:article>
