<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Polar Chart Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to create a simple polar chart with multiple different series.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Charts module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;chartview.h&quot;
#include &lt;QtWidgets/QApplication&gt;
#include &lt;QtWidgets/QMainWindow&gt;
#include &lt;QtCharts/QScatterSeries&gt;
#include &lt;QtCharts/QLineSeries&gt;
#include &lt;QtCharts/QSplineSeries&gt;
#include &lt;QtCharts/QAreaSeries&gt;
#include &lt;QtCharts/QValueAxis&gt;
#include &lt;QtCharts/QPolarChart&gt;
#include &lt;QtCore/QDebug&gt;

QT_CHARTS_USE_NAMESPACE

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);

    const qreal angularMin = -100;
    const qreal angularMax = 100;

    const qreal radialMin = -100;
    const qreal radialMax = 100;

    QScatterSeries *series1 = new QScatterSeries();
    series1-&gt;setName(&quot;scatter&quot;);
    for (int i = angularMin; i &lt;= angularMax; i += 10)
        series1-&gt;append(i, (i / radialMax) * radialMax + 8.0);

    QSplineSeries *series2 = new QSplineSeries();
    series2-&gt;setName(&quot;spline&quot;);
    for (int i = angularMin; i &lt;= angularMax; i += 10)
        series2-&gt;append(i, (i / radialMax) * radialMax);

    QLineSeries *series3 = new QLineSeries();
    series3-&gt;setName(&quot;star outer&quot;);
    qreal ad = (angularMax - angularMin) / 8;
    qreal rd = (radialMax - radialMin) / 3 * 1.3;
    series3-&gt;append(angularMin, radialMax);
    series3-&gt;append(angularMin + ad*1, radialMin + rd);
    series3-&gt;append(angularMin + ad*2, radialMax);
    series3-&gt;append(angularMin + ad*3, radialMin + rd);
    series3-&gt;append(angularMin + ad*4, radialMax);
    series3-&gt;append(angularMin + ad*5, radialMin + rd);
    series3-&gt;append(angularMin + ad*6, radialMax);
    series3-&gt;append(angularMin + ad*7, radialMin + rd);
    series3-&gt;append(angularMin + ad*8, radialMax);

    QLineSeries *series4 = new QLineSeries();
    series4-&gt;setName(&quot;star inner&quot;);
    ad = (angularMax - angularMin) / 8;
    rd = (radialMax - radialMin) / 3;
    series4-&gt;append(angularMin, radialMax);
    series4-&gt;append(angularMin + ad*1, radialMin + rd);
    series4-&gt;append(angularMin + ad*2, radialMax);
    series4-&gt;append(angularMin + ad*3, radialMin + rd);
    series4-&gt;append(angularMin + ad*4, radialMax);
    series4-&gt;append(angularMin + ad*5, radialMin + rd);
    series4-&gt;append(angularMin + ad*6, radialMax);
    series4-&gt;append(angularMin + ad*7, radialMin + rd);
    series4-&gt;append(angularMin + ad*8, radialMax);

    QAreaSeries *series5 = new QAreaSeries();
    series5-&gt;setName(&quot;star area&quot;);
    series5-&gt;setUpperSeries(series3);
    series5-&gt;setLowerSeries(series4);
    series5-&gt;setOpacity(0.5);

    QPolarChart *chart = new QPolarChart();
    chart-&gt;addSeries(series1);
    chart-&gt;addSeries(series2);
    chart-&gt;addSeries(series3);
    chart-&gt;addSeries(series4);
    chart-&gt;addSeries(series5);

    chart-&gt;setTitle(&quot;Use arrow keys to scroll, +/- to zoom, and space to switch chart type.&quot;);

    QValueAxis *angularAxis = new QValueAxis();
    angularAxis-&gt;setTickCount(9); // First and last ticks are co-located on 0/360 angle.
    angularAxis-&gt;setLabelFormat(&quot;%.1f&quot;);
    angularAxis-&gt;setShadesVisible(true);
    angularAxis-&gt;setShadesBrush(QBrush(QColor(249, 249, 255)));
    chart-&gt;addAxis(angularAxis, QPolarChart::PolarOrientationAngular);

    QValueAxis *radialAxis = new QValueAxis();
    radialAxis-&gt;setTickCount(9);
    radialAxis-&gt;setLabelFormat(&quot;%d&quot;);
    chart-&gt;addAxis(radialAxis, QPolarChart::PolarOrientationRadial);

    series1-&gt;attachAxis(radialAxis);
    series1-&gt;attachAxis(angularAxis);
    series2-&gt;attachAxis(radialAxis);
    series2-&gt;attachAxis(angularAxis);
    series3-&gt;attachAxis(radialAxis);
    series3-&gt;attachAxis(angularAxis);
    series4-&gt;attachAxis(radialAxis);
    series4-&gt;attachAxis(angularAxis);
    series5-&gt;attachAxis(radialAxis);
    series5-&gt;attachAxis(angularAxis);

    radialAxis-&gt;setRange(radialMin, radialMax);
    angularAxis-&gt;setRange(angularMin, angularMax);

    ChartView *chartView = new ChartView();
    chartView-&gt;setChart(chart);
    chartView-&gt;setRenderHint(QPainter::Antialiasing);

    QMainWindow window;
    window.setCentralWidget(chartView);
    window.resize(800, 600);
    window.show();

    return a.exec();
}

</db:programlisting>
</db:article>
