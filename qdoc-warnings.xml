<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>How to Resolve QDoc Warnings</db:title>
<db:productname>QDoc</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>QDoc Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qdoc-categories.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Categories of Documentation"/></db:extendedlink>
<db:abstract>
<db:para>QDoc Manual.</db:para></db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>QDoc may issue warnings when generating your documentation set. This section describes what these warnings mean and how to resolve them. This document does not describe warnings generated by Clang.</db:para>
<db:section xml:id="can-t-link-to-target">
<db:title>Can't link to &lt;target&gt;</db:title>
<db:para>QDoc issues this warning when one part of the documentation (identified in the warning message) tries to refer to another, but doesn't correctly specify that other, the target of the link. This may arise because the reference to it is mistyped or because the target has changed name (for a function or type) or title (for another section).</db:para>
<db:para>Search the source code for that particular link target. If you get no results, gradually make the search less specific until you find a match.</db:para>
<db:para>If the link target looks like the name of a type or function, this could also be due to:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The name (or, for functions, where specified, signature) used where it is documented not matching the name used in its declaration.</db:para>
</db:listitem>
<db:listitem>
<db:para>The link target being marked as <db:link xlink:href="16-qdoc-commands-status.xml#internal-command">\internal</db:link> when the linking text was not.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="cannot-find-snippets-file-to-quote-from">
<db:title>Cannot find snippets file to quote from</db:title>
<db:para>QDoc issues this warning if it is unable to find the file named after a <db:link xlink:href="07-0-qdoc-commands-includingexternalcode.xml#snippet-command">\snippet</db:link> or <db:link xlink:href="07-0-qdoc-commands-includingexternalcode.xml#quotefromfile-command">\quotefromfile</db:link> command.</db:para>
<db:para>Some useful steps for correcting this:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Check if the snippet file name is correct. QDoc appends the snippet file name to each of the directories given in the search path, to get a path-name for a candidate file to look for. It produces this error when none of these candidates exist.</db:para>
</db:listitem>
<db:listitem>
<db:para>Check the search path for snippets, given by the exampledirs configuration variable in the *.qdocconf file. You may need to add an entry to this path, or correct an existing entry.</db:para>
</db:listitem>
<db:listitem>
<db:para>Check if the snippet file exists, or if it has been moved, renamed or removed, which may happen when there are changes to the source code that QDoc tries to quote from.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="unexpected-snippet">
<db:title>Unexpected \snippet</db:title>
<db:para>QDoc issues this warning if it is unable to locate the snippet file quoted in a <db:link xlink:href="07-0-qdoc-commands-includingexternalcode.xml#snippet-command">\snippet</db:link> command.</db:para>
</db:section>
<db:section xml:id="undocumented-return-value">
<db:title>Undocumented return value</db:title>
<db:para>For functions whose return-type is not void, QDoc checks if the return value is documented. This warning is issued if the documentation for a function or method doesn't contain a word starting with &quot;return&quot;.</db:para>
</db:section>
<db:section xml:id="undocumented-parameter">
<db:title>Undocumented parameter</db:title>
<db:para>QDoc requires the documentation of a function or method to describe every parameter. It recognizes this by each parameter name (as specified where the function or method is declared in a header file) appearing after a <db:link xlink:href="04-qdoc-commands-textmarkup.xml#a-command">\a</db:link> command.</db:para>
</db:section>
<db:section xml:id="no-such-parameter">
<db:title>No such parameter</db:title>
<db:para>QDoc issues this warning when the parameter name given after an <db:link xlink:href="04-qdoc-commands-textmarkup.xml#a-command">\a</db:link> command does not match any of the parameters named in the header-file's declaration of the function or method being documented.</db:para>
</db:section>
<db:section xml:id="unknown-macro">
<db:title>Unknown macro</db:title>
<db:para>QDoc issues this warning when it sees a backslash, \, followed by a token it does not recognize as the name of a <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#macro-variable">built-in command</db:link> or a <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#alias-variable">user-defined macro</db:link>. When quoting code that contains character escape sequences, you should enclose the code in \c{...} to prevent this warning against the escape sequences.</db:para>
</db:section>
<db:section xml:id="clang-couldn-t-find-function-when-parsing-fn-signature">
<db:title>Clang couldn't find function when parsing \fn &lt;signature&gt;</db:title>
<db:para>When Clang parses a function statement after <db:link xlink:href="13-qdoc-commands-topics.xml#fn-command">\fn</db:link>, it checks this against the declaration in the header file. If Clang discovers discrepancies, it issues this warning message.</db:para>
</db:section>
<db:section xml:id="c-class-classname-not-found-instantiates-classname">
<db:title>C++ class &lt;ClassName&gt; not found: \instantiates &lt;ClassName&gt;</db:title>
<db:para>If you describe a QML type, you may specify the class it instantiates. Refer to the <db:link xlink:href="13-qdoc-commands-topics.xml#instantiates-command">\instantiates</db:link> command in the <db:link xlink:href="qdoc-index.xml">QDoc manual</db:link>.</db:para>
<db:para>QDoc issues this warning if it failed to locate the documentation for the C++ class &lt;ClassName&gt;. Either the class is undocumented, it is marked <db:link xlink:href="16-qdoc-commands-status.xml#internal-command">\internal</db:link>, or it originates from another documentation module and QDoc did not locate an index file for the corresponding dependency.</db:para>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#depends-variable">depends</db:link>.</db:para>
</db:section>
<db:section xml:id="cannot-tie-this-documentation-to-anything">
<db:title>Cannot tie this documentation to anything</db:title>
<db:para>QDoc found a /*! ... */ comment, with no <db:link xlink:href="13-qdoc-commands-topics.xml">topic command</db:link>, that was not immediately followed by a class, function or property definition. It thus does not know what the comment documents.</db:para>
</db:section>
<db:section xml:id="this-qdoc-comment-contains-no-topic-command-e-g-module-page">
<db:title>This qdoc comment contains no topic command (e.g., \module, \page)</db:title>
<db:para>If a QDoc comment doesn't contain a <db:link xlink:href="13-qdoc-commands-topics.xml">topic command</db:link>, QDoc does not know what the comment documents, and issues this warning. Very similar to <db:link xlink:href="qdoc-warnings.xml#cannot-tie-this-documentation-to-anything">Cannot tie this documentation to anything</db:link>, but specific to comments that are not in C++ or QML files.</db:para>
</db:section>
<db:section xml:id="name-documented-more-than-once">
<db:title>&lt;name&gt; documented more than once</db:title>
<db:para>QDoc issues this warning when it finds two comments that document the same item. The location of the previously seen comment is provided in warning details.</db:para>
<db:para>For example, you see this warning when a function has a documentation comment preceding its definition, and a separate \fn comment elsewhere.</db:para>
</db:section>
<db:section xml:id="namespace-name-documented-more-than-once">
<db:title>Namespace &lt;name&gt; documented more than once</db:title>
<db:para>This warning means that a documentation set contains two comments containing <db:link xlink:href="13-qdoc-commands-topics.xml#namespace-command">\namespace</db:link> commands with the same argument, &lt;name&gt;.</db:para>
</db:section>
<db:section xml:id="name-is-documented-but-namespace-namespace-is-not-documented-in-any-module">
<db:title>&lt;name&gt; is documented, but namespace &lt;namespace&gt; is not documented in any module</db:title>
<db:para>The documentation for <db:emphasis>&lt;name&gt;</db:emphasis> was found, but <db:emphasis>&lt;name&gt;</db:emphasis> is declared under a namespace that is either undocumented or QDoc was unable to locate the documentation for it.</db:para>
<db:para>This can be resolved by either documenting <db:emphasis>&lt;namespace&gt;</db:emphasis>, or if it is already documented in another module, ensure that this module has a dependency to it.</db:para>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#depends-variable">depends</db:link> and {indexes-variable}{indexes}.</db:para>
</db:section>
<db:section xml:id="clang-couldn-t-find-function-when-parsing-fn-signature">
<db:title>Clang couldn't find function when parsing \fn &lt;signature&gt;</db:title>
<db:para>When parsing a <db:link xlink:href="13-qdoc-commands-topics.xml#fn-command">\fn</db:link> statement, Clang compares this with the function declaration in the header file. If the signature differs Clang issues this warning.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A member of a class or namespace needs to include the class or namespace prefix on the member name.</db:para>
</db:listitem>
<db:listitem>
<db:para>A \fn with no return type matches, regardless of the actual return type, but if it specifies an incorrect return type, it doesn't.</db:para>
</db:listitem>
<db:listitem>
<db:para>Differences in \fn's parameter names don't preclude matching, although the <db:link xlink:href="04-qdoc-commands-textmarkup.xml#a-command">\a</db:link> commands in the comment must use the names in the declaration.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="has-no-inmodule-command">
<db:title>Has no \inmodule command</db:title>
<db:para>QDoc issues this warning if the QDoc comments do not relate a class, namespace, or headerfile to a module with the <db:link xlink:href="19-qdoc-commands-grouping.xml#inmodule-command">\inmodule</db:link> command.</db:para>
<db:para>If the QDoc comment describes an entity that's not a member of some other entity (typically a namespace or class), it should use either <db:link xlink:href="18-qdoc-commands-relating.xml#relates-command">\relates</db:link> or <db:link xlink:href="19-qdoc-commands-grouping.xml#inmodule-command">\inmodule</db:link> to associate it with its broader context. This warning is raised if it does not.</db:para>
</db:section>
<db:section xml:id="cannot-find-name-specified-with-command-in-any-header-file">
<db:title>Cannot find &lt;name&gt; specified with \&lt;command&gt; in any header file</db:title>
<db:para>This means that QDoc cannot find a declaration of &lt;name&gt; in any header file, but has found a comment that claims to document it.</db:para>
<db:para>An example:</db:para>
<db:programlisting language="cpp" role="bad">Cannot find 'Color::Red' specified with '\enum' in any header file.
</db:programlisting>
<db:para>A documentation comment claims to describe an enum, but QDoc didn't find a definition of that enum in a header file.</db:para>
<db:para>This may also be due to:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>a typo in &lt;name&gt; or &lt;command&gt;</db:para>
</db:listitem>
<db:listitem>
<db:para>a missing namespace-or-class prefix</db:para>
</db:listitem>
<db:listitem>
<db:para>&lt;name&gt; having moved to another namespace or class</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="unrecognizable-qml-module-component-qualifier-for-identifier">
<db:title>Unrecognizable QML module/component qualifier for &lt;identifier&gt;</db:title>
<db:para>A parameter passed to <db:link xlink:href="13-qdoc-commands-topics.xml#qmlproperty-command">\qmlproperty</db:link> or <db:link xlink:href="13-qdoc-commands-topics.xml#qmlmethod-command">\qmlmethod</db:link> contains a combination of qmlModule::qmlType::identifier that is not defined anywhere.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp" role="bad">Unrecognizable QML module/component qualifier for real QtQuick::DragHandler::DragAxis::minimum
</db:programlisting>
<db:para><db:link xlink:href="qml-qtquick-draghandler.xml">DragHandler</db:link> doesn't have a property called DragAxis.</db:para>
</db:section>
<db:section xml:id="missing-property-type-for-name">
<db:title>Missing property type for &lt;name&gt;</db:title>
<db:para>A declaration of a <db:link xlink:href="13-qdoc-commands-topics.xml#qmlproperty-command">\qmlproperty</db:link> is missing its property type.</db:para>
<db:para>The \qmlproperty command expects to be followed by the property type, then the fully-qualified name of the property (i.e. the name ::-joined after the name of the class it belongs to).</db:para>
<db:para>Incorrect:</db:para>
<db:programlisting language="cpp" role="bad">\qmlproperty MyWidget::count
</db:programlisting>
<db:para>Correct:</db:para>
<db:programlisting language="cpp" role="bad">\qmlproperty int MyWidget::count
</db:programlisting>
</db:section>
<db:section xml:id="qml-property-documented-multiple-times-identifier">
<db:title>QML property documented multiple times: &lt;identifier&gt;</db:title>
<db:para>QDoc uses this warning when it finds two QDoc comments that document the same QML property, either by appearing just before its definition, or using the <db:link xlink:href="13-qdoc-commands-topics.xml#qmlproperty-command">\qmlproperty</db:link> command.</db:para>
</db:section>
<db:section xml:id="command-command-not-allowed-with-qml-property-commands">
<db:title>Command &lt;command&gt; not allowed with QML property commands</db:title>
<db:para>Example:</db:para>
<db:programlisting language="cpp" role="bad">\qmlproperty real QtQuick.Controls::RangeSlider::first.value
\qmlproperty real QtQuick.Controls::RangeSlider::first.position
\qmlproperty real QtQuick.Controls::RangeSlider::first.visualPosition
\qmlsignal void QtQuick.Controls::RangeSlider::first.moved()
\qmlsignal void QtQuick.Controls::RangeSlider::second.moved()
</db:programlisting>
<db:para>Error message:</db:para>
<db:programlisting language="cpp" role="bad">Command '\\qmlsignal' not allowed with QML property commands
</db:programlisting>
<db:para>This warning is specific to property group documentation. QDoc allows multiple qmlproperty or qmlattachedproperty topic commands in a single documentation comment to document a property group where the last element in the path is &lt;group&gt;.&lt;property&gt;. Any other topic commands triggers this warning.</db:para>
</db:section>
<db:section xml:id="cannot-find-base-function-for-method-in-class">
<db:title>Cannot find base function for &lt;method&gt; in &lt;class&gt;</db:title>
<db:para>QDoc produces this warning if \reimp is used to document a method, as an override of a virtual method, when no base class has a virtual method with the given name and signature. This may happen because the method it was written to override has changed its signature, or is no longer virtual.</db:para>
</db:section>
<db:section xml:id="illegal-reimp-no-documented-virtual-function-for-command">
<db:title>Illegal \reimp; no documented virtual function for &lt;command&gt;</db:title>
<db:para>Qdoc tries to create a link to the function that this one reimplements, but it could not find the link target, likely because that function is not documented. This can also arise if no base class has a virtual method with this name and signature; which might arise due to a renaming, a change in signature or the base no longer declaring it virtual.</db:para>
</db:section>
<db:section xml:id="class-tries-to-inherit-itself">
<db:title>&lt;class&gt; tries to inherit itself</db:title>
<db:para>The <db:link xlink:href="18-qdoc-commands-relating.xml#inherits-command">\inherits</db:link> command is used to document that a QMl type inherits some other QML type. This warning is issued if that other QML type is the same as the QML type documented.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp" role="bad">\qmltype Foo
\inherits Foo
</db:programlisting>
</db:section>
<db:section xml:id="instantiates-is-only-allowed-in-qmltype">
<db:title>\instantiates is only allowed in \qmltype</db:title>
<db:para>The <db:link xlink:href="13-qdoc-commands-topics.xml#instantiates-command">\instantiates</db:link> command can only be used in a QDoc comment that documents a QML type.</db:para>
</db:section>
<db:section xml:id="all-properties-in-a-group-must-belong-to-the-same-type-name">
<db:title>All properties in a group must belong to the same type: &lt;name&gt;</db:title>
<db:para>When documenting QML property groups, all properties listed in the comment block must belong to the same QML type.</db:para>
</db:section>
<db:section xml:id="cannot-find-project-file-for-example-name">
<db:title>Cannot find project file for example &lt;name&gt;</db:title>
<db:para>In the example's source directory, QDoc expects to find a project file named CMakeLists.txt, or a file with a .pro, .qmlproject, or .pyproject extension where the base name matches that of the example directory. For example, examples/mymodule/helloworld/helloworld.pro.</db:para>
</db:section>
<db:section xml:id="command-name-alias-cannot-stand-for-both-first-and-later">
<db:title>Command name &lt;alias&gt; cannot stand for both &lt;first&gt; and &lt;later&gt;</db:title>
<db:para>QDoc issues this warning when one name is <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#alias-variable">aliased</db:link> to more than one command when reading the configuration.</db:para>
</db:section>
<db:section xml:id="cannot-open-file-to-quote-from-filename">
<db:title>Cannot open file to quote from: &lt;filename&gt;</db:title>
<db:para>The search path for &lt;filename&gt; is defined by the following variables in the .qdocconf file: sources, sourcedirs, and exampledirs.</db:para>
<db:para>QDoc failed to find a file named in a command (such as <db:link xlink:href="07-0-qdoc-commands-includingexternalcode.xml#quotefromfile-command">\quotefromfile</db:link>, <db:link xlink:href="07-0-qdoc-commands-includingexternalcode.xml#snippet-command">\snippet</db:link>, <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#include-command">\include</db:link>) that tells it to retrieve content from the named file. It searches each directory named in the search path. If there is no file with this name in any of those directories, or the file is found but not readable, QDoc issues this warning. Check that the combination of search path and &lt;filename&gt; is correctly spelled, and that you have read permissions for the file.</db:para>
<db:note>
<db:para>&lt;filename&gt; may include a directory name prefix; the whole &lt;filename&gt; is appended to each directory in the search path.</db:para>
</db:note>
</db:section>
<db:section xml:id="missing-format-name-after-raw">
<db:title>Missing format name after \raw</db:title>
<db:para>The <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#raw-command">\raw</db:link> command and the corresponding <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#raw-command">\endraw</db:link> command delimit a block of raw mark-up language code. The \raw command must be followed by the format name. For now, this can only be HTML.</db:para>
</db:section>
<db:section xml:id="macro-cannot-have-both-format-specific-and-qdoc-syntax-definitions">
<db:title>Macro cannot have both format-specific and qdoc-syntax definitions</db:title>
<db:para>A <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#macro-variable">\macro</db:link> that specifies an output format cannot also have a generic definition.</db:para>
<db:para>An example of a configuration that triggers this warning:</db:para>
<db:programlisting language="cpp" role="bad">macro.gui = \b
macro.gui.HTML = &quot;&amp;lt;b&amp;gt;\1&amp;lt;/b&amp;gt;&quot;
</db:programlisting>
</db:section>
<db:section xml:id="unknown-command-name">
<db:title>Unknown command &lt;name&gt;</db:title>
<db:para>When a QDoc comment uses a backslash followed by a token that is not a QDoc built-in command and has not been defined as a custom command using <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#alias-variable">\alias</db:link> or <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#macro-variable">macro</db:link>, QDoc produces this warning. Check the spelling of the command name and look to see if your QDoc configuration has neglected to include whatever would have defined it, if it is a custom command.</db:para>
<db:para>This may also be produced due to code being quoted in the QDoc comment, for example the author may have referred to the C string termination character '\0' or one of the other C string escape sequences such as '\n' without escaping the backslash. Escape the backslash as \ to include a literal backslash in the documentation, or enclose the code fragment in \c{...}, which suppresses interpretation of backslashes as introducing QDoc commands.</db:para>
</db:section>
<db:section xml:id="duplicate-target-name-target">
<db:title>Duplicate target name &lt;target&gt;</db:title>
<db:para>This means that there are two <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#target-command">\target</db:link> commands with the same parameter. They should be unique. This warning is followed by the warning &quot;The previous occurrence is here&quot;.</db:para>
</db:section>
<db:section xml:id="cannot-find-qdoc-include-file-filename">
<db:title>Cannot find qdoc include file &lt;filename&gt;</db:title>
<db:para>QDoc failed to find an include file named in a command. QDoc searches each directory named in the search path. If there is no file with this name in any of those directories, or the file found in that search is not readable, QDoc issues this warning. Check that the combination of search path and &lt;filename&gt; is correctly spelled, and that you have read permissions for the file.</db:para>
<db:note>
<db:para>&lt;filename&gt; may include a directory name prefix; the whole &lt;filename&gt; is appended to each directory in the search path.</db:para>
</db:note>
</db:section>
<db:section xml:id="cannot-find-tag-in-file">
<db:title>Cannot find &lt;tag&gt; in &lt;file&gt;</db:title>
<db:para>This means QDoc cannot find the identifier &lt;id&gt; in the <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#include-command">\include</db:link> &lt;file&gt; or {snippet-command}{\snippet} &lt;file&gt;.</db:para>
</db:section>
<db:section xml:id="empty-qdoc-snippet-tag-in-file">
<db:title>Empty qdoc snippet &lt;tag&gt; in &lt;file&gt;</db:title>
<db:para>The snippet &lt;tag&gt; was found in the <db:link xlink:href="07-0-qdoc-commands-includingexternalcode.xml#snippet-command">\snippet</db:link> &lt;file&gt;, but it is empty.</db:para>
</db:section>
<db:section xml:id="cannot-nest-command-commands">
<db:title>Cannot nest &lt;command&gt; commands</db:title>
<db:para>This warning concerns formatting commands: bold, italic, index, link, span, subscript, superscript, teletype, uicontrol, underline. A formatting command cannot be used within the text it applies to. An example of this:</db:para>
<db:programlisting language="cpp" role="bad">There is \b{no \b{super-}bold}.
\encode

\section1 Can't use &amp;lt;inner&amp;gt; in &amp;lt;outer&amp;gt;

This warning is issued for commands that cannot be nested.

Example:
\badcode
    \list
        \li \table
            \row \li Hello \li Hi
            \endtable
    \endlist
</db:programlisting>
<db:para>Results in the QDoc warning &quot;Can't use '\table' in '\list'&quot;.</db:para>
</db:section>
<db:section xml:id="missing-outer-before-inner">
<db:title>Missing &lt;outer&gt; before &lt;inner&gt;</db:title>
<db:para>Some examples:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#li-command">\li</db:link> command can only be used inside a <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#list-command">\list</db:link> or a <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#row-command">\row</db:link> of a <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#table-command">\table</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#row-command">\row</db:link> and <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#header-command">\header</db:link> commands can only be used within a <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#table-command">\table</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="unexpected-end-command">
<db:title>Unexpected &lt;end_command&gt;</db:title>
<db:para>This warning is issued if, for example, you have an <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#list-command">\endlist</db:link> without a preceding <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#list-command">\list</db:link>. It applies to all commands that come in pairs (e.g. startFoo/endFoo).</db:para>
</db:section>
<db:section xml:id="missing-comma-in-sa">
<db:title>Missing comma in \sa</db:title>
<db:para>The titles listed for a <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#sa-command">\sa</db:link> command should be separated from one another with commas.</db:para>
</db:section>
<db:section xml:id="macro-command-does-not-have-a-default-definition">
<db:title>Macro &lt;command&gt; does not have a default definition</db:title>
<db:para>QDoc is attempting to expand a macro, and expects that macro to have a default definition. Some macros may only have format-specific definitions.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp" role="bad">macro.pi.HTML = &quot;&amp;amp;pi;&quot;    # encodes the pi symbol for HTML output format
</db:programlisting>
<db:para>There are however instances where macro expansion requires a format-independent macro. For example, you can have macros in section titles, but they must have default definitions.</db:para>
</db:section>
<db:section xml:id="macro-macro-invoked-with-too-few-arguments-expected-many-got-few">
<db:title>Macro &lt;macro&gt; invoked with too few arguments (expected &lt;many&gt;, got &lt;few&gt;)</db:title>
<db:para>The given macro needs more parameters than it was given. See the definition of the macro in the configuration for further details.</db:para>
</db:section>
<db:section xml:id="unbalanced-parentheses-in-text">
<db:title>Unbalanced parentheses in &lt;text&gt;</db:title>
<db:para>Points to a '(' without a corresponding ')', or vice versa.</db:para>
</db:section>
<db:section xml:id="no-documentation-for-name">
<db:title>No documentation for &lt;name&gt;</db:title>
<db:para>Example:</db:para>
<db:programlisting language="cpp" role="bad">Warning &quot;No documentation for QNativeInterface.&quot;
</db:programlisting>
<db:para>QDoc detects the declaration of namespace <db:link xlink:href="qnativeinterface-sub-qtcore.xml">QNativeInterface</db:link> in a header file, but does not find a QDoc comment where that namespace has been documented.</db:para>
</db:section>
<db:section xml:id="no-such-enum-item-name-in-class">
<db:title>No such enum item &lt;name&gt; in &lt;class&gt;</db:title>
<db:para>Example:</db:para>
<db:programlisting language="cpp" role="bad">Cannot find 'QSGMaterialRhiShader::RenderState::DirtyState' specified
with \enum in any header file.
</db:programlisting>
<db:para>QDoc issues this warning when it finds a <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#value-command">\value</db:link> directive in an <db:link xlink:href="13-qdoc-commands-topics.xml#enum-command">\enum</db:link> comment that names a value not found in the header file that declared the enumerated type documented.</db:para>
</db:section>
<db:section xml:id="undocumented-enum-item-enum-in-enum-list">
<db:title>Undocumented enum item &lt;enum&gt; in &lt;enum list&gt;</db:title>
<db:para>&lt;enum list&gt;'s <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#value-command">\value</db:link> or <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#omitvalue-command">\omitvalue</db:link> entries did not include one for <db:link xlink:href="13-qdoc-commands-topics.xml#enum-command">&lt;enum&gt;</db:link>, which is named in the declaration of &lt;enum list&gt; in the header file.</db:para>
</db:section>
<db:section xml:id="failed-to-find-index-filename">
<db:title>Failed to find index: &lt;filename&gt;</db:title>
<db:para>Example:</db:para>
<db:programlisting language="cpp" role="bad">Failed to find index: path/to/QtCrator/appmanplugin/manual.index
</db:programlisting>
<db:para>In this case, it clearly means the indexes variable contains a typo in the path of the index file.</db:para>
<db:para>Incorrect:</db:para>
<db:programlisting language="cpp" role="bad">indexes += path/to/QtCrator/appmanplugin/manual.index
</db:programlisting>
<db:para>Correct:</db:para>
<db:programlisting language="cpp" role="bad">indexes += path/to/QtCreator/appmanplugin/manual.index
</db:programlisting>
</db:section>
<db:section xml:id="generatelist-examplefiles-can-only-be-used-with-example-topic-command">
<db:title>\generatelist examplefiles can only be used with \example topic command</db:title>
<db:para>The command &quot;\generatelist examplefiles&quot; can only be used in example documentation (i.e., when the topic command is \example).</db:para>
</db:section>
<db:section xml:id="generatelist-group-is-empty">
<db:title>\generatelist &lt;group&gt; is empty</db:title>
<db:para>Below a short overview of all possible arguments for <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#generatelist-command">\generatelist</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>\generatelist annotatedexamples</db:para>
</db:listitem>
<db:listitem>
<db:para>\generatelist annotatedattributions</db:para>
</db:listitem>
<db:listitem>
<db:para>\generatelist classes &lt;prefix&gt;</db:para>
</db:listitem>
<db:listitem>
<db:para>\generatelist classesbymodule &lt;module name&gt;</db:para>
</db:listitem>
<db:listitem>
<db:para>\generatelist qmltypesbymodule &lt;module name&gt;</db:para>
</db:listitem>
<db:listitem>
<db:para>\generatelist examplesfiles &lt;regular expression&gt;</db:para>
</db:listitem>
<db:listitem>
<db:para>\generatelist exampleimages &lt;regular expression&gt;</db:para>
</db:listitem>
<db:listitem>
<db:para>\generatelist functionindex</db:para>
</db:listitem>
<db:listitem>
<db:para>\generatelist legalese</db:para>
</db:listitem>
<db:listitem>
<db:para>\generatelist overviews</db:para>
</db:listitem>
<db:listitem>
<db:para>\generatelist attributions</db:para>
</db:listitem>
<db:listitem>
<db:para>\generatelist related</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>QDoc issues this warning if you specify \generatelist &lt;group&gt; and the group does not contain any items, or if you specify \generatelist &lt;group&gt; &lt;pattern&gt; and no item in the group matches the pattern.</db:para>
</db:section>
<db:section xml:id="generatelist-group-no-such-group">
<db:title>\generatelist &lt;group&gt; no such group</db:title>
<db:para>This warning issues if the argument to <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#generatelist-command">\generatelist</db:link> is a non-existing group.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">\generatelist draganddrop
</db:programlisting>
<db:para>This statement generates a list of classes or QML types in the draganddrop group. Classes or QML types are added to the draganddrop group by the \l {ingroup-command}{\ingroup} draganddrop command in their <db:link xlink:href="13-qdoc-commands-topics.xml#class-command">\class</db:link> or <db:link xlink:href="13-qdoc-commands-topics.xml#qmltype-command">\qmltype</db:link> comment.</db:para>
<db:para>QDoc issues this warning message if no entity has this \ingroup draganddrop statement.</db:para>
</db:section>
<db:section xml:id="missing-image-imagefile">
<db:title>Missing image: &lt;imagefile&gt;</db:title>
<db:para>The search path to the image is wrong, or the image file does not exist.</db:para>
</db:section>
<db:section xml:id="can-t-link-to-target">
<db:title>Can't link to &lt;target&gt;</db:title>
<db:para>This can have a variety of causes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The link target has not been defined with a QDoc topic command, e.g. {title-command}{\title} &lt;target&gt;.</db:para>
</db:listitem>
<db:listitem>
<db:para>The &lt;target&gt; contains a typo.</db:para>
</db:listitem>
<db:listitem>
<db:para>The document that contains that link target did not get compiled.</db:para>
</db:listitem>
<db:listitem>
<db:para>The document that contains that link target is in a module that is not in the compilation path.</db:para>
</db:listitem>
<db:listitem>
<db:para>The link target is in another module, and a dependency to that module was not set in the configuration or QDoc failed to locate the index file for the dependency.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="could-not-resolve-qml-import-statement-for-type-name">
<db:title>Could not resolve QML import statement for type &lt;name&gt;</db:title>
<db:para>QDoc issues this warning if you document a QML type, but omit the <db:link xlink:href="13-qdoc-commands-topics.xml#inqmlmodule-command">\inqmlmodule</db:link> command. Example:</db:para>
<db:programlisting language="cpp" role="bad">Could not resolve QML import statement for type 'ItemSelectionModel'
\encode

Incorrect:
  \badcode
  \qmltype ItemSelectionModel
  \instantiates QItemSelectionModel
  \since 5.5
  \ingroup qtquick-models
  </db:programlisting>
<db:para>Correct:</db:para>
<db:programlisting language="cpp" role="bad">\qmltype ItemSelectionModel
\instantiates QItemSelectionModel
\inqmlmodule QtQml.Models
\since 5.5
\ingroup qtquick-models
</db:programlisting>
</db:section>
<db:section xml:id="brief-statement-does-not-end-with-a-full-stop">
<db:title>\brief statement does not end with a full stop</db:title>
<db:para>The argument to the \brief command is a sentence, summarizing the topic documented, so should end in a full stop. It should also be brief.</db:para>
</db:section>
<db:section xml:id="qtdeclarative-not-installed-cannot-parse-qml">
<db:title>QtDeclarative not installed; cannot parse QML</db:title>
<db:para>QDoc issues this warning if it has been compiled without support for QML parsing. This should not happen unless you have a custom build of QDoc.</db:para>
</db:section>
<db:section xml:id="invalid-regular-expression-regex">
<db:title>Invalid regular expression &lt;regex&gt;</db:title>
<db:para>Some QDoc commands take regular expressions as parameters. QDoc gives this warning when the text given as such a parameter is not a valid regular expression, usually due to it containing characters with special meanings in regular expressions, that should have been escaped.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp" role="bad">notifications.qdoc:56: (qdoc) warning: Invalid regular expression '^})$'
</db:programlisting>
<db:programlisting language="cpp" role="bad">\quotefromfile webenginewidgets/notifications/data/index.html
\skipuntil resetPermission
</db:programlisting>
<db:para>Invalid regular expression:</db:para>
<db:programlisting language="cpp" role="bad">\printuntil /^})$/
</db:programlisting>
<db:para>Valid regular expression:</db:para>
<db:programlisting language="cpp" role="bad">\printuntil /^\}\)$/
</db:programlisting>
<db:para>The <db:link xlink:href="07-0-qdoc-commands-includingexternalcode.xml#printuntil-command">\printuntil</db:link> command prints until it meets a line consisting of only a right curly brace followed by a right parenthesis. In this case, the curly brace and the parenthesis need to be escaped because they have special meanings in regular expressions.</db:para>
</db:section>
<db:section xml:id="multiple-index-files-found-for-dependency-indexfile-depend">
<db:title>Multiple index files found for dependency &lt;indexfile&gt;:&lt;depend&gt;</db:title>
<db:para>Using &lt;indexfile&gt; as index file for dependency &lt;depend&gt;</db:para>
<db:para>Multiple -indexdir paths were passed to QDoc as command line options, and more than one contained an .index file that matches a dependency. QDoc picks the one with the latest timestamp automatically.</db:para>
<db:para>Typically, this warning indicates that there are build artifacts left from a previous documentation build.</db:para>
</db:section>
<db:section xml:id="cannot-locate-index-file-for-dependency-depend">
<db:title>Cannot locate index file for dependency &lt;depend&gt;</db:title>
<db:para>Example:</db:para>
<db:programlisting language="cpp" role="bad">&quot;QMake&quot; Cannot locate index file for dependency &quot;activeqt&quot;
</db:programlisting>
<db:para>The documentation project QMake could not locate activeqt.index in any of the specified index directories. In this case, the specified index directories are specified in qmake.qdocconf.</db:para>
</db:section>
<db:section xml:id="dependent-modules-specified-but-no-index-directories-were-set">
<db:title>Dependent modules specified, but no index directories were set.</db:title>
<db:para>QDoc expected to see one or more -indexdir arguments on the command line. Without them, QDoc cannot locate the index files of any dependencies defined with the 'depends' configuration variable.</db:para>
</db:section>
<db:section xml:id="overrides-a-previous-doc">
<db:title>Overrides a previous doc</db:title>
<db:para>QDoc issues this warning when it finds two comments that appear to describe the same entity. The location of the previously seen comment is provided in warning details.</db:para>
</db:section>
<db:section xml:id="unrecognized-list-style-name">
<db:title>Unrecognized list style &lt;name&gt;</db:title>
<db:para>\list can take an optional argument: a single number or character that modifies the list style. Refer to the {list-command}{\list} documentation for more details. If you use an argument that is not recognized, QDoc issues this warning.</db:para>
</db:section>
<db:section xml:id="unable-to-parse-qml-snippet-code-at-line-y-column-x">
<db:title>Unable to parse QML snippet: &lt;code&gt; at line &lt;y&gt;, column &lt;x&gt;</db:title>
<db:para>QDoc comments can contain QML code. This code can be found in a snippet, or in the QDoc comments delimited by <db:link xlink:href="06-qdoc-commands-includecodeinline.xml#qml-command">\qml</db:link> and {endqml-command}{\endqml}.</db:para>
<db:para>Example:</db:para>
<db:para>If there is a syntax error in the QML code, QDoc issues the warning</db:para>
<db:programlisting language="cpp" role="bad">Unable to parse QML snippet: Syntax error at line 97, column 42
</db:programlisting>
<db:para>Snippets can also contain QML and also there the code is checked. If there is for example a missing curly brace in the code, QDoc issues the warning</db:para>
<db:programlisting language="cpp" role="bad">Unable to parse QML snippet: Expected token '{' at line 63, column 52
</db:programlisting>
<db:para>QDoc often fails to parse incomplete QML snippets; in these cases, it's often OK to replace the \qml ... \endqml commands with \code ... \endcode to suppress this warning.</db:para>
</db:section>
<db:section xml:id="command-command-failed-at-end-of-file-filename">
<db:title>Command &lt;command&gt; failed at end of file &lt;filename&gt;</db:title>
<db:para>Example:</db:para>
<db:programlisting language="cpp" role="bad">Command &quot;\snippet (//! [2]) failed at end of file qmlbars/qml/qmlbars/main.qml&quot;.
</db:programlisting>
<db:para>In this case the warning means that the <db:link xlink:href="07-0-qdoc-commands-includingexternalcode.xml#snippet-command">\snippet</db:link> command did not find a second label &quot;//! [2]&quot; to mark the end of the snippet. It could also mean that it didn't find any occurrence of that snippet tag in this snippet file.</db:para>
<db:para>Another example:</db:para>
<db:programlisting language="cpp" role="bad">Command '\skipto' failed at end of file 'styling/CMakeLists.txt&quot;.
</db:programlisting>
<db:para>The <db:link xlink:href="07-0-qdoc-commands-includingexternalcode.xml#skipto-command">\skipto</db:link> + &lt;pattern&gt; moves the cursor to the next line containing that pattern. If \skipto doesn't find it, QDoc issues this warning.</db:para>
</db:section>
<db:section xml:id="failed-to-open-file-for-writing">
<db:title>Failed to open &lt;file&gt; for writing</db:title>
<db:para>This warning clearly means it cannot open a file for writing, probably because of a wrong path, or permission to write in a certain directory.</db:para>
</db:section>
<db:section xml:id="this-page-title-exists-in-more-than-one-file">
<db:title>This page title exists in more than one file</db:title>
<db:para>The <db:link xlink:href="20-qdoc-commands-namingthings.xml#title-command">\title</db:link> command sets the title for a page.</db:para>
<db:programlisting language="cpp">\page activeqt-server.html
\title Building ActiveX servers in Qt
</db:programlisting>
<db:para>QDoc issues this warning if a certain title is used in more than one page.</db:para>
</db:section>
<db:section xml:id="the-content-is-too-long">
<db:title>The content is too long</db:title>
<db:para>QDoc uses a fixed-size buffer when tokenizing source files. If any single token in the file has more characters than the maximum limit, QDoc issues this warning.</db:para>
<db:para>While QDoc continues parsing the file, only the part of the token that fits into the buffer is considered, meaning that the output might be mangled.</db:para>
<db:para>To resolve this warning, the relevant content must be reduced in size, either by splitting it, if possible, or by removing some of its parts.</db:para>
<db:para>The maximum amount of characters for a single token is shown alongside the warning, for example:</db:para>
<db:programlisting language="cpp" role="bad">file.qdoc:71154: (qdoc) warning: The content is too long.

[The maximum amount of characters for this content is 524288.
Consider splitting it or reducing its size.]
</db:programlisting>
<db:note>
<db:para>Since content that is too long is not parsed in full, QDoc may issue warnings that are false positives. Resolve all warnings of this type before fixing other warnings.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdoc-warnings.xml#cannot-find-qdoc-include-file-filename">Cannot find qdoc include file &lt;filename&gt;</db:link></db:member>
<db:member><db:link xlink:href="qdoc-warnings.xml#cannot-open-file-to-quote-from-filename">Cannot open file to quote from: &lt;filename&gt;</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
