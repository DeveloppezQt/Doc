<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSqlDriver Class</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link> class is an abstract base class for accessing specific SQL databases.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSqlDriver</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Sql)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Sql)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += sql</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSqlDriver is part of <db:simplelist><db:member><db:link xlink:href="database.xml">Database Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class should not be used directly. Use <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> instead.</db:para>
<db:para>If you want to create your own SQL drivers, you can subclass this class and reimplement its pure virtual functions and those virtual functions that you need. See <db:link xlink:href="sql-driver.xml#how-to-write-your-own-database-driver">How to Write Your Own Database Driver</db:link> for more information.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link></db:member>
<db:member><db:link xlink:href="qsqlresult.xml">QSqlResult</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DriverFeature-enum">
<db:title>enum QSqlDriver::DriverFeature</db:title>
<db:para>This enum contains a list of features a driver might support. Use <db:link xlink:href="qsqldriver.xml#hasFeature">hasFeature</db:link>() to query whether a feature is supported or not. Some features depend on the database server so they can only properly determined after the database connection is successfully opened with <db:link xlink:href="qsqldatabase.xml#open">QSqlDatabase::open</db:link>().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::Transactions</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Whether the driver supports SQL transactions.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::QuerySize</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Whether the database is capable of reporting the size of a query. Note that some databases do not support returning the size (i.e. number of rows returned) of a query, in which case <db:link xlink:href="qsqlquery.xml#size">QSqlQuery::size</db:link>() will return -1.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::BLOB</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Whether the driver supports Binary Large Object fields.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::Unicode</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Whether the driver supports Unicode strings if the database server does.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::PreparedQueries</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Whether the driver supports prepared query execution.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::NamedPlaceholders</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Whether the driver supports the use of named placeholders.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::PositionalPlaceholders</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Whether the driver supports the use of positional placeholders.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::LastInsertId</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Whether the driver supports returning the Id of the last touched row.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::BatchOperations</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Whether the driver supports batched operations, see <db:link xlink:href="qsqlquery.xml#execBatch">QSqlQuery::execBatch</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::SimpleLocking</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Whether the driver disallows a write lock on a table while other queries have a read lock on it.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::LowPrecisionNumbers</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>Whether the driver allows fetching numerical values with low precision.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::EventNotifications</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>Whether the driver supports database event notifications.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::FinishQuery</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>Whether the driver can do any low-level resource cleanup when <db:link xlink:href="qsqlquery.xml#finish">QSqlQuery::finish</db:link>() is called.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::MultipleResultSets</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>Whether the driver can access multiple result sets returned from batched statements or stored procedures.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::CancelQuery</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td>
<db:para>Whether the driver allows cancelling a running query.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>More information about supported features can be found in the <db:link xlink:href="sql-driver.xml">Qt SQL driver</db:link> documentation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#hasFeature">hasFeature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="IdentifierType-enum">
<db:title>enum QSqlDriver::IdentifierType</db:title>
<db:para>This enum contains a list of SQL identifier types.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::FieldName</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A SQL field name</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::TableName</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A SQL table name</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="NotificationSource-enum">
<db:title>enum QSqlDriver::NotificationSource</db:title>
<db:para>This enum contains a list of SQL notification sources.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::UnknownSource</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The notification source is unknown</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::SelfSource</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The notification source is this connection</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::OtherSource</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The notification source is another connection</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="StatementType-enum">
<db:title>enum QSqlDriver::StatementType</db:title>
<db:para>This enum contains a list of SQL statement (or clause) types the driver can create.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::WhereStatement</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>An SQL <db:code>WHERE</db:code> statement (e.g., <db:code>WHERE f = 5</db:code>).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::SelectStatement</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An SQL <db:code>SELECT</db:code> statement (e.g., <db:code>SELECT f FROM t</db:code>).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::UpdateStatement</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>An SQL <db:code>UPDATE</db:code> statement (e.g., <db:code>UPDATE TABLE t set f = 1</db:code>).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::InsertStatement</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>An SQL <db:code>INSERT</db:code> statement (e.g., <db:code>INSERT INTO t (f) values (1)</db:code>).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:emphasis>::DeleteStatement</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>An SQL <db:code>DELETE</db:code> statement (e.g., <db:code>DELETE FROM t</db:code>).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#sqlStatement">sqlStatement</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="numericalPrecisionPolicy-prop">
<db:title>[since 6.8] numericalPrecisionPolicy : QSql::NumericalPrecisionPolicy</db:title>
<db:para>This property holds the precision policy for the database connection.</db:para>
<db:note>
<db:para>Setting the precision policy doesn't affect any currently active queries.</db:para>
</db:note>
<db:para>This property was introduced in Qt 6.8.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsql.xml#NumericalPrecisionPolicy-enum">QSql::NumericalPrecisionPolicy</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml#numericalPrecisionPolicy">numericalPrecisionPolicy</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsqldriver.xml#setNumericalPrecisionPolicy">setNumericalPrecisionPolicy</db:link></db:emphasis>(<db:type><db:link xlink:href="qsql.xml#NumericalPrecisionPolicy-enum">QSql::NumericalPrecisionPolicy</db:link></db:type> <db:emphasis>precisionPolicy</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsql.xml#NumericalPrecisionPolicy-enum">QSql::NumericalPrecisionPolicy</db:link></db:member>
<db:member><db:link xlink:href="qsqlquery.xml#numericalPrecisionPolicy">QSqlQuery::numericalPrecisionPolicy</db:link></db:member>
<db:member><db:link xlink:href="qsqldatabase.xml#numericalPrecisionPolicy">QSqlDatabase::numericalPrecisionPolicy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSqlDriver">
<db:title>[explicit] QSqlDriver::QSqlDriver(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a new driver with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSqlDriver">
<db:title>[virtual noexcept] QSqlDriver::~QSqlDriver()</db:title>
<db:para>Destroys the object and frees any allocated resources.</db:para>
</db:section>
<db:section xml:id="beginTransaction">
<db:title>[virtual] bool QSqlDriver::beginTransaction()</db:title>
<db:para>This function is called to begin a transaction. If successful, return true, otherwise return false. The default implementation does nothing and returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#commitTransaction">commitTransaction</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldriver.xml#rollbackTransaction">rollbackTransaction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="close">
<db:title>[pure virtual] void QSqlDriver::close()</db:title>
<db:para>Derived classes must reimplement this pure virtual function in order to close the database connection. Return true on success, false on failure.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#open">open</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldriver.xml#setOpen">setOpen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="commitTransaction">
<db:title>[virtual] bool QSqlDriver::commitTransaction()</db:title>
<db:para>This function is called to commit a transaction. If successful, return true, otherwise return false. The default implementation does nothing and returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#beginTransaction">beginTransaction</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldriver.xml#rollbackTransaction">rollbackTransaction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connectionName">
<db:title>[since 6.9] QString QSqlDriver::connectionName() const</db:title>
<db:para>Returns the database connection name the driver was created by with <db:link xlink:href="qsqldatabase.xml#addDatabase">QSqlDatabase::addDatabase</db:link>()</db:para>
<db:para>This function was introduced in Qt 6.9.</db:para>
</db:section>
<db:section xml:id="createResult">
<db:title>[pure virtual] QSqlResult *QSqlDriver::createResult() const</db:title>
<db:para>Creates an empty SQL result on the database. Derived classes must reimplement this function and return a <db:link xlink:href="qsqlresult.xml">QSqlResult</db:link> object appropriate for their database to the caller.</db:para>
</db:section>
<db:section xml:id="escapeIdentifier">
<db:title>[virtual] QString QSqlDriver::escapeIdentifier(const QString &amp;<db:emphasis>identifier</db:emphasis>, QSqlDriver::IdentifierType <db:emphasis>type</db:emphasis>) const</db:title>
<db:para>Returns the <db:code role="parameter">identifier</db:code> escaped according to the database rules. <db:code role="parameter">identifier</db:code> can either be a table name or field name, dependent on <db:code role="parameter">type</db:code>.</db:para>
<db:para>The default implementation does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#isIdentifierEscaped">isIdentifierEscaped</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="formatValue">
<db:title>[virtual] QString QSqlDriver::formatValue(const QSqlField &amp;<db:emphasis>field</db:emphasis>, bool <db:emphasis>trimStrings</db:emphasis> = false) const</db:title>
<db:para>Returns a string representation of the <db:code role="parameter">field</db:code> value for the database. This is used, for example, when constructing INSERT and UPDATE statements.</db:para>
<db:para>The default implementation returns the value formatted as a string according to the following rules:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>If <db:code role="parameter">field</db:code> is character data, the value is returned enclosed in single quotation marks, which is appropriate for many SQL databases. Any embedded single-quote characters are escaped (replaced with two single-quote characters). If <db:code role="parameter">trimStrings</db:code> is true (the default is false), all trailing whitespace is trimmed from the field.</db:para>
</db:listitem>
<db:listitem>
<db:para>If <db:code role="parameter">field</db:code> is date/time data, the value is formatted in ISO format and enclosed in single quotation marks. If the date/time data is invalid, &quot;NULL&quot; is returned.</db:para>
</db:listitem>
<db:listitem>
<db:para>If <db:code role="parameter">field</db:code> is <db:link xlink:href="qbytearray.xml">bytearray</db:link> data, and the driver can edit binary fields, the value is formatted as a hexadecimal string.</db:para>
</db:listitem>
<db:listitem>
<db:para>For any other field type, toString() is called on its value and the result of this is returned.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvariant.xml#toString">QVariant::toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="handle">
<db:title>[virtual] QVariant QSqlDriver::handle() const</db:title>
<db:para>Returns the low-level database handle wrapped in a <db:link xlink:href="qvariant.xml">QVariant</db:link> or an invalid variant if there is no handle.</db:para>
<db:warning>
<db:para>Use this with uttermost care and only if you know what you're doing.</db:para>
</db:warning>
<db:warning>
<db:para>The handle returned here can become a stale pointer if the connection is modified (for example, if you close the connection).</db:para>
</db:warning>
<db:warning>
<db:para>The handle can be NULL if the connection is not open yet.</db:para>
</db:warning>
<db:para>The handle returned here is database-dependent, you should query the type name of the variant before accessing it.</db:para>
<db:para>This example retrieves the handle for a connection to sqlite:</db:para>
<db:programlisting language="cpp">QSqlDatabase db = QSqlDatabase::database();
QVariant v = db.driver()-&gt;handle();
if (v.isValid() &amp;&amp; (qstrcmp(v.typeName(), &quot;sqlite3*&quot;) == 0)) {
    // v.data() returns a pointer to the handle
    sqlite3 *handle = *static_cast&lt;sqlite3 **&gt;(v.data());
    if (handle) {
        // ...
    }
}
</db:programlisting>
<db:para>This snippet returns the handle for PostgreSQL or MySQL:</db:para>
<db:programlisting language="cpp">if (qstrcmp(v.typeName(), &quot;PGconn*&quot;) == 0) {
    PGconn *handle = *static_cast&lt;PGconn **&gt;(v.data());
    if (handle) {
        // ...
    }
}

if (qstrcmp(v.typeName(), &quot;MYSQL*&quot;) == 0) {
    MYSQL *handle = *static_cast&lt;MYSQL **&gt;(v.data());
    if (handle) {
        // ...
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#handle">QSqlResult::handle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasFeature">
<db:title>[pure virtual] bool QSqlDriver::hasFeature(QSqlDriver::DriverFeature <db:emphasis>feature</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the driver supports feature <db:code role="parameter">feature</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Note that some databases need to be <db:link xlink:href="qsqldriver.xml#open">open</db:link>() before this can be determined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#DriverFeature-enum">DriverFeature</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isIdentifierEscaped">
<db:title>[virtual] bool QSqlDriver::isIdentifierEscaped(const QString &amp;<db:emphasis>identifier</db:emphasis>, QSqlDriver::IdentifierType <db:emphasis>type</db:emphasis>) const</db:title>
<db:para>Returns whether <db:code role="parameter">identifier</db:code> is escaped according to the database rules. <db:code role="parameter">identifier</db:code> can either be a table name or field name, dependent on <db:code role="parameter">type</db:code>.</db:para>
<db:para>Reimplement this function if you want to provide your own implementation in your <db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link> subclass,</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#stripDelimiters">stripDelimiters</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldriver.xml#escapeIdentifier">escapeIdentifier</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isOpen">
<db:title>[virtual] bool QSqlDriver::isOpen() const</db:title>
<db:para>Returns <db:code>true</db:code> if the database connection is open; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isOpenError">
<db:title>bool QSqlDriver::isOpenError() const</db:title>
<db:para>Returns <db:code>true</db:code> if the there was an error opening the database connection; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="lastError">
<db:title>QSqlError QSqlDriver::lastError() const</db:title>
<db:para>Returns a <db:link xlink:href="qsqlerror.xml">QSqlError</db:link> object which contains information about the last error that occurred on the database.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#setLastError">setLastError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumIdentifierLength">
<db:title>[virtual, since 6.0] int QSqlDriver::maximumIdentifierLength(QSqlDriver::IdentifierType <db:emphasis>type</db:emphasis>) const</db:title>
<db:para>Returns the maximum length for the identifier <db:code role="parameter">type</db:code> according to the database settings. Returns INT_MAX by default if the is no maximum for the database.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="notification">
<db:title>void QSqlDriver::notification(const QString &amp;<db:emphasis>name</db:emphasis>, QSqlDriver::NotificationSource <db:emphasis>source</db:emphasis>, const QVariant &amp;<db:emphasis>payload</db:emphasis>)</db:title>
<db:para>This signal is emitted when the database posts an event notification that the driver subscribes to. <db:code role="parameter">name</db:code> identifies the event notification, <db:code role="parameter">source</db:code> indicates the signal source, <db:code role="parameter">payload</db:code> holds the extra data optionally delivered with the notification.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#subscribeToNotification">subscribeToNotification</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="numericalPrecisionPolicy">
<db:title>QSql::NumericalPrecisionPolicy QSqlDriver::numericalPrecisionPolicy() const</db:title>
<db:para>Returns the numericalPrecisionPolicy.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qsqldriver.xml#numericalPrecisionPolicy-prop">numericalPrecisionPolicy</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#setNumericalPrecisionPolicy">setNumericalPrecisionPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open">
<db:title>[pure virtual] bool QSqlDriver::open(const QString &amp;<db:emphasis>db</db:emphasis>, const QString &amp;<db:emphasis>user</db:emphasis> = QString(), const QString &amp;<db:emphasis>password</db:emphasis> = QString(), const QString &amp;<db:emphasis>host</db:emphasis> = QString(), int <db:emphasis>port</db:emphasis> = -1, const QString &amp;<db:emphasis>options</db:emphasis> = QString())</db:title>
<db:para>Derived classes must reimplement this pure virtual function to open a database connection on database <db:code role="parameter">db</db:code>, using user name <db:code role="parameter">user</db:code>, password <db:code role="parameter">password</db:code>, host <db:code role="parameter">host</db:code>, port <db:code role="parameter">port</db:code> and connection options <db:code role="parameter">options</db:code>.</db:para>
<db:para>The function must return true on success and false on failure.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#setOpen">setOpen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="primaryIndex">
<db:title>[virtual] QSqlIndex QSqlDriver::primaryIndex(const QString &amp;<db:emphasis>tableName</db:emphasis>) const</db:title>
<db:para>Returns the primary index for table <db:code role="parameter">tableName</db:code>. Returns an empty <db:link xlink:href="qsqlindex.xml">QSqlIndex</db:link> if the table doesn't have a primary index. The default implementation returns an empty index.</db:para>
</db:section>
<db:section xml:id="record">
<db:title>[virtual] QSqlRecord QSqlDriver::record(const QString &amp;<db:emphasis>tableName</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qsqlrecord.xml">QSqlRecord</db:link> populated with the names of the fields in table <db:code role="parameter">tableName</db:code>. If no such table exists, an empty record is returned. The default implementation returns an empty record.</db:para>
</db:section>
<db:section xml:id="rollbackTransaction">
<db:title>[virtual] bool QSqlDriver::rollbackTransaction()</db:title>
<db:para>This function is called to rollback a transaction. If successful, return true, otherwise return false. The default implementation does nothing and returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#beginTransaction">beginTransaction</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldriver.xml#commitTransaction">commitTransaction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLastError">
<db:title>[virtual protected] void QSqlDriver::setLastError(const QSqlError &amp;<db:emphasis>error</db:emphasis>)</db:title>
<db:para>This function is used to set the value of the last error, <db:code role="parameter">error</db:code>, that occurred on the database.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#lastError">lastError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNumericalPrecisionPolicy">
<db:title>void QSqlDriver::setNumericalPrecisionPolicy(QSql::NumericalPrecisionPolicy <db:emphasis>precisionPolicy</db:emphasis>)</db:title>
<db:para>Sets <db:link xlink:href="qsqldriver.xml#numericalPrecisionPolicy">numericalPrecisionPolicy</db:link> to <db:code role="parameter">precisionPolicy</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qsqldriver.xml#numericalPrecisionPolicy-prop">numericalPrecisionPolicy</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#numericalPrecisionPolicy">numericalPrecisionPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOpen">
<db:title>[virtual protected] void QSqlDriver::setOpen(bool <db:emphasis>open</db:emphasis>)</db:title>
<db:para>This function sets the open state of the database to <db:code role="parameter">open</db:code>. Derived classes can use this function to report the status of <db:link xlink:href="qsqldriver.xml#open">open</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#open">open</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldriver.xml#setOpenError">setOpenError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOpenError">
<db:title>[virtual protected] void QSqlDriver::setOpenError(bool <db:emphasis>error</db:emphasis>)</db:title>
<db:para>This function sets the open error state of the database to <db:code role="parameter">error</db:code>. Derived classes can use this function to report the status of <db:link xlink:href="qsqldriver.xml#open">open</db:link>(). Note that if <db:code role="parameter">error</db:code> is true the open state of the database is set to closed (i.e., <db:link xlink:href="qsqldriver.xml#isOpen">isOpen</db:link>() returns <db:code>false</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#isOpenError">isOpenError</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldriver.xml#open">open</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldriver.xml#setOpen">setOpen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sqlStatement">
<db:title>[virtual] QString QSqlDriver::sqlStatement(QSqlDriver::StatementType <db:emphasis>type</db:emphasis>, const QString &amp;<db:emphasis>tableName</db:emphasis>, const QSqlRecord &amp;<db:emphasis>rec</db:emphasis>, bool <db:emphasis>preparedStatement</db:emphasis>) const</db:title>
<db:para>Returns a SQL statement of type <db:code role="parameter">type</db:code> for the table <db:code role="parameter">tableName</db:code> with the values from <db:code role="parameter">rec</db:code>. If <db:code role="parameter">preparedStatement</db:code> is true, the string will contain placeholders instead of values.</db:para>
<db:para>The generated flag in each field of <db:code role="parameter">rec</db:code> determines whether the field is included in the generated statement.</db:para>
<db:para>This method can be used to manipulate tables without having to worry about database-dependent SQL dialects. For non-prepared statements, the values will be properly escaped.</db:para>
<db:para>In the WHERE statement, each non-null field of <db:code role="parameter">rec</db:code> specifies a filter condition of equality to the field value, or if prepared, a placeholder. However, prepared or not, a null field specifies the condition IS NULL and never introduces a placeholder. The application must not attempt to bind data for the null field during execution. The field must be set to some non-null value if a placeholder is desired. Furthermore, since non-null fields specify equality conditions and SQL NULL is not equal to anything, even itself, it is generally not useful to bind a null to a placeholder.</db:para>
</db:section>
<db:section xml:id="stripDelimiters">
<db:title>[virtual] QString QSqlDriver::stripDelimiters(const QString &amp;<db:emphasis>identifier</db:emphasis>, QSqlDriver::IdentifierType <db:emphasis>type</db:emphasis>) const</db:title>
<db:para>Returns the <db:code role="parameter">identifier</db:code> with the leading and trailing delimiters removed, <db:code role="parameter">identifier</db:code> can either be a table name or field name, dependent on <db:code role="parameter">type</db:code>. If <db:code role="parameter">identifier</db:code> does not have leading and trailing delimiter characters, <db:code role="parameter">identifier</db:code> is returned without modification.</db:para>
<db:para>Reimplement this function if you want to provide your own implementation in your <db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link> subclass,</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#isIdentifierEscaped">isIdentifierEscaped</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="subscribeToNotification">
<db:title>[virtual] bool QSqlDriver::subscribeToNotification(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>This function is called to subscribe to event notifications from the database. <db:code role="parameter">name</db:code> identifies the event notification.</db:para>
<db:para>If successful, return true, otherwise return false.</db:para>
<db:para>The database must be open when this function is called. When the database is closed by calling <db:link xlink:href="qsqldriver.xml#close">close</db:link>() all subscribed event notifications are automatically unsubscribed. Note that calling <db:link xlink:href="qsqldriver.xml#open">open</db:link>() on an already open database may implicitly cause <db:link xlink:href="qsqldriver.xml#close">close</db:link>() to be called, which will cause the driver to unsubscribe from all event notifications.</db:para>
<db:para>When an event notification identified by <db:code role="parameter">name</db:code> is posted by the database the <db:link xlink:href="qsqldriver.xml#notification">notification</db:link>() signal is emitted.</db:para>
<db:para>Reimplement this function if you want to provide event notification support in your own <db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link> subclass,</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#unsubscribeFromNotification">unsubscribeFromNotification</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldriver.xml#subscribedToNotifications">subscribedToNotifications</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldriver.xml#hasFeature">QSqlDriver::hasFeature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="subscribedToNotifications">
<db:title>[virtual] QStringList QSqlDriver::subscribedToNotifications() const</db:title>
<db:para>Returns a list of the names of the event notifications that are currently subscribed to.</db:para>
<db:para>Reimplement this function if you want to provide event notification support in your own <db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link> subclass,</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#subscribeToNotification">subscribeToNotification</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldriver.xml#unsubscribeFromNotification">unsubscribeFromNotification</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tables">
<db:title>[virtual] QStringList QSqlDriver::tables(QSql::TableType <db:emphasis>tableType</db:emphasis>) const</db:title>
<db:para>Returns a list of the names of the tables in the database. The default implementation returns an empty list.</db:para>
<db:para>The <db:code role="parameter">tableType</db:code> argument describes what types of tables should be returned. Due to binary compatibility, the string contains the value of the enum QSql::TableTypes as text. An empty string should be treated as <db:link xlink:href="qsql.xml#TableType-enum">QSql::Tables</db:link> for backward compatibility.</db:para>
</db:section>
<db:section xml:id="unsubscribeFromNotification">
<db:title>[virtual] bool QSqlDriver::unsubscribeFromNotification(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>This function is called to unsubscribe from event notifications from the database. <db:code role="parameter">name</db:code> identifies the event notification.</db:para>
<db:para>If successful, return true, otherwise return false.</db:para>
<db:para>The database must be open when this function is called. All subscribed event notifications are automatically unsubscribed from when the <db:link xlink:href="qsqldriver.xml#close">close</db:link>() function is called.</db:para>
<db:para>After calling <db:emphasis>this</db:emphasis> function the <db:link xlink:href="qsqldriver.xml#notification">notification</db:link>() signal will no longer be emitted when an event notification identified by <db:code role="parameter">name</db:code> is posted by the database.</db:para>
<db:para>Reimplement this function if you want to provide event notification support in your own <db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link> subclass,</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#subscribeToNotification">subscribeToNotification</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldriver.xml#subscribedToNotifications">subscribedToNotifications</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
