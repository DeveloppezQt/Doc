<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QImageWriter Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> class provides a format independent interface for writing images to files or other devices.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QImageWriter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QImageWriter is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member><db:member>io</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> supports setting format specific options, such as compression level and quality, prior to storing the image. If you do not need such options, you can use <db:link xlink:href="qimage.xml#save">QImage::save</db:link>() or <db:link xlink:href="qpixmap.xml#save">QPixmap::save</db:link>() instead.</db:para>
<db:para>To store an image, you start by constructing a <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> object. Pass either a file name or a device pointer, and the image format to <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link>'s constructor. You can then set several options, such as quality (by calling <db:link xlink:href="qimagewriter.xml#setQuality">setQuality</db:link>()). <db:link xlink:href="qimagewriter.xml#canWrite">canWrite</db:link>() returns <db:code>true</db:code> if <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> can write the image (i.e., the image format is supported and the device is open for writing). Call <db:link xlink:href="qimagewriter.xml#write">write</db:link>() to write the image to the device.</db:para>
<db:para>If any error occurs when writing the image, <db:link xlink:href="qimagewriter.xml#write">write</db:link>() will return false. You can then call <db:link xlink:href="qimagewriter.xml#error">error</db:link>() to find the type of error that occurred, or <db:link xlink:href="qimagewriter.xml#errorString">errorString</db:link>() to get a human readable description of what went wrong.</db:para>
<db:para>Call <db:link xlink:href="qimagewriter.xml#supportedImageFormats">supportedImageFormats</db:link>() for a list of formats that <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> can write. <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> supports all built-in image formats, in addition to any image format plugins that support writing.</db:para>
<db:note>
<db:para><db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> assumes exclusive control over the file or device that is assigned. Any attempts to modify the assigned file or device during the lifetime of the <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> object will yield undefined results. If immediate access to a resource is desired, the use of a scope is the recommended method.</db:para>
</db:note>
<db:para>For example:</db:para>
<db:programlisting language="cpp">QString imagePath(QStringLiteral(&quot;path/image.jpeg&quot;));
QImage image(64, 64, QImage::Format_RGB32);
image.fill(Qt::red);
{
    QImageWriter writer(imagePath);
    writer.write(image);
}

QFile::rename(imagePath,
              QStringLiteral(&quot;path/other_image.jpeg&quot;));
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagereader.xml">QImageReader</db:link></db:member>
<db:member><db:link xlink:href="qimageiohandler.xml">QImageIOHandler</db:link></db:member>
<db:member><db:link xlink:href="qimageioplugin.xml">QImageIOPlugin</db:link></db:member>
<db:member><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ImageWriterError-enum">
<db:title>enum QImageWriter::ImageWriterError</db:title>
<db:enumsynopsis>
<db:enumname>ImageWriterError</db:enumname>
<db:enumitem>
<db:enumidentifier>UnknownError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DeviceError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnsupportedFormatError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InvalidImageError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes errors that can occur when writing images with <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagewriter.xml">QImageWriter</db:link></db:emphasis>::DeviceError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> encountered a device error when writing the image data. Consult your device for more details on what went wrong.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagewriter.xml">QImageWriter</db:link></db:emphasis>::UnsupportedFormatError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Qt does not support the requested image format.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagewriter.xml">QImageWriter</db:link></db:emphasis>::InvalidImageError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>An attempt was made to write an invalid <db:link xlink:href="qimage.xml">QImage</db:link>. An example of an invalid image would be a null <db:link xlink:href="qimage.xml">QImage</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagewriter.xml">QImageWriter</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>An unknown error occurred. If you get this value after calling <db:link xlink:href="qimagewriter.xml#write">write</db:link>(), it is most likely caused by a bug in <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QImageWriter">
<db:title>QImageWriter::QImageWriter()</db:title>
<db:constructorsynopsis>
<db:methodname>QImageWriter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QImageWriter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> object. Before writing, you must call <db:link xlink:href="qimagewriter.xml#setFormat">setFormat</db:link>() to set an image format, then <db:link xlink:href="qimagewriter.xml#setDevice">setDevice</db:link>() or <db:link xlink:href="qimagewriter.xml#setFileName">setFileName</db:link>().</db:para>
</db:section>
<db:section xml:id="QImageWriter-1">
<db:title>[explicit] QImageWriter::QImageWriter(QIODevice *<db:emphasis>device</db:emphasis>, const QByteArray &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QImageWriter</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QImageWriter(QIODevice *device, const QByteArray &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> object using the device <db:code role="parameter">device</db:code> and image format <db:code role="parameter">format</db:code>.</db:para>
</db:section>
<db:section xml:id="QImageWriter-2">
<db:title>[explicit] QImageWriter::QImageWriter(const QString &amp;<db:emphasis>fileName</db:emphasis>, const QByteArray &amp;<db:emphasis>format</db:emphasis> = QByteArray())</db:title>
<db:constructorsynopsis>
<db:methodname>QImageWriter</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>format</db:parameter>
<db:initializer>QByteArray()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QImageWriter(const QString &amp;fileName, const QByteArray &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> objects that will write to a file with the name <db:code role="parameter">fileName</db:code>, using the image format <db:code role="parameter">format</db:code>. If <db:code role="parameter">format</db:code> is not provided, <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> will detect the image format by inspecting the extension of <db:code role="parameter">fileName</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QImageWriter">
<db:title>QImageWriter::~QImageWriter()</db:title>
<db:destructorsynopsis>
<db:methodname>~QImageWriter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QImageWriter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructs the <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> object.</db:para>
</db:section>
<db:section xml:id="canWrite">
<db:title>bool QImageWriter::canWrite() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>canWrite</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool canWrite() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> can write the image; i.e., the image format is supported and the assigned device is open for reading.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#write">write</db:link>()</db:member>
<db:member><db:link xlink:href="qimagewriter.xml#setDevice">setDevice</db:link>()</db:member>
<db:member><db:link xlink:href="qimagewriter.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compression">
<db:title>int QImageWriter::compression() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>compression</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int compression() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the compression of the image.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#setCompression">setCompression</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="device">
<db:title>QIODevice *QImageWriter::device() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QIODevice *</db:type>
<db:methodname>device</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QIODevice * device() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the device currently assigned to <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link>, or <db:code>nullptr</db:code> if no device has been assigned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#setDevice">setDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>QImageWriter::ImageWriterError QImageWriter::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QImageWriter::ImageWriterError</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QImageWriter::ImageWriterError error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of error that last occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#ImageWriterError-enum">ImageWriterError</db:link></db:member>
<db:member><db:link xlink:href="qimagewriter.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QImageWriter::errorString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>errorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString errorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a human readable description of the last error that occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileName">
<db:title>QString QImageWriter::fileName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>fileName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fileName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the currently assigned device is a <db:link xlink:href="qfile.xml">QFile</db:link>, or if <db:link xlink:href="qimagewriter.xml#setFileName">setFileName</db:link>() has been called, this function returns the name of the file <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> writes to. Otherwise (i.e., if no device has been assigned or the device is not a <db:link xlink:href="qfile.xml">QFile</db:link>), an empty <db:link xlink:href="qstring.xml">QString</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#setFileName">setFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qimagewriter.xml#setDevice">setDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="format">
<db:title>QByteArray QImageWriter::format() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>format</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray format() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the format <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> uses for writing images.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="imageFormatsForMimeType">
<db:title>[static, since 5.12] QList&lt;QByteArray&gt; QImageWriter::imageFormatsForMimeType(const QByteArray &amp;<db:emphasis>mimeType</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;QByteArray&gt;</db:type>
<db:methodname>imageFormatsForMimeType</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>mimeType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QByteArray&gt; imageFormatsForMimeType(const QByteArray &amp;mimeType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of image formats corresponding to <db:code role="parameter">mimeType</db:code>.</db:para>
<db:para>Note that the <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> instance must be created before this function is called.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#supportedImageFormats">supportedImageFormats</db:link>()</db:member>
<db:member><db:link xlink:href="qimagewriter.xml#supportedMimeTypes">supportedMimeTypes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="optimizedWrite">
<db:title>[since 5.5] bool QImageWriter::optimizedWrite() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>optimizedWrite</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool optimizedWrite() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether optimization has been turned on for writing the image.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#setOptimizedWrite">setOptimizedWrite</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="progressiveScanWrite">
<db:title>[since 5.5] bool QImageWriter::progressiveScanWrite() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>progressiveScanWrite</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool progressiveScanWrite() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the image should be written as a progressive image.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#setProgressiveScanWrite">setProgressiveScanWrite</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="quality">
<db:title>int QImageWriter::quality() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>quality</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int quality() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the quality setting of the image format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#setQuality">setQuality</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCompression">
<db:title>void QImageWriter::setCompression(int <db:emphasis>compression</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCompression</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>compression</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCompression(int compression)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an image format specific function that set the compression of an image. For image formats that do not support setting the compression, this value is ignored.</db:para>
<db:para>The value range of <db:code role="parameter">compression</db:code> depends on the image format. For example, the &quot;tiff&quot; format supports two values, 0(no compression) and 1(LZW-compression).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#compression">compression</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDevice">
<db:title>void QImageWriter::setDevice(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDevice</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDevice(QIODevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link>'s device to <db:code role="parameter">device</db:code>. If a device has already been set, the old device is removed from <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> and is otherwise left unchanged.</db:para>
<db:para>If the device is not already open, <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> will attempt to open the device in <db:link xlink:href="qiodevicebase.xml#OpenModeFlag-enum">QIODevice::WriteOnly</db:link> mode by calling open(). Note that this does not work for certain devices, such as <db:link xlink:href="qprocess.xml">QProcess</db:link>, <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link> and <db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link>, where more logic is required to open the device.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#device">device</db:link>()</db:member>
<db:member><db:link xlink:href="qimagewriter.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFileName">
<db:title>void QImageWriter::setFileName(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFileName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFileName(const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the file name of <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> to <db:code role="parameter">fileName</db:code>. Internally, <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> will create a <db:link xlink:href="qfile.xml">QFile</db:link> and open it in <db:link xlink:href="qiodevicebase.xml#OpenModeFlag-enum">QIODevice::WriteOnly</db:link> mode, and use this file when writing images.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qimagewriter.xml#setDevice">setDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFormat">
<db:title>void QImageWriter::setFormat(const QByteArray &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFormat</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFormat(const QByteArray &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the format <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> will use when writing images, to <db:code role="parameter">format</db:code>. <db:code role="parameter">format</db:code> is a case insensitive text string. Example:</db:para>
<db:programlisting language="cpp">QImageWriter writer;
writer.setFormat(&quot;png&quot;); // same as writer.setFormat(&quot;PNG&quot;);
</db:programlisting>
<db:para>You can call <db:link xlink:href="qimagewriter.xml#supportedImageFormats">supportedImageFormats</db:link>() for the full list of formats <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> supports.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#format">format</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOptimizedWrite">
<db:title>[since 5.5] void QImageWriter::setOptimizedWrite(bool <db:emphasis>optimize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOptimizedWrite</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>optimize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOptimizedWrite(bool optimize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an image format-specific function which sets the <db:code role="parameter">optimize</db:code> flags when writing images. For image formats that do not support setting an <db:code role="parameter">optimize</db:code> flag, this value is ignored.</db:para>
<db:para>The default is false.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#optimizedWrite">optimizedWrite</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProgressiveScanWrite">
<db:title>[since 5.5] void QImageWriter::setProgressiveScanWrite(bool <db:emphasis>progressive</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setProgressiveScanWrite</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>progressive</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setProgressiveScanWrite(bool progressive)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an image format-specific function which turns on <db:code role="parameter">progressive</db:code> scanning when writing images. For image formats that do not support setting a <db:code role="parameter">progressive</db:code> scan flag, this value is ignored.</db:para>
<db:para>The default is false.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#progressiveScanWrite">progressiveScanWrite</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setQuality">
<db:title>void QImageWriter::setQuality(int <db:emphasis>quality</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setQuality</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>quality</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setQuality(int quality)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the quality setting of the image format to <db:code role="parameter">quality</db:code>.</db:para>
<db:para>Some image formats, in particular lossy ones, entail a tradeoff between a) visual quality of the resulting image, and b) encoding execution time and compression level. This function sets the level of that tradeoff for image formats that support it. For other formats, this value is ignored.</db:para>
<db:para>The value range of <db:code role="parameter">quality</db:code> depends on the image format. For example, the &quot;jpeg&quot; format supports a quality range from 0 (low visual quality, high compression) to 100 (high visual quality, low compression).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#quality">quality</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSubType">
<db:title>[since 5.4] void QImageWriter::setSubType(const QByteArray &amp;<db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSubType</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSubType(const QByteArray &amp;type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an image format specific function that sets the subtype of the image to <db:code role="parameter">type</db:code>. Subtype can be used by a handler to determine which format it should use while saving the image.</db:para>
<db:para>For example, saving an image in DDS format with A8R8G8R8 subtype:</db:para>
<db:programlisting language="cpp">QImageWriter writer(&quot;some/image.dds&quot;);
if (writer.supportsOption(QImageIOHandler::SubType))
    writer.setSubType(&quot;A8R8G8B8&quot;);
writer.write(image);
</db:programlisting>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#subType">subType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setText">
<db:title>void QImageWriter::setText(const QString &amp;<db:emphasis>key</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setText</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setText(const QString &amp;key, const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the image text associated with the key <db:code role="parameter">key</db:code> to <db:code role="parameter">text</db:code>. This is useful for storing copyright information or other information about the image. Example:</db:para>
<db:programlisting language="cpp">QImage image(&quot;some/image.jpeg&quot;);
QImageWriter writer(&quot;images/outimage.png&quot;, &quot;png&quot;);
writer.setText(&quot;Author&quot;, &quot;John Smith&quot;);
writer.write(image);
</db:programlisting>
<db:para>If you want to store a single block of data (e.g., a comment), you can pass an empty key, or use a generic key like &quot;Description&quot;.</db:para>
<db:para>The key and text will be embedded into the image data after calling <db:link xlink:href="qimagewriter.xml#write">write</db:link>().</db:para>
<db:para>Support for this option is implemented through <db:link xlink:href="qimageiohandler.xml#ImageOption-enum">QImageIOHandler::Description</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimage.xml#setText">QImage::setText</db:link>()</db:member>
<db:member><db:link xlink:href="qimagereader.xml#text">QImageReader::text</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransformation">
<db:title>[since 5.5] void QImageWriter::setTransformation(QImageIOHandler::Transformations <db:emphasis>transform</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTransformation</db:methodname>
<db:methodparam>
<db:type>QImageIOHandler::Transformations</db:type>
<db:parameter>transform</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTransformation(QImageIOHandler::Transformations transform)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the image transformations metadata including orientation to <db:code role="parameter">transform</db:code>.</db:para>
<db:para>If transformation metadata is not supported by the image format, the transform is applied before writing.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#transformation">transformation</db:link>()</db:member>
<db:member><db:link xlink:href="qimagewriter.xml#write">write</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="subType">
<db:title>[since 5.4] QByteArray QImageWriter::subType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>subType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray subType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the subtype of the image.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#setSubType">setSubType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedImageFormats">
<db:title>[static] QList&lt;QByteArray&gt; QImageWriter::supportedImageFormats()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;QByteArray&gt;</db:type>
<db:methodname>supportedImageFormats</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QByteArray&gt; supportedImageFormats()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of image formats supported by <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link>.</db:para>
<db:para>By default, Qt can write the following formats:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Format</db:para>
</db:th>
<db:th>
<db:para>MIME type</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>BMP</db:para>
</db:td>
<db:td>
<db:para>image/bmp</db:para>
</db:td>
<db:td>
<db:para>Windows Bitmap</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>JPG</db:para>
</db:td>
<db:td>
<db:para>image/jpeg</db:para>
</db:td>
<db:td>
<db:para>Joint Photographic Experts Group</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PNG</db:para>
</db:td>
<db:td>
<db:para>image/png</db:para>
</db:td>
<db:td>
<db:para>Portable Network Graphics</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PBM</db:para>
</db:td>
<db:td>
<db:para>image/x-portable-bitmap</db:para>
</db:td>
<db:td>
<db:para>Portable Bitmap</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PGM</db:para>
</db:td>
<db:td>
<db:para>image/x-portable-graymap</db:para>
</db:td>
<db:td>
<db:para>Portable Graymap</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PPM</db:para>
</db:td>
<db:td>
<db:para>image/x-portable-pixmap</db:para>
</db:td>
<db:td>
<db:para>Portable Pixmap</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>XBM</db:para>
</db:td>
<db:td>
<db:para>image/x-xbitmap</db:para>
</db:td>
<db:td>
<db:para>X11 Bitmap</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>XPM</db:para>
</db:td>
<db:td>
<db:para>image/x-xpixmap</db:para>
</db:td>
<db:td>
<db:para>X11 Pixmap</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Reading and writing SVG files is supported through the <db:link xlink:href="qtsvg-index.xml">Qt SVG</db:link> module. The <db:link xlink:href="">Qt Image Formats</db:link> module provides support for additional image formats.</db:para>
<db:para>Note that the <db:link xlink:href="qapplication.xml">QApplication</db:link> instance must be created before this function is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#setFormat">setFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qimagereader.xml#supportedImageFormats">QImageReader::supportedImageFormats</db:link>()</db:member>
<db:member><db:link xlink:href="qimageioplugin.xml">QImageIOPlugin</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedMimeTypes">
<db:title>[static] QList&lt;QByteArray&gt; QImageWriter::supportedMimeTypes()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;QByteArray&gt;</db:type>
<db:methodname>supportedMimeTypes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QByteArray&gt; supportedMimeTypes()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of MIME types supported by <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link>.</db:para>
<db:para>Note that the <db:link xlink:href="qapplication.xml">QApplication</db:link> instance must be created before this function is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#supportedImageFormats">supportedImageFormats</db:link>()</db:member>
<db:member><db:link xlink:href="qimagereader.xml#supportedMimeTypes">QImageReader::supportedMimeTypes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedSubTypes">
<db:title>[since 5.4] QList&lt;QByteArray&gt; QImageWriter::supportedSubTypes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QByteArray&gt;</db:type>
<db:methodname>supportedSubTypes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QByteArray&gt; supportedSubTypes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of subtypes supported by an image.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="supportsOption">
<db:title>bool QImageWriter::supportsOption(QImageIOHandler::ImageOption <db:emphasis>option</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>supportsOption</db:methodname>
<db:methodparam>
<db:type>QImageIOHandler::ImageOption</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool supportsOption(QImageIOHandler::ImageOption option) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the writer supports <db:code role="parameter">option</db:code>; otherwise returns false.</db:para>
<db:para>Different image formats support different options. Call this function to determine whether a certain option is supported by the current format. For example, the PNG format allows you to embed text into the image's metadata (see text()).</db:para>
<db:programlisting language="cpp">QImageWriter writer(fileName);
if (writer.supportsOption(QImageIOHandler::Description))
    writer.setText(&quot;Author&quot;, &quot;John Smith&quot;);
</db:programlisting>
<db:para>Options can be tested after the writer has been associated with a format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagereader.xml#supportsOption">QImageReader::supportsOption</db:link>()</db:member>
<db:member><db:link xlink:href="qimagewriter.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transformation">
<db:title>[since 5.5] QImageIOHandler::Transformations QImageWriter::transformation() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QImageIOHandler::Transformations</db:type>
<db:methodname>transformation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QImageIOHandler::Transformations transformation() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the transformation and orientation the image has been set to written with.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#setTransformation">setTransformation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="write">
<db:title>bool QImageWriter::write(const QImage &amp;<db:emphasis>image</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>write</db:methodname>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool write(const QImage &amp;image)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the image <db:code role="parameter">image</db:code> to the assigned device or file name. Returns <db:code>true</db:code> on success; otherwise returns <db:code>false</db:code>. If the operation fails, you can call <db:link xlink:href="qimagewriter.xml#error">error</db:link>() to find the type of error that occurred, or <db:link xlink:href="qimagewriter.xml#errorString">errorString</db:link>() to get a human readable description of the error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#canWrite">canWrite</db:link>()</db:member>
<db:member><db:link xlink:href="qimagewriter.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qimagewriter.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
