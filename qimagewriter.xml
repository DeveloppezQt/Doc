<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QImageWriter Class</db:title>
<db:productname>QtGui</db:productname>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> class provides a format independent interface for writing images to files or other devices.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QImageWriter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QImageWriter is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member><db:member>io</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> supports setting format specific options, such as the gamma level, compression level and quality, prior to storing the image. If you do not need such options, you can use <db:link xlink:href="qimage.xml#save">QImage::save</db:link>() or <db:link xlink:href="qpixmap.xml#save">QPixmap::save</db:link>() instead.</db:para>
<db:para>To store an image, you start by constructing a <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> object. Pass either a file name or a device pointer, and the image format to <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link>'s constructor. You can then set several options, such as the gamma level (by calling <db:link xlink:href="qimagewriter.xml#setGamma">setGamma</db:link>()) and quality (by calling <db:link xlink:href="qimagewriter.xml#setQuality">setQuality</db:link>()). <db:link xlink:href="qimagewriter.xml#canWrite">canWrite</db:link>() returns true if <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> can write the image (i.e., the image format is supported and the device is open for writing). Call <db:link xlink:href="qimagewriter.xml#write">write</db:link>() to write the image to the device.</db:para>
<db:para>If any error occurs when writing the image, <db:link xlink:href="qimagewriter.xml#write">write</db:link>() will return false. You can then call <db:link xlink:href="qimagewriter.xml#error">error</db:link>() to find the type of error that occurred, or <db:link xlink:href="qimagewriter.xml#errorString">errorString</db:link>() to get a human readable description of what went wrong.</db:para>
<db:para>Call <db:link xlink:href="qimagewriter.xml#supportedImageFormats">supportedImageFormats</db:link>() for a list of formats that <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> can write. <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> supports all built-in image formats, in addition to any image format plugins that support writing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagereader.xml">QImageReader</db:link></db:member>
<db:member><db:link xlink:href="qimageiohandler.xml">QImageIOHandler</db:link></db:member>
<db:member><db:link xlink:href="qimageioplugin.xml">QImageIOPlugin</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ImageWriterError-enum">
<db:title>enum QImageWriter::ImageWriterError</db:title>
<db:para>This enum describes errors that can occur when writing images with <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagewriter.xml">QImageWriter</db:link></db:emphasis>::DeviceError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> encountered a device error when writing the image data. Consult your device for more details on what went wrong.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagewriter.xml">QImageWriter</db:link></db:emphasis>::UnsupportedFormatError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Qt does not support the requested image format.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimagewriter.xml">QImageWriter</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>An unknown error occurred. If you get this value after calling <db:link xlink:href="qimagewriter.xml#write">write</db:link>(), it is most likely caused by a bug in <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QImageWriter">
<db:title>QImageWriter::QImageWriter()</db:title>
<db:para>Constructs an empty <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> object. Before writing, you must call <db:link xlink:href="qimagewriter.xml#setFormat">setFormat</db:link>() to set an image format, then <db:link xlink:href="qimagewriter.xml#setDevice">setDevice</db:link>() or <db:link xlink:href="qimagewriter.xml#setFileName">setFileName</db:link>().</db:para>
</db:section>
<db:section xml:id="QImageWriter-1">
<db:title>[explicit] QImageWriter::QImageWriter(QIODevice *<db:emphasis>device</db:emphasis>, const QByteArray &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> object using the device <db:code role="parameter">device</db:code> and image format <db:code role="parameter">format</db:code>.</db:para>
</db:section>
<db:section xml:id="QImageWriter-2">
<db:title>[explicit] QImageWriter::QImageWriter(const QString &amp;<db:emphasis>fileName</db:emphasis>, const QByteArray &amp;<db:emphasis>format</db:emphasis> = QByteArray())</db:title>
<db:para>Constructs a <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> objects that will write to a file with the name <db:code role="parameter">fileName</db:code>, using the image format <db:code role="parameter">format</db:code>. If <db:code role="parameter">format</db:code> is not provided, <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> will detect the image format by inspecting the extension of <db:code role="parameter">fileName</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QImageWriter">
<db:title>[noexcept] QImageWriter::~QImageWriter()</db:title>
<db:para>Destructs the <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> object.</db:para>
</db:section>
<db:section xml:id="canWrite">
<db:title>bool QImageWriter::canWrite() const</db:title>
<db:para>Returns true if <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> can write the image; i.e., the image format is supported and the assigned device is open for reading.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#write">write</db:link>()</db:member>
<db:member><db:link xlink:href="qimagewriter.xml#setDevice">setDevice</db:link>()</db:member>
<db:member><db:link xlink:href="qimagewriter.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compression">
<db:title>int QImageWriter::compression() const</db:title>
<db:para>Returns the compression of the image.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#setCompression">setCompression</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="device">
<db:title>QIODevice *QImageWriter::device() const</db:title>
<db:para>Returns the device currently assigned to <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link>, or 0 if no device has been assigned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#setDevice">setDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>QImageWriter::ImageWriterError QImageWriter::error() const</db:title>
<db:para>Returns the type of error that last occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#ImageWriterError-enum">ImageWriterError</db:link></db:member>
<db:member><db:link xlink:href="qimagewriter.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QImageWriter::errorString() const</db:title>
<db:para>Returns a human readable description of the last error that occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileName">
<db:title>QString QImageWriter::fileName() const</db:title>
<db:para>If the currently assigned device is a <db:link xlink:href="qfile.xml">QFile</db:link>, or if <db:link xlink:href="qimagewriter.xml#setFileName">setFileName</db:link>() has been called, this function returns the name of the file <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> writes to. Otherwise (i.e., if no device has been assigned or the device is not a <db:link xlink:href="qfile.xml">QFile</db:link>), an empty <db:link xlink:href="qstring.xml">QString</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#setFileName">setFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qimagewriter.xml#setDevice">setDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="format">
<db:title>QByteArray QImageWriter::format() const</db:title>
<db:para>Returns the format <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> uses for writing images.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="gamma">
<db:title>float QImageWriter::gamma() const</db:title>
<db:para>Returns the gamma level of the image.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#setGamma">setGamma</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="quality">
<db:title>int QImageWriter::quality() const</db:title>
<db:para>Returns the quality level of the image.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#setQuality">setQuality</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCompression">
<db:title>void QImageWriter::setCompression(int <db:emphasis>compression</db:emphasis>)</db:title>
<db:para>This is an image format specific function that set the compression of an image. For image formats that do not support setting the compression, this value is ignored.</db:para>
<db:para>The value range of <db:code role="parameter">compression</db:code> depends on the image format. For example, the &quot;tiff&quot; format supports two values, 0(no compression) and 1(LZW-compression).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#compression">compression</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDevice">
<db:title>void QImageWriter::setDevice(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:para>Sets <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link>'s device to <db:code role="parameter">device</db:code>. If a device has already been set, the old device is removed from <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> and is otherwise left unchanged.</db:para>
<db:para>If the device is not already open, <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> will attempt to open the device in <db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">QIODevice::WriteOnly</db:link> mode by calling open(). Note that this does not work for certain devices, such as <db:link xlink:href="qprocess.xml">QProcess</db:link>, QTcpSocket and QUdpSocket, where more logic is required to open the device.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#device">device</db:link>()</db:member>
<db:member><db:link xlink:href="qimagewriter.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFileName">
<db:title>void QImageWriter::setFileName(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>Sets the file name of <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> to <db:code role="parameter">fileName</db:code>. Internally, <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> will create a <db:link xlink:href="qfile.xml">QFile</db:link> and open it in <db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">QIODevice::WriteOnly</db:link> mode, and use this file when writing images.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qimagewriter.xml#setDevice">setDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFormat">
<db:title>void QImageWriter::setFormat(const QByteArray &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:para>Sets the format <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> will use when writing images, to <db:code role="parameter">format</db:code>. <db:code role="parameter">format</db:code> is a case insensitive text string. Example:</db:para>
<db:programlisting language="cpp">QImageWriter writer;
writer.setFormat(&quot;png&quot;); // same as writer.setFormat(&quot;PNG&quot;);
</db:programlisting>
<db:para>You can call <db:link xlink:href="qimagewriter.xml#supportedImageFormats">supportedImageFormats</db:link>() for the full list of formats <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> supports.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#format">format</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGamma">
<db:title>void QImageWriter::setGamma(float <db:emphasis>gamma</db:emphasis>)</db:title>
<db:para>This is an image format specific function that sets the gamma level of the image to <db:code role="parameter">gamma</db:code>. For image formats that do not support setting the gamma level, this value is ignored.</db:para>
<db:para>The value range of <db:code role="parameter">gamma</db:code> depends on the image format. For example, the &quot;png&quot; format supports a gamma range from 0.0 to 1.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#gamma">gamma</db:link>()</db:member>
<db:member><db:link xlink:href="qimagewriter.xml#quality">quality</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setQuality">
<db:title>void QImageWriter::setQuality(int <db:emphasis>quality</db:emphasis>)</db:title>
<db:para>This is an image format specific function that sets the quality level of the image to <db:code role="parameter">quality</db:code>. For image formats that do not support setting the quality, this value is ignored.</db:para>
<db:para>The value range of <db:code role="parameter">quality</db:code> depends on the image format. For example, the &quot;jpeg&quot; format supports a quality range from 0 (low quality, high compression) to 100 (high quality, low compression).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#quality">quality</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setText">
<db:title>[since 4.1] void QImageWriter::setText(const QString &amp;<db:emphasis>key</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Sets the image text associated with the key <db:code role="parameter">key</db:code> to <db:code role="parameter">text</db:code>. This is useful for storing copyright information or other information about the image. Example:</db:para>
<db:programlisting language="cpp">QImage image(&quot;some/image.jpeg&quot;);
QImageWriter writer(&quot;images/outimage.png&quot;, &quot;png&quot;);
writer.setText(&quot;Author&quot;, &quot;John Smith&quot;);
writer.write(image);
</db:programlisting>
<db:para>If you want to store a single block of data (e.g., a comment), you can pass an empty key, or use a generic key like &quot;Description&quot;.</db:para>
<db:para>The key and text will be embedded into the image data after calling <db:link xlink:href="qimagewriter.xml#write">write</db:link>().</db:para>
<db:para>Support for this option is implemented through <db:link xlink:href="qimageiohandler.xml#ImageOption-enum">QImageIOHandler::Description</db:link>.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimage.xml#setText">QImage::setText</db:link>()</db:member>
<db:member><db:link xlink:href="qimagereader.xml#text">QImageReader::text</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedImageFormats">
<db:title>[static] QList&lt;QByteArray&gt; QImageWriter::supportedImageFormats()</db:title>
<db:para>Returns the list of image formats supported by <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link>.</db:para>
<db:para>By default, Qt can write the following formats:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Format</db:para>
</db:th>
<db:th>
<db:para>MIME type</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>BMP</db:para>
</db:td>
<db:td>
<db:para>image/bmp</db:para>
</db:td>
<db:td>
<db:para>Windows Bitmap</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>JPG</db:para>
</db:td>
<db:td>
<db:para>image/jpeg</db:para>
</db:td>
<db:td>
<db:para>Joint Photographic Experts Group</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PNG</db:para>
</db:td>
<db:td>
<db:para>image/png</db:para>
</db:td>
<db:td>
<db:para>Portable Network Graphics</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PBM</db:para>
</db:td>
<db:td>
<db:para>image/x-portable-bitmap</db:para>
</db:td>
<db:td>
<db:para>Portable Bitmap</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PGM</db:para>
</db:td>
<db:td>
<db:para>image/x-portable-graymap</db:para>
</db:td>
<db:td>
<db:para>Portable Graymap</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PPM</db:para>
</db:td>
<db:td>
<db:para>image/x-portable-pixmap</db:para>
</db:td>
<db:td>
<db:para>Portable Pixmap</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>XBM</db:para>
</db:td>
<db:td>
<db:para>image/x-xbitmap</db:para>
</db:td>
<db:td>
<db:para>X11 Bitmap</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>XPM</db:para>
</db:td>
<db:td>
<db:para>image/x-xpixmap</db:para>
</db:td>
<db:td>
<db:para>X11 Pixmap</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Reading and writing SVG files is supported through the <db:link xlink:href="">Qt SVG</db:link> module. The <db:link xlink:href="">Qt Image Formats</db:link> module provides support for additional image formats.</db:para>
<db:para>Note that the QApplication instance must be created before this function is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#setFormat">setFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qimagereader.xml#supportedImageFormats">QImageReader::supportedImageFormats</db:link>()</db:member>
<db:member><db:link xlink:href="qimageioplugin.xml">QImageIOPlugin</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedMimeTypes">
<db:title>[static] QList&lt;QByteArray&gt; QImageWriter::supportedMimeTypes()</db:title>
<db:para>Returns the list of MIME types supported by <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link>.</db:para>
<db:para>Note that the QApplication instance must be created before this function is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#supportedImageFormats">supportedImageFormats</db:link>()</db:member>
<db:member><db:link xlink:href="qimagereader.xml#supportedMimeTypes">QImageReader::supportedMimeTypes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportsOption">
<db:title>[since 4.2] bool QImageWriter::supportsOption(QImageIOHandler::ImageOption <db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Returns true if the writer supports <db:code role="parameter">option</db:code>; otherwise returns false.</db:para>
<db:para>Different image formats support different options. Call this function to determine whether a certain option is supported by the current format. For example, the PNG format allows you to embed text into the image's metadata (see text()).</db:para>
<db:programlisting language="cpp">QImageWriter writer(fileName);
if (writer.supportsOption(QImageIOHandler::Description))
    writer.setText(&quot;Author&quot;, &quot;John Smith&quot;);
</db:programlisting>
<db:para>Options can be tested after the writer has been associated with a format.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagereader.xml#supportsOption">QImageReader::supportsOption</db:link>()</db:member>
<db:member><db:link xlink:href="qimagewriter.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="write">
<db:title>bool QImageWriter::write(const QImage &amp;<db:emphasis>image</db:emphasis>)</db:title>
<db:para>Writes the image <db:code role="parameter">image</db:code> to the assigned device or file name. Returns true on success; otherwise returns false. If the operation fails, you can call <db:link xlink:href="qimagewriter.xml#error">error</db:link>() to find the type of error that occurred, or <db:link xlink:href="qimagewriter.xml#errorString">errorString</db:link>() to get a human readable description of the error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#canWrite">canWrite</db:link>()</db:member>
<db:member><db:link xlink:href="qimagewriter.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qimagewriter.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QImageWriter</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="description">
<db:title>[deprecated] QString QImageWriter::description() const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qimagereader.xml#text">QImageReader::text</db:link>() instead.</db:para>
<db:para>Returns the description of the image.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#setDescription">setDescription</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDescription">
<db:title>[deprecated] void QImageWriter::setDescription(const QString &amp;<db:emphasis>description</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qimagewriter.xml#setText">setText</db:link>() instead.</db:para>
<db:para>This is an image format specific function that sets the description of the image to <db:code role="parameter">description</db:code>. For image formats that do not support setting the description, this value is ignored.</db:para>
<db:para>The contents of <db:code role="parameter">description</db:code> depends on the image format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagewriter.xml#description">description</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
