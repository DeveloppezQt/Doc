<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QLabel Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlabel.xml">QLabel</db:link> widget provides a text or image display.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QLabel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qframe.xml" xlink:role="class">QFrame</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QLabel is part of <db:simplelist><db:member>basicwidgets</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qlabel.xml">QLabel</db:link> is used for displaying text or an image. No user interaction functionality is provided. The visual appearance of the label can be configured in various ways, and it can be used for specifying a focus mnemonic key for another widget.</db:para>
<db:para>A <db:link xlink:href="qlabel.xml">QLabel</db:link> can contain any of the following content types:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Content</db:para>
</db:th>
<db:th>
<db:para>Setting</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Plain text</db:para>
</db:td>
<db:td>
<db:para>Pass a <db:link xlink:href="qstring.xml">QString</db:link> to <db:link xlink:href="qlabel.xml#text-prop">setText</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Rich text</db:para>
</db:td>
<db:td>
<db:para>Pass a <db:link xlink:href="qstring.xml">QString</db:link> that contains rich text to <db:link xlink:href="qlabel.xml#text-prop">setText</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>A pixmap</db:para>
</db:td>
<db:td>
<db:para>Pass a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> to <db:link xlink:href="qlabel.xml#pixmap-prop">setPixmap</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>A movie</db:para>
</db:td>
<db:td>
<db:para>Pass a <db:link xlink:href="qmovie.xml">QMovie</db:link> to <db:link xlink:href="qlabel.xml#setMovie">setMovie</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>A number</db:para>
</db:td>
<db:td>
<db:para>Pass an <db:emphasis>int</db:emphasis> or a <db:emphasis>double</db:emphasis> to <db:link xlink:href="qlabel.xml#setNum">setNum</db:link>(), which converts the number to plain text.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Nothing</db:para>
</db:td>
<db:td>
<db:para>The same as an empty plain text. This is the default. Set by <db:link xlink:href="qlabel.xml#clear">clear</db:link>().</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:warning>
<db:para>When passing a <db:link xlink:href="qstring.xml">QString</db:link> to the constructor or calling <db:link xlink:href="qlabel.xml#text-prop">setText</db:link>(), make sure to sanitize your input, as <db:link xlink:href="qlabel.xml">QLabel</db:link> tries to guess whether it displays the text as plain text or as rich text, a subset of HTML 4 markup. You may want to call <db:link xlink:href="qlabel.xml#textFormat-prop">setTextFormat</db:link>() explicitly, e.g. in case you expect the text to be in plain format but cannot control the text source (for instance when displaying data loaded from the Web).</db:para>
</db:warning>
<db:para>When the content is changed using any of these functions, any previous content is cleared.</db:para>
<db:para>By default, labels display <db:link xlink:href="stylesheet-reference.xml#alignment">left-aligned, vertically-centered</db:link> text and images, where any tabs in the text to be displayed are <db:link xlink:href="qt.xml#TextFlag-enum">automatically expanded</db:link>. However, the look of a <db:link xlink:href="qlabel.xml">QLabel</db:link> can be adjusted and fine-tuned in several ways.</db:para>
<db:para>The positioning of the content within the <db:link xlink:href="qlabel.xml">QLabel</db:link> widget area can be tuned with <db:link xlink:href="qlabel.xml#alignment-prop">setAlignment</db:link>() and <db:link xlink:href="qlabel.xml#indent-prop">setIndent</db:link>(). Text content can also wrap lines along word boundaries with <db:link xlink:href="qlabel.xml#wordWrap-prop">setWordWrap</db:link>(). For example, this code sets up a sunken panel with a two-line text in the bottom right corner (both lines being flush with the right side of the label):</db:para>
<db:programlisting language="cpp">QLabel *label = new QLabel(this);
label-&gt;setFrameStyle(QFrame::Panel | QFrame::Sunken);
label-&gt;setText(&quot;first line\nsecond line&quot;);
label-&gt;setAlignment(Qt::AlignBottom | Qt::AlignRight);
</db:programlisting>
<db:para>The properties and functions <db:link xlink:href="qlabel.xml">QLabel</db:link> inherits from <db:link xlink:href="qframe.xml">QFrame</db:link> can also be used to specify the widget frame to be used for any given label.</db:para>
<db:para>A <db:link xlink:href="qlabel.xml">QLabel</db:link> is often used as a label for an interactive widget. For this use <db:link xlink:href="qlabel.xml">QLabel</db:link> provides a useful mechanism for adding an mnemonic (see <db:link xlink:href="qkeysequence.xml">QKeySequence</db:link>) that will set the keyboard focus to the other widget (called the <db:link xlink:href="qlabel.xml">QLabel</db:link>'s &quot;buddy&quot;). For example:</db:para>
<db:programlisting language="cpp">QLineEdit *phoneEdit = new QLineEdit(this);
QLabel *phoneLabel = new QLabel(&quot;&amp;Phone:&quot;, this);
phoneLabel-&gt;setBuddy(phoneEdit);
</db:programlisting>
<db:para>In this example, keyboard focus is transferred to the label's buddy (the <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>) when the user presses Alt+P. If the buddy was a button (inheriting from <db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link>), triggering the mnemonic would emulate a button click.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/macintosh-label.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Macintosh style label</db:para>
</db:td>
<db:td>
<db:para>A label shown in the <db:link xlink:href="gallery-macintosh.xml">Macintosh widget style</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-label.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Fusion style label</db:para>
</db:td>
<db:td>
<db:para>A label shown in the <db:link xlink:href="gallery-fusion.xml">Fusion widget style</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/windowsvista-label.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Windows Vista style label</db:para>
</db:td>
<db:td>
<db:para>A label shown in the <db:link xlink:href="gallery-windowsvista.xml">Windows Vista widget style</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml">QLineEdit</db:link></db:member>
<db:member><db:link xlink:href="qtextedit.xml">QTextEdit</db:link></db:member>
<db:member><db:link xlink:href="qpixmap.xml">QPixmap</db:link></db:member>
<db:member><db:link xlink:href="qmovie.xml">QMovie</db:link></db:member>
<db:member><db:link xlink:href="guibooks.xml#fowler">GUI Design Handbook: Label</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="alignment-prop">
<db:title>alignment : Qt::Alignment</db:title>
<db:para>This property holds the alignment of the label's contents</db:para>
<db:para>By default, the contents of the label are left-aligned and vertically-centered.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:type> <db:emphasis role="bold">alignment</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAlignment</db:emphasis>(<db:emphasis>Qt::Alignment</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#text-prop">text</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasSelectedText-prop">
<db:title>[read-only, since 4.7] hasSelectedText : const bool</db:title>
<db:para>This property holds whether there is any text selected</db:para>
<db:para>hasSelectedText() returns true if some or all of the text has been selected by the user; otherwise returns false.</db:para>
<db:para>By default, this property is false.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> The <db:link xlink:href="qlabel.xml#textInteractionFlags-prop">textInteractionFlags</db:link> set on the label need to include either TextSelectableByMouse or TextSelectableByKeyboard.</db:para>
<db:para>This property was introduced in Qt 4.7.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">hasSelectedText</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#selectedText-prop">selectedText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indent-prop">
<db:title>indent : int</db:title>
<db:para>This property holds the label's text indent in pixels</db:para>
<db:para>If a label displays text, the indent applies to the left edge if <db:link xlink:href="qlabel.xml#alignment-prop">alignment</db:link>() is <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignLeft</db:link>, to the right edge if <db:link xlink:href="qlabel.xml#alignment-prop">alignment</db:link>() is <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignRight</db:link>, to the top edge if <db:link xlink:href="qlabel.xml#alignment-prop">alignment</db:link>() is <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignTop</db:link>, and to the bottom edge if <db:link xlink:href="qlabel.xml#alignment-prop">alignment</db:link>() is <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignBottom</db:link>.</db:para>
<db:para>If indent is negative, or if no indent has been set, the label computes the effective indent as follows: If <db:link xlink:href="qframe.xml#frameWidth-prop">frameWidth</db:link>() is 0, the effective indent becomes 0. If <db:link xlink:href="qframe.xml#frameWidth-prop">frameWidth</db:link>() is greater than 0, the effective indent becomes half the width of the &quot;x&quot; character of the widget's current <db:link xlink:href="qwidget.xml#font-prop">font</db:link>().</db:para>
<db:para>By default, the indent is -1, meaning that an effective indent is calculating in the manner described above.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">indent</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setIndent</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="stylesheet-reference.xml#alignment">alignment</db:link></db:member>
<db:member><db:link xlink:href="qlabel.xml#margin-prop">margin</db:link></db:member>
<db:member><db:link xlink:href="qframe.xml#frameWidth-prop">frameWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#font-prop">font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="margin-prop">
<db:title>margin : int</db:title>
<db:para>This property holds the width of the margin</db:para>
<db:para>The margin is the distance between the innermost pixel of the frame and the outermost pixel of contents.</db:para>
<db:para>The default margin is 0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">margin</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMargin</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#indent-prop">indent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="openExternalLinks-prop">
<db:title>[since 4.2] openExternalLinks : bool</db:title>
<db:para>Specifies whether <db:link xlink:href="qlabel.xml">QLabel</db:link> should automatically open links using <db:link xlink:href="qdesktopservices.xml#openUrl">QDesktopServices::openUrl</db:link>() instead of emitting the <db:link xlink:href="qlabel.xml#linkActivated">linkActivated</db:link>() signal.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> The <db:link xlink:href="qlabel.xml#textInteractionFlags-prop">textInteractionFlags</db:link> set on the label need to include either LinksAccessibleByMouse or LinksAccessibleByKeyboard.</db:para>
<db:para>The default value is false.</db:para>
<db:para>This property was introduced in Qt 4.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">openExternalLinks</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOpenExternalLinks</db:emphasis>(<db:type>bool</db:type> <db:emphasis>open</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#textInteractionFlags-prop">textInteractionFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pixmap-prop">
<db:title>pixmap : QPixmap</db:title>
<db:para>This property holds the label's pixmap</db:para>
<db:para>If no pixmap has been set this will return 0.</db:para>
<db:para>Setting the pixmap clears any previous content. The buddy shortcut, if any, is disabled.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>const <db:type><db:link xlink:href="qpixmap.xml">QPixmap</db:link></db:type> *<db:emphasis role="bold">pixmap</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPixmap</db:emphasis>(<db:emphasis>const QPixmap &amp;</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="scaledContents-prop">
<db:title>scaledContents : bool</db:title>
<db:para>This property holds whether the label will scale its contents to fill all available space.</db:para>
<db:para>When enabled and the label shows a pixmap, it will scale the pixmap to fill the available space.</db:para>
<db:para>This property's default is false.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">hasScaledContents</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setScaledContents</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="selectedText-prop">
<db:title>[read-only, since 4.7] selectedText : const QString</db:title>
<db:para>This property holds the selected text</db:para>
<db:para>If there is no selected text this property's value is an empty string.</db:para>
<db:para>By default, this property contains an empty string.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> The <db:link xlink:href="qlabel.xml#textInteractionFlags-prop">textInteractionFlags</db:link> set on the label need to include either TextSelectableByMouse or TextSelectableByKeyboard.</db:para>
<db:para>This property was introduced in Qt 4.7.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">selectedText</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#hasSelectedText-prop">hasSelectedText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text-prop">
<db:title>text : QString</db:title>
<db:para>This property holds the label's text</db:para>
<db:para>If no text has been set this will return an empty string. Setting the text clears any previous content.</db:para>
<db:para>The text will be interpreted either as plain text or as rich text, depending on the text format setting; see <db:link xlink:href="qlabel.xml#textFormat-prop">setTextFormat</db:link>(). The default setting is <db:link xlink:href="qt.xml#TextFormat-enum">Qt::AutoText</db:link>; i.e. <db:link xlink:href="qlabel.xml">QLabel</db:link> will try to auto-detect the format of the text set. See <db:link xlink:href="richtext-html-subset.xml">Supported HTML Subset</db:link> for the definition of rich text.</db:para>
<db:para>If a buddy has been set, the buddy mnemonic key is updated from the new text.</db:para>
<db:para>Note that <db:link xlink:href="qlabel.xml">QLabel</db:link> is well-suited to display small rich text documents, such as small documents that get their document specific settings (font, text color, link color) from the label's palette and font properties. For large documents, use <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> in read-only mode instead. <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> can also provide a scroll bar when necessary.</db:para>
<db:note>
<db:para>This function enables mouse tracking if <db:code role="parameter">text</db:code> contains rich text.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">text</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setText</db:emphasis>(<db:emphasis>const QString &amp;</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#textFormat-prop">setTextFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qlabel.xml#setBuddy">setBuddy</db:link>()</db:member>
<db:member><db:link xlink:href="stylesheet-reference.xml#alignment">alignment</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textFormat-prop">
<db:title>textFormat : Qt::TextFormat</db:title>
<db:para>This property holds the label's text format</db:para>
<db:para>See the <db:link xlink:href="qt.xml#TextFormat-enum">Qt::TextFormat</db:link> enum for an explanation of the possible options.</db:para>
<db:para>The default format is <db:link xlink:href="qt.xml#TextFormat-enum">Qt::AutoText</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#TextFormat-enum">Qt::TextFormat</db:link></db:type> <db:emphasis role="bold">textFormat</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTextFormat</db:emphasis>(<db:emphasis>Qt::TextFormat</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#text-prop">text</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textInteractionFlags-prop">
<db:title>[since 4.2] textInteractionFlags : Qt::TextInteractionFlags</db:title>
<db:para>Specifies how the label should interact with user input if it displays text.</db:para>
<db:para>If the flags contain <db:link xlink:href="qt.xml#TextInteractionFlag-enum">Qt::LinksAccessibleByKeyboard</db:link> the focus policy is also automatically set to <db:link xlink:href="qt.xml#FocusPolicy-enum">Qt::StrongFocus</db:link>. If <db:link xlink:href="qt.xml#TextInteractionFlag-enum">Qt::TextSelectableByKeyboard</db:link> is set then the focus policy is set to <db:link xlink:href="qt.xml#FocusPolicy-enum">Qt::ClickFocus</db:link>.</db:para>
<db:para>The default value is <db:link xlink:href="qt.xml#TextInteractionFlag-enum">Qt::LinksAccessibleByMouse</db:link>.</db:para>
<db:para>This property was introduced in Qt 4.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#TextInteractionFlag-enum">Qt::TextInteractionFlags</db:link></db:type> <db:emphasis role="bold">textInteractionFlags</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTextInteractionFlags</db:emphasis>(<db:type><db:link xlink:href="qt.xml#TextInteractionFlag-enum">Qt::TextInteractionFlags</db:link></db:type> <db:emphasis>flags</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="wordWrap-prop">
<db:title>wordWrap : bool</db:title>
<db:para>This property holds the label's word-wrapping policy</db:para>
<db:para>If this property is true then label text is wrapped where necessary at word-breaks; otherwise it is not wrapped at all.</db:para>
<db:para>By default, word wrap is disabled.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">wordWrap</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWordWrap</db:emphasis>(<db:type>bool</db:type> <db:emphasis>on</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#text-prop">text</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QLabel">
<db:title>[explicit] QLabel::QLabel(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR, Qt::WindowFlags <db:emphasis>f</db:emphasis> = Qt::WindowFlags())</db:title>
<db:para>Constructs an empty label.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> and widget flag <db:code role="parameter">f</db:code>, arguments are passed to the <db:link xlink:href="qframe.xml">QFrame</db:link> constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#alignment-prop">setAlignment</db:link>()</db:member>
<db:member><db:link xlink:href="qframe.xml#setFrameStyle">setFrameStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qlabel.xml#indent-prop">setIndent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QLabel-1">
<db:title>[explicit] QLabel::QLabel(const QString &amp;<db:emphasis>text</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR, Qt::WindowFlags <db:emphasis>f</db:emphasis> = Qt::WindowFlags())</db:title>
<db:para>Constructs a label that displays the text, <db:code role="parameter">text</db:code>.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> and widget flag <db:code role="parameter">f</db:code>, arguments are passed to the <db:link xlink:href="qframe.xml">QFrame</db:link> constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#text-prop">setText</db:link>()</db:member>
<db:member><db:link xlink:href="qlabel.xml#alignment-prop">setAlignment</db:link>()</db:member>
<db:member><db:link xlink:href="qframe.xml#setFrameStyle">setFrameStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qlabel.xml#indent-prop">setIndent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QLabel">
<db:title>[virtual noexcept] QLabel::~QLabel()</db:title>
<db:para>Destroys the label.</db:para>
</db:section>
<db:section xml:id="buddy">
<db:title>QWidget *QLabel::buddy() const</db:title>
<db:para>Returns this label's buddy, or 0 if no buddy is currently set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#setBuddy">setBuddy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QLabel::changeEvent(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qframe.xml#changeEvent" role="function">QFrame::changeEvent(QEvent *ev)</db:link>.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QLabel::clear()</db:title>
<db:para>Clears any label contents.</db:para>
</db:section>
<db:section xml:id="contextMenuEvent">
<db:title>[override virtual protected] void QLabel::contextMenuEvent(QContextMenuEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#contextMenuEvent" role="function">QWidget::contextMenuEvent(QContextMenuEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QLabel::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qframe.xml#event" role="function">QFrame::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[override virtual protected] void QLabel::focusInEvent(QFocusEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusInEvent" role="function">QWidget::focusInEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusNextPrevChild">
<db:title>[override virtual protected] bool QLabel::focusNextPrevChild(bool <db:emphasis>next</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusNextPrevChild" role="function">QWidget::focusNextPrevChild(bool next)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[override virtual protected] void QLabel::focusOutEvent(QFocusEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusOutEvent" role="function">QWidget::focusOutEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="heightForWidth">
<db:title>[override virtual] int QLabel::heightForWidth(int <db:emphasis>w</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#heightForWidth" role="function">QWidget::heightForWidth(int w) const</db:link>.</db:para>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QLabel::keyPressEvent(QKeyEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyPressEvent" role="function">QWidget::keyPressEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="linkActivated">
<db:title>[since 4.2] void QLabel::linkActivated(const QString &amp;<db:emphasis>link</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user clicks a link. The URL referred to by the anchor is passed in <db:code role="parameter">link</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#linkHovered">linkHovered</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="linkHovered">
<db:title>[since 4.2] void QLabel::linkHovered(const QString &amp;<db:emphasis>link</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user hovers over a link. The URL referred to by the anchor is passed in <db:code role="parameter">link</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#linkActivated">linkActivated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QLabel::minimumSizeHint() const</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#minimumSizeHint-prop" role="property">QWidget::minimumSizeHint</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QLabel::mouseMoveEvent(QMouseEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseMoveEvent" role="function">QWidget::mouseMoveEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QLabel::mousePressEvent(QMouseEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mousePressEvent" role="function">QWidget::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QLabel::mouseReleaseEvent(QMouseEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseReleaseEvent" role="function">QWidget::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="movie">
<db:title>QMovie *QLabel::movie() const</db:title>
<db:para>Returns a pointer to the label's movie, or 0 if no movie has been set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#setMovie">setMovie</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QLabel::paintEvent(<db:emphasis>QPaintEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qframe.xml#paintEvent" role="function">QFrame::paintEvent(QPaintEvent *)</db:link>.</db:para>
</db:section>
<db:section xml:id="picture">
<db:title>const QPicture *QLabel::picture() const</db:title>
<db:para>Returns the label's picture or 0 if the label doesn't have a picture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#setPicture">setPicture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionStart">
<db:title>[since 4.7] int QLabel::selectionStart() const</db:title>
<db:para>selectionStart() returns the index of the first selected character in the label or -1 if no text is selected.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> The <db:link xlink:href="qlabel.xml#textInteractionFlags-prop">textInteractionFlags</db:link> set on the label need to include either TextSelectableByMouse or TextSelectableByKeyboard.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#selectedText-prop">selectedText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBuddy">
<db:title>void QLabel::setBuddy(QWidget *<db:emphasis>buddy</db:emphasis>)</db:title>
<db:para>Sets this label's buddy to <db:code role="parameter">buddy</db:code>.</db:para>
<db:para>When the user presses the shortcut key indicated by this label, the keyboard focus is transferred to the label's buddy widget.</db:para>
<db:para>The buddy mechanism is only available for QLabels that contain text in which one character is prefixed with an ampersand, '&amp;'. This character is set as the shortcut key. See the <db:link xlink:href="qkeysequence.xml#mnemonic">QKeySequence::mnemonic</db:link>() documentation for details (to display an actual ampersand, use '&amp;&amp;').</db:para>
<db:para>In a dialog, you might create two data entry widgets and a label for each, and set up the geometry layout so each label is just to the left of its data entry widget (its &quot;buddy&quot;), for example:</db:para>
<db:programlisting language="cpp">QLineEdit *nameEdit  = new QLineEdit(this);
QLabel    *nameLabel = new QLabel(&quot;&amp;Name:&quot;, this);
nameLabel-&gt;setBuddy(nameEdit);
QLineEdit *phoneEdit  = new QLineEdit(this);
QLabel    *phoneLabel = new QLabel(&quot;&amp;Phone:&quot;, this);
phoneLabel-&gt;setBuddy(phoneEdit);
// (layout setup not shown)
</db:programlisting>
<db:para>With the code above, the focus jumps to the Name field when the user presses Alt+N, and to the Phone field when the user presses Alt+P.</db:para>
<db:para>To unset a previously set buddy, call this function with <db:code role="parameter">buddy</db:code> set to 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#buddy">buddy</db:link>()</db:member>
<db:member><db:link xlink:href="qlabel.xml#text-prop">setText</db:link>()</db:member>
<db:member><db:link xlink:href="qshortcut.xml">QShortcut</db:link></db:member>
<db:member><db:link xlink:href="qlabel.xml#alignment-prop">setAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMovie">
<db:title>void QLabel::setMovie(QMovie *<db:emphasis>movie</db:emphasis>)</db:title>
<db:para>Sets the label contents to <db:code role="parameter">movie</db:code>. Any previous content is cleared. The label does NOT take ownership of the movie.</db:para>
<db:para>The buddy shortcut, if any, is disabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#movie">movie</db:link>()</db:member>
<db:member><db:link xlink:href="qlabel.xml#setBuddy">setBuddy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNum">
<db:title>void QLabel::setNum(int <db:emphasis>num</db:emphasis>)</db:title>
<db:para>Sets the label contents to plain text containing the textual representation of integer <db:code role="parameter">num</db:code>. Any previous content is cleared. Does nothing if the integer's string representation is the same as the current contents of the label.</db:para>
<db:para>The buddy shortcut, if any, is disabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#text-prop">setText</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#setNum">QString::setNum</db:link>()</db:member>
<db:member><db:link xlink:href="qlabel.xml#setBuddy">setBuddy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNum-1">
<db:title>void QLabel::setNum(double <db:emphasis>num</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the label contents to plain text containing the textual representation of double <db:code role="parameter">num</db:code>. Any previous content is cleared. Does nothing if the double's string representation is the same as the current contents of the label.</db:para>
<db:para>The buddy shortcut, if any, is disabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#text-prop">setText</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#setNum">QString::setNum</db:link>()</db:member>
<db:member><db:link xlink:href="qlabel.xml#setBuddy">setBuddy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPicture">
<db:title>void QLabel::setPicture(const QPicture &amp;<db:emphasis>picture</db:emphasis>)</db:title>
<db:para>Sets the label contents to <db:code role="parameter">picture</db:code>. Any previous content is cleared.</db:para>
<db:para>The buddy shortcut, if any, is disabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#picture">picture</db:link>()</db:member>
<db:member><db:link xlink:href="qlabel.xml#setBuddy">setBuddy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelection">
<db:title>[since 4.7] void QLabel::setSelection(int <db:emphasis>start</db:emphasis>, int <db:emphasis>length</db:emphasis>)</db:title>
<db:para>Selects text from position <db:code role="parameter">start</db:code> and for <db:code role="parameter">length</db:code> characters.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> The <db:link xlink:href="qlabel.xml#textInteractionFlags-prop">textInteractionFlags</db:link> set on the label need to include either TextSelectableByMouse or TextSelectableByKeyboard.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlabel.xml#selectedText-prop">selectedText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QLabel::sizeHint() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qframe.xml#sizeHint" role="function">QFrame::sizeHint() const</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
