<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QSemaphore Class</db:title>
<db:productname>QtCore</db:productname>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsemaphore.xml">QSemaphore</db:link> class provides a general counting semaphore.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSemaphore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSemaphore is part of <db:simplelist><db:member><db:link xlink:href="thread.xml">Threading Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A semaphore is a generalization of a mutex. While a mutex can only be locked once, it's possible to acquire a semaphore multiple times. Semaphores are typically used to protect a certain number of identical resources.</db:para>
<db:para>Semaphores support two fundamental operations, <db:link xlink:href="qsemaphore.xml#acquire">acquire</db:link>() and <db:link xlink:href="qsemaphore.xml#release">release</db:link>():</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>acquire(<db:emphasis>n</db:emphasis>) tries to acquire <db:emphasis>n</db:emphasis> resources. If there aren't that many resources available, the call will block until this is the case.</db:para>
</db:listitem>
<db:listitem>
<db:para>release(<db:emphasis>n</db:emphasis>) releases <db:emphasis>n</db:emphasis> resources.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>There's also a <db:link xlink:href="qsemaphore.xml#tryAcquire">tryAcquire</db:link>() function that returns immediately if it cannot acquire the resources, and an <db:link xlink:href="qsemaphore.xml#available">available</db:link>() function that returns the number of available resources at any time.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QSemaphore sem(5);      // sem.available() == 5

sem.acquire(3);         // sem.available() == 2
sem.acquire(2);         // sem.available() == 0
sem.release(5);         // sem.available() == 5
sem.release(5);         // sem.available() == 10

sem.tryAcquire(1);      // sem.available() == 9, returns true
sem.tryAcquire(250);    // sem.available() == 9, returns false
</db:programlisting>
<db:para>A typical application of semaphores is for controlling access to a circular buffer shared by a producer thread and a consumer thread. The Semaphores example shows how to use <db:link xlink:href="qsemaphore.xml">QSemaphore</db:link> to solve that problem.</db:para>
<db:para>A non-computing example of a semaphore would be dining at a restaurant. A semaphore is initialized with the number of chairs in the restaurant. As people arrive, they want a seat. As seats are filled, <db:link xlink:href="qsemaphore.xml#available">available</db:link>() is decremented. As people leave, the <db:link xlink:href="qsemaphore.xml#available">available</db:link>() is incremented, allowing more people to enter. If a party of 10 people want to be seated, but there are only 9 seats, those 10 people will wait, but a party of 4 people would be seated (taking the available seats to 5, making the party of 10 people wait longer).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutex.xml">QMutex</db:link></db:member>
<db:member><db:link xlink:href="qwaitcondition.xml">QWaitCondition</db:link></db:member>
<db:member><db:link xlink:href="qthread.xml">QThread</db:link></db:member>
<db:member><db:link xlink:href="qtcore-semaphores-example.xml">Semaphores Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSemaphore">
<db:title>[explicit] QSemaphore::QSemaphore(int <db:emphasis>n</db:emphasis> = 0)</db:title>
<db:para>Creates a new semaphore and initializes the number of resources it guards to <db:code role="parameter">n</db:code> (by default, 0).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsemaphore.xml#release">release</db:link>()</db:member>
<db:member><db:link xlink:href="qsemaphore.xml#available">available</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QSemaphore">
<db:title>[noexcept] QSemaphore::~QSemaphore()</db:title>
<db:para>Destroys the semaphore.</db:para>
<db:warning>
<db:para>Destroying a semaphore that is in use may result in undefined behavior.</db:para>
</db:warning>
</db:section>
<db:section xml:id="acquire">
<db:title>void QSemaphore::acquire(int <db:emphasis>n</db:emphasis> = 1)</db:title>
<db:para>Tries to acquire n resources guarded by the semaphore. If <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qsemaphore.xml#available">available</db:link>(), this call will block until enough resources are available.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsemaphore.xml#release">release</db:link>()</db:member>
<db:member><db:link xlink:href="qsemaphore.xml#available">available</db:link>()</db:member>
<db:member><db:link xlink:href="qsemaphore.xml#tryAcquire">tryAcquire</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="available">
<db:title>int QSemaphore::available() const</db:title>
<db:para>Returns the number of resources currently available to the semaphore. This number can never be negative.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsemaphore.xml#acquire">acquire</db:link>()</db:member>
<db:member><db:link xlink:href="qsemaphore.xml#release">release</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="release">
<db:title>void QSemaphore::release(int <db:emphasis>n</db:emphasis> = 1)</db:title>
<db:para>Releases <db:code role="parameter">n</db:code> resources guarded by the semaphore.</db:para>
<db:para>This function can be used to &quot;create&quot; resources as well. For example:</db:para>
<db:programlisting language="cpp">QSemaphore sem(5);      // a semaphore that guards 5 resources
sem.acquire(5);         // acquire all 5 resources
sem.release(5);         // release the 5 resources
sem.release(10);        // &quot;create&quot; 10 new resources
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsemaphore.xml#acquire">acquire</db:link>()</db:member>
<db:member><db:link xlink:href="qsemaphore.xml#available">available</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tryAcquire">
<db:title>bool QSemaphore::tryAcquire(int <db:emphasis>n</db:emphasis> = 1)</db:title>
<db:para>Tries to acquire n resources guarded by the semaphore and returns true on success. If <db:link xlink:href="qsemaphore.xml#available">available</db:link>() &lt; <db:code role="parameter">n</db:code>, this call immediately returns false without acquiring any resources.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QSemaphore sem(5);      // sem.available() == 5
sem.tryAcquire(250);    // sem.available() == 5, returns false
sem.tryAcquire(3);      // sem.available() == 2, returns true
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsemaphore.xml#acquire">acquire</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tryAcquire-1">
<db:title>bool QSemaphore::tryAcquire(int <db:emphasis>n</db:emphasis>, int <db:emphasis>timeout</db:emphasis>)</db:title>
<db:para>Tries to acquire n resources guarded by the semaphore and returns true on success. If <db:link xlink:href="qsemaphore.xml#available">available</db:link>() &lt; <db:code role="parameter">n</db:code>, this call will wait for at most <db:code role="parameter">timeout</db:code> milliseconds for resources to become available.</db:para>
<db:para>Note: Passing a negative number as the <db:code role="parameter">timeout</db:code> is equivalent to calling <db:link xlink:href="qsemaphore.xml#acquire">acquire</db:link>(), i.e. this function will wait forever for resources to become available if <db:code role="parameter">timeout</db:code> is negative.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QSemaphore sem(5);            // sem.available() == 5
sem.tryAcquire(250, 1000);    // sem.available() == 5, waits 1000 milliseconds and returns false
sem.tryAcquire(3, 30000);     // sem.available() == 2, returns true without waiting
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsemaphore.xml#acquire">acquire</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
