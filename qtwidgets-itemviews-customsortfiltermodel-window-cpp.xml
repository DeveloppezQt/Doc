<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Custom Sort/Filter Model Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Custom Sort/Filter Model example illustrates how to subclass <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> to perform advanced sorting and filtering.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;mysortfilterproxymodel.h&quot;
#include &quot;window.h&quot;
#include &quot;filterwidget.h&quot;

Window::Window()
{
    proxyModel = new MySortFilterProxyModel(this);

    sourceView = new QTreeView;
    sourceView-&gt;setRootIsDecorated(false);
    sourceView-&gt;setAlternatingRowColors(true);

    QHBoxLayout *sourceLayout = new QHBoxLayout;
    sourceLayout-&gt;addWidget(sourceView);
    sourceGroupBox = new QGroupBox(tr(&quot;Original Model&quot;));
    sourceGroupBox-&gt;setLayout(sourceLayout);

    filterWidget = new FilterWidget;
    filterWidget-&gt;setText(&quot;Grace|Sports&quot;);
    connect(filterWidget, &amp;FilterWidget::filterChanged, this, &amp;Window::textFilterChanged);

    filterPatternLabel = new QLabel(tr(&quot;&amp;Filter pattern:&quot;));
    filterPatternLabel-&gt;setBuddy(filterWidget);

    fromDateEdit = new QDateEdit;
    fromDateEdit-&gt;setDate(QDate(1970, 01, 01));
    fromLabel = new QLabel(tr(&quot;F&amp;rom:&quot;));
    fromLabel-&gt;setBuddy(fromDateEdit);

    toDateEdit = new QDateEdit;
    toDateEdit-&gt;setDate(QDate(2099, 12, 31));
    toLabel = new QLabel(tr(&quot;&amp;To:&quot;));
    toLabel-&gt;setBuddy(toDateEdit);

    connect(filterWidget, &amp;QLineEdit::textChanged,
            this, &amp;Window::textFilterChanged);
    connect(fromDateEdit, &amp;QDateTimeEdit::dateChanged,
            this, &amp;Window::dateFilterChanged);
    connect(toDateEdit, &amp;QDateTimeEdit::dateChanged,
            this, &amp;Window::dateFilterChanged);

    proxyView = new QTreeView;
    proxyView-&gt;setRootIsDecorated(false);
    proxyView-&gt;setAlternatingRowColors(true);
    proxyView-&gt;setModel(proxyModel);
    proxyView-&gt;setSortingEnabled(true);
    proxyView-&gt;sortByColumn(1, Qt::AscendingOrder);

    QGridLayout *proxyLayout = new QGridLayout;
    proxyLayout-&gt;addWidget(proxyView, 0, 0, 1, 3);
    proxyLayout-&gt;addWidget(filterPatternLabel, 1, 0);
    proxyLayout-&gt;addWidget(filterWidget, 1, 1);
    proxyLayout-&gt;addWidget(fromLabel, 3, 0);
    proxyLayout-&gt;addWidget(fromDateEdit, 3, 1, 1, 2);
    proxyLayout-&gt;addWidget(toLabel, 4, 0);
    proxyLayout-&gt;addWidget(toDateEdit, 4, 1, 1, 2);

    proxyGroupBox = new QGroupBox(tr(&quot;Sorted/Filtered Model&quot;));
    proxyGroupBox-&gt;setLayout(proxyLayout);

    QVBoxLayout *mainLayout = new QVBoxLayout;
    mainLayout-&gt;addWidget(sourceGroupBox);
    mainLayout-&gt;addWidget(proxyGroupBox);
    setLayout(mainLayout);

    setWindowTitle(tr(&quot;Custom Sort/Filter Model&quot;));
    resize(500, 450);
}

void Window::setSourceModel(QAbstractItemModel *model)
{
    proxyModel-&gt;setSourceModel(model);
    sourceView-&gt;setModel(model);
}

void Window::textFilterChanged()
{
    QRegExp regExp(filterWidget-&gt;text(),
                   filterWidget-&gt;caseSensitivity(),
                   filterWidget-&gt;patternSyntax());
    proxyModel-&gt;setFilterRegExp(regExp);
}

void Window::dateFilterChanged()
{
    proxyModel-&gt;setFilterMinimumDate(fromDateEdit-&gt;date());
    proxyModel-&gt;setFilterMaximumDate(toDateEdit-&gt;date());
}

</db:programlisting>
</db:article>
