<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPluginLoader Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpluginloader.xml">QPluginLoader</db:link> class loads a plugin at run-time.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPluginLoader</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPluginLoader is part of <db:simplelist><db:member><db:link xlink:href="plugins.xml">Plugin Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qpluginloader.xml">QPluginLoader</db:link> provides access to a <db:link xlink:href="plugins-howto.xml">Qt plugin</db:link>. A Qt plugin is stored in a shared library (a DLL) and offers these benefits over shared libraries accessed using <db:link xlink:href="qlibrary.xml">QLibrary</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qpluginloader.xml">QPluginLoader</db:link> checks that a plugin is linked against the same version of Qt as the application.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpluginloader.xml">QPluginLoader</db:link> provides direct access to a root component object (<db:link xlink:href="qpluginloader.xml#instance">instance</db:link>()), instead of forcing you to resolve a C function manually.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>An instance of a <db:link xlink:href="qpluginloader.xml">QPluginLoader</db:link> object operates on a single shared library file, which we call a plugin. It provides access to the functionality in the plugin in a platform-independent way. To specify which plugin to load, either pass a file name in the constructor or set it with <db:link xlink:href="qpluginloader.xml#fileName-prop">setFileName</db:link>().</db:para>
<db:para>The most important functions are <db:link xlink:href="qpluginloader.xml#load">load</db:link>() to dynamically load the plugin file, <db:link xlink:href="qpluginloader.xml#isLoaded">isLoaded</db:link>() to check whether loading was successful, and <db:link xlink:href="qpluginloader.xml#instance">instance</db:link>() to access the root component in the plugin. The <db:link xlink:href="qpluginloader.xml#instance">instance</db:link>() function implicitly tries to load the plugin if it has not been loaded yet. Multiple instances of <db:link xlink:href="qpluginloader.xml">QPluginLoader</db:link> can be used to access the same physical plugin.</db:para>
<db:para>Once loaded, plugins remain in memory until all instances of <db:link xlink:href="qpluginloader.xml">QPluginLoader</db:link> has been unloaded, or until the application terminates. You can attempt to unload a plugin using <db:link xlink:href="qpluginloader.xml#unload">unload</db:link>(), but if other instances of <db:link xlink:href="qpluginloader.xml">QPluginLoader</db:link> are using the same library, the call will fail, and unloading will only happen when every instance has called <db:link xlink:href="qpluginloader.xml#unload">unload</db:link>(). Right before the unloading happen, the root component will also be deleted.</db:para>
<db:para>See <db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link> for more information about how to make your application extensible through plugins.</db:para>
<db:para>Note that the <db:link xlink:href="qpluginloader.xml">QPluginLoader</db:link> cannot be used if your application is statically linked against Qt. In this case, you will also have to link to plugins statically. You can use <db:link xlink:href="qlibrary.xml">QLibrary</db:link> if you need to load dynamic libraries in a statically linked application.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlibrary.xml">QLibrary</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-tools-plugandpaint-app-example.xml">Plug &amp; Paint Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="fileName-prop">
<db:title>fileName : QString</db:title>
<db:para>This property holds the file name of the plugin</db:para>
<db:para>We recommend omitting the file's suffix in the file name, since <db:link xlink:href="qpluginloader.xml">QPluginLoader</db:link> will automatically look for the file with the appropriate suffix (see <db:link xlink:href="qlibrary.xml#isLibrary">QLibrary::isLibrary</db:link>()).</db:para>
<db:para>When loading the plugin, <db:link xlink:href="qpluginloader.xml">QPluginLoader</db:link> searches in the current directory and in all plugin locations specified by <db:link xlink:href="qcoreapplication.xml#libraryPaths">QCoreApplication::libraryPaths</db:link>(), unless the file name has an absolute path. After loading the plugin successfully, fileName() returns the fully-qualified file name of the plugin, including the full path to the plugin if one was given in the constructor or passed to setFileName().</db:para>
<db:para>If the file name does not exist, it will not be set. This property will then contain an empty string.</db:para>
<db:para>By default, this property contains an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">fileName</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFileName</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>fileName</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpluginloader.xml#load">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loadHints-prop">
<db:title>[since 4.4] loadHints : QLibrary::LoadHints</db:title>
<db:para>Give the <db:link xlink:href="qpluginloader.xml#load">load</db:link>() function some hints on how it should behave.</db:para>
<db:para>You can give hints on how the symbols in the plugin are resolved. By default since Qt 5.7, <db:link xlink:href="qlibrary.xml#LoadHint-enum">QLibrary::PreventUnloadHint</db:link> is set.</db:para>
<db:para>See the documentation of <db:link xlink:href="qlibrary.xml#loadHints-prop">QLibrary::loadHints</db:link> for a complete description of how this property works.</db:para>
<db:para>This property was introduced in Qt 4.4.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlibrary.xml#LoadHint-enum">QLibrary::LoadHints</db:link></db:type> <db:emphasis role="bold">loadHints</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLoadHints</db:emphasis>(<db:type><db:link xlink:href="qlibrary.xml#LoadHint-enum">QLibrary::LoadHints</db:link></db:type> <db:emphasis>loadHints</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlibrary.xml#loadHints-prop">QLibrary::loadHints</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPluginLoader">
<db:title>[explicit] QPluginLoader::QPluginLoader(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a plugin loader with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QPluginLoader-1">
<db:title>[explicit] QPluginLoader::QPluginLoader(const QString &amp;<db:emphasis>fileName</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a plugin loader with the given <db:code role="parameter">parent</db:code> that will load the plugin specified by <db:code role="parameter">fileName</db:code>.</db:para>
<db:para>To be loadable, the file's suffix must be a valid suffix for a loadable library in accordance with the platform, e.g. .so on Unix, - .dylib on macOS and iOS, and .dll on Windows. The suffix can be verified with <db:link xlink:href="qlibrary.xml#isLibrary">QLibrary::isLibrary</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpluginloader.xml#fileName-prop">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QPluginLoader">
<db:title>[virtual noexcept] QPluginLoader::~QPluginLoader()</db:title>
<db:para>Destroys the <db:link xlink:href="qpluginloader.xml">QPluginLoader</db:link> object.</db:para>
<db:para>Unless <db:link xlink:href="qpluginloader.xml#unload">unload</db:link>() was called explicitly, the plugin stays in memory until the application terminates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpluginloader.xml#isLoaded">isLoaded</db:link>()</db:member>
<db:member><db:link xlink:href="qpluginloader.xml#unload">unload</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>[since 4.2] QString QPluginLoader::errorString() const</db:title>
<db:para>Returns a text string with the description of the last error that occurred.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="instance">
<db:title>QObject *QPluginLoader::instance()</db:title>
<db:para>Returns the root component object of the plugin. The plugin is loaded if necessary. The function returns 0 if the plugin could not be loaded or if the root component object could not be instantiated.</db:para>
<db:para>If the root component object was destroyed, calling this function creates a new instance.</db:para>
<db:para>The root component, returned by this function, is not deleted when the <db:link xlink:href="qpluginloader.xml">QPluginLoader</db:link> is destroyed. If you want to ensure that the root component is deleted, you should call <db:link xlink:href="qpluginloader.xml#unload">unload</db:link>() as soon you don't need to access the core component anymore. When the library is finally unloaded, the root component will automatically be deleted.</db:para>
<db:para>The component object is a <db:link xlink:href="qobject.xml">QObject</db:link>. Use qobject_cast() to access interfaces you are interested in.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpluginloader.xml#load">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isLoaded">
<db:title>bool QPluginLoader::isLoaded() const</db:title>
<db:para>Returns true if the plugin is loaded; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpluginloader.xml#load">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="load">
<db:title>bool QPluginLoader::load()</db:title>
<db:para>Loads the plugin and returns true if the plugin was loaded successfully; otherwise returns false. Since <db:link xlink:href="qpluginloader.xml#instance">instance</db:link>() always calls this function before resolving any symbols it is not necessary to call it explicitly. In some situations you might want the plugin loaded in advance, in which case you would use this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpluginloader.xml#unload">unload</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="metaData">
<db:title>QJsonObject QPluginLoader::metaData() const</db:title>
<db:para>Returns the meta data for this plugin. The meta data is data specified in a json format using the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro when compiling the plugin.</db:para>
<db:para>The meta data can be queried in a fast and inexpensive way without actually loading the plugin. This makes it possible to e.g. store capabilities of the plugin in there, and make the decision whether to load the plugin dependent on this meta data.</db:para>
</db:section>
<db:section xml:id="staticInstances">
<db:title>[static] QObjectList QPluginLoader::staticInstances()</db:title>
<db:para>Returns a list of static plugin instances (root components) held by the plugin loader.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpluginloader.xml#staticPlugins">staticPlugins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="staticPlugins">
<db:title>[static] QVector&lt;QStaticPlugin&gt; QPluginLoader::staticPlugins()</db:title>
<db:para>Returns a list of QStaticPlugins held by the plugin loader. The function is similar to <db:link xlink:href="qpluginloader.xml#staticInstances">staticInstances</db:link>() with the addition that a <db:link xlink:href="qstaticplugin.xml">QStaticPlugin</db:link> also contains meta data information.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpluginloader.xml#staticInstances">staticInstances</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unload">
<db:title>bool QPluginLoader::unload()</db:title>
<db:para>Unloads the plugin and returns true if the plugin could be unloaded; otherwise returns false.</db:para>
<db:para>This happens automatically on application termination, so you shouldn't normally need to call this function.</db:para>
<db:para>If other instances of <db:link xlink:href="qpluginloader.xml">QPluginLoader</db:link> are using the same plugin, the call will fail, and unloading will only happen when every instance has called unload().</db:para>
<db:para>Don't try to delete the root component. Instead rely on that unload() will automatically delete it when needed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpluginloader.xml#instance">instance</db:link>()</db:member>
<db:member><db:link xlink:href="qpluginloader.xml#load">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qRegisterStaticPluginFunction">
<db:title>[since 5.0] void qRegisterStaticPluginFunction(QStaticPlugin <db:emphasis>plugin</db:emphasis>)</db:title>
<db:para>Registers the <db:code role="parameter">plugin</db:code> specified with the plugin loader, and is used by <db:link xlink:href="qtplugin.xml#Q_IMPORT_PLUGIN">Q_IMPORT_PLUGIN</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
</db:section>
</db:article>
