<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMediaTimeInterval Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmediatimeinterval.xml">QMediaTimeInterval</db:link> class represents a time interval with integer precision.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMediaTimeInterval</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMediaTimeInterval is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_core</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>An interval is specified by an inclusive <db:link xlink:href="qmediatimeinterval.xml#start">start</db:link>() and <db:link xlink:href="qmediatimeinterval.xml#end">end</db:link>() time. These must be set in the constructor, as this is an immutable class. The specific units of time represented by the class have not been defined - it is suitable for any times which can be represented by a signed 64 bit integer.</db:para>
<db:para>The <db:link xlink:href="qmediatimeinterval.xml#isNormal">isNormal</db:link>() method determines if a time interval is normal (a normal time interval has <db:link xlink:href="qmediatimeinterval.xml#start">start</db:link>() &lt;= <db:link xlink:href="qmediatimeinterval.xml#end">end</db:link>()). A normal interval can be received from an abnormal interval by calling the <db:link xlink:href="qmediatimeinterval.xml#normalized">normalized</db:link>() method.</db:para>
<db:para>The <db:link xlink:href="qmediatimeinterval.xml#contains">contains</db:link>() method determines if a specified time lies within the time interval.</db:para>
<db:para>The <db:link xlink:href="qmediatimeinterval.xml#translated">translated</db:link>() method returns a time interval which has been translated forwards or backwards through time by a specified offset.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediatimerange.xml">QMediaTimeRange</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMediaTimeInterval">
<db:title>QMediaTimeInterval::QMediaTimeInterval()</db:title>
<db:constructorsynopsis>
<db:methodname>QMediaTimeInterval</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaTimeInterval()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty interval.</db:para>
</db:section>
<db:section xml:id="QMediaTimeInterval-1">
<db:title>QMediaTimeInterval::QMediaTimeInterval(qint64 <db:emphasis>start</db:emphasis>, qint64 <db:emphasis>end</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMediaTimeInterval</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>end</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaTimeInterval(qint64 start, qint64 end)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an interval with the specified <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> times.</db:para>
</db:section>
<db:section xml:id="QMediaTimeInterval-2">
<db:title>QMediaTimeInterval::QMediaTimeInterval(const QMediaTimeInterval &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMediaTimeInterval</db:methodname>
<db:methodparam>
<db:type>const QMediaTimeInterval &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaTimeInterval(const QMediaTimeInterval &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an interval by taking a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="contains">
<db:title>bool QMediaTimeInterval::contains(qint64 <db:emphasis>time</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>time</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(qint64 time) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the time interval contains the specified <db:code role="parameter">time</db:code>. That is, <db:link xlink:href="qmediatimeinterval.xml#start">start</db:link>() &lt;= time &lt;= <db:link xlink:href="qmediatimeinterval.xml#end">end</db:link>().</db:para>
</db:section>
<db:section xml:id="end">
<db:title>qint64 QMediaTimeInterval::end() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>end</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 end() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the end time of the interval.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediatimeinterval.xml#start">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNormal">
<db:title>bool QMediaTimeInterval::isNormal() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNormal</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNormal() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this time interval is normal. A normal time interval has <db:link xlink:href="qmediatimeinterval.xml#start">start</db:link>() &lt;= <db:link xlink:href="qmediatimeinterval.xml#end">end</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediatimeinterval.xml#normalized">normalized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normalized">
<db:title>QMediaTimeInterval QMediaTimeInterval::normalized() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMediaTimeInterval</db:type>
<db:methodname>normalized</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaTimeInterval normalized() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a normalized version of this interval.</db:para>
<db:para>If the <db:link xlink:href="qmediatimeinterval.xml#start">start</db:link>() time of the interval is greater than the <db:link xlink:href="qmediatimeinterval.xml#end">end</db:link>() time, then the returned interval has the start and end times swapped.</db:para>
</db:section>
<db:section xml:id="start">
<db:title>qint64 QMediaTimeInterval::start() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>start</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 start() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the start time of the interval.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediatimeinterval.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translated">
<db:title>QMediaTimeInterval QMediaTimeInterval::translated(qint64 <db:emphasis>offset</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMediaTimeInterval</db:type>
<db:methodname>translated</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>offset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaTimeInterval translated(qint64 offset) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of this time interval, translated by a value of <db:code role="parameter">offset</db:code>. An interval can be moved forward through time with a positive offset, or backward through time with a negative offset.</db:para>
</db:section>
</db:section>
</db:article>
