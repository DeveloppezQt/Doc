<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Deploying Qt Quick Controls 2 Applications</db:title>
<db:productname>QtQuickControls2</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls 2 Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Quick Controls 2 Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Deployment of Qt Quick Controls 2 applications is very similar to deployment of other types of Qt applications. However, there are a few factors to consider.</db:para>
<db:section xml:id="deploying-an-application-with-several-styles">
<db:title>Deploying an Application with Several Styles</db:title>
<db:para>Suppose you have an application that will be deployed to both Android and Windows devices. To ensure that only the minimum set of files that are necessary for the application to run are deployed to each device, you can use file selectors. For example, your directory structure could look like this:</db:para>
<db:programlisting language="cpp">resources.qrc
main.qml
+windows/MyPage.qml
+windows/qtquickcontrols2.conf
+android/MyPage.qml
+android/qtquickcontrols2.conf
</db:programlisting>
<db:para>In the project above, <db:code>main.qml</db:code> would import <db:code>QtQuick.Controls</db:code>, for example, but shouldn't import, say, <db:code>QtQuick.Controls.Material</db:code>. Any code that is style-specific is moved out into separate files; just as we've done for <db:code>MyPage.qml</db:code>.</db:para>
<db:para>The <db:code>+windows/qtquickcontrols2.conf</db:code> file would contain configuration options specific to the Universal style:</db:para>
<db:programlisting language="cpp">[Controls]
Style=Universal

[Universal]
Theme=Dark
Accent=Red
</db:programlisting>
<db:para>The <db:code>+android/qtquickcontrols2.conf</db:code> file would contain configuration options specific to the Material style:</db:para>
<db:programlisting language="cpp">[Controls]
Style=Material

[Material]
Theme=Light
Accent=Brown
</db:programlisting>
</db:section>
<db:section xml:id="static-builds">
<db:title>Static Builds</db:title>
<db:para>For dynamically built applications, it is not necessary to import a specific style that should be usable by that application. For statically built applications, Qt's build system must be involved to ensure that QML plugins function as expected. Specifically, <db:code>qmake</db:code> uses <db:code>qmlimportscanner</db:code> to scan the QML files in your application for import statements. For this reason, any styles that should be usable by a statically built application must explicitly import that style. Where the import occurs is up to the developer, but it is recommended to follow the approach mentioned in the <db:link xlink:href="qtquickcontrols2-deployment.xml#deploying-an-application-with-several-styles">Deploying an Application with Several Styles</db:link> section, so that only the minimum set of files that are necessary for a particular device are deployed.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="deployment.xml">Deploying Qt Applications</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
