<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Custom Chart Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how to customize the appearance of the different elements on a chart.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Charts module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets/QApplication&gt;
#include &lt;QtWidgets/QMainWindow&gt;
#include &lt;QtCharts/QChartView&gt;
#include &lt;QtCharts/QLineSeries&gt;
#include &lt;QtCharts/QCategoryAxis&gt;

QT_CHARTS_USE_NAMESPACE

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);

    QLineSeries *series = new QLineSeries();
    *series &lt;&lt; QPointF(0, 6) &lt;&lt; QPointF(9, 4) &lt;&lt; QPointF(15, 20) &lt;&lt; QPointF(25, 12) &lt;&lt; QPointF(29, 26);
    QChart *chart = new QChart();
    chart-&gt;legend()-&gt;hide();
    chart-&gt;addSeries(series);

    // Customize series
    QPen pen(QRgb(0xfdb157));
    pen.setWidth(5);
    series-&gt;setPen(pen);

    // Customize chart title
    QFont font;
    font.setPixelSize(18);
    chart-&gt;setTitleFont(font);
    chart-&gt;setTitleBrush(QBrush(Qt::white));
    chart-&gt;setTitle(&quot;Customchart example&quot;);

    // Customize chart background
    QLinearGradient backgroundGradient;
    backgroundGradient.setStart(QPointF(0, 0));
    backgroundGradient.setFinalStop(QPointF(0, 1));
    backgroundGradient.setColorAt(0.0, QRgb(0xd2d0d1));
    backgroundGradient.setColorAt(1.0, QRgb(0x4c4547));
    backgroundGradient.setCoordinateMode(QGradient::ObjectBoundingMode);
    chart-&gt;setBackgroundBrush(backgroundGradient);

    // Customize plot area background
    QLinearGradient plotAreaGradient;
    plotAreaGradient.setStart(QPointF(0, 1));
    plotAreaGradient.setFinalStop(QPointF(1, 0));
    plotAreaGradient.setColorAt(0.0, QRgb(0x555555));
    plotAreaGradient.setColorAt(1.0, QRgb(0x55aa55));
    plotAreaGradient.setCoordinateMode(QGradient::ObjectBoundingMode);
    chart-&gt;setPlotAreaBackgroundBrush(plotAreaGradient);
    chart-&gt;setPlotAreaBackgroundVisible(true);

    QCategoryAxis *axisX = new QCategoryAxis();
    QCategoryAxis *axisY = new QCategoryAxis();

    // Customize axis label font
    QFont labelsFont;
    labelsFont.setPixelSize(12);
    axisX-&gt;setLabelsFont(labelsFont);
    axisY-&gt;setLabelsFont(labelsFont);

    // Customize axis colors
    QPen axisPen(QRgb(0xd18952));
    axisPen.setWidth(2);
    axisX-&gt;setLinePen(axisPen);
    axisY-&gt;setLinePen(axisPen);

    // Customize axis label colors
    QBrush axisBrush(Qt::white);
    axisX-&gt;setLabelsBrush(axisBrush);
    axisY-&gt;setLabelsBrush(axisBrush);

    // Customize grid lines and shades
    axisX-&gt;setGridLineVisible(false);
    axisY-&gt;setGridLineVisible(false);
    axisY-&gt;setShadesPen(Qt::NoPen);
    axisY-&gt;setShadesBrush(QBrush(QColor(0x99, 0xcc, 0xcc, 0x55)));
    axisY-&gt;setShadesVisible(true);

    axisX-&gt;append(&quot;low&quot;, 10);
    axisX-&gt;append(&quot;optimal&quot;, 20);
    axisX-&gt;append(&quot;high&quot;, 30);
    axisX-&gt;setRange(0, 30);

    axisY-&gt;append(&quot;slow&quot;, 10);
    axisY-&gt;append(&quot;med&quot;, 20);
    axisY-&gt;append(&quot;fast&quot;, 30);
    axisY-&gt;setRange(0, 30);

    chart-&gt;setAxisX(axisX, series);
    chart-&gt;setAxisY(axisY, series);

    QChartView *chartView = new QChartView(chart);
    chartView-&gt;setRenderHint(QPainter::Antialiasing);

    QMainWindow window;
    window.setCentralWidget(chartView);
    window.resize(400, 300);
    window.show();

    return a.exec();
}

</db:programlisting>
</db:article>
