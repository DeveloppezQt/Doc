<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Unqualified</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>[unqualified] Accessing an outer scope without its id.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This warning category is spelled [unqualified] by qmllint.</db:para>
<db:section xml:id="unqualified-access">
<db:title>Unqualified access</db:title>
<db:section xml:id="what-happened">
<db:title>What happened?</db:title>
<db:para>You accessed a parent element without its <db:link xlink:href="qtqml-syntax-objectattributes.xml#the-id-attribute">id</db:link>.</db:para>
</db:section>
<db:section xml:id="why-is-this-bad">
<db:title>Why is this bad?</db:title>
<db:para>This makes the code harder to read and impedes performance.</db:para>
</db:section>
<db:section xml:id="example">
<db:title>Example</db:title>
<db:programlisting language="qml">import QtQuick

Item {
    property int helloWorld
    Item {
        property int unqualifiedAccess: helloWorld + 1 // not ok: Unqualified access here.
    }
}
</db:programlisting>
<db:para>To fix this warning, refer to the parent object by <db:link xlink:href="qtqml-syntax-objectattributes.xml#the-id-attribute">id</db:link>. You will need to add an <db:link xlink:href="qtqml-syntax-objectattributes.xml#the-id-attribute">id</db:link> first if the object currently has none.</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    id: root
    property int helloWorld
    Item {
        property int unqualifiedAccess: root.helloWorld + 1 // ok: this access is qualified now!
    }
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="unknown-attached-grouped-property-scope">
<db:title>Unknown attached/grouped property scope</db:title>
<db:section xml:id="unknown-attached-grouped-property-scope-what-happened-5">
<db:title>What happened?</db:title>
<db:para>You used an <db:link xlink:href="qtqml-syntax-objectattributes.xml#attached-properties-and-attached-signal-handlers">attached property</db:link> type or <db:link xlink:href="qtqml-syntax-objectattributes.xml#grouped-properties">grouped property</db:link> that can't be found. This can be caused by a typo or by a missing QML module dependency.</db:para>
<db:note>
<db:para>If you are importing QML modules with external dependencies, verify that they are actually installed and inside an <db:link xlink:href="qtqml-syntax-imports.xml#qml-import-path">import path</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="unknown-attached-grouped-property-scope-why-is-this-bad-6">
<db:title>Why is this bad?</db:title>
<db:para>Components with unknown attached property scopes or unknown grouped properties will not be created at runtime: they will be null instead.</db:para>
</db:section>
<db:section xml:id="unknown-attached-grouped-property-scope-example-7">
<db:title>Example</db:title>
<db:para>Let's try to use the (inexistent) attached property of Item or the (inexistent) grouped property grouped of Item:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    Item.helloAttached: 44 // not ok: unknown attached property scope Item. [unqualified]
    grouped.helloGrouped: 44 // not ok: unknown grouped property scope grouped. [unqualified]
}
</db:programlisting>
<db:para>Indeed, Item does neither have any attached type nor any grouped property called item. To fix this warning, remove the attached type and the grouped property.</db:para>
<db:para>Refer to <db:link xlink:href="qtqml-syntax-objectattributes.xml#attached-properties-and-attached-signal-handlers">Attached Properties and Attached Signal Handlers</db:link> on how to use attached properties and to <db:link xlink:href="qtqml-syntax-objectattributes.xml#grouped-properties">Grouped Properties</db:link> on how to use grouped properties.</db:para>
</db:section>
</db:section>
<db:section xml:id="no-matching-signal-found-for-handler">
<db:title>No matching signal found for handler</db:title>
<db:section xml:id="no-matching-signal-found-for-handler-what-happened-9">
<db:title>What happened?</db:title>
<db:para>You used a <db:link xlink:href="qtqml-syntax-signals.xml">signal handler</db:link> on a signal that can't be found. This can be caused by a typo in the signal handler or by a missing QML module dependency.</db:para>
<db:note>
<db:para>The name of a signal handler is on concatenated with the capitalized signal name. onHelloWorld handles the signal helloWorld and on_helloWorld handles _helloWorld, for example.</db:para>
</db:note>
<db:note>
<db:para>If you are importing QML modules with external dependencies, verify that they are actually installed and inside an <db:link xlink:href="qtqml-syntax-imports.xml#qml-import-path">import path</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="no-matching-signal-found-for-handler-why-is-this-bad-10">
<db:title>Why is this bad?</db:title>
<db:para>Components with unknown signal handlers will not be created at runtime: they will be null instead.</db:para>
</db:section>
<db:section xml:id="no-matching-signal-found-for-handler-example-11">
<db:title>Example</db:title>
<db:para>Lets try to write a signal handler for the (inexistent) signal mySignal:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    onMySignal: console.log(&quot;hello&quot;) // not ok: no matching signal found for handler &quot;onMySignal&quot; [unqualified]
}
</db:programlisting>
<db:para>Indeed, this Item does not have any signal called mySignal. To fix this warning, remove the signal handler or add the missing signal.</db:para>
</db:section>
</db:section>
<db:section xml:id="implicitly-defining-signal-handler-in-connections-is-deprecated">
<db:title>Implicitly defining signal handler in Connections is deprecated</db:title>
<db:section xml:id="implicitly-defining-signal-handler-in-connections-is-deprecated-what-happened-13">
<db:title>What happened?</db:title>
<db:para>You used a signal handler on a <db:link xlink:href="qml-qtqml-connections.xml">Connections</db:link> type.</db:para>
</db:section>
<db:section xml:id="implicitly-defining-signal-handler-in-connections-is-deprecated-why-is-this-bad-14">
<db:title>Why is this bad?</db:title>
<db:para>This is deprecated.</db:para>
</db:section>
<db:section xml:id="implicitly-defining-signal-handler-in-connections-is-deprecated-example-15">
<db:title>Example</db:title>
<db:programlisting language="qml">import QtQuick

Window {
    id: root
    property int myInt

    Connections {
        target: root
        onMyIntChanged: console.log(&quot;new int&quot;, myInt)
    }
}
</db:programlisting>
<db:para>To fix this warning, replace the signal handler binding with a function:</db:para>
<db:programlisting language="qml">import QtQuick

Window {
    id: root
    property int myInt

    Connections {
        target: root
        function onMyIntChanged() { console.log(&quot;new int&quot;, myInt) }
    }
}
</db:programlisting>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QML Coding Conventions - Unqualified Access</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
