<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMacNativeWidget Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmacnativewidget.xml">QMacNativeWidget</db:link> class provides a widget for macOS that provides a way to put Qt widgets into Cocoa hierarchies.</db:para>
<db:para>This class was introduced in Qt 4.5.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMacNativeWidget</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMacNativeWidget is part of <db:simplelist><db:member>advanced</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>On macOS, there is a difference between a window and view; normally expressed as widgets in Qt. Qt makes assumptions about its parent-child hierarchy that make it complex to put an arbitrary Qt widget into a hierarchy of &quot;normal&quot; views from Apple frameworks. <db:link xlink:href="qmacnativewidget.xml">QMacNativeWidget</db:link> bridges the gap between views and windows and makes it possible to put a hierarchy of Qt widgets into a non-Qt window or view.</db:para>
<db:para><db:link xlink:href="qmacnativewidget.xml">QMacNativeWidget</db:link> pretends it is a window (i.e. <db:link xlink:href="qwidget.xml#isWindow">isWindow</db:link>() will return true), but it cannot be shown on its own. It needs to be put into a window when it is created or later through a native call.</db:para>
<db:para><db:link xlink:href="qmacnativewidget.xml">QMacNativeWidget</db:link> works for either Carbon or Cocoa depending on how Qt was configured. If Qt is using Carbon, <db:link xlink:href="qmacnativewidget.xml">QMacNativeWidget</db:link> will embed into Carbon hierarchies. If Qt is using Cocoa, <db:link xlink:href="qmacnativewidget.xml">QMacNativeWidget</db:link> embeds into Cocoa hierarchies.</db:para>
<db:para>Here is an example of putting a <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> into a NSWindow:</db:para>
<db:programlisting language="cpp">    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSWindow *window = [[NSWindow alloc] initWithContentRect:NSMakeRect(200, app.desktop()-&gt;height() - 200, 239, 200)
                        styleMask:NSTitledWindowMask | NSClosableWindowMask
                                  | NSMiniaturizableWindowMask | NSResizableWindowMask
                        backing:NSBackingStoreBuffered defer:NO];

    QMacNativeWidget *nativeWidget = new QMacNativeWidget();
    nativeWidget-&gt;move(0, 0);
    nativeWidget-&gt;setPalette(QPalette(Qt::red));
    nativeWidget-&gt;setAutoFillBackground(true);
    QVBoxLayout *layout = new QVBoxLayout();
    QPushButton *pushButton = new QPushButton(&quot;An Embedded Qt Button!&quot;, nativeWidget);
    pushButton-&gt;setAttribute(Qt::WA_LayoutUsesWidgetRect); // Don't use the layout rect calculated from QMacStyle.
    layout-&gt;addWidget(pushButton);
    nativeWidget-&gt;setLayout(layout);

    // Adjust Cocoa layouts
    NSView *nativeWidgetView = reinterpret_cast&lt;NSView *&gt;(nativeWidget-&gt;winId());
    NSView *contentView = [window contentView];
    [contentView setAutoresizesSubviews:YES];
    [nativeWidgetView setAutoresizingMask:NSViewWidthSizable | NSViewHeightSizable];
    [nativeWidgetView setAutoresizesSubviews:YES];
    NSView *pushButtonView = reinterpret_cast&lt;NSView *&gt;(pushButton-&gt;winId());
    [pushButtonView setAutoresizingMask:NSViewWidthSizable];

    // Add the nativeWidget to the window.
    [contentView addSubview:nativeWidgetView positioned:NSWindowAbove relativeTo:nil];
    nativeWidget-&gt;show();
    pushButton-&gt;show();

    // Show the window.
    [window makeKeyAndOrderFront:window];
    [pool release];
</db:programlisting>
<db:para>Note that <db:link xlink:href="qmacnativewidget.xml">QMacNativeWidget</db:link> requires knowledge of Carbon or Cocoa. All it does is get the Qt hierarchy into a window not owned by Qt. It is then up to the programmer to ensure it is placed correctly in the window and responds correctly to events.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMacNativeWidget">
<db:title>QMacNativeWidget::QMacNativeWidget(NSView *<db:emphasis>parentView</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Create a <db:link xlink:href="qmacnativewidget.xml">QMacNativeWidget</db:link> with <db:code role="parameter">parentView</db:code> as its &quot;superview&quot; (i.e., parent). The <db:code role="parameter">parentView</db:code> is a NSView pointer.</db:para>
</db:section>
<db:section xml:id="dtor.QMacNativeWidget">
<db:title>[virtual noexcept] QMacNativeWidget::~QMacNativeWidget()</db:title>
<db:para>Destroy the <db:link xlink:href="qmacnativewidget.xml">QMacNativeWidget</db:link>.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QMacNativeWidget::event(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QMacNativeWidget::sizeHint() const</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#sizeHint-prop" role="property">QWidget::sizeHint</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
