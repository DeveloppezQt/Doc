<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Changes to Qt Concurrent</db:title>
<db:productname>QtConcurrent</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Concurrent Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Improved to work with a variable number of arguments.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt 6 is a result of the conscious effort to make the framework more efficient and easy to use.</db:para>
<db:para>We try to maintain binary and source compatibility for all the public APIs in each release. But some changes were inevitable in an effort to make Qt a better framework.</db:para>
<db:para>In this topic we summarize those changes in Qt Concurrent, and provide guidance to handle them.</db:para>
<db:section xml:id="qtconcurrent-run">
<db:title>QtConcurrent::run()</db:title>
<db:para>QtConcurrent::run() has been improved to work with a variable number of arguments, so the signatures are changed to:</db:para>
<db:programlisting language="cpp">// run
template &amp;lt;typename T&amp;gt;
QFuture&amp;lt;T&amp;gt; run(Function &amp;amp;&amp;amp;f, Args &amp;amp;&amp;amp;...args)

// run with a QThreadPool argument
template &amp;lt;typename T&amp;gt;
QFuture&amp;lt;T&amp;gt; run(QThreadPool *pool, Function &amp;amp;&amp;amp;f, Args &amp;amp;&amp;amp;...args)
</db:programlisting>
<db:para>As a side effect, if <db:code>f</db:code> is a pointer to a member function, the first argument of <db:code>args</db:code> should be the object for which that member is defined (or a reference, or a pointer to it). So instead of writing:</db:para>
<db:programlisting language="cpp">QImage image = ...;
QFuture&amp;lt;void&amp;gt; future = QtConcurrent::run(&amp;amp;image, &amp;amp;QImage::invertPixels, QImage::InvertRgba);
</db:programlisting>
<db:para>You have to write:</db:para>
<db:programlisting language="cpp">QFuture&amp;lt;void&amp;gt; future = QtConcurrent::run(&amp;amp;QImage::invertPixels, &amp;amp;image, QImage::InvertRgba);
</db:programlisting>
<db:para>Another side effect is that <db:code>QtConcurrent::run()</db:code> will not work with overloaded functions anymore. For example, the code below won't compile:</db:para>
<db:programlisting language="cpp">void foo(int arg);
void foo(int arg1, int arg2);
...
QFuture&amp;lt;void&amp;gt; future = QtConcurrent::run(foo, 42);
</db:programlisting>
<db:para>The easiest workaround is to call the overloaded function through lambda:</db:para>
<db:programlisting language="cpp">QFuture&amp;lt;void&amp;gt; future = QtConcurrent::run([] { foo(42); });
</db:programlisting>
<db:para>Or you can tell the compiler which overload to choose by using a <db:code>static_cast</db:code>:</db:para>
<db:programlisting language="cpp">QFuture&amp;lt;void&amp;gt; future = QtConcurrent::run(static_cast&amp;lt;void(*)(int)&amp;gt;(foo), 42);
</db:programlisting>
<db:para>Or <db:link xlink:href="qoverload-proxy.xml#qOverload">qOverload</db:link>:</db:para>
<db:programlisting language="cpp">QFuture&amp;lt;void&amp;gt; future = QtConcurrent::run(qOverload&amp;lt;int&amp;gt;(foo), 42);
</db:programlisting>
<db:para>Other methods of <db:link xlink:href="qtconcurrent-module.xml">QtConcurrent</db:link> have no behavioral changes and do not introduce source compatibility breaks.</db:para>
</db:section>
</db:article>
