<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QByteArrayList Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbytearraylist.xml">QByteArrayList</db:link> class provides a list of byte arrays.</db:para>
<db:para>This class was introduced in Qt 5.4.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QByteArrayList</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qlist.xml" xlink:role="class">QList</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QByteArrayList is part of <db:simplelist><db:member>tools</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member><db:member>string-processing</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qbytearraylist.xml">QByteArrayList</db:link> is actually just a <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qbytearray.xml">QByteArray</db:link>&gt;. It is documented as a full class just for simplicity of documenting the member methods that exist only in <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qbytearray.xml">QByteArray</db:link>&gt;.</db:para>
<db:para>All of <db:link xlink:href="qlist.xml">QList</db:link>'s functionality also applies to <db:link xlink:href="qbytearraylist.xml">QByteArrayList</db:link>. For example, you can use <db:link xlink:href="qlist.xml#isEmpty">isEmpty</db:link>() to test whether the list is empty, and you can call functions like <db:link xlink:href="qlist.xml#append">append</db:link>(), <db:link xlink:href="qlist.xml#prepend">prepend</db:link>(), <db:link xlink:href="qlist.xml#insert">insert</db:link>(), <db:link xlink:href="qlist.xml#replace">replace</db:link>(), <db:link xlink:href="qlist.xml#removeAll">removeAll</db:link>(), <db:link xlink:href="qlist.xml#removeAt">removeAt</db:link>(), <db:link xlink:href="qlist.xml#removeFirst">removeFirst</db:link>(), <db:link xlink:href="qlist.xml#removeLast">removeLast</db:link>(), and <db:link xlink:href="qlist.xml#removeOne">removeOne</db:link>() to modify a <db:link xlink:href="qbytearraylist.xml">QByteArrayList</db:link>. In addition, <db:link xlink:href="qbytearraylist.xml">QByteArrayList</db:link> provides several <db:link xlink:href="qbytearraylist.xml#join">join</db:link>() methods for concatenating the list into a single <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>The purpose of <db:link xlink:href="qbytearraylist.xml">QByteArrayList</db:link> is quite different from that of <db:link xlink:href="qstringlist.xml">QStringList</db:link>. Whereas <db:link xlink:href="qstringlist.xml">QStringList</db:link> has many methods for manipulation of elements within the list, <db:link xlink:href="qbytearraylist.xml">QByteArrayList</db:link> does not. Normally, <db:link xlink:href="qstringlist.xml">QStringList</db:link> should be used whenever working with a list of printable strings. <db:link xlink:href="qbytearraylist.xml">QByteArrayList</db:link> should be used to handle and efficiently join large blobs of binary data, as when sequentially receiving serialized data through a <db:link xlink:href="qiodevice.xml">QIODevice</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:member>
<db:member><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="indexOf">
<db:title>[since 5.13] int QByteArrayList::indexOf(const char *<db:emphasis>needle</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexOf</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>needle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>from</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexOf(const char *needle, int from) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index position of the first occurrence of <db:code role="parameter">needle</db:code> in the list, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if no item matched.</db:para>
<db:para><db:code role="parameter">needle</db:code> must be NUL-terminated.</db:para>
<db:para>This overload doesn't require creating a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, thus saving a memory allocation and some CPU time.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 5.13.</db:para>
</db:section>
<db:section xml:id="join">
<db:title>QByteArray QByteArrayList::join() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>join</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray join() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Joins all the byte arrays into a single byte array.</db:para>
</db:section>
<db:section xml:id="join-1">
<db:title>QByteArray QByteArrayList::join(const QByteArray &amp;<db:emphasis>separator</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>join</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>separator</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray join(const QByteArray &amp;separator) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Joins all the byte arrays into a single byte array with each element separated by the given <db:code role="parameter">separator</db:code>.</db:para>
</db:section>
<db:section xml:id="join-2">
<db:title>QByteArray QByteArrayList::join(char <db:emphasis>separator</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>join</db:methodname>
<db:methodparam>
<db:type>char</db:type>
<db:parameter>separator</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray join(char separator) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Joins all the byte arrays into a single byte array with each element separated by the given <db:code role="parameter">separator</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="QByteArrayListIterator-typedef">
<db:title>QByteArrayListIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>QByteArrayListIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The QByteArrayListIterator type definition provides a Java-style const iterator for <db:link xlink:href="qbytearraylist.xml">QByteArrayList</db:link>.</db:para>
<db:para><db:link xlink:href="qbytearraylist.xml">QByteArrayList</db:link> provides both <db:link xlink:href="containers.xml#java-style-iterators">Java-style iterators</db:link> and <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link>. The Java-style const iterator is simply a type definition for <db:link xlink:href="qlistiterator.xml">QListIterator</db:link>&lt;<db:link xlink:href="qbytearray.xml">QByteArray</db:link>&gt;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearraylist.xml#QMutableByteArrayListIterator-typedef">QMutableByteArrayListIterator</db:link></db:member>
<db:member><db:link xlink:href="qlist-const-iterator.xml">QByteArrayList::const_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QMutableByteArrayListIterator-typedef">
<db:title>QMutableByteArrayListIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>QMutableByteArrayListIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The <db:link xlink:href="qbytearraylist.xml#QByteArrayListIterator-typedef">QByteArrayListIterator</db:link> type definition provides a Java-style non-const iterator for <db:link xlink:href="qbytearraylist.xml">QByteArrayList</db:link>.</db:para>
<db:para><db:link xlink:href="qbytearraylist.xml">QByteArrayList</db:link> provides both <db:link xlink:href="containers.xml#java-style-iterators">Java-style iterators</db:link> and <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link>. The Java-style non-const iterator is simply a type definition for <db:link xlink:href="qmutablelistiterator.xml">QMutableListIterator</db:link>&lt;<db:link xlink:href="qbytearray.xml">QByteArray</db:link>&gt;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearraylist.xml#QByteArrayListIterator-typedef">QByteArrayListIterator</db:link></db:member>
<db:member><db:link xlink:href="qlist-iterator.xml">QByteArrayList::iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
