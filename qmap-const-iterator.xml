<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>const_iterator Class</db:title>
<db:subtitle>QMap::const_iterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmap-const-iterator.xml">QMap::const_iterator</db:link> class provides an STL-style const iterator for <db:link xlink:href="qmap.xml">QMap</db:link> and <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>const_iterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmap.xml">QMap</db:link> features both <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link> and <db:link xlink:href="containers.xml#java-style-iterators">Java-style iterators</db:link>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</db:para>
<db:para><db:link xlink:href="qmap.xml">QMap</db:link>&lt;Key, T&gt;::const_iterator allows you to iterate over a <db:link xlink:href="qmap.xml">QMap</db:link> (or a <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>). If you want to modify the <db:link xlink:href="qmap.xml">QMap</db:link> as you iterate over it, you must use <db:link xlink:href="qmap-iterator.xml">QMap::iterator</db:link> instead. It is generally good practice to use <db:link xlink:href="qmap-const-iterator.xml">QMap::const_iterator</db:link> on a non-const <db:link xlink:href="qmap.xml">QMap</db:link> as well, unless you need to change the <db:link xlink:href="qmap.xml">QMap</db:link> through the iterator. Const iterators are slightly faster, and can improve code readability.</db:para>
<db:para>The default <db:link xlink:href="qmap-const-iterator.xml">QMap::const_iterator</db:link> constructor creates an uninitialized iterator. You must initialize it using a <db:link xlink:href="qmap.xml">QMap</db:link> function like QMap::constBegin(), QMap::constEnd(), or QMap::find() before you can start iterating. Here's a typical loop that prints all the (key, value) pairs stored in a map:</db:para>
<db:programlisting language="cpp">QMap&lt;QString, int&gt; map;
map.insert(&quot;January&quot;, 1);
map.insert(&quot;February&quot;, 2);
...
map.insert(&quot;December&quot;, 12);

QMap&lt;QString, int&gt;::const_iterator i;
for (i = map.constBegin(); i != map.constEnd(); ++i)
    cout &lt;&lt; i.key() &lt;&lt; &quot;: &quot; &lt;&lt; i.value() &lt;&lt; endl;
</db:programlisting>
<db:para>Unlike <db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link>, which stores its items in an arbitrary order, <db:link xlink:href="qmap.xml">QMap</db:link> stores its items ordered by key. Items that share the same key (because they were inserted using QMap::insertMulti()) will appear consecutively, from the most recently to the least recently inserted value.</db:para>
<db:para>Multiple iterators can be used on the same map. If you add items to the map, existing iterators will remain valid. If you remove items from the map, iterators that point to the removed items will become dangling iterators.</db:para>
<db:warning>
<db:para>Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <db:link xlink:href="containers.xml#implicit-sharing-iterator-problem">Implicit sharing iterator problem</db:link>.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmap-iterator.xml">QMap::iterator</db:link></db:member>
<db:member><db:link xlink:href="qmapiterator.xml">QMapIterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="iterator_category-typedef">
<db:title>const_iterator::iterator_category</db:title>
<db:para>A synonym for <db:emphasis>std::bidirectional_iterator_tag</db:emphasis> indicating this iterator is a bidirectional iterator.</db:para>
</db:section>
</db:section>
</db:article>
