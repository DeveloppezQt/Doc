<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Spectrum Example</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Analyzing a raw audio stream using the FFTReal library.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/*****************************************************************************

        FFTRealFixLen.h
        Copyright (c) 2005 Laurent de Soras

--- Legal stuff ---

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*Tab=3***********************************************************************/

#if ! defined (FFTRealFixLen_HEADER_INCLUDED)
#define FFTRealFixLen_HEADER_INCLUDED

#if defined (_MSC_VER)
        #pragma once
        #pragma warning (4 : 4250) // &quot;Inherits via dominance.&quot;
#endif

/*\\\ INCLUDE FILES \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

#include        &quot;Array.h&quot;
#include        &quot;DynArray.h&quot;
#include        &quot;FFTRealFixLenParam.h&quot;
#include        &quot;OscSinCos.h&quot;

template &amp;lt;int LL2&amp;gt;
class FFTRealFixLen
{
        typedef int     CompileTimeCheck1 [(LL2 &amp;gt;=  0) ? 1 : -1];
        typedef int     CompileTimeCheck2 [(LL2 &amp;lt;= 30) ? 1 : -1];

/*\\\ PUBLIC \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

public:

   typedef      FFTRealFixLenParam::DataType   DataType;
        typedef OscSinCos &amp;lt;DataType&amp;gt;    OscType;

        enum {                  FFT_LEN_L2      = LL2   };
        enum {                  FFT_LEN         = 1 &amp;lt;&amp;lt; FFT_LEN_L2       };

                                                FFTRealFixLen ();

        inline long             get_length () const;
        void                            do_fft (DataType f [], const DataType x []);
        void                            do_ifft (const DataType f [], DataType x []);
        void                            rescale (DataType x []) const;

/*\\\ PROTECTED \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

protected:

/*\\\ PRIVATE \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

private:

        enum {                  TRIGO_BD_LIMIT  = FFTRealFixLenParam::TRIGO_BD_LIMIT    };

        enum {                  BR_ARR_SIZE_L2  = ((FFT_LEN_L2 - 3) &amp;lt; 0) ? 0 : (FFT_LEN_L2 - 2) };
        enum {                  BR_ARR_SIZE             = 1 &amp;lt;&amp;lt; BR_ARR_SIZE_L2   };

   enum {                       TRIGO_BD                        =   ((FFT_LEN_L2 - TRIGO_BD_LIMIT) &amp;lt; 0)
                                                                                          ? (int)FFT_LEN_L2
                                                                                          : (int)TRIGO_BD_LIMIT };
        enum {                  TRIGO_TABLE_ARR_SIZE_L2 = (LL2 &amp;lt; 4) ? 0 : (TRIGO_BD - 2)        };
        enum {                  TRIGO_TABLE_ARR_SIZE    = 1 &amp;lt;&amp;lt; TRIGO_TABLE_ARR_SIZE_L2  };

        enum {                  NBR_TRIGO_OSC                   = FFT_LEN_L2 - TRIGO_BD };
        enum {                  TRIGO_OSC_ARR_SIZE      =       (NBR_TRIGO_OSC &amp;gt; 0) ? NBR_TRIGO_OSC : 1 };

        void                            build_br_lut ();
        void                            build_trigo_lut ();
        void                            build_trigo_osc ();

        DynArray &amp;lt;DataType&amp;gt;
                                                _buffer;
        DynArray &amp;lt;long&amp;gt;
                                                _br_data;
        DynArray &amp;lt;DataType&amp;gt;
                                                _trigo_data;
   Array &amp;lt;OscType, TRIGO_OSC_ARR_SIZE&amp;gt;
                                                _trigo_osc;

/*\\\ FORBIDDEN MEMBER FUNCTIONS \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

private:

                                                FFTRealFixLen (const FFTRealFixLen &amp;amp;other);
        FFTRealFixLen&amp;amp;  operator = (const FFTRealFixLen &amp;amp;other);
        bool                            operator == (const FFTRealFixLen &amp;amp;other);
        bool                            operator != (const FFTRealFixLen &amp;amp;other);

};      // class FFTRealFixLen

#include        &quot;FFTRealFixLen.hpp&quot;

#endif  // FFTRealFixLen_HEADER_INCLUDED

/*\\\ EOF \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

</db:programlisting>
</db:article>
