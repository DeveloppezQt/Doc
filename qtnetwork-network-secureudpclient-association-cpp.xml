<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>DTLS client</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example demonstrates how to implement client-side DTLS connections.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2018 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;association.h&quot;

DtlsAssociation::DtlsAssociation(const QHostAddress &amp;amp;address, quint16 port,
                                 const QString &amp;amp;connectionName)
    : name(connectionName),
      crypto(QSslSocket::SslClientMode)
{
    auto configuration = QSslConfiguration::defaultDtlsConfiguration();
    configuration.setPeerVerifyMode(QSslSocket::VerifyNone);
    crypto.setPeer(address, port);
    crypto.setDtlsConfiguration(configuration);

    connect(&amp;amp;crypto, &amp;amp;QDtls::handshakeTimeout, this, &amp;amp;DtlsAssociation::handshakeTimeout);
    connect(&amp;amp;crypto, &amp;amp;QDtls::pskRequired, this, &amp;amp;DtlsAssociation::pskRequired);
    socket.connectToHost(address.toString(), port);
    connect(&amp;amp;socket, &amp;amp;QUdpSocket::readyRead, this, &amp;amp;DtlsAssociation::readyRead);
    pingTimer.setInterval(5000);
    connect(&amp;amp;pingTimer, &amp;amp;QTimer::timeout, this, &amp;amp;DtlsAssociation::pingTimeout);
}

DtlsAssociation::~DtlsAssociation()
{
    if (crypto.isConnectionEncrypted())
        crypto.shutdown(&amp;amp;socket);
}

void DtlsAssociation::startHandshake()
{
    if (socket.state() != QAbstractSocket::ConnectedState) {
        emit infoMessage(tr(&quot;%1: connecting UDP socket first ...&quot;).arg(name));
        connect(&amp;amp;socket, &amp;amp;QAbstractSocket::connected, this, &amp;amp;DtlsAssociation::udpSocketConnected);
        return;
    }

    if (!crypto.doHandshake(&amp;amp;socket))
        emit errorMessage(tr(&quot;%1: failed to start a handshake - %2&quot;).arg(name, crypto.dtlsErrorString()));
    else
        emit infoMessage(tr(&quot;%1: starting a handshake&quot;).arg(name));
}

void DtlsAssociation::udpSocketConnected()
{
    emit infoMessage(tr(&quot;%1: UDP socket is now in ConnectedState, continue with handshake ...&quot;).arg(name));
    startHandshake();
}

void DtlsAssociation::readyRead()
{
    QByteArray dgram(socket.pendingDatagramSize(), Qt::Uninitialized);
    const qint64 bytesRead = socket.readDatagram(dgram.data(), dgram.size());
    if (bytesRead &amp;lt;= 0) {
        emit warningMessage(tr(&quot;%1: spurious read notification?&quot;).arg(name));
        return;
    }

    dgram.resize(bytesRead);
    if (crypto.isConnectionEncrypted()) {
        const QByteArray plainText = crypto.decryptDatagram(&amp;amp;socket, dgram);
        if (plainText.size()) {
            emit serverResponse(name, dgram, plainText);
            return;
        }

        if (crypto.dtlsError() == QDtlsError::RemoteClosedConnectionError) {
            emit errorMessage(tr(&quot;%1: shutdown alert received&quot;).arg(name));
            socket.close();
            pingTimer.stop();
            return;
        }

        emit warningMessage(tr(&quot;%1: zero-length datagram received?&quot;).arg(name));
    } else {
        if (!crypto.doHandshake(&amp;amp;socket, dgram)) {
            emit errorMessage(tr(&quot;%1: handshake error - %2&quot;).arg(name, crypto.dtlsErrorString()));
            return;
        }

        if (crypto.isConnectionEncrypted()) {
            emit infoMessage(tr(&quot;%1: encrypted connection established!&quot;).arg(name));
            pingTimer.start();
            pingTimeout();
        } else {
            emit infoMessage(tr(&quot;%1: continuing with handshake ...&quot;).arg(name));
        }
    }
}

void DtlsAssociation::handshakeTimeout()
{
    emit warningMessage(tr(&quot;%1: handshake timeout, trying to re-transmit&quot;).arg(name));
    if (!crypto.handleTimeout(&amp;amp;socket))
        emit errorMessage(tr(&quot;%1: failed to re-transmit - %2&quot;).arg(name, crypto.dtlsErrorString()));
}

void DtlsAssociation::pskRequired(QSslPreSharedKeyAuthenticator *auth)
{
    Q_ASSERT(auth);

    emit infoMessage(tr(&quot;%1: providing pre-shared key ...&quot;).arg(name));
    auth-&amp;gt;setIdentity(name.toLatin1());
    auth-&amp;gt;setPreSharedKey(QByteArrayLiteral(&quot;\x1a\x2b\x3c\x4d\x5e\x6f&quot;));
}

void DtlsAssociation::pingTimeout()
{
    static const QString message = QStringLiteral(&quot;I am %1, please, accept our ping %2&quot;);
    const qint64 written = crypto.writeDatagramEncrypted(&amp;amp;socket, message.arg(name).arg(ping).toLatin1());
    if (written &amp;lt;= 0) {
        emit errorMessage(tr(&quot;%1: failed to send a ping - %2&quot;).arg(name, crypto.dtlsErrorString()));
        pingTimer.stop();
        return;
    }

    ++ping;
}


</db:programlisting>
</db:article>
