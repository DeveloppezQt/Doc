<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Effects Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates the built-in post-processing effects.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2020 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick3D
import QtQuick.Controls
import QtQuick.Layouts
import QtQuick3D.Effects

Window {
    visible: true
    width: 800
    height: 600
    title: qsTr(&quot;Quick3D Effects Test&quot;)
    color: &quot;#f0f0f0&quot;

    View3D {
        id: view3D
        property real animationValue: 0.0
        property real fastAnimationValue: animationValue * 10
        anchors.left: settings.right
        anchors.top: parent.top
        anchors.right: parent.right
        anchors.bottom: parent.bottom

        NumberAnimation on animationValue {
            id: modelAnimation
            running: true
            paused: !animationButton.checked
            loops: Animation.Infinite
            from: 0.0
            to: 360.0
            duration: 40000
        }

        PerspectiveCamera {
            z: 500
            clipNear: 200
            clipFar: 1000
        }

        DirectionalLight {
            eulerRotation.x: -30
            brightness: 2
        }

        environment: SceneEnvironment {
            id: sceneEnvironment
            clearColor: &quot;#09102b&quot;
            backgroundMode: motionBox.checked ? SceneEnvironment.Transparent : SceneEnvironment.Color

            antialiasingMode: modeButton1.checked ? SceneEnvironment.NoAA : modeButton2.checked
                                                    ? SceneEnvironment.SSAA : modeButton3.checked
                                                      ? SceneEnvironment.MSAA : SceneEnvironment.ProgressiveAA

            antialiasingQuality: qualityButton1.checked ? SceneEnvironment.Medium : qualityButton2.checked
                                                          ? SceneEnvironment.High : SceneEnvironment.VeryHigh
            temporalAAEnabled: temporalModeButton.checked
            temporalAAStrength: temporalStrengthSlider.value

            effects: [  ]
        }

        Texture {
            id: corkTexture
            source: &quot;cork.jpg&quot;
            scaleU: 0.5
            scaleV: 0.5
        }

        Texture {
            id: textTexture
            source: &quot;texture.png&quot;
        }

        Node {
            id: scene

            Model {
                source: &quot;#Cube&quot;
                x: -100
                eulerRotation.y: 45
                eulerRotation.x: 30 + view3D.animationValue
                scale: Qt.vector3d(2, 2, 2)
                materials: DefaultMaterial {
                    diffuseMap: corkTexture
                }
            }

            Model {
                source: &quot;#Cube&quot;
                x: 350 * Math.sin(view3D.fastAnimationValue/180 * Math.PI)
                y: 350 * Math.cos(view3D.fastAnimationValue/180 * Math.PI)
                z: -300
                eulerRotation.y: 5
                eulerRotation.x: 5
                scale: Qt.vector3d(1.2, 1.2, 1.2)
                materials: DefaultMaterial {
                    diffuseMap: textTexture
                }
            }

            Model {
                source: &quot;#Sphere&quot;
                x: 80
                y: -40
                z: 200
                scale: Qt.vector3d(1.4, 1.4, 1.4)
                materials: PrincipledMaterial {
                    baseColor: &quot;#41cd52&quot;
                    metalness: 0.0
                    roughness: 0.1
                    opacity: 1.0
                }
            }
        }
    }
    Button {
        id: animationButton
        anchors.top: settings.top
        anchors.horizontalCenter: settings.horizontalCenter
        text: &quot;Animate!&quot;
        checkable: true
        z: 1
    }
    ScrollView {
        id: settings
        anchors.top: parent.top
        anchors.left: parent.left
        anchors.bottom: parent.bottom
        width: settingsRect.width

        Flickable {
          clip: false
          anchors.fill: parent
          contentWidth: settingsRect.width
          contentHeight: settingsRect.height
          Rectangle {
            id: settingsRect
            implicitHeight: settingsArea.height
            width: settingsArea.width + 20

            ColumnLayout {
                id: settingsArea

                spacing: 2

                Item {
                    id: animationButtonSpace
                    Layout.preferredHeight: animationButton.height
                }

                EffectBox {
                    id: customBox
                    text: &quot;Custom combination&quot;
                    effect: CustomEffect {
                        amount: customAmount.sliderValue
                    }
                }
                SettingsGroup {
                    visible: customBox.checked
                    EffectSlider {
                        id: customAmount
                        fromValue: 0.0
                        toValue: 0.05
                        sliderValue: 0.01
                        precision: 4
                    }
                }

                EffectBox {
                    id: gradientBox
                    text: &quot;AdditiveColorGradient&quot;
                    effect: AdditiveColorGradient {
                        topColor: gradientTop.colorVector
                        bottomColor: gradientBottom.colorVector
                    }
                }
                SettingsGroup {
                    visible: gradientBox.checked
                    frame: false
                    EffectColor {
                        id: gradientTop
                        colorVector: Qt.vector3d(0.7, 1.0, 0.7)
                        description: &quot;top&quot;
                    }
                    EffectColor {
                        id: gradientBottom
                        colorVector: Qt.vector3d(0.0, 0.0, 0.0)
                        description: &quot;bottom&quot;
                    }
                }

                EffectBox {
                    id: brushBox
                    text: &quot;BrushStrokes&quot;
                    effect: BrushStrokes {
                        brushAngle: brushStrokesAngle.sliderValue
                        brushLength: brushStrokesLength.sliderValue
                        brushSize: brushStrokesSize.sliderValue
                    }
                }
                SettingsGroup {
                    visible: brushBox.checked
                    EffectSlider {
                        id: brushStrokesAngle
                        fromValue: 0.0
                        toValue: 360.0
                        precision: 0
                        sliderValue: 45
                        description: &quot;brush angle&quot;
                    }
                    EffectSlider {
                        id: brushStrokesLength
                        fromValue: 0.0
                        toValue: 3.0
                        sliderValue: 1
                        description: &quot;stroke length&quot;
                    }
                    EffectSlider {
                        id: brushStrokesSize
                        fromValue: 10.0
                        toValue: 200.0
                        sliderValue: 100
                        precision: 0
                        description: &quot;stroke size&quot;
                    }
                }

                EffectBox {
                    id: chromaticBox
                    text: &quot;ChromaticAberration&quot;
                    effect: ChromaticAberration {
                        aberrationAmount: chromaticAmount.sliderValue
                        focusDepth: chromaticDepth.sliderValue
                    }
                }
                SettingsGroup {
                    visible: chromaticBox.checked
                    EffectSlider {
                        id: chromaticAmount
                        fromValue: -200.0
                        toValue: 200.0
                        sliderValue: 50
                        precision: 0
                        description: &quot;aberration amount&quot;
                    }
                    EffectSlider {
                        id: chromaticDepth
                        fromValue: 0.0
                        toValue: 1000.0
                        sliderValue: 600
                        precision: 0
                        description: &quot;focus depth&quot;
                    }
                }

                EffectBox {
                    id: colorMasterBox
                    text: &quot;ColorMaster&quot;
                    effect: ColorMaster {
                        redStrength: colorMasterRed.sliderValue
                        greenStrength: colorMasterGreen.sliderValue
                        blueStrength: colorMasterBlue.sliderValue
                        saturation: colorMasterSaturation.sliderValue
                    }
                }
                SettingsGroup {
                    visible: colorMasterBox.checked
                    EffectSlider {
                        id: colorMasterRed
                        fromValue: 0.0
                        toValue: 2.0
                        sliderValue: 1
                        precision: 2
                        description: &quot;red strength&quot;
                    }
                    EffectSlider {
                        id: colorMasterGreen
                        fromValue: 0.0
                        toValue: 2.0
                        sliderValue: 1.5
                        precision: 2
                        description: &quot;green strength&quot;
                    }
                    EffectSlider {
                        id: colorMasterBlue
                        fromValue: 0.0
                        toValue: 2.0
                        sliderValue: 1
                        precision: 2
                        description: &quot;blue strength&quot;
                    }
                    EffectSlider {
                        id: colorMasterSaturation
                        fromValue: -1.0
                        toValue: 1.0
                        sliderValue: 0
                        precision: 2
                        description: &quot;saturation&quot;
                    }
                }

                EffectBox {
                    id: dofBox
                    text: &quot;DepthOfFieldHQBlur&quot;
                    effect: DepthOfFieldHQBlur {
                        focusDistance: dofFocusDistance.sliderValue
                        focusRange: dofFocusRange.sliderValue
                        blurAmount: dofBlurAmount.sliderValue
                    }
                }
                SettingsGroup {
                    visible: dofBox.checked
                    EffectSlider {
                        id: dofFocusDistance
                        fromValue: 0.0
                        toValue: 1000.0
                        sliderValue: 400
                        precision: 0
                        description: &quot;focus distance&quot;
                    }
                    EffectSlider {
                        id: dofFocusRange
                        fromValue: 0.0
                        toValue: 400.0
                        sliderValue: 100
                        precision: 0
                        description: &quot;focus range&quot;
                    }
                    EffectSlider {
                        id: dofBlurAmount
                        fromValue: 0.0
                        toValue: 10.0
                        sliderValue: 4
                        precision: 1
                        description: &quot;blur amount&quot;
                    }
                }

                EffectBox {
                    id: desaturateBox
                    text: &quot;Desaturate&quot;
                    effect: Desaturate {
                        amount: desaturateAmount.sliderValue
                    }
                }
                SettingsGroup {
                    visible: desaturateBox.checked
                    EffectSlider {
                        id: desaturateAmount
                        fromValue: 0.0
                        toValue: 1.0
                        sliderValue: 0.7
                    }
                }

                EffectBox {
                    id: rippleBox
                    text: &quot;DistortionRipple&quot;
                    effect: DistortionRipple {
                        radius: rippleRadius.sliderValue
                        distortionWidth: rippleWidth.sliderValue
                        distortionHeight: rippleHeight.sliderValue
                        distortionPhase: ripplePhase.sliderValue
                        center: Qt.vector2d(0.5, 0.5)
                    }
                }
                SettingsGroup {
                    visible: rippleBox.checked
                    EffectSlider {
                        id: rippleRadius
                        fromValue: 0.0
                        toValue: 100
                        sliderValue: 45
                        description: &quot;radius&quot;
                        precision: 1
                    }
                    EffectSlider {
                        id: rippleWidth
                        fromValue: 2.0
                        toValue: 100
                        sliderValue: 90
                        description: &quot;width&quot;
                        precision: 1
                    }
                    EffectSlider {
                        id: rippleHeight
                        fromValue: 0.0
                        toValue: 100
                        sliderValue: 40
                        description: &quot;height&quot;
                        precision: 1
                    }
                    EffectSlider {
                        id: ripplePhase
                        fromValue: 0.0
                        toValue: 360
                        sliderValue: 0
                        description: &quot;phase&quot;
                        precision: 1
                    }
                }

                EffectBox {
                    id: sphereBox
                    text: &quot;DistortionSphere&quot;
                    effect: DistortionSphere {
                        radius: sphereRadius.sliderValue
                        distortionHeight: sphereHeight.sliderValue
                        center: Qt.vector2d(0.5, 0.5)
                    }
                }
                SettingsGroup {
                    visible: sphereBox.checked
                    EffectSlider {
                        id: sphereRadius
                        fromValue: 0.0
                        toValue: 1.0
                        sliderValue: 0.25
                        description: &quot;radius&quot;
                    }
                    EffectSlider {
                        id: sphereHeight
                        fromValue: -1.0
                        toValue: 1.0
                        sliderValue: 0.5
                        description: &quot;height&quot;
                    }
                }

                EffectBox {
                    id: spiralBox
                    text: &quot;DistortionSpiral&quot;
                    effect: DistortionSpiral {
                        radius: spiralRadius.sliderValue
                        distortionStrength: spiralStrength.sliderValue
                        center: Qt.vector2d(0.5, 0.5)
                    }
                }
                SettingsGroup {
                    visible: spiralBox.checked
                    EffectSlider {
                        id: spiralRadius
                        fromValue: 0.0
                        toValue: 1.0
                        sliderValue: 0.25
                        description: &quot;radius&quot;
                    }
                    EffectSlider {
                        id: spiralStrength
                        fromValue: -10.0
                        toValue: 10.0
                        sliderValue: 1
                        precision: 1
                        description: &quot;strength&quot;
                    }
                }

                EffectBox {
                    id: edgeBox
                    text: &quot;EdgeDetect&quot;
                    effect: EdgeDetect {
                        edgeStrength: edgeS.sliderValue
                    }
                }
                SettingsGroup {
                    visible: edgeBox.checked
                    EffectSlider {
                        id: edgeS
                        fromValue: 0.0
                        toValue: 1.0
                        sliderValue: 0.5
                        precision: 2
                    }
                }

                EffectBox {
                    id: embossBox
                    text: &quot;Emboss&quot;
                    effect: Emboss {
                        amount: embossAmount.sliderValue
                    }
                }
                SettingsGroup {
                    visible: embossBox.checked
                    EffectSlider {
                        id: embossAmount
                        fromValue: 0.0
                        toValue: 0.01
                        sliderValue: 0.003
                        precision: 4
                    }
                }

                EffectBox {
                    id: flipBox
                    text: &quot;Flip&quot;
                    effect: Flip {
                        flipHorizontally: flipH.checked
                        flipVertically: flipV.checked
                    }
                }
                SettingsGroup {
                    visible: flipBox.checked
                    CheckBox {
                        id: flipH
                        checked: true
                        text: &quot;horizontal&quot;
                    }
                    CheckBox {
                        id: flipV
                        checked: true
                        text: &quot;vertical&quot;
                    }
                }

                EffectBox {
                    id: hdrBox
                    text: &quot;HDRBloomTonemap&quot;
                    effect: HDRBloomTonemap {
                        bloomThreshold: hdrBloomThreshold.sliderValue
                        blurFalloff: hdrBlurFalloff.sliderValue
                        exposure: hdrExposure.sliderValue
                        gamma: hdrGamma.expValue
                    }
                }
                SettingsGroup {
                    visible: hdrBox.checked
                    EffectSlider {
                        id: hdrBloomThreshold
                        fromValue: 0.0
                        toValue: 1.0
                        precision: 2
                        sliderValue: 1
                        description: &quot;bloomThreshold&quot;
                    }
                    EffectSlider {
                        id: hdrBlurFalloff
                        fromValue: 0.0
                        toValue: 10.0
                        precision: 1
                        sliderValue: 0
                        description: &quot;blurFalloff&quot;
                    }
                    EffectSlider {
                        id: hdrExposure
                        fromValue: -9
                        toValue: 9
                        precision: 1
                        sliderValue: 0
                        description: &quot;exposure&quot;
                    }
                    EffectSlider {
                        id: hdrGamma
                        exponential: true
                        fromValue: Math.log2(0.1)
                        toValue: Math.log2(4.0)
                        precision: 2
                        sliderValue: 0 // i.e. 1
                        description: &quot;gamma&quot;
                    }
                }

                EffectBox {
                    id: motionBox
                    text: &quot;MotionBlur&quot;
                    effect: MotionBlur {
                        fadeAmount: motionAmount.sliderValue
                        blurQuality: motionQuality.sliderValue
                    }
                }
                SettingsGroup {
                    visible: motionBox.checked
                    EffectSlider {
                        id: motionAmount
                        fromValue: 0.0
                        toValue: 1.0
                        precision: 2
                        sliderValue: 0.25
                        description: &quot;fadeAmount&quot;
                    }
                    EffectSlider {
                        id: motionQuality
                        fromValue: 0.1
                        toValue: 1.0
                        precision: 2
                        sliderValue: 0.25
                        description: &quot;blurQuality&quot;
                    }
                }

                EffectBox {
                    id: scatterBox
                    text: &quot;Scatter&quot;
                    effect: Scatter {
                        amount: scatterAmount.sliderValue
                        direction: scatterDirection.currentIndex
                        randomize: scatterRandomize.checked
                    }
                }
                SettingsGroup {
                    visible: scatterBox.checked
                    EffectSlider {
                        id: scatterAmount
                        fromValue: 0
                        toValue: 127
                        precision: 0
                        sliderValue: 10
                        description: &quot;amount&quot;
                    }
                    ComboBox {
                        id: scatterDirection
                        currentIndex: 0
                        displayText: &quot;Dir: &quot; + currentText
                        //0 = both, 1 = horizontal, 2 = vertical
                        model: [&quot;both&quot;, &quot;horizontal&quot;, &quot;vertical&quot;]
                    }
                    CheckBox {
                        id: scatterRandomize
                        checked: true
                        text: &quot;randomize&quot;
                    }
                }

                EffectBox {
                    id: sCurveBox
                    text: &quot;SCurveTonemap&quot;
                    effect: SCurveTonemap {
                        shoulderSlope: sCurveShoulderSlope.sliderValue
                        shoulderEmphasis: sCurveShoulderEmphasis.sliderValue
                        toeSlope: sCurveToeSlope.sliderValue
                        toeEmphasis: sCurveToeEmphasis.sliderValue
                        contrastBoost: sCurveContrast.sliderValue
                        saturationLevel: sCurveSaturation.sliderValue
                        gammaValue: sCurveGamma.expValue
                        useExposure: sCurveUseExposure.checked
                        whitePoint: sCurveWhitePoint.expValue
                        exposureValue: sCurveExposure.expValue
                    }
                }
                SettingsGroup {
                    visible: sCurveBox.checked
                    EffectSlider {
                        id: sCurveShoulderSlope
                        fromValue: 0.0
                        toValue: 3.0
                        precision: 2
                        sliderValue: 1.0
                        description: &quot;shoulderSlope&quot;
                    }
                    EffectSlider {
                        id: sCurveShoulderEmphasis
                        fromValue: -1.0
                        toValue: 1.0
                        precision: 2
                        sliderValue: 0.0
                        description: &quot;shoulderEmphasis&quot;
                    }
                    EffectSlider {
                        id: sCurveToeSlope
                        fromValue: 0.0
                        toValue: 3.0
                        precision: 2
                        sliderValue: 1.0
                        description: &quot;toeSlope&quot;
                    }
                    EffectSlider {
                        id: sCurveToeEmphasis
                        fromValue: -1.0
                        toValue: 1.0
                        precision: 2
                        sliderValue: 0.0
                        description: &quot;toeEmphasis&quot;
                    }
                    EffectSlider {
                        id: sCurveContrast
                        fromValue: -1.0
                        toValue: 2.0
                        precision: 2
                        sliderValue: 0.0
                        description: &quot;contrastBoost&quot;
                    }
                    EffectSlider {
                        id: sCurveSaturation
                        fromValue: 0.0
                        toValue: 1.0
                        precision: 2
                        sliderValue: 1.0
                        description: &quot;saturationLevel&quot;
                    }
                    EffectSlider {
                        id: sCurveGamma
                        exponential: true
                        fromValue: Math.log2(0.1)
                        toValue: Math.log2(8.0)
                        precision: 2
                        sliderValue: Math.log2(2.2)
                        description: &quot;gammaValue&quot;
                    }
                    EffectSlider {
                        id: sCurveWhitePoint
                        visible: !sCurveUseExposure.checked
                        exponential: true
                        fromValue: Math.log2(0.01)
                        toValue: Math.log2(128)
                        precision: 2
                        sliderValue: 0 // i.e. 1
                        description: &quot;whitePoint&quot;
                    }
                    EffectSlider {
                        id: sCurveExposure
                        visible: sCurveUseExposure.checked
                        exponential: true
                        fromValue: Math.log2(0.01)
                        toValue: Math.log2(16.0)
                        precision: 2
                        sliderValue: 0 // i.e. 1
                        description: &quot;exposureValue&quot;
                    }
                    CheckBox {
                        id: sCurveUseExposure
                        checked: false
                        text: &quot;use exposure instead of whitepoint&quot;
                    }
                }

                EffectBox {
                    id: tiltBox
                    text: &quot;TiltShift&quot;
                    effect: TiltShift {
                         focusPosition: tiltPosition.sliderValue
                         focusWidth: tiltWidth.sliderValue
                         blurAmount: tiltBlur.sliderValue
                         isVertical: tiltVertical.checked
                         isInverted: tiltInverted.checked
                    }
                }
                SettingsGroup {
                    visible: tiltBox.checked
                    EffectSlider {
                        id: tiltBlur
                        fromValue: 0.0
                        toValue: 10.0
                        sliderValue: 4
                        precision: 1
                        description: &quot;blur amount&quot;
                    }
                    EffectSlider {
                        id: tiltPosition
                        fromValue: 0.0
                        toValue: 1.0
                        sliderValue: 0.5
                        precision: 2
                        description: &quot;focus position&quot;
                    }
                    EffectSlider {
                        id: tiltWidth
                        fromValue: 0.0
                        toValue: 1.0
                        sliderValue: 0.2
                        precision: 2
                        description: &quot;focus width&quot;
                    }
                    CheckBox {
                        id: tiltInverted
                        text: &quot;inverted&quot;
                        checked: false
                    }
                    CheckBox {
                        id: tiltVertical
                        text: &quot;vertical&quot;
                        checked: false
                    }
                }

                EffectBox {
                    id: vignetteBox
                    text: &quot;Vignette&quot;
                    effect: Vignette {
                        vignetteColor: vignetteCol.colorVector
                        vignetteRadius: vignetteR.sliderValue
                        vignetteStrength: vignetteS.sliderValue
                    }
                }
                SettingsGroup {
                    visible: vignetteBox.checked
                    EffectColor {
                        id: vignetteCol
                        colorVector:  Qt.vector3d(0.5, 0.5, 0.5)
                        description: &quot;color&quot;
                    }
                    EffectSlider {
                        id: vignetteR
                        fromValue: 0.0
                        toValue: 5.0
                        sliderValue: 0.35
                        precision: 2
                        description: &quot;radius&quot;
                    }
                    EffectSlider {
                        id: vignetteS
                        fromValue: 0.0
                        toValue: 15.0
                        sliderValue: 15
                        precision: 1
                        description: &quot;strength&quot;
                    }
                }

                EffectBox {
                    id: blurBox
                    text: &quot;Simple blur&quot;
                    effect : Blur {
                        amount: blurEffectAmount.sliderValue
                    }
                }
                EffectSlider {
                    visible: blurBox.checked
                    id: blurEffectAmount
                    fromValue: 0.0
                    toValue: 0.01
                    sliderValue: 0.003
                    precision: 4
                }

                EffectBox {
                    id: gaussBox
                    text: &quot;Gaussian blur&quot;
                    effect: GaussianBlur {
                        amount: gaussAmount.sliderValue
                    }
                }
                EffectSlider {
                    visible: gaussBox.checked
                    id: gaussAmount
                    fromValue: 0.0
                    toValue: 10.0
                    sliderValue: 2
                    precision: 1
                }

                EffectBox {
                    id: fxaaCheckBox
                    text: &quot;FXAA effect&quot;
                    effect : Fxaa {}
                }

                ColumnLayout {
                    id: antialiasingSettings
//                    visible: aaCheckBox.checked

                    Rectangle {
                        Layout.fillWidth: true
                        height: 1
                        color: &quot;#909090&quot;
                    }
                    Text {
                        Layout.alignment: Qt.AlignHCenter
                        font.bold: true
                        text: &quot;Antialiasing mode&quot;
                    }
                    RadioButton {
                        id: modeButton1
                        checked: true
                        text: qsTr(&quot;NoAA&quot;)
                    }
                    RadioButton {
                        id: modeButton2
                        text: qsTr(&quot;SSAA&quot;)
                    }
                    RadioButton {
                        id: modeButton3
                        text: qsTr(&quot;MSAA&quot;)
                    }
                    RadioButton {
                        id: modeButton4
                        text: qsTr(&quot;ProgressiveAA&quot;)
                    }
                    Rectangle {
                        Layout.fillWidth: true
                        height: 1
                        color: &quot;#909090&quot;
                    }
                    Text {
                        Layout.alignment: Qt.AlignHCenter
                        font.bold: true
                        text: &quot;Antialiasing quality&quot;
                    }
                    ButtonGroup {
                        buttons: antialiasingQualityColumn.children
                    }
                    ColumnLayout {
                        id: antialiasingQualityColumn
                        RadioButton {
                            id: qualityButton1
                            text: qsTr(&quot;Normal&quot;)
                        }
                        RadioButton {
                            id: qualityButton2
                            checked: true
                            text: qsTr(&quot;High&quot;)
                        }
                        RadioButton {
                            id: qualityButton3
                            text: qsTr(&quot;VeryHigh&quot;)
                        }
                    }
                    Rectangle {
                        Layout.fillWidth: true
                        height: 1
                        color: &quot;#909090&quot;
                    }
                    CheckBox {
                        id: temporalModeButton
                        text: &quot;temporalAAEnabled&quot;
                    }
                    Item { width: 1; height: 10 }
                    Slider {
                        id: temporalStrengthSlider
                        from: 0.0
                        to: 2.0
                        value: 0.3
                        Text {
                            anchors.horizontalCenter: parent.horizontalCenter
                            anchors.bottom: parent.verticalCenter
                            anchors.bottomMargin: 16
                            text: &quot;temporalAAStrength: &quot; + temporalStrengthSlider.value.toFixed(2);
                            z: 10
                        }
                    }
                }
                Rectangle {
                    Layout.fillWidth: true
                    height: 1
                    color: &quot;#909090&quot;
                }

                function recalcEffects()
                {
                    sceneEnvironment.effects = []
                    for (var i = 0; i &amp;lt; settingsArea.children.length; i++) {
                        let obj = settingsArea.children[i]
                        if (obj.effect) {
//                            console.log(&quot;item &quot;+i);
//                            console.log(&quot;     obj &quot; + obj);
//                            console.log(&quot;   check &quot; + obj.checked)
//                            console.log(&quot;  effect &quot; + obj.effect)
                            if (obj.checked)
                                sceneEnvironment.effects.push(obj.effect)
                        }
                    }
                }

            } // ColumnLayout settingsArea
          } // Rectangle contentsRect
        } // Flickable
        ScrollBar.horizontal.policy: ScrollBar.AlwaysOff

    } // ScrollView

}

</db:programlisting>
</db:article>
