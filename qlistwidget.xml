<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QListWidget Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlistwidget.xml">QListWidget</db:link> class provides an item-based list widget.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QListWidget</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qlistview.xml" xlink:role="class">QListView</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QListWidget is part of <db:simplelist><db:member>model-view</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-listview.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:link xlink:href="qlistwidget.xml">QListWidget</db:link> is a convenience class that provides a list view similar to the one supplied by <db:link xlink:href="qlistview.xml">QListView</db:link>, but with a classic item-based interface for adding and removing items. <db:link xlink:href="qlistwidget.xml">QListWidget</db:link> uses an internal model to manage each <db:link xlink:href="qlistwidgetitem.xml">QListWidgetItem</db:link> in the list.</db:para>
<db:para>For a more flexible list view widget, use the <db:link xlink:href="qlistview.xml">QListView</db:link> class with a standard model.</db:para>
<db:para>List widgets are constructed in the same way as other widgets:</db:para>
<db:programlisting language="cpp">    QListWidget *listWidget = new QListWidget(this);
</db:programlisting>
<db:para>The <db:link xlink:href="qabstractitemview.xml#selectionMode-prop">selectionMode</db:link>() of a list widget determines how many of the items in the list can be selected at the same time, and whether complex selections of items can be created. This can be set with the <db:link xlink:href="qabstractitemview.xml#selectionMode-prop">setSelectionMode</db:link>() function.</db:para>
<db:para>There are two ways to add items to the list: they can be constructed with the list widget as their parent widget, or they can be constructed with no parent widget and added to the list later. If a list widget already exists when the items are constructed, the first method is easier to use:</db:para>
<db:programlisting language="cpp">    new QListWidgetItem(tr(&quot;Oak&quot;), listWidget);
    new QListWidgetItem(tr(&quot;Fir&quot;), listWidget);
    new QListWidgetItem(tr(&quot;Pine&quot;), listWidget);
</db:programlisting>
<db:para>If you need to insert a new item into the list at a particular position, then it should be constructed without a parent widget. The <db:link xlink:href="qlistwidget.xml#insertItem">insertItem</db:link>() function should then be used to place it within the list. The list widget will take ownership of the item.</db:para>
<db:programlisting language="cpp">    QListWidgetItem *newItem = new QListWidgetItem;
    newItem-&gt;setText(itemText);
    listWidget-&gt;insertItem(row, newItem);
</db:programlisting>
<db:para>For multiple items, <db:link xlink:href="qlistwidget.xml#insertItems">insertItems</db:link>() can be used instead. The number of items in the list is found with the <db:link xlink:href="qlistwidget.xml#count-prop">count</db:link>() function. To remove items from the list, use <db:link xlink:href="qlistwidget.xml#takeItem">takeItem</db:link>().</db:para>
<db:para>The current item in the list can be found with <db:link xlink:href="qlistwidget.xml#currentItem">currentItem</db:link>(), and changed with <db:link xlink:href="qlistwidget.xml#setCurrentItem">setCurrentItem</db:link>(). The user can also change the current item by navigating with the keyboard or clicking on a different item. When the current item changes, the <db:link xlink:href="qlistwidget.xml#currentItemChanged">currentItemChanged</db:link>() signal is emitted with the new current item and the item that was previously current.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml">QListWidgetItem</db:link></db:member>
<db:member><db:link xlink:href="qlistview.xml">QListView</db:link></db:member>
<db:member><db:link xlink:href="qtreeview.xml">QTreeView</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-dialogs-tabdialog-example.xml">Tab Dialog Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="count-prop">
<db:title>[read-only] count : const int</db:title>
<db:para>This property holds the number of items in the list including any hidden items.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">count</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="currentRow-prop">
<db:title>currentRow : int</db:title>
<db:para>This property holds the row of the current item.</db:para>
<db:para>Depending on the current selection mode, the row may also be selected.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">currentRow</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCurrentRow</db:emphasis>(<db:type>int</db:type> <db:emphasis>row</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qlistwidget.xml#setCurrentRow">setCurrentRow</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>row</db:emphasis>, <db:type><db:link xlink:href="qitemselectionmodel.xml#SelectionFlag-enum">QItemSelectionModel::SelectionFlags</db:link></db:type> <db:emphasis>command</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qlistwidget.xml#currentRowChanged">currentRowChanged</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>currentRow</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="sortingEnabled-prop">
<db:title>sortingEnabled : bool</db:title>
<db:para>This property holds whether sorting is enabled</db:para>
<db:para>If this property is true, sorting is enabled for the list; if the property is false, sorting is not enabled.</db:para>
<db:para>The default value is false.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isSortingEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSortingEnabled</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QListWidget">
<db:title>[explicit] QListWidget::QListWidget(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs an empty <db:link xlink:href="qlistwidget.xml">QListWidget</db:link> with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QListWidget">
<db:title>[virtual noexcept] QListWidget::~QListWidget()</db:title>
<db:para>Destroys the list widget and all its items.</db:para>
</db:section>
<db:section xml:id="addItem">
<db:title>void QListWidget::addItem(QListWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Inserts the <db:code role="parameter">item</db:code> at the end of the list widget.</db:para>
<db:warning>
<db:para>A <db:link xlink:href="qlistwidgetitem.xml">QListWidgetItem</db:link> can only be added to a <db:link xlink:href="qlistwidget.xml">QListWidget</db:link> once. Adding the same <db:link xlink:href="qlistwidgetitem.xml">QListWidgetItem</db:link> multiple times to a <db:link xlink:href="qlistwidget.xml">QListWidget</db:link> will result in undefined behavior.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#insertItem">insertItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addItem-1">
<db:title>void QListWidget::addItem(const QString &amp;<db:emphasis>label</db:emphasis>)</db:title>
<db:para>Inserts an item with the text <db:code role="parameter">label</db:code> at the end of the list widget.</db:para>
</db:section>
<db:section xml:id="addItems">
<db:title>void QListWidget::addItems(const QStringList &amp;<db:emphasis>labels</db:emphasis>)</db:title>
<db:para>Inserts items with the text <db:code role="parameter">labels</db:code> at the end of the list widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#insertItems">insertItems</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QListWidget::clear()</db:title>
<db:para>Removes all items and selections in the view.</db:para>
<db:warning>
<db:para>All items will be permanently deleted.</db:para>
</db:warning>
</db:section>
<db:section xml:id="closePersistentEditor">
<db:title>void QListWidget::closePersistentEditor(QListWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Closes the persistent editor for the given <db:code role="parameter">item</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#openPersistentEditor">openPersistentEditor</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidget.xml#isPersistentEditorOpen">isPersistentEditorOpen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentItem">
<db:title>QListWidgetItem *QListWidget::currentItem() const</db:title>
<db:para>Returns the current item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#setCurrentItem">setCurrentItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentItemChanged">
<db:title>void QListWidget::currentItemChanged(QListWidgetItem *<db:emphasis>current</db:emphasis>, QListWidgetItem *<db:emphasis>previous</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the current item changes.</db:para>
<db:para><db:code role="parameter">previous</db:code> is the item that previously had the focus; <db:code role="parameter">current</db:code> is the new current item.</db:para>
</db:section>
<db:section xml:id="currentRowChanged">
<db:title>void QListWidget::currentRowChanged(int <db:emphasis>currentRow</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the current item changes.</db:para>
<db:para><db:code role="parameter">currentRow</db:code> is the row of the current item. If there is no current item, the <db:code role="parameter">currentRow</db:code> is -1.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qlistwidget.xml#currentRow-prop">currentRow</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="currentTextChanged">
<db:title>void QListWidget::currentTextChanged(const QString &amp;<db:emphasis>currentText</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the current item changes.</db:para>
<db:para><db:code role="parameter">currentText</db:code> is the text data in the current item. If there is no current item, the <db:code role="parameter">currentText</db:code> is invalid.</db:para>
</db:section>
<db:section xml:id="dropEvent">
<db:title>[override virtual protected] void QListWidget::dropEvent(QDropEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qlistview.xml#dropEvent" role="function">QListView::dropEvent(QDropEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dropMimeData">
<db:title>[virtual protected] bool QListWidget::dropMimeData(int <db:emphasis>index</db:emphasis>, const QMimeData *<db:emphasis>data</db:emphasis>, Qt::DropAction <db:emphasis>action</db:emphasis>)</db:title>
<db:para>Handles <db:code role="parameter">data</db:code> supplied by an external drag and drop operation that ended with the given <db:code role="parameter">action</db:code> in the given <db:code role="parameter">index</db:code>. Returns true if <db:code role="parameter">data</db:code> and <db:code role="parameter">action</db:code> can be handled by the model; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#supportedDropActions">supportedDropActions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="editItem">
<db:title>void QListWidget::editItem(QListWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Starts editing the <db:code role="parameter">item</db:code> if it is editable.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QListWidget::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qlistview.xml#event" role="function">QListView::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="findItems">
<db:title>QList&lt;QListWidgetItem *&gt; QListWidget::findItems(const QString &amp;<db:emphasis>text</db:emphasis>, Qt::MatchFlags <db:emphasis>flags</db:emphasis>) const</db:title>
<db:para>Finds items with the text that matches the string <db:code role="parameter">text</db:code> using the given <db:code role="parameter">flags</db:code>.</db:para>
</db:section>
<db:section xml:id="indexFromItem">
<db:title>QModelIndex QListWidget::indexFromItem(const QListWidgetItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>Returns the <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> associated with the given <db:code role="parameter">item</db:code>.</db:para>
<db:note>
<db:para>In Qt versions prior to 5.10, this function took a non-const <db:code role="parameter">item</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="insertItem">
<db:title>void QListWidget::insertItem(int <db:emphasis>row</db:emphasis>, QListWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Inserts the <db:code role="parameter">item</db:code> at the position in the list given by <db:code role="parameter">row</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#addItem">addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertItem-1">
<db:title>void QListWidget::insertItem(int <db:emphasis>row</db:emphasis>, const QString &amp;<db:emphasis>label</db:emphasis>)</db:title>
<db:para>Inserts an item with the text <db:code role="parameter">label</db:code> in the list widget at the position given by <db:code role="parameter">row</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#addItem">addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertItems">
<db:title>void QListWidget::insertItems(int <db:emphasis>row</db:emphasis>, const QStringList &amp;<db:emphasis>labels</db:emphasis>)</db:title>
<db:para>Inserts items from the list of <db:code role="parameter">labels</db:code> into the list, starting at the given <db:code role="parameter">row</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#insertItem">insertItem</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidget.xml#addItem">addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isPersistentEditorOpen">
<db:title>bool QListWidget::isPersistentEditorOpen(QListWidgetItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>Returns whether a persistent editor is open for item <db:code role="parameter">item</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#openPersistentEditor">openPersistentEditor</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidget.xml#closePersistentEditor">closePersistentEditor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="item">
<db:title>QListWidgetItem *QListWidget::item(int <db:emphasis>row</db:emphasis>) const</db:title>
<db:para>Returns the item that occupies the given <db:code role="parameter">row</db:code> in the list if one has been set; otherwise returns nullptr.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#row">row</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemActivated">
<db:title>void QListWidget::itemActivated(QListWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>This signal is emitted when the <db:code role="parameter">item</db:code> is activated. The <db:code role="parameter">item</db:code> is activated when the user clicks or double clicks on it, depending on the system configuration. It is also activated when the user presses the activation key (on Windows and X11 this is the <db:guilabel>Return</db:guilabel> key, on Mac OS X it is <db:guilabel>Command+O</db:guilabel>).</db:para>
</db:section>
<db:section xml:id="itemAt">
<db:title>QListWidgetItem *QListWidget::itemAt(const QPoint &amp;<db:emphasis>p</db:emphasis>) const</db:title>
<db:para>Returns a pointer to the item at the coordinates <db:code role="parameter">p</db:code>. The coordinates are relative to the list widget's <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>().</db:para>
</db:section>
<db:section xml:id="itemAt-1">
<db:title>QListWidgetItem *QListWidget::itemAt(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a pointer to the item at the coordinates (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>). The coordinates are relative to the list widget's <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>().</db:para>
</db:section>
<db:section xml:id="itemChanged">
<db:title>void QListWidget::itemChanged(QListWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the data of <db:code role="parameter">item</db:code> has changed.</db:para>
</db:section>
<db:section xml:id="itemClicked">
<db:title>void QListWidget::itemClicked(QListWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>This signal is emitted with the specified <db:code role="parameter">item</db:code> when a mouse button is clicked on an item in the widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#itemPressed">itemPressed</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidget.xml#itemDoubleClicked">itemDoubleClicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemDoubleClicked">
<db:title>void QListWidget::itemDoubleClicked(QListWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>This signal is emitted with the specified <db:code role="parameter">item</db:code> when a mouse button is double clicked on an item in the widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#itemClicked">itemClicked</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidget.xml#itemPressed">itemPressed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemEntered">
<db:title>void QListWidget::itemEntered(QListWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>This signal is emitted when the mouse cursor enters an item. The <db:code role="parameter">item</db:code> is the item entered. This signal is only emitted when mouseTracking is turned on, or when a mouse button is pressed while moving into an item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#mouseTracking-prop">QWidget::setMouseTracking</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemFromIndex">
<db:title>QListWidgetItem *QListWidget::itemFromIndex(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns a pointer to the <db:link xlink:href="qlistwidgetitem.xml">QListWidgetItem</db:link> associated with the given <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="itemPressed">
<db:title>void QListWidget::itemPressed(QListWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>This signal is emitted with the specified <db:code role="parameter">item</db:code> when a mouse button is pressed on an item in the widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#itemClicked">itemClicked</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidget.xml#itemDoubleClicked">itemDoubleClicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemSelectionChanged">
<db:title>void QListWidget::itemSelectionChanged()</db:title>
<db:para>This signal is emitted whenever the selection changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#selectedItems">selectedItems</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml#isSelected">QListWidgetItem::isSelected</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidget.xml#currentItemChanged">currentItemChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemWidget">
<db:title>QWidget *QListWidget::itemWidget(QListWidgetItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>Returns the widget displayed in the given <db:code role="parameter">item</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#setItemWidget">setItemWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidget.xml#removeItemWidget">removeItemWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="items">
<db:title>QList&lt;QListWidgetItem *&gt; QListWidget::items(const QMimeData *<db:emphasis>data</db:emphasis>) const</db:title>
<db:para>Returns a list of pointers to the items contained in the <db:code role="parameter">data</db:code> object. If the object was not created by a <db:link xlink:href="qlistwidget.xml">QListWidget</db:link> in the same process, the list is empty.</db:para>
</db:section>
<db:section xml:id="mimeData">
<db:title>[virtual protected] QMimeData *QListWidget::mimeData(const QList&lt;QListWidgetItem *&gt; &amp;<db:emphasis>items</db:emphasis>) const</db:title>
<db:para>Returns an object that contains a serialized description of the specified <db:code role="parameter">items</db:code>. The format used to describe the items is obtained from the <db:link xlink:href="qlistwidget.xml#mimeTypes">mimeTypes</db:link>() function.</db:para>
<db:para>If the list of items is empty, nullptr is returned instead of a serialized empty list.</db:para>
</db:section>
<db:section xml:id="mimeTypes">
<db:title>[virtual protected] QStringList QListWidget::mimeTypes() const</db:title>
<db:para>Returns a list of MIME types that can be used to describe a list of listwidget items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#mimeData">mimeData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="openPersistentEditor">
<db:title>void QListWidget::openPersistentEditor(QListWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Opens an editor for the given <db:code role="parameter">item</db:code>. The editor remains open after editing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#closePersistentEditor">closePersistentEditor</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidget.xml#isPersistentEditorOpen">isPersistentEditorOpen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeItemWidget">
<db:title>void QListWidget::removeItemWidget(QListWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Removes the widget set on the given <db:code role="parameter">item</db:code>.</db:para>
<db:para>To remove an item (row) from the list entirely, either delete the item or use <db:link xlink:href="qlistwidget.xml#takeItem">takeItem</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#itemWidget">itemWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidget.xml#setItemWidget">setItemWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="row">
<db:title>int QListWidget::row(const QListWidgetItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>Returns the row containing the given <db:code role="parameter">item</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#item">item</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scrollToItem">
<db:title>void QListWidget::scrollToItem(const QListWidgetItem *<db:emphasis>item</db:emphasis>, QAbstractItemView::ScrollHint <db:emphasis>hint</db:emphasis> = EnsureVisible)</db:title>
<db:para>Scrolls the view if necessary to ensure that the <db:code role="parameter">item</db:code> is visible.</db:para>
<db:para><db:code role="parameter">hint</db:code> specifies where the <db:code role="parameter">item</db:code> should be located after the operation.</db:para>
</db:section>
<db:section xml:id="selectedItems">
<db:title>QList&lt;QListWidgetItem *&gt; QListWidget::selectedItems() const</db:title>
<db:para>Returns a list of all selected items in the list widget.</db:para>
</db:section>
<db:section xml:id="setCurrentItem">
<db:title>void QListWidget::setCurrentItem(QListWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Sets the current item to <db:code role="parameter">item</db:code>.</db:para>
<db:para>Unless the selection mode is <db:link xlink:href="qabstractitemview.xml#SelectionMode-enum">NoSelection</db:link>, the item is also selected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#currentItem">currentItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrentItem-1">
<db:title>void QListWidget::setCurrentItem(QListWidgetItem *<db:emphasis>item</db:emphasis>, QItemSelectionModel::SelectionFlags <db:emphasis>command</db:emphasis>)</db:title>
<db:para>Set the current item to <db:code role="parameter">item</db:code>, using the given <db:code role="parameter">command</db:code>.</db:para>
</db:section>
<db:section xml:id="setCurrentRow">
<db:title>void QListWidget::setCurrentRow(int <db:emphasis>row</db:emphasis>, QItemSelectionModel::SelectionFlags <db:emphasis>command</db:emphasis>)</db:title>
<db:para>Sets the current row to be the given <db:code role="parameter">row</db:code>, using the given <db:code role="parameter">command</db:code>,</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qlistwidget.xml#currentRow-prop">currentRow</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#currentRow-prop">currentRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemWidget">
<db:title>void QListWidget::setItemWidget(QListWidgetItem *<db:emphasis>item</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">widget</db:code> to be displayed in the given <db:code role="parameter">item</db:code>.</db:para>
<db:para>This function should only be used to display static content in the place of a list widget item. If you want to display custom dynamic content or implement a custom editor widget, use <db:link xlink:href="qlistview.xml">QListView</db:link> and subclass <db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate</db:link> instead.</db:para>
<db:note>
<db:para>The list takes ownership of the <db:code role="parameter">widget</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#itemWidget">itemWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidget.xml#removeItemWidget">removeItemWidget</db:link>()</db:member>
<db:member><db:link xlink:href="model-view-programming.xml#delegate-classes">Delegate Classes</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelectionModel">
<db:title>[override virtual] void QListWidget::setSelectionModel(QItemSelectionModel *<db:emphasis>selectionModel</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#setSelectionModel" role="function">QAbstractItemView::setSelectionModel(QItemSelectionModel *selectionModel)</db:link>.</db:para>
</db:section>
<db:section xml:id="sortItems">
<db:title>void QListWidget::sortItems(Qt::SortOrder <db:emphasis>order</db:emphasis> = Qt::AscendingOrder)</db:title>
<db:para>Sorts all the items in the list widget according to the specified <db:code role="parameter">order</db:code>.</db:para>
</db:section>
<db:section xml:id="supportedDropActions">
<db:title>[virtual protected] Qt::DropActions QListWidget::supportedDropActions() const</db:title>
<db:para>Returns the drop actions supported by this view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#DropAction-enum">Qt::DropActions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeItem">
<db:title>QListWidgetItem *QListWidget::takeItem(int <db:emphasis>row</db:emphasis>)</db:title>
<db:para>Removes and returns the item from the given <db:code role="parameter">row</db:code> in the list widget; otherwise returns nullptr.</db:para>
<db:para>Items removed from a list widget will not be managed by Qt, and will need to be deleted manually.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml#insertItem">insertItem</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidget.xml#addItem">addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visualItemRect">
<db:title>QRect QListWidget::visualItemRect(const QListWidgetItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>Returns the rectangle on the viewport occupied by the item at <db:code role="parameter">item</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
