<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Painter Paths Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Painter Paths example shows how painter paths can be used to beuild complex shapes for rendering.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;renderarea.h&quot;
#include &quot;window.h&quot;

#include &amp;lt;QtWidgets&amp;gt;

#include &amp;lt;qmath.h&amp;gt;

Window::Window()
{
    QPainterPath rectPath;
    rectPath.moveTo(20.0, 30.0);
    rectPath.lineTo(80.0, 30.0);
    rectPath.lineTo(80.0, 70.0);
    rectPath.lineTo(20.0, 70.0);
    rectPath.closeSubpath();

    QPainterPath roundRectPath;
    roundRectPath.moveTo(80.0, 35.0);
    roundRectPath.arcTo(70.0, 30.0, 10.0, 10.0, 0.0, 90.0);
    roundRectPath.lineTo(25.0, 30.0);
    roundRectPath.arcTo(20.0, 30.0, 10.0, 10.0, 90.0, 90.0);
    roundRectPath.lineTo(20.0, 65.0);
    roundRectPath.arcTo(20.0, 60.0, 10.0, 10.0, 180.0, 90.0);
    roundRectPath.lineTo(75.0, 70.0);
    roundRectPath.arcTo(70.0, 60.0, 10.0, 10.0, 270.0, 90.0);
    roundRectPath.closeSubpath();

    QPainterPath ellipsePath;
    ellipsePath.moveTo(80.0, 50.0);
    ellipsePath.arcTo(20.0, 30.0, 60.0, 40.0, 0.0, 360.0);

    QPainterPath piePath;
    piePath.moveTo(50.0, 50.0);
    piePath.arcTo(20.0, 30.0, 60.0, 40.0, 60.0, 240.0);
    piePath.closeSubpath();

    QPainterPath polygonPath;
    polygonPath.moveTo(10.0, 80.0);
    polygonPath.lineTo(20.0, 10.0);
    polygonPath.lineTo(80.0, 30.0);
    polygonPath.lineTo(90.0, 70.0);
    polygonPath.closeSubpath();

    QPainterPath groupPath;
    groupPath.moveTo(60.0, 40.0);
    groupPath.arcTo(20.0, 20.0, 40.0, 40.0, 0.0, 360.0);
    groupPath.moveTo(40.0, 40.0);
    groupPath.lineTo(40.0, 80.0);
    groupPath.lineTo(80.0, 80.0);
    groupPath.lineTo(80.0, 40.0);
    groupPath.closeSubpath();

    QPainterPath textPath;
    QFont timesFont(&quot;Times&quot;, 50);
    timesFont.setStyleStrategy(QFont::ForceOutline);
    textPath.addText(10, 70, timesFont, tr(&quot;Qt&quot;));

    QPainterPath bezierPath;
    bezierPath.moveTo(20, 30);
    bezierPath.cubicTo(80, 0, 50, 50, 80, 80);

    QPainterPath starPath;
    starPath.moveTo(90, 50);
    for (int i = 1; i &amp;lt; 5; ++i) {
        starPath.lineTo(50 + 40 * std::cos(0.8 * i * M_PI),
                        50 + 40 * std::sin(0.8 * i * M_PI));
    }
    starPath.closeSubpath();

    renderAreas.push_back(new RenderArea(rectPath));
    renderAreas.push_back(new RenderArea(roundRectPath));
    renderAreas.push_back(new RenderArea(ellipsePath));
    renderAreas.push_back(new RenderArea(piePath));
    renderAreas.push_back(new RenderArea(polygonPath));
    renderAreas.push_back(new RenderArea(groupPath));
    renderAreas.push_back(new RenderArea(textPath));
    renderAreas.push_back(new RenderArea(bezierPath));
    renderAreas.push_back(new RenderArea(starPath));

    fillRuleComboBox = new QComboBox;
    fillRuleComboBox-&amp;gt;addItem(tr(&quot;Odd Even&quot;), Qt::OddEvenFill);
    fillRuleComboBox-&amp;gt;addItem(tr(&quot;Winding&quot;), Qt::WindingFill);

    fillRuleLabel = new QLabel(tr(&quot;Fill &amp;amp;Rule:&quot;));
    fillRuleLabel-&amp;gt;setBuddy(fillRuleComboBox);

    fillColor1ComboBox = new QComboBox;
    populateWithColors(fillColor1ComboBox);
    fillColor1ComboBox-&amp;gt;setCurrentIndex(fillColor1ComboBox-&amp;gt;findText(&quot;mediumslateblue&quot;));

    fillColor2ComboBox = new QComboBox;
    populateWithColors(fillColor2ComboBox);
    fillColor2ComboBox-&amp;gt;setCurrentIndex(fillColor2ComboBox-&amp;gt;findText(&quot;cornsilk&quot;));

    fillGradientLabel = new QLabel(tr(&quot;&amp;amp;Fill Gradient:&quot;));
    fillGradientLabel-&amp;gt;setBuddy(fillColor1ComboBox);

    fillToLabel = new QLabel(tr(&quot;to&quot;));
    fillToLabel-&amp;gt;setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed);

    penWidthSpinBox = new QSpinBox;
    penWidthSpinBox-&amp;gt;setRange(0, 20);

    penWidthLabel = new QLabel(tr(&quot;&amp;amp;Pen Width:&quot;));
    penWidthLabel-&amp;gt;setBuddy(penWidthSpinBox);

    penColorComboBox = new QComboBox;
    populateWithColors(penColorComboBox);
    penColorComboBox-&amp;gt;setCurrentIndex(penColorComboBox-&amp;gt;findText(&quot;darkslateblue&quot;));

    penColorLabel = new QLabel(tr(&quot;Pen &amp;amp;Color:&quot;));
    penColorLabel-&amp;gt;setBuddy(penColorComboBox);

    rotationAngleSpinBox = new QSpinBox;
    rotationAngleSpinBox-&amp;gt;setRange(0, 359);
    rotationAngleSpinBox-&amp;gt;setWrapping(true);
    rotationAngleSpinBox-&amp;gt;setSuffix(QLatin1String(&quot;\xB0&quot;));

    rotationAngleLabel = new QLabel(tr(&quot;&amp;amp;Rotation Angle:&quot;));
    rotationAngleLabel-&amp;gt;setBuddy(rotationAngleSpinBox);

    connect(fillRuleComboBox, SIGNAL(activated(int)), this, SLOT(fillRuleChanged()));
    connect(fillColor1ComboBox, SIGNAL(activated(int)), this, SLOT(fillGradientChanged()));
    connect(fillColor2ComboBox, SIGNAL(activated(int)), this, SLOT(fillGradientChanged()));
    connect(penColorComboBox, SIGNAL(activated(int)), this, SLOT(penColorChanged()));

    for(QList&amp;lt;RenderArea*&amp;gt;::iterator it = renderAreas.begin(); it != renderAreas.end(); it++) {
        connect(penWidthSpinBox, SIGNAL(valueChanged(int)), *it, SLOT(setPenWidth(int)));
        connect(rotationAngleSpinBox, SIGNAL(valueChanged(int)), *it, SLOT(setRotationAngle(int)));
    }

    QGridLayout *topLayout = new QGridLayout;

    int i=0;
    for(QList&amp;lt;RenderArea*&amp;gt;::iterator it = renderAreas.begin(); it != renderAreas.end(); it++, i++)
        topLayout-&amp;gt;addWidget(*it, i / 3, i % 3);

    QGridLayout *mainLayout = new QGridLayout;
    mainLayout-&amp;gt;addLayout(topLayout, 0, 0, 1, 4);
    mainLayout-&amp;gt;addWidget(fillRuleLabel, 1, 0);
    mainLayout-&amp;gt;addWidget(fillRuleComboBox, 1, 1, 1, 3);
    mainLayout-&amp;gt;addWidget(fillGradientLabel, 2, 0);
    mainLayout-&amp;gt;addWidget(fillColor1ComboBox, 2, 1);
    mainLayout-&amp;gt;addWidget(fillToLabel, 2, 2);
    mainLayout-&amp;gt;addWidget(fillColor2ComboBox, 2, 3);
    mainLayout-&amp;gt;addWidget(penWidthLabel, 3, 0);
    mainLayout-&amp;gt;addWidget(penWidthSpinBox, 3, 1, 1, 3);
    mainLayout-&amp;gt;addWidget(penColorLabel, 4, 0);
    mainLayout-&amp;gt;addWidget(penColorComboBox, 4, 1, 1, 3);
    mainLayout-&amp;gt;addWidget(rotationAngleLabel, 5, 0);
    mainLayout-&amp;gt;addWidget(rotationAngleSpinBox, 5, 1, 1, 3);
    setLayout(mainLayout);

    fillRuleChanged();
    fillGradientChanged();
    penColorChanged();
    penWidthSpinBox-&amp;gt;setValue(2);

    setWindowTitle(tr(&quot;Painter Paths&quot;));
}

void Window::fillRuleChanged()
{
    Qt::FillRule rule = (Qt::FillRule)currentItemData(fillRuleComboBox).toInt();

    for (QList&amp;lt;RenderArea*&amp;gt;::iterator it = renderAreas.begin(); it != renderAreas.end(); ++it)
        (*it)-&amp;gt;setFillRule(rule);
}

void Window::fillGradientChanged()
{
    QColor color1 = qvariant_cast&amp;lt;QColor&amp;gt;(currentItemData(fillColor1ComboBox));
    QColor color2 = qvariant_cast&amp;lt;QColor&amp;gt;(currentItemData(fillColor2ComboBox));

    for (QList&amp;lt;RenderArea*&amp;gt;::iterator it = renderAreas.begin(); it != renderAreas.end(); ++it)
        (*it)-&amp;gt;setFillGradient(color1, color2);
}

void Window::penColorChanged()
{
    QColor color = qvariant_cast&amp;lt;QColor&amp;gt;(currentItemData(penColorComboBox));

    for (QList&amp;lt;RenderArea*&amp;gt;::iterator it = renderAreas.begin(); it != renderAreas.end(); ++it)
        (*it)-&amp;gt;setPenColor(color);
}

void Window::populateWithColors(QComboBox *comboBox)
{
    QStringList colorNames = QColor::colorNames();
    foreach (QString name, colorNames)
        comboBox-&amp;gt;addItem(name, QColor(name));
}

QVariant Window::currentItemData(QComboBox *comboBox)
{
    return comboBox-&amp;gt;itemData(comboBox-&amp;gt;currentIndex());
}

</db:programlisting>
</db:article>
