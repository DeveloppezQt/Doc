<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMorphingAnimation Class</db:title>
<db:subtitle>Qt3DAnimation::QMorphingAnimation</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A class implementing blend-shape morphing animation.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMorphingAnimation</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS 3danimation)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::3danimation)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3danimation</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qt3d-animation-morphinganimation.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3danimation-qabstractanimation.xml" xlink:role="class">Qt3DAnimation::QAbstractAnimation</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qt3danimation-qmorphinganimation.xml">Qt3DAnimation::QMorphingAnimation</db:link> class implements blend-shape morphing animation to a target <db:link xlink:href="qt3drender-qgeometryrenderer.xml">QGeometryRenderer</db:link>. The <db:link xlink:href="qt3danimation-qmorphinganimation.xml">QMorphingAnimation</db:link> sets the correct <db:link xlink:href="qt3dcore-qattribute.xml">QAttributes</db:link> from the <db:link xlink:href="qt3danimation-qmorphtarget.xml">morph targets</db:link> to the target <db:link xlink:href="qt3drender-qgeometryrenderer.xml#geometry-prop">QGeometryRenderer::geometry</db:link> and calculates interpolator for the current position. The actual blending between the attributes must be implemented in the material. Qt3DAnimation::QMorphPhongMaterial implements material with morphing support for phong lighting model. The blending happens between 2 attributes - 'base' and 'target'. The names for the base and target attributes are taken from the morph target names, where the base attribute retains the name it already has and the target attribute name gets 'Target' appended to the name. The interpolator can be set as a <db:link xlink:href="qt3drender-qparameter.xml">QParameter</db:link> to the used material. All morph targets in the animation should contain the attributes with same names as those in the base geometry.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Method-enum">
<db:title>enum QMorphingAnimation::Method</db:title>
<db:enumsynopsis>
<db:enumname>Method</db:enumname>
<db:enumitem>
<db:enumidentifier>Normalized</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Relative</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enumeration specifies the morphing method.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3danimation.xml">Qt3DAnimation</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3danimation-qmorphinganimation.xml">QMorphingAnimation</db:link></db:emphasis>::Normalized</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The blending should use the normalized formula; V' = Vbase * (1.0 - sum(Wi)) + sum[Vi * Wi]</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3danimation.xml">Qt3DAnimation</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3danimation-qmorphinganimation.xml">QMorphingAnimation</db:link></db:emphasis>::Relative</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The blending should use the relative formula; V' = Vbase + sum[Vi * Wi]</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="easing-prop">
<db:title>easing : QEasingCurve</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QEasingCurve</db:type>
<db:varname>easing</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">easing</db:synopsisinfo>
<db:synopsisinfo role="setter">setEasing</db:synopsisinfo>
<db:synopsisinfo role="notifier">easingChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the easing curve of the interpolator between morph targets.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:type> <db:emphasis role="bold">easing</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setEasing</db:emphasis>(const <db:type><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:type> &amp;<db:emphasis>easing</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">easingChanged</db:emphasis>(const <db:type><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:type> &amp;<db:emphasis>easing</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="interpolator-prop">
<db:title>[read-only] interpolator : const float</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>float</db:type>
<db:varname>interpolator</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">interpolator</db:synopsisinfo>
<db:synopsisinfo role="notifier">interpolatorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the interpolator between base and target attributes.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">interpolator</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">interpolatorChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>interpolator</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="method-prop">
<db:title>method : Method</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Method</db:type>
<db:varname>method</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">method</db:synopsisinfo>
<db:synopsisinfo role="setter">setMethod</db:synopsisinfo>
<db:synopsisinfo role="notifier">methodChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the morphing method. The default is Relative.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt3danimation-qmorphinganimation.xml#Method-enum">QMorphingAnimation::Method</db:link></db:type> <db:emphasis role="bold">method</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMethod</db:emphasis>(<db:type><db:link xlink:href="qt3danimation-qmorphinganimation.xml#Method-enum">QMorphingAnimation::Method</db:link></db:type> <db:emphasis>method</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">methodChanged</db:emphasis>(<db:type><db:link xlink:href="qt3danimation-qmorphinganimation.xml#Method-enum">QMorphingAnimation::Method</db:link></db:type> <db:emphasis>method</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="target-prop">
<db:title>target : Qt3DRender::QGeometryRenderer*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt3DRender::QGeometryRenderer*</db:type>
<db:varname>target</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">target</db:synopsisinfo>
<db:synopsisinfo role="setter">setTarget</db:synopsisinfo>
<db:synopsisinfo role="notifier">targetChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the target QGeometryRenderer the morphing animation is applied to.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt3drender-qgeometryrenderer.xml">Qt3DRender::QGeometryRenderer</db:link></db:type> *<db:emphasis role="bold">target</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTarget</db:emphasis>(<db:type><db:link xlink:href="qt3drender-qgeometryrenderer.xml">Qt3DRender::QGeometryRenderer</db:link></db:type> *<db:emphasis>target</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">targetChanged</db:emphasis>(<db:type><db:link xlink:href="qt3drender-qgeometryrenderer.xml">Qt3DRender::QGeometryRenderer</db:link></db:type> *<db:emphasis>target</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="targetName-prop">
<db:title>targetName : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>targetName</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">targetName</db:synopsisinfo>
<db:synopsisinfo role="setter">setTargetName</db:synopsisinfo>
<db:synopsisinfo role="notifier">targetNameChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the name of the target geometry. This is a convenience property making it easier to match the target geometry to the morphing animation. The name is usually same as the name of the parent entity of the target QGeometryRenderer, but does not have to be.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">targetName</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTargetName</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis>name</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">targetNameChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>name</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="targetPositions-prop">
<db:title>targetPositions : QVector&lt;float&gt;</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QVector&lt;float&gt;</db:type>
<db:varname>targetPositions</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">targetPositions</db:synopsisinfo>
<db:synopsisinfo role="setter">setTargetPositions</db:synopsisinfo>
<db:synopsisinfo role="notifier">targetPositionsChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the position values of the morph target. Each position in the list specifies the position of the corresponding morph target with the same index. The values must be in an ascending order. Values can be positive or negative and do not have any predefined unit.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvector.xml">QVector</db:link></db:type>&lt;<db:type>float</db:type>&gt; <db:emphasis role="bold">targetPositions</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTargetPositions</db:emphasis>(const <db:type><db:link xlink:href="qvector.xml">QVector</db:link></db:type>&lt;<db:type>float</db:type>&gt; &amp;<db:emphasis>targetPositions</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">targetPositionsChanged</db:emphasis>(const <db:type><db:link xlink:href="qvector.xml">QVector</db:link></db:type>&lt;<db:type>float</db:type>&gt; &amp;<db:emphasis>targetPositions</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMorphingAnimation">
<db:title>[explicit] QMorphingAnimation::QMorphingAnimation(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QMorphingAnimation</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMorphingAnimation(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Construct a new <db:link xlink:href="qt3danimation-qmorphinganimation.xml">QMorphingAnimation</db:link> with <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="addMorphTarget">
<db:title>void QMorphingAnimation::addMorphTarget(Qt3DAnimation::QMorphTarget *<db:emphasis>target</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addMorphTarget</db:methodname>
<db:methodparam>
<db:type>Qt3DAnimation::QMorphTarget *</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addMorphTarget(Qt3DAnimation::QMorphTarget *target)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Add new morph <db:code role="parameter">target</db:code> at the end of the animation.</db:para>
</db:section>
<db:section xml:id="getWeights">
<db:title>QVector&lt;float&gt; QMorphingAnimation::getWeights(int <db:emphasis>positionIndex</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVector&lt;float&gt;</db:type>
<db:methodname>getWeights</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>positionIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector&lt;float&gt; getWeights(int positionIndex)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return morph weights at <db:code role="parameter">positionIndex</db:code>.</db:para>
</db:section>
<db:section xml:id="morphTargetList">
<db:title>QVector&lt;Qt3DAnimation::QMorphTarget *&gt; QMorphingAnimation::morphTargetList()</db:title>
<db:methodsynopsis>
<db:type>QVector&lt;Qt3DAnimation::QMorphTarget *&gt;</db:type>
<db:methodname>morphTargetList</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector&lt;Qt3DAnimation::QMorphTarget *&gt; morphTargetList()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return morph target list.</db:para>
</db:section>
<db:section xml:id="removeMorphTarget">
<db:title>void QMorphingAnimation::removeMorphTarget(Qt3DAnimation::QMorphTarget *<db:emphasis>target</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeMorphTarget</db:methodname>
<db:methodparam>
<db:type>Qt3DAnimation::QMorphTarget *</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeMorphTarget(Qt3DAnimation::QMorphTarget *target)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Remove morph <db:code role="parameter">target</db:code> from the animation.</db:para>
</db:section>
<db:section xml:id="setMorphTargets">
<db:title>void QMorphingAnimation::setMorphTargets(const QVector&lt;Qt3DAnimation::QMorphTarget *&gt; &amp;<db:emphasis>targets</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMorphTargets</db:methodname>
<db:methodparam>
<db:type>const QVector&lt;Qt3DAnimation::QMorphTarget *&gt; &amp;</db:type>
<db:parameter>targets</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMorphTargets(const QVector&lt;Qt3DAnimation::QMorphTarget *&gt; &amp;targets)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set morph <db:code role="parameter">targets</db:code> to animation. Old targets are cleared.</db:para>
</db:section>
<db:section xml:id="setWeights">
<db:title>void QMorphingAnimation::setWeights(int <db:emphasis>positionIndex</db:emphasis>, const QVector&lt;float&gt; &amp;<db:emphasis>weights</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWeights</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>positionIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector&lt;float&gt; &amp;</db:type>
<db:parameter>weights</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWeights(int positionIndex, const QVector&lt;float&gt; &amp;weights)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets morph <db:code role="parameter">weights</db:code> at <db:code role="parameter">positionIndex</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
