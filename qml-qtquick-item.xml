<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Item QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A basic visual QML type.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-animatedsprite.xml" xlink:role="">AnimatedSprite</db:link>, <db:link xlink:href="qml-qtquick-virtualkeyboard-components-basekey.xml" xlink:role="">BaseKey</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-blend.xml" xlink:role="">Blend</db:link>, <db:link xlink:href="qml-qtquick-borderimage.xml" xlink:role="">BorderImage</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-brightnesscontrast.xml" xlink:role="">BrightnessContrast</db:link>, <db:link xlink:href="qml-qtquick-canvas.xml" xlink:role="">Canvas</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-colorize.xml" xlink:role="">Colorize</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-coloroverlay.xml" xlink:role="">ColorOverlay</db:link>, <db:link xlink:href="qml-qtquick-column.xml" xlink:role="">Column</db:link>, <db:link xlink:href="qml-qtquick-layouts-columnlayout.xml" xlink:role="">ColumnLayout</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-conicalgradient.xml" xlink:role="">ConicalGradient</db:link>, <db:link xlink:href="qml-qtquick-controls-control.xml" xlink:role="">Control</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-desaturate.xml" xlink:role="">Desaturate</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-directionalblur.xml" xlink:role="">DirectionalBlur</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-displace.xml" xlink:role="">Displace</db:link>, <db:link xlink:href="qml-qtquick-droparea.xml" xlink:role="">DropArea</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-dropshadow.xml" xlink:role="">DropShadow</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-fastblur.xml" xlink:role="">FastBlur</db:link>, <db:link xlink:href="qml-qtquick-flickable.xml" xlink:role="">Flickable</db:link>, <db:link xlink:href="qml-qtquick-flipable.xml" xlink:role="">Flipable</db:link>, <db:link xlink:href="qml-qtquick-flow.xml" xlink:role="">Flow</db:link>, <db:link xlink:href="qml-qtquick-focusscope.xml" xlink:role="">FocusScope</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-gammaadjust.xml" xlink:role="">GammaAdjust</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-gaussianblur.xml" xlink:role="">GaussianBlur</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-glow.xml" xlink:role="">Glow</db:link>, <db:link xlink:href="qml-qtquick-grid.xml" xlink:role="">Grid</db:link>, <db:link xlink:href="qml-qtquick-layouts-gridlayout.xml" xlink:role="">GridLayout</db:link>, <db:link xlink:href="qml-qtquick-virtualkeyboard-handwritinginputpanel.xml" xlink:role="">HandwritingInputPanel</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-huesaturation.xml" xlink:role="">HueSaturation</db:link>, <db:link xlink:href="qml-qtquick-image.xml" xlink:role="">Image</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-innershadow.xml" xlink:role="">InnerShadow</db:link>, <db:link xlink:href="qml-qtquick-virtualkeyboard-inputpanel.xml" xlink:role="">InputPanel</db:link>, <db:link xlink:href="qml-qtquick-virtualkeyboard-styles-keyicon.xml" xlink:role="">KeyIcon</db:link>, <db:link xlink:href="qml-qtquick-virtualkeyboard-styles-keypanel.xml" xlink:role="">KeyPanel</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-leveladjust.xml" xlink:role="">LevelAdjust</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-lineargradient.xml" xlink:role="">LinearGradient</db:link>, <db:link xlink:href="qml-qtquick-loader.xml" xlink:role="">Loader</db:link>, <db:link xlink:href="qml-qt-labs-lottieqt-lottieanimation.xml" xlink:role="">LottieAnimation</db:link>, <db:link xlink:href="qml-qtlocation-mapview.xml" xlink:role="">MapView</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-maskedblur.xml" xlink:role="">MaskedBlur</db:link>, <db:link xlink:href="qml-qtquick-mousearea.xml" xlink:role="">MouseArea</db:link>, <db:link xlink:href="qml-qtquick-effects-multieffect.xml" xlink:role="">MultiEffect</db:link>, <db:link xlink:href="qml-qtquick-multipointtoucharea.xml" xlink:role="">MultiPointTouchArea</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-opacitymask.xml" xlink:role="">OpacityMask</db:link>, <db:link xlink:href="qml-qtquick3d-helpers-orbitcameracontroller.xml" xlink:role="">OrbitCameraController</db:link>, <db:link xlink:href="qml-qtquick-controls-overlay.xml" xlink:role="">Overlay</db:link>, <db:link xlink:href="qml-qtquick-particles-particlepainter.xml" xlink:role="">ParticlePainter</db:link>, <db:link xlink:href="qml-qtquick-pathview.xml" xlink:role="">PathView</db:link>, <db:link xlink:href="qml-qtquick-pdf-pdflinkdelegate.xml" xlink:role="">PdfLinkDelegate</db:link>, <db:link xlink:href="qml-qtquick-pdf-pdfmultipageview.xml" xlink:role="">PdfMultiPageView</db:link>, <db:link xlink:href="qml-qtquick-pdf-pdfselection.xml" xlink:role="">PdfSelection</db:link>, <db:link xlink:href="qml-qtquick-pincharea.xml" xlink:role="">PinchArea</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-radialblur.xml" xlink:role="">RadialBlur</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-radialgradient.xml" xlink:role="">RadialGradient</db:link>, <db:link xlink:href="qml-qtquick-rectangle.xml" xlink:role="">Rectangle</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-rectangularglow.xml" xlink:role="">RectangularGlow</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-recursiveblur.xml" xlink:role="">RecursiveBlur</db:link>, <db:link xlink:href="qml-qtquick-repeater.xml" xlink:role="">Repeater</db:link>, <db:link xlink:href="qml-qtquick-row.xml" xlink:role="">Row</db:link>, <db:link xlink:href="qml-qtquick-layouts-rowlayout.xml" xlink:role="">RowLayout</db:link>, <db:link xlink:href="qml-qtquick-scene3d-scene3d.xml" xlink:role="">Scene3D</db:link>, <db:link xlink:href="qml-qtquick-virtualkeyboard-styles-selectionlistitem.xml" xlink:role="">SelectionListItem</db:link>, <db:link xlink:href="qml-qtquick-shadereffect.xml" xlink:role="">ShaderEffect</db:link>, <db:link xlink:href="qml-qtquick-shadereffectsource.xml" xlink:role="">ShaderEffectSource</db:link>, <db:link xlink:href="qml-qtquick-shapes-shape.xml" xlink:role="">Shape</db:link>, <db:link xlink:href="qml-qttest-signalspy.xml" xlink:role="">SignalSpy</db:link>, <db:link xlink:href="qml-qtquick-spritesequence.xml" xlink:role="">SpriteSequence</db:link>, <db:link xlink:href="qml-qtquick-layouts-stacklayout.xml" xlink:role="">StackLayout</db:link>, <db:link xlink:href="qml-qttest-testcase.xml" xlink:role="">TestCase</db:link>, <db:link xlink:href="qml-qtquick-text.xml" xlink:role="">Text</db:link>, <db:link xlink:href="qml-qtquick-textedit.xml" xlink:role="">TextEdit</db:link>, <db:link xlink:href="qml-qtquick-textinput.xml" xlink:role="">TextInput</db:link>, <db:link xlink:href="qml-qt5compat-graphicaleffects-thresholdmask.xml" xlink:role="">ThresholdMask</db:link>, <db:link xlink:href="qml-qtquick-virtualkeyboard-components-traceinputkey.xml" xlink:role="">TraceInputKey</db:link>, <db:link xlink:href="qml-qtquick-virtualkeyboard-styles-traceinputkeypanel.xml" xlink:role="">TraceInputKeyPanel</db:link>, <db:link xlink:href="qml-qtmultimedia-video.xml" xlink:role="">Video</db:link>, <db:link xlink:href="qml-qtquick3d-helpers-wasdcontroller.xml" xlink:role="">WasdController</db:link>, <db:link xlink:href="qml-qtwebengine-webengineview.xml" xlink:role="">WebEngineView</db:link>, and <db:link xlink:href="qml-qt5compat-graphicaleffects-zoomblur.xml" xlink:role="">ZoomBlur</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>QtObject</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiates:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Item is part of <db:simplelist><db:member>qtquick-visual</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The Item type is the base type for all visual items in Qt Quick.</db:para>
<db:para>All visual items in Qt Quick inherit from Item. Although an Item object has no visual appearance, it defines all the attributes that are common across visual items, such as x and y position, width and height, <db:link xlink:href="qtquick-positioning-anchors.xml">anchoring</db:link> and key handling support.</db:para>
<db:para>The Item type can be useful for grouping several items under a single root visual item. For example:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Item {
    Image {
        source: &quot;tile.png&quot;
    }
    Image {
        x: 80
        width: 100
        height: 100
        source: &quot;tile.png&quot;
    }
    Image {
        x: 190
        width: 100
        height: 100
        fillMode: Image.Tile
        source: &quot;tile.png&quot;
    }
}
</db:programlisting>
<db:section xml:id="event-handling">
<db:title>Event Handling</db:title>
<db:para>All Item-based visual types can use <db:link xlink:href="qtquickhandlers-index.xml">Input Handlers</db:link> to handle incoming input events (subclasses of <db:link xlink:href="qinputevent.xml">QInputEvent</db:link>), such as mouse, touch and key events. This is the preferred declarative way to handle events.</db:para>
<db:para>An alternative way to handle touch events is to subclass <db:link xlink:href="qquickitem.xml">QQuickItem</db:link>, call setAcceptTouchEvents() in the constructor, and override touchEvent(). <db:link xlink:href="qevent.xml#accepted-prop">Accept</db:link> the entire event to stop delivery to items underneath, and to exclusively grab for all the event's touch points. Use <db:link xlink:href="qpointerevent.xml#setExclusiveGrabber">QPointerEvent::setExclusiveGrabber</db:link>() to grab only certain touchpoints, and allow the event to be delivered further.</db:para>
<db:para>Likewise, a <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> subclass can call setAcceptedMouseButtons() to register to receive mouse button events, setAcceptHoverEvents() to receive hover events (mouse movements while no button is pressed), and override the virtual functions mousePressEvent(), mouseMoveEvent(), and mouseReleaseEvent(). Those can also accept the event to prevent further delivery and get an implicit grab at the same time; or explicitly <db:link xlink:href="qpointerevent.xml#setExclusiveGrabber">grab</db:link> the single <db:link xlink:href="qeventpoint.xml">QEventPoint</db:link> that the <db:link xlink:href="qmouseevent.xml">QMouseEvent</db:link> carries.</db:para>
<db:para>Key handling is available to all Item-based visual types via the <db:link xlink:href="qml-qtquick-keys.xml">Keys</db:link> attached property. The <db:emphasis>Keys</db:emphasis> attached property provides basic signals such as <db:link xlink:href="qml-qtquick-keys.xml#pressed-signal">pressed</db:link> and <db:link xlink:href="qml-qtquick-keys.xml#released-signal">released</db:link>, as well as signals for specific keys, such as <db:link xlink:href="qml-qtquick-keys.xml#spacePressed-signal">spacePressed</db:link>. The example below assigns <db:link xlink:href="qtquick-input-focus.xml">keyboard focus</db:link> to the item and handles the left key via the general <db:code>onPressed</db:code> handler and the return key via the <db:code>onReturnPressed</db:code> handler:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Item {
    focus: true
    Keys.onPressed: (event)=&amp;gt; {
        if (event.key == Qt.Key_Left) {
            console.log(&quot;move left&quot;);
            event.accepted = true;
        }
    }
    Keys.onReturnPressed: console.log(&quot;Pressed return&quot;);
}
</db:programlisting>
<db:para>See the <db:link xlink:href="qml-qtquick-keys.xml">Keys</db:link> attached property for detailed documentation.</db:para>
</db:section>
<db:section xml:id="layout-mirroring">
<db:title>Layout Mirroring</db:title>
<db:para>Item layouts can be mirrored using the <db:link xlink:href="qml-qtquick-layoutmirroring.xml">LayoutMirroring</db:link> attached property. This causes <db:link xlink:href="qml-qtquick-item.xml#anchors.top-prop">anchors</db:link> to be horizontally reversed, and also causes items that lay out or position their children (such as <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> or <db:link xlink:href="qml-qtquick-row.xml">Row</db:link>) to horizontally reverse the direction of their layouts.</db:para>
<db:para>See <db:link xlink:href="qml-qtquick-layoutmirroring.xml">LayoutMirroring</db:link> for more details.</db:para>
</db:section>
<db:section xml:id="item-layers">
<db:title>Item Layers</db:title>
<db:para>An Item will normally be rendered directly into the window it belongs to. However, by setting <db:link xlink:href="qml-qtquick-item.xml#layer.enabled-prop">layer.enabled</db:link>, it is possible to delegate the item and its entire subtree into an offscreen surface. Only the offscreen surface, a texture, will be then drawn into the window.</db:para>
<db:para>If it is desired to have a texture size different from that of the item, this is possible using <db:link xlink:href="qml-qtquick-item.xml#layer.textureSize-prop">layer.textureSize</db:link>. To render only a section of the item into the texture, use <db:link xlink:href="qml-qtquick-item.xml#layer.sourceRect-prop">layer.sourceRect</db:link>. It is also possible to specify <db:link xlink:href="qml-qtquick-item.xml#layer.sourceRect-prop">layer.sourceRect</db:link> so it extends beyond the bounds of the item. In this case, the exterior will be padded with transparent pixels.</db:para>
<db:para>The item will use linear interpolation for scaling if <db:link xlink:href="qml-qtquick-item.xml#layer.smooth-prop">layer.smooth</db:link> is set to <db:code>true</db:code> and will use mipmap for downsampling if <db:link xlink:href="qml-qtquick-item.xml#layer.mipmap-prop">layer.mipmap</db:link> is set to <db:code>true</db:code>. Mipmapping may improve visual quality of downscaled items. For mipmapping of single Image items, prefer <db:link xlink:href="qml-qtquick-image.xml#mipmap-prop">Image::mipmap</db:link>.</db:para>
<db:section xml:id="layer-opacity-vs-item-opacity">
<db:title>Layer Opacity vs Item Opacity</db:title>
<db:para>When applying <db:link xlink:href="qml-qtquick-item.xml#opacity-prop">opacity</db:link> to an item hierarchy the opacity is applied to each item individually. This can lead to undesired visual results when the opacity is applied to a subtree. Consider the following example:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-blending-nonlayered.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Non-layered Opacity</db:emphasis></db:para>
<db:programlisting language="qml">Item {
    id: nonLayered

    opacity: 0.5

    width: 100
    height: 100

    Rectangle { width: 80; height: 80; border.width: 1 }
    Rectangle { x: 20; y: 20; width: 80; height: 80; border.width: 1 }
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>A layer is rendered with the root item's opacity being 1, and then the root item's opacity is applied to the texture when it is drawn. This means that fading in a large item hierarchy from transparent to opaque, or vice versa, can be done without the overlap artifacts that the normal item by item alpha blending has. Here is the same example with layer enabled:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-blending-layered.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Layered Opacity</db:emphasis></db:para>
<db:programlisting language="qml">Item {
    id: layered

    opacity: 0.5

    layer.enabled: true

    width: 100
    height: 100

    Rectangle { width: 80; height: 80; border.width: 1 }
    Rectangle { x: 20; y: 20; width: 80; height: 80; border.width: 1 }
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="combined-with-shadereffects">
<db:title>Combined with ShaderEffects</db:title>
<db:para>Setting <db:link xlink:href="qml-qtquick-item.xml#layer.enabled-prop">layer.enabled</db:link> to true will turn the item into a <db:link xlink:href="qquickitem.xml#isTextureProvider">texture provider</db:link>, making it possible to use the item directly as a texture, for instance in combination with the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> type.</db:para>
<db:para>It is possible to apply an effect on a layer at runtime using layer.effect:</db:para>
<db:programlisting language="qml">Item {
    id: layerRoot
    layer.enabled: true
    layer.effect: ShaderEffect {
        fragmentShader: &quot;effect.frag.qsb&quot;
    }
}
</db:programlisting>
<db:para>See <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> for more information about using effects.</db:para>
<db:note>
<db:para><db:link xlink:href="qml-qtquick-item.xml#layer.enabled-prop">layer.enabled</db:link> is actually just a more convenient way of using <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="memory-and-performance">
<db:title>Memory and Performance</db:title>
<db:para>When an item's layer is enabled, the scene graph will allocate memory in the GPU equal to <db:code>width x height x 4</db:code>. In memory constrained configurations, large layers should be used with care.</db:para>
<db:para>In the <db:link xlink:href="qpainter.xml">QPainter</db:link> / <db:link xlink:href="qwidget.xml">QWidget</db:link> world, it is sometimes favorable to cache complex content in a pixmap, image or texture. In Qt Quick, because of the techniques already applied by the <db:link xlink:href="qtquick-visualcanvas-scenegraph-renderer.xml">scene graph renderer</db:link>, this will in most cases not be the case. Excessive draw calls are already reduced because of batching and a cache will in most cases end up blending more pixels than the original content. The overhead of rendering to an offscreen and the blending involved with drawing the resulting texture is therefore often more costly than simply letting the item and its children be drawn normally.</db:para>
<db:para>Also, an item using a layer can not be <db:link xlink:href="qtquick-visualcanvas-scenegraph-renderer.xml#batching">batched</db:link> during rendering. This means that a scene with many layered items may have performance problems.</db:para>
<db:para>Layering can be convenient and useful for visual effects, but should in most cases be enabled for the duration of the effect and disabled afterwards.</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="children-prop">
<db:title>children : list&lt;Item&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;Item&gt;</db:type>
<db:varname>children</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">resources : list&lt;QtObject&gt;</db:bridgehead><db:fieldsynopsis>
<db:type>list&lt;QtObject&gt;</db:type>
<db:varname>resources</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The children property contains the list of visual children of this item. The resources property contains non-visual resources that you want to reference by name.</db:para>
<db:para>It is not generally necessary to refer to these properties when adding child items or resources, as the default <db:link xlink:href="qml-qtquick-item.xml#data-prop">data</db:link> property will automatically assign child objects to the <db:code>children</db:code> and <db:code>resources</db:code> properties as appropriate. See the <db:link xlink:href="qml-qtquick-item.xml#data-prop">data</db:link> documentation for details.</db:para>
</db:section>
<db:section xml:id="height-prop">
<db:title>height : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>height</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">width : real</db:bridgehead><db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>width</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">x : real</db:bridgehead><db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>x</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">y : real</db:bridgehead><db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>y</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Defines the item's position and size. The default value is <db:code>0</db:code>.</db:para>
<db:para>The (x,y) position is relative to the <db:link xlink:href="qml-qtquick-item.xml#parent-prop">parent</db:link>.</db:para>
<db:programlisting language="qml">Item { x: 100; y: 100; width: 100; height: 100 }
</db:programlisting>
</db:section>
<db:section xml:id="implicitHeight-prop">
<db:title>implicitHeight : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>implicitHeight</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">implicitWidth : real</db:bridgehead><db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>implicitWidth</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Defines the preferred width or height of the Item.</db:para>
<db:para>If <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link> or <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link> is not specified, an item's effective size will be determined by its <db:link xlink:href="qml-qtquick-item.xml#implicitWidth-prop">implicitWidth</db:link> or <db:link xlink:href="qml-qtquick-item.xml#implicitHeight-prop">implicitHeight</db:link>.</db:para>
<db:para>However, if an item is the child of a <db:link xlink:href="qtquicklayouts-index.xml">layout</db:link>, the layout will determine the item's preferred size using its implicit size. In such a scenario, the explicit <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link> or <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link> will be ignored.</db:para>
<db:para>The default implicit size for most items is 0x0, however some items have an inherent implicit size which cannot be overridden, for example, <db:link xlink:href="qml-qtquick-image.xml">Image</db:link> and <db:link xlink:href="qml-qtquick-text.xml">Text</db:link>.</db:para>
<db:para>Setting the implicit size is useful for defining components that have a preferred size based on their content, for example:</db:para>
<db:programlisting language="qml">// Label.qml
import QtQuick 2.0

Item {
    property alias icon: image.source
    property alias label: text.text
    implicitWidth: text.implicitWidth + image.implicitWidth
    implicitHeight: Math.max(text.implicitHeight, image.implicitHeight)
    Image { id: image }
    Text {
        id: text
        wrapMode: Text.Wrap
        anchors.left: image.right; anchors.right: parent.right
        anchors.verticalCenter: parent.verticalCenter
    }
}
</db:programlisting>
<db:note>
<db:para>Using <db:link xlink:href="qml-qtquick-item.xml#implicitWidth-prop">implicitWidth</db:link> of <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> or <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> and setting the width explicitly incurs a performance penalty as the text must be laid out twice.</db:para>
</db:note>
</db:section>
<db:section xml:id="activeFocus-prop">
<db:title>[read-only] activeFocus : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>activeFocus</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This read-only property indicates whether the item has active focus.</db:para>
<db:para>If activeFocus is true, either this item is the one that currently receives keyboard input, or it is a <db:link xlink:href="qml-qtquick-focusscope.xml">FocusScope</db:link> ancestor of the item that currently receives keyboard input.</db:para>
<db:para>Usually, activeFocus is gained by setting <db:link xlink:href="qml-qtquick-item.xml#focus-prop">focus</db:link> on an item and its enclosing <db:link xlink:href="qml-qtquick-focusscope.xml">FocusScope</db:link> objects. In the following example, the <db:code>input</db:code> and <db:code>focusScope</db:code> objects will have active focus, while the root rectangle object will not.</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    width: 100; height: 100

    FocusScope {
        id: focusScope
        focus: true

        TextInput {
            id: input
            focus: true
        }
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#focus-prop">focus</db:link></db:member>
<db:member><db:link xlink:href="qtquick-input-focus.xml">Keyboard Focus in Qt Quick</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="activeFocusOnTab-prop">
<db:title>activeFocusOnTab : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>activeFocusOnTab</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the item wants to be in the tab focus chain. By default, this is set to <db:code>false</db:code>.</db:para>
<db:para>The tab focus chain traverses elements by first visiting the parent, and then its children in the order they occur in the children property. Pressing the tab key on an item in the tab focus chain will move keyboard focus to the next item in the chain. Pressing BackTab (normally Shift+Tab) will move focus to the previous item.</db:para>
<db:para>To set up a manual tab focus chain, see <db:link xlink:href="qml-qtquick-keynavigation.xml">KeyNavigation</db:link>. Tab key events used by Keys or <db:link xlink:href="qml-qtquick-keynavigation.xml">KeyNavigation</db:link> have precedence over focus chain behavior; ignore the events in other key handlers to allow it to propagate.</db:para>
</db:section>
<db:section xml:id="anchors-prop">
<db:title>anchors group</db:title>
<db:bridgehead renderas="sect2" xml:id="anchors.alignWhenCentered-prop">anchors.alignWhenCentered : bool</db:bridgehead>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>anchors.alignWhenCentered</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="anchors.baseline-prop">anchors.baseline : AnchorLine</db:bridgehead>
<db:fieldsynopsis>
<db:type>AnchorLine</db:type>
<db:varname>anchors.baseline</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="anchors.baselineOffset-prop">anchors.baselineOffset : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>anchors.baselineOffset</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="anchors.bottom-prop">anchors.bottom : AnchorLine</db:bridgehead>
<db:fieldsynopsis>
<db:type>AnchorLine</db:type>
<db:varname>anchors.bottom</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="anchors.bottomMargin-prop">anchors.bottomMargin : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>anchors.bottomMargin</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="anchors.centerIn-prop">anchors.centerIn : Item</db:bridgehead>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>anchors.centerIn</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="anchors.fill-prop">anchors.fill : Item</db:bridgehead>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>anchors.fill</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="anchors.horizontalCenter-prop">anchors.horizontalCenter : AnchorLine</db:bridgehead>
<db:fieldsynopsis>
<db:type>AnchorLine</db:type>
<db:varname>anchors.horizontalCenter</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="anchors.horizontalCenterOffset-prop">anchors.horizontalCenterOffset : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>anchors.horizontalCenterOffset</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="anchors.left-prop">anchors.left : AnchorLine</db:bridgehead>
<db:fieldsynopsis>
<db:type>AnchorLine</db:type>
<db:varname>anchors.left</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="anchors.leftMargin-prop">anchors.leftMargin : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>anchors.leftMargin</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="anchors.margins-prop">anchors.margins : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>anchors.margins</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="anchors.right-prop">anchors.right : AnchorLine</db:bridgehead>
<db:fieldsynopsis>
<db:type>AnchorLine</db:type>
<db:varname>anchors.right</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="anchors.rightMargin-prop">anchors.rightMargin : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>anchors.rightMargin</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="anchors.top-prop">anchors.top : AnchorLine</db:bridgehead>
<db:fieldsynopsis>
<db:type>AnchorLine</db:type>
<db:varname>anchors.top</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="anchors.topMargin-prop">anchors.topMargin : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>anchors.topMargin</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="anchors.verticalCenter-prop">anchors.verticalCenter : AnchorLine</db:bridgehead>
<db:fieldsynopsis>
<db:type>AnchorLine</db:type>
<db:varname>anchors.verticalCenter</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="anchors.verticalCenterOffset-prop">anchors.verticalCenterOffset : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>anchors.verticalCenterOffset</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Anchors provide a way to position an item by specifying its relationship with other items.</db:para>
<db:para>Margins apply to top, bottom, left, right, and fill anchors. The <db:link xlink:href="qml-qtquick-item.xml#anchors.margins-prop">anchors.margins</db:link> property can be used to set all of the various margins at once, to the same value. It will not override a specific margin that has been previously set; to clear an explicit margin set its value to <db:code>undefined</db:code>. Note that margins are anchor-specific and are not applied if an item does not use anchors.</db:para>
<db:para>Offsets apply for horizontal center, vertical center, and baseline anchors.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-anchors_example.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para>Text anchored to Image, horizontally centered and vertically below, with a margin.</db:para>
<db:programlisting language="qml">Item {
    Image {
        id: pic
        // ...
    }
    Text {
        id: label
        anchors.horizontalCenter: pic.horizontalCenter
        anchors.top: pic.bottom
        anchors.topMargin: 5
        // ...
    }
}
</db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-anchors_example2.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para>Left of Text anchored to right of Image, with a margin. The y property of both defaults to 0.</db:para>
<db:programlisting language="qml">Item {
    Image {
        id: pic
        // ...
    }
    Text {
        id: label
        anchors.left: pic.right
        anchors.leftMargin: 5
        // ...
    }
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:link xlink:href="qml-qtquick-item.xml#anchors.fill-prop">anchors.fill</db:link> provides a convenient way for one item to have the same geometry as another item, and is equivalent to connecting all four directional anchors.</db:para>
<db:para>To clear an anchor value, set it to <db:code>undefined</db:code>.</db:para>
<db:para><db:link xlink:href="qml-qtquick-item.xml#anchors.alignWhenCentered-prop">anchors.alignWhenCentered</db:link> (default <db:code>true</db:code>) forces centered anchors to align to a whole pixel; if the item being centered has an odd <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link> or <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link>, the item will be positioned on a whole pixel rather than being placed on a half-pixel. This ensures the item is painted crisply. There are cases where this is not desirable, for example when rotating the item jitters may be apparent as the center is rounded.</db:para>
<db:note>
<db:para>You can only anchor an item to siblings or a parent.</db:para>
</db:note>
<db:para>For more information see <db:link xlink:href="qtquick-positioning-anchors.xml">Anchor Layouts</db:link>.</db:para>
</db:section>
<db:section xml:id="antialiasing-prop">
<db:title>antialiasing : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>antialiasing</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Used by visual elements to decide if the item should use antialiasing or not. In some cases items with antialiasing require more memory and are potentially slower to render (see <db:link xlink:href="qtquick-visualcanvas-scenegraph-renderer.xml#antialiasing">Antialiasing</db:link> for more details).</db:para>
<db:para>The default is false, but may be overridden by derived elements.</db:para>
</db:section>
<db:section xml:id="baselineOffset-prop">
<db:title>baselineOffset : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>baselineOffset</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Specifies the position of the item's baseline in local coordinates.</db:para>
<db:para>The baseline of a <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> item is the imaginary line on which the text sits. Controls containing text usually set their baseline to the baseline of their text.</db:para>
<db:para>For non-text items, a default baseline offset of 0 is used.</db:para>
</db:section>
<db:section xml:id="childrenRect-prop">
<db:title>childrenRect group</db:title>
<db:bridgehead renderas="sect2" xml:id="childrenRect.height-prop">[read-only] childrenRect.height : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>childrenRect.height</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="childrenRect.width-prop">[read-only] childrenRect.width : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>childrenRect.width</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="childrenRect.x-prop">[read-only] childrenRect.x : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>childrenRect.x</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="childrenRect.y-prop">[read-only] childrenRect.y : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>childrenRect.y</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This read-only property holds the collective position and size of the item's children.</db:para>
<db:para>This property is useful if you need to access the collective geometry of an item's children in order to correctly size the item.</db:para>
<db:para>The geometry that is returned is local to the item. For example:</db:para>
<db:programlisting language="qml">Item {
    x: 50
    y: 100

    // prints: QRectF(-10, -20, 30, 40)
    Component.onCompleted: print(childrenRect)

    Item {
        x: -10
        y: -20
        width: 30
        height: 40
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="clip-prop">
<db:title>clip : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>clip</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether clipping is enabled. The default clip value is <db:code>false</db:code>.</db:para>
<db:para>If clipping is enabled, an item will clip its own painting, as well as the painting of its children, to its bounding rectangle.</db:para>
<db:note>
<db:para>Clipping can affect rendering performance. See <db:link xlink:href="qtquick-visualcanvas-scenegraph-renderer.xml#clipping">Clipping</db:link> for more information.</db:para>
</db:note>
</db:section>
<db:section xml:id="containmentMask-prop">
<db:title>containmentMask : QObject*</db:title>
<db:fieldsynopsis>
<db:type>QObject*</db:type>
<db:varname>containmentMask</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds an optional mask for the Item to be used in the <db:link xlink:href="qml-qtquick-item.xml#contains-method">contains</db:link>() method. Its main use is currently to determine whether a <db:link xlink:href="qpointerevent.xml">pointer event</db:link> has landed into the item or not.</db:para>
<db:para>By default the <db:code>contains()</db:code> method will return true for any point within the Item's bounding box. <db:code>containmentMask</db:code> allows for more fine-grained control. For example, if a custom C++ <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> subclass with a specialized <db:link xlink:href="qml-qtquick-item.xml#contains-method">contains</db:link>() method is used as containmentMask:</db:para>
<db:programlisting language="cpp">Item { id: item; containmentMask: AnotherItem { id: anotherItem } }
</db:programlisting>
<db:para><db:emphasis>item</db:emphasis>'s contains method would then return <db:code>true</db:code> only if <db:emphasis>anotherItem</db:emphasis>'s <db:link xlink:href="qml-qtquick-item.xml#contains-method">contains</db:link>() implementation returns <db:code>true</db:code>.</db:para>
<db:para>A <db:link xlink:href="qml-qtquick-shapes-shape.xml">Shape</db:link> can be used as a mask, to make an item react to <db:link xlink:href="qpointerevent.xml">pointer events</db:link> only within a non-rectangular region:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/containmentMask-shape.gif"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:programlisting language="qml">Rectangle {
    width: 90; height: 100
    color: hoverHandler.hovered ? &quot;wheat&quot; : &quot;lightgray&quot;
    containmentMask: shape

    HoverHandler { id: hoverHandler }

    Shape {
        id: shape
        containsMode: Shape.FillContains

        ShapePath {
            fillColor: &quot;lightsteelblue&quot;
            startX: 10; startY: 20
            PathArc {
                x: 10; y: 80
                radiusX: 40; radiusY: 40
                useLargeArc: true
            }
            PathLine {
                x: 10; y: 20
            }
        }
    }
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>It is also possible to define the contains method in QML. For example, to create a circular item that only responds to events within its actual bounds:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/containmentMask-circle.gif"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:programlisting language="qml">Rectangle {
    id: circle
    width: 100; height: width
    radius: width / 2
    color: tapHandler.pressed ? &quot;tomato&quot; : hoverHandler.hovered ? &quot;darkgray&quot; : &quot;lightgray&quot;

    TapHandler { id: tapHandler }
    HoverHandler { id: hoverHandler }

    containmentMask: QtObject {
        property alias radius: circle.radius
        function contains(point: point) : bool {
            return (Math.pow(point.x - radius, 2) + Math.pow(point.y - radius, 2)) &amp;lt; Math.pow(radius, 2)
        }
    }
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-shapes-example.xml">Qt Quick Examples - Shapes</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data-prop">
<db:title>[default] data : list&lt;QtObject&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;QtObject&gt;</db:type>
<db:varname>data</db:varname>
<db:modifier>writable</db:modifier>
<db:modifier>[default]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The data property allows you to freely mix visual children and resources in an item. If you assign a visual item to the data list it becomes a child and if you assign any other object type, it is added as a resource.</db:para>
<db:para>So you can write:</db:para>
<db:programlisting language="qml">Item {
    Text {}
    Rectangle {}
    Timer {}
}
</db:programlisting>
<db:para>instead of:</db:para>
<db:programlisting language="qml">Item {
    children: [
        Text {},
        Rectangle {}
    ]
    resources: [
        Timer {}
    ]
}
</db:programlisting>
<db:para>It should not generally be necessary to refer to the <db:code>data</db:code> property, as it is the default property for Item and thus all child items are automatically assigned to this property.</db:para>
</db:section>
<db:section xml:id="enabled-prop">
<db:title>enabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>enabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the item receives mouse and keyboard events. By default this is true.</db:para>
<db:para>Setting this property directly affects the <db:code>enabled</db:code> value of child items. When set to <db:code>false</db:code>, the <db:code>enabled</db:code> values of all child items also become <db:code>false</db:code>. When set to <db:code>true</db:code>, the <db:code>enabled</db:code> values of child items are returned to <db:code>true</db:code>, unless they have explicitly been set to <db:code>false</db:code>.</db:para>
<db:para>Setting this property to <db:code>false</db:code> automatically causes <db:link xlink:href="qml-qtquick-item.xml#activeFocus-prop">activeFocus</db:link> to be set to <db:code>false</db:code>, and this item will no longer receive keyboard events.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#visible-prop">visible</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focus-prop">
<db:title>focus : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>focus</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the item has focus within the enclosing <db:link xlink:href="qml-qtquick-focusscope.xml">FocusScope</db:link>. If true, this item will gain active focus when the enclosing <db:link xlink:href="qml-qtquick-focusscope.xml">FocusScope</db:link> gains active focus.</db:para>
<db:para>In the following example, <db:code>input</db:code> will be given active focus when <db:code>scope</db:code> gains active focus:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    width: 100; height: 100

    FocusScope {
        id: scope

        TextInput {
            id: input
            focus: true
        }
    }
}
</db:programlisting>
<db:para>For the purposes of this property, the scene as a whole is assumed to act like a focus scope. On a practical level, that means the following QML will give active focus to <db:code>input</db:code> on startup.</db:para>
<db:programlisting language="qml">Rectangle {
    width: 100; height: 100

    TextInput {
          id: input
          focus: true
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#activeFocus-prop">activeFocus</db:link></db:member>
<db:member><db:link xlink:href="qtquick-input-focus.xml">Keyboard Focus in Qt Quick</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layer.effect-prop">
<db:title>layer.effect : Component</db:title>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>layer.effect</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the effect that is applied to this layer.</db:para>
<db:para>The effect is typically a <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> component, although any <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> component can be assigned. The effect should have a source texture property with a name matching <db:link xlink:href="qml-qtquick-item.xml#layer.samplerName-prop">layer.samplerName</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#layer.samplerName-prop">layer.samplerName</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-item.xml#item-layers">Item Layers</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layer.enabled-prop">
<db:title>layer.enabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>layer.enabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds whether the item is layered or not. Layering is disabled by default.</db:para>
<db:para>A layered item is rendered into an offscreen surface and cached until it is changed. Enabling layering for complex QML item hierarchies can sometimes be an optimization.</db:para>
<db:para>None of the other layer properties have any effect when the layer is disabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#item-layers">Item Layers</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layer.format-prop">
<db:title>layer.format : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>layer.format</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines the format of the backing texture. Modifying this property makes most sense when the <db:code role="parameter">layer.effect</db:code> is also specified.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.RGBA8</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.RGBA16F</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.RGBA32F</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.Alpha</db:para>
</db:td>
<db:td>
<db:para>Starting with Qt 6.0, this value is not in use and has the same effect as <db:code>RGBA8</db:code> in practice.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.RGB</db:para>
</db:td>
<db:td>
<db:para>Starting with Qt 6.0, this value is not in use and has the same effect as <db:code>RGBA8</db:code> in practice.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.RGBA</db:para>
</db:td>
<db:td>
<db:para>Starting with Qt 6.0, this value is not in use and has the same effect as <db:code>RGBA8</db:code> in practice.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#item-layers">Item Layers</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layer.live-prop">
<db:title>[since 6.5] layer.live : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>layer.live</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>When this property is true the layer texture is updated whenever the item updates. Otherwise it will always be a frozen image.</db:para>
<db:para>By default, this property is set to <db:code>true</db:code>.</db:para>
<db:para>This property was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#item-layers">Item Layers</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layer.mipmap-prop">
<db:title>layer.mipmap : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>layer.mipmap</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If this property is true, mipmaps are generated for the texture.</db:para>
<db:note>
<db:para>Some OpenGL ES 2 implementations do not support mipmapping of non-power-of-two textures.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#item-layers">Item Layers</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layer.samplerName-prop">
<db:title>layer.samplerName : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>layer.samplerName</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the name of the effect's source texture property.</db:para>
<db:para>This value must match the name of the effect's source texture property so that the Item can pass the layer's offscreen surface to the effect correctly.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#layer.effect-prop">layer.effect</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-item.xml#item-layers">Item Layers</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layer.samples-prop">
<db:title>layer.samples : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>layer.samples</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property allows requesting multisampled rendering in the layer.</db:para>
<db:para>By default multisampling is enabled whenever multisampling is enabled for the entire window, assuming the scenegraph renderer in use and the underlying graphics API supports this.</db:para>
<db:para>By setting the value to 2, 4, etc. multisampled rendering can be requested for a part of the scene without enabling multisampling for the entire scene. This way multisampling is applied only to a given subtree, which can lead to significant performance gains since multisampling is not applied to other parts of the scene.</db:para>
<db:note>
<db:para>Enabling multisampling can be potentially expensive regardless of the layer's size, as it incurs a hardware and driver dependent performance and memory cost.</db:para>
</db:note>
<db:note>
<db:para>This property is only functional when support for multisample renderbuffers and framebuffer blits is available. Otherwise the value is silently ignored.</db:para>
</db:note>
</db:section>
<db:section xml:id="layer.smooth-prop">
<db:title>layer.smooth : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>layer.smooth</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds whether the layer is smoothly transformed. When enabled, sampling the layer's texture is performed using <db:code>linear</db:code> interpolation, while non-smooth results in using the <db:code>nearest</db:code> filtering mode.</db:para>
<db:para>By default, this property is set to <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#item-layers">Item Layers</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layer.sourceRect-prop">
<db:title>layer.sourceRect : rect</db:title>
<db:fieldsynopsis>
<db:type>rect</db:type>
<db:varname>layer.sourceRect</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines the rectangular area of the item that should be rendered into the texture. The source rectangle can be larger than the item itself. If the rectangle is null, which is the default, then the whole item is rendered to the texture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#item-layers">Item Layers</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layer.textureMirroring-prop">
<db:title>layer.textureMirroring : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>layer.textureMirroring</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines how the generated texture should be mirrored. The default value is <db:code>ShaderEffectSource.MirrorVertically</db:code>. Custom mirroring can be useful if the generated texture is directly accessed by custom shaders, such as those specified by <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>. If no effect is specified for the layered item, mirroring has no effect on the UI representation of the item.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.NoMirroring</db:para>
</db:td>
<db:td>
<db:para>No mirroring</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.MirrorHorizontally</db:para>
</db:td>
<db:td>
<db:para>The generated texture is flipped along X-axis.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.MirrorVertically</db:para>
</db:td>
<db:td>
<db:para>The generated texture is flipped along Y-axis.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="layer.textureSize-prop">
<db:title>layer.textureSize : size</db:title>
<db:fieldsynopsis>
<db:type>size</db:type>
<db:varname>layer.textureSize</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the requested pixel size of the layers texture. If it is empty, which is the default, the size of the item is used.</db:para>
<db:note>
<db:para>Some platforms have a limit on how small framebuffer objects can be, which means the actual texture size might be larger than the requested size.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#item-layers">Item Layers</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layer.wrapMode-prop">
<db:title>layer.wrapMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>layer.wrapMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines the wrap modes associated with the texture. Modifying this property makes most sense when the <db:code role="parameter">layer.effect</db:code> is specified.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.ClampToEdge</db:para>
</db:td>
<db:td>
<db:para>GL_CLAMP_TO_EDGE both horizontally and vertically</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.RepeatHorizontally</db:para>
</db:td>
<db:td>
<db:para>GL_REPEAT horizontally, GL_CLAMP_TO_EDGE vertically</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.RepeatVertically</db:para>
</db:td>
<db:td>
<db:para>GL_CLAMP_TO_EDGE horizontally, GL_REPEAT vertically</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.Repeat</db:para>
</db:td>
<db:td>
<db:para>GL_REPEAT both horizontally and vertically</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>Some OpenGL ES 2 implementations do not support the GL_REPEAT wrap mode with non-power-of-two textures.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#item-layers">Item Layers</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="opacity-prop">
<db:title>opacity : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>opacity</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the opacity of the item. Opacity is specified as a number between 0.0 (fully transparent) and 1.0 (fully opaque). The default value is 1.0.</db:para>
<db:para>When this property is set, the specified opacity is also applied individually to child items. This may have an unintended effect in some circumstances. For example in the second set of rectangles below, the red rectangle has specified an opacity of 0.5, which affects the opacity of its blue child rectangle even though the child has not specified an opacity.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-item_opacity1.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:programlisting language="qml">Item {
    Rectangle {
        color: &quot;red&quot;
        width: 100; height: 100
        Rectangle {
            color: &quot;blue&quot;
            x: 50; y: 50; width: 100; height: 100
        }
    }
}
</db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-item_opacity2.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:programlisting language="qml">Item {
    Rectangle {
        opacity: 0.5
        color: &quot;red&quot;
        width: 100; height: 100
        Rectangle {
            color: &quot;blue&quot;
            x: 50; y: 50; width: 100; height: 100
        }
    }
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Changing an item's opacity does not affect whether the item receives user input events. (In contrast, setting <db:link xlink:href="qml-qtquick-item.xml#visible-prop">visible</db:link> property to <db:code>false</db:code> stops mouse events, and setting the <db:link xlink:href="qml-qtquick-item.xml#enabled-prop">enabled</db:link> property to <db:code>false</db:code> stops mouse and keyboard events, and also removes active focus from the item.)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#visible-prop">visible</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="palette-prop">
<db:title>[since 6.0] palette : Palette</db:title>
<db:fieldsynopsis>
<db:type>Palette</db:type>
<db:varname>palette</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the palette currently set for the item.</db:para>
<db:para>This property describes the item's requested palette. The palette is used by the item's style when rendering all controls, and is available as a means to ensure that custom controls can maintain consistency with the native platform's native look and feel. It's common that different platforms, or different styles, define different palettes for an application.</db:para>
<db:para>The default palette depends on the system environment. <db:link xlink:href="qml-qtquick-controls-applicationwindow.xml">ApplicationWindow</db:link> maintains a system/theme palette which serves as a default for all controls. There may also be special palette defaults for certain types of controls. You can also set the default palette for controls by either:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>passing a custom palette to QGuiApplication::setPalette(), before loading any QML; or</db:para>
</db:listitem>
<db:listitem>
<db:para>specifying the colors in the <db:link xlink:href="qtquickcontrols-configuration.xml">qtquickcontrols2.conf file</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Items propagate explicit palette properties from parents to children. If you change a specific property on a items's palette, that property propagates to all of the item's children, overriding any system defaults for that property.</db:para>
<db:programlisting language="cpp">Item {
    palette {
        buttonText: &quot;maroon&quot;
        button: &quot;lavender&quot;
    }

    Button {
        text: &quot;Click Me&quot;
    }
}
</db:programlisting>
<db:para>This property was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-window.xml#palette-prop">Window::palette</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-popup.xml#palette-prop">Popup::palette</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-colorgroup.xml">ColorGroup</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-palette.xml">Palette</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-systempalette.xml">SystemPalette</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parent-prop">
<db:title>parent : Item</db:title>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>parent</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the visual parent of the item.</db:para>
<db:note>
<db:para>The concept of the <db:emphasis>visual parent</db:emphasis> differs from that of the <db:emphasis><db:link xlink:href="qobject.xml">QObject</db:link> parent</db:emphasis>. An item's visual parent may not necessarily be the same as its object parent. See <db:link xlink:href="qtquick-visualcanvas-visualparent.xml">Concepts - Visual Parent in Qt Quick</db:link> for more details.</db:para>
</db:note>
</db:section>
<db:section xml:id="rotation-prop">
<db:title>rotation : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>rotation</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the rotation of the item in degrees clockwise around its <db:link xlink:href="qml-qtquick-item.xml#transformOrigin-prop">transformOrigin</db:link>.</db:para>
<db:para>The default value is 0 degrees (that is, no rotation).</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-rotation.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:programlisting language="qml">Rectangle {
    color: &quot;blue&quot;
    width: 100; height: 100
    Rectangle {
        color: &quot;red&quot;
        x: 25; y: 25; width: 50; height: 50
        rotation: 30
    }
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-transform.xml">Transform</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-rotation.xml">Rotation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scale-prop">
<db:title>scale : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>scale</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the scale factor for this item.</db:para>
<db:para>A scale of less than 1.0 causes the item to be rendered at a smaller size, and a scale greater than 1.0 renders the item at a larger size. A negative scale causes the item to be mirrored when rendered.</db:para>
<db:para>The default value is 1.0.</db:para>
<db:para>Scaling is applied from the <db:link xlink:href="qml-qtquick-item.xml#transformOrigin-prop">transformOrigin</db:link>.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-scale.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    color: &quot;blue&quot;
    width: 100; height: 100

    Rectangle {
        color: &quot;green&quot;
        width: 25; height: 25
    }

    Rectangle {
        color: &quot;red&quot;
        x: 25; y: 25; width: 50; height: 50
        scale: 1.4
        transformOrigin: Item.TopLeft
    }
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-transform.xml">Transform</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-scale.xml">Scale</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="smooth-prop">
<db:title>smooth : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>smooth</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Primarily used in image based items to decide if the item should use smooth sampling or not. Smooth sampling is performed using linear interpolation, while non-smooth is performed using nearest neighbor.</db:para>
<db:para>In Qt Quick 2.0, this property has minimal impact on performance.</db:para>
<db:para>By default, this property is set to <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="state-prop">
<db:title>state : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>state</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the name of the current state of the item.</db:para>
<db:para>If the item is in its default state, that is, no explicit state has been set, then this property holds an empty string. Likewise, you can return an item to its default state by setting this property to an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-statesanimations-states.xml">Qt Quick States</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="states-prop">
<db:title>states : list&lt;State&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;State&gt;</db:type>
<db:varname>states</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the list of possible states for this item. To change the state of this item, set the <db:link xlink:href="qml-qtquick-item.xml#state-prop">state</db:link> property to one of these states, or set the <db:link xlink:href="qml-qtquick-item.xml#state-prop">state</db:link> property to an empty string to revert the item to its default state.</db:para>
<db:para>This property is specified as a list of <db:link xlink:href="qml-qtquick-state.xml">State</db:link> objects. For example, below is an item with &quot;red_color&quot; and &quot;blue_color&quot; states:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    id: root
    width: 100; height: 100

    states: [
        State {
            name: &quot;red_color&quot;
            PropertyChanges { root.color: &quot;red&quot; }
        },
        State {
            name: &quot;blue_color&quot;
            PropertyChanges { root.color: &quot;blue&quot; }
        }
    ]
}
</db:programlisting>
<db:para>See <db:link xlink:href="qtquick-statesanimations-states.xml">Qt Quick States</db:link> and <db:link xlink:href="qtquick-statesanimations-animations.xml">Animation and Transitions in Qt Quick</db:link> for more details on using states and transitions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#transitions">transitions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transform-prop">
<db:title>[read-only] transform : list&lt;Transform&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;Transform&gt;</db:type>
<db:varname>transform</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the list of transformations to apply.</db:para>
<db:para>For more information see <db:link xlink:href="qml-qtquick-transform.xml">Transform</db:link>.</db:para>
</db:section>
<db:section xml:id="transformOrigin-prop">
<db:title>transformOrigin : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>transformOrigin</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the origin point around which scale and rotation transform.</db:para>
<db:para>Nine transform origins are available, as shown in the image below. The default transform origin is <db:code>Item.Center</db:code>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-transformorigin.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example rotates an image around its bottom-right corner.</db:para>
<db:programlisting language="qml">Image {
    source: &quot;myimage.png&quot;
    transformOrigin: Item.BottomRight
    rotation: 45
}
</db:programlisting>
<db:para>To set an arbitrary transform origin point use the <db:link xlink:href="qml-qtquick-scale.xml">Scale</db:link> or <db:link xlink:href="qml-qtquick-rotation.xml">Rotation</db:link> transform types with <db:link xlink:href="qml-qtquick-item.xml#transform-prop">transform</db:link>.</db:para>
</db:section>
<db:section xml:id="transitions-prop">
<db:title>transitions : list&lt;Transition&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;Transition&gt;</db:type>
<db:varname>transitions</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the list of transitions for this item. These define the transitions to be applied to the item whenever it changes its <db:link xlink:href="qml-qtquick-item.xml#state-prop">state</db:link>.</db:para>
<db:para>This property is specified as a list of <db:link xlink:href="qml-qtquick-transition.xml">Transition</db:link> objects. For example:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Item {
    transitions: [
        Transition {
            //...
        },
        Transition {
            //...
        }
    ]
}
</db:programlisting>
<db:para>See <db:link xlink:href="qtquick-statesanimations-states.xml">Qt Quick States</db:link> and <db:link xlink:href="qtquick-statesanimations-animations.xml">Animation and Transitions in Qt Quick</db:link> for more details on using states and transitions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#states-prop">states</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visible-prop">
<db:title>visible : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>visible</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the item is visible. By default this is true.</db:para>
<db:para>Setting this property directly affects the <db:code>visible</db:code> value of child items. When set to <db:code>false</db:code>, the <db:code>visible</db:code> values of all child items also become <db:code>false</db:code>. When set to <db:code>true</db:code>, the <db:code>visible</db:code> values of child items are returned to <db:code>true</db:code>, unless they have explicitly been set to <db:code>false</db:code>.</db:para>
<db:para>(Because of this flow-on behavior, using the <db:code>visible</db:code> property may not have the intended effect if a property binding should only respond to explicit property changes. In such cases it may be better to use the <db:link xlink:href="qml-qtquick-item.xml#opacity-prop">opacity</db:link> property instead.)</db:para>
<db:para>If this property is set to <db:code>false</db:code>, the item will no longer receive mouse events, but will continue to receive key events and will retain the keyboard <db:link xlink:href="qml-qtquick-item.xml#focus-prop">focus</db:link> if it has been set. (In contrast, setting the <db:link xlink:href="qml-qtquick-item.xml#enabled-prop">enabled</db:link> property to <db:code>false</db:code> stops both mouse and keyboard events, and also removes focus from the item.)</db:para>
<db:note>
<db:para>This property's value is only affected by changes to this property or the parent's <db:code>visible</db:code> property. It does not change, for example, if this item moves off-screen, or if the <db:link xlink:href="qml-qtquick-item.xml#opacity-prop">opacity</db:link> changes to 0.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#opacity-prop">opacity</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-item.xml#enabled-prop">enabled</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visibleChildren-prop">
<db:title>visibleChildren : list&lt;Item&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;Item&gt;</db:type>
<db:varname>visibleChildren</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This read-only property lists all of the item's children that are currently visible. Note that a child's visibility may have changed explicitly, or because the visibility of this (it's parent) item or another grandparent changed.</db:para>
</db:section>
<db:section xml:id="z-prop">
<db:title>z : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>z</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets the stacking order of sibling items. By default the stacking order is 0.</db:para>
<db:para>Items with a higher stacking value are drawn on top of siblings with a lower stacking order. Items with the same stacking value are drawn bottom up in the order they appear. Items with a negative stacking value are drawn under their parent's content.</db:para>
<db:para>The following example shows the various effects of stacking order.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-item_stacking1.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para>Same <db:code>z</db:code> - later children above earlier children:</db:para>
<db:programlisting language="qml">Item {
    Rectangle {
        color: &quot;red&quot;
        width: 100; height: 100
    }
    Rectangle {
        color: &quot;blue&quot;
        x: 50; y: 50; width: 100; height: 100
    }
}
</db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-item_stacking2.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para>Higher <db:code>z</db:code> on top:</db:para>
<db:programlisting language="qml">Item {
    Rectangle {
        z: 1
        color: &quot;red&quot;
        width: 100; height: 100
    }
    Rectangle {
        color: &quot;blue&quot;
        x: 50; y: 50; width: 100; height: 100
    }
}
</db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-item_stacking3.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para>Same <db:code>z</db:code> - children above parents:</db:para>
<db:programlisting language="qml">Item {
    Rectangle {
        color: &quot;red&quot;
        width: 100; height: 100
        Rectangle {
            color: &quot;blue&quot;
            x: 50; y: 50; width: 100; height: 100
        }
    }
}
</db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-item_stacking4.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para>Lower <db:code>z</db:code> below:</db:para>
<db:programlisting language="qml">Item {
    Rectangle {
        color: &quot;red&quot;
        width: 100; height: 100
        Rectangle {
            z: -1
            color: &quot;blue&quot;
            x: 50; y: 50; width: 100; height: 100
        }
    }
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="mapFromItem-method-1">
<db:title>point mapFromItem(Item <db:emphasis>item</db:emphasis>, point <db:emphasis>p</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>point</db:type>
<db:methodname>mapFromItem</db:methodname>
<db:methodparam>
<db:type>Item</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>point</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">point mapFromItem(Item item, point p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:bridgehead renderas="sect2">point mapFromItem(Item <db:emphasis>item</db:emphasis>, real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:bridgehead><db:methodsynopsis>
<db:type>point</db:type>
<db:methodname>mapFromItem</db:methodname>
<db:methodparam>
<db:type>Item</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>real</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>real</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="signature">point mapFromItem(Item item, real x, real y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:bridgehead renderas="sect2">rect mapFromItem(Item <db:emphasis>item</db:emphasis>, real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>, real <db:emphasis>width</db:emphasis>, real <db:emphasis>height</db:emphasis>)</db:bridgehead><db:methodsynopsis>
<db:type>rect</db:type>
<db:methodname>mapFromItem</db:methodname>
<db:methodparam>
<db:type>Item</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>real</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>real</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>real</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>real</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">rect mapFromItem(Item item, real x, real y, real width, real height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:bridgehead renderas="sect2">rect mapFromItem(Item <db:emphasis>item</db:emphasis>, rect <db:emphasis>r</db:emphasis>)</db:bridgehead><db:methodsynopsis>
<db:type>rect</db:type>
<db:methodname>mapFromItem</db:methodname>
<db:methodparam>
<db:type>Item</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>rect</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">rect mapFromItem(Item item, rect r)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) or rect (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code>), which is in <db:code role="parameter">item</db:code>'s coordinate system, to this item's coordinate system, and returns a <db:link xlink:href="qml-point.xml">point</db:link> or <db:link xlink:href="qml-rect.xml">rect</db:link> matching the mapped coordinate.</db:para>
<db:para>The following properties of the item are used in the mapping: <db:link xlink:href="qml-qtquick-item.xml#x-prop">x</db:link>, <db:link xlink:href="qml-qtquick-item.xml#y-prop">y</db:link>, <db:link xlink:href="qml-qtquick-item.xml#scale-prop">scale</db:link>, <db:link xlink:href="qml-qtquick-item.xml#rotation-prop">rotation</db:link>, <db:link xlink:href="qml-qtquick-item.xml#transformOrigin-prop">transformOrigin</db:link>, and <db:link xlink:href="qml-qtquick-item.xml#transform-prop">transform</db:link>.</db:para>
<db:para>If <db:code role="parameter">item</db:code> is a <db:code>null</db:code> value, this maps the point or rect from the coordinate system of the root QML view.</db:para>
<db:para>The versions accepting point and rect are since Qt 5.15.</db:para>
</db:section>
<db:section xml:id="mapToItem-method-1">
<db:title>point mapToItem(Item <db:emphasis>item</db:emphasis>, point <db:emphasis>p</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>point</db:type>
<db:methodname>mapToItem</db:methodname>
<db:methodparam>
<db:type>Item</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>point</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">point mapToItem(Item item, point p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:bridgehead renderas="sect2">point mapToItem(Item <db:emphasis>item</db:emphasis>, real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:bridgehead><db:methodsynopsis>
<db:type>point</db:type>
<db:methodname>mapToItem</db:methodname>
<db:methodparam>
<db:type>Item</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>real</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>real</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="signature">point mapToItem(Item item, real x, real y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:bridgehead renderas="sect2">rect mapToItem(Item <db:emphasis>item</db:emphasis>, real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>, real <db:emphasis>width</db:emphasis>, real <db:emphasis>height</db:emphasis>)</db:bridgehead><db:methodsynopsis>
<db:type>rect</db:type>
<db:methodname>mapToItem</db:methodname>
<db:methodparam>
<db:type>Item</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>real</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>real</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>real</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>real</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">rect mapToItem(Item item, real x, real y, real width, real height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:bridgehead renderas="sect2">rect mapToItem(Item <db:emphasis>item</db:emphasis>, rect <db:emphasis>r</db:emphasis>)</db:bridgehead><db:methodsynopsis>
<db:type>rect</db:type>
<db:methodname>mapToItem</db:methodname>
<db:methodparam>
<db:type>Item</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>rect</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">rect mapToItem(Item item, rect r)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) or rect (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code>), which is in this item's coordinate system, to <db:code role="parameter">item</db:code>'s coordinate system, and returns a <db:link xlink:href="qml-point.xml">point</db:link> or <db:link xlink:href="qml-rect.xml">rect</db:link> matching the mapped coordinate.</db:para>
<db:para>The following properties of the item are used in the mapping: <db:link xlink:href="qml-qtquick-item.xml#x-prop">x</db:link>, <db:link xlink:href="qml-qtquick-item.xml#y-prop">y</db:link>, <db:link xlink:href="qml-qtquick-item.xml#scale-prop">scale</db:link>, <db:link xlink:href="qml-qtquick-item.xml#rotation-prop">rotation</db:link>, <db:link xlink:href="qml-qtquick-item.xml#transformOrigin-prop">transformOrigin</db:link>, and <db:link xlink:href="qml-qtquick-item.xml#transform-prop">transform</db:link>.</db:para>
<db:para>If <db:code role="parameter">item</db:code> is a <db:code>null</db:code> value, this maps the point or rect to the coordinate system of the root QML view.</db:para>
<db:para>The versions accepting point and rect are since Qt 5.15.</db:para>
</db:section>
<db:section xml:id="childAt-method">
<db:title>childAt(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Returns the first visible child item found at point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) within the coordinate system of this item.</db:para>
<db:para>Returns <db:code>null</db:code> if there is no such item.</db:para>
</db:section>
<db:section xml:id="contains-method">
<db:title>bool contains(point <db:emphasis>point</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if this item contains <db:code role="parameter">point</db:code>, which is in local coordinates; returns <db:code>false</db:code> otherwise. This is the same check that is used for hit-testing a <db:link xlink:href="qeventpoint.xml">QEventPoint</db:link> during event delivery, and is affected by <db:link xlink:href="qml-qtquick-item.xml#containmentMask-prop">containmentMask</db:link> if it is set.</db:para>
</db:section>
<db:section xml:id="dumpItemTree-method">
<db:title>[since 6.3] dumpItemTree()</db:title>
<db:para>Dumps some details about the <db:link xlink:href="qtquick-visualcanvas-visualparent.xml">visual tree of Items</db:link> starting with this item and its children, recursively.</db:para>
<db:para>The output looks similar to that of this QML code:</db:para>
<db:programlisting language="qml">function dump(object, indent) {
    console.log(indent + object)
    for (const i in object.children)
        dump(object.children[i], indent + &quot;    &quot;)
}

dump(myItem, &quot;&quot;)
</db:programlisting>
<db:para>So if you want more details, you can implement your own function and add extra output to the console.log, such as values of specific properties.</db:para>
<db:para>This method was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#dumpObjectTree">QObject::dumpObjectTree</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="forceActiveFocus-method">
<db:title>forceActiveFocus()</db:title>
<db:para>Forces active focus on the item.</db:para>
<db:para>This method sets focus on the item and ensures that all ancestor <db:link xlink:href="qml-qtquick-focusscope.xml">FocusScope</db:link> objects in the object hierarchy are also given <db:link xlink:href="qml-qtquick-item.xml#focus-prop">focus</db:link>.</db:para>
<db:para>The reason for the focus change will be <db:link xlink:href="qt.xml#FocusReason-enum">Qt::OtherFocusReason</db:link>. Use the overloaded method to specify the focus reason to enable better handling of the focus change.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#activeFocus-prop">activeFocus</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="forceActiveFocus-method-1">
<db:title>forceActiveFocus(Qt::FocusReason <db:emphasis>reason</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Forces active focus on the item with the given <db:code role="parameter">reason</db:code>.</db:para>
<db:para>This method sets focus on the item and ensures that all ancestor <db:link xlink:href="qml-qtquick-focusscope.xml">FocusScope</db:link> objects in the object hierarchy are also given <db:link xlink:href="qml-qtquick-item.xml#focus-prop">focus</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#activeFocus-prop">activeFocus</db:link></db:member>
<db:member><db:link xlink:href="qt.xml#FocusReason-enum">Qt::FocusReason</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="grabToImage-method">
<db:title>bool grabToImage(<db:emphasis>callback</db:emphasis>, <db:emphasis>targetSize</db:emphasis>)</db:title>
<db:para>Grabs the item into an in-memory image.</db:para>
<db:para>The grab happens asynchronously and the JavaScript function <db:code role="parameter">callback</db:code> is invoked when the grab is completed. The callback takes one argument, which is the result of the grab operation; an <db:link xlink:href="qml-qtquick-itemgrabresult.xml">ItemGrabResult</db:link> object.</db:para>
<db:para>Use <db:code role="parameter">targetSize</db:code> to specify the size of the target image. By default, the result will have the same size as the item.</db:para>
<db:para>If the grab could not be initiated, the function returns <db:code>false</db:code>.</db:para>
<db:para>The following snippet shows how to grab an item and store the results in a file:</db:para>
<db:programlisting language="qml">Rectangle {
    id: sourceRectangle
    width: 100
    height: 100
    gradient: Gradient {
        GradientStop { position: 0; color: &quot;steelblue&quot; }
        GradientStop { position: 1; color: &quot;black&quot; }
    }

    Component.onCompleted: {
        sourceRectangle.grabToImage(function(result) {
           result.saveToFile(&quot;something.png&quot;)
        })
    }
}
</db:programlisting>
<db:para>The following snippet shows how to grab an item and use the results in another image element:</db:para>
<db:programlisting language="qml">Image {
    id: image
}

Component.onCompleted: {
    sourceRectangle.grabToImage(function(result) {
        image.source = result.url
    }, Qt.size(50, 50))
}
</db:programlisting>
<db:note>
<db:para>This function will render the item to an offscreen surface and copy that surface from the GPU's memory into the CPU's memory, which can be quite costly. For &quot;live&quot; preview, use <db:link xlink:href="qml-qtquick-item.xml#layer.enabled-prop">layers</db:link> or <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="mapFromGlobal-method">
<db:title>point mapFromGlobal(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Maps the point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>), which is in the global coordinate system, to the item's coordinate system, and returns a <db:link xlink:href="qml-point.xml">point</db:link> matching the mapped coordinate.</db:para>
<db:para>The following properties of the item are used in the mapping: <db:link xlink:href="qml-qtquick-item.xml#x-prop">x</db:link>, <db:link xlink:href="qml-qtquick-item.xml#y-prop">y</db:link>, <db:link xlink:href="qml-qtquick-item.xml#scale-prop">scale</db:link>, <db:link xlink:href="qml-qtquick-item.xml#rotation-prop">rotation</db:link>, <db:link xlink:href="qml-qtquick-item.xml#transformOrigin-prop">transformOrigin</db:link>, and <db:link xlink:href="qml-qtquick-item.xml#transform-prop">transform</db:link>.</db:para>
</db:section>
<db:section xml:id="mapToGlobal-method">
<db:title>point mapToGlobal(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Maps the point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>), which is in this item's coordinate system, to the global coordinate system, and returns a <db:link xlink:href="qml-point.xml">point</db:link> matching the mapped coordinate.</db:para>
<db:para>The following properties of the item are used in the mapping: <db:link xlink:href="qml-qtquick-item.xml#x-prop">x</db:link>, <db:link xlink:href="qml-qtquick-item.xml#y-prop">y</db:link>, <db:link xlink:href="qml-qtquick-item.xml#scale-prop">scale</db:link>, <db:link xlink:href="qml-qtquick-item.xml#rotation-prop">rotation</db:link>, <db:link xlink:href="qml-qtquick-item.xml#transformOrigin-prop">transformOrigin</db:link>, and <db:link xlink:href="qml-qtquick-item.xml#transform-prop">transform</db:link>.</db:para>
</db:section>
<db:section xml:id="nextItemInFocusChain-method">
<db:title>nextItemInFocusChain(bool <db:emphasis>forward</db:emphasis>)</db:title>
<db:para>Returns the item in the focus chain which is next to this item. If <db:code role="parameter">forward</db:code> is <db:code>true</db:code>, or not supplied, it is the next item in the forwards direction. If <db:code role="parameter">forward</db:code> is <db:code>false</db:code>, it is the next item in the backwards direction.</db:para>
</db:section>
</db:section>
</db:article>
