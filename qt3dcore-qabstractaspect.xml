<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractAspect Class</db:title>
<db:subtitle>Qt3DCore::QAbstractAspect</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qt3dcore-qabstractaspect.xml">QAbstractAspect</db:link> is the base class for aspects that provide a vertical slice of behavior.</db:para>
<db:para>This class was introduced in Qt 5.7.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>Qt3DCore/QAbstractAspect</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS 3dcore)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::3dcore)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3dcore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3danimation-qanimationaspect.xml" xlink:role="class">Qt3DAnimation::QAnimationAspect</db:link>, <db:link xlink:href="qt3dinput-qinputaspect.xml" xlink:role="class">Qt3DInput::QInputAspect</db:link>, <db:link xlink:href="qt3dlogic-qlogicaspect.xml" xlink:role="class">Qt3DLogic::QLogicAspect</db:link>, and <db:link xlink:href="qt3drender-qrenderaspect.xml" xlink:role="class">Qt3DRender::QRenderAspect</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractAspect">
<db:title>[explicit] QAbstractAspect::QAbstractAspect(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QAbstractAspect</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractAspect(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qt3dcore-qabstractaspect.xml">QAbstractAspect</db:link> with <db:code role="parameter">parent</db:code></db:para>
</db:section>
<db:section xml:id="registerBackendType">
<db:title>[protected] void QAbstractAspect::registerBackendType(const Qt3DCore::QBackendNodeMapperPtr &amp;<db:emphasis>functor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>registerBackendType</db:methodname>
<db:methodparam>
<db:type>const Qt3DCore::QBackendNodeMapperPtr &amp;</db:type>
<db:parameter>functor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void registerBackendType(const Qt3DCore::QBackendNodeMapperPtr &amp;functor)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers backend with <db:code role="parameter">functor</db:code>.</db:para>
</db:section>
<db:section xml:id="registerBackendType-1">
<db:title>[protected] void QAbstractAspect::registerBackendType(const QMetaObject &amp;<db:emphasis>obj</db:emphasis>, const Qt3DCore::QBackendNodeMapperPtr &amp;<db:emphasis>functor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>registerBackendType</db:methodname>
<db:methodparam>
<db:type>const QMetaObject &amp;</db:type>
<db:parameter>obj</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const Qt3DCore::QBackendNodeMapperPtr &amp;</db:type>
<db:parameter>functor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void registerBackendType(const QMetaObject &amp;obj, const Qt3DCore::QBackendNodeMapperPtr &amp;functor)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers backend with <db:code role="parameter">obj</db:code> and <db:code role="parameter">functor</db:code>.</db:para>
</db:section>
<db:section xml:id="rootEntityId">
<db:title>[protected] Qt3DCore::QNodeId QAbstractAspect::rootEntityId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt3DCore::QNodeId</db:type>
<db:methodname>rootEntityId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt3DCore::QNodeId rootEntityId() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns root entity node id.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="QAspectJobPtr-typedef">
<db:title>QAspectJobPtr</db:title>
<db:typedefsynopsis>
<db:typedefname>QAspectJobPtr</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A shared pointer for <db:link xlink:href="qt3dcore-qaspectjob.xml">QAspectJob</db:link>.</db:para>
</db:section>
<db:section xml:id="QBackendNodeMapperPtr-typedef">
<db:title>QBackendNodeMapperPtr</db:title>
<db:typedefsynopsis>
<db:typedefname>QBackendNodeMapperPtr</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A shared pointer for <db:link xlink:href="qt3dcore-qbackendnodemapper.xml">QBackendNodeMapper</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QT3D_REGISTER_ASPECT">
<db:title>QT3D_REGISTER_ASPECT(<db:emphasis>name</db:emphasis>, <db:emphasis>AspectType</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>QT3D_REGISTER_ASPECT</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type></db:type>
<db:parameter>AspectType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QT3D_REGISTER_ASPECT(name, AspectType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience macro for registering <db:code role="parameter">AspectType</db:code> for instantiation by the currently set Qt3DCore::QAspectFactory. This makes it possible to create an instance of <db:code role="parameter">AspectType</db:code> in the aspect thread by later passing <db:code role="parameter">name</db:code> to <db:link xlink:href="qt3dcore-qaspectengine.xml#registerAspect">Qt3DCore::QAspectEngine::registerAspect</db:link>(const QString &amp;name).</db:para>
<db:note>
<db:para>It is also possible to register a new aspect without using this macro by instead using <db:link xlink:href="qt3dcore-qaspectengine.xml#registerAspect">Qt3DCore::QAspectEngine::registerAspect</db:link>(<db:link xlink:href="qt3dcore-qabstractaspect.xml">QAbstractAspect</db:link> *aspect) which will handle moving a previously created aspect instance to the aspect thread context.</db:para>
</db:note>
<db:para>KDAB has published a few articles about writing custom Qt3D aspects <db:link xlink:href="https://www.kdab.com/writing-custom-qt-3d-aspect/">on their blog</db:link>. These provide an excellent starting point if you wish to learn more about it.</db:para>
</db:section>
</db:section>
</db:article>
