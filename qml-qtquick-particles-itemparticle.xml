<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ItemParticle QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>For specifying a delegate to paint particles.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Particles</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>ParticlePainter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>ItemParticle is part of <db:simplelist><db:member>qtquick-particles</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="delegate-prop">
<db:title>delegate : Component</db:title>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>delegate</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>An instance of the delegate will be created for every logical particle, and moved along with it. As an alternative to using delegate, you can create Item instances yourself and hand them to the <db:link xlink:href="qml-qtquick-particles-itemparticle.xml">ItemParticle</db:link> to move using the <db:link xlink:href="qml-qtquick-particles-itemparticle.xml#take-method">take</db:link> method.</db:para>
<db:para>Any delegate instances created by <db:link xlink:href="qml-qtquick-particles-itemparticle.xml">ItemParticle</db:link> will be destroyed when the logical particle expires.</db:para>
</db:section>
<db:section xml:id="fade-prop">
<db:title>fade : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>fade</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If true, the item will automatically be faded in and out at the ends of its lifetime. If false, you will have to implement any entry effect yourself.</db:para>
<db:para>Default is true.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="freeze-method">
<db:title>freeze(Item <db:emphasis>item</db:emphasis>)</db:title>
<db:para>Suspends the flow of time for the logical particle which <db:code role="parameter">item</db:code> represents, allowing you to control its movement.</db:para>
</db:section>
<db:section xml:id="give-method">
<db:title>give(Item <db:emphasis>item</db:emphasis>)</db:title>
<db:para>Orders the <db:link xlink:href="qml-qtquick-particles-itemparticle.xml">ItemParticle</db:link> to give you control of the <db:code role="parameter">item</db:code>. It will cease controlling it and the item will lose its association to the logical particle.</db:para>
</db:section>
<db:section xml:id="take-method">
<db:title>take(Item <db:emphasis>item</db:emphasis>, bool <db:emphasis>prioritize</db:emphasis>)</db:title>
<db:para>Asks the <db:link xlink:href="qml-qtquick-particles-itemparticle.xml">ItemParticle</db:link> to take over control of <db:code role="parameter">item</db:code> positioning temporarily. It will follow the movement of a logical particle when one is available.</db:para>
<db:para>By default items form a queue when waiting for a logical particle, but if <db:code role="parameter">prioritize</db:code> is <db:code>true</db:code>, then it will go immediately to the head of the queue.</db:para>
<db:para><db:link xlink:href="qml-qtquick-particles-itemparticle.xml">ItemParticle</db:link> does not take ownership of the item, and will relinquish control when the logical particle expires. Commonly at this point you will want to put it back in the queue, you can do this with the below line in the delegate definition:</db:para>
<db:programlisting language="cpp">ItemParticle.onDetached: itemParticleInstance.take(delegateRootItem);
</db:programlisting>
<db:para>or delete it, such as with the below line in the delegate definition:</db:para>
<db:programlisting language="cpp">ItemParticle.onDetached: delegateRootItem.destroy();
</db:programlisting>
</db:section>
<db:section xml:id="unfreeze-method">
<db:title>unfreeze(Item <db:emphasis>item</db:emphasis>)</db:title>
<db:para>Restarts the flow of time for the logical particle which <db:code role="parameter">item</db:code> represents, allowing it to be moved by the particle system again.</db:para>
</db:section>
</db:section>
</db:article>
