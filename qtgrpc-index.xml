<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt GRPC</db:title>
<db:productname>QtGrpc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GRPC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides support for communicating with gRPC services.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt GRPC is the client-side implementation that, together with the <db:link xlink:href="qtprotobuf-index.xml">Qt Protobuf</db:link> module, allows the definition of messages and services in <db:code>.proto</db:code> files, which then use the provided code generators to generate client code that allows the access for fields and gRPC services in the Qt framework. The code generated by Qt GRPC enables the client-side to communicate with a gRPC server (regardless of whether the server uses Qt) by sending calls or streaming messages.</db:para>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>gRPC is a cross-platform high performance Remote Procedure Call (RPC) framework, that generates client/server bindings for a lot of languages. Usually, you use it to connect services in a microservices-style architecture or to connect mobile applications and browsers to backend services. The gRPC clients and servers can run and talk to each other in various environments, and you can write in any of gRPCâ€™s supported languages. For more details see <db:link xlink:href="https://grpc.io/docs/what-is-grpc/introduction/">gRPC Introduction</db:link></db:para>
</db:section>
<db:section xml:id="using-the-module">
<db:title>Using the Module</db:title>
<db:section xml:id="module-prerequisites">
<db:title>Module prerequisites:</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>protoc</db:code>, the Google protocol buffers compiler, must be installed to generate code from <db:code>.proto</db:code> specification files. See <db:link xlink:href="https://grpc.io/docs/protoc-installation/">Protoc Installation</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>If you also install the gRPC libraries, you'll be able to use native gRPC channels. See <db:link xlink:href="https://grpc.io/docs/languages/cpp/quickstart/">gRPC for C++</db:link> for details.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://www.openssl.org/">OpenSSL Toolkit</db:link> may be needed.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Check the <db:link xlink:href="qtprotobuf-installation-windows-vcpkg.xml">Example of installation for Windows using vcpkg</db:link> to see how to install <db:code>gRPC</db:code> and <db:code>Protobuf</db:code> and to run Qt GRPC examples.</db:para>
</db:note>
<db:para>To start working with the Qt GRPC functionality you should define required services and messages in a <db:code>.proto</db:code> file. See the <db:code>helloworld.proto</db:code> example:</db:para>
<db:programlisting language="cpp" role="bad">// The service definition.
service Salutation {
  // Sends a greeting
  rpc SendHello (HelloRequest) returns (HelloReply) {}
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}
</db:programlisting>
<db:para>To add a <db:code>.proto</db:code> file to a Qt-based project and generate the required source code, you should use the <db:code>protoc</db:code> compiler with the <db:code>qtgrpcgen</db:code> and <db:code>qtprotobufgen</db:code> Qt plugins.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:link xlink:href="qtprotobufgen-qt-tool.xml">Qt Protobuf plugin</db:link> generates classes that you can use to serialize and deserialize their associated protobuf messages.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:link xlink:href="qtgrpcgen-qt-tool.xml">Qt GRPC plugin</db:link> generates gRPC client classes from the proto file.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This processing of <db:code>proto</db:code> files into source code can be automated in CMake using the following commands provided by Qt:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt-add-protobuf.xml">qt_add_protobuf</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt-add-grpc.xml">qt_add_grpc</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>As a result, the full example of a CMake project file, that uses Qt GRPC functionality shall be:</db:para>
<db:programlisting language="cpp">cmake_minimum_required(VERSION 3.16...3.22)
project(MyProject)

find_package(Qt6 REQUIRED COMPONENTS Protobuf Grpc)
qt_standard_project_setup()

qt_add_protobuf(MyProtoMessageLib
    PROTO_FILES
        path/to/helloworld.proto
    PROTO_INCLUDES
        path/to/proto/include
)

qt_add_grpc(MyGrpcClient CLIENT
    PROTO_FILES
        path/to/helloworld.proto
    PROTO_INCLUDES
        path/to/proto/include
)

qt_add_executable(MyApp main.cpp)

target_link_libraries(MyApp PRIVATE MyGrpcClient MyProtoMessageLib Qt6::Protobuf)
</db:programlisting>
<db:para>The example above calls the <db:code>qt_add_grpc()</db:code> CMake function to generate a library called <db:code>MyGrpcClient</db:code>.</db:para>
<db:note>
<db:para>if the <db:code>.proto</db:code> file API contains messages, then the <db:code>qt_add_protobuf()</db:code> CMake function should be called to generate protobuf message classes for the project.</db:para>
</db:note>
<db:para>Finally, the example creates a target for an executable called <db:emphasis>MyApp</db:emphasis> which links to the <db:emphasis>MyGrpcClient</db:emphasis> and <db:emphasis>MyProtoMessageLib</db:emphasis> libraries.</db:para>
</db:section>
<db:section xml:id="qml-api">
<db:title>QML API</db:title>
<db:para>The QML types of the module are available through the <db:code>QtGrpc</db:code> import. To use the types, add the following import statement to your .qml file:</db:para>
<db:programlisting language="qml">import QtGrpc
</db:programlisting>
</db:section>
<db:section xml:id="c-api">
<db:title>C++ API</db:title>
<db:para>Using a Qt module's C++ API requires linking against the module library, either directly or through other dependencies. Several build tools have dedicated support for this, including <db:link xlink:href="https://cmake.org/cmake/help/latest/">CMake</db:link> and <db:link xlink:href="qmake-manual.xml">qmake</db:link>.</db:para>
<db:section xml:id="building-with-cmake">
<db:title>Building with CMake</db:title>
<db:para>Use the <db:code>find_package()</db:code> command to locate the needed module component in the <db:code>Qt6</db:code> package:</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS Grpc)
target_link_libraries(mytarget PRIVATE Qt6::Grpc)
</db:programlisting>
<db:para>For more details, see the <db:link xlink:href="cmake-manual.xml">Build with CMake</db:link> overview.</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="articles-and-guides">
<db:title>Articles and Guides</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="cmake-commands-qtgrpc.xml">CMake Commands in Qt6 GRPC</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtgrpc-service-client-methods.xml">Client Methods of the Qt GRPC Service</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtgrpc-client-interceptors.xml">Qt GRPC Client Interceptors</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="references">
<db:title>References</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtgrpc-qmlmodule.xml">Qt GRPC Quick</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtgrpc-module.xml">C++ Classes</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="licenses-and-trademarks">
<db:title>Licenses and Trademarks</db:title>
<db:para>Qt GRPC is available under commercial licenses from <db:link xlink:href="http://www.qt.io/about-us/">The Qt Company</db:link>. In addition, it is available under the <db:link xlink:href="http://www.gnu.org/licenses/gpl-3.0.html">GNU General Public License, version 3</db:link>. See <db:link xlink:href="licensing.xml">Qt Licensing</db:link> for further details.</db:para>
<db:para>gRPC\sup{&#174;} is a registered trademark of The Linux Foundation. Please see <db:link xlink:href="https://grpc.io/">https://grpc.io/</db:link> for more information.</db:para>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtgrpc-examples.xml">Qt GRPC Examples</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="licenses-and-attributions">
<db:title>Licenses and Attributions</db:title>
<db:para>The Qt GRPC module is available under commercial licenses from <db:link xlink:href="http://www.qt.io/about-us/">The Qt Company</db:link>. In addition, it is available under free software licenses: The <db:link xlink:href="http://www.gnu.org/licenses/gpl-3.0.html">GNU General Public License, version 3</db:link>. See <db:link xlink:href="licensing.xml">Qt Licensing</db:link> for further details.</db:para>
<db:para>Furthermore, Qt GRPC in Qt 6.7.2 may contain third party modules under the following permissive licenses:</db:para>
<db:variablelist role="groupsbymodule attributions-qtgrpc-examples">
<db:varlistentry>
<db:term><db:link xlink:href="qtgrpc-attribution-grpc.xml" xlink:role="page">gRPC, version 1.50.1</db:link></db:term>
<db:listitem>
<db:para>Apache License 2.0</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:article>
