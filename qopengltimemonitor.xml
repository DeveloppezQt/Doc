<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOpenGLTimeMonitor Class</db:title>
<db:productname>QtOpenGL</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>QtOpenGL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qopengltimemonitor.xml">QOpenGLTimeMonitor</db:link> class wraps a sequence of OpenGL timer query objects.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOpenGLTimeMonitor</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS OpenGL)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::OpenGL)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += opengl</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QOpenGLTimeMonitor is part of <db:simplelist><db:member>painting-3D</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qopengltimemonitor.xml">QOpenGLTimeMonitor</db:link> class is a convenience wrapper around a collection of OpenGL timer query objects used to measure intervals of time on the GPU to the level of granularity required by your rendering application.</db:para>
<db:para>The OpenGL timer queries objects are queried in sequence to record the GPU timestamps at positions of interest in your rendering code. Once the results for all issues timer queries become available, the results can be fetched and QOpenGLTimerMonitor will calculate the recorded time intervals for you.</db:para>
<db:para>The typical use case of this class is to either profile your application's rendering algorithms or to adjust those algorithms in real-time for dynamic performance/quality balancing.</db:para>
<db:para>Prior to using <db:link xlink:href="qopengltimemonitor.xml">QOpenGLTimeMonitor</db:link> in your rendering function you should set the required number of sample points that you wish to record by calling setSamples(). Note that measuring N sample points will produce N-1 time intervals. Once you have set the number of sample points, call the <db:link xlink:href="qopengltimemonitor.xml#create">create</db:link>() function with a valid current OpenGL context to create the necessary query timer objects. These steps are usually performed just once in an initialization function.</db:para>
<db:para>Use the <db:link xlink:href="qopengltimemonitor.xml#recordSample">recordSample</db:link>() function to delimit blocks of code containing OpenGL commands that you wish to time. You can check availability of the resulting time samples and time intervals with <db:link xlink:href="qopengltimemonitor.xml#isResultAvailable">isResultAvailable</db:link>(). The calculated time intervals and the raw timestamp samples can be retrieved with the blocking <db:link xlink:href="qopengltimemonitor.xml#waitForIntervals">waitForIntervals</db:link>() and <db:link xlink:href="qopengltimemonitor.xml#waitForSamples">waitForSamples</db:link>() functions respectively.</db:para>
<db:para>After retrieving the results and before starting a new round of taking samples (for example, in the next frame) be sure to call the <db:link xlink:href="qopengltimemonitor.xml#reset">reset</db:link>() function which will clear the cached results and reset the timer index back to the first timer object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltimerquery.xml">QOpenGLTimerQuery</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QOpenGLTimeMonitor">
<db:title>[explicit] QOpenGLTimeMonitor::QOpenGLTimeMonitor(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QOpenGLTimeMonitor</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLTimeMonitor(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qopengltimemonitor.xml">QOpenGLTimeMonitor</db:link> instance with the given <db:code role="parameter">parent</db:code>. You must call <db:link xlink:href="qopengltimemonitor.xml#create">create</db:link>() with a valid OpenGL context before using.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltimemonitor.xml#setSampleCount">setSampleCount</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltimemonitor.xml#create">create</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QOpenGLTimeMonitor">
<db:title>[virtual] QOpenGLTimeMonitor::~QOpenGLTimeMonitor()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QOpenGLTimeMonitor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QOpenGLTimeMonitor()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qopengltimemonitor.xml">QOpenGLTimeMonitor</db:link> and any underlying OpenGL resources.</db:para>
</db:section>
<db:section xml:id="create">
<db:title>bool QOpenGLTimeMonitor::create()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>create</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool create()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Instantiate <db:link xlink:href="qopengltimemonitor.xml#sampleCount">sampleCount</db:link>() OpenGL timer query objects that will be used to track the amount of time taken to execute OpenGL commands between successive calls to <db:link xlink:href="qopengltimemonitor.xml#recordSample">recordSample</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if the OpenGL timer query objects could be created.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltimemonitor.xml#destroy">destroy</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltimemonitor.xml#setSampleCount">setSampleCount</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltimemonitor.xml#recordSample">recordSample</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="destroy">
<db:title>void QOpenGLTimeMonitor::destroy()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>destroy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void destroy()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Destroys any OpenGL timer query objects used within this instance.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltimemonitor.xml#create">create</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isCreated">
<db:title>bool QOpenGLTimeMonitor::isCreated() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isCreated</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isCreated() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the underlying OpenGL query objects have been created. If this returns <db:code>true</db:code> and the associated OpenGL context is current, then you are able to record time samples with this object.</db:para>
</db:section>
<db:section xml:id="isResultAvailable">
<db:title>bool QOpenGLTimeMonitor::isResultAvailable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isResultAvailable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isResultAvailable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the OpenGL timer query results are available.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltimemonitor.xml#waitForSamples">waitForSamples</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltimemonitor.xml#waitForIntervals">waitForIntervals</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="objectIds">
<db:title>QList&lt;GLuint&gt; QOpenGLTimeMonitor::objectIds() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;GLuint&gt;</db:type>
<db:methodname>objectIds</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;GLuint&gt; objectIds() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qlist.xml">QList</db:link> containing the object Ids of the OpenGL timer query objects.</db:para>
</db:section>
<db:section xml:id="recordSample">
<db:title>int QOpenGLTimeMonitor::recordSample()</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>recordSample</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int recordSample()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Issues an OpenGL timer query at this point in the OpenGL command queue. Calling this function in a sequence in your application's rendering function, will build up details of the GPU time taken to execute the OpenGL commands between successive calls to this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltimemonitor.xml#setSampleCount">setSampleCount</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltimemonitor.xml#isResultAvailable">isResultAvailable</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltimemonitor.xml#waitForSamples">waitForSamples</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltimemonitor.xml#waitForIntervals">waitForIntervals</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reset">
<db:title>void QOpenGLTimeMonitor::reset()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>reset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void reset()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets the time monitor ready for use in another frame of rendering. Call this once you have obtained the previous results and before calling <db:link xlink:href="qopengltimemonitor.xml#recordSample">recordSample</db:link>() for the first time on the next frame.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltimemonitor.xml#recordSample">recordSample</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sampleCount">
<db:title>int QOpenGLTimeMonitor::sampleCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>sampleCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int sampleCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of sample points that have been requested with <db:link xlink:href="qopengltimemonitor.xml#setSampleCount">setSampleCount</db:link>(). If create was successfully called following <db:link xlink:href="qopengltimemonitor.xml#setSampleCount">setSampleCount</db:link>(), then the value returned will be the actual number of sample points that can be used.</db:para>
<db:para>The default value for sample count is 2, leading to the measurement of a single interval.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltimemonitor.xml#setSampleCount">setSampleCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSampleCount">
<db:title>void QOpenGLTimeMonitor::setSampleCount(int <db:emphasis>sampleCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSampleCount</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sampleCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSampleCount(int sampleCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the number of sample points to <db:code role="parameter">sampleCount</db:code>. After setting the number of samples with this function, you must call <db:link xlink:href="qopengltimemonitor.xml#create">create</db:link>() to instantiate the underlying OpenGL timer query objects.</db:para>
<db:para>The new <db:code role="parameter">sampleCount</db:code> must be at least 2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltimemonitor.xml#sampleCount">sampleCount</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltimemonitor.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltimemonitor.xml#recordSample">recordSample</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="waitForIntervals">
<db:title>QList&lt;GLuint64&gt; QOpenGLTimeMonitor::waitForIntervals() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;GLuint64&gt;</db:type>
<db:methodname>waitForIntervals</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;GLuint64&gt; waitForIntervals() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qlist.xml">QList</db:link> containing the time intervals delimited by the calls to <db:link xlink:href="qopengltimemonitor.xml#recordSample">recordSample</db:link>(). The resulting vector will contain one fewer element as this represents the intervening intervals rather than the actual timestamp samples.</db:para>
<db:para>This function will block until OpenGL indicates the results are available. It is recommended to check the availability of the result prior to calling this function with <db:link xlink:href="qopengltimemonitor.xml#isResultAvailable">isResultAvailable</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltimemonitor.xml#waitForSamples">waitForSamples</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltimemonitor.xml#isResultAvailable">isResultAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="waitForSamples">
<db:title>QList&lt;GLuint64&gt; QOpenGLTimeMonitor::waitForSamples() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;GLuint64&gt;</db:type>
<db:methodname>waitForSamples</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;GLuint64&gt; waitForSamples() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qlist.xml">QList</db:link> containing the GPU timestamps taken with <db:link xlink:href="qopengltimemonitor.xml#recordSample">recordSample</db:link>().</db:para>
<db:para>This function will block until OpenGL indicates the results are available. It is recommended to check the availability of the result prior to calling this function with <db:link xlink:href="qopengltimemonitor.xml#isResultAvailable">isResultAvailable</db:link>().</db:para>
<db:note>
<db:para>This function only works on systems that have OpenGL &gt;=3.3 or the ARB_timer_query extension. See <db:link xlink:href="qopengltimerquery.xml">QOpenGLTimerQuery</db:link> for more details.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltimemonitor.xml#waitForIntervals">waitForIntervals</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltimemonitor.xml#isResultAvailable">isResultAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
