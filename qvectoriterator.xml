<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QVectorIterator Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QVectorIterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qvectoriterator.xml">QVectorIterator</db:link> class provides a Java-style const iterator for <db:link xlink:href="qvector.xml">QVector</db:link> and <db:link xlink:href="qstack.xml">QStack</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QVectorIterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qvector.xml">QVector</db:link> has both <db:link xlink:href="containers.xml#java-style-iterators">Java-style iterators</db:link> and <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link>. The Java-style iterators are more high-level and easier to use than the STL-style iterators; on the other hand, they are slightly less efficient.</db:para>
<db:para>An alternative to using iterators is to use index positions. Most <db:link xlink:href="qvector.xml">QVector</db:link> member functions take an index as their first parameter, making it possible to access, insert, and remove items without using iterators.</db:para>
<db:para><db:link xlink:href="qvectoriterator.xml">QVectorIterator</db:link>&lt;T&gt; allows you to iterate over a <db:link xlink:href="qvector.xml">QVector</db:link>&lt;T&gt; (or a <db:link xlink:href="qstack.xml">QStack</db:link>&lt;T&gt;). If you want to modify the vector as you iterate over it, use <db:link xlink:href="qmutablevectoriterator.xml">QMutableVectorIterator</db:link>&lt;T&gt; instead.</db:para>
<db:para>The <db:link xlink:href="qvectoriterator.xml">QVectorIterator</db:link> constructor takes a <db:link xlink:href="qvector.xml">QVector</db:link> as argument. After construction, the iterator is located at the very beginning of the vector (before the first item). Here's how to iterate over all the elements sequentially:</db:para>
<db:programlisting language="cpp">QVector&lt;float&gt; vector;
...
QVectorIterator&lt;float&gt; i(vector);
while (i.hasNext())
    qDebug() &lt;&lt; i.next();
</db:programlisting>
<db:para>The next() function returns the next item in the vector and advances the iterator. Unlike STL-style iterators, Java-style iterators point <db:emphasis>between</db:emphasis> items rather than directly <db:emphasis>at</db:emphasis> items. The first call to next() advances the iterator to the position between the first and second item, and returns the first item; the second call to next() advances the iterator to the position between the second and third item, returning the second item; and so on.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/javaiterators1.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Here's how to iterate over the elements in reverse order:</db:para>
<db:programlisting language="cpp">QVectorIterator&lt;float&gt; i(vector);
i.toBack();
while (i.hasPrevious())
    qDebug() &lt;&lt; i.previous();
</db:programlisting>
<db:para>If you want to find all occurrences of a particular value, use findNext() or findPrevious() in a loop.</db:para>
<db:para>Multiple iterators can be used on the same vector. If the vector is modified while a <db:link xlink:href="qvectoriterator.xml">QVectorIterator</db:link> is active, the <db:link xlink:href="qvectoriterator.xml">QVectorIterator</db:link> will continue iterating over the original vector, ignoring the modified copy.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablevectoriterator.xml">QMutableVectorIterator</db:link></db:member>
<db:member><db:link xlink:href="qvector.xml#const_iterator-typedef">QVector::const_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
