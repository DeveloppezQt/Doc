<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D: Basic Shapes C++ Example</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows four basic shapes that Qt 3D offers and sets up a mesh for each of them.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/basicshapes-cpp-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Basic Shapes</db:emphasis> shows four basic shapes that Qt 3D offers: a torus, a cylinder, a cube, and a sphere. The example also shows how to embed a Qt 3D scene into a widget and connect with other widgets.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="setting-up-a-torus-mesh">
<db:title>Setting Up a Torus Mesh</db:title>
<db:para>As an example, we go through how to set up a torus mesh. First, we instantiate the <db:code>QTorusMesh</db:code>, and then we set the mesh specific parameters, which for torus are radius, minor radius, and the number of rings and slices.</db:para>
<db:programlisting language="cpp">m_torus = new Qt3DExtras::QTorusMesh();
m_torus-&amp;gt;setRadius(1.0f);
m_torus-&amp;gt;setMinorRadius(0.4f);
m_torus-&amp;gt;setRings(100);
m_torus-&amp;gt;setSlices(20);
</db:programlisting>
<db:para>The size and position of the torus can be adjusted with transform components. We create scale, translation, and rotation components and add them into the <db:code>QTransform</db:code> component.</db:para>
<db:programlisting language="cpp">Qt3DCore::QTransform *torusTransform = new Qt3DCore::QTransform();
torusTransform-&amp;gt;setScale(2.0f);
torusTransform-&amp;gt;setRotation(QQuaternion::fromAxisAndAngle(QVector3D(0.0f, 1.0f, 0.0f), 25.0f));
torusTransform-&amp;gt;setTranslation(QVector3D(5.0f, 4.0f, 0.0f));
</db:programlisting>
<db:para>To change the diffuse color of the mesh, we create a <db:code>QPhongMaterial</db:code> and set its diffuse color.</db:para>
<db:programlisting language="cpp">Qt3DExtras::QPhongMaterial *torusMaterial = new Qt3DExtras::QPhongMaterial();
torusMaterial-&amp;gt;setDiffuse(QColor(QRgb(0xbeb32b)));
</db:programlisting>
<db:para>The final step is to add the torus into an entity tree, and we do that by creating a <db:code>QEntity</db:code> with a parent entity and adding the previously created mesh, material, and transform components into it.</db:para>
<db:programlisting language="cpp">m_torusEntity = new Qt3DCore::QEntity(m_rootEntity);
m_torusEntity-&amp;gt;addComponent(m_torus);
m_torusEntity-&amp;gt;addComponent(torusMaterial);
m_torusEntity-&amp;gt;addComponent(torusTransform);
</db:programlisting>
<db:para>We can control the visibility of the entity by defining whether it has a parent or not. That is, whether it is part of an entity tree or not.</db:para>
<db:programlisting language="cpp">void SceneModifier::enableTorus(bool enabled)
{
    m_torusEntity-&amp;gt;setEnabled(enabled);
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qt3d.git/tree/examples/qt3d/basicshapes-cpp?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
