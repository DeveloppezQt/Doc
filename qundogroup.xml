<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QUndoGroup Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qundogroup.xml">QUndoGroup</db:link> class is a group of <db:link xlink:href="qundostack.xml">QUndoStack</db:link> objects.</db:para>
<db:para>This class was introduced in Qt 4.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QUndoGroup</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>For an overview of the Qt's undo framework, see the overview.</db:para>
<db:para>An application often has multiple undo stacks, one for each opened document. At the same time, an application usually has one undo action and one redo action, which triggers undo or redo in the active document.</db:para>
<db:para><db:link xlink:href="qundogroup.xml">QUndoGroup</db:link> is a group of <db:link xlink:href="qundostack.xml">QUndoStack</db:link> objects, one of which may be active. It has an <db:link xlink:href="qundogroup.xml#undo">undo</db:link>() and <db:link xlink:href="qundogroup.xml#redo">redo</db:link>() slot, which calls <db:link xlink:href="qundostack.xml#undo">QUndoStack::undo</db:link>() and <db:link xlink:href="qundostack.xml#redo">QUndoStack::redo</db:link>() for the active stack. It also has the functions <db:link xlink:href="qundogroup.xml#createUndoAction">createUndoAction</db:link>() and <db:link xlink:href="qundogroup.xml#createRedoAction">createRedoAction</db:link>(). The actions returned by these functions behave in the same way as those returned by <db:link xlink:href="qundostack.xml#createUndoAction">QUndoStack::createUndoAction</db:link>() and <db:link xlink:href="qundostack.xml#createRedoAction">QUndoStack::createRedoAction</db:link>() of the active stack.</db:para>
<db:para>Stacks are added to a group with <db:link xlink:href="qundogroup.xml#addStack">addStack</db:link>() and removed with <db:link xlink:href="qundogroup.xml#removeStack">removeStack</db:link>(). A stack is implicitly added to a group when it is created with the group as its parent <db:link xlink:href="qobject.xml">QObject</db:link>.</db:para>
<db:para>It is the programmer's responsibility to specify which stack is active by calling QUndoStack::setActive(), usually when the associated document window receives focus. The active stack may also be set with <db:link xlink:href="qundogroup.xml#setActiveStack">setActiveStack</db:link>(), and is returned by <db:link xlink:href="qundogroup.xml#activeStack">activeStack</db:link>().</db:para>
<db:para>When a stack is added to a group using <db:link xlink:href="qundogroup.xml#addStack">addStack</db:link>(), the group does not take ownership of the stack. This means the stack has to be deleted separately from the group. When a stack is deleted, it is automatically removed from a group. A stack may belong to only one group. Adding it to another group will cause it to be removed from the previous group.</db:para>
<db:para>A <db:link xlink:href="qundogroup.xml">QUndoGroup</db:link> is also useful in conjunction with <db:link xlink:href="qundoview.xml">QUndoView</db:link>. If a <db:link xlink:href="qundoview.xml">QUndoView</db:link> is set to watch a group using <db:link xlink:href="qundoview.xml#setGroup">QUndoView::setGroup</db:link>(), it will update itself to display the active stack.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QUndoGroup">
<db:title>[explicit] QUndoGroup::QUndoGroup(QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Creates an empty <db:link xlink:href="qundogroup.xml">QUndoGroup</db:link> object with parent <db:code role="parameter">parent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundogroup.xml#addStack">addStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QUndoGroup">
<db:title>[virtual noexcept] QUndoGroup::~QUndoGroup()</db:title>
<db:para>Destroys the <db:link xlink:href="qundogroup.xml">QUndoGroup</db:link>.</db:para>
</db:section>
<db:section xml:id="activeStack">
<db:title>QUndoStack *QUndoGroup::activeStack() const</db:title>
<db:para>Returns the active stack of this group.</db:para>
<db:para>If none of the stacks are active, or if the group is empty, this function returns 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundogroup.xml#setActiveStack">setActiveStack</db:link>()</db:member>
<db:member><db:link xlink:href="">QUndoStack::setActive()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="activeStackChanged">
<db:title>void QUndoGroup::activeStackChanged(QUndoStack *<db:emphasis>stack</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the active stack of the group changes. This can happen when <db:link xlink:href="qundogroup.xml#setActiveStack">setActiveStack</db:link>() or QUndoStack::setActive() is called, or when the active stack is removed form the group. <db:code role="parameter">stack</db:code> is the new active stack. If no stack is active, <db:code role="parameter">stack</db:code> is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundogroup.xml#setActiveStack">setActiveStack</db:link>()</db:member>
<db:member><db:link xlink:href="">QUndoStack::setActive()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addStack">
<db:title>void QUndoGroup::addStack(QUndoStack *<db:emphasis>stack</db:emphasis>)</db:title>
<db:para>Adds <db:code role="parameter">stack</db:code> to this group. The group does not take ownership of the stack. Another way of adding a stack to a group is by specifying the group as the stack's parent <db:link xlink:href="qobject.xml">QObject</db:link> in <db:link xlink:href="qundostack.xml#QUndoStack">QUndoStack::QUndoStack</db:link>(). In this case, the stack is deleted when the group is deleted, in the usual manner of QObjects.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundogroup.xml#removeStack">removeStack</db:link>()</db:member>
<db:member><db:link xlink:href="qundogroup.xml#stacks">stacks</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#QUndoStack">QUndoStack::QUndoStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canRedo">
<db:title>bool QUndoGroup::canRedo() const</db:title>
<db:para>Returns the value of the active stack's <db:link xlink:href="qundostack.xml#canRedo">QUndoStack::canRedo</db:link>().</db:para>
<db:para>If none of the stacks are active, or if the group is empty, this function returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundogroup.xml#canUndo">canUndo</db:link>()</db:member>
<db:member><db:link xlink:href="qundogroup.xml#setActiveStack">setActiveStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canRedoChanged">
<db:title>void QUndoGroup::canRedoChanged(bool <db:emphasis>canRedo</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the active stack emits <db:link xlink:href="qundostack.xml#canRedoChanged">QUndoStack::canRedoChanged</db:link>() or the active stack changes.</db:para>
<db:para><db:code role="parameter">canRedo</db:code> is the new state, or false if the active stack is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#canRedoChanged">QUndoStack::canRedoChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qundogroup.xml#setActiveStack">setActiveStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canUndo">
<db:title>bool QUndoGroup::canUndo() const</db:title>
<db:para>Returns the value of the active stack's <db:link xlink:href="qundostack.xml#canUndo">QUndoStack::canUndo</db:link>().</db:para>
<db:para>If none of the stacks are active, or if the group is empty, this function returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundogroup.xml#canRedo">canRedo</db:link>()</db:member>
<db:member><db:link xlink:href="qundogroup.xml#setActiveStack">setActiveStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canUndoChanged">
<db:title>void QUndoGroup::canUndoChanged(bool <db:emphasis>canUndo</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the active stack emits <db:link xlink:href="qundostack.xml#canUndoChanged">QUndoStack::canUndoChanged</db:link>() or the active stack changes.</db:para>
<db:para><db:code role="parameter">canUndo</db:code> is the new state, or false if the active stack is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#canUndoChanged">QUndoStack::canUndoChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qundogroup.xml#setActiveStack">setActiveStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cleanChanged">
<db:title>void QUndoGroup::cleanChanged(bool <db:emphasis>clean</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the active stack emits <db:link xlink:href="qundostack.xml#cleanChanged">QUndoStack::cleanChanged</db:link>() or the active stack changes.</db:para>
<db:para><db:code role="parameter">clean</db:code> is the new state, or true if the active stack is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#cleanChanged">QUndoStack::cleanChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qundogroup.xml#setActiveStack">setActiveStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createRedoAction">
<db:title>QAction *QUndoGroup::createRedoAction(QObject *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>prefix</db:emphasis> = QString()) const</db:title>
<db:para>Creates an redo <db:link xlink:href="qaction.xml">QAction</db:link> object with parent <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Triggering this action will cause a call to <db:link xlink:href="qundostack.xml#redo">QUndoStack::redo</db:link>() on the active stack. The text of this action will always be the text of the command which will be redone in the next call to <db:link xlink:href="qundogroup.xml#redo">redo</db:link>(), prefixed by <db:code role="parameter">prefix</db:code>. If there is no command available for redo, if the group is empty or if none of the stacks are active, this action will be disabled.</db:para>
<db:para>If <db:code role="parameter">prefix</db:code> is empty, the default template &quot;Redo %1&quot; is used instead of prefix. Before Qt 4.8, the prefix &quot;Redo&quot; was used by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundogroup.xml#createUndoAction">createUndoAction</db:link>()</db:member>
<db:member><db:link xlink:href="qundogroup.xml#canRedo">canRedo</db:link>()</db:member>
<db:member><db:link xlink:href="qundocommand.xml#text">QUndoCommand::text</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createUndoAction">
<db:title>QAction *QUndoGroup::createUndoAction(QObject *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>prefix</db:emphasis> = QString()) const</db:title>
<db:para>Creates an undo <db:link xlink:href="qaction.xml">QAction</db:link> object with parent <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Triggering this action will cause a call to <db:link xlink:href="qundostack.xml#undo">QUndoStack::undo</db:link>() on the active stack. The text of this action will always be the text of the command which will be undone in the next call to <db:link xlink:href="qundogroup.xml#undo">undo</db:link>(), prefixed by <db:code role="parameter">prefix</db:code>. If there is no command available for undo, if the group is empty or if none of the stacks are active, this action will be disabled.</db:para>
<db:para>If <db:code role="parameter">prefix</db:code> is empty, the default template &quot;Undo %1&quot; is used instead of prefix. Before Qt 4.8, the prefix &quot;Undo&quot; was used by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundogroup.xml#createRedoAction">createRedoAction</db:link>()</db:member>
<db:member><db:link xlink:href="qundogroup.xml#canUndo">canUndo</db:link>()</db:member>
<db:member><db:link xlink:href="qundocommand.xml#text">QUndoCommand::text</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexChanged">
<db:title>void QUndoGroup::indexChanged(int <db:emphasis>idx</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the active stack emits <db:link xlink:href="qundostack.xml#indexChanged">QUndoStack::indexChanged</db:link>() or the active stack changes.</db:para>
<db:para><db:code role="parameter">idx</db:code> is the new current index, or 0 if the active stack is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#indexChanged">QUndoStack::indexChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qundogroup.xml#setActiveStack">setActiveStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isClean">
<db:title>bool QUndoGroup::isClean() const</db:title>
<db:para>Returns the value of the active stack's <db:link xlink:href="qundostack.xml#isClean">QUndoStack::isClean</db:link>().</db:para>
<db:para>If none of the stacks are active, or if the group is empty, this function returns <db:code>true</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundogroup.xml#setActiveStack">setActiveStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="redo">
<db:title>void QUndoGroup::redo()</db:title>
<db:para>Calls <db:link xlink:href="qundostack.xml#redo">QUndoStack::redo</db:link>() on the active stack.</db:para>
<db:para>If none of the stacks are active, or if the group is empty, this function does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundogroup.xml#undo">undo</db:link>()</db:member>
<db:member><db:link xlink:href="qundogroup.xml#canRedo">canRedo</db:link>()</db:member>
<db:member><db:link xlink:href="qundogroup.xml#setActiveStack">setActiveStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="redoText">
<db:title>QString QUndoGroup::redoText() const</db:title>
<db:para>Returns the value of the active stack's <db:link xlink:href="qundostack.xml#redoText">QUndoStack::redoText</db:link>().</db:para>
<db:para>If none of the stacks are active, or if the group is empty, this function returns an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundogroup.xml#undoText">undoText</db:link>()</db:member>
<db:member><db:link xlink:href="qundogroup.xml#setActiveStack">setActiveStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="redoTextChanged">
<db:title>void QUndoGroup::redoTextChanged(const QString &amp;<db:emphasis>redoText</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the active stack emits <db:link xlink:href="qundostack.xml#redoTextChanged">QUndoStack::redoTextChanged</db:link>() or the active stack changes.</db:para>
<db:para><db:code role="parameter">redoText</db:code> is the new state, or an empty string if the active stack is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#redoTextChanged">QUndoStack::redoTextChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qundogroup.xml#setActiveStack">setActiveStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeStack">
<db:title>void QUndoGroup::removeStack(QUndoStack *<db:emphasis>stack</db:emphasis>)</db:title>
<db:para>Removes <db:code role="parameter">stack</db:code> from this group. If the stack was the active stack in the group, the active stack becomes 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundogroup.xml#addStack">addStack</db:link>()</db:member>
<db:member><db:link xlink:href="qundogroup.xml#stacks">stacks</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#dtor.QUndoStack">QUndoStack::~QUndoStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setActiveStack">
<db:title>void QUndoGroup::setActiveStack(QUndoStack *<db:emphasis>stack</db:emphasis>)</db:title>
<db:para>Sets the active stack of this group to <db:code role="parameter">stack</db:code>.</db:para>
<db:para>If the stack is not a member of this group, this function does nothing.</db:para>
<db:para>Synonymous with calling QUndoStack::setActive() on <db:code role="parameter">stack</db:code>.</db:para>
<db:para>The actions returned by <db:link xlink:href="qundogroup.xml#createUndoAction">createUndoAction</db:link>() and <db:link xlink:href="qundogroup.xml#createRedoAction">createRedoAction</db:link>() will now behave in the same way as those returned by <db:code role="parameter">stack</db:code>'s <db:link xlink:href="qundostack.xml#createUndoAction">QUndoStack::createUndoAction</db:link>() and <db:link xlink:href="qundostack.xml#createRedoAction">QUndoStack::createRedoAction</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QUndoStack::setActive()</db:link></db:member>
<db:member><db:link xlink:href="qundogroup.xml#activeStack">activeStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stacks">
<db:title>QList&lt;QUndoStack *&gt; QUndoGroup::stacks() const</db:title>
<db:para>Returns a list of stacks in this group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundogroup.xml#addStack">addStack</db:link>()</db:member>
<db:member><db:link xlink:href="qundogroup.xml#removeStack">removeStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="undo">
<db:title>void QUndoGroup::undo()</db:title>
<db:para>Calls <db:link xlink:href="qundostack.xml#undo">QUndoStack::undo</db:link>() on the active stack.</db:para>
<db:para>If none of the stacks are active, or if the group is empty, this function does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundogroup.xml#redo">redo</db:link>()</db:member>
<db:member><db:link xlink:href="qundogroup.xml#canUndo">canUndo</db:link>()</db:member>
<db:member><db:link xlink:href="qundogroup.xml#setActiveStack">setActiveStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="undoText">
<db:title>QString QUndoGroup::undoText() const</db:title>
<db:para>Returns the value of the active stack's <db:link xlink:href="qundostack.xml#undoText">QUndoStack::undoText</db:link>().</db:para>
<db:para>If none of the stacks are active, or if the group is empty, this function returns an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundogroup.xml#redoText">redoText</db:link>()</db:member>
<db:member><db:link xlink:href="qundogroup.xml#setActiveStack">setActiveStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="undoTextChanged">
<db:title>void QUndoGroup::undoTextChanged(const QString &amp;<db:emphasis>undoText</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the active stack emits <db:link xlink:href="qundostack.xml#undoTextChanged">QUndoStack::undoTextChanged</db:link>() or the active stack changes.</db:para>
<db:para><db:code role="parameter">undoText</db:code> is the new state, or an empty string if the active stack is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml#undoTextChanged">QUndoStack::undoTextChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qundogroup.xml#setActiveStack">setActiveStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
