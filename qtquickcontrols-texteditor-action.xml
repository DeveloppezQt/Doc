<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Text Editor - Connecting Actions</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qtquickcontrols-texteditor-logic.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Qt Quick Text Editor Guide - Logic"/></db:extendedlink>
<db:abstract>
<db:para>Qt Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Earlier in the <db:link xlink:href="qtquickcontrols-texteditor.xml">Qt Quick Text Editor Guide</db:link>, we created a <db:emphasis>main.qml</db:emphasis> file containing the description of our user interface in QML. The user interface contains tool buttons in a tool bar on top of a text area. Afterwards, we created a DocumentHandler class in C++ that will handle the file loading and saving.</db:para>
<db:para>Now we shall use the DocumentHandler in the QML file through <db:emphasis>actions</db:emphasis>. There is an <db:link xlink:href="qml-qtquick-controls-action.xml">Action</db:link> QML type that we can connect to the tool buttons which in turn calls the DocumentHandler functions.</db:para>
<db:section xml:id="importing-the-documenthandler-qml-type">
<db:title>Importing the DocumentHandler QML Type</db:title>
<db:para>With the <db:code>qmlRegisterType()</db:code> function, we declared that the DocumentHandler QML type is imported from the <db:code>org.qtproject.example</db:code> library.</db:para>
<db:para>The following code is taken from the <db:emphasis>main.cpp</db:emphasis> file from the previous stage.</db:para>
<db:programlisting language="cpp">qmlRegisterType&lt;DocumentHandler&gt;(&quot;org.qtproject.example&quot;, 1, 0, &quot;DocumentHandler&quot;);
</db:programlisting>
<db:para>In the <db:emphasis>main.qml</db:emphasis> file, enter the following import statement:</db:para>
<db:programlisting language="qml">import org.qtproject.example 1.0
</db:programlisting>
<db:para>The DocumentHandler type is then available and we can create an object directly by adding it at the bottom of the application window.</db:para>
<db:programlisting language="qml">DocumentHandler {
    id: document
}
</db:programlisting>
</db:section>
<db:section xml:id="assigning-actions">
<db:title>Assigning Actions</db:title>
<db:para>As mentioned, the tool buttons are associated with an <db:emphasis>action</db:emphasis>, for example, the cut button is associated with the cut action. The cut action embodies the events that define the action, for example, the calling of the appropriate function in the text area.</db:para>
<db:para>For our application, we have six actions, which may be placed inside the application window.</db:para>
<db:programlisting language="qml">Action {
    id: cutaction
    text: &quot;Cut&quot;
    shortcut: &quot;ctrl+x&quot;
    iconSource: &quot;images/editcut.png&quot;
    iconName: &quot;edit-cut&quot;
    onTriggered: textarea.cut()
}

Action {
    id: copyaction
    text: &quot;Copy&quot;
    shortcut: &quot;Ctrl+C&quot;
    iconSource: &quot;images/editcopy.png&quot;
    iconName: &quot;edit-copy&quot;
    onTriggered: textarea.copy()
}

Action {
    id: pasteaction
    text: &quot;Paste&quot;
    shortcut: &quot;ctrl+v&quot;
    iconSource: &quot;qrc:images/editpaste.png&quot;
    iconName: &quot;edit-paste&quot;
    onTriggered: textarea.paste()
}

Action {
    id: fileopenaction
    iconSource: &quot;images/fileopen.png&quot;
    iconName: &quot;document-open&quot;
    text: &quot;Open&quot;
    onTriggered: fileDialog.open()
}
</db:programlisting>
<db:para>These actions call the appropriate function and assign a specific icon and name to the action. To connect the <db:code>cutaction</db:code> to the cut tool button, add the following to the tool button</db:para>
<db:programlisting language="qml">ToolButton {
            id: cut_toolbutton
            iconSource: &quot;images/editcut.png&quot;
            iconName: &quot;cut_icon&quot;
            anchors.left: save_toolbutton.right
            action: cutaction;
}
</db:programlisting>
<db:para>For the open and save actions, we require that the user choose an existing file or create a new file. To do this, we can pop up a file dialog and ask the user to select the file to open from or save onto. We can create two file dialogs, one for opening a file and one for saving the file, each setting their own titles.</db:para>
<db:programlisting language="qml">FileDialog {
    id: fileOpenDialog
    title: &quot;Please choose a file to open&quot;
    nameFilters: [&quot;Text files (*.txt)&quot;]
    onAccepted: document.fileUrl = fileUrl
}

FileDialog {
    id: fileSaveDialog
    title: &quot;Please enter the file to save&quot;
    nameFilters: [&quot;Text files (*.txt)&quot;]
    selectExisting: false
    onAccepted: document.saveFile(fileUrl)
}
</db:programlisting>
<db:para>Setting the <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml">FileDialog</db:link>'s <db:code>selectExisting</db:code> property to <db:code>false</db:code> allows us to save new files.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml">FileDialog</db:link> type is from the <db:link xlink:href="qtquickdialogs-index.xml">Qt Quick Dialogs</db:link> and is imported with</db:para>
<db:programlisting language="qml">import QtQuick.Dialogs 1.2
</db:programlisting>
</db:section>
<db:section xml:id="deploying-texteditor">
<db:title>Deploying TextEditor</db:title>
<db:para>Deploying the TextEditor depends on the platform on which the application is run. The process is simple and Qt provides several tools for packaging applications for a given platform. The <db:link xlink:href="deployment.xml">Deploying Qt Applications</db:link> page lists the instructions for the supported platforms. For this guide, we will deploy on Windows desktop platform with the <db:code>windeploytool</db:code> to create a directory with the required dependent libraries.</db:para>
<db:para>To package TextEditor,</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Copy the <db:emphasis>texteditor.exe</db:emphasis> file from the release directory to another directory which serves as the destination folder.</db:para>
</db:listitem>
<db:listitem>
<db:para>Run the <db:emphasis>windeployqt.exe</db:emphasis> file which resolves and copies the Qt libraries into the destination folder. <db:emphasis>windeployqt.exe</db:emphasis> is found in the <db:emphasis>bin</db:emphasis> directory of the installation.</db:para>
<db:programlisting language="cpp">C:\Qt\5.3\msvc2012_opengl\bin&gt;windeployqt.exe &lt;path to destination folder&gt;
</db:programlisting>
</db:listitem>
</db:orderedlist>
<db:para>The destination folder can now be packaged and the binary file is executable. The images and QML file are already packaged into the binary file.</db:para>
</db:section>
<db:section xml:id="example-files">
<db:title>Example Files</db:title>
<db:para>The accompanying examples files are found in the following page:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-texteditor-example.xml">Qt Quick Controls - Text Editor Example</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
