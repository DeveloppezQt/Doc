<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>MediaPlayer QML Type</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Add media playback to a scene.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtMultimedia 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>MediaPlayer is part of <db:simplelist><db:member>multimedia_qml</db:member><db:member>multimedia_audio_qml</db:member><db:member>multimedia_video_qml</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:programlisting language="qml">Text {
    text: &quot;Click Me!&quot;;
    font.pointSize: 24;
    width: 150; height: 50;

    MediaPlayer {
        id: playMusic
        source: &quot;music.wav&quot;
    }
    MouseArea {
        id: playArea
        anchors.fill: parent
        onPressed:  { playMusic.play() }
    }
}
</db:programlisting>
<db:para>You can use <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml">MediaPlayer</db:link> by itself to play audio content (like <db:link xlink:href="qml-qtmultimedia-audio.xml">Audio</db:link>), or you can use it in conjunction with a <db:link xlink:href="qml-qtmultimedia-videooutput.xml">VideoOutput</db:link> for rendering video.</db:para>
<db:programlisting language="qml">Item {
    MediaPlayer {
        id: mediaplayer
        source: &quot;groovy_video.mp4&quot;
    }

    VideoOutput {
        anchors.fill: parent
        source: mediaplayer
    }

    MouseArea {
        id: playArea
        anchors.fill: parent
        onPressed: mediaplayer.play();
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtmultimedia-videooutput.xml">VideoOutput</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="audioRole-prop">
<db:title>[since 5.6] audioRole : enumeration</db:title>
<db:para>This property holds the role of the audio stream. It can be set to specify the type of audio being played, allowing the system to make appropriate decisions when it comes to volume, routing or post-processing.</db:para>
<db:para>The audio role must be set before setting the source property.</db:para>
<db:para>Supported values can be retrieved with <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#supportedAudioRoles-method">supportedAudioRoles</db:link>().</db:para>
<db:para>The value can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>UnknownRole - the role is unknown or undefined.</db:para>
</db:listitem>
<db:listitem>
<db:para>MusicRole - music.</db:para>
</db:listitem>
<db:listitem>
<db:para>VideoRole - soundtrack from a movie or a video.</db:para>
</db:listitem>
<db:listitem>
<db:para>VoiceCommunicationRole - voice communications, such as telephony.</db:para>
</db:listitem>
<db:listitem>
<db:para>AlarmRole - alarm.</db:para>
</db:listitem>
<db:listitem>
<db:para>NotificationRole - notification, such as an incoming e-mail or a chat request.</db:para>
</db:listitem>
<db:listitem>
<db:para>RingtoneRole - ringtone.</db:para>
</db:listitem>
<db:listitem>
<db:para>AccessibilityRole - for accessibility, such as with a screen reader.</db:para>
</db:listitem>
<db:listitem>
<db:para>SonificationRole - sonification, such as with user interface sounds.</db:para>
</db:listitem>
<db:listitem>
<db:para>GameRole - game audio.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This property was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="autoLoad-prop">
<db:title>autoLoad : bool</db:title>
<db:para>This property indicates if loading of media should begin immediately.</db:para>
<db:para>Defaults to true, if false media will not be loaded until playback is started.</db:para>
</db:section>
<db:section xml:id="autoPlay-prop">
<db:title>autoPlay : bool</db:title>
<db:para>This property controls whether the media will begin to play on start up.</db:para>
<db:para>Defaults to <db:code>false</db:code>. If set to <db:code>true</db:code>, the value of <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#autoLoad-prop">autoLoad</db:link> will be overwritten to <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="availability-prop">
<db:title>[read-only] availability : enumeration</db:title>
<db:para>Returns the availability state of the media player.</db:para>
<db:para>This is one of:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Value</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Available</db:para>
</db:td>
<db:td>
<db:para>The media player is available to use.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Busy</db:para>
</db:td>
<db:td>
<db:para>The media player is usually available, but some other process is utilizing the hardware necessary to play media.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Unavailable</db:para>
</db:td>
<db:td>
<db:para>There are no supported media playback facilities.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ResourceMissing</db:para>
</db:td>
<db:td>
<db:para>There is one or more resources missing, so the media player cannot be used. It may be possible to try again at a later time.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="bufferProgress-prop">
<db:title>[read-only] bufferProgress : real</db:title>
<db:para>This property holds how much of the data buffer is currently filled, from <db:code>0.0</db:code> (empty) to <db:code>1.0</db:code> (full).</db:para>
<db:para>Playback can start or resume only when the buffer is entirely filled, in which case the status is <db:code>MediaPlayer.Buffered</db:code> or <db:code>MediaPlayer.Buffering</db:code>. A value lower than <db:code>1.0</db:code> implies that the status is <db:code>MediaPlayer.Stalled</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#status-prop">status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="duration-prop">
<db:title>[read-only] duration : int</db:title>
<db:para>This property holds the duration of the media in milliseconds.</db:para>
<db:para>If the media doesn't have a fixed duration (a live stream for example) this will be 0.</db:para>
</db:section>
<db:section xml:id="error-prop">
<db:title>[read-only] error : enumeration</db:title>
<db:para>This property holds the error state of the audio. It can be one of:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Value</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>NoError</db:para>
</db:td>
<db:td>
<db:para>There is no current error.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ResourceError</db:para>
</db:td>
<db:td>
<db:para>The audio cannot be played due to a problem allocating resources.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>FormatError</db:para>
</db:td>
<db:td>
<db:para>The audio format is not supported.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>NetworkError</db:para>
</db:td>
<db:td>
<db:para>The audio cannot be played due to network issues.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AccessDenied</db:para>
</db:td>
<db:td>
<db:para>The audio cannot be played due to insufficient permissions.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ServiceMissing</db:para>
</db:td>
<db:td>
<db:para>The audio cannot be played because the media service could not be instantiated.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="errorString-prop">
<db:title>[read-only] errorString : string</db:title>
<db:para>This property holds a string describing the current error condition in more detail.</db:para>
</db:section>
<db:section xml:id="hasAudio-prop">
<db:title>[read-only] hasAudio : bool</db:title>
<db:para>This property holds whether the media contains audio.</db:para>
</db:section>
<db:section xml:id="hasVideo-prop">
<db:title>[read-only] hasVideo : bool</db:title>
<db:para>This property holds whether the media contains video.</db:para>
</db:section>
<db:section xml:id="loops-prop">
<db:title>loops : int</db:title>
<db:para>This property holds the number of times the media is played. A value of <db:code>0</db:code> or <db:code>1</db:code> means the media will be played only once; set to <db:code>MediaPlayer.Infinite</db:code> to enable infinite looping.</db:para>
<db:para>The value can be changed while the media is playing, in which case it will update the remaining loops to the new value.</db:para>
<db:para>The default is <db:code>1</db:code>.</db:para>
</db:section>
<db:section xml:id="mediaObject-prop">
<db:title>[read-only] mediaObject : variant</db:title>
<db:para>This property holds the native media object.</db:para>
<db:para>It can be used to get a pointer to a <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> object in order to integrate with C++ code.</db:para>
<db:programlisting language="cpp">QObject *qmlMediaPlayer; // The QML MediaPlayer object
QMediaPlayer *player = qvariant_cast&lt;QMediaPlayer *&gt;(qmlMediaPlayer-&gt;property(&quot;mediaObject&quot;));
</db:programlisting>
<db:note>
<db:para>This property is not accessible from QML.</db:para>
</db:note>
</db:section>
<db:section xml:id="metaData-prop">
<db:title>metaData group</db:title>
<db:bridgehead renderas="sect2" xml:id="metaData.albumArtist-prop">metaData.albumArtist : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.albumTitle-prop">metaData.albumTitle : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.audioBitRate-prop">metaData.audioBitRate : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.audioCodec-prop">metaData.audioCodec : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.author-prop">metaData.author : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.averageLevel-prop">metaData.averageLevel : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.category-prop">metaData.category : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.channelCount-prop">metaData.channelCount : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.chapterNumber-prop">metaData.chapterNumber : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.comment-prop">metaData.comment : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.composer-prop">metaData.composer : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.conductor-prop">metaData.conductor : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.contributingArtist-prop">metaData.contributingArtist : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.copyright-prop">metaData.copyright : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.coverArtUrlLarge-prop">metaData.coverArtUrlLarge : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.coverArtUrlSmall-prop">metaData.coverArtUrlSmall : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.date-prop">metaData.date : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.description-prop">metaData.description : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.director-prop">metaData.director : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.genre-prop">metaData.genre : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.keywords-prop">metaData.keywords : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.language-prop">metaData.language : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.leadPerformer-prop">metaData.leadPerformer : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.lyrics-prop">metaData.lyrics : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.mediaType-prop">metaData.mediaType : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.mood-prop">metaData.mood : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.parentalRating-prop">metaData.parentalRating : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.peakValue-prop">metaData.peakValue : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.pixelAspectRatio-prop">metaData.pixelAspectRatio : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.posterUrl-prop">metaData.posterUrl : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.publisher-prop">metaData.publisher : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.ratingOrganization-prop">metaData.ratingOrganization : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.resolution-prop">metaData.resolution : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.sampleRate-prop">metaData.sampleRate : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.size-prop">metaData.size : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.subTitle-prop">metaData.subTitle : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.title-prop">metaData.title : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.trackCount-prop">metaData.trackCount : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.trackNumber-prop">metaData.trackNumber : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.userRating-prop">metaData.userRating : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.videoBitRate-prop">metaData.videoBitRate : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.videoCodec-prop">metaData.videoCodec : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.videoFrameRate-prop">metaData.videoFrameRate : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.writer-prop">metaData.writer : variant</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metaData.year-prop">metaData.year : variant</db:bridgehead>
<db:para>These properties hold the meta data for the current media.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>metaData.title</db:code> - the title of the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.subTitle</db:code> - the sub-title of the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.author</db:code> - the author of the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.comment</db:code> - a user comment about the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.description</db:code> - a description of the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.category</db:code> - the category of the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.genre</db:code> - the genre of the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.year</db:code> - the year of release of the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.date</db:code> - the date of the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.userRating</db:code> - a user rating of the media in the range of 0 to 100.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.keywords</db:code> - a list of keywords describing the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.language</db:code> - the language of the media, as an ISO 639-2 code.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.publisher</db:code> - the publisher of the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.copyright</db:code> - the media's copyright notice.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.parentalRating</db:code> - the parental rating of the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.ratingOrganization</db:code> - the name of the rating organization responsible for the parental rating of the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.size</db:code> - the size of the media in bytes.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.mediaType</db:code> - the type of the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.audioBitRate</db:code> - the bit rate of the media's audio stream in bits per second.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.audioCodec</db:code> - the encoding of the media audio stream.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.averageLevel</db:code> - the average volume level of the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.channelCount</db:code> - the number of channels in the media's audio stream.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.peakValue</db:code> - the peak volume of media's audio stream.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.sampleRate</db:code> - the sample rate of the media's audio stream in hertz.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.albumTitle</db:code> - the title of the album the media belongs to.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.albumArtist</db:code> - the name of the principal artist of the album the media belongs to.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.contributingArtist</db:code> - the names of artists contributing to the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.composer</db:code> - the composer of the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.conductor</db:code> - the conductor of the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.lyrics</db:code> - the lyrics to the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.mood</db:code> - the mood of the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.trackNumber</db:code> - the track number of the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.trackCount</db:code> - the number of tracks on the album containing the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.coverArtUrlSmall</db:code> - the URL of a small cover art image.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.coverArtUrlLarge</db:code> - the URL of a large cover art image.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.resolution</db:code> - the dimension of an image or video.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.pixelAspectRatio</db:code> - the pixel aspect ratio of an image or video.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.videoFrameRate</db:code> - the frame rate of the media's video stream.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.videoBitRate</db:code> - the bit rate of the media's video stream in bits per second.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.videoCodec</db:code> - the encoding of the media's video stream.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.posterUrl</db:code> - the URL of a poster image.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.chapterNumber</db:code> - the chapter number of the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.director</db:code> - the director of the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.leadPerformer</db:code> - the lead performer in the media.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>metaData.writer</db:code> - the writer of the media.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="muted-prop">
<db:title>muted : bool</db:title>
<db:para>This property holds whether the audio output is muted.</db:para>
<db:para>Defaults to false.</db:para>
</db:section>
<db:section xml:id="playbackRate-prop">
<db:title>playbackRate : real</db:title>
<db:para>This property holds the rate at which audio is played at as a multiple of the normal rate.</db:para>
<db:para>Defaults to 1.0.</db:para>
</db:section>
<db:section xml:id="playbackState-prop">
<db:title>[read-only] playbackState : enumeration</db:title>
<db:para>This property holds the state of media playback. It can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>PlayingState - the media is currently playing.</db:para>
</db:listitem>
<db:listitem>
<db:para>PausedState - playback of the media has been suspended.</db:para>
</db:listitem>
<db:listitem>
<db:para>StoppedState - playback of the media is yet to begin.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="playlist-prop">
<db:title>[since 5.6] playlist : Playlist</db:title>
<db:para>This property holds the playlist used by the media player.</db:para>
<db:para>Setting the playlist property resets the <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#source-prop">source</db:link> to an empty string.</db:para>
<db:para>This property was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="position-prop">
<db:title>[read-only] position : int</db:title>
<db:para>This property holds the current playback position in milliseconds.</db:para>
<db:para>To change this position, use the <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#seek-method">seek</db:link>() method.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#seek-method">seek</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="seekable-prop">
<db:title>[read-only] seekable : bool</db:title>
<db:para>This property holds whether position of the audio can be changed.</db:para>
<db:para>If true, calling the <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#seek-method">seek</db:link>() method will cause playback to seek to the new position.</db:para>
</db:section>
<db:section xml:id="source-prop">
<db:title>source : url</db:title>
<db:para>This property holds the source URL of the media.</db:para>
<db:para>Setting the source property clears the current <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#playlist-prop">playlist</db:link>, if any.</db:para>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : enumeration</db:title>
<db:para>This property holds the status of media loading. It can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>NoMedia - no media has been set.</db:para>
</db:listitem>
<db:listitem>
<db:para>Loading - the media is currently being loaded.</db:para>
</db:listitem>
<db:listitem>
<db:para>Loaded - the media has been loaded.</db:para>
</db:listitem>
<db:listitem>
<db:para>Buffering - the media is buffering data.</db:para>
</db:listitem>
<db:listitem>
<db:para>Stalled - playback has been interrupted while the media is buffering data.</db:para>
</db:listitem>
<db:listitem>
<db:para>Buffered - the media has buffered data.</db:para>
</db:listitem>
<db:listitem>
<db:para>EndOfMedia - the media has played to the end.</db:para>
</db:listitem>
<db:listitem>
<db:para>InvalidMedia - the media cannot be played.</db:para>
</db:listitem>
<db:listitem>
<db:para>UnknownStatus - the status of the media is unknown.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="volume-prop">
<db:title>volume : real</db:title>
<db:para>This property holds the volume of the audio output, from 0.0 (silent) to 1.0 (maximum volume).</db:para>
<db:para>Defaults to 1.0.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="error-signal">
<db:title>error(<db:emphasis>error</db:emphasis>, <db:emphasis>errorString</db:emphasis>)</db:title>
<db:para>This signal is emitted when an <db:link xlink:href="qmediaplayer.xml#Error-enum">error</db:link> has occurred. The <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#errorString-prop">errorString</db:link> parameter may contain more detailed information about the error.</db:para>
<db:para>The corresponding handler is <db:code>onError</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onError</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="paused-signal">
<db:title>paused()</db:title>
<db:para>This signal is emitted when playback is paused.</db:para>
<db:para>The corresponding handler is <db:code>onPaused</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onPaused</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="playbackStateChanged-signal">
<db:title>playbackStateChanged()</db:title>
<db:para>This signal is emitted when the <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#playbackState-prop">playbackState</db:link> property is altered.</db:para>
<db:para>The corresponding handler is <db:code>onPlaybackStateChanged</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onPlaybackStateChanged</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="playing-signal">
<db:title>playing()</db:title>
<db:para>This signal is emitted when playback is started or resumed.</db:para>
<db:para>The corresponding handler is <db:code>onPlaying</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onPlaying</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="stopped-signal">
<db:title>stopped()</db:title>
<db:para>This signal is emitted when playback is stopped.</db:para>
<db:para>The corresponding handler is <db:code>onStopped</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onStopped</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="pause-method">
<db:title>pause()</db:title>
<db:para>Pauses playback of the media.</db:para>
<db:para>Sets the <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#playbackState-prop">playbackState</db:link> property to PausedState.</db:para>
</db:section>
<db:section xml:id="play-method">
<db:title>play()</db:title>
<db:para>Starts playback of the media.</db:para>
<db:para>Sets the <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#playbackState-prop">playbackState</db:link> property to PlayingState.</db:para>
</db:section>
<db:section xml:id="seek-method">
<db:title>seek(<db:emphasis>offset</db:emphasis>)</db:title>
<db:para>If the <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#seekable-prop">seekable</db:link> property is true, seeks the current playback position to <db:code role="parameter">offset</db:code>.</db:para>
<db:para>Seeking may be asynchronous, so the <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#position-prop">position</db:link> property may not be updated immediately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#seekable-prop">seekable</db:link></db:member>
<db:member><db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#position-prop">position</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stop-method">
<db:title>stop()</db:title>
<db:para>Stops playback of the media.</db:para>
<db:para>Sets the <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#playbackState-prop">playbackState</db:link> property to StoppedState.</db:para>
</db:section>
<db:section xml:id="supportedAudioRoles-method">
<db:title>[since 5.6] list&lt;int&gt; supportedAudioRoles()</db:title>
<db:para>Returns a list of supported audio roles.</db:para>
<db:para>If setting the audio role is not supported, an empty list is returned.</db:para>
<db:para>This method was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtmultimedia-mediaplayer.xml#audioRole-prop">audioRole</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
