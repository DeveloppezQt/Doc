<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Creating QDoc Configuration Files</db:title>
<db:productname>QDoc</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>QDoc Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qdoc-guide-clang.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Installing Clang for QDoc"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qdoc-guide-writing.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Writing Documentation"/></db:extendedlink>
<db:abstract>
<db:para>QDoc Manual.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>To generate documentation, QDoc uses configuration files, with the <db:code>qdocconf</db:code> extension, to store configuration settings.</db:para>
<db:para>The <db:link xlink:href="21-0-qdoc-configuration.xml">The QDoc Configuration File</db:link> article covers the various configuration variables in greater detail.</db:para>
<db:section xml:id="qdoc-configuration-files">
<db:title>QDoc Configuration Files</db:title>
<db:para>QDoc's configuration settings can reside in a single <db:emphasis>qdocconf</db:emphasis> file, but can also be in other qdocconf files. The <db:code>include(&lt;filepath&gt;)</db:code> command allows configuration files to include other configuration files.</db:para>
<db:para>QDoc has two outputs, HTML documentation and documentation in DITA XML format. The main distinction between the two outputs is that HTML documentation needs to have its HTML styling information in the configuration files. DITA XML documentation does not, and a separate process can style the documentation in DITA at a later time. DITA XML is therefore more flexible in allowing different styles to apply to the same information.</db:para>
<db:para>To run qdoc, the project configuration file is supplied as an argument.</db:para>
<db:programlisting language="cpp">qdoc project.qdocconf
</db:programlisting>
<db:para>The project configuration contains information that qdoc uses to create the documentation.</db:para>
<db:section xml:id="project-information">
<db:title>Project Information</db:title>
<db:para>QDoc uses the <db:code>project</db:code> information to generate the documentation.</db:para>
<db:programlisting language="cpp">project = QDoc Project
description = Sample QDoc project
</db:programlisting>
<db:anchor xml:id="qdoc-input-output-dir"/>
</db:section>
<db:section xml:id="input-and-output-directories">
<db:title>Input and Output Directories</db:title>
<db:para>Specifying the path to the source directories allow QDoc to find sources and generate documentation.</db:para>
<db:programlisting language="cpp" role="bad">sourcedirs = &amp;lt;path to source code&amp;gt;
exampledirs = &amp;lt;path to examples directory&amp;gt;
imagedirs = &amp;lt;path to image directory&amp;gt;

sources.fileextensions = &quot;*.cpp *.qdoc *.mm *.qml&quot;
headers.fileextensions = &quot;*.h *.ch *.h++ *.hh *.hpp *.hxx&quot;
examples.fileextensions = &quot;*.cpp *.h *.js *.xq *.svg *.xml *.ui *.qhp *.qhcp *.qml&quot;
examples.imageextensions = &quot;*.png *.jpeg *.jpg *.gif *.mng&quot;
</db:programlisting>
<db:para>QDoc will process headers and sources from the ones specified in the <db:code>fileextensions</db:code> variable.</db:para>
<db:para>Likewise, QDoc needs the path to the output directory. The <db:code>outputformats</db:code> variable determines the type of documentation. These variables should be in separate configuration files to modularize the documentation build.</db:para>
<db:programlisting language="cpp" role="bad">outputdir  =    $SAMPLE_PROJECT/doc/html
outputformats = HTML
</db:programlisting>
<db:para>QDoc can resolve the paths relative to the qdocconf file as well as environment variables.</db:para>
<db:note>
<db:para>During each QDoc run, the output directory is deleted.</db:para>
</db:note>
</db:section>
<db:section xml:id="extra-files">
<db:title>Extra Files</db:title>
<db:para>QDoc will output generated documentation into the directory specified in the <db:link xlink:href="qdoc-guide-conf.xml#input-and-output-directories">output</db:link> directory. It is also possible to specify extra files that QDoc should export.</db:para>
<db:programlisting language="cpp" role="bad">HTML.extraimages = extraImage.png \
                   extraImage2.png
</db:programlisting>
<db:para>The <db:code>extraImage.png</db:code> and the <db:code>extraImage2.png</db:code> files will be copied to the HTML output directory.</db:para>
</db:section>
<db:section xml:id="qt-help-framework-configuration">
<db:title>Qt Help Framework Configuration</db:title>
<db:para>QDoc will also export a <db:emphasis>Qt Help Project</db:emphasis> file, in a <db:code>qhp</db:code> file. The qhp file is then used by the <db:code>qhelpgenerator</db:code> to package the documentation into a <db:code>qch</db:code> file. Qt Creator and Qt Assistant reads the qch file to display the documentation.</db:para>
<db:para>The <db:link xlink:href="22-creating-help-project-files.xml">Creating Help Project Files</db:link> article covers the configuration options.</db:para>
</db:section>
<db:section xml:id="html-configuration">
<db:title>HTML Configuration</db:title>
<db:para>QDoc has an HTML generator that will export a set of documentation into HTML files using various configuration settings. QDoc will place the generated documentation into the directory specified by the <db:code>outputdir</db:code> variable.</db:para>
<db:programlisting language="cpp" role="bad">outputformats = HTML
outputdir =  &amp;lt;path to output directory&amp;gt;
</db:programlisting>
<db:para>QDoc needs to know where the styles and templates for generating HTML are located. Typically, the templates directory contains a <db:code>scripts</db:code>, <db:code>images</db:code>, and a <db:code>style</db:code> directory, containing scripts and CSS files.</db:para>
<db:para>The main configuration variables are:</db:para>
<db:programlisting language="cpp" role="bad">HTML.postheader
HTML.postpostheader
HTML.postheader
HTML.footer

HTML.headerstyles
HTML.stylesheets = template/style/style.css \
                   template/style/style1.css

HTML.scripts = template/scripts/script.js
</db:programlisting>
<db:para>The <db:code>HTML.headerstyles</db:code> variable inserts the style information into the HTML file and the <db:code>HTML.stylesheets</db:code> specifies which files QDoc should copy into the output directory. As well, QDoc will embed the string in the <db:code>postheader</db:code>, <db:code>footer</db:code>, and related variables into each HTML file.</db:para>
<db:para>The <db:link xlink:href="24-qdoc-configuration-htmlvariables.xml">Format-specific Configuration Variables</db:link> article outlines the usage of each variable.</db:para>
</db:section>
<db:section xml:id="qt-index-reference">
<db:title>Qt Index Reference</db:title>
<db:para>Documentation projects can link to Qt APIs and other articles by specifying the path to the <db:code>qt.index</db:code> file. When qdoc generates the Qt Reference Documentation, it will also generate an index file, containing the URLs to the articles. Other projects can use the links in the index file so that they can link to other articles and API documentation within Qt.</db:para>
<db:programlisting language="cpp" role="bad">indexes = $QT_INSTALL_DOCS/html/qt.index $OTHER_PROJECT/html/qt.index
</db:programlisting>
<db:para>It is possible to specify multiple index files from several projects.</db:para>
</db:section>
</db:section>
<db:section xml:id="macros-and-other-configurations">
<db:title>Macros and Other Configurations</db:title>
<db:para>Macros for substituting HTML characters exist and are helpful for generating specific HTML-valid characters.</db:para>
<db:programlisting language="cpp" role="bad">macro.pi.HTML         = &quot;&amp;amp;Pi;&quot;
</db:programlisting>
<db:para>The snippet code will replace any instances of <db:code>\\pi</db:code> with <db:code>&amp;Pi</db:code>; in the HTML file, which will appear as the Greek &#928; symbol when viewed in browsers.</db:para>
<db:section xml:id="qml-additions">
<db:title>QML Additions</db:title>
<db:para>QDoc is able to parse QML files for QDoc comments. QDoc will parse files with the QML extension, <db:code>.qml</db:code>, if the extension type is included in the <db:link xlink:href="qdoc-guide-conf.xml#input-and-output-directories">fileextensions</db:link> variable.</db:para>
<db:para>Also, the generated HTML files can have a prefix and a suffix following the QML module name, specified in the QDoc configuration file.</db:para>
<db:programlisting language="cpp" role="bad">outputprefixes = QML
outputprefixes.QML = uicomponents-
outputsuffixes = QML
outputsuffixes.QML = -tp
</db:programlisting>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#outputprefixes-variable">outputprefixes</db:link>, <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#outputsuffixes-variable">outputsuffixes</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
