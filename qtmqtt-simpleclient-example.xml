<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Simple MQTT Client</db:title>
<db:productname>QtMqtt</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt MQTT Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Creating a minimalistic telemetry application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/simpleclient.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Simple MQTT Client</db:emphasis> demonstrates how to create a minimalistic client application.</db:para>
<db:para>To use the application, you first specify a broker, such as <db:emphasis>test.mosquitto.org</db:emphasis> or <db:emphasis>broker.hivemq.com</db:emphasis> and the port number 1883, and connect to it. You can then subscribe to a topic and send a message, which you will also receive.</db:para>
<db:note>
<db:para>Port number 1883 is not encrypted, and therefore it is suitable only for development and testing purposes. In production, always use encrypted connections.</db:para>
</db:note>
<db:section xml:id="creating-a-client">
<db:title>Creating a Client</db:title>
<db:para>First, we use the QMqttClient class to create an MQTT client. The class provides properties for setting a unique client ID as well as the broker host name and port to connect to:</db:para>
<db:programlisting language="cpp">    m_client = new QMqttClient(this);
    m_client-&amp;gt;setHostname(ui-&amp;gt;lineEditHost-&amp;gt;text());
    m_client-&amp;gt;setPort(static_cast&amp;lt;quint16&amp;gt;(ui-&amp;gt;spinBoxPort-&amp;gt;value()));
</db:programlisting>
<db:para>We do not set the client ID, and therefore it will be automatically generated for us.</db:para>
<db:para>Next, we connect to QMqttClient::messageReceived() to receive all messages sent to the broker:</db:para>
<db:programlisting language="cpp">    connect(m_client, &amp;amp;QMqttClient::messageReceived, this, [this](const QByteArray &amp;amp;message, const QMqttTopicName &amp;amp;topic) {
        const QString content = QDateTime::currentDateTime().toString()
                    + &quot; Received Topic: &quot;_L1
                    + topic.name()
                    + &quot; Message: &quot;_L1
                    + message
                    + u'\n';
        ui-&amp;gt;editLog-&amp;gt;insertPlainText(content);
    });
</db:programlisting>
<db:para>When users subscribe to topics in the client, we call QMqttClient::subscribe() on the specified topic:</db:para>
<db:programlisting language="cpp">void MainWindow::on_buttonSubscribe_clicked()
{
    auto subscription = m_client-&amp;gt;subscribe(ui-&amp;gt;lineEditTopic-&amp;gt;text());
    if (!subscription) {
        QMessageBox::critical(this, u&quot;Error&quot;_s,
                              u&quot;Could not subscribe. Is there a valid connection?&quot;_s);
        return;
    }
</db:programlisting>
<db:para>In this example, we subscribe to all topics. For more information about how to receive messages on particular topics, see the <db:link xlink:href="qtmqtt-subscriptions-example.xml">MQTT Subscriptions</db:link> example.</db:para>
<db:para>For an example of how to use the QMqttClient class in a Qt Quick application, see <db:link xlink:href="qtmqtt-quicksubscription-example.xml">Qt Quick Subscription</db:link>.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="simpleclient/CMakeLists.txt">simpleclient/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="simpleclient/main.cpp">simpleclient/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="simpleclient/mainwindow.cpp">simpleclient/mainwindow.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="simpleclient/mainwindow.h">simpleclient/mainwindow.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="simpleclient/mainwindow.ui">simpleclient/mainwindow.ui</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="simpleclient/simpleclient.pro">simpleclient/simpleclient.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
