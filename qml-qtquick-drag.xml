<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Drag QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>For specifying drag and drop events for moved Items.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick 2.14</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Drag is part of <db:simplelist><db:member>qtquick-input</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Using the Drag attached property, any Item can be made a source of drag and drop events within a scene.</db:para>
<db:para>When a drag is <db:link xlink:href="qml-qtquick-drag.xml#active-attached-prop">active</db:link> on an item, any change in that item's position will generate a drag event that will be sent to any <db:link xlink:href="qml-qtquick-droparea.xml">DropArea</db:link> that intersects with the new position of the item. Other items which implement drag and drop event handlers can also receive these events.</db:para>
<db:para>The following snippet shows how an item can be dragged with a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>. However, dragging is not limited to mouse drags; anything that can move an item can generate drag events, including touch events, animations and bindings.</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Item {
    width: 200; height: 200

    DropArea {
        x: 75; y: 75
        width: 50; height: 50

        Rectangle {
            anchors.fill: parent
            color: &quot;green&quot;

            visible: parent.containsDrag
        }
    }

    Rectangle {
        x: 10; y: 10
        width: 20; height: 20
        color: &quot;red&quot;

        Drag.active: dragArea.drag.active
        Drag.hotSpot.x: 10
        Drag.hotSpot.y: 10

        MouseArea {
            id: dragArea
            anchors.fill: parent

            drag.target: parent
        }
    }
}
</db:programlisting>
<db:para>A drag can be terminated either by canceling it with Drag.<db:link xlink:href="qml-qtquick-drag.xml#cancel-method">cancel</db:link>() or setting Drag.active to false, or it can be terminated with a drop event by calling Drag.<db:link xlink:href="qml-qtquick-drag.xml#drop-method">drop</db:link>(). If the drop event is accepted, Drag.<db:link xlink:href="qml-qtquick-drag.xml#drop-method">drop</db:link>() will return the <db:link xlink:href="qml-qtquick-drag.xml#supportedActions-attached-prop">drop action</db:link> chosen by the recipient of the event, otherwise it will return Qt.IgnoreAction.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-draganddrop-example.xml">Qt Quick Examples - Drag and Drop</db:link></db:member>
<db:member><db:link xlink:href="qtquick-externaldraganddrop-example.xml">Qt Quick Examples - externaldraganddrop</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="attached-property-documentation">
<db:title>Attached Property Documentation</db:title>
<db:section xml:id="active-attached-prop">
<db:title>Drag.active : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>Drag.active</db:varname>
<db:modifier>attached</db:modifier>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether a drag event sequence is currently active.</db:para>
<db:para>Binding this property to the active property of <db:link xlink:href="qml-qtquick-mousearea.xml#drag-prop">MouseArea::drag</db:link> will cause <db:link xlink:href="qml-qtquick-drag.xml#startDrag-method">startDrag</db:link> to be called when the user starts dragging.</db:para>
<db:para>Setting this property to true will also send a QDragEnter event to the scene with the item's current position. Setting it to false will send a QDragLeave event.</db:para>
<db:para>While a drag is active any change in an item's position will send a QDragMove event with item's new position to the scene.</db:para>
</db:section>
<db:section xml:id="dragType-attached-prop">
<db:title>[since 5.2] Drag.dragType : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>Drag.dragType</db:varname>
<db:modifier>attached</db:modifier>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property indicates whether to automatically start drags, do nothing, or to use backwards compatible internal drags. The default is to use backwards compatible internal drags.</db:para>
<db:para>A drag can also be started manually using <db:link xlink:href="qml-qtquick-drag.xml#startDrag-method">startDrag</db:link>.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Drag.None - do not start drags automatically</db:para>
</db:listitem>
<db:listitem>
<db:para>Drag.Automatic - start drags automatically</db:para>
</db:listitem>
<db:listitem>
<db:para>Drag.Internal (default) - start backwards compatible drags automatically</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When using <db:code>Drag.Automatic</db:code> you should also define <db:link xlink:href="qml-qtquick-drag.xml#mimeData-attached-prop">mimeData</db:link> and bind the <db:link xlink:href="qml-qtquick-drag.xml#active-attached-prop">active</db:link> property to the active property of <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> : <db:link xlink:href="qml-qtquick-mousearea.xml#drag.active-prop">MouseArea::drag.active</db:link></db:para>
<db:para>This property was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="hotSpot-attached-prop">
<db:title>Drag.hotSpot : QPointF</db:title>
<db:fieldsynopsis>
<db:type>QPointF</db:type>
<db:varname>Drag.hotSpot</db:varname>
<db:modifier>attached</db:modifier>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the drag position relative to the top left of the item.</db:para>
<db:para>By default this is (0, 0).</db:para>
<db:para>Changes to hotSpot trigger a new drag move with the updated position.</db:para>
</db:section>
<db:section xml:id="imageSource-attached-prop">
<db:title>[since 5.8] Drag.imageSource : QUrl</db:title>
<db:fieldsynopsis>
<db:type>QUrl</db:type>
<db:varname>Drag.imageSource</db:varname>
<db:modifier>attached</db:modifier>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the URL of the image which will be used to represent the data during the drag and drop operation. Changing this property after the drag operation has started will have no effect.</db:para>
<db:para>The example below uses an item's contents as a drag image:</db:para>
<db:programlisting language="qml">import QtQuick 2.8

Item {
    width: 200; height: 200

    Rectangle {
        anchors.centerIn: parent
        width: text.implicitWidth + 20; height: text.implicitHeight + 10
        color: &quot;green&quot;
        radius: 5

        Drag.active: dragArea.drag.active
        Drag.dragType: Drag.Automatic
        Drag.supportedActions: Qt.CopyAction
        Drag.mimeData: {
            &quot;text/plain&quot;: &quot;Copied text&quot;
        }

        Text {
            id: text
            anchors.centerIn: parent
            text: &quot;Drag me&quot;
        }

        MouseArea {
            id: dragArea
            anchors.fill: parent

            drag.target: parent
            onPressed: parent.grabToImage(function(result) {
                parent.Drag.imageSource = result.url
            })
        }
    }
}
</db:programlisting>
<db:para>This property was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#grabToImage-method">Item::grabToImage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keys-attached-prop">
<db:title>Drag.keys : stringlist</db:title>
<db:fieldsynopsis>
<db:type>stringlist</db:type>
<db:varname>Drag.keys</db:varname>
<db:modifier>attached</db:modifier>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds a list of keys that can be used by a <db:link xlink:href="qml-qtquick-droparea.xml">DropArea</db:link> to filter drag events.</db:para>
<db:para>Changing the keys while a drag is active will reset the sequence of drag events by sending a drag leave event followed by a drag enter event with the new source.</db:para>
</db:section>
<db:section xml:id="mimeData-attached-prop">
<db:title>[since 5.2] Drag.mimeData : stringlist</db:title>
<db:fieldsynopsis>
<db:type>stringlist</db:type>
<db:varname>Drag.mimeData</db:varname>
<db:modifier>attached</db:modifier>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds a map of mimeData that is used during <db:link xlink:href="qml-qtquick-drag.xml#startDrag-method">startDrag</db:link>.</db:para>
<db:para>This property was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="proposedAction-attached-prop">
<db:title>Drag.proposedAction : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>Drag.proposedAction</db:varname>
<db:modifier>attached</db:modifier>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds an action that is recommended by the drag source as a return value from Drag.<db:link xlink:href="qml-qtquick-drag.xml#drop-method">drop</db:link>().</db:para>
<db:para>Changes to proposedAction will trigger a move event with the updated proposal.</db:para>
</db:section>
<db:section xml:id="source-attached-prop">
<db:title>Drag.source : Object</db:title>
<db:fieldsynopsis>
<db:type>Object</db:type>
<db:varname>Drag.source</db:varname>
<db:modifier>attached</db:modifier>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds an object that is identified to recipients of drag events as the source of the events. By default this is the item that the Drag property is attached to.</db:para>
<db:para>Changing the source while a drag is active will reset the sequence of drag events by sending a drag leave event followed by a drag enter event with the new source.</db:para>
</db:section>
<db:section xml:id="supportedActions-attached-prop">
<db:title>Drag.supportedActions : flags</db:title>
<db:fieldsynopsis>
<db:type>flags</db:type>
<db:varname>Drag.supportedActions</db:varname>
<db:modifier>attached</db:modifier>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds return values of Drag.<db:link xlink:href="qml-qtquick-drag.xml#drop-method">drop</db:link>() supported by the drag source.</db:para>
<db:para>Changing the supportedActions while a drag is active will reset the sequence of drag events by sending a drag leave event followed by a drag enter event with the new source.</db:para>
</db:section>
<db:section xml:id="target-attached-prop">
<db:title>Drag.target : Object</db:title>
<db:fieldsynopsis>
<db:type>Object</db:type>
<db:varname>Drag.target</db:varname>
<db:modifier>attached</db:modifier>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>While a drag is active this property holds the last object to accept an enter event from the dragged item, if the current drag position doesn't intersect any accepting targets it is null.</db:para>
<db:para>When a drag is not active this property holds the object that accepted the drop event that ended the drag, if no object accepted the drop or the drag was canceled the target will then be null.</db:para>
</db:section>
</db:section>
<db:section xml:id="attached-signal-documentation">
<db:title>Attached Signal Documentation</db:title>
<db:section xml:id="dragFinished-signal">
<db:title>dragFinished(DropAction <db:emphasis>dropAction</db:emphasis>)</db:title>
<db:para>This signal is emitted when a drag finishes and the drag was started with the <db:link xlink:href="qml-qtquick-drag.xml#startDrag-method">startDrag</db:link>() method or started automatically using the <db:link xlink:href="qml-qtquick-drag.xml#dragType-attached-prop">dragType</db:link> property.</db:para>
<db:para><db:code role="parameter">dropAction</db:code> holds the action accepted by the target item.</db:para>
<db:para>The corresponding handler is <db:code>onDragFinished</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onDragFinished</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-drag.xml#drop-method">drop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragStarted-signal">
<db:title>dragStarted()</db:title>
<db:para>This signal is emitted when a drag is started with the <db:link xlink:href="qml-qtquick-drag.xml#startDrag-method">startDrag</db:link>() method or when it is started automatically using the <db:link xlink:href="qml-qtquick-drag.xml#dragType-attached-prop">dragType</db:link> property.</db:para>
<db:para>The corresponding handler is <db:code>onDragStarted</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onDragStarted</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="attached-method-documentation">
<db:title>Attached Method Documentation</db:title>
<db:section xml:id="cancel-method">
<db:title>void cancel()</db:title>
<db:para>Ends a drag sequence.</db:para>
</db:section>
<db:section xml:id="drop-method">
<db:title>enumeration drop()</db:title>
<db:para>Ends a drag sequence by sending a drop event to the target item.</db:para>
<db:para>Returns the action accepted by the target item. If the target item or a parent doesn't accept the drop event then Qt.IgnoreAction will be returned.</db:para>
<db:para>The returned drop action may be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.CopyAction Copy the data to the target</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.MoveAction Move the data from the source to the target</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.LinkAction Create a link from the source to the target.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.IgnoreAction Ignore the action (do nothing with the data).</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="start-method">
<db:title>void start(flags <db:emphasis>supportedActions</db:emphasis>)</db:title>
<db:para>Starts sending drag events. Used for starting old-style internal drags. <db:link xlink:href="qml-qtquick-drag.xml#startDrag-method">startDrag</db:link> is the new-style, preferred method of starting drags.</db:para>
<db:para>The optional <db:code role="parameter">supportedActions</db:code> argument can be used to override the <db:link xlink:href="qml-qtquick-drag.xml#supportedActions-attached-prop">supportedActions</db:link> property for the started sequence.</db:para>
</db:section>
<db:section xml:id="startDrag-method">
<db:title>void startDrag(flags <db:emphasis>supportedActions</db:emphasis>)</db:title>
<db:para>Starts sending drag events.</db:para>
<db:para>The optional <db:code role="parameter">supportedActions</db:code> argument can be used to override the <db:link xlink:href="qml-qtquick-drag.xml#supportedActions-attached-prop">supportedActions</db:link> property for the started sequence.</db:para>
</db:section>
</db:section>
</db:article>
