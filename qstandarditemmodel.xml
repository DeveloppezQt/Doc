<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStandardItemModel Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> class provides a generic model for storing custom data.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStandardItemModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractitemmodel.xml" xlink:role="class">QAbstractItemModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStandardItemModel is part of <db:simplelist><db:member>model-view</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> can be used as a repository for standard Qt data types. It is one of the <db:link xlink:href="model-view-programming.xml#model-view-classes">Model/View Classes</db:link> and is part of Qt's <db:link xlink:href="model-view-programming.xml">model/view</db:link> framework.</db:para>
<db:para><db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> provides a classic item-based approach to working with the model. The items in a <db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> are provided by <db:link xlink:href="qstandarditem.xml">QStandardItem</db:link>.</db:para>
<db:para><db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> implements the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> interface, which means that the model can be used to provide data in any view that supports that interface (such as <db:link xlink:href="qlistview.xml">QListView</db:link>, <db:link xlink:href="qtableview.xml">QTableView</db:link> and <db:link xlink:href="qtreeview.xml">QTreeView</db:link>, and your own custom views). For performance and flexibility, you may want to subclass <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> to provide support for different kinds of data repositories. For example, the QDirModel provides a model interface to the underlying file system.</db:para>
<db:para>When you want a list or tree, you typically create an empty <db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> and use <db:link xlink:href="qstandarditemmodel.xml#appendRow">appendRow</db:link>() to add items to the model, and <db:link xlink:href="qstandarditemmodel.xml#item">item</db:link>() to access an item. If your model represents a table, you typically pass the dimensions of the table to the <db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> constructor and use <db:link xlink:href="qstandarditemmodel.xml#setItem">setItem</db:link>() to position items into the table. You can also use <db:link xlink:href="qstandarditemmodel.xml#setRowCount">setRowCount</db:link>() and <db:link xlink:href="qstandarditemmodel.xml#setColumnCount">setColumnCount</db:link>() to alter the dimensions of the model. To insert items, use <db:link xlink:href="qstandarditemmodel.xml#insertRow">insertRow</db:link>() or <db:link xlink:href="qstandarditemmodel.xml#insertColumn">insertColumn</db:link>(), and to remove items, use <db:link xlink:href="qabstractitemmodel.xml#removeRow">removeRow</db:link>() or <db:link xlink:href="qabstractitemmodel.xml#removeColumn">removeColumn</db:link>().</db:para>
<db:para>You can set the header labels of your model with <db:link xlink:href="qstandarditemmodel.xml#setHorizontalHeaderLabels">setHorizontalHeaderLabels</db:link>() and <db:link xlink:href="qstandarditemmodel.xml#setVerticalHeaderLabels">setVerticalHeaderLabels</db:link>().</db:para>
<db:para>You can search for items in the model with <db:link xlink:href="qstandarditemmodel.xml#findItems">findItems</db:link>(), and sort the model by calling <db:link xlink:href="qstandarditemmodel.xml#sort">sort</db:link>().</db:para>
<db:para>Call <db:link xlink:href="qstandarditemmodel.xml#clear">clear</db:link>() to remove all items from the model.</db:para>
<db:para>An example usage of <db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> to create a table:</db:para>
<db:programlisting language="cpp">QStandardItemModel model(4, 4);
for (int row = 0; row &amp;lt; 4; ++row) {
    for (int column = 0; column &amp;lt; 4; ++column) {
        QStandardItem *item = new QStandardItem(QString(&quot;row %0, column %1&quot;).arg(row).arg(column));
        model.setItem(row, column, item);
    }
}
</db:programlisting>
<db:para>An example usage of <db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> to create a tree:</db:para>
<db:programlisting language="cpp">QStandardItemModel model;
QStandardItem *parentItem = model.invisibleRootItem();
for (int i = 0; i &amp;lt; 4; ++i) {
    QStandardItem *item = new QStandardItem(QString(&quot;item %0&quot;).arg(i));
    parentItem-&amp;gt;appendRow(item);
    parentItem = item;
}
</db:programlisting>
<db:para>After setting the model on a view, you typically want to react to user actions, such as an item being clicked. Since a <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link> provides <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link>-based signals and functions, you need a way to obtain the <db:link xlink:href="qstandarditem.xml">QStandardItem</db:link> that corresponds to a given <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link>, and vice versa. <db:link xlink:href="qstandarditemmodel.xml#itemFromIndex">itemFromIndex</db:link>() and <db:link xlink:href="qstandarditemmodel.xml#indexFromItem">indexFromItem</db:link>() provide this mapping. Typical usage of <db:link xlink:href="qstandarditemmodel.xml#itemFromIndex">itemFromIndex</db:link>() includes obtaining the item at the current index in a view, and obtaining the item that corresponds to an index carried by a <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link> signal, such as <db:link xlink:href="qabstractitemview.xml#clicked">QAbstractItemView::clicked</db:link>(). First you connect the view's signal to a slot in your class:</db:para>
<db:programlisting language="cpp">QTreeView *treeView = new QTreeView(this);
treeView-&amp;gt;setModel(myStandardItemModel);
connect(treeView, SIGNAL(clicked(QModelIndex)),
        this, SLOT(clicked(QModelIndex)));
</db:programlisting>
<db:para>When you receive the signal, you call <db:link xlink:href="qstandarditemmodel.xml#itemFromIndex">itemFromIndex</db:link>() on the given model index to get a pointer to the item:</db:para>
<db:programlisting language="cpp">void MyWidget::clicked(const QModelIndex &amp;amp;index)
{
    QStandardItem *item = myStandardItemModel-&amp;gt;itemFromIndex(index);
    // Do stuff with the item ...
}
</db:programlisting>
<db:para>Conversely, you must obtain the <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> of an item when you want to invoke a model/view function that takes an index as argument. You can obtain the index either by using the model's <db:link xlink:href="qstandarditemmodel.xml#indexFromItem">indexFromItem</db:link>() function, or, equivalently, by calling <db:link xlink:href="qstandarditem.xml#index">QStandardItem::index</db:link>():</db:para>
<db:programlisting language="cpp">treeView-&amp;gt;scrollTo(item-&amp;gt;index());
</db:programlisting>
<db:para>You are, of course, not required to use the item-based approach; you could instead rely entirely on the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> interface when working with the model, or use a combination of the two as appropriate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditem.xml">QStandardItem</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-itemviews-simpletreemodel-example.xml">Simple Tree Model example</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml#item-view-convenience-classes">Item View Convenience Classes</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="sortRole-prop">
<db:title>[since 4.2] sortRole : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>sortRole</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">sortRole</db:synopsisinfo>
<db:synopsisinfo role="setter">setSortRole</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the item role that is used to query the model's data when sorting items</db:para>
<db:para>The default value is <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link>.</db:para>
<db:para>This property was introduced in Qt 4.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">sortRole</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSortRole</db:emphasis>(<db:type>int</db:type> <db:emphasis>role</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#sort">sort</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#sortChildren">QStandardItem::sortChildren</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QStandardItemModel">
<db:title>[explicit] QStandardItemModel::QStandardItemModel(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QStandardItemModel</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItemModel(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new item model with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QStandardItemModel-1">
<db:title>QStandardItemModel::QStandardItemModel(int <db:emphasis>rows</db:emphasis>, int <db:emphasis>columns</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QStandardItemModel</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rows</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>columns</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItemModel(int rows, int columns, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new item model that initially has <db:code role="parameter">rows</db:code> rows and <db:code role="parameter">columns</db:code> columns, and that has the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QStandardItemModel">
<db:title>[virtual] QStandardItemModel::~QStandardItemModel()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QStandardItemModel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QStandardItemModel()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructs the model. The model destroys all its items.</db:para>
</db:section>
<db:section xml:id="appendColumn">
<db:title>[since 4.2] void QStandardItemModel::appendColumn(const QList&lt;QStandardItem *&gt; &amp;<db:emphasis>items</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>appendColumn</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QStandardItem *&gt; &amp;</db:type>
<db:parameter>items</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void appendColumn(const QList&lt;QStandardItem *&gt; &amp;items)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends a column containing <db:code role="parameter">items</db:code>. If necessary, the row count is increased to the size of <db:code role="parameter">items</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#insertColumn">insertColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#appendRow">appendRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="appendRow">
<db:title>[since 4.2] void QStandardItemModel::appendRow(const QList&lt;QStandardItem *&gt; &amp;<db:emphasis>items</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>appendRow</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QStandardItem *&gt; &amp;</db:type>
<db:parameter>items</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void appendRow(const QList&lt;QStandardItem *&gt; &amp;items)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends a row containing <db:code role="parameter">items</db:code>. If necessary, the column count is increased to the size of <db:code role="parameter">items</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#insertRow">insertRow</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#appendColumn">appendColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="appendRow-1">
<db:title>[since 4.2] void QStandardItemModel::appendRow(QStandardItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>appendRow</db:methodname>
<db:methodparam>
<db:type>QStandardItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void appendRow(QStandardItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>When building a list or a tree that has only one column, this function provides a convenient way to append a single new <db:code role="parameter">item</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QStandardItemModel::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all items (including header items) from the model and sets the number of rows and columns to zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#removeColumns">removeColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#removeRows">removeRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearItemData">
<db:title>[since 5.12] bool QStandardItemModel::clearItemData(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>clearItemData</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool clearItemData(const QModelIndex &amp;index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the data stored in all the roles for the given <db:code role="parameter">index</db:code>. Returns <db:code>true</db:code> if <db:code role="parameter">index</db:code> is valid and data was cleared, <db:code>false</db:code> otherwise.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#setData">setData</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnCount">
<db:title>[override virtual] int QStandardItemModel::columnCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>columnCount</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int columnCount(const QModelIndex &amp;parent) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#columnCount" role="function">QAbstractItemModel::columnCount(const QModelIndex &amp;parent) const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#setColumnCount">setColumnCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>[override virtual] QVariant QStandardItemModel::data(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>data</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
<db:initializer>Qt::DisplayRole</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant data(const QModelIndex &amp;index, int role) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#data" role="function">QAbstractItemModel::data(const QModelIndex &amp;index, int role) const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dropMimeData">
<db:title>[override virtual] bool QStandardItemModel::dropMimeData(const QMimeData *<db:emphasis>data</db:emphasis>, Qt::DropAction <db:emphasis>action</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>dropMimeData</db:methodname>
<db:methodparam>
<db:type>const QMimeData *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::DropAction</db:type>
<db:parameter>action</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool dropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#dropMimeData" role="function">QAbstractItemModel::dropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="findItems">
<db:title>[since 4.2] QList&lt;QStandardItem *&gt; QStandardItemModel::findItems(const QString &amp;<db:emphasis>text</db:emphasis>, Qt::MatchFlags <db:emphasis>flags</db:emphasis> = Qt::MatchExactly, int <db:emphasis>column</db:emphasis> = 0) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QStandardItem *&gt;</db:type>
<db:methodname>findItems</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::MatchFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::MatchExactly</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QStandardItem *&gt; findItems(const QString &amp;text, Qt::MatchFlags flags, int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of items that match the given <db:code role="parameter">text</db:code>, using the given <db:code role="parameter">flags</db:code>, in the given <db:code role="parameter">column</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="flags">
<db:title>[override virtual] Qt::ItemFlags QStandardItemModel::flags(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>Qt::ItemFlags</db:type>
<db:methodname>flags</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::ItemFlags flags(const QModelIndex &amp;index) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#flags" role="function">QAbstractItemModel::flags(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="hasChildren">
<db:title>[override virtual] bool QStandardItemModel::hasChildren(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasChildren</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasChildren(const QModelIndex &amp;parent) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#hasChildren" role="function">QAbstractItemModel::hasChildren(const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="headerData">
<db:title>[override virtual] QVariant QStandardItemModel::headerData(int <db:emphasis>section</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>headerData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>section</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Orientation</db:type>
<db:parameter>orientation</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
<db:initializer>Qt::DisplayRole</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant headerData(int section, Qt::Orientation orientation, int role) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#headerData" role="function">QAbstractItemModel::headerData(int section, Qt::Orientation orientation, int role) const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#setHeaderData">setHeaderData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="horizontalHeaderItem">
<db:title>[since 4.2] QStandardItem *QStandardItemModel::horizontalHeaderItem(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStandardItem *</db:type>
<db:methodname>horizontalHeaderItem</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItem * horizontalHeaderItem(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the horizontal header item for <db:code role="parameter">column</db:code> if one has been set; otherwise returns <db:code>nullptr</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#setHorizontalHeaderItem">setHorizontalHeaderItem</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#verticalHeaderItem">verticalHeaderItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="index">
<db:title>[override virtual] QModelIndex QStandardItemModel::index(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>index</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex index(int row, int column, const QModelIndex &amp;parent) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#index" role="function">QAbstractItemModel::index(int row, int column, const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="indexFromItem">
<db:title>[since 4.2] QModelIndex QStandardItemModel::indexFromItem(const QStandardItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>indexFromItem</db:methodname>
<db:methodparam>
<db:type>const QStandardItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex indexFromItem(const QStandardItem *item) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> associated with the given <db:code role="parameter">item</db:code>.</db:para>
<db:para>Use this function when you want to perform an operation that requires the <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> of the item, such as <db:link xlink:href="qabstractitemview.xml#scrollTo">QAbstractItemView::scrollTo</db:link>(). <db:link xlink:href="qstandarditem.xml#index">QStandardItem::index</db:link>() is provided as convenience; it is equivalent to calling this function.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#itemFromIndex">itemFromIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#index">QStandardItem::index</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertColumn">
<db:title>[since 4.2] void QStandardItemModel::insertColumn(int <db:emphasis>column</db:emphasis>, const QList&lt;QStandardItem *&gt; &amp;<db:emphasis>items</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertColumn</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;QStandardItem *&gt; &amp;</db:type>
<db:parameter>items</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertColumn(int column, const QList&lt;QStandardItem *&gt; &amp;items)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a column at <db:code role="parameter">column</db:code> containing <db:code role="parameter">items</db:code>. If necessary, the row count is increased to the size of <db:code role="parameter">items</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#takeColumn">takeColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#appendColumn">appendColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#insertRow">insertRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertColumn-1">
<db:title>bool QStandardItemModel::insertColumn(int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>insertColumn</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool insertColumn(int column, const QModelIndex &amp;parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a single column before the given <db:code role="parameter">column</db:code> in the child items of the <db:code role="parameter">parent</db:code> specified. Returns <db:code>true</db:code> if the column is inserted; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#insertColumns">insertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#insertRow">insertRow</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeColumn">removeColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertColumns">
<db:title>[override virtual] bool QStandardItemModel::insertColumns(int <db:emphasis>column</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>insertColumns</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool insertColumns(int column, int count, const QModelIndex &amp;parent) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#insertColumns" role="function">QAbstractItemModel::insertColumns(int column, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="insertRow">
<db:title>[since 4.2] void QStandardItemModel::insertRow(int <db:emphasis>row</db:emphasis>, const QList&lt;QStandardItem *&gt; &amp;<db:emphasis>items</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertRow</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;QStandardItem *&gt; &amp;</db:type>
<db:parameter>items</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertRow(int row, const QList&lt;QStandardItem *&gt; &amp;items)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a row at <db:code role="parameter">row</db:code> containing <db:code role="parameter">items</db:code>. If necessary, the column count is increased to the size of <db:code role="parameter">items</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#takeRow">takeRow</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#appendRow">appendRow</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#insertColumn">insertColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertRow-1">
<db:title>[since 4.2] void QStandardItemModel::insertRow(int <db:emphasis>row</db:emphasis>, QStandardItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertRow</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStandardItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertRow(int row, QStandardItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Inserts a row at <db:code role="parameter">row</db:code> containing <db:code role="parameter">item</db:code>.</db:para>
<db:para>When building a list or a tree that has only one column, this function provides a convenient way to append a single new item.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="insertRow-2">
<db:title>bool QStandardItemModel::insertRow(int <db:emphasis>row</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>insertRow</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool insertRow(int row, const QModelIndex &amp;parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a single row before the given <db:code role="parameter">row</db:code> in the child items of the <db:code role="parameter">parent</db:code> specified. Returns <db:code>true</db:code> if the row is inserted; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#insertRows">insertRows</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#insertColumn">insertColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeRow">removeRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertRows">
<db:title>[override virtual] bool QStandardItemModel::insertRows(int <db:emphasis>row</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>insertRows</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool insertRows(int row, int count, const QModelIndex &amp;parent) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#insertRows" role="function">QAbstractItemModel::insertRows(int row, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="invisibleRootItem">
<db:title>[since 4.2] QStandardItem *QStandardItemModel::invisibleRootItem() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStandardItem *</db:type>
<db:methodname>invisibleRootItem</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItem * invisibleRootItem() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the model's invisible root item.</db:para>
<db:para>The invisible root item provides access to the model's top-level items through the <db:link xlink:href="qstandarditem.xml">QStandardItem</db:link> API, making it possible to write functions that can treat top-level items and their children in a uniform way; for example, recursive functions involving a tree model.</db:para>
<db:note>
<db:para>Calling <db:link xlink:href="qabstractitemmodel.xml#index">index</db:link>() on the <db:link xlink:href="qstandarditem.xml">QStandardItem</db:link> object retrieved from this function is not valid.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="item">
<db:title>[since 4.2] QStandardItem *QStandardItemModel::item(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis> = 0) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStandardItem *</db:type>
<db:methodname>item</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItem * item(int row, int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item for the given <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> if one has been set; otherwise returns <db:code>nullptr</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#setItem">setItem</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#takeItem">takeItem</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#itemFromIndex">itemFromIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemChanged">
<db:title>[since 4.2] void QStandardItemModel::itemChanged(QStandardItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>itemChanged</db:methodname>
<db:methodparam>
<db:type>QStandardItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void itemChanged(QStandardItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the data of <db:code role="parameter">item</db:code> has changed.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="itemData">
<db:title>[override virtual] QMap&lt;int, QVariant&gt; QStandardItemModel::itemData(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QMap&lt;int, QVariant&gt;</db:type>
<db:methodname>itemData</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMap&lt;int, QVariant&gt; itemData(const QModelIndex &amp;index) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#itemData" role="function">QAbstractItemModel::itemData(const QModelIndex &amp;index) const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#setItemData">setItemData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemFromIndex">
<db:title>[since 4.2] QStandardItem *QStandardItemModel::itemFromIndex(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStandardItem *</db:type>
<db:methodname>itemFromIndex</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItem * itemFromIndex(const QModelIndex &amp;index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the <db:link xlink:href="qstandarditem.xml">QStandardItem</db:link> associated with the given <db:code role="parameter">index</db:code>.</db:para>
<db:para>Calling this function is typically the initial step when processing <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link>-based signals from a view, such as <db:link xlink:href="qabstractitemview.xml#activated">QAbstractItemView::activated</db:link>(). In your slot, you call itemFromIndex(), with the <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> carried by the signal as argument, to obtain a pointer to the corresponding <db:link xlink:href="qstandarditem.xml">QStandardItem</db:link>.</db:para>
<db:para>Note that this function will lazily create an item for the index (using <db:link xlink:href="qstandarditemmodel.xml#itemPrototype">itemPrototype</db:link>()), and set it in the parent item's child table, if no item already exists at that index.</db:para>
<db:para>If <db:code role="parameter">index</db:code> is an invalid index, this function returns <db:code>nullptr</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#indexFromItem">indexFromItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemPrototype">
<db:title>[since 4.2] const QStandardItem *QStandardItemModel::itemPrototype() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QStandardItem *</db:type>
<db:methodname>itemPrototype</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QStandardItem * itemPrototype() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item prototype used by the model. The model uses the item prototype as an item factory when it needs to construct new items on demand (for instance, when a view or item delegate calls <db:link xlink:href="qstandarditemmodel.xml#setData">setData</db:link>()).</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#setItemPrototype">setItemPrototype</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mimeData">
<db:title>[override virtual] QMimeData *QStandardItemModel::mimeData(const QModelIndexList &amp;<db:emphasis>indexes</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QMimeData *</db:type>
<db:methodname>mimeData</db:methodname>
<db:methodparam>
<db:type>const QModelIndexList &amp;</db:type>
<db:parameter>indexes</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMimeData * mimeData(const QModelIndexList &amp;indexes) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#mimeData" role="function">QAbstractItemModel::mimeData(const QModelIndexList &amp;indexes) const</db:link>.</db:para>
</db:section>
<db:section xml:id="mimeTypes">
<db:title>[override virtual] QStringList QStandardItemModel::mimeTypes() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>mimeTypes</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList mimeTypes() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#mimeTypes" role="function">QAbstractItemModel::mimeTypes() const</db:link>.</db:para>
</db:section>
<db:section xml:id="parent">
<db:title>[override virtual] QModelIndex QStandardItemModel::parent(const QModelIndex &amp;<db:emphasis>child</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>parent</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>child</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex parent(const QModelIndex &amp;child) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#parent" role="function">QAbstractItemModel::parent(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="removeColumns">
<db:title>[override virtual] bool QStandardItemModel::removeColumns(int <db:emphasis>column</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>removeColumns</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removeColumns(int column, int count, const QModelIndex &amp;parent) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#removeColumns" role="function">QAbstractItemModel::removeColumns(int column, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="removeRows">
<db:title>[override virtual] bool QStandardItemModel::removeRows(int <db:emphasis>row</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>removeRows</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removeRows(int row, int count, const QModelIndex &amp;parent) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#removeRows" role="function">QAbstractItemModel::removeRows(int row, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="rowCount">
<db:title>[override virtual] int QStandardItemModel::rowCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>rowCount</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int rowCount(const QModelIndex &amp;parent) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#rowCount" role="function">QAbstractItemModel::rowCount(const QModelIndex &amp;parent) const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#setRowCount">setRowCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColumnCount">
<db:title>[since 4.2] void QStandardItemModel::setColumnCount(int <db:emphasis>columns</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setColumnCount</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>columns</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setColumnCount(int columns)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the number of columns in this model to <db:code role="parameter">columns</db:code>. If this is less than <db:link xlink:href="qstandarditemmodel.xml#columnCount">columnCount</db:link>(), the data in the unwanted columns is discarded.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#columnCount">columnCount</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#setRowCount">setRowCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData">
<db:title>[override virtual] bool QStandardItemModel::setData(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::EditRole)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
<db:initializer>Qt::EditRole</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setData(const QModelIndex &amp;index, const QVariant &amp;value, int role) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#setData" role="function">QAbstractItemModel::setData(const QModelIndex &amp;index, const QVariant &amp;value, int role)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHeaderData">
<db:title>[override virtual] bool QStandardItemModel::setHeaderData(int <db:emphasis>section</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::EditRole)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setHeaderData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>section</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Orientation</db:type>
<db:parameter>orientation</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
<db:initializer>Qt::EditRole</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setHeaderData(int section, Qt::Orientation orientation, const QVariant &amp;value, int role) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#setHeaderData" role="function">QAbstractItemModel::setHeaderData(int section, Qt::Orientation orientation, const QVariant &amp;value, int role)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#headerData">headerData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHorizontalHeaderItem">
<db:title>[since 4.2] void QStandardItemModel::setHorizontalHeaderItem(int <db:emphasis>column</db:emphasis>, QStandardItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHorizontalHeaderItem</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStandardItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHorizontalHeaderItem(int column, QStandardItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the horizontal header item for <db:code role="parameter">column</db:code> to <db:code role="parameter">item</db:code>. The model takes ownership of the item. If necessary, the column count is increased to fit the item. The previous header item (if there was one) is deleted.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#horizontalHeaderItem">horizontalHeaderItem</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#setHorizontalHeaderLabels">setHorizontalHeaderLabels</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#setVerticalHeaderItem">setVerticalHeaderItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHorizontalHeaderLabels">
<db:title>[since 4.2] void QStandardItemModel::setHorizontalHeaderLabels(const QStringList &amp;<db:emphasis>labels</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHorizontalHeaderLabels</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>labels</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHorizontalHeaderLabels(const QStringList &amp;labels)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the horizontal header labels using <db:code role="parameter">labels</db:code>. If necessary, the column count is increased to the size of <db:code role="parameter">labels</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#setHorizontalHeaderItem">setHorizontalHeaderItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItem">
<db:title>[since 4.2] void QStandardItemModel::setItem(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, QStandardItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setItem</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStandardItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setItem(int row, int column, QStandardItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item for the given <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> to <db:code role="parameter">item</db:code>. The model takes ownership of the item. If necessary, the row count and column count are increased to fit the item. The previous item at the given location (if there was one) is deleted.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#item">item</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItem-1">
<db:title>void QStandardItemModel::setItem(int <db:emphasis>row</db:emphasis>, QStandardItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setItem</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStandardItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setItem(int row, QStandardItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setItemData">
<db:title>[override virtual] bool QStandardItemModel::setItemData(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, const QMap&lt;int, QVariant&gt; &amp;<db:emphasis>roles</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setItemData</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMap&lt;int, QVariant&gt; &amp;</db:type>
<db:parameter>roles</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setItemData(const QModelIndex &amp;index, const QMap&lt;int, QVariant&gt; &amp;roles) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#setItemData" role="function">QAbstractItemModel::setItemData(const QModelIndex &amp;index, const QMap&lt;int, QVariant&gt; &amp;roles)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#itemData">itemData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemPrototype">
<db:title>[since 4.2] void QStandardItemModel::setItemPrototype(const QStandardItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setItemPrototype</db:methodname>
<db:methodparam>
<db:type>const QStandardItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setItemPrototype(const QStandardItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item prototype for the model to the specified <db:code role="parameter">item</db:code>. The model takes ownership of the prototype.</db:para>
<db:para>The item prototype acts as a <db:link xlink:href="qstandarditem.xml">QStandardItem</db:link> factory, by relying on the <db:link xlink:href="qstandarditem.xml#clone">QStandardItem::clone</db:link>() function. To provide your own prototype, subclass <db:link xlink:href="qstandarditem.xml">QStandardItem</db:link>, reimplement <db:link xlink:href="qstandarditem.xml#clone">QStandardItem::clone</db:link>() and set the prototype to be an instance of your custom class. Whenever <db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> needs to create an item on demand (for instance, when a view or item delegate calls <db:link xlink:href="qstandarditemmodel.xml#setData">setData</db:link>())), the new items will be instances of your custom class.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#itemPrototype">itemPrototype</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditem.xml#clone">QStandardItem::clone</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemRoleNames">
<db:title>void QStandardItemModel::setItemRoleNames(const QHash&lt;int, QByteArray&gt; &amp;<db:emphasis>roleNames</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setItemRoleNames</db:methodname>
<db:methodparam>
<db:type>const QHash&lt;int, QByteArray&gt; &amp;</db:type>
<db:parameter>roleNames</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setItemRoleNames(const QHash&lt;int, QByteArray&gt; &amp;roleNames)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item role names to <db:code role="parameter">roleNames</db:code>.</db:para>
</db:section>
<db:section xml:id="setRowCount">
<db:title>[since 4.2] void QStandardItemModel::setRowCount(int <db:emphasis>rows</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRowCount</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rows</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRowCount(int rows)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the number of rows in this model to <db:code role="parameter">rows</db:code>. If this is less than <db:link xlink:href="qstandarditemmodel.xml#rowCount">rowCount</db:link>(), the data in the unwanted rows is discarded.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#rowCount">rowCount</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#setColumnCount">setColumnCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVerticalHeaderItem">
<db:title>[since 4.2] void QStandardItemModel::setVerticalHeaderItem(int <db:emphasis>row</db:emphasis>, QStandardItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVerticalHeaderItem</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStandardItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVerticalHeaderItem(int row, QStandardItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the vertical header item for <db:code role="parameter">row</db:code> to <db:code role="parameter">item</db:code>. The model takes ownership of the item. If necessary, the row count is increased to fit the item. The previous header item (if there was one) is deleted.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#verticalHeaderItem">verticalHeaderItem</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#setVerticalHeaderLabels">setVerticalHeaderLabels</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#setHorizontalHeaderItem">setHorizontalHeaderItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVerticalHeaderLabels">
<db:title>[since 4.2] void QStandardItemModel::setVerticalHeaderLabels(const QStringList &amp;<db:emphasis>labels</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVerticalHeaderLabels</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>labels</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVerticalHeaderLabels(const QStringList &amp;labels)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the vertical header labels using <db:code role="parameter">labels</db:code>. If necessary, the row count is increased to the size of <db:code role="parameter">labels</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#setVerticalHeaderItem">setVerticalHeaderItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sibling">
<db:title>[override virtual] QModelIndex QStandardItemModel::sibling(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>idx</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>sibling</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>idx</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex sibling(int row, int column, const QModelIndex &amp;idx) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#sibling" role="function">QAbstractItemModel::sibling(int row, int column, const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="sort">
<db:title>[override virtual] void QStandardItemModel::sort(int <db:emphasis>column</db:emphasis>, Qt::SortOrder <db:emphasis>order</db:emphasis> = Qt::AscendingOrder)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>sort</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::SortOrder</db:type>
<db:parameter>order</db:parameter>
<db:initializer>Qt::AscendingOrder</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sort(int column, Qt::SortOrder order) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#sort" role="function">QAbstractItemModel::sort(int column, Qt::SortOrder order)</db:link>.</db:para>
</db:section>
<db:section xml:id="supportedDropActions">
<db:title>[override virtual] Qt::DropActions QStandardItemModel::supportedDropActions() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>Qt::DropActions</db:type>
<db:methodname>supportedDropActions</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::DropActions supportedDropActions() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#supportedDropActions" role="function">QAbstractItemModel::supportedDropActions() const</db:link>.</db:para>
<db:para><db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> supports both copy and move.</db:para>
</db:section>
<db:section xml:id="takeColumn">
<db:title>[since 4.2] QList&lt;QStandardItem *&gt; QStandardItemModel::takeColumn(int <db:emphasis>column</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QList&lt;QStandardItem *&gt;</db:type>
<db:methodname>takeColumn</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QStandardItem *&gt; takeColumn(int column)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the given <db:code role="parameter">column</db:code> without deleting the column items, and returns a list of pointers to the removed items. The model releases ownership of the items. For items in the column that have not been set, the corresponding pointers in the list will be 0.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#takeRow">takeRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeHorizontalHeaderItem">
<db:title>[since 4.2] QStandardItem *QStandardItemModel::takeHorizontalHeaderItem(int <db:emphasis>column</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QStandardItem *</db:type>
<db:methodname>takeHorizontalHeaderItem</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItem * takeHorizontalHeaderItem(int column)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the horizontal header item at <db:code role="parameter">column</db:code> from the header without deleting it, and returns a pointer to the item. The model releases ownership of the item.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#horizontalHeaderItem">horizontalHeaderItem</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#takeVerticalHeaderItem">takeVerticalHeaderItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeItem">
<db:title>[since 4.2] QStandardItem *QStandardItemModel::takeItem(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>QStandardItem *</db:type>
<db:methodname>takeItem</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItem * takeItem(int row, int column)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the item at (<db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>) without deleting it. The model releases ownership of the item.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#item">item</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#takeRow">takeRow</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#takeColumn">takeColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeRow">
<db:title>[since 4.2] QList&lt;QStandardItem *&gt; QStandardItemModel::takeRow(int <db:emphasis>row</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QList&lt;QStandardItem *&gt;</db:type>
<db:methodname>takeRow</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QStandardItem *&gt; takeRow(int row)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the given <db:code role="parameter">row</db:code> without deleting the row items, and returns a list of pointers to the removed items. The model releases ownership of the items. For items in the row that have not been set, the corresponding pointers in the list will be 0.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#takeColumn">takeColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeVerticalHeaderItem">
<db:title>[since 4.2] QStandardItem *QStandardItemModel::takeVerticalHeaderItem(int <db:emphasis>row</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QStandardItem *</db:type>
<db:methodname>takeVerticalHeaderItem</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItem * takeVerticalHeaderItem(int row)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the vertical header item at <db:code role="parameter">row</db:code> from the header without deleting it, and returns a pointer to the item. The model releases ownership of the item.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#verticalHeaderItem">verticalHeaderItem</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#takeHorizontalHeaderItem">takeHorizontalHeaderItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="verticalHeaderItem">
<db:title>[since 4.2] QStandardItem *QStandardItemModel::verticalHeaderItem(int <db:emphasis>row</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStandardItem *</db:type>
<db:methodname>verticalHeaderItem</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItem * verticalHeaderItem(int row) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the vertical header item for row <db:code role="parameter">row</db:code> if one has been set; otherwise returns <db:code>nullptr</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandarditemmodel.xml#setVerticalHeaderItem">setVerticalHeaderItem</db:link>()</db:member>
<db:member><db:link xlink:href="qstandarditemmodel.xml#horizontalHeaderItem">horizontalHeaderItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
