<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAxBindable Class</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaxbindable.xml">QAxBindable</db:link> class provides an interface between a QWidget and an ActiveX client.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAxBindable</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += axserver</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The functions provided by this class allow an ActiveX control to communicate property changes to a client application. Inherit your control class from both QWidget (directly or indirectly) and this class to get access to this class's functions. The <db:link xlink:href="">meta-object compiler</db:link> requires you to inherit from QWidget first.</db:para>
<db:programlisting language="cpp">class MyActiveX : public QWidget, public QAxBindable
{
    Q_OBJECT
    Q_PROPERTY(int value READ value WRITE setValue)

public:
    MyActiveX(QWidget *parent = 0);
    ...

    int value() const;
    void setValue(int);
};
</db:programlisting>
<db:para>When implementing the property write function, use <db:link xlink:href="qaxbindable.xml#requestPropertyChange">requestPropertyChange</db:link>() to get permission from the ActiveX client application to change this property. When the property changes, call <db:link xlink:href="qaxbindable.xml#propertyChanged">propertyChanged</db:link>() to notify the ActiveX client application about the change. If a fatal error occurs in the control, use the static <db:link xlink:href="qaxbindable.xml#reportError">reportError</db:link>() function to notify the client.</db:para>
<db:para>Use the interface returned by <db:link xlink:href="qaxbindable.xml#clientSite">clientSite</db:link>() to call the ActiveX client. To implement additional COM interfaces in your ActiveX control, reimplement <db:link xlink:href="qaxbindable.xml#createAggregate">createAggregate</db:link>() to return a new object of a <db:link xlink:href="qaxaggregated.xml">QAxAggregated</db:link> subclass.</db:para>
<db:para>The ActiveQt <db:link xlink:href="activeqt-activeqt-opengl-example.xml">OpenGL</db:link> example shows how to use <db:link xlink:href="qaxbindable.xml">QAxBindable</db:link> to implement additional COM interfaces.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxaggregated.xml">QAxAggregated</db:link></db:member>
<db:member><db:link xlink:href="qaxfactory.xml">QAxFactory</db:link></db:member>
<db:member><db:link xlink:href="activeqt-index.xml#activeqt-framework">ActiveQt Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QAxBindable">
<db:title>[virtual noexcept] QAxBindable::~QAxBindable()</db:title>
<db:para>Destroys the <db:link xlink:href="qaxbindable.xml">QAxBindable</db:link> object.</db:para>
</db:section>
<db:section xml:id="clientSite">
<db:title>[protected] IUnknown *QAxBindable::clientSite() const</db:title>
<db:para>Returns a pointer to the client site interface for this ActiveX object, or null if no client site has been set.</db:para>
<db:para>Call <db:code>QueryInterface()</db:code> on the returned interface to get the interface you want to call.</db:para>
</db:section>
<db:section xml:id="createAggregate">
<db:title>[virtual] QAxAggregated *QAxBindable::createAggregate()</db:title>
<db:para>Reimplement this function when you want to implement additional COM interfaces in the ActiveX control, or when you want to provide alternative implementations of COM interfaces. Return a new object of a <db:link xlink:href="qaxaggregated.xml">QAxAggregated</db:link> subclass.</db:para>
<db:para>The default implementation returns the null pointer.</db:para>
</db:section>
<db:section xml:id="propertyChanged">
<db:title>[protected] void QAxBindable::propertyChanged(const char *<db:emphasis>property</db:emphasis>)</db:title>
<db:para>Call this function to notify the client that is hosting this ActiveX control that the property <db:code role="parameter">property</db:code> has been changed.</db:para>
<db:para>This function is usually called at the end of the property's write function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbindable.xml#requestPropertyChange">requestPropertyChange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readData">
<db:title>[virtual, since 4.1] bool QAxBindable::readData(QIODevice *<db:emphasis>source</db:emphasis>, const int &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:para>If the COM object supports a MIME type then this function is called to initialize the COM object from the data <db:code role="parameter">source</db:code> in <db:code role="parameter">format</db:code>. You have to open <db:code role="parameter">source</db:code> for reading before you can read from it.</db:para>
<db:para>Returns true to indicate success. If the function returns false, then ActiveQt will process the data by setting the properties through the meta object system.</db:para>
<db:para>If you reimplement this function you also have to implement <db:link xlink:href="qaxbindable.xml#writeData">writeData</db:link>(). The default implementation does nothing and returns false.</db:para>
<db:warning>
<db:para>ActiveX controls embedded in HTML can use either the <db:code>type</db:code> and <db:code>data</db:code> attribute of the <db:code>object</db:code> tag to read data, or use a list of <db:code>param</db:code> tags to initialize properties. If <db:code>param</db:code> tags are used, then Internet Explorer will ignore the <db:code>data</db:code> attribute, and readData will not be called.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbindable.xml#writeData">writeData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reportError">
<db:title>void QAxBindable::reportError(int <db:emphasis>code</db:emphasis>, const int &amp;<db:emphasis>src</db:emphasis>, const int &amp;<db:emphasis>desc</db:emphasis>, const int &amp;<db:emphasis>context</db:emphasis> = QString())</db:title>
<db:para>Reports an error to the client application. <db:code role="parameter">code</db:code> is a control-defined error code. <db:code role="parameter">desc</db:code> is a human-readable description of the error intended for the application user. <db:code role="parameter">src</db:code> is the name of the source for the error, typically the ActiveX server name. <db:code role="parameter">context</db:code> can be the location of a help file with more information about the error. If <db:code role="parameter">context</db:code> ends with a number in brackets, e.g. [12], this number will be interpreted as the context ID in the help file.</db:para>
</db:section>
<db:section xml:id="requestPropertyChange">
<db:title>[protected] bool QAxBindable::requestPropertyChange(const char *<db:emphasis>property</db:emphasis>)</db:title>
<db:para>Call this function to request permission to change the property <db:code role="parameter">property</db:code> from the client that is hosting this ActiveX control. Returns true if the client allows the change; otherwise returns false.</db:para>
<db:para>This function is usually called first in the write function for <db:code role="parameter">property</db:code>, and writing is abandoned if the function returns false.</db:para>
<db:programlisting language="cpp">void MyActiveQt::setText(const QString &amp;text)
{
    if (!requestPropertyChange(&quot;text&quot;))
        return;

    // update property

    propertyChanged(&quot;text&quot;);
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbindable.xml#propertyChanged">propertyChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeData">
<db:title>[virtual, since 4.1] bool QAxBindable::writeData(QIODevice *<db:emphasis>sink</db:emphasis>)</db:title>
<db:para>If the COM object supports a MIME type then this function is called to store the COM object into <db:code role="parameter">sink</db:code>. You have to open <db:code role="parameter">sink</db:code> for writing before you can write to it.</db:para>
<db:para>Returns true to indicate success. If the function returns false, then ActiveQt will serialize the object by storing the property values.</db:para>
<db:para>If you reimplement this function you also have to implement <db:link xlink:href="qaxbindable.xml#readData">readData</db:link>(). The default implementation does nothing and returns false.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbindable.xml#readData">readData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
