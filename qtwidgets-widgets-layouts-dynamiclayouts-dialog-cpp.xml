<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Dynamic Layouts Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to re-orient widgets in running applications.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;

#include &quot;dialog.h&quot;

Dialog::Dialog(QWidget *parent)
    : QDialog(parent)
{
    createRotatableGroupBox();
    createOptionsGroupBox();
    createButtonBox();

    mainLayout = new QGridLayout;
    mainLayout-&amp;gt;addWidget(rotatableGroupBox, 0, 0);
    mainLayout-&amp;gt;addWidget(optionsGroupBox, 1, 0);
    mainLayout-&amp;gt;addWidget(buttonBox, 2, 0);
    setLayout(mainLayout);

    mainLayout-&amp;gt;setSizeConstraint(QLayout::SetMinimumSize);

    setWindowTitle(tr(&quot;Dynamic Layouts&quot;));
}

void Dialog::buttonsOrientationChanged(int index)
{
    mainLayout-&amp;gt;setSizeConstraint(QLayout::SetNoConstraint);
    setMinimumSize(0, 0);

    Qt::Orientation orientation = Qt::Orientation(
            buttonsOrientationComboBox-&amp;gt;itemData(index).toInt());

    if (orientation == buttonBox-&amp;gt;orientation())
        return;

    mainLayout-&amp;gt;removeWidget(buttonBox);

    int spacing = mainLayout-&amp;gt;spacing();

    QSize oldSizeHint = buttonBox-&amp;gt;sizeHint() + QSize(spacing, spacing);
    buttonBox-&amp;gt;setOrientation(orientation);
    QSize newSizeHint = buttonBox-&amp;gt;sizeHint() + QSize(spacing, spacing);

    if (orientation == Qt::Horizontal) {
        mainLayout-&amp;gt;addWidget(buttonBox, 2, 0);
        resize(size() + QSize(-oldSizeHint.width(), newSizeHint.height()));
    } else {
        mainLayout-&amp;gt;addWidget(buttonBox, 0, 3, 2, 1);
        resize(size() + QSize(newSizeHint.width(), -oldSizeHint.height()));
    }

    mainLayout-&amp;gt;setSizeConstraint(QLayout::SetDefaultConstraint);
}

void Dialog::rotateWidgets()
{
    Q_ASSERT(rotatableWidgets.count() % 2 == 0);

    foreach (QWidget *widget, rotatableWidgets)
        rotatableLayout-&amp;gt;removeWidget(widget);

    rotatableWidgets.enqueue(rotatableWidgets.dequeue());

    const int n = rotatableWidgets.count();
    for (int i = 0; i &amp;lt; n / 2; ++i) {
        rotatableLayout-&amp;gt;addWidget(rotatableWidgets[n - i - 1], 0, i);
        rotatableLayout-&amp;gt;addWidget(rotatableWidgets[i], 1, i);
    }
}

void Dialog::help()
{
    QMessageBox::information(this, tr(&quot;Dynamic Layouts Help&quot;),
                               tr(&quot;This example shows how to change layouts &quot;
                                  &quot;dynamically.&quot;));
}

void Dialog::createRotatableGroupBox()
{
    rotatableGroupBox = new QGroupBox(tr(&quot;Rotatable Widgets&quot;));

    rotatableWidgets.enqueue(new QSpinBox);
    rotatableWidgets.enqueue(new QSlider);
    rotatableWidgets.enqueue(new QDial);
    rotatableWidgets.enqueue(new QProgressBar);

    int n = rotatableWidgets.count();
    for (int i = 0; i &amp;lt; n; ++i) {
        connect(rotatableWidgets[i], SIGNAL(valueChanged(int)),
                rotatableWidgets[(i + 1) % n], SLOT(setValue(int)));
    }

    rotatableLayout = new QGridLayout;
    rotatableGroupBox-&amp;gt;setLayout(rotatableLayout);

    rotateWidgets();
}

void Dialog::createOptionsGroupBox()
{
    optionsGroupBox = new QGroupBox(tr(&quot;Options&quot;));

    buttonsOrientationLabel = new QLabel(tr(&quot;Orientation of buttons:&quot;));

    buttonsOrientationComboBox = new QComboBox;
    buttonsOrientationComboBox-&amp;gt;addItem(tr(&quot;Horizontal&quot;), Qt::Horizontal);
    buttonsOrientationComboBox-&amp;gt;addItem(tr(&quot;Vertical&quot;), Qt::Vertical);

    connect(buttonsOrientationComboBox,
            QOverload&amp;lt;int&amp;gt;::of(&amp;amp;QComboBox::currentIndexChanged),
            this,
            &amp;amp;Dialog::buttonsOrientationChanged);

    optionsLayout = new QGridLayout;
    optionsLayout-&amp;gt;addWidget(buttonsOrientationLabel, 0, 0);
    optionsLayout-&amp;gt;addWidget(buttonsOrientationComboBox, 0, 1);
    optionsLayout-&amp;gt;setColumnStretch(2, 1);
    optionsGroupBox-&amp;gt;setLayout(optionsLayout);
}

void Dialog::createButtonBox()
{
    buttonBox = new QDialogButtonBox;

    closeButton = buttonBox-&amp;gt;addButton(QDialogButtonBox::Close);
    helpButton = buttonBox-&amp;gt;addButton(QDialogButtonBox::Help);
    rotateWidgetsButton = buttonBox-&amp;gt;addButton(tr(&quot;Rotate &amp;amp;Widgets&quot;),
                                               QDialogButtonBox::ActionRole);

    connect(rotateWidgetsButton, &amp;amp;QPushButton::clicked, this, &amp;amp;Dialog::rotateWidgets);
    connect(closeButton, &amp;amp;QPushButton::clicked, this, &amp;amp;Dialog::close);
    connect(helpButton, &amp;amp;QPushButton::clicked, this, &amp;amp;Dialog::help);
}

</db:programlisting>
</db:article>
