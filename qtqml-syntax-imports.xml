<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Import Statements</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Description of import statements in QML.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="syntax-of-an-import-statement">
<db:title>Syntax of an Import Statement</db:title>
<db:para>An import statement allows clients to tell the engine which modules, JavaScript resources and component directories are used within a QML document. The types which may be used within a document depends on which modules, resources and directories are imported by the document.</db:para>
<db:section xml:id="import-types">
<db:title>Import Types</db:title>
<db:para>There are three different types of imports. Each import type has a slightly different syntax, and different semantics apply to different import types.</db:para>
<db:section xml:id="module-namespace-imports">
<db:title>Module (Namespace) Imports</db:title>
<db:para>The most common type of import is a module import. Clients can import <db:link xlink:href="qtqml-modules-identifiedmodules.xml">QML modules</db:link> which register QML object types and JavaScript resources into a given namespace.</db:para>
<db:para>The generic form of a module import is as follows:</db:para>
<db:programlisting language="cpp">import &amp;lt;ModuleIdentifier&amp;gt; &amp;lt;Version.Number&amp;gt; [as &amp;lt;Qualifier&amp;gt;]
</db:programlisting>
<db:itemizedlist>
<db:listitem>
<db:para>The &lt;ModuleIdentifier&gt; is an identifier specified in dotted URI notation, which uniquely identifies the type namespace provided by the module.</db:para>
</db:listitem>
<db:listitem>
<db:para>The &lt;Version.Number&gt; is a version of the form MajorVersion.MinorVersion which specifies which definitions of various object types and JavaScript resources will be made available due to the import.</db:para>
</db:listitem>
<db:listitem>
<db:para>The &lt;Qualifier&gt; is an optional local namespace identifier into which the object types and JavaScript resources provided by the module will be installed, if given. If omitted, the object types and JavaScript resources provided by the module will be installed into the global namespace.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>An example of an unqualified module import is as follows:</db:para>
<db:programlisting language="cpp">import QtQuick 2.0
</db:programlisting>
<db:para>This import allows the use of all of the types provided by the QtQuick module without needing to specify a qualifier. For example, the client code to create a rectangle is as follows:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    width: 200
    height: 100
    color: &quot;red&quot;
}
</db:programlisting>
<db:para>An example of a qualified module import is as follows:</db:para>
<db:programlisting language="cpp">import QtQuick 2.0 as Quick
</db:programlisting>
<db:para>This import allows multiple modules which provide conflicting type names to be imported at the same time, however since each usage of a type provided by a module which was imported into a qualified namespace must be preceded by the qualifier, the conflict is able to be resolved unambiguously by the QML engine.</db:para>
<db:para>An example of client code which creates a rectangle after using a qualified module import is as follows:</db:para>
<db:programlisting language="qml">import QtQuick 2.0 as Quick

Quick.Rectangle {
    width: 200
    height: 100
    color: &quot;red&quot;
}
</db:programlisting>
<db:para>For more information about qualified imports, see the upcoming section on <db:link xlink:href="qtqml-syntax-imports.xml#importing-into-a-qualified-local-namespace">Importing Into A Qualified Local Namespace</db:link>.</db:para>
<db:para>Note that if a QML document does not import a module which provides a particular QML object type, but attempts to use that object type anyway, an error will occur. For example, the following QML document does not import QtQuick and thus attempting to use the Rectangle type will fail:</db:para>
<db:programlisting language="qml">Rectangle {
    width: 200
    height: 100
    color: &quot;red&quot;
}
</db:programlisting>
<db:para>In this case, the engine will emit an error and refuse to load the file.</db:para>
<db:section xml:id="non-module-namespace-imports">
<db:title>Non-module Namespace Imports</db:title>
<db:para>Types can also be registered into namespaces directly via the various registration functions in C++ (such as <db:link xlink:href="qqmlengine-proxy.xml#qmlRegisterType">qmlRegisterType</db:link>()). The types which have been registered into a namespace in this way may be imported by importing the namespace, as if the namespace was a module identifier.</db:para>
<db:para>This is most common in client applications which define their own QML object types in C++ and register them with the QML type system manually.</db:para>
</db:section>
<db:section xml:id="importing-into-a-qualified-local-namespace">
<db:title>Importing into a Qualified Local Namespace</db:title>
<db:para>The import statement may optionally use the as keyword to specify that the types should be imported into a particular document-local namespace. If a namespace is specified, then any references to the types made available by the import must be prefixed by the local namespace qualifier.</db:para>
<db:para>Below, the QtQuick module is imported into the namespace &quot;CoreItems&quot;. Now, any references to types from the QtQuick module must be prefixed with the CoreItems name:</db:para>
<db:programlisting language="qml">import QtQuick 2.0 as CoreItems

CoreItems.Rectangle {
    width: 100; height: 100

    CoreItems.Text { text: &quot;Hello, world!&quot; }

    // WRONG! No namespace prefix - the Text type won't be found
    Text { text: &quot;Hello, world!&quot; }
}
</db:programlisting>
<db:para>A namespace acts as an identifier for a module within the scope of the file. The namespace does not become an attribute of the root object that can be referred to externally as can be done with properties, signals and methods.</db:para>
<db:para>The namespaced import is useful if there is a requirement to use two QML types that have the same name but are located in different modules. In this case the two modules can be imported into different namespaces to ensure the code is referring to the correct type:</db:para>
<db:programlisting language="qml">import QtQuick 2.0 as CoreItems
import &quot;../textwidgets&quot; as MyModule

CoreItems.Rectangle {
    width: 100; height: 100

    MyModule.Text { text: &quot;Hello from my custom text item!&quot; }
    CoreItems.Text { text: &quot;Hello from Qt Quick!&quot; }
}
</db:programlisting>
<db:para>Note that multiple modules can be imported into the same namespace in the same way that multiple modules can be imported into the global namespace. For example:</db:para>
<db:programlisting language="qml">import QtQuick 2.0 as Project
import QtMultimedia 5.0 as Project

Project.Rectangle {
    width: 100; height: 50

    Project.Audio {
        source: &quot;music.wav&quot;
        autoPlay: true
    }
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="directory-imports">
<db:title>Directory Imports</db:title>
<db:para>A directory which contains QML documents may also be imported directly in a QML document. This provides a simple way for QML types to be segmented into reusable groupings: directories on the filesystem.</db:para>
<db:para>The generic form of a directory import is as follows:</db:para>
<db:programlisting language="qml">import &quot;&amp;lt;DirectoryPath&amp;gt;&quot; [as &amp;lt;Qualifier&amp;gt;]
</db:programlisting>
<db:note>
<db:para>Import paths are network transparent: applications can import documents from remote paths just as simply as documents from local paths. See the general URL resolution rules for <db:link xlink:href="qtqml-documents-networktransparency.xml">Network Transparency</db:link> in QML documents. If the directory is remote, it must contain a <db:link xlink:href="qtqml-syntax-directoryimports.xml#directory-listing-qmldir-files">directory import listing qmldir file</db:link> as the QML engine cannot determine the contents of a remote directory if that qmldir file does not exist.</db:para>
</db:note>
<db:para>Similar semantics for the &lt;Qualifier&gt; apply to directory imports as for module imports; for more information on the topic, please see the previous section about <db:link xlink:href="qtqml-syntax-imports.xml#importing-into-a-qualified-local-namespace">Importing into a Qualified Local Namespace</db:link>.</db:para>
<db:para>For more information about directory imports, please see the in-depth documentation about <db:link xlink:href="qtqml-syntax-directoryimports.xml">directory imports</db:link>.</db:para>
</db:section>
<db:section xml:id="javascript-resource-imports">
<db:title>JavaScript Resource Imports</db:title>
<db:para>JavaScript resources may be imported directly in a QML document. Every JavaScript resource must have an identifier by which it is accessed.</db:para>
<db:para>The generic form of a JavaScript resource import is as follows:</db:para>
<db:programlisting language="cpp">import &quot;&amp;lt;JavaScriptFile&amp;gt;&quot; as &amp;lt;Identifier&amp;gt;
</db:programlisting>
<db:para>Note that the &lt;Identifier&gt; must be unique within a QML document, unlike the local namespace qualifier which can be applied to module imports.</db:para>
<db:section xml:id="javascript-resources-from-modules">
<db:title>JavaScript Resources from Modules</db:title>
<db:para>Javascript files can be provided by modules, by adding identifier definitions to the qmldir file which specifies the module.</db:para>
<db:para>For example, if the projects.MyQMLProject.MyFunctions module is specified with the following qmldir file, and installed into the QML import path:</db:para>
<db:programlisting language="cpp">module projects.MyQMLProject.MyFunctions
SystemFunctions 1.0 SystemFunctions.js
UserFunctions 1.0 UserFunctions.js
</db:programlisting>
<db:para>a client application is able to import the JavaScript resources declared in the module by importing the module and using the identifier associated with a declared resource:</db:para>
<db:programlisting language="qml">import QtQuick 2.0
import projects.MyQMLProject.MyFunctions 1.0

Item {
    Component.onCompleted: { SystemFunctions.cleanUp(); }
}
</db:programlisting>
<db:para>If the module was imported into a document-local namespace, the JavaScript resource identifiers must be prefixed with the namespace qualifier in order to be used:</db:para>
<db:programlisting language="qml">import QtQuick 2.0
import projects.MyQMLProject.MyFunctions 1.0 as MyFuncs
import org.example.Functions 1.0 as TheirFuncs

Item {
    Component.onCompleted: {
        MyFuncs.SystemFunctions.cleanUp();
        TheirFuncs.SystemFunctions.shutdown();
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="further-information">
<db:title>Further Information</db:title>
<db:para>For more information about JavaScript resources, please see the documentation about <db:link xlink:href="qtqml-javascript-resources.xml">defining JavaScript resources in QML</db:link>, and for more information about how to import JavaScript resources, and how imports can be used from within JavaScript resources, please see the in-depth documentation about <db:link xlink:href="qtqml-javascript-imports.xml">importing JavaScript resources in QML</db:link>.</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
<db:section xml:id="qml-import-path">
<db:title>QML Import Path</db:title>
<db:para>When an <db:link xlink:href="qtqml-modules-identifiedmodules.xml">identified module</db:link> is imported, the QML engine searches the <db:emphasis>import path</db:emphasis> for a matching module.</db:para>
<db:para>This import path, as returned by QQmlEngine::importPathList(), defines the default locations to be searched by the engine. By default, this list contains:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The directory of the current file</db:para>
</db:listitem>
<db:listitem>
<db:para>The location specified by QLibraryInfo::Qml2ImportsPath</db:para>
</db:listitem>
<db:listitem>
<db:para>Paths specified by the QML2_IMPORT_PATH environment variable</db:para>
</db:listitem>
<db:listitem>
<db:para>The qrc:/qt-project.org/imports path inside the resources.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Additional import paths can be added through QQmlEngine::addImportPath() or the QML2_IMPORT_PATH environment variable. When running the <db:link xlink:href="qtquick-qmlscene.xml">qmlscene</db:link> tool, you can also use the -I option to add an import path.</db:para>
</db:section>
<db:section xml:id="debugging">
<db:title>Debugging</db:title>
<db:para>The QML_IMPORT_TRACE environment variable can be useful for debugging when there are problems with finding and loading modules. See <db:link xlink:href="qtquick-debugging.xml#debugging-module-imports">Debugging module imports</db:link> for more information.</db:para>
</db:section>
</db:article>
