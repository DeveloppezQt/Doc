<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFormDataPartBuilder Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qformdatapartbuilder.xml">QFormDataPartBuilder</db:link> class is a convenience class to simplify the construction of <db:link xlink:href="qhttppart.xml">QHttpPart</db:link> objects.</db:para>
<db:para>This class was introduced in Qt 6.8.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFormDataPartBuilder</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFormDataPartBuilder is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qformdatapartbuilder.xml">QFormDataPartBuilder</db:link> class can be used to build a <db:link xlink:href="qhttppart.xml">QHttpPart</db:link> object with the content disposition header set to be form-data by default. Then the generated object can be used as part of a multipart message (which is represented by the <db:link xlink:href="qhttpmultipart.xml">QHttpMultiPart</db:link> class).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttppart.xml">QHttpPart</db:link></db:member>
<db:member><db:link xlink:href="qhttpmultipart.xml">QHttpMultiPart</db:link></db:member>
<db:member><db:link xlink:href="qformdatabuilder.xml">QFormDataBuilder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFormDataPartBuilder-1">
<db:title>[default] QFormDataPartBuilder::QFormDataPartBuilder(const QFormDataPartBuilder &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>. The object is valid for as long as the associated <db:link xlink:href="qformdatabuilder.xml">QFormDataBuilder</db:link> has not been destroyed.</db:para>
<db:para>The data of the copy is shared (shallow copy): modifying one part will also change the other.</db:para>
<db:programlisting language="cpp">QFormDataPartBuilder foo()
{
    QFormDataBuilder builder;
    auto qfdpb1 = builder.part(&quot;First&quot;_L1);
    auto qfdpb2 = qfdpb1; // this creates a shallow copy

    qfdpb2.setBodyDevice(&amp;image, &quot;cutecat.jpg&quot;); // qfdpb1 is also modified

    return qfdbp2;  // invalid, builder is destroyed at the end of the scope
}
</db:programlisting>
</db:section>
<db:section xml:id="QFormDataPartBuilder">
<db:title>[noexcept default] QFormDataPartBuilder::QFormDataPartBuilder(QFormDataPartBuilder &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-constructs a <db:link xlink:href="qformdatapartbuilder.xml">QFormDataPartBuilder</db:link> instance, making it point at the same object that <db:code role="parameter">other</db:code> was pointing to.</db:para>
</db:section>
<db:section xml:id="dtor.QFormDataPartBuilder">
<db:title>[noexcept default] QFormDataPartBuilder::~QFormDataPartBuilder()</db:title>
<db:para>Destroys the <db:link xlink:href="qformdatapartbuilder.xml">QFormDataPartBuilder</db:link> object.</db:para>
</db:section>
<db:section xml:id="setBody">
<db:title>QFormDataPartBuilder QFormDataPartBuilder::setBody(QByteArrayView <db:emphasis>data</db:emphasis>, QAnyStringView <db:emphasis>fileName</db:emphasis> = {}, QAnyStringView <db:emphasis>mimeType</db:emphasis> = {})</db:title>
<db:para>Sets <db:code role="parameter">data</db:code> as the body of this MIME part and, if given, <db:code role="parameter">fileName</db:code> as the file name parameter in the content disposition header.</db:para>
<db:para>If <db:code role="parameter">mimeType</db:code> is not given (is empty), then <db:link xlink:href="qformdatapartbuilder.xml">QFormDataPartBuilder</db:link> tries to auto-detect the mime-type of <db:code role="parameter">data</db:code> using <db:link xlink:href="qmimedatabase.xml">QMimeDatabase</db:link>.</db:para>
<db:para>A subsequent call to <db:link xlink:href="qformdatapartbuilder.xml#setBodyDevice">setBodyDevice</db:link>() discards the body and the device will be used instead.</db:para>
<db:para>For a large amount of data (e.g. an image), <db:link xlink:href="qformdatapartbuilder.xml#setBodyDevice">setBodyDevice</db:link>() is preferred, which will not copy the data internally.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformdatapartbuilder.xml#setBodyDevice">setBodyDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBodyDevice">
<db:title>QFormDataPartBuilder QFormDataPartBuilder::setBodyDevice(QIODevice *<db:emphasis>body</db:emphasis>, QAnyStringView <db:emphasis>fileName</db:emphasis> = {}, QAnyStringView <db:emphasis>mimeType</db:emphasis> = {})</db:title>
<db:para>Sets <db:code role="parameter">body</db:code> as the body device of this part and <db:code role="parameter">fileName</db:code> as the file name parameter in the content disposition header.</db:para>
<db:para>If <db:code role="parameter">mimeType</db:code> is not given (is empty), then <db:link xlink:href="qformdatapartbuilder.xml">QFormDataPartBuilder</db:link> tries to auto-detect the mime-type of <db:code role="parameter">body</db:code> using <db:link xlink:href="qmimedatabase.xml">QMimeDatabase</db:link>.</db:para>
<db:para>A subsequent call to <db:link xlink:href="qformdatapartbuilder.xml#setBody">setBody</db:link>() discards the body device and the data set by <db:link xlink:href="qformdatapartbuilder.xml#setBody">setBody</db:link>() will be used instead.</db:para>
<db:para>For large amounts of data this method should be preferred over <db:link xlink:href="qformdatapartbuilder.xml#setBody">setBody</db:link>(), because the content is not copied when using this method, but read directly from the device.</db:para>
<db:para><db:code role="parameter">body</db:code> must be open and readable. <db:link xlink:href="qformdatapartbuilder.xml">QFormDataPartBuilder</db:link> does not take ownership of <db:code role="parameter">body</db:code>, i.e. the device must be closed and destroyed if necessary.</db:para>
<db:note>
<db:para>If <db:code role="parameter">body</db:code> is sequential (e.g. sockets, but not files), <db:link xlink:href="qnetworkaccessmanager.xml#post">QNetworkAccessManager::post</db:link>() should be called after <db:code role="parameter">body</db:code> has emitted finished().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformdatapartbuilder.xml#setBody">setBody</db:link>()</db:member>
<db:member><db:link xlink:href="qhttppart.xml#setBodyDevice">QHttpPart::setBodyDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHeaders">
<db:title>QFormDataPartBuilder QFormDataPartBuilder::setHeaders(const QHttpHeaders &amp;<db:emphasis>headers</db:emphasis>)</db:title>
<db:para>Sets the headers specified in <db:code role="parameter">headers</db:code>.</db:para>
<db:note>
<db:para>The &quot;content-type&quot; and &quot;content-disposition&quot; headers, if any are specified in <db:code role="parameter">headers</db:code>, will be overwritten by the class.</db:para>
</db:note>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[default] QFormDataPartBuilder &amp;QFormDataPartBuilder::operator=(QFormDataPartBuilder &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qformdatapartbuilder.xml">QFormDataPartBuilder</db:link> instance.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>[default] QFormDataPartBuilder &amp;QFormDataPartBuilder::operator=(const QFormDataPartBuilder &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to <db:link xlink:href="qformdatapartbuilder.xml">QFormDataPartBuilder</db:link> and returns a reference to this <db:link xlink:href="qformdatapartbuilder.xml">QFormDataPartBuilder</db:link>. The object is valid for as long as the associated <db:link xlink:href="qformdatabuilder.xml">QFormDataBuilder</db:link> has not been destroyed.</db:para>
<db:para>The data of the copy is shared (shallow copy): modifying one part will also change the other.</db:para>
<db:programlisting language="cpp">QFormDataPartBuilder foo()
{
    QFormDataBuilder builder;
    auto qfdpb1 = builder.part(&quot;First&quot;_L1);
    auto qfdpb2 = qfdpb1; // this creates a shallow copy

    qfdpb2.setBodyDevice(&amp;image, &quot;cutecat.jpg&quot;); // qfdpb1 is also modified

    return qfdbp2;  // invalid, builder is destroyed at the end of the scope
}
</db:programlisting>
</db:section>
</db:section>
</db:article>
