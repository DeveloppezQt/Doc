<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Platform Abstraction</db:title>
<db:productname>QtPlatformIntegration</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Integrating Qt with the native platform</db:titleabbrev>
<db:abstract>
<db:para>Integrating Qt with the native platform.</db:para></db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt Platform Abstraction (QPA) is the main platform abstraction layer in Qt.</db:para>
<db:para>The API can be identified by the <db:code>QPlatform*</db:code> class prefix, and is used for implementing higher level classes typically found in <db:link xlink:href="qtgui-index.xml">Qt GUI</db:link>, e.g. <db:code>QPlatformWindow</db:code> for window system integration exposed through <db:link xlink:href="qwindow.xml">QWindow</db:link>, or <db:code>QPlatformTheme</db:code> for deeper platform theming and integration, exposed through QStyleHint and <db:link xlink:href="qstyle.xml">QStyle</db:link>.</db:para>
<db:para>There are no source or binary compatibility guarantees for the QPA classes, meaning that the API is only guaranteed to work with the Qt version it was developed against. API changes will however only be made in minor releases. (5.1, 5.2, and so on.)</db:para>
<db:section xml:id="api-overview">
<db:title>API Overview</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Window system integration</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>QPlatformIntegration</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformAccessibility</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformBackingStore</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformClipboard</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformDrag</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformFontDatabase</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformGraphicsBuffer</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformInputContext</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformOffscreenSurface</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformOpenGLContext</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformScreen</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformServices</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformSharedGraphicsCache</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformSurface</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformWindow</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>Style/theming</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>QPlatformTheme</db:para>
</db:listitem>
<db:listitem>
<db:para>platform palettes</db:para>
</db:listitem>
<db:listitem>
<db:para>platform fonts</db:para>
</db:listitem>
<db:listitem>
<db:para>theme hints</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>Native dialogs and menus</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>QPlatformDialogHelper</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformMenu</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformMenuBar</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformMenuItem</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>In addition to the QPA APIs, there are many other platform abstractions in Qt, for example the event dispatcher abstractions in <db:link xlink:href="qtcore-index.xml">Qt Core</db:link> and the rendering hardware abstractions in RHI. The QPA APIs are mostly focused on window system integration and related support.</db:para>
</db:note>
</db:section>
<db:section xml:id="qpa-plugins">
<db:title>QPA Plugins</db:title>
<db:para>Concrete implementations of the interfaces listed above live in QPA plugins, or platform plugins, adding support for the various platforms Qt runs on. QPA plugins are implemented by subclassing the <db:code>QPlatform*</db:code> classes.</db:para>
<db:para>The following table summarizes the platform plugins available:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Plugin Name</db:para>
</db:th>
<db:th>
<db:para>Plugin Class Name</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>qandroid</db:code></db:para>
</db:td>
<db:td>
<db:para>QAndroidPlatformIntegration</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="android.xml">Android support</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>qbsdfb</db:code></db:para>
</db:td>
<db:td>
<db:para>QBsdFbIntegration</db:para>
</db:td>
<db:td>
<db:para>BsdFb support</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>qcocoa</db:code></db:para>
</db:td>
<db:td>
<db:para>QCocoaIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="macos.xml">macOS support</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>qdirect2d</db:code></db:para>
</db:td>
<db:td>
<db:para>QWindowsDirect2DIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para>Similar to the <db:code>qwindows</db:code> plugin, but replaces the raster paint engine with a Direct2D-based paint engine for <db:link xlink:href="qpixmap.xml">QPixmap</db:link> and <db:link xlink:href="qbackingstore.xml">QBackingStore</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>qdirectfb</db:code></db:para>
</db:td>
<db:td>
<db:para>QDirectFbIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para>DirectFB is centered around <db:emphasis>surfaces</db:emphasis>, which are the equivalent of a <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>qeglfs</db:code></db:para>
</db:td>
<db:td>
<db:para>QEglFSIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="embedded-linux.xml#embedded-eglfs">EGLFS</db:link> support for embedded Linux devices.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>qhaiku</db:code></db:para>
</db:td>
<db:td>
<db:para>QHaikuIntegration</db:para>
</db:td>
<db:td>
<db:para>Haiku support</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>qios</db:code></db:para>
</db:td>
<db:td>
<db:para>QIOSIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="ios.xml">iOS support</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>qlinuxfb</db:code></db:para>
</db:td>
<db:td>
<db:para>QLinuxFbIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="embedded-linux.xml#linuxfb">LinuxFB</db:link> support for embedded Linux devices.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>qmirclient</db:code></db:para>
</db:td>
<db:td>
<db:para>QMirClientIntegration</db:para>
</db:td>
<db:td>
<db:para>Mir client support</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>qopenwf</db:code></db:para>
</db:td>
<db:td>
<db:para>QOpenWFDIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para>OpenWF Display support for managing display control hardware.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>qvnc</db:code></db:para>
</db:td>
<db:td>
<db:para>QVncIntegration</db:para>
</db:td>
<db:td>
<db:para>VNC support</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>qwayland</db:code></db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para>QWaylandIntegrationPlugin</db:para>
</db:listitem>
<db:listitem>
<db:para>QWaylandBrcmEglPlatformIntegrationPlugin</db:para>
</db:listitem>
<db:listitem>
<db:para>QWaylandEglPlatformIntegrationPlugin</db:para>
</db:listitem>
<db:listitem>
<db:para>QWaylandXCompositeEglPlatformIntegrationPlugin</db:para>
</db:listitem>
<db:listitem>
<db:para>QWaylandXCompositeGlxPlatformIntegrationPlugin</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtwaylandcompositor-index.xml">Wayland support</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>qwindows</db:code></db:para>
</db:td>
<db:td>
<db:para>QWindowsIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="windows.xml">Windows support</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>qxcb</db:code></db:para>
</db:td>
<db:td>
<db:para>QXcbIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="linux.xml">X Window System (X11) support</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="selecting-a-qpa-plugin">
<db:title>Selecting a QPA plugin</db:title>
<db:para>Qt will select a default QPA plugin, depending on the platform. The <db:code>QT_QPA_PLATFORM</db:code> environment variable and the <db:code>-platform</db:code> command line argument allow you to override this default. See <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> for more details.</db:para>
</db:section>
<db:section xml:id="writing-a-qpa-plugin">
<db:title>Writing a QPA plugin</db:title>
<db:para>There is no detailed tutorial documentation for writing QPA plugins at this time. However, there are two minimal plugins shipped with Qt for testing and other special purposes that you can use as examples:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>qtbase/src/plugins/platforms/minimal/</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>qtbase/src/plugins/platforms/minimalegl/</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:code>qminimal</db:code> plugin is used for tools that link against <db:link xlink:href="qtgui-index.xml">Qt GUI</db:link>, but do not require window system integration (for example, <db:code>qmlplugindump</db:code>). It also has diagnostic support for dumping window contents to image files as determined by environment variables.</db:para>
</db:section>
</db:section>
</db:article>
