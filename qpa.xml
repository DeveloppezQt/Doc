<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Platform Abstraction</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt Platform Abstraction (QPA) is the platform abstraction layer for Qt 5 and replaces Qt for Embedded Linux and the platform ports from Qt 4.</db:para>
<db:para>QPA plugins are implemented by subclassing various QPlatform* classes. There are several <db:emphasis>root</db:emphasis> classes, such as QPlatformIntegration and QPlatformWindow for window system integration and QPlatformTheme for deeper platform theming and integration. QStyle is not a part of QPA.</db:para>
<db:para>There are no source or binary compatibility guarantees for the QPA classes, meaning that a platform plugin is only guaranteed to work with the Qt version it was developed against. API changes will however only be made in minor releases. (5.1, 5.2, and so on.)</db:para>
<db:section xml:id="qpa-minimal-plugins">
<db:title>QPA Minimal Plugins</db:title>
<db:para>There is no detailed tutorial documentation for writing QPA plugins at this time. However, there are two minimal plugins shipped with Qt 5 for testing and other special purposes that you can use as examples:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>qtbase/src/plugins/platforms/minimal/</db:para>
</db:listitem>
<db:listitem>
<db:para>qtbase/src/plugins/platforms/minimalegl/</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The qminimal plugin is used for tools that link against <db:link xlink:href="qtgui-index.xml">Qt GUI</db:link>, but do not require window system integration (for example, qmlplugindump). It also has diagnostic support for dumping window contents to image files as determined by environment variables.</db:para>
</db:section>
<db:section xml:id="class-overview">
<db:title>Class Overview</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>QPlatformIntegration</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>QAbstractEventDispatcher</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformAccessibility</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformBackingStore</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformClipboard</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformDrag</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformFontDatabase</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformGraphicsBuffer</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformInputContext</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformNativeInterface</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformOffscreenSurface</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformOpenGLContext</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformScreen</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformServices</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformSharedGraphicsCache</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformSurface</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformWindow</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>QPlatformTheme</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>QPlatformDialogHelper</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformMenu</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformMenuBar</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformMenuItem</db:para>
</db:listitem>
<db:listitem>
<db:para>QPlatformSystemTrayIcon</db:para>
</db:listitem>
<db:listitem>
<db:para>platform palettes</db:para>
</db:listitem>
<db:listitem>
<db:para>platform fonts</db:para>
</db:listitem>
<db:listitem>
<db:para>theme hints</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
<db:para>qtbase/src/platformsupport contains several helper classes for implementing platform plugins on Unix-like systems.</db:para>
</db:section>
<db:section xml:id="qpa-plugins">
<db:title>QPA Plugins</db:title>
<db:para>The following table summarizes the platform plugins available for QPA:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Plugin Name</db:para>
</db:th>
<db:th>
<db:para>Plugin Class Name</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>qandroid</db:para>
</db:td>
<db:td>
<db:para>QAndroidPlatformIntegration</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="android.xml">Android support</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qbsdfb</db:para>
</db:td>
<db:td>
<db:para>QBsdFbIntegration</db:para>
</db:td>
<db:td>
<db:para>BsdFb support</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qcocoa</db:para>
</db:td>
<db:td>
<db:para>QCocoaIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="macos.xml">Cocoa support</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qdirect2d</db:para>
</db:td>
<db:td>
<db:para>QWindowsDirect2DIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para>Similar to the qwindows plugin, but replaces the raster paint engine with a Direct2D-based paint engine for QPixmap and QBackingStore.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qdirectfb</db:para>
</db:td>
<db:td>
<db:para>QDirectFbIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para>DirectFB is centered around <db:emphasis>surfaces</db:emphasis>, which are the equivalent of a QPaintDevice.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qeglfs</db:para>
</db:td>
<db:td>
<db:para>QEglFSIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="embedded-linux.xml#embedded-eglfs">EGLFS</db:link> support for embedded Linux devices.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qhaiku</db:para>
</db:td>
<db:td>
<db:para>QHaikuIntegration</db:para>
</db:td>
<db:td>
<db:para>Haiku support</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qios</db:para>
</db:td>
<db:td>
<db:para>QIOSIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="ios.xml">iOS support</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qlinuxfb</db:para>
</db:td>
<db:td>
<db:para>QLinuxFbIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="embedded-linux.xml#linuxfb">LinuxFB</db:link> support for embedded Linux devices.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qmirclient</db:para>
</db:td>
<db:td>
<db:para>QMirClientIntegration</db:para>
</db:td>
<db:td>
<db:para>Mir client support</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qopenwf</db:para>
</db:td>
<db:td>
<db:para>QOpenWFDIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para>OpenWF Display support for managing display control hardware.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qqnx</db:para>
</db:td>
<db:td>
<db:para>QQnxIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qnx.xml">QNX support</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qvnc</db:para>
</db:td>
<db:td>
<db:para>QVncIntegration</db:para>
</db:td>
<db:td>
<db:para>VNC support</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qwasm</db:para>
</db:td>
<db:td>
<db:para>QWasmIntegration</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="wasm.xml">WebAssembly support</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qwayland</db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para>QWaylandIntegrationPlugin</db:para>
</db:listitem>
<db:listitem>
<db:para>QWaylandBrcmEglPlatformIntegrationPlugin</db:para>
</db:listitem>
<db:listitem>
<db:para>QWaylandEglPlatformIntegrationPlugin</db:para>
</db:listitem>
<db:listitem>
<db:para>QWaylandXCompositeEglPlatformIntegrationPlugin</db:para>
</db:listitem>
<db:listitem>
<db:para>QWaylandXCompositeGlxPlatformIntegrationPlugin</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtwaylandcompositor-index.xml">Wayland support</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qwindows</db:para>
</db:td>
<db:td>
<db:para>QWindowsIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="windows.xml">Windows support</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qwinrt</db:para>
</db:td>
<db:td>
<db:para>QWinRTIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="winrt-support.xml">Universal Windows Platform (UWP) support</db:link></db:para>
<db:note>
<db:para>This plugin was originally written for WinRT (Windows Runtime), and is therefore called qwinrt.</db:para>
</db:note>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qxcb</db:para>
</db:td>
<db:td>
<db:para>QXcbIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="linux.xml">X Window System (X11) support</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>webgl</db:para>
</db:td>
<db:td>
<db:para>QWebGLIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="webgl.xml">WebGL</db:link> support for Qt Quick applications</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:article>
