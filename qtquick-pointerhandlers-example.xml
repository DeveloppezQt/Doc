<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Examples - Pointer Handlers</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to use <db:link xlink:href="qtquickhandlers-index.xml">Qt Quick Input Handlers</db:link> in interactive components.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls</db:link> contains pre-built components that are sufficient for many kinds of user interfaces; but you may sometimes find a need to write such components &quot;from scratch&quot;. In that case, you will need to make substantial use of Pointer Handlers. This is a collection of small examples that show how to implement some common and less-common interaction patterns.</db:para>
<db:para>If you build the example as an executable, you can choose pages from a top-level <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>. The <db:code>TouchpointFeedbackSprite</db:code> and <db:code>MouseFeedbackSprite</db:code> components show how to use <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link> to provide feedback about what the user is doing with the pointing devices: these components are always visible throughout the example, and do not interfere with interaction anywhere else. These components are handy for reuse if you ever need to do a video or live demonstration of a user interface.</db:para>
<db:para>Alternatively, some of the individual QML files can be run on the command line with the <db:link xlink:href="qtquick-qml-runtime.xml#qml-runtime-tool">qml tool</db:link>, as a quick reminder to see how a particular kind of component can be built.</db:para>
<db:section xml:id="taphandler">
<db:title>TapHandler</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/pointerhandlers-example-taphandler.webp"/>
</db:imageobject>
</db:mediaobject>
<db:para>The &quot;tap&quot; page shows how to detect touchscreen taps, long-presses, and mouse clicks with different buttons. You can also try out the different <db:link xlink:href="qml-qtquick-taphandler.xml#gesturePolicy-prop">gesturePolicy</db:link> values.</db:para>
<db:section xml:id="multi-tap-buttons">
<db:title>Multi-tap Buttons</db:title>
<db:para>On this page are three custom <db:code>Button</db:code> components, with different <db:link xlink:href="qml-qtquick-taphandler.xml#gesturePolicy-prop">gesturePolicy</db:link> values: one button requires you to keep your finger or mouse within the button during the whole time from press to release; one will execute even if you drag outside the button and then drag back in before releasing; and one will exit its pressed state if you drag a little past the <db:link xlink:href="qstylehints.xml#startDragDistance-prop">system-wide drag threshold</db:link>. If you try this example on a touchscreen, you should be able to interact with all three buttons at the same time with different fingers.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/pointerhandlers-example-multibutton.webp"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="pie-menu">
<db:title>Pie Menu</db:title>
<db:para>This page shows how to write a touchscreen-friendly pie menu that animates into view when activated by a long-press. You can select a menu item by dragging from the center position onto one of the sectors and releasing. If you drag outside the menu, or release in the middle of the menu, nothing is selected. If you drag outside the grey viewport, the menu is cancelled.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/pointerhandlers-example-piemenu.webp"/>
</db:imageobject>
</db:mediaobject>
</db:section>
</db:section>
<db:section xml:id="pointhandler">
<db:title>PointHandler</db:title>
<db:para>On the &quot;single point handler&quot; page, <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link> provides feedback from some of the properties that can be found in <db:link xlink:href="qml-qtquick-singlepointhandler.xml#point-prop">SinglePointHandler::point</db:link> and <db:link xlink:href="qml-qtquick-handlerpoint.xml#device-prop">handlerPoint::device</db:link>. If you have built the example as an executable, you will see this feedback at the same time as the feedback from the PointHandlers in the main pointerhandlers.qml file.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/pointerhandlers-example-pointhandler.webp"/>
</db:imageobject>
</db:mediaobject>
<db:para>The &quot;tablet canvas&quot; page uses <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link> to uniquely detect different <db:link xlink:href="qpointingdevice.xml#PointerType-enum">types of pointing devices</db:link>, so that if you have a drawing tablet connected to your computer, you can draw on the Canvas item with different types of stylus: pen, airbrush or marker. You can &quot;erase&quot; strokes with the stylus eraser (done here by drawing on top with the background color). Several <db:link xlink:href="qml-qtquick-hoverhandler.xml">HoverHandlers</db:link> provide feedback about which type of stylus or eraser is detected.</db:para>
</db:section>
<db:section xml:id="hoverhandler">
<db:title>HoverHandler</db:title>
<db:para>The &quot;hover sidebar&quot; page shows how to detect when the mouse is hovering a button component and its container at the same time. The propagation can be disabled by setting the <db:link xlink:href="qml-qtquick-hoverhandler.xml#blocking-prop">HoverHandler::blocking</db:link> property. You can try out all combinations of <db:link xlink:href="qml-qtquick-hoverhandler.xml">HoverHandler</db:link> and <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> here, to compare how they handle hover detection. And one more <db:link xlink:href="qml-qtquick-hoverhandler.xml">HoverHandler</db:link> is used to show the current mouse position in scene coordinates.</db:para>
<db:para>You can also verify that the <db:link xlink:href="qml-qtquick-hoverhandler.xml">HoverHandler</db:link> on the animated &quot;platform&quot; is hovered whenever it slides under the mouse cursor.</db:para>
</db:section>
<db:section xml:id="draghandler">
<db:title>DragHandler</db:title>
<db:para>The &quot;joystick&quot; page simply has a <db:link xlink:href="qml-qtquick-draghandler.xml">DragHandler</db:link> dragging an <db:link xlink:href="qml-qtquick-image.xml">Image</db:link>. A <db:link xlink:href="qml-qtquick-state.xml">State</db:link> with <db:link xlink:href="qml-qtquick-anchorchanges.xml">AnchorChanges</db:link> unlocks the <db:link xlink:href="qtquick-positioning-topic.xml#anchors">anchors</db:link> so that dragging is possible; and an <db:link xlink:href="qml-qtquick-anchoranimation.xml">AnchorAnimation</db:link> animates the knob's return to the center position when released.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/pointerhandlers-example-joystick.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>The &quot;fling animation&quot; page demonstrates one use of the DragHandler::centroid::velocity property, which simply makes the value from <db:link xlink:href="qeventpoint.xml#velocity-prop">QEventPoint::velocity</db:link>() available in QML. The <db:code>MomentumAnimation</db:code> component that is used in this example shows one way to simulate phyics (momentum and friction) without resorting to heavier solutions.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/pointerhandlers-example-fling.webp"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="pinchhandler">
<db:title>PinchHandler</db:title>
<db:para>The &quot;pinch&quot; page demonstrates multiple PinchHandlers: some require two fingers and some require three, to perform the usual scaling, rotation and translation, with constraints managed via <db:link xlink:href="qml-qtquick-pinchhandler.xml">PinchHandler</db:link>'s axis min and max properties. One of the <db:link xlink:href="qml-qtquick-pinchhandler.xml">PinchHandler</db:link> instances is used to manipulate different <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> properties rather than position, scale and rotation. Various <db:link xlink:href="qml-qtquick-pinchhandler.xml">PinchHandler</db:link> properties are bound in various ways. You should be able to manipulate each instance uniquely. Some items also have DragHandlers and TapHandlers.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/pointerhandlers-example-pinchhandler.webp"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="interoperability">
<db:title>Interoperability</db:title>
<db:section xml:id="sliders">
<db:title>Sliders</db:title>
<db:para>The &quot;mixer&quot; page demonstrates the use of multiple handlers inside a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> delegate. You can interact with multiple <db:code>Slider</db:code> components simultaneously, and you can flick the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> sideways.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A <db:link xlink:href="qml-qtquick-draghandler.xml">DragHandler</db:link> allows you to start dragging anywhere along the &quot;track&quot; where the slider knob can slide. Because the default <db:link xlink:href="qml-qtquick-draghandler.xml#snapMode-prop">snapMode</db:link> is <db:code>DragHandler.SnapAuto</db:code>, the knob will <db:emphasis>snap</db:emphasis> into a position centered under the mouse or touchpoint after you have dragged past the <db:link xlink:href="qstylehints.xml#startDragDistance-prop">system-wide drag threshold</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>A <db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> directly adjusts the <db:code>y</db:code> property of the knob <db:link xlink:href="qml-qtquick-image.xml">Image</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>A <db:link xlink:href="qml-qt-labs-animation-boundaryrule.xml">BoundaryRule</db:link> prevents either the <db:link xlink:href="qml-qtquick-draghandler.xml">DragHandler</db:link> or the <db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> from dragging the knob too far.</db:para>
</db:listitem>
<db:listitem>
<db:para>A <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link> provides one more gesture than a typical <db:code>Slider</db:code> component would have: you can tap on the knob.</db:para>
</db:listitem>
</db:itemizedlist>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/pointerhandlers-example-mixer.webp"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="map">
<db:title>Map</db:title>
<db:para>The &quot;map&quot; page demonstrates dragging, transformation and re-scaling an <db:link xlink:href="qtsvg-index.xml">SVG</db:link> <db:link xlink:href="qml-qtquick-image.xml">Image</db:link>. You should be able to zoom into a particular location on the map; and if the zoom level is changed substantially, <db:link xlink:href="qml-qtquick-image.xml#sourceSize-prop">Image::sourceSize</db:link> is changed to request the SVG to be re-rendered at a different resolution. Dragging vertically with two fingers activates a <db:link xlink:href="qml-qtquick-draghandler.xml">DragHandler</db:link> that manipulates a <db:link xlink:href="qml-qtquick-rotation.xml">Rotation</db:link> transform to tilt the map.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/pointerhandlers-example-map.webp"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="fake-flickable">
<db:title>Fake Flickable</db:title>
<db:para>The &quot;fake Flickable&quot; page contains an attempt to reproduce much of the functionality of <db:link xlink:href="qml-qtquick-flickable.xml">Flickable</db:link> using discrete pointer handlers and animations. Flickable is a complex component, but here you can see one way of separating the individual behaviors that it provides, in case you would like to have only part of the functionality without the complexity.</db:para>
<db:para>There's also a slide-out &quot;drawer&quot; component holding a few more pointer-handler-powered controls.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/pointerhandlers-example-fakeflickable.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:section>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/pointerhandlers?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
