<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Web Browser Example (ActiveQt)</db:title>
<db:productname>ActiveQt</db:productname>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The Web Browser example uses the Microsoft Web Browser ActiveX control to implement a fully functional Web Browser application. The user interface has been developed using the Qt Designer integration of the <db:link xlink:href="qaxwidget.xml">QAxWidget</db:link> class.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/activeqt-webbrowser-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The code demonstrates how the Qt application can communicate with the embedded ActiveX controls using signals, slots and the dynamicCall() function.</db:para>
<db:programlisting language="cpp">class MainWindow : public QMainWindow, public Ui::MainWindow
{
    Q_OBJECT
public:
    MainWindow();

public slots:
    void on_WebBrowser_TitleChange(const QString &amp;title);
    void on_WebBrowser_ProgressChange(int a, int b);
    void on_WebBrowser_CommandStateChange(int cmd, bool on);
    void on_WebBrowser_BeforeNavigate();
    void on_WebBrowser_NavigateComplete(QString);

    void on_actionGo_triggered();
    void on_actionNewWindow_triggered();
    void on_actionAbout_triggered();
    void on_actionAboutQt_triggered();
    void on_actionFileClose_triggered();

private:
    QProgressBar *pb;
};
</db:programlisting>
<db:para>The <db:code>MainWindow</db:code> class declares a <db:code>QMainWindow</db:code> based user interface, using the <db:code>Ui::MainWindow</db:code> class generated by Qt Designer. A number of slots are implemented to handle events from the various user interface elements, including the <db:code>WebBrowser</db:code> object, which is a <db:link xlink:href="qaxwidget.xml">QAxWidget</db:link> hosting the Microsoft Web Browser control.</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow()
{
    setupUi(this);

    connect(addressEdit, SIGNAL(returnPressed()), actionGo, SLOT(trigger()));
    connect(actionBack, SIGNAL(triggered()), WebBrowser, SLOT(GoBack()));
    connect(actionForward, SIGNAL(triggered()), WebBrowser, SLOT(GoForward()));
    connect(actionStop, SIGNAL(triggered()), WebBrowser, SLOT(Stop()));
    connect(actionRefresh, SIGNAL(triggered()), WebBrowser, SLOT(Refresh()));
    connect(actionHome, SIGNAL(triggered()), WebBrowser, SLOT(GoHome()));
    connect(actionSearch, SIGNAL(triggered()), WebBrowser, SLOT(GoSearch()));

    pb = new QProgressBar(statusBar());
    pb-&gt;setTextVisible(false);
    pb-&gt;hide();
    statusBar()-&gt;addPermanentWidget(pb);

    WebBrowser-&gt;dynamicCall(&quot;GoHome()&quot;);
}

</db:programlisting>
<db:para>The constructor initializes the user interface, installs a progress bar on the status bar, and uses <db:link xlink:href="qaxbase.xml#dynamicCall">QAxBase::dynamicCall</db:link>() to invoke the <db:code>GoHome()</db:code> method of Internet Explorer to navigate to the user's home page.</db:para>
<db:programlisting language="cpp">void MainWindow::on_WebBrowser_TitleChange(const QString &amp;title)
{
    setWindowTitle(&quot;Qt WebBrowser - &quot; + title);
}

void MainWindow::on_WebBrowser_ProgressChange(int a, int b)
{
    if (a &lt;= 0 || b &lt;= 0) {
        pb-&gt;hide();
        return;
    }
    pb-&gt;show();
    pb-&gt;setRange(0, b);
    pb-&gt;setValue(a);
}

void MainWindow::on_WebBrowser_CommandStateChange(int cmd, bool on)
{
    switch (cmd) {
    case 1:
        actionForward-&gt;setEnabled(on);
        break;
    case 2:
        actionBack-&gt;setEnabled(on);
        break;
    }
}

void MainWindow::on_WebBrowser_BeforeNavigate()
{
    actionStop-&gt;setEnabled(true);
}

void MainWindow::on_WebBrowser_NavigateComplete(QString)
{
    actionStop-&gt;setEnabled(false);
}

</db:programlisting>
<db:para>Different slots handle the signals emitted by the WebBrowser object.</db:para>
<db:para>Connections that don't require any coding, i.e. connecting the <db:code>back</db:code> action to the <db:code>GoBack()</db:code> slot, have already been made in Qt Designer.</db:para>
<db:programlisting language="cpp">void MainWindow::on_actionGo_triggered()
{
    WebBrowser-&gt;dynamicCall(&quot;Navigate(const QString&amp;)&quot;, addressEdit-&gt;text());
}

void MainWindow::on_actionNewWindow_triggered()
{
    MainWindow *window = new MainWindow;
    window-&gt;show();
    if (addressEdit-&gt;text().isEmpty())
        return;
    window-&gt;addressEdit-&gt;setText(addressEdit-&gt;text());
    window-&gt;actionStop-&gt;setEnabled(true);
    window-&gt;on_actionGo_triggered();
}

void MainWindow::on_actionAbout_triggered()
{
    QMessageBox::about(this, tr(&quot;About WebBrowser&quot;),
                tr(&quot;This Example has been created using the ActiveQt integration into Qt Designer.\n&quot;
                   &quot;It demonstrates the use of QAxWidget to embed the Internet Explorer ActiveX\n&quot;
                   &quot;control into a Qt application.&quot;));
}

void MainWindow::on_actionAboutQt_triggered()
{
    QMessageBox::aboutQt(this, tr(&quot;About Qt&quot;));
}

void MainWindow::on_actionFileClose_triggered()
{
    close();
}

#include &quot;main.moc&quot;

int main(int argc, char ** argv)
{
    QApplication a(argc, argv);
    MainWindow w;
#if defined(Q_OS_WINCE)
    w.showMaximized();
#else
    w.show();
#endif
    return a.exec();
}
</db:programlisting>
<db:para>The rest of the implementation is not related to ActiveQt - the actions are handled by different slots, and the entry point function starts the application using standard Qt APIs.</db:para>
<db:para>To build the example you must first build the <db:link xlink:href="qaxcontainer-module.xml">QAxContainer</db:link> library. Then run your make tool in <db:code>examples/activeqt/webbrowser</db:code> and run the resulting <db:code>webbrowser.exe</db:code>.</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="activeqt/webbrowser/main.cpp">activeqt/webbrowser/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="activeqt/webbrowser/mainwindow.ui">activeqt/webbrowser/mainwindow.ui</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="activeqt/webbrowser/mainwindow_windowsmobile.ui">activeqt/webbrowser/mainwindow_windowsmobile.ui</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="activeqt/webbrowser/webaxwidget.h">activeqt/webbrowser/webaxwidget.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="activeqt/webbrowser/webbrowser.pro">activeqt/webbrowser/webbrowser.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
