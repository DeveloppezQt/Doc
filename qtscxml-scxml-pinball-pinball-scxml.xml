<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt SCXML Pinball Example</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Scxml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Encapsulates the internal logic of an application in an SCXML file.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">&amp;lt;?xml version=&quot;1.0&quot; ?&amp;gt;
&amp;lt;!--
/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtScxml module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/
--&amp;gt;
&amp;lt;scxml xmlns=&quot;http://www.w3.org/2005/07/scxml&quot; version=&quot;1.0&quot;
       name=&quot;Pinball&quot; datamodel=&quot;ecmascript&quot;&amp;gt;
    &amp;lt;datamodel&amp;gt;
        &amp;lt;data id=&quot;highScore&quot; expr=&quot;0&quot;/&amp;gt;
        &amp;lt;data id=&quot;score&quot; expr=&quot;0&quot;/&amp;gt;
    &amp;lt;/datamodel&amp;gt;
    &amp;lt;parallel id=&quot;global&quot;&amp;gt;
        &amp;lt;parallel id=&quot;guiControl&quot;&amp;gt;
            &amp;lt;state id=&quot;cLight&quot;&amp;gt;
                &amp;lt;state id=&quot;cLightOn&quot;&amp;gt;
                    &amp;lt;transition event=&quot;turnOffC&quot; target=&quot;cLightOff&quot;/&amp;gt;
                &amp;lt;/state&amp;gt;
                &amp;lt;state id=&quot;cLightOff&quot;&amp;gt;
                    &amp;lt;transition event=&quot;turnOnC&quot; target=&quot;cLightOn&quot;/&amp;gt;
                &amp;lt;/state&amp;gt;
            &amp;lt;/state&amp;gt;
            &amp;lt;state id=&quot;rLight&quot;&amp;gt;
                &amp;lt;state id=&quot;rLightOn&quot;&amp;gt;
                    &amp;lt;transition event=&quot;turnOffR&quot; target=&quot;rLightOff&quot;/&amp;gt;
                &amp;lt;/state&amp;gt;
                &amp;lt;state id=&quot;rLightOff&quot;&amp;gt;
                    &amp;lt;transition event=&quot;turnOnR&quot; target=&quot;rLightOn&quot;/&amp;gt;
                &amp;lt;/state&amp;gt;
            &amp;lt;/state&amp;gt;
            &amp;lt;state id=&quot;aLight&quot;&amp;gt;
                &amp;lt;state id=&quot;aLightOn&quot;&amp;gt;
                    &amp;lt;transition event=&quot;turnOffA&quot; target=&quot;aLightOff&quot;/&amp;gt;
                &amp;lt;/state&amp;gt;
                &amp;lt;state id=&quot;aLightOff&quot;&amp;gt;
                    &amp;lt;transition event=&quot;turnOnA&quot; target=&quot;aLightOn&quot;/&amp;gt;
                &amp;lt;/state&amp;gt;
            &amp;lt;/state&amp;gt;
            &amp;lt;state id=&quot;zLight&quot;&amp;gt;
                &amp;lt;state id=&quot;zLightOn&quot;&amp;gt;
                    &amp;lt;transition event=&quot;turnOffZ&quot; target=&quot;zLightOff&quot;/&amp;gt;
                &amp;lt;/state&amp;gt;
                &amp;lt;state id=&quot;zLightOff&quot;&amp;gt;
                    &amp;lt;transition event=&quot;turnOnZ&quot; target=&quot;zLightOn&quot;/&amp;gt;
                &amp;lt;/state&amp;gt;
            &amp;lt;/state&amp;gt;
            &amp;lt;state id=&quot;yLight&quot;&amp;gt;
                &amp;lt;state id=&quot;yLightOn&quot;&amp;gt;
                    &amp;lt;transition event=&quot;turnOffY&quot; target=&quot;yLightOff&quot;/&amp;gt;
                &amp;lt;/state&amp;gt;
                &amp;lt;state id=&quot;yLightOff&quot;&amp;gt;
                    &amp;lt;transition event=&quot;turnOnY&quot; target=&quot;yLightOn&quot;/&amp;gt;
                &amp;lt;/state&amp;gt;
            &amp;lt;/state&amp;gt;
            &amp;lt;state id=&quot;hurryLight&quot;&amp;gt;
                &amp;lt;state id=&quot;hurryLightOn&quot;&amp;gt;
                    &amp;lt;transition event=&quot;turnOffHurry&quot; target=&quot;hurryLightOff&quot;/&amp;gt;
                &amp;lt;/state&amp;gt;
                &amp;lt;state id=&quot;hurryLightOff&quot;&amp;gt;
                    &amp;lt;transition event=&quot;turnOnHurry&quot; target=&quot;hurryLightOn&quot;/&amp;gt;
                &amp;lt;/state&amp;gt;
            &amp;lt;/state&amp;gt;
            &amp;lt;state id=&quot;jackpotLight&quot;&amp;gt;
                &amp;lt;state id=&quot;jackpotLightOn&quot;&amp;gt;
                    &amp;lt;transition event=&quot;turnOffJackpot&quot; target=&quot;jackpotLightOff&quot;/&amp;gt;
                &amp;lt;/state&amp;gt;
                &amp;lt;state id=&quot;jackpotLightOff&quot;&amp;gt;
                    &amp;lt;transition event=&quot;turnOnJackpot&quot; target=&quot;jackpotLightOn&quot;/&amp;gt;
                &amp;lt;/state&amp;gt;
            &amp;lt;/state&amp;gt;
            &amp;lt;state id=&quot;gameOverLight&quot;&amp;gt;
                &amp;lt;state id=&quot;gameOverLightOn&quot;&amp;gt;
                    &amp;lt;transition event=&quot;turnOffGameOver&quot; target=&quot;gameOverLightOff&quot;/&amp;gt;
                &amp;lt;/state&amp;gt;
                &amp;lt;state id=&quot;gameOverLightOff&quot;&amp;gt;
                    &amp;lt;transition event=&quot;turnOnGameOver&quot; target=&quot;gameOverLightOn&quot;/&amp;gt;
                &amp;lt;/state&amp;gt;
            &amp;lt;/state&amp;gt;
        &amp;lt;/parallel&amp;gt;

        &amp;lt;parallel id=&quot;internalState&quot;&amp;gt;
            &amp;lt;parallel id=&quot;logicalState&quot;&amp;gt;
                &amp;lt;state id=&quot;letterState&quot;&amp;gt;
                    &amp;lt;parallel id=&quot;lettersState&quot;&amp;gt;
                        &amp;lt;state id=&quot;letter.C&quot;&amp;gt;
                            &amp;lt;state id=&quot;cLetterOff&quot;&amp;gt;
                                &amp;lt;transition event=&quot;cLetterTriggered&quot; cond=&quot;In('onState')&quot; target=&quot;cLetterOn&quot;/&amp;gt;
                            &amp;lt;/state&amp;gt;
                            &amp;lt;final id=&quot;cLetterOn&quot;/&amp;gt;
                        &amp;lt;/state&amp;gt;
                        &amp;lt;state id=&quot;letter.R&quot;&amp;gt;
                            &amp;lt;state id=&quot;rLetterOff&quot;&amp;gt;
                                &amp;lt;transition event=&quot;rLetterTriggered&quot; cond=&quot;In('onState')&quot; target=&quot;rLetterOn&quot;/&amp;gt;
                            &amp;lt;/state&amp;gt;
                            &amp;lt;final id=&quot;rLetterOn&quot;/&amp;gt;
                        &amp;lt;/state&amp;gt;
                        &amp;lt;state id=&quot;letter.A&quot;&amp;gt;
                            &amp;lt;state id=&quot;aLetterOff&quot;&amp;gt;
                                &amp;lt;transition event=&quot;aLetterTriggered&quot; cond=&quot;In('onState')&quot; target=&quot;aLetterOn&quot;/&amp;gt;
                            &amp;lt;/state&amp;gt;
                            &amp;lt;final id=&quot;aLetterOn&quot;/&amp;gt;
                        &amp;lt;/state&amp;gt;
                        &amp;lt;state id=&quot;letter.Z&quot;&amp;gt;
                            &amp;lt;state id=&quot;zLetterOff&quot;&amp;gt;
                                &amp;lt;transition event=&quot;zLetterTriggered&quot; cond=&quot;In('onState')&quot; target=&quot;zLetterOn&quot;/&amp;gt;
                            &amp;lt;/state&amp;gt;
                            &amp;lt;final id=&quot;zLetterOn&quot;/&amp;gt;
                        &amp;lt;/state&amp;gt;
                        &amp;lt;state id=&quot;letter.Y&quot;&amp;gt;
                            &amp;lt;state id=&quot;yLetterOff&quot;&amp;gt;
                                &amp;lt;transition event=&quot;yLetterTriggered&quot; cond=&quot;In('onState')&quot; target=&quot;yLetterOn&quot;/&amp;gt;
                            &amp;lt;/state&amp;gt;
                            &amp;lt;final id=&quot;yLetterOn&quot;/&amp;gt;
                        &amp;lt;/state&amp;gt;
                        &amp;lt;transition event=&quot;resetLetters&quot; target=&quot;lettersState&quot;/&amp;gt;
                    &amp;lt;/parallel&amp;gt;
                &amp;lt;/state&amp;gt;
                &amp;lt;state id=&quot;modeState&quot;&amp;gt;
                    &amp;lt;state id=&quot;offState&quot;&amp;gt;
                        &amp;lt;onentry&amp;gt;
                            &amp;lt;if cond=&quot;highScore &amp;amp;lt; score&quot;&amp;gt;
                                &amp;lt;assign location=&quot;highScore&quot; expr=&quot;score&quot;/&amp;gt;
                            &amp;lt;/if&amp;gt;
                            &amp;lt;raise event=&quot;resetLetters&quot;/&amp;gt;
                            &amp;lt;raise event=&quot;update&quot;/&amp;gt;
                        &amp;lt;/onentry&amp;gt;
                        &amp;lt;transition event=&quot;startTriggered&quot; target=&quot;onState&quot;/&amp;gt;
                    &amp;lt;/state&amp;gt;
                    &amp;lt;parallel id=&quot;onState&quot;&amp;gt;
                        &amp;lt;onentry&amp;gt;
                            &amp;lt;assign location=&quot;score&quot; expr=&quot;0&quot;/&amp;gt;
                        &amp;lt;/onentry&amp;gt;
                        &amp;lt;state id=&quot;hurryState&quot;&amp;gt;
                            &amp;lt;state id=&quot;hurryStateOff&quot;&amp;gt;
                                &amp;lt;onentry&amp;gt;
                                    &amp;lt;raise event=&quot;resetLetters&quot;/&amp;gt;
                                    &amp;lt;raise event=&quot;update&quot;/&amp;gt;
                                &amp;lt;/onentry&amp;gt;
                                &amp;lt;transition event=&quot;goToHurryOn&quot; target=&quot;hurryStateOn&quot;/&amp;gt;
                            &amp;lt;/state&amp;gt;
                            &amp;lt;state id=&quot;hurryStateOn&quot;&amp;gt;
                                &amp;lt;onentry&amp;gt;
                                    &amp;lt;send event=&quot;goToHurryOff&quot; id=&quot;hurryId&quot; delay=&quot;5s&quot;/&amp;gt;
                                    &amp;lt;raise event=&quot;resetLetters&quot;/&amp;gt;
                                    &amp;lt;raise event=&quot;update&quot;/&amp;gt;
                                &amp;lt;/onentry&amp;gt;
                                &amp;lt;transition event=&quot;goToHurryOff&quot; target=&quot;hurryStateOff&quot;/&amp;gt;
                                &amp;lt;onexit&amp;gt;
                                    &amp;lt;cancel sendid=&quot;hurryId&quot;/&amp;gt;
                                &amp;lt;/onexit&amp;gt;
                            &amp;lt;/state&amp;gt;
                        &amp;lt;/state&amp;gt;
                        &amp;lt;state id=&quot;jackpotState&quot;&amp;gt;
                            &amp;lt;state id=&quot;jackpotStateOff&quot;&amp;gt;
                                &amp;lt;onentry&amp;gt;
                                    &amp;lt;raise event=&quot;update&quot;/&amp;gt;
                                &amp;lt;/onentry&amp;gt;
                                &amp;lt;transition event=&quot;goForJackpot&quot; target=&quot;jackpotStateOn&quot;/&amp;gt;
                            &amp;lt;/state&amp;gt;
                            &amp;lt;state id=&quot;jackpotStateOn&quot;&amp;gt;
                                &amp;lt;onentry&amp;gt;
                                    &amp;lt;raise event=&quot;update&quot;/&amp;gt;
                                &amp;lt;/onentry&amp;gt;
                            &amp;lt;/state&amp;gt;
                        &amp;lt;/state&amp;gt;
                        &amp;lt;transition event=&quot;ballOutTriggered&quot; target=&quot;offState&quot;/&amp;gt;
                    &amp;lt;/parallel&amp;gt;
                &amp;lt;/state&amp;gt;
            &amp;lt;/parallel&amp;gt;

            &amp;lt;state id=&quot;workflow&quot;&amp;gt;
                &amp;lt;state id=&quot;lightImpulseGenerator&quot;&amp;gt;
                    &amp;lt;state id=&quot;lightImpulseOn&quot;/&amp;gt;
                    &amp;lt;state id=&quot;lightImpulseOff&quot;/&amp;gt;

                    &amp;lt;onentry&amp;gt;
                        &amp;lt;raise event=&quot;update&quot;/&amp;gt;
                    &amp;lt;/onentry&amp;gt;

                    &amp;lt;transition event=&quot;scheduleNewImpulse&quot;&amp;gt;
                        &amp;lt;cancel sendid=&quot;lightId&quot;/&amp;gt;
                        &amp;lt;if cond=&quot;In('offState')&quot;&amp;gt;
                            &amp;lt;send event=&quot;lightImpulse&quot; id=&quot;lightId&quot; delay=&quot;1s&quot;/&amp;gt;
                        &amp;lt;elseif cond=&quot;In('hurryStateOff')&quot;/&amp;gt;
                            &amp;lt;send event=&quot;lightImpulse&quot; id=&quot;lightId&quot; delay=&quot;500ms&quot;/&amp;gt;
                        &amp;lt;else/&amp;gt;
                            &amp;lt;send event=&quot;lightImpulse&quot; id=&quot;lightId&quot; delay=&quot;200ms&quot;/&amp;gt;
                        &amp;lt;/if&amp;gt;
                    &amp;lt;/transition&amp;gt;

                    &amp;lt;transition event=&quot;update&quot;&amp;gt;
                        &amp;lt;raise event=&quot;scheduleNewImpulse&quot;/&amp;gt;
                        &amp;lt;raise event=&quot;updateLights&quot;/&amp;gt;
                    &amp;lt;/transition&amp;gt;

                    &amp;lt;transition event=&quot;lightImpulse&quot; cond=&quot;In('lightImpulseOn')&quot; target=&quot;lightImpulseOff&quot;/&amp;gt;
                    &amp;lt;transition event=&quot;lightImpulse&quot; cond=&quot;In('lightImpulseOff')&quot; target=&quot;lightImpulseOn&quot;/&amp;gt;
                &amp;lt;/state&amp;gt;

                &amp;lt;transition event=&quot;done.state.letter.*&quot;&amp;gt;
                    &amp;lt;if cond=&quot;In('hurryStateOff')&quot;&amp;gt;
                        &amp;lt;assign location=&quot;score&quot; expr=&quot;score + 1000&quot;/&amp;gt;
                    &amp;lt;elseif cond=&quot;In('hurryStateOn')&quot;/&amp;gt;
                        &amp;lt;assign location=&quot;score&quot; expr=&quot;score + 10000&quot;/&amp;gt;
                    &amp;lt;/if&amp;gt;
                    &amp;lt;raise event=&quot;updateLights&quot;/&amp;gt;
                &amp;lt;/transition&amp;gt;

                &amp;lt;transition event=&quot;done.state.lettersState&quot;&amp;gt;
                    &amp;lt;if cond=&quot;In('hurryStateOff')&quot;&amp;gt;
                        &amp;lt;assign location=&quot;score&quot; expr=&quot;score + 100000&quot;/&amp;gt;
                        &amp;lt;raise event=&quot;goToHurryOn&quot;/&amp;gt;
                    &amp;lt;elseif cond=&quot;In('hurryStateOn')&quot;/&amp;gt;
                        &amp;lt;assign location=&quot;score&quot; expr=&quot;score + 1000000&quot;/&amp;gt;
                        &amp;lt;raise event=&quot;goToHurryOff&quot;/&amp;gt;
                        &amp;lt;raise event=&quot;goForJackpot&quot;/&amp;gt;
                    &amp;lt;/if&amp;gt;
                &amp;lt;/transition&amp;gt;

                &amp;lt;transition event=&quot;updateLights&quot;&amp;gt;
                    &amp;lt;send event=&quot;updateScore&quot;&amp;gt;
                        &amp;lt;param name=&quot;highScore&quot; expr=&quot;highScore&quot;/&amp;gt;
                        &amp;lt;param name=&quot;score&quot; expr=&quot;score&quot;/&amp;gt;
                    &amp;lt;/send&amp;gt;
                    &amp;lt;if cond=&quot;In('jackpotStateOn')&quot;&amp;gt;
                        &amp;lt;raise event=&quot;turnOnJackpot&quot;/&amp;gt;
                    &amp;lt;else/&amp;gt;
                        &amp;lt;raise event=&quot;turnOffJackpot&quot;/&amp;gt;
                    &amp;lt;/if&amp;gt;

                    &amp;lt;if cond=&quot;In('lightImpulseOn')&quot;&amp;gt;
                        &amp;lt;if cond=&quot;In('offState')&quot;&amp;gt;
                            &amp;lt;raise event=&quot;turnOnLights&quot;/&amp;gt;
                            &amp;lt;raise event=&quot;turnOnHurry&quot;/&amp;gt;
                            &amp;lt;raise event=&quot;turnOnJackpot&quot;/&amp;gt;
                            &amp;lt;raise event=&quot;turnOnGameOver&quot;/&amp;gt;
                        &amp;lt;elseif cond=&quot;In('hurryStateOff')&quot;/&amp;gt;
                            &amp;lt;raise event=&quot;updateLightsAccordingToLettersState&quot;/&amp;gt;
                            &amp;lt;raise event=&quot;turnOffHurry&quot;/&amp;gt;
                            &amp;lt;raise event=&quot;turnOffGameOver&quot;/&amp;gt;
                        &amp;lt;else/&amp;gt;
                            &amp;lt;raise event=&quot;turnOnLights&quot;/&amp;gt;
                            &amp;lt;raise event=&quot;turnOnHurry&quot;/&amp;gt;
                            &amp;lt;raise event=&quot;turnOffGameOver&quot;/&amp;gt;
                        &amp;lt;/if&amp;gt;
                    &amp;lt;else/&amp;gt;
                        &amp;lt;if cond=&quot;In('offState')&quot;&amp;gt;
                            &amp;lt;raise event=&quot;turnOffLights&quot;/&amp;gt;
                            &amp;lt;raise event=&quot;turnOffHurry&quot;/&amp;gt;
                            &amp;lt;raise event=&quot;turnOffJackpot&quot;/&amp;gt;
                        &amp;lt;elseif cond=&quot;In('hurryStateOff')&quot;/&amp;gt;
                            &amp;lt;raise event=&quot;turnOffLights&quot;/&amp;gt;
                        &amp;lt;else/&amp;gt;
                            &amp;lt;raise event=&quot;updateLightsAccordingToLettersState&quot;/&amp;gt;
                        &amp;lt;/if&amp;gt;
                        &amp;lt;raise event=&quot;turnOffHurry&quot;/&amp;gt;
                        &amp;lt;raise event=&quot;turnOffGameOver&quot;/&amp;gt;
                    &amp;lt;/if&amp;gt;
                &amp;lt;/transition&amp;gt;

                &amp;lt;transition event=&quot;updateLightsAccordingToLettersState&quot;&amp;gt;
                    &amp;lt;if cond=&quot;In('cLetterOn')&quot;&amp;gt;
                        &amp;lt;raise event=&quot;turnOnC&quot;/&amp;gt;
                    &amp;lt;else/&amp;gt;
                        &amp;lt;raise event=&quot;turnOffC&quot;/&amp;gt;
                    &amp;lt;/if&amp;gt;
                    &amp;lt;if cond=&quot;In('rLetterOn')&quot;&amp;gt;
                        &amp;lt;raise event=&quot;turnOnR&quot;/&amp;gt;
                    &amp;lt;else/&amp;gt;
                        &amp;lt;raise event=&quot;turnOffR&quot;/&amp;gt;
                    &amp;lt;/if&amp;gt;
                    &amp;lt;if cond=&quot;In('aLetterOn')&quot;&amp;gt;
                        &amp;lt;raise event=&quot;turnOnA&quot;/&amp;gt;
                    &amp;lt;else/&amp;gt;
                        &amp;lt;raise event=&quot;turnOffA&quot;/&amp;gt;
                    &amp;lt;/if&amp;gt;
                    &amp;lt;if cond=&quot;In('zLetterOn')&quot;&amp;gt;
                        &amp;lt;raise event=&quot;turnOnZ&quot;/&amp;gt;
                    &amp;lt;else/&amp;gt;
                        &amp;lt;raise event=&quot;turnOffZ&quot;/&amp;gt;
                    &amp;lt;/if&amp;gt;
                    &amp;lt;if cond=&quot;In('yLetterOn')&quot;&amp;gt;
                        &amp;lt;raise event=&quot;turnOnY&quot;/&amp;gt;
                    &amp;lt;else/&amp;gt;
                        &amp;lt;raise event=&quot;turnOffY&quot;/&amp;gt;
                    &amp;lt;/if&amp;gt;
                &amp;lt;/transition&amp;gt;

                &amp;lt;transition event=&quot;turnOnLights&quot;&amp;gt;
                    &amp;lt;raise event=&quot;turnOnC&quot;/&amp;gt;
                    &amp;lt;raise event=&quot;turnOnR&quot;/&amp;gt;
                    &amp;lt;raise event=&quot;turnOnA&quot;/&amp;gt;
                    &amp;lt;raise event=&quot;turnOnZ&quot;/&amp;gt;
                    &amp;lt;raise event=&quot;turnOnY&quot;/&amp;gt;
                &amp;lt;/transition&amp;gt;

                &amp;lt;transition event=&quot;turnOffLights&quot;&amp;gt;
                    &amp;lt;raise event=&quot;turnOffC&quot;/&amp;gt;
                    &amp;lt;raise event=&quot;turnOffR&quot;/&amp;gt;
                    &amp;lt;raise event=&quot;turnOffA&quot;/&amp;gt;
                    &amp;lt;raise event=&quot;turnOffZ&quot;/&amp;gt;
                    &amp;lt;raise event=&quot;turnOffY&quot;/&amp;gt;
                &amp;lt;/transition&amp;gt;
            &amp;lt;/state&amp;gt;
        &amp;lt;/parallel&amp;gt;
    &amp;lt;/parallel&amp;gt;
&amp;lt;/scxml&amp;gt;

</db:programlisting>
</db:article>
