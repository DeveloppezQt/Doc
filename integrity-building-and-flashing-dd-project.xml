<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Building and flashing a Dynamic Download Project</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="integrity-building-qt-8155p-on-windows.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Building Qt for Qualcomm Snapdragon 8155P Board on Windows 10"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="integrity-win-monolith.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Build Qt with Windows 10 host"/></db:extendedlink>
<db:abstract>
<db:para>Qt Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This tutorial will guide you through building an INTEGRITY project for a Qt example application on a Windows 10 host. You can select any Qt example application that uses the <db:link xlink:href="wasm.xml#supported-qt-modules">Supported Qt modules</db:link>.</db:para>
<db:section xml:id="preparing-the-qt-application-build-environment">
<db:title>Preparing the Qt application build environment</db:title>
<db:para>Before building the INTEGRITY project, you need to prepare your build environment. Run the setEnvironment.bat script from the Windows CMD terminal. For more information about the script, see <db:link xlink:href="integrity-building-qt-8155p-on-windows.xml#creating-a-batch-script-for-windows-10">Creating a batch script for Windows 10</db:link>.</db:para>
<db:programlisting language="cpp" role="bad">setEnvironment.bat
</db:programlisting>
</db:section>
<db:section xml:id="building-the-qt-application-example">
<db:title>Building the Qt application example</db:title>
<db:para>To build Qt 6 application using CMake, run the following commands in the Windows CMD terminal:</db:para>
<db:programlisting language="cpp" role="bad">&quot;Qt installation path&amp;gt;\bin\qt-cmake.bat&quot; CMakeLists.txt -GNinja
-DCMAKE_PREFIX_PATH=&quot;C:\Users\user\targetbuild&quot;
-DQt6_DIR=&quot;C:\Users\user\targetbuild\lib\cmake\Qt6&quot;
-DQt6Core_DIR=&quot;C:\Users\user\targetbuild\lib\cmake\Qt6Core&quot;
-DQt6Gui_DIR=&quot;C:\Users\user\targetbuild\lib\cmake\Qt6Gui&quot;

 cmake --build .
</db:programlisting>
<db:para>Where, qt-cmake is the wrapper script that calls CMake to configure your project with appropriate include paths.</db:para>
</db:section>
<db:section xml:id="creating-a-dynamic-download-project-in-multi">
<db:title>Creating a Dynamic Download Project in MULTI</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Start MULTI Launcher and select <db:guilabel>File</db:guilabel> &gt; <db:guilabel>Create workspace</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the creation window mode select <db:guilabel>New Project</db:guilabel> and click <db:guilabel>OK</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the dialog <db:guilabel>Project Wizard</db:guilabel>, select a path where the new project is to be created e.g. <db:emphasis>C:\Users\user\Documents\My</db:emphasis> <db:emphasis>Projects\Project1\default.gpj</db:emphasis> and click <db:guilabel>Next</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:emphasis>INTEGRITY</db:emphasis> in <db:guilabel>Operating System</db:guilabel> dialog and click <db:guilabel>Next</db:guilabel>.</db:para>
<db:mediaobject>
<db:alt>&quot;Project creation window dialog.&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/integrity-os.png"/>
</db:imageobject>
</db:mediaobject>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Finish</db:guilabel>.</db:para>
<db:mediaobject>
<db:alt>&quot;Qualcom board creation window dialog.&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/sa8155-target.png"/>
</db:imageobject>
</db:mediaobject>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Create New</db:guilabel> &gt; <db:guilabel>Dynamic Download</db:guilabel> &gt; <db:guilabel>Next</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Settings For Dynamic Download</db:guilabel> &gt; <db:guilabel>Finish</db:guilabel>.</db:para>
<db:mediaobject>
<db:alt>&quot;Project tree view.&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/dynamic-pro.png"/>
</db:imageobject>
</db:mediaobject>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="building-a-dynamic-download-project">
<db:title>Building a Dynamic Download Project</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Edit and save <db:emphasis>myproject.int</db:emphasis> file in the project tree:</db:para>
<db:programlisting language="cpp" role="bad">AddressSpace
  Name qtapp
  Filename C:\path\to\your\qt\app\binary
  MemoryPoolSize 0x2700000
  Language C++
  HeapSize 0x90000
  Task Initial
    StackSize 0x90000
    StartIt false
  EndTask
  Extendedmemorypoolsize 0x300000
EndAddressSpace
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Create a new file called <db:emphasis>'multi_commands'</db:emphasis> and add the following commands to it:</db:para>
<db:programlisting language="cpp" role="bad">switch -component &quot;debugger.task.qtapp.Initial&quot;
route &quot;debugger.task.qtapp.Initial&quot; { __ntwcommand prepare_target }
wait -load
switch -component &quot;debugger.task.qtapp.Initial&quot;
route &quot;debugger.task.qtapp.Initial&quot; { __ntwcommand resume }
wait -time 240000 -stop
switch -component &quot;debugger.task.qtapp.Initial&quot;
unload myproject
wait -time 8000 -stop
savedebugpane cmd &quot;autotestresult.txt&quot;
quitall
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Run building and loading commands from the Windows CMD terminal:</db:para>
<db:programlisting language="cpp" role="bad">multi.exe &quot;C:\Users\user\Documents\My Projects\Project1\default.gpj&quot; -build myproject &amp;amp;
multi.exe &quot;C:\Users\user\Documents\My Projects\Project1\dbg\bin\myproject&quot; -connect=&quot;rtserv2 192.168.1.1&quot; -p C:\Users\user\multi_commands &amp;amp;
</db:programlisting>
<db:mediaobject>
<db:alt>&quot;MULTI IDE binary load window.&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/dynamic-loaded-pro.png"/>
</db:imageobject>
</db:mediaobject>
<db:note>
<db:para><db:emphasis>&quot;rtserv2 192.168.1.1&quot;</db:emphasis> is a board IP address. Check <db:link xlink:href="integrity-flash-image-and-run.xml#set-up-the-wiring">Set up the wiring</db:link> to set up the board network.</db:para>
</db:note>
<db:note>
<db:para>It takes several minutes to deploy by Dynamic Download.</db:para>
</db:note>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
