<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Canvas 3D Getting Started</db:title>
<db:productname>QtCanvas3D</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>QtCanvas3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>QtCanvas3D Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="building-qt-canvas-3d">
<db:title>Building Qt Canvas 3D</db:title>
<db:para>To build the Qt Canvas 3D module from source code, set up a command prompt with an environment for building Qt applications, navigate to the directory containing <db:code>qtcanvas3d.pro</db:code>, and configure the project with qmake:</db:para>
<db:programlisting language="cpp" role="bad">qmake
</db:programlisting>
<db:para>After running qmake, build the project with make:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>OS</db:para>
</db:th>
<db:th>
<db:para>Make command</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Linux</db:para>
</db:td>
<db:td>
<db:para>make</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Windows (MinGw)</db:para>
</db:td>
<db:td>
<db:para>mingw32-make</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Windows (MSVC)</db:para>
</db:td>
<db:td>
<db:para>nmake</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>OSX</db:para>
</db:td>
<db:td>
<db:para>make</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The above generates the default makefiles for your configuration, which is typically the release build if you are using precompiled binary Qt distribution. To build both debug and release, or one specifically, use one of the following qmake lines instead.</db:para>
<db:para>For debug builds:</db:para>
<db:programlisting language="cpp" role="bad">qmake CONFIG+=debug
make
</db:programlisting>
<db:para>or</db:para>
<db:programlisting language="cpp" role="bad">qmake CONFIG+=debug_and_release
make debug
</db:programlisting>
<db:para>For release builds:</db:para>
<db:programlisting language="cpp" role="bad">qmake CONFIG+=release
make
</db:programlisting>
<db:para>or</db:para>
<db:programlisting language="cpp" role="bad">qmake CONFIG+=debug_and_release
make release
</db:programlisting>
<db:para>For both builds (Windows/Mac only):</db:para>
<db:programlisting language="cpp" role="bad">qmake CONFIG+=&quot;debug_and_release build_all&quot;
make
</db:programlisting>
<db:para>After building, install the module to your Qt directory:</db:para>
<db:programlisting language="cpp" role="bad">make install
</db:programlisting>
<db:para>If you want to uninstall the module:</db:para>
<db:programlisting language="cpp" role="bad">make uninstall
</db:programlisting>
<db:para>To build a statically linked version of the <db:link xlink:href="qtcanvas3d-qmlmodule.xml">QtCanvas3D</db:link> module, give the following commands:</db:para>
<db:programlisting language="cpp" role="bad">qmake CONFIG+=static
make
make install
</db:programlisting>
</db:section>
<db:section xml:id="running-the-examples">
<db:title>Running the Examples</db:title>
<db:para>Examples for Qt Canvas 3D are found under the <db:code>examples/canvas3d</db:code> subdirectory. To build and run a single example, in this case <db:code>interaction</db:code>, navigate to the example directory and enter the following commands:</db:para>
<db:programlisting language="cpp" role="bad">qmake
make
./interaction
</db:programlisting>
<db:note>
<db:para>On some platforms, such as Windows, the executable can be generated under <db:code>debug</db:code> or <db:code>release</db:code> folders, depending on your build.</db:para>
</db:note>
</db:section>
<db:section xml:id="a-basic-example">
<db:title>A Basic Example</db:title>
<db:para>For a simple <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> example, see the <db:link xlink:href="qtcanvas3d-canvas3d-textureandlight-example.xml">Lit and Textured Cube Example</db:link>.</db:para>
<db:para>For all examples, check out <db:link xlink:href="qtcanvas3d-examples.xml">Qt Canvas 3D Examples</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-qt-canvas-3d-project">
<db:title>Creating Qt Canvas 3D Project</db:title>
<db:para>For convenience, Qt Canvas 3D comes with a Qt Creator wizard template. The template is provided with the source package and can be found under <db:emphasis>creatortemplates</db:emphasis> folder. The Qt Canvas 3D wizard creates a project that includes QML and JavaScript files. It also has, by default, code that draws a cube.</db:para>
<db:para>In order to use the wizard template it needs to be copied to the correct location. For more details of the correct location, please see <db:link xlink:href="http://doc.qt.io/qtcreator/creator-project-wizards.html#locating-wizards">Locating Wizards</db:link>.</db:para>
</db:section>
</db:article>
