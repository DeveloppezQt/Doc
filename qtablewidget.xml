<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTableWidget Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtablewidget.xml">QTableWidget</db:link> class provides an item-based table view with a default model.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTableWidget</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qtableview.xml" xlink:role="class">QTableView</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTableWidget is part of <db:simplelist><db:member>model-view</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Table widgets provide standard table display facilities for applications. The items in a <db:link xlink:href="qtablewidget.xml">QTableWidget</db:link> are provided by <db:link xlink:href="qtablewidgetitem.xml">QTableWidgetItem</db:link>.</db:para>
<db:para>If you want a table that uses your own data model you should use <db:link xlink:href="qtableview.xml">QTableView</db:link> rather than this class.</db:para>
<db:para>Table widgets can be constructed with the required numbers of rows and columns:</db:para>
<db:programlisting language="cpp">    tableWidget = new QTableWidget(12, 3, this);
</db:programlisting>
<db:para>Alternatively, tables can be constructed without a given size and resized later:</db:para>
<db:programlisting language="cpp">    tableWidget = new QTableWidget(this);
    tableWidget-&gt;setRowCount(10);
    tableWidget-&gt;setColumnCount(5);
</db:programlisting>
<db:para>Items are created ouside the table (with no parent widget) and inserted into the table with <db:link xlink:href="qtablewidget.xml#setItem">setItem</db:link>():</db:para>
<db:programlisting language="cpp">    QTableWidgetItem *newItem = new QTableWidgetItem(tr(&quot;%1&quot;).arg(
        (row+1)*(column+1)));
    tableWidget-&gt;setItem(row, column, newItem);
</db:programlisting>
<db:para>If you want to enable sorting in your table widget, do so after you have populated it with items, otherwise sorting may interfere with the insertion order (see <db:link xlink:href="qtablewidget.xml#setItem">setItem</db:link>() for details).</db:para>
<db:para>Tables can be given both horizontal and vertical headers. The simplest way to create the headers is to supply a list of strings to the <db:link xlink:href="qtablewidget.xml#setHorizontalHeaderLabels">setHorizontalHeaderLabels</db:link>() and <db:link xlink:href="qtablewidget.xml#setVerticalHeaderLabels">setVerticalHeaderLabels</db:link>() functions. These will provide simple textual headers for the table's columns and rows. More sophisticated headers can be created from existing table items that are usually constructed outside the table. For example, we can construct a table item with an icon and aligned text, and use it as the header for a particular column:</db:para>
<db:programlisting language="cpp">    QTableWidgetItem *cubesHeaderItem = new QTableWidgetItem(tr(&quot;Cubes&quot;));
    cubesHeaderItem-&gt;setIcon(QIcon(QPixmap(&quot;:/Images/cubed.png&quot;)));
    cubesHeaderItem-&gt;setTextAlignment(Qt::AlignVCenter);
</db:programlisting>
<db:para>The number of rows in the table can be found with <db:link xlink:href="qtablewidget.xml#rowCount">rowCount</db:link>(), and the number of columns with <db:link xlink:href="qtablewidget.xml#columnCount">columnCount</db:link>(). The table can be cleared with the <db:link xlink:href="qtablewidget.xml#clear">clear</db:link>() function.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/windowsvista-tableview.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Windows Vista style table widget</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/macintosh-tableview.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Macintosh style table widget</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-tableview.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Fusion style table widget</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>A <db:link xlink:href="gallery-windowsvista.xml">Windows Vista style</db:link> table widget.</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="gallery-macintosh.xml">Macintosh style</db:link> table widget.</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="gallery-fusion.xml">Fusion style</db:link> table widget.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml">QTableWidgetItem</db:link></db:member>
<db:member><db:link xlink:href="qtableview.xml">QTableView</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="columnCount-prop">
<db:title>columnCount : int</db:title>
<db:para>This property holds the number of columns in the table</db:para>
<db:para>By default, for a table constructed without row and column counts, this property contains a value of 0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold"><db:link xlink:href="qtablewidget.xml#columnCount">columnCount</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qtablewidget.xml#setColumnCount">setColumnCount</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>columns</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="rowCount-prop">
<db:title>rowCount : int</db:title>
<db:para>This property holds the number of rows in the table</db:para>
<db:para>By default, for a table constructed without row and column counts, this property contains a value of 0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold"><db:link xlink:href="qtablewidget.xml#rowCount">rowCount</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qtablewidget.xml#setRowCount">setRowCount</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>rows</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTableWidget">
<db:title>[explicit] QTableWidget::QTableWidget(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Creates a new table view with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QTableWidget-1">
<db:title>QTableWidget::QTableWidget(int <db:emphasis>rows</db:emphasis>, int <db:emphasis>columns</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Creates a new table view with the given <db:code role="parameter">rows</db:code> and <db:code role="parameter">columns</db:code>, and with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QTableWidget">
<db:title>[virtual noexcept] QTableWidget::~QTableWidget()</db:title>
<db:para>Destroys this <db:link xlink:href="qtablewidget.xml">QTableWidget</db:link>.</db:para>
</db:section>
<db:section xml:id="cellActivated">
<db:title>[since 4.1] void QTableWidget::cellActivated(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>This signal is emitted when the cell specified by <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> has been activated</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
</db:section>
<db:section xml:id="cellChanged">
<db:title>[since 4.1] void QTableWidget::cellChanged(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the data of the item in the cell specified by <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> has changed.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
</db:section>
<db:section xml:id="cellClicked">
<db:title>[since 4.1] void QTableWidget::cellClicked(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a cell in the table is clicked. The <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> specified is the cell that was clicked.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
</db:section>
<db:section xml:id="cellDoubleClicked">
<db:title>[since 4.1] void QTableWidget::cellDoubleClicked(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a cell in the table is double clicked. The <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> specified is the cell that was double clicked.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
</db:section>
<db:section xml:id="cellEntered">
<db:title>[since 4.1] void QTableWidget::cellEntered(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>This signal is emitted when the mouse cursor enters a cell. The cell is specified by <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code>.</db:para>
<db:para>This signal is only emitted when mouseTracking is turned on, or when a mouse button is pressed while moving into an item.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
</db:section>
<db:section xml:id="cellPressed">
<db:title>[since 4.1] void QTableWidget::cellPressed(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a cell in the table is pressed. The <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> specified is the cell that was pressed.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
</db:section>
<db:section xml:id="cellWidget">
<db:title>[since 4.1] QWidget *QTableWidget::cellWidget(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>) const</db:title>
<db:para>Returns the widget displayed in the cell in the given <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code>.</db:para>
<db:note>
<db:para>The table takes ownership of the widget.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#setCellWidget">setCellWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QTableWidget::clear()</db:title>
<db:para>Removes all items in the view. This will also remove all selections and headers. If you don't want to remove the headers, use <db:link xlink:href="qtablewidget.xml#clearContents">QTableWidget::clearContents</db:link>(). The table dimensions stay the same.</db:para>
</db:section>
<db:section xml:id="clearContents">
<db:title>[since 4.2] void QTableWidget::clearContents()</db:title>
<db:para>Removes all items not in the headers from the view. This will also remove all selections. The table dimensions stay the same.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="closePersistentEditor">
<db:title>void QTableWidget::closePersistentEditor(QTableWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Closes the persistent editor for <db:code role="parameter">item</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#openPersistentEditor">openPersistentEditor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="column">
<db:title>int QTableWidget::column(const QTableWidgetItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>Returns the column for the <db:code role="parameter">item</db:code>.</db:para>
</db:section>
<db:section xml:id="columnCount">
<db:title>int QTableWidget::columnCount() const</db:title>
<db:para>Returns the number of columns.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qtablewidget.xml#columnCount-prop">columnCount</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#setColumnCount">setColumnCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentCellChanged">
<db:title>[since 4.1] void QTableWidget::currentCellChanged(int <db:emphasis>currentRow</db:emphasis>, int <db:emphasis>currentColumn</db:emphasis>, int <db:emphasis>previousRow</db:emphasis>, int <db:emphasis>previousColumn</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the current cell changes. The cell specified by <db:code role="parameter">previousRow</db:code> and <db:code role="parameter">previousColumn</db:code> is the cell that previously had the focus, the cell specified by <db:code role="parameter">currentRow</db:code> and <db:code role="parameter">currentColumn</db:code> is the new current cell.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
</db:section>
<db:section xml:id="currentColumn">
<db:title>int QTableWidget::currentColumn() const</db:title>
<db:para>Returns the column of the current item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#currentRow">currentRow</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidget.xml#setCurrentCell">setCurrentCell</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentItem">
<db:title>QTableWidgetItem *QTableWidget::currentItem() const</db:title>
<db:para>Returns the current item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#setCurrentItem">setCurrentItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentItemChanged">
<db:title>void QTableWidget::currentItemChanged(QTableWidgetItem *<db:emphasis>current</db:emphasis>, QTableWidgetItem *<db:emphasis>previous</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the current item changes. The <db:code role="parameter">previous</db:code> item is the item that previously had the focus, <db:code role="parameter">current</db:code> is the new current item.</db:para>
</db:section>
<db:section xml:id="currentRow">
<db:title>int QTableWidget::currentRow() const</db:title>
<db:para>Returns the row of the current item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#currentColumn">currentColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidget.xml#setCurrentCell">setCurrentCell</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dropEvent">
<db:title>[override virtual protected] void QTableWidget::dropEvent(QDropEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#dropEvent" role="function">QAbstractItemView::dropEvent(QDropEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dropMimeData">
<db:title>[virtual protected] bool QTableWidget::dropMimeData(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QMimeData *<db:emphasis>data</db:emphasis>, Qt::DropAction <db:emphasis>action</db:emphasis>)</db:title>
<db:para>Handles the <db:code role="parameter">data</db:code> supplied by a drag and drop operation that ended with the given <db:code role="parameter">action</db:code> in the given <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code>. Returns true if the data and action can be handled by the model; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#supportedDropActions">supportedDropActions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="editItem">
<db:title>void QTableWidget::editItem(QTableWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Starts editing the <db:code role="parameter">item</db:code> if it is editable.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QTableWidget::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#event" role="function">QAbstractItemView::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="findItems">
<db:title>QList&lt;QTableWidgetItem *&gt; QTableWidget::findItems(const QString &amp;<db:emphasis>text</db:emphasis>, Qt::MatchFlags <db:emphasis>flags</db:emphasis>) const</db:title>
<db:para>Finds items that matches the <db:code role="parameter">text</db:code> using the given <db:code role="parameter">flags</db:code>.</db:para>
</db:section>
<db:section xml:id="horizontalHeaderItem">
<db:title>QTableWidgetItem *QTableWidget::horizontalHeaderItem(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:para>Returns the horizontal header item for column, <db:code role="parameter">column</db:code>, if one has been set; otherwise returns 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#setHorizontalHeaderItem">setHorizontalHeaderItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexFromItem">
<db:title>[protected] QModelIndex QTableWidget::indexFromItem(QTableWidgetItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>Returns the <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> associated with the given <db:code role="parameter">item</db:code>.</db:para>
</db:section>
<db:section xml:id="insertColumn">
<db:title>void QTableWidget::insertColumn(int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>Inserts an empty column into the table at <db:code role="parameter">column</db:code>.</db:para>
</db:section>
<db:section xml:id="insertRow">
<db:title>void QTableWidget::insertRow(int <db:emphasis>row</db:emphasis>)</db:title>
<db:para>Inserts an empty row into the table at <db:code role="parameter">row</db:code>.</db:para>
</db:section>
<db:section xml:id="item">
<db:title>QTableWidgetItem *QTableWidget::item(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>) const</db:title>
<db:para>Returns the item for the given <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> if one has been set; otherwise returns 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#setItem">setItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemActivated">
<db:title>void QTableWidget::itemActivated(QTableWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>This signal is emitted when the specified <db:code role="parameter">item</db:code> has been activated</db:para>
</db:section>
<db:section xml:id="itemAt">
<db:title>QTableWidgetItem *QTableWidget::itemAt(const QPoint &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:para>Returns a pointer to the item at the given <db:code role="parameter">point</db:code>, or returns 0 if <db:code role="parameter">point</db:code> is not covered by an item in the table widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#item">item</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemAt-1">
<db:title>QTableWidgetItem *QTableWidget::itemAt(int <db:emphasis>ax</db:emphasis>, int <db:emphasis>ay</db:emphasis>) const</db:title>
<db:para>Returns the item at the position equivalent to <db:link xlink:href="qpoint.xml">QPoint</db:link>(<db:code role="parameter">ax</db:code>, <db:code role="parameter">ay</db:code>) in the table widget's coordinate system, or returns 0 if the specified point is not covered by an item in the table widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#item">item</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemChanged">
<db:title>void QTableWidget::itemChanged(QTableWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the data of <db:code role="parameter">item</db:code> has changed.</db:para>
</db:section>
<db:section xml:id="itemClicked">
<db:title>void QTableWidget::itemClicked(QTableWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever an item in the table is clicked. The <db:code role="parameter">item</db:code> specified is the item that was clicked.</db:para>
</db:section>
<db:section xml:id="itemDoubleClicked">
<db:title>void QTableWidget::itemDoubleClicked(QTableWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever an item in the table is double clicked. The <db:code role="parameter">item</db:code> specified is the item that was double clicked.</db:para>
</db:section>
<db:section xml:id="itemEntered">
<db:title>void QTableWidget::itemEntered(QTableWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>This signal is emitted when the mouse cursor enters an item. The <db:code role="parameter">item</db:code> is the item entered.</db:para>
<db:para>This signal is only emitted when mouseTracking is turned on, or when a mouse button is pressed while moving into an item.</db:para>
</db:section>
<db:section xml:id="itemFromIndex">
<db:title>[protected] QTableWidgetItem *QTableWidget::itemFromIndex(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns a pointer to the <db:link xlink:href="qtablewidgetitem.xml">QTableWidgetItem</db:link> associated with the given <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="itemPressed">
<db:title>void QTableWidget::itemPressed(QTableWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever an item in the table is pressed. The <db:code role="parameter">item</db:code> specified is the item that was pressed.</db:para>
</db:section>
<db:section xml:id="itemPrototype">
<db:title>const QTableWidgetItem *QTableWidget::itemPrototype() const</db:title>
<db:para>Returns the item prototype used by the table.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#setItemPrototype">setItemPrototype</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemSelectionChanged">
<db:title>void QTableWidget::itemSelectionChanged()</db:title>
<db:para>This signal is emitted whenever the selection changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#selectedItems">selectedItems</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml#isSelected">QTableWidgetItem::isSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="items">
<db:title>[protected] QList&lt;QTableWidgetItem *&gt; QTableWidget::items(const QMimeData *<db:emphasis>data</db:emphasis>) const</db:title>
<db:para>Returns a list of pointers to the items contained in the <db:code role="parameter">data</db:code> object. If the object was not created by a <db:link xlink:href="qtreewidget.xml">QTreeWidget</db:link> in the same process, the list is empty.</db:para>
</db:section>
<db:section xml:id="mimeData">
<db:title>[virtual protected] QMimeData *QTableWidget::mimeData(const QList&lt;QTableWidgetItem *&gt; <db:emphasis>items</db:emphasis>) const</db:title>
<db:para>Returns an object that contains a serialized description of the specified <db:code role="parameter">items</db:code>. The format used to describe the items is obtained from the <db:link xlink:href="qtablewidget.xml#mimeTypes">mimeTypes</db:link>() function.</db:para>
<db:para>If the list of items is empty, 0 is returned rather than a serialized empty list.</db:para>
</db:section>
<db:section xml:id="mimeTypes">
<db:title>[virtual protected] QStringList QTableWidget::mimeTypes() const</db:title>
<db:para>Returns a list of MIME types that can be used to describe a list of tablewidget items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#mimeData">mimeData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="openPersistentEditor">
<db:title>void QTableWidget::openPersistentEditor(QTableWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Opens an editor for the give <db:code role="parameter">item</db:code>. The editor remains open after editing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#closePersistentEditor">closePersistentEditor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeCellWidget">
<db:title>[since 4.3] void QTableWidget::removeCellWidget(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>Removes the widget set on the cell indicated by <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="removeColumn">
<db:title>void QTableWidget::removeColumn(int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>Removes the column <db:code role="parameter">column</db:code> and all its items from the table.</db:para>
</db:section>
<db:section xml:id="removeRow">
<db:title>void QTableWidget::removeRow(int <db:emphasis>row</db:emphasis>)</db:title>
<db:para>Removes the row <db:code role="parameter">row</db:code> and all its items from the table.</db:para>
</db:section>
<db:section xml:id="row">
<db:title>int QTableWidget::row(const QTableWidgetItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>Returns the row for the <db:code role="parameter">item</db:code>.</db:para>
</db:section>
<db:section xml:id="rowCount">
<db:title>int QTableWidget::rowCount() const</db:title>
<db:para>Returns the number of rows.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qtablewidget.xml#rowCount-prop">rowCount</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#setRowCount">setRowCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scrollToItem">
<db:title>void QTableWidget::scrollToItem(const QTableWidgetItem *<db:emphasis>item</db:emphasis>, QAbstractItemView::ScrollHint <db:emphasis>hint</db:emphasis> = EnsureVisible)</db:title>
<db:para>Scrolls the view if necessary to ensure that the <db:code role="parameter">item</db:code> is visible. The <db:code role="parameter">hint</db:code> parameter specifies more precisely where the <db:code role="parameter">item</db:code> should be located after the operation.</db:para>
</db:section>
<db:section xml:id="selectedItems">
<db:title>QList&lt;QTableWidgetItem *&gt; QTableWidget::selectedItems() const</db:title>
<db:para>Returns a list of all selected items.</db:para>
<db:para>This function returns a list of pointers to the contents of the selected cells. Use the <db:link xlink:href="qtableview.xml#selectedIndexes">selectedIndexes</db:link>() function to retrieve the complete selection <db:emphasis>including</db:emphasis> empty cells.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#selectedIndexes">selectedIndexes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedRanges">
<db:title>QList&lt;QTableWidgetSelectionRange&gt; QTableWidget::selectedRanges() const</db:title>
<db:para>Returns a list of all selected ranges.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetselectionrange.xml">QTableWidgetSelectionRange</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCellWidget">
<db:title>[since 4.1] void QTableWidget::setCellWidget(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Sets the given <db:code role="parameter">widget</db:code> to be displayed in the cell in the given <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code>, passing the ownership of the widget to the table.</db:para>
<db:para>If cell widget A is replaced with cell widget B, cell widget A will be deleted. For example, in the code snippet below, the <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> object will be deleted.</db:para>
<db:programlisting language="cpp">setCellWidget(row, column, new QLineEdit);
...
setCellWidget(row, column, new QTextEdit);
</db:programlisting>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#cellWidget">cellWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColumnCount">
<db:title>void QTableWidget::setColumnCount(int <db:emphasis>columns</db:emphasis>)</db:title>
<db:para>Sets the number of columns in this table's model to <db:code role="parameter">columns</db:code>. If this is less than <db:link xlink:href="qtablewidget.xml#columnCount">columnCount</db:link>(), the data in the unwanted columns is discarded.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qtablewidget.xml#columnCount-prop">columnCount</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#columnCount">columnCount</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidget.xml#setRowCount">setRowCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrentCell">
<db:title>[since 4.1] void QTableWidget::setCurrentCell(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>Sets the current cell to be the cell at position (<db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>).</db:para>
<db:para>Depending on the current <db:link xlink:href="qabstractitemview.xml#SelectionMode-enum">selection mode</db:link>, the cell may also be selected.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#setCurrentItem">setCurrentItem</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidget.xml#currentRow">currentRow</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidget.xml#currentColumn">currentColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrentCell-1">
<db:title>[since 4.4] void QTableWidget::setCurrentCell(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, QItemSelectionModel::SelectionFlags <db:emphasis>command</db:emphasis>)</db:title>
<db:para>Sets the current cell to be the cell at position (<db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>), using the given <db:code role="parameter">command</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#setCurrentItem">setCurrentItem</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidget.xml#currentRow">currentRow</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidget.xml#currentColumn">currentColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrentItem">
<db:title>void QTableWidget::setCurrentItem(QTableWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Sets the current item to <db:code role="parameter">item</db:code>.</db:para>
<db:para>Unless the selection mode is <db:link xlink:href="qabstractitemview.xml#SelectionMode-enum">NoSelection</db:link>, the item is also selected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#currentItem">currentItem</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidget.xml#setCurrentCell">setCurrentCell</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrentItem-1">
<db:title>[since 4.4] void QTableWidget::setCurrentItem(QTableWidgetItem *<db:emphasis>item</db:emphasis>, QItemSelectionModel::SelectionFlags <db:emphasis>command</db:emphasis>)</db:title>
<db:para>Sets the current item to be <db:code role="parameter">item</db:code>, using the given <db:code role="parameter">command</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#currentItem">currentItem</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidget.xml#setCurrentCell">setCurrentCell</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHorizontalHeaderItem">
<db:title>void QTableWidget::setHorizontalHeaderItem(int <db:emphasis>column</db:emphasis>, QTableWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Sets the horizontal header item for column <db:code role="parameter">column</db:code> to <db:code role="parameter">item</db:code>. If necessary, the column count is increased to fit the item. The previous header item (if there was one) is deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#horizontalHeaderItem">horizontalHeaderItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHorizontalHeaderLabels">
<db:title>void QTableWidget::setHorizontalHeaderLabels(const QStringList &amp;<db:emphasis>labels</db:emphasis>)</db:title>
<db:para>Sets the horizontal header labels using <db:code role="parameter">labels</db:code>.</db:para>
</db:section>
<db:section xml:id="setItem">
<db:title>void QTableWidget::setItem(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, QTableWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Sets the item for the given <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> to <db:code role="parameter">item</db:code>.</db:para>
<db:para>The table takes ownership of the item.</db:para>
<db:para>Note that if sorting is enabled (see <db:link xlink:href="qtableview.xml#sortingEnabled-prop">sortingEnabled</db:link>) and <db:code role="parameter">column</db:code> is the current sort column, the <db:code role="parameter">row</db:code> will be moved to the sorted position determined by <db:code role="parameter">item</db:code>.</db:para>
<db:para>If you want to set several items of a particular row (say, by calling setItem() in a loop), you may want to turn off sorting before doing so, and turn it back on afterwards; this will allow you to use the same <db:code role="parameter">row</db:code> argument for all items in the same row (i.e. setItem() will not move the row).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#item">item</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidget.xml#takeItem">takeItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemPrototype">
<db:title>void QTableWidget::setItemPrototype(const QTableWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Sets the item prototype for the table to the specified <db:code role="parameter">item</db:code>.</db:para>
<db:para>The table widget will use the item prototype clone function when it needs to create a new table item. For example when the user is editing in an empty cell. This is useful when you have a <db:link xlink:href="qtablewidgetitem.xml">QTableWidgetItem</db:link> subclass and want to make sure that <db:link xlink:href="qtablewidget.xml">QTableWidget</db:link> creates instances of your subclass.</db:para>
<db:para>The table takes ownership of the prototype.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#itemPrototype">itemPrototype</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRangeSelected">
<db:title>void QTableWidget::setRangeSelected(const QTableWidgetSelectionRange &amp;<db:emphasis>range</db:emphasis>, bool <db:emphasis>select</db:emphasis>)</db:title>
<db:para>Selects or deselects the <db:code role="parameter">range</db:code> depending on <db:code role="parameter">select</db:code>.</db:para>
</db:section>
<db:section xml:id="setRowCount">
<db:title>void QTableWidget::setRowCount(int <db:emphasis>rows</db:emphasis>)</db:title>
<db:para>Sets the number of rows in this table's model to <db:code role="parameter">rows</db:code>. If this is less than <db:link xlink:href="qtablewidget.xml#rowCount">rowCount</db:link>(), the data in the unwanted rows is discarded.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qtablewidget.xml#rowCount-prop">rowCount</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#rowCount">rowCount</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidget.xml#setColumnCount">setColumnCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVerticalHeaderItem">
<db:title>void QTableWidget::setVerticalHeaderItem(int <db:emphasis>row</db:emphasis>, QTableWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Sets the vertical header item for row <db:code role="parameter">row</db:code> to <db:code role="parameter">item</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#verticalHeaderItem">verticalHeaderItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVerticalHeaderLabels">
<db:title>void QTableWidget::setVerticalHeaderLabels(const QStringList &amp;<db:emphasis>labels</db:emphasis>)</db:title>
<db:para>Sets the vertical header labels using <db:code role="parameter">labels</db:code>.</db:para>
</db:section>
<db:section xml:id="sortItems">
<db:title>void QTableWidget::sortItems(int <db:emphasis>column</db:emphasis>, Qt::SortOrder <db:emphasis>order</db:emphasis> = Qt::AscendingOrder)</db:title>
<db:para>Sorts all the rows in the table widget based on <db:code role="parameter">column</db:code> and <db:code role="parameter">order</db:code>.</db:para>
</db:section>
<db:section xml:id="supportedDropActions">
<db:title>[virtual protected] Qt::DropActions QTableWidget::supportedDropActions() const</db:title>
<db:para>Returns the drop actions supported by this view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#DropAction-enum">Qt::DropActions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeHorizontalHeaderItem">
<db:title>[since 4.1] QTableWidgetItem *QTableWidget::takeHorizontalHeaderItem(int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>Removes the horizontal header item at <db:code role="parameter">column</db:code> from the header without deleting it.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
</db:section>
<db:section xml:id="takeItem">
<db:title>QTableWidgetItem *QTableWidget::takeItem(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>Removes the item at <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> from the table without deleting it.</db:para>
</db:section>
<db:section xml:id="takeVerticalHeaderItem">
<db:title>[since 4.1] QTableWidgetItem *QTableWidget::takeVerticalHeaderItem(int <db:emphasis>row</db:emphasis>)</db:title>
<db:para>Removes the vertical header item at <db:code role="parameter">row</db:code> from the header without deleting it.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
</db:section>
<db:section xml:id="verticalHeaderItem">
<db:title>QTableWidgetItem *QTableWidget::verticalHeaderItem(int <db:emphasis>row</db:emphasis>) const</db:title>
<db:para>Returns the vertical header item for row <db:code role="parameter">row</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#setVerticalHeaderItem">setVerticalHeaderItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visualColumn">
<db:title>int QTableWidget::visualColumn(int <db:emphasis>logicalColumn</db:emphasis>) const</db:title>
<db:para>Returns the visual column of the given <db:code role="parameter">logicalColumn</db:code>.</db:para>
</db:section>
<db:section xml:id="visualItemRect">
<db:title>QRect QTableWidget::visualItemRect(const QTableWidgetItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>Returns the rectangle on the viewport occupied by the item at <db:code role="parameter">item</db:code>.</db:para>
</db:section>
<db:section xml:id="visualRow">
<db:title>int QTableWidget::visualRow(int <db:emphasis>logicalRow</db:emphasis>) const</db:title>
<db:para>Returns the visual row of the given <db:code role="parameter">logicalRow</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QTableWidget</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qtablewidget.xml">QTableWidget</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="isItemSelected">
<db:title>[deprecated] bool QTableWidget::isItemSelected(const QTableWidgetItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns true if the <db:code role="parameter">item</db:code> is selected, otherwise returns false.</db:para>
<db:para>This function is deprecated. Use <db:link xlink:href="qtablewidgetitem.xml#isSelected">QTableWidgetItem::isSelected</db:link>() instead.</db:para>
</db:section>
<db:section xml:id="setItemSelected">
<db:title>[deprecated] void QTableWidget::setItemSelected(const QTableWidgetItem *<db:emphasis>item</db:emphasis>, bool <db:emphasis>select</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Selects or deselects <db:code role="parameter">item</db:code> depending on <db:code role="parameter">select</db:code>.</db:para>
<db:para>This function is deprecated. Use <db:link xlink:href="qtablewidgetitem.xml#setSelected">QTableWidgetItem::setSelected</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml#isItemSelected">isItemSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
