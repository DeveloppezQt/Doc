<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Quick MQTT Example</db:title>
<db:productname>QtMqtt</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt MQTT Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Registering QMqttClient to QML and using it in a Qt Quick user interface.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2017 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick 2.8
import QtQuick.Window 2.2
import QtQuick.Controls 2.1
import QtQuick.Layouts 1.1
import MqttClient 1.0

Window {
    visible: true
    width: 640
    height: 480
    title: qsTr(&quot;Qt Quick MQTT Subscription Example&quot;)
    id: root

    property var tempSubscription: 0

    MqttClient {
        id: client
        hostname: hostnameField.text
        port: portField.text
    }

    ListModel {
        id: messageModel
    }

    function addMessage(payload)
    {
        messageModel.insert(0, {&quot;payload&quot; : payload})

        if (messageModel.count &amp;gt;= 100)
            messageModel.remove(99)
    }

    GridLayout {
        anchors.fill: parent
        anchors.margins: 10
        columns: 2

        Label {
            text: &quot;Hostname:&quot;
            enabled: client.state === MqttClient.Disconnected
        }

        TextField {
            id: hostnameField
            Layout.fillWidth: true
            text: &quot;test.mosquitto.org&quot;
            placeholderText: &quot;&amp;lt;Enter host running MQTT broker&amp;gt;&quot;
            enabled: client.state === MqttClient.Disconnected
        }

        Label {
            text: &quot;Port:&quot;
            enabled: client.state === MqttClient.Disconnected
        }

        TextField {
            id: portField
            Layout.fillWidth: true
            text: &quot;1883&quot;
            placeholderText: &quot;&amp;lt;Port&amp;gt;&quot;
            inputMethodHints: Qt.ImhDigitsOnly
            enabled: client.state === MqttClient.Disconnected
        }

        Button {
            id: connectButton
            Layout.columnSpan: 2
            Layout.fillWidth: true
            text: client.state === MqttClient.Connected ? &quot;Disconnect&quot; : &quot;Connect&quot;
            onClicked: {
                if (client.state === MqttClient.Connected) {
                    client.disconnectFromHost()
                    messageModel.clear()
                    tempSubscription.destroy()
                    tempSubscription = 0
                } else
                    client.connectToHost()
            }
        }

        RowLayout {
            enabled: client.state === MqttClient.Connected
            Layout.columnSpan: 2
            Layout.fillWidth: true

            Label {
                text: &quot;Topic:&quot;
            }

            TextField {
                id: subField
                placeholderText: &quot;&amp;lt;Subscription topic&amp;gt;&quot;
                Layout.fillWidth: true
                enabled: tempSubscription === 0
            }

            Button {
                id: subButton
                text: &quot;Subscribe&quot;
                visible: tempSubscription === 0
                onClicked: {
                    if (subField.text.length === 0) {
                        console.log(&quot;No topic specified to subscribe to.&quot;)
                        return
                    }
                    tempSubscription = client.subscribe(subField.text)
                    tempSubscription.messageReceived.connect(addMessage)
                }
            }
        }

        ListView {
            id: messageView
            model: messageModel
            height: 300
            width: 200
            Layout.columnSpan: 2
            Layout.fillHeight: true
            Layout.fillWidth: true
            clip: true
            delegate: Rectangle {
                width: messageView.width
                height: 30
                color: index % 2 ? &quot;#DDDDDD&quot; : &quot;#888888&quot;
                radius: 5
                Text {
                    text: payload
                    anchors.centerIn: parent
                }
            }
        }

        Label {
            function stateToString(value) {
                if (value === 0)
                    return &quot;Disconnected&quot;
                else if (value === 1)
                    return &quot;Connecting&quot;
                else if (value === 2)
                    return &quot;Connected&quot;
                else
                    return &quot;Unknown&quot;
            }

            Layout.columnSpan: 2
            Layout.fillWidth: true
            color: &quot;#333333&quot;
            text: &quot;Status:&quot; + stateToString(client.state) + &quot;(&quot; + client.state + &quot;)&quot;
            enabled: client.state === MqttClient.Connected
        }
    }
}

</db:programlisting>
</db:article>
