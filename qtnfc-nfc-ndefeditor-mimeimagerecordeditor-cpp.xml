<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>NDEF Editor Example</db:title>
<db:productname>QtNfc</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt NFC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An example about reading and writing NFC Data Exchange Format (NDEF) messages to NFC Forum Tags.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtNfc module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;mimeimagerecordeditor.h&quot;
#include &quot;ui_mimeimagerecordeditor.h&quot;

#include &amp;lt;QtGui/QImageReader&amp;gt;
#include &amp;lt;QtWidgets/QFileDialog&amp;gt;
#include &amp;lt;QtCore/QBuffer&amp;gt;

static QString imageFormatToMimeType(const QByteArray &amp;amp;format)
{
    if (format == &quot;bmp&quot;)
        return QStringLiteral(&quot;image/bmp&quot;);
    else if (format == &quot;gif&quot;)
        return QStringLiteral(&quot;image/gif&quot;);
    else if (format == &quot;jpg&quot; || format == &quot;jpeg&quot;)
        return QStringLiteral(&quot;image/jpeg&quot;);
    else if (format == &quot;mng&quot;)
        return QStringLiteral(&quot;video/x-mng&quot;);
    else if (format == &quot;png&quot;)
        return QStringLiteral(&quot;image/png&quot;);
    else if (format == &quot;pbm&quot;)
        return QStringLiteral(&quot;image/x-portable-bitmap&quot;);
    else if (format == &quot;pgm&quot;)
        return QStringLiteral(&quot;image/x-portable-graymap&quot;);
    else if (format == &quot;ppm&quot;)
        return QStringLiteral(&quot;image/x-portable-pixmap&quot;);
    else if (format == &quot;tiff&quot;)
        return QStringLiteral(&quot;image/tiff&quot;);
    else if (format == &quot;xbm&quot;)
        return QStringLiteral(&quot;image/x-xbitmap&quot;);
    else if (format == &quot;xpm&quot;)
        return QStringLiteral(&quot;image/x-xpixmap&quot;);
    else if (format == &quot;svg&quot;)
        return QStringLiteral(&quot;image/svg+xml&quot;);
    else
        return QString();
}

MimeImageRecordEditor::MimeImageRecordEditor(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::MimeImageRecordEditor)
{
    ui-&amp;gt;setupUi(this);
}

MimeImageRecordEditor::~MimeImageRecordEditor()
{
    delete ui;
}

void MimeImageRecordEditor::setRecord(const QNdefRecord &amp;amp;record)
{
    m_record = record;

    QByteArray data = record.payload();
    QBuffer buffer(&amp;amp;data);
    buffer.open(QIODevice::ReadOnly);

    QImageReader reader(&amp;amp;buffer);

    ui-&amp;gt;mimeImageType-&amp;gt;setText(imageFormatToMimeType(reader.format()));

    ui-&amp;gt;mimeImageImage-&amp;gt;setPixmap(QPixmap::fromImage(reader.read()));
    ui-&amp;gt;mimeImageFile-&amp;gt;clear();
}

QNdefRecord MimeImageRecordEditor::record() const
{
    return m_record;
}

void MimeImageRecordEditor::on_mimeImageOpen_clicked()
{
    QString mimeDataFile = QFileDialog::getOpenFileName(this, tr(&quot;Select Image File&quot;));
    if (mimeDataFile.isEmpty())
        return;

    QFile imageFile(mimeDataFile);
    if (!imageFile.open(QIODevice::ReadOnly)) {
        ui-&amp;gt;mimeImageFile-&amp;gt;clear();
        ui-&amp;gt;mimeImageImage-&amp;gt;clear();
    }

    QByteArray imageData = imageFile.readAll();

    QBuffer buffer(&amp;amp;imageData);
    buffer.open(QIODevice::ReadOnly);

    QImageReader reader(&amp;amp;buffer);
    QString mimeType = imageFormatToMimeType(reader.format());
    ui-&amp;gt;mimeImageType-&amp;gt;setText(mimeType);

    QImage image = reader.read();

    ui-&amp;gt;mimeImageFile-&amp;gt;setText(mimeDataFile);
    ui-&amp;gt;mimeImageImage-&amp;gt;setPixmap(QPixmap::fromImage(image));

    m_record.setTypeNameFormat(QNdefRecord::Mime);
    m_record.setType(mimeType.toLatin1());
    m_record.setPayload(imageData);
}

</db:programlisting>
</db:article>
