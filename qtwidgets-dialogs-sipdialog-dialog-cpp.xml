<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SIP Dialog Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The SIP Dialog example shows how to create a dialog that is aware of the Windows Mobile SIP (Software Input Panel) and reacts to it.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;dialog.h&quot;

Dialog::Dialog()
{
    desktopGeometry = QApplication::desktop()-&gt;availableGeometry(0);

    setWindowTitle(tr(&quot;SIP Dialog Example&quot;));
    QScrollArea *scrollArea = new QScrollArea(this);
    QGroupBox *groupBox = new QGroupBox(scrollArea);
    groupBox-&gt;setTitle(tr(&quot;SIP Dialog Example&quot;));
    QGridLayout *gridLayout = new QGridLayout(groupBox);
    groupBox-&gt;setLayout(gridLayout);

    QLineEdit* lineEdit = new QLineEdit(groupBox);
    lineEdit-&gt;setText(tr(&quot;Open and close the SIP&quot;));
    lineEdit-&gt;setMinimumWidth(220);

    QLabel* label = new QLabel(groupBox);
    label-&gt;setText(tr(&quot;This dialog resizes if the SIP is opened&quot;));
    label-&gt;setMinimumWidth(220);

    QPushButton* button = new QPushButton(groupBox);
    button-&gt;setText(tr(&quot;Close Dialog&quot;));
    button-&gt;setMinimumWidth(220);

    if (desktopGeometry.height() &lt; 400)
        gridLayout-&gt;setVerticalSpacing(80);
    else
        gridLayout-&gt;setVerticalSpacing(150);

    gridLayout-&gt;addWidget(label);
    gridLayout-&gt;addWidget(lineEdit);
    gridLayout-&gt;addWidget(button);

    scrollArea-&gt;setWidget(groupBox);
    QHBoxLayout* layout = new QHBoxLayout();
    layout-&gt;addWidget(scrollArea);
    setLayout(layout);
    scrollArea-&gt;setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);

    connect(button, &amp;QAbstractButton::clicked, qApp, &amp;QApplication::closeAllWindows);
    connect(QApplication::desktop(), &amp;QDesktopWidget::workAreaResized,
        this, &amp;Dialog::desktopResized);
}

void Dialog::desktopResized(int screen)
{
    if (screen != 0)
        return;
    reactToSIP();
}

void Dialog::reactToSIP()
{
    QRect availableGeometry = QApplication::desktop()-&gt;availableGeometry(0);

    if (desktopGeometry != availableGeometry) {
        if (windowState() | Qt::WindowMaximized)
            setWindowState(windowState() &amp; ~Qt::WindowMaximized);

        setGeometry(availableGeometry);
    }

    desktopGeometry = availableGeometry;
}

</db:programlisting>
</db:article>
