<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Serialization</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Serializations provided by Qt API.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The purpose of serialization is to save the state of an object to be able to recreate it when needed. It allows you to perform actions like:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Sending the object to a remote application by using a web service</db:para>
</db:listitem>
<db:listitem>
<db:para>Passing the object as a JSON or XML string</db:para>
</db:listitem>
<db:listitem>
<db:para>Saving and restoring user information or sharing it across applications</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The Qt API provides support for serialization for several use cases:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="json.xml">JSON</db:link> support in Qt provides an easy to use C++ API to parse, modify and save JSON data. <db:link xlink:href="cbor.xml">CBOR Support in Qt</db:link> is a compact form of binary data encoding that is a superset of JSON.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdatastream.xml">QDataStream</db:link> provides serialization of binary data to a <db:link xlink:href="qiodevice.xml">QIODevice</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtxml-module.xml">Qt XML C++ Classes</db:link> provide C++ implementations of the <db:link xlink:href="xml-streaming.xml">XML Streaming</db:link> and DOM standards for XML</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="cbor.xml">CBOR</db:link> is Qt's implementation for the CBOR serialization format.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qsettings.xml">QSettings</db:link> provides a way of serializing and storing platform independent application settings.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="advantages-of-json-and-cbor">
<db:title>Advantages of JSON and CBOR</db:title>
<db:para>When you use <db:link xlink:href="json.xml">JSON</db:link> information is stored in a <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link> and a <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> takes care to stream values into a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>For example</db:para>
<db:programlisting language="cpp">QJsonObject jobject;
jobject[&quot;SensorID&quot;] = m_id;
jobject[&quot;AmbientTemperature&quot;] = m_ambientTemperature;
jobject[&quot;ObjectTemperature&quot;] = m_objectTemperature;
jobject[&quot;AccelerometerX&quot;] = m_accelerometerX;
jobject[&quot;AccelerometerY&quot;] = m_accelerometerY;
jobject[&quot;AccelerometerZ&quot;] = m_accelerometerZ;
jobject[&quot;Altitude&quot;] = m_altitude;
jobject[&quot;Light&quot;] = m_light;
jobject[&quot;Humidity&quot;] = m_humidity;
QJsonDocument doc( jobject );

return doc.toJson();
</db:programlisting>
<db:para>JSON has several advantages:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Textual JSON is declarative, which makes it readable to humans</db:para>
</db:listitem>
<db:listitem>
<db:para>The information is structured</db:para>
</db:listitem>
<db:listitem>
<db:para>Exchanging generic information is easy</db:para>
</db:listitem>
<db:listitem>
<db:para>JSON allows extending messages with additional values</db:para>
</db:listitem>
<db:listitem>
<db:para>Many solutions exist to receive and parse JSON in cloud-based solutions</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:link xlink:href="cbor.xml">CBOR</db:link> is the Concise Binary Object Representation, a very compact form of binary data encoding that is a superset of JSON. It was created by the IETF Constrained RESTful Environments (CoRE) WG, which has been used in many new RFCs. CBOR shares many of the advantages of JSON, but sacrifices human readability for compactness.</db:para>
</db:section>
<db:section xml:id="advantages-of-qdatastream-classes">
<db:title>Advantages of QDataStream Classes</db:title>
<db:para><db:link xlink:href="qdatastream.xml">QDataStream</db:link> is a viable option when the whole flow of data is determined and not about to change. In addition, both the reader and the writer of the data must be written in Qt.</db:para>
<db:para>Adding support for this to a class requires two additional operators. For example, for a class named SensorInformation:</db:para>
<db:programlisting language="cpp">QDataStream &amp;amp;operator&amp;lt;&amp;lt;(QDataStream &amp;amp;, const SensorInformation &amp;amp;);
QDataStream &amp;amp;operator&amp;gt;&amp;gt;(QDataStream &amp;amp;, SensorInformation &amp;amp;);
</db:programlisting>
<db:para>The implementation for the serialization is shown below:</db:para>
<db:programlisting language="cpp">QDataStream &amp;amp;operator&amp;lt;&amp;lt;(QDataStream &amp;amp;out, const SensorInformation &amp;amp;item)
{
    QDataStream::FloatingPointPrecision prev = out.floatingPointPrecision();
    out.setFloatingPointPrecision(QDataStream::DoublePrecision);
    out &amp;lt;&amp;lt; item.m_id
        &amp;lt;&amp;lt; item.m_ambientTemperature
        &amp;lt;&amp;lt; item.m_objectTemperature
        &amp;lt;&amp;lt; item.m_accelerometerX
        &amp;lt;&amp;lt; item.m_accelerometerY
        &amp;lt;&amp;lt; item.m_accelerometerZ
        &amp;lt;&amp;lt; item.m_altitude
        &amp;lt;&amp;lt; item.m_light
        &amp;lt;&amp;lt; item.m_humidity;
    out.setFloatingPointPrecision(prev);
    return out;
}
</db:programlisting>
<db:para>Deserialization works similarly, but using the &gt;&gt; operator. For example, out &gt;&gt; item.m_id, and so on.</db:para>
<db:para>Usually, using <db:link xlink:href="qdatastream.xml">QDataStream</db:link> is faster than using textual JSON.</db:para>
</db:section>
<db:section xml:id="advantages-of-qt-xml-c-classes">
<db:title>Advantages of Qt XML C++ Classes</db:title>
<db:para>Qt provides both DOM classes and stream-based classes to read and write XML content.</db:para>
<db:para>Qt provides the <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> class that represents the XML document and two classes for reading and writing the XML through a simple streaming API: <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> and <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link>.</db:para>
<db:section xml:id="the-dom-xml-classes">
<db:title>The DOM XML Classes</db:title>
<db:para><db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> class represents the entire XML document. It is the root of the document tree and provides primary access to the document's data.</db:para>
</db:section>
<db:section xml:id="the-stream-based-xml-classes">
<db:title>The Stream-Based XML Classes</db:title>
<db:para>A stream reader reports an XML document as a stream of tokens. This differs from SAX as SAX applications provide handlers to receive XML events from the parser, whereas the <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> drives the loop, pulling tokens from the reader when they are needed. This pulling approach makes it possible to build recursive descent parsers, allowing XML parsing code to be split into different methods or classes.</db:para>
<db:para><db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> a parser for well-formed XML 1.0, excluding external parsed entities. Hence, data provided to the stream reader adheres to the W3C's criteria for well-formed XML, or an error will be raised. Functions such as atEnd(), error(), and hasError() can be used to test for such errors and obtain a description of them.</db:para>
<db:para>The <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link> is a streaming API that takes care of prefixing namespaces, when the namespaceUri is specified when writing elements or attributes.</db:para>
</db:section>
</db:section>
<db:section xml:id="classes-that-provide-serialization">
<db:title>Classes that Provide Serialization</db:title>
<db:variablelist role="qtserialization">
<db:varlistentry>
<db:term><db:link xlink:href="qtcborcommon.xml" xlink:role="">&lt;QtCborCommon&gt;</db:link></db:term>
<db:listitem>
<db:para>The &lt;QtCborCommon&gt; header contains definitions common to both the streaming classes (QCborStreamReader and QCborStreamWriter) and to QCborValue.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcborarray.xml" xlink:role="class">QCborArray</db:link></db:term>
<db:listitem>
<db:para>The QCborArray class is used to hold an array of CBOR elements.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcbormap.xml" xlink:role="class">QCborMap</db:link></db:term>
<db:listitem>
<db:para>The QCborMap class is used to hold an associative container representable in CBOR.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcborstreamreader.xml" xlink:role="class">QCborStreamReader</db:link></db:term>
<db:listitem>
<db:para>The QCborStreamReader class is a simple CBOR stream decoder, operating on either a QByteArray or QIODevice.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcborstreamwriter.xml" xlink:role="class">QCborStreamWriter</db:link></db:term>
<db:listitem>
<db:para>The QCborStreamWriter class is a simple CBOR encoder operating on a one-way stream.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcborvalue.xml" xlink:role="class">QCborValue</db:link></db:term>
<db:listitem>
<db:para>The QCborValue class encapsulates a value in CBOR.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qdatastream.xml" xlink:role="class">QDataStream</db:link></db:term>
<db:listitem>
<db:para>The QDataStream class provides serialization of binary data to a QIODevice.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qjsonarray.xml" xlink:role="class">QJsonArray</db:link></db:term>
<db:listitem>
<db:para>The QJsonArray class encapsulates a JSON array.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qjsondocument.xml" xlink:role="class">QJsonDocument</db:link></db:term>
<db:listitem>
<db:para>The QJsonDocument class provides a way to read and write JSON documents.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qjsonobject.xml" xlink:role="class">QJsonObject</db:link></db:term>
<db:listitem>
<db:para>The QJsonObject class encapsulates a JSON object.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qjsonparseerror.xml" xlink:role="class">QJsonParseError</db:link></db:term>
<db:listitem>
<db:para>The QJsonParseError class is used to report errors during JSON parsing.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qjsonvalue.xml" xlink:role="class">QJsonValue</db:link></db:term>
<db:listitem>
<db:para>The QJsonValue class encapsulates a value in JSON.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtextstream.xml" xlink:role="class">QTextStream</db:link></db:term>
<db:listitem>
<db:para>The QTextStream class provides a convenient interface for reading and writing text.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qxmlstreamreader.xml" xlink:role="class">QXmlStreamReader</db:link></db:term>
<db:listitem>
<db:para>The QXmlStreamReader class provides a fast parser for reading well-formed XML via a simple streaming API.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qxmlstreamwriter.xml" xlink:role="class">QXmlStreamWriter</db:link></db:term>
<db:listitem>
<db:para>The QXmlStreamWriter class provides an XML writer with a simple streaming API.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:article>
