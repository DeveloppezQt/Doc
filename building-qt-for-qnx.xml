<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Building Qt for QNX</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qnx-support.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Qt for QNX Support"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qnx-target-requirements.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Qt for QNX Runtime Target Requirements"/></db:extendedlink>
<db:abstract>
<db:para>Describes required packages and necessary configuration for building.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="setting-up-qnx-sdp">
<db:title>Setting up QNX SDP</db:title>
<db:para>Building Qt 6 requires downloading and installing of QNX SDP 7.1 from the <db:link xlink:href="http://www.qnx.com/">QNX website</db:link>.</db:para>
<db:note>
<db:para>A suitable license is required. <db:link xlink:href="mailto://info@qnx.com">Contact QNX</db:link> for more information.</db:para>
</db:note>
<db:para>The compiler and other parts of the tool chain are provided in the SDP packages. Initialize your build environment by running the QNX setup script from your SDP installation folder in a terminal, like so:</db:para>
<db:programlisting language="cpp" role="bad">source qnxsdp-env.sh
</db:programlisting>
</db:section>
<db:section xml:id="host-build">
<db:title>Host build</db:title>
<db:para>The cross-compiling Qt requires a host build of Qt being available. During the build, tools such as moc, rcc, qmlcachegen, qsb, are invoked from there. You can either <db:link xlink:href="https://doc.qt.io/qt-6/build-sources.html">build Qt from sources</db:link> for the host or install host build using online installer. However, it is advisable to ensure that you can build Qt for the desktop target on the host as well. For more detailed information please see <db:link xlink:href="https://www.qt.io/blog/qt-6-build-system">Cross-compiling Qt</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-a-toolchain-file-for-qnx">
<db:title>Creating a toolchain file for QNX</db:title>
<db:para>To cross-compile a project with CMake a toolchain file is needed. This CMake-language file sets the right values for the platform name, compiler/linker, and many other toolchain-specific things. A minimal toolchain file can be found from CMake documentation:</db:para>
<db:programlisting language="cpp" role="bad">set(CMAKE_SYSTEM_NAME QNX)

set(arch gcc_ntoarmv7le)

set(CMAKE_C_COMPILER qcc)
set(CMAKE_C_COMPILER_TARGET ${arch})
set(CMAKE_CXX_COMPILER q++)
set(CMAKE_CXX_COMPILER_TARGET ${arch})

set(CMAKE_SYSROOT $ENV{QNX_TARGET})
</db:programlisting>
<db:para>The arch variable can be set to either gcc_ntoarmv7le, gcc_ntoaarch64le or gcc_ntox86_64, depending on your target architecture.</db:para>
</db:section>
<db:section xml:id="configuring-and-building-qt-for-qnx">
<db:title>Configuring and building Qt for QNX</db:title>
<db:para>Assuming the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The toolchain file is called qnx.cmake and is located in $HOME.</db:para>
</db:listitem>
<db:listitem>
<db:para>The Qt repository checked out, at minimum the qtbase module, under $HOME/qt.</db:para>
</db:listitem>
<db:listitem>
<db:para>A host build of Qt in $HOME/qt-host.</db:para>
</db:listitem>
<db:listitem>
<db:para>The installation location on the local system will be $HOME/qnx-install.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>After creating and switching to the build directory run:</db:para>
<db:programlisting language="cpp" role="bad">cmake -GNinja -DCMAKE_TOOLCHAIN_FILE=$HOME/qnx.cmake  \
-DQT_HOST_PATH=$HOME/qt_host \
-DCMAKE_INSTALL_PREFIX=$HOME/qnx_install \
$HOME/qt
</db:programlisting>
<db:para>Once configuration completes without errors,build by running:</db:para>
<db:programlisting language="cpp">cmake --build . --parallel
</db:programlisting>
<db:para>Once built, run:</db:para>
<db:programlisting language="cpp">cmake --install .
</db:programlisting>
<db:para>Which will install the results to $HOME/qnx_install.</db:para>
<db:para>You can also configure Qt with the configure tool. Since Qt 6, this tool is a wrapper around CMake.</db:para>
</db:section>
<db:section xml:id="third-party-libraries">
<db:title>Third party libraries</db:title>
<db:para>Make sure that your system image contains the following additional 3rd-party libraries which are not always included in minimal QNX Neutrino RTOS images:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>libfontconfig</db:para>
</db:listitem>
<db:listitem>
<db:para>libfreetype</db:para>
</db:listitem>
<db:listitem>
<db:para>libiconv</db:para>
</db:listitem>
<db:listitem>
<db:para>libicui18n</db:para>
</db:listitem>
<db:listitem>
<db:para>libicudata</db:para>
</db:listitem>
<db:listitem>
<db:para>libicuuc</db:para>
</db:listitem>
<db:listitem>
<db:para>libpng14</db:para>
</db:listitem>
<db:listitem>
<db:para>libxml2</db:para>
</db:listitem>
<db:listitem>
<db:para>libsqlite3</db:para>
</db:listitem>
<db:listitem>
<db:para>libssl</db:para>
</db:listitem>
<db:listitem>
<db:para>libcrypto</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>This is not a complete list of shared libraries used by Qt on QNX Neutrino OS. Multiple shared libraries are already available in a typical OS image, or included by other parts of the system, for example Screen.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="configure-options.xml">Qt Configure Options</db:link></db:member>
<db:member><db:link xlink:href="configure-linux-device.xml#configuring-qt">Configuring Qt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
