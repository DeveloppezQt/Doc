<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>OpenGL Example (ActiveQt)</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The OpenGL example demonstrates the use of the default factory and <db:link xlink:href="qaxfactory.xml#isServer">QAxFactory::isServer</db:link>(), and the implementation of an additional COM interface using <db:link xlink:href="qaxbindable.xml">QAxBindable</db:link> and <db:link xlink:href="qaxaggregated.xml">QAxAggregated</db:link>. The server executable can run both as an ActiveX server and as a stand-alone application.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The ActiveX control in this example uses the QGlWidget class in Qt to render an OpenGL scene in an ActiveX. The control exposes a few methods to change the scene.</db:para>
<db:para>The application uses <db:link xlink:href="qaxfactory.xml">QAxFactory</db:link> through the <db:code>QAXFACTORY_BEGIN()</db:code>, <db:code>QAXCLASS()</db:code> and <db:code>QAXFACTORY_END()</db:code> macros to expose the <db:code>GLBox</db:code> widget as an ActiveX control.</db:para>
<db:programlisting language="cpp">#include &lt;QAxFactory&gt;

QAXFACTORY_BEGIN(
    &quot;{2c3c183a-eeda-41a4-896e-3d9c12c3577d}&quot;, // type library ID
    &quot;{83e16271-6480-45d5-aaf1-3f40b7661ae4}&quot;) // application ID
    QAXCLASS(GLBox)
QAXFACTORY_END()

</db:programlisting>
<db:para>The implementation of <db:code>main</db:code> initializes the <db:link xlink:href="qapplication.xml">QApplication</db:link> object, and uses <db:code>QAxFactory::isServer()</db:code> to determine whether or not it is appropriate to create and show the application interface.</db:para>
<db:programlisting language="cpp">/*
  The main program is here.
*/

int main( int argc, char **argv )
{
    QApplication::setColorSpec( QApplication::CustomColor );
    QApplication a(argc,argv);

    if (QOpenGLContext::openGLModuleType() != QOpenGLContext::LibGL) {
        qWarning( &quot;This system does not support OpenGL. Exiting.&quot; );
        return -1;
    }

    if ( !QAxFactory::isServer() ) {
        GLObjectWindow w;
        w.resize( 400, 350 );
        w.show();
        return a.exec();
    }
    return a.exec();
}
</db:programlisting>
<db:para>The <db:code>GLBox</db:code> class inherits from both the <db:link xlink:href="qglwidget.xml" role="deprecated">QGLWidget</db:link> class to be able to render OpenGL, and from <db:link xlink:href="qaxbindable.xml">QAxBindable</db:link>.</db:para>
<db:programlisting language="cpp">#include &lt;QAxBindable&gt;

class GLBox : public QGLWidget,
              public QOpenGLFunctions_1_1,
              public QAxBindable
{
    Q_OBJECT
    Q_CLASSINFO(&quot;ClassID&quot;,     &quot;{5fd9c22e-ed45-43fa-ba13-1530bb6b03e0}&quot;)
    Q_CLASSINFO(&quot;InterfaceID&quot;, &quot;{33b051af-bb25-47cf-a390-5cfd2987d26a}&quot;)
    Q_CLASSINFO(&quot;EventsID&quot;,    &quot;{8c996c29-eafa-46ac-a6f9-901951e765b5}&quot;)
</db:programlisting>
<db:para>The class reimplements the <db:link xlink:href="qaxbindable.xml#createAggregate">QAxBindable::createAggregate</db:link>() function from <db:link xlink:href="qaxbindable.xml">QAxBindable</db:link> to return the pointer to a <db:link xlink:href="qaxaggregated.xml">QAxAggregated</db:link> object.</db:para>
<db:programlisting language="cpp">public:

GLBox( QWidget* parent, const char* name = 0 );
~GLBox();

QAxAggregated *createAggregate();

public slots:

void                setXRotation( int degrees );
</db:programlisting>
<db:para>The rest of the class declaration and the implementation of the OpenGL rendering is identical to the original &quot;box&quot; example.</db:para>
<db:para>The implementation file of the <db:code>GLBox</db:code> class includes the <db:code>objsafe.h</db:code> system header, in which the <db:code>IObjectSafety</db:code> COM interface is defined.</db:para>
<db:programlisting language="cpp">#include &lt;objsafe.h&gt;
</db:programlisting>
<db:para>A class <db:code>ObjectSafetyImpl</db:code> is declared using multiple inheritance to subclass the <db:link xlink:href="qaxaggregated.xml">QAxAggregated</db:link> class, and to implement the IObjectSafety interface.</db:para>
<db:programlisting language="cpp">class ObjectSafetyImpl : public QAxAggregated,
                         public IObjectSafety
{
public:
</db:programlisting>
<db:para>The class declares a default constructor, and implements the queryInterface function to support the IObjectSafety interface.</db:para>
<db:programlisting language="cpp">    ObjectSafetyImpl() {}

    long queryInterface( const QUuid &amp;iid, void **iface )
    {
        *iface = 0;
        if ( iid == IID_IObjectSafety )
            *iface = (IObjectSafety*)this;
        else
            return E_NOINTERFACE;

        AddRef();
        return S_OK;
    }

</db:programlisting>
<db:para>Since every COM interface inherits <db:code>IUnknown</db:code> the <db:code>QAXAGG_IUNKNOWN</db:code> macro is used to provide the default implementation of the <db:code>IUnknown</db:code> interface. The macro is defined to delegate all calls to <db:code>QueryInterface</db:code>, <db:code>AddRef</db:code> and <db:code>Release</db:code> to the interface returned by the controllingUnknown() function.</db:para>
<db:programlisting language="cpp">    QAXAGG_IUNKNOWN;

</db:programlisting>
<db:para>The implementation of the <db:code>IObjectSafety</db:code> interface provides the caller with information about supported and enabled safety options, and returns <db:code>S_OK</db:code> for all calls to indicate that the ActiveX control is safe.</db:para>
<db:programlisting language="cpp">    HRESULT WINAPI GetInterfaceSafetyOptions( REFIID riid, DWORD *pdwSupportedOptions, DWORD *pdwEnabledOptions )
    {
        *pdwSupportedOptions = INTERFACESAFE_FOR_UNTRUSTED_DATA | INTERFACESAFE_FOR_UNTRUSTED_CALLER;
        *pdwEnabledOptions = INTERFACESAFE_FOR_UNTRUSTED_DATA | INTERFACESAFE_FOR_UNTRUSTED_CALLER;
        return S_OK;
    }
    HRESULT WINAPI SetInterfaceSafetyOptions( REFIID riid, DWORD pdwSupportedOptions, DWORD pdwEnabledOptions )
    {
        return S_OK;
    }
};
</db:programlisting>
<db:para>The implementation of the <db:code>createAggregate()</db:code> function just returns a new <db:code>ObjectSafetyImpl</db:code> object.</db:para>
<db:programlisting language="cpp">QAxAggregated *GLBox::createAggregate()
{
    return new ObjectSafetyImpl();
}
</db:programlisting>
<db:para>To build the example you must first build the <db:link xlink:href="qaxserver-module.xml">QAxServer</db:link> library. Then run <db:code>qmake</db:code> and your make tool in <db:code>examples/activeqt/wrapper</db:code>.</db:para>
<db:para>The <db:link xlink:href="qaxserver-demo-opengl.xml">demonstration</db:link> requires your WebBrowser to support ActiveX controls, and scripting to be enabled.</db:para>
<db:para>In contrast to the other <db:link xlink:href="qaxserver-module.xml">QAxServer</db:link> examples Internet Explorer will not open a dialog box to ask the user whether or not the scripting of the GLBox control should be allowed (the exact browser behaviour depends on the security settings in the Internet Options dialog).</db:para>
<db:programlisting language="cpp">&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
function setRot( form )
{
    GLBox.setXRotation( form.XEdit.value );
    GLBox.setYRotation( form.YEdit.value );
    GLBox.setZRotation( form.ZEdit.value );
}
&lt;/SCRIPT&gt;

&lt;p /&gt;
An OpenGL scene:&lt;br /&gt;
&lt;object ID=&quot;GLBox&quot; CLASSID=&quot;CLSID:5fd9c22e-ed45-43fa-ba13-1530bb6b03e0&quot;
CODEBASE=&quot;http://qt.nokia.com/demos/openglax.cab&quot;&gt;
[Object not available! Did you forget to build and register the server?]
&lt;/object&gt;&lt;br /&gt;

&lt;form&gt;
Rotate the scene:&lt;br /&gt;
X:&lt;input type=&quot;edit&quot; ID=&quot;XEdit&quot; value=&quot;0&quot; /&gt;&lt;br /&gt;
Y:&lt;input type=&quot;edit&quot; name=&quot;YEdit&quot; value=&quot;0&quot; /&gt;&lt;br /&gt;
Z:&lt;input type=&quot;edit&quot; name=&quot;ZEdit&quot; value=&quot;0&quot; /&gt;&lt;br /&gt;
&lt;input type=&quot;button&quot; value=&quot;Set&quot; onClick=&quot;setRot(this.form)&quot; /&gt;
&lt;/form&gt;
</db:programlisting>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="activeqt/opengl/glbox.cpp">activeqt/opengl/glbox.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="activeqt/opengl/glbox.h">activeqt/opengl/glbox.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="activeqt/opengl/globjwin.cpp">activeqt/opengl/globjwin.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="activeqt/opengl/globjwin.h">activeqt/opengl/globjwin.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="activeqt/opengl/main.cpp">activeqt/opengl/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="activeqt/opengl/opengl.pro">activeqt/opengl/opengl.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
