<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Secure Sockets Layer (SSL) Classes</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Classes for secure communication over network sockets.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The classes below provide support for secure network communication using the Secure Sockets Layer (SSL) protocol, using the <db:link xlink:href="https://www.openssl.org/">OpenSSL Toolkit</db:link> to perform encryption and protocol handling.</db:para>
<db:para>From Qt version 5.6 onwards, the officially supported version for OpenSSL is 1.0.0 or later.</db:para>
<db:variablelist role="ssl">
<db:varlistentry>
<db:term><db:link xlink:href="qssldiffiehellmanparameters.xml" xlink:role="class">QSslDiffieHellmanParameters</db:link></db:term>
<db:listitem>
<db:para>The QSslDiffieHellmanParameters class provides an interface for Diffie-Hellman parameters for servers.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qsslellipticcurve.xml" xlink:role="class">QSslEllipticCurve</db:link></db:term>
<db:listitem>
<db:para>Represents an elliptic curve for use by elliptic-curve cipher algorithms.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qsslpresharedkeyauthenticator.xml" xlink:role="class">QSslPreSharedKeyAuthenticator</db:link></db:term>
<db:listitem>
<db:para>The QSslPreSharedKeyAuthenticator class provides authentication data for pre shared keys (PSK) ciphersuites.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qocspresponse-proxy.xml#QOcspCertificateStatus-enum" xlink:role="enum">QOcspResponse::QOcspCertificateStatus</db:link></db:term>
<db:listitem>
<db:para>Describes the Online Certificate Status</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qocspresponse-proxy.xml#QOcspRevocationReason-enum" xlink:role="enum">QOcspResponse::QOcspRevocationReason</db:link></db:term>
<db:listitem>
<db:para>Describes the reason for revocation</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="enabling-and-disabling-ssl-support">
<db:title>Enabling and Disabling SSL Support</db:title>
<db:para>When building Qt from source, the configuration system checks for the presence of the <db:code>openssl/opensslv.h</db:code> header provided by source or developer packages of OpenSSL.</db:para>
<db:para>By default, an SSL-enabled Qt library dynamically loads any installed OpenSSL library at run-time. However, it is possible to link against the library at compile-time by configuring Qt with the <db:code>-openssl-linked</db:code> option.</db:para>
<db:para>When building a version of Qt linked against OpenSSL, the build system will attempt to link with libssl and libcrypt libraries located in the default location on the developer's system. This location is configurable: set the <db:code>OPENSSL_LIBS</db:code> environment variable to contain the linker options required to link Qt against the installed library. For example, on a Unix/Linux system:</db:para>
<db:programlisting language="cpp">OPENSSL_LIBS='-L/opt/ssl/lib -lssl -lcrypto' ./configure -openssl-linked
</db:programlisting>
<db:para>To disable SSL support in a Qt build, configure Qt with the <db:code>-no-openssl</db:code> option.</db:para>
</db:section>
<db:section xml:id="datagram-transport-layer-security">
<db:title>Datagram Transport Layer Security</db:title>
<db:para>Datagram Transport Layer Security (DTLS) is a protocol that enables security for datagram-based applications, providing them with protection against eavesdropping, tampering, or message forgery. The DTLS protocol is based on the stream-oriented Transport Layer Security (TLS) protocol. <db:link xlink:href="qtnetwork-module.xml">QtNetwork</db:link> enables the use of DTLS with User Datagram Protocol (UDP), as defined by <db:link xlink:href="https://tools.ietf.org/html/rfc6347">RFC 6347</db:link>.</db:para>
</db:section>
<db:section xml:id="import-and-export-restrictions">
<db:title>Import and Export Restrictions</db:title>
<db:para>Qt binary installers include the OpenSSL libraries used by <db:link xlink:href="qtnetwork-module.xml">QtNetwork</db:link>. However, those are not automatically deployed with applications that are built with Qt. Import and export restrictions apply for some types of software, and for some parts of the world. Developers wishing to use SSL communication in their deployed applications should either ensure that their users have the appropriate libraries installed, or they should consult a suitably qualified legal professional to ensure that applications using code from the OpenSSL project are correctly certified for import and export in relevant regions of the world.</db:para>
</db:section>
</db:article>
