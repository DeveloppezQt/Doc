<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGraphicsItem Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> class is the base class for all graphical items in a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsItem</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractgraphicsshapeitem.xml" xlink:role="class">QAbstractGraphicsShapeItem</db:link>, <db:link xlink:href="qgraphicsitemgroup.xml" xlink:role="class">QGraphicsItemGroup</db:link>, <db:link xlink:href="qgraphicslineitem.xml" xlink:role="class">QGraphicsLineItem</db:link>, <db:link xlink:href="qgraphicsobject.xml" xlink:role="class">QGraphicsObject</db:link>, and <db:link xlink:href="qgraphicspixmapitem.xml" xlink:role="class">QGraphicsPixmapItem</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsItem is part of <db:simplelist><db:member>graphicsview-api</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>It provides a light-weight foundation for writing your own custom items. This includes defining the item's geometry, collision detection, its painting implementation and item interaction through its event handlers. <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> is part of the <db:link xlink:href="graphicsview.xml">Graphics View Framework</db:link></db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/graphicsview-items.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>For convenience, Qt provides a set of standard graphics items for the most common shapes. These are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsellipseitem.xml">QGraphicsEllipseItem</db:link> provides an ellipse item</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgraphicslineitem.xml">QGraphicsLineItem</db:link> provides a line item</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgraphicspathitem.xml">QGraphicsPathItem</db:link> provides an arbitrary path item</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link> provides a pixmap item</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgraphicspolygonitem.xml">QGraphicsPolygonItem</db:link> provides a polygon item</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsrectitem.xml">QGraphicsRectItem</db:link> provides a rectangular item</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgraphicssimpletextitem.xml">QGraphicsSimpleTextItem</db:link> provides a simple text label item</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgraphicstextitem.xml">QGraphicsTextItem</db:link> provides an advanced text browser item</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>All of an item's geometric information is based on its local coordinate system. The item's position, <db:link xlink:href="qgraphicsitem.xml#pos">pos</db:link>(), is the only function that does not operate in local coordinates, as it returns a position in parent coordinates. <db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link> describes the coordinate system in detail.</db:para>
<db:para>You can set whether an item should be visible (i.e., drawn, and accepting events), by calling <db:link xlink:href="qgraphicsitem.xml#setVisible">setVisible</db:link>(). Hiding an item will also hide its children. Similarly, you can enable or disable an item by calling <db:link xlink:href="qgraphicsitem.xml#setEnabled">setEnabled</db:link>(). If you disable an item, all its children will also be disabled. By default, items are both visible and enabled. To toggle whether an item is selected or not, first enable selection by setting the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemIsSelectable</db:link> flag, and then call <db:link xlink:href="qgraphicsitem.xml#setSelected">setSelected</db:link>(). Normally, selection is toggled by the scene, as a result of user interaction.</db:para>
<db:para>To write your own graphics item, you first create a subclass of <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>, and then start by implementing its two pure virtual public functions: <db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>(), which returns an estimate of the area painted by the item, and <db:link xlink:href="qgraphicsitem.xml#paint">paint</db:link>(), which implements the actual painting. For example:</db:para>
<db:programlisting language="cpp">class SimpleItem : public QGraphicsItem
{
public:
    QRectF boundingRect() const override
    {
        qreal penWidth = 1;
        return QRectF(-10 - penWidth / 2, -10 - penWidth / 2,
                      20 + penWidth, 20 + penWidth);
    }

    void paint(QPainter *painter, const QStyleOptionGraphicsItem *option,
               QWidget *widget) override
    {
        painter-&amp;gt;drawRoundedRect(-10, -10, 20, 20, 5, 5);
    }
};
</db:programlisting>
<db:para>The <db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>() function has many different purposes. <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> bases its item index on <db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>(), and <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> uses it both for culling invisible items, and for determining the area that needs to be recomposed when drawing overlapping items. In addition, <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>'s collision detection mechanisms use <db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>() to provide an efficient cut-off. The fine grained collision algorithm in <db:link xlink:href="qgraphicsitem.xml#collidesWithItem">collidesWithItem</db:link>() is based on calling <db:link xlink:href="qgraphicsitem.xml#shape">shape</db:link>(), which returns an accurate outline of the item's shape as a <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link>.</db:para>
<db:para><db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> expects all items <db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>() and <db:link xlink:href="qgraphicsitem.xml#shape">shape</db:link>() to remain unchanged unless it is notified. If you want to change an item's geometry in any way, you must first call <db:link xlink:href="qgraphicsitem.xml#prepareGeometryChange">prepareGeometryChange</db:link>() to allow <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> to update its bookkeeping.</db:para>
<db:para>Collision detection can be done in two ways:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Reimplement <db:link xlink:href="qgraphicsitem.xml#shape">shape</db:link>() to return an accurate shape for your item, and rely on the default implementation of <db:link xlink:href="qgraphicsitem.xml#collidesWithItem">collidesWithItem</db:link>() to do shape-shape intersection. This can be rather expensive if the shapes are complex.</db:para>
</db:listitem>
<db:listitem>
<db:para>Reimplement <db:link xlink:href="qgraphicsitem.xml#collidesWithItem">collidesWithItem</db:link>() to provide your own custom item and shape collision algorithm.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>The <db:link xlink:href="qgraphicsitem.xml#contains">contains</db:link>() function can be called to determine whether the item <db:emphasis>contains</db:emphasis> a point or not. This function can also be reimplemented by the item. The default behavior of <db:link xlink:href="qgraphicsitem.xml#contains">contains</db:link>() is based on calling <db:link xlink:href="qgraphicsitem.xml#shape">shape</db:link>().</db:para>
<db:para>Items can contain other items, and also be contained by other items. All items can have a parent item and a list of children. Unless the item has no parent, its position is in <db:emphasis>parent</db:emphasis> coordinates (i.e., the parent's local coordinates). Parent items propagate both their position and their transformation to all children.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/graphicsview-parentchild.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="transformations">
<db:title>Transformations</db:title>
<db:para><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> supports projective transformations in addition to its base position, <db:link xlink:href="qgraphicsitem.xml#pos">pos</db:link>(). There are several ways to change an item's transformation. For simple transformations, you can call either of the convenience functions <db:link xlink:href="qgraphicsitem.xml#setRotation">setRotation</db:link>() or <db:link xlink:href="qgraphicsitem.xml#setScale">setScale</db:link>(), or you can pass any transformation matrix to <db:link xlink:href="qgraphicsitem.xml#setTransform">setTransform</db:link>(). For advanced transformation control you also have the option of setting several combined transformations by calling <db:link xlink:href="qgraphicsitem.xml#setTransformations">setTransformations</db:link>().</db:para>
<db:para>Item transformations accumulate from parent to child, so if both a parent and child item are rotated 90 degrees, the child's total transformation will be 180 degrees. Similarly, if the item's parent is scaled to 2x its original size, its children will also be twice as large. An item's transformation does not affect its own local geometry; all geometry functions (e.g., <db:link xlink:href="qgraphicsitem.xml#contains">contains</db:link>(), <db:link xlink:href="qgraphicsitem.xml#update">update</db:link>(), and all the mapping functions) still operate in local coordinates. For convenience, <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> provides the functions <db:link xlink:href="qgraphicsitem.xml#sceneTransform">sceneTransform</db:link>(), which returns the item's total transformation matrix (including its position and all parents' positions and transformations), and <db:link xlink:href="qgraphicsitem.xml#scenePos">scenePos</db:link>(), which returns its position in scene coordinates. To reset an item's matrix, call <db:link xlink:href="qgraphicsitem.xml#resetTransform">resetTransform</db:link>().</db:para>
<db:para>Certain transformation operations produce a different outcome depending on the order in which they are applied. For example, if you scale an transform, and then rotate it, you may get a different result than if the transform was rotated first. However, the order you set the transformation properties on <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> does not affect the resulting transformation; <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> always applies the properties in a fixed, defined order:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The item's base transform is applied (<db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>())</db:para>
</db:listitem>
<db:listitem>
<db:para>The item's transformations list is applied in order (<db:link xlink:href="qgraphicsitem.xml#transformations">transformations</db:link>())</db:para>
</db:listitem>
<db:listitem>
<db:para>The item is rotated relative to its transform origin point (<db:link xlink:href="qgraphicsitem.xml#rotation">rotation</db:link>(), <db:link xlink:href="qgraphicsitem.xml#transformOriginPoint">transformOriginPoint</db:link>())</db:para>
</db:listitem>
<db:listitem>
<db:para>The item is scaled relative to its transform origin point (<db:link xlink:href="qgraphicsitem.xml#scale">scale</db:link>(), <db:link xlink:href="qgraphicsitem.xml#transformOriginPoint">transformOriginPoint</db:link>())</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="painting">
<db:title>Painting</db:title>
<db:para>The <db:link xlink:href="qgraphicsitem.xml#paint">paint</db:link>() function is called by <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> to paint the item's contents. The item has no background or default fill of its own; whatever is behind the item will shine through all areas that are not explicitly painted in this function. You can call <db:link xlink:href="qgraphicsitem.xml#update">update</db:link>() to schedule a repaint, optionally passing the rectangle that needs a repaint. Depending on whether or not the item is visible in a view, the item may or may not be repainted; there is no equivalent to <db:link xlink:href="qwidget.xml#repaint">QWidget::repaint</db:link>() in <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>.</db:para>
<db:para>Items are painted by the view, starting with the parent items and then drawing children, in ascending stacking order. You can set an item's stacking order by calling <db:link xlink:href="qgraphicsitem.xml#setZValue">setZValue</db:link>(), and test it by calling <db:link xlink:href="qgraphicsitem.xml#zValue">zValue</db:link>(), where items with low z-values are painted before items with high z-values. Stacking order applies to sibling items; parents are always drawn before their children.</db:para>
</db:section>
<db:section xml:id="sorting">
<db:title>Sorting</db:title>
<db:para>All items are drawn in a defined, stable order, and this same order decides which items will receive mouse input first when you click on the scene. Normally you don't have to worry about sorting, as the items follow a &quot;natural order&quot;, following the logical structure of the scene.</db:para>
<db:para>An item's children are stacked on top of the parent, and sibling items are stacked by insertion order (i.e., in the same order that they were either added to the scene, or added to the same parent). If you add item A, and then B, then B will be on top of A. If you then add C, the items' stacking order will be A, then B, then C.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/graphicsview-zorder.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example shows the stacking order of all limbs of the robot from the <db:link xlink:href="qtwidgets-graphicsview-dragdroprobot-example.xml">Drag and Drop Robot</db:link> example. The torso is the root item (all other items are children or descendants of the torso), so it is drawn first. Next, the head is drawn, as it is the first item in the torso's list of children. Then the upper left arm is drawn. As the lower arm is a child of the upper arm, the lower arm is then drawn, followed by the upper arm's next sibling, which is the upper right arm, and so on.</db:para>
<db:para>For advanced users, there are ways to alter how your items are sorted:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>You can call <db:link xlink:href="qgraphicsitem.xml#setZValue">setZValue</db:link>() on an item to explicitly stack it on top of, or under, other sibling items. The default Z value for an item is 0. Items with the same Z value are stacked by insertion order.</db:para>
</db:listitem>
<db:listitem>
<db:para>You can call <db:link xlink:href="qgraphicsitem.xml#stackBefore">stackBefore</db:link>() to reorder the list of children. This will directly modify the insertion order.</db:para>
</db:listitem>
<db:listitem>
<db:para>You can set the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemStacksBehindParent</db:link> flag to stack a child item behind its parent.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The stacking order of two sibling items also counts for each item's children and descendant items. So if one item is on top of another, then all its children will also be on top of all the other item's children as well.</db:para>
</db:section>
<db:section xml:id="events">
<db:title>Events</db:title>
<db:para><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> receives events from <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> through the virtual function <db:link xlink:href="qgraphicsitem.xml#sceneEvent">sceneEvent</db:link>(). This function distributes the most common events to a set of convenience event handlers:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsitem.xml#contextMenuEvent">contextMenuEvent</db:link>() handles context menu events</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsitem.xml#focusInEvent">focusInEvent</db:link>() and <db:link xlink:href="qgraphicsitem.xml#focusOutEvent">focusOutEvent</db:link>() handle focus in and out events</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsitem.xml#hoverEnterEvent">hoverEnterEvent</db:link>(), <db:link xlink:href="qgraphicsitem.xml#hoverMoveEvent">hoverMoveEvent</db:link>(), and <db:link xlink:href="qgraphicsitem.xml#hoverLeaveEvent">hoverLeaveEvent</db:link>() handles hover enter, move and leave events</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsitem.xml#inputMethodEvent">inputMethodEvent</db:link>() handles input events, for accessibility support</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsitem.xml#keyPressEvent">keyPressEvent</db:link>() and <db:link xlink:href="qgraphicsitem.xml#keyReleaseEvent">keyReleaseEvent</db:link>() handle key press and release events</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsitem.xml#mousePressEvent">mousePressEvent</db:link>(), <db:link xlink:href="qgraphicsitem.xml#mouseMoveEvent">mouseMoveEvent</db:link>(), <db:link xlink:href="qgraphicsitem.xml#mouseReleaseEvent">mouseReleaseEvent</db:link>(), and <db:link xlink:href="qgraphicsitem.xml#mouseDoubleClickEvent">mouseDoubleClickEvent</db:link>() handles mouse press, move, release, click and doubleclick events</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>You can filter events for any other item by installing event filters. This functionality is separate from Qt's regular event filters (see <db:link xlink:href="qobject.xml#installEventFilter">QObject::installEventFilter</db:link>()), which only work on subclasses of <db:link xlink:href="qobject.xml">QObject</db:link>. After installing your item as an event filter for another item by calling <db:link xlink:href="qgraphicsitem.xml#installSceneEventFilter">installSceneEventFilter</db:link>(), the filtered events will be received by the virtual function <db:link xlink:href="qgraphicsitem.xml#sceneEventFilter">sceneEventFilter</db:link>(). You can remove item event filters by calling <db:link xlink:href="qgraphicsitem.xml#removeSceneEventFilter">removeSceneEventFilter</db:link>().</db:para>
</db:section>
<db:section xml:id="custom-data">
<db:title>Custom Data</db:title>
<db:para>Sometimes it's useful to register custom data with an item, be it a custom item, or a standard item. You can call <db:link xlink:href="qgraphicsitem.xml#setData">setData</db:link>() on any item to store data in it using a key-value pair (the key being an integer, and the value is a <db:link xlink:href="qvariant.xml">QVariant</db:link>). To get custom data from an item, call <db:link xlink:href="qgraphicsitem.xml#data">data</db:link>(). This functionality is completely untouched by Qt itself; it is provided for the user's convenience.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:member>
<db:member><db:link xlink:href="graphicsview.xml">Graphics View Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CacheMode-enum">
<db:title>enum QGraphicsItem::CacheMode</db:title>
<db:enumsynopsis>
<db:enumname>CacheMode</db:enumname>
<db:enumitem>
<db:enumidentifier>NoCache</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemCoordinateCache</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DeviceCoordinateCache</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>'s cache modes. Caching is used to speed up rendering by allocating and rendering to an off-screen pixel buffer, which can be reused when the item requires redrawing. For some paint devices, the cache is stored directly in graphics memory, which makes rendering very quick.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::NoCache</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The default; all item caching is disabled. <db:link xlink:href="qgraphicsitem.xml#paint">QGraphicsItem::paint</db:link>() is called every time the item needs redrawing.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemCoordinateCache</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Caching is enabled for the item's logical (local) coordinate system. <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> creates an off-screen pixel buffer with a configurable size / resolution that you can pass to <db:link xlink:href="qgraphicsitem.xml#setCacheMode">QGraphicsItem::setCacheMode</db:link>(). Rendering quality will typically degrade, depending on the resolution of the cache and the item transformation. The first time the item is redrawn, it will render itself into the cache, and the cache is then reused for every subsequent expose. The cache is also reused as the item is transformed. To adjust the resolution of the cache, you can call <db:link xlink:href="qgraphicsitem.xml#setCacheMode">setCacheMode</db:link>() again.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::DeviceCoordinateCache</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Caching is enabled at the paint device level, in device coordinates. This mode is for items that can move, but are not rotated, scaled or sheared. If the item is transformed directly or indirectly, the cache will be regenerated automatically. Unlike ItemCoordinateCacheMode, DeviceCoordinateCache always renders at maximum quality.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setCacheMode">QGraphicsItem::setCacheMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="GraphicsItemChange-enum">
<db:title>enum QGraphicsItem::GraphicsItemChange</db:title>
<db:enumsynopsis>
<db:enumname>GraphicsItemChange</db:enumname>
<db:enumitem>
<db:enumidentifier>ItemPositionChange</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemVisibleChange</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemEnabledChange</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemSelectedChange</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemParentChange</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemChildAddedChange</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemChildRemovedChange</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemTransformChange</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemPositionHasChanged</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemTransformHasChanged</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemSceneChange</db:enumidentifier>
<db:enumvalue>11</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemVisibleHasChanged</db:enumidentifier>
<db:enumvalue>12</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemEnabledHasChanged</db:enumidentifier>
<db:enumvalue>13</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemSelectedHasChanged</db:enumidentifier>
<db:enumvalue>14</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemParentHasChanged</db:enumidentifier>
<db:enumvalue>15</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemSceneHasChanged</db:enumidentifier>
<db:enumvalue>16</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemCursorChange</db:enumidentifier>
<db:enumvalue>17</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemCursorHasChanged</db:enumidentifier>
<db:enumvalue>18</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemToolTipChange</db:enumidentifier>
<db:enumvalue>19</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemToolTipHasChanged</db:enumidentifier>
<db:enumvalue>20</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemFlagsChange</db:enumidentifier>
<db:enumvalue>21</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemFlagsHaveChanged</db:enumidentifier>
<db:enumvalue>22</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemZValueChange</db:enumidentifier>
<db:enumvalue>23</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemZValueHasChanged</db:enumidentifier>
<db:enumvalue>24</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemOpacityChange</db:enumidentifier>
<db:enumvalue>25</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemOpacityHasChanged</db:enumidentifier>
<db:enumvalue>26</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemScenePositionHasChanged</db:enumidentifier>
<db:enumvalue>27</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemRotationChange</db:enumidentifier>
<db:enumvalue>28</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemRotationHasChanged</db:enumidentifier>
<db:enumvalue>29</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemScaleChange</db:enumidentifier>
<db:enumvalue>30</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemScaleHasChanged</db:enumidentifier>
<db:enumvalue>31</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemTransformOriginPointChange</db:enumidentifier>
<db:enumvalue>32</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemTransformOriginPointHasChanged</db:enumidentifier>
<db:enumvalue>33</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the state changes that are notified by <db:link xlink:href="qgraphicsitem.xml#itemChange">QGraphicsItem::itemChange</db:link>(). The notifications are sent as the state changes, and in some cases, adjustments can be made (see the documentation for each change for details).</db:para>
<db:para>Note: Be careful with calling functions on the <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> itself inside <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>(), as certain function calls can lead to unwanted recursion. For example, you cannot call <db:link xlink:href="qgraphicsitem.xml#setPos">setPos</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() on an ItemPositionChange notification, as the <db:link xlink:href="qgraphicsitem.xml#setPos">setPos</db:link>() function will again call <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>(ItemPositionChange). Instead, you can return the new, adjusted position from <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemEnabledChange</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The item's enabled state changes. If the item is presently enabled, it will become disabled, and vice verca. The value argument is the new enabled state (i.e., true or false). Do not call <db:link xlink:href="qgraphicsitem.xml#setEnabled">setEnabled</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered. Instead, you can return the new state from <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemEnabledHasChanged</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>The item's enabled state has changed. The value argument is the new enabled state (i.e., true or false). Do not call <db:link xlink:href="qgraphicsitem.xml#setEnabled">setEnabled</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered. The return value is ignored.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemPositionChange</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The item's position changes. This notification is sent if the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemSendsGeometryChanges</db:link> flag is enabled, and when the item's local position changes, relative to its parent (i.e., as a result of calling <db:link xlink:href="qgraphicsitem.xml#setPos">setPos</db:link>() or <db:link xlink:href="qgraphicsitem.xml#moveBy">moveBy</db:link>()). The value argument is the new position (i.e., a <db:link xlink:href="qpointf.xml">QPointF</db:link>). You can call <db:link xlink:href="qgraphicsitem.xml#pos">pos</db:link>() to get the original position. Do not call <db:link xlink:href="qgraphicsitem.xml#setPos">setPos</db:link>() or <db:link xlink:href="qgraphicsitem.xml#moveBy">moveBy</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered; instead, you can return the new, adjusted position from <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>(). After this notification, <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> immediately sends the ItemPositionHasChanged notification if the position changed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemPositionHasChanged</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>The item's position has changed. This notification is sent if the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemSendsGeometryChanges</db:link> flag is enabled, and after the item's local position, relative to its parent, has changed. The value argument is the new position (the same as <db:link xlink:href="qgraphicsitem.xml#pos">pos</db:link>()), and <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> ignores the return value for this notification (i.e., a read-only notification).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemTransformChange</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>The item's transformation matrix changes. This notification is sent if the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemSendsGeometryChanges</db:link> flag is enabled, and when the item's local transformation matrix changes (i.e., as a result of calling <db:link xlink:href="qgraphicsitem.xml#setTransform">setTransform</db:link>(). The value argument is the new matrix (i.e., a <db:link xlink:href="qtransform.xml">QTransform</db:link>); to get the old matrix, call <db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>(). Do not call <db:link xlink:href="qgraphicsitem.xml#setTransform">setTransform</db:link>() or set any of the transformation properties in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered; instead, you can return the new matrix from <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>(). This notification is not sent if you change the transformation properties.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemTransformHasChanged</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>The item's transformation matrix has changed either because <db:link xlink:href="qgraphicsitem.xml#setTransform">setTransform</db:link> is called, or one of the transformation properties is changed. This notification is sent if the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemSendsGeometryChanges</db:link> flag is enabled, and after the item's local transformation matrix has changed. The value argument is the new matrix (same as <db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>()), and <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> ignores the return value for this notification (i.e., a read-only notification).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemRotationChange</db:code></db:para>
</db:td>
<db:td><db:code>28</db:code></db:td>
<db:td>
<db:para>The item's rotation property changes. This notification is sent if the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemSendsGeometryChanges</db:link> flag is enabled, and when the item's rotation property changes (i.e., as a result of calling <db:link xlink:href="qgraphicsitem.xml#setRotation">setRotation</db:link>()). The value argument is the new rotation (i.e., a double); to get the old rotation, call <db:link xlink:href="qgraphicsitem.xml#rotation">rotation</db:link>(). Do not call <db:link xlink:href="qgraphicsitem.xml#setRotation">setRotation</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered; instead, you can return the new rotation from <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemRotationHasChanged</db:code></db:para>
</db:td>
<db:td><db:code>29</db:code></db:td>
<db:td>
<db:para>The item's rotation property has changed. This notification is sent if the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemSendsGeometryChanges</db:link> flag is enabled, and after the item's rotation property has changed. The value argument is the new rotation (i.e., a double), and <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> ignores the return value for this notification (i.e., a read-only notification). Do not call <db:link xlink:href="qgraphicsitem.xml#setRotation">setRotation</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemScaleChange</db:code></db:para>
</db:td>
<db:td><db:code>30</db:code></db:td>
<db:td>
<db:para>The item's scale property changes. This notification is sent if the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemSendsGeometryChanges</db:link> flag is enabled, and when the item's scale property changes (i.e., as a result of calling <db:link xlink:href="qgraphicsitem.xml#setScale">setScale</db:link>()). The value argument is the new scale (i.e., a double); to get the old scale, call <db:link xlink:href="qgraphicsitem.xml#scale">scale</db:link>(). Do not call <db:link xlink:href="qgraphicsitem.xml#setScale">setScale</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered; instead, you can return the new scale from <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemScaleHasChanged</db:code></db:para>
</db:td>
<db:td><db:code>31</db:code></db:td>
<db:td>
<db:para>The item's scale property has changed. This notification is sent if the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemSendsGeometryChanges</db:link> flag is enabled, and after the item's scale property has changed. The value argument is the new scale (i.e., a double), and <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> ignores the return value for this notification (i.e., a read-only notification). Do not call <db:link xlink:href="qgraphicsitem.xml#setScale">setScale</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemTransformOriginPointChange</db:code></db:para>
</db:td>
<db:td><db:code>32</db:code></db:td>
<db:td>
<db:para>The item's transform origin point property changes. This notification is sent if the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemSendsGeometryChanges</db:link> flag is enabled, and when the item's transform origin point property changes (i.e., as a result of calling <db:link xlink:href="qgraphicsitem.xml#setTransformOriginPoint">setTransformOriginPoint</db:link>()). The value argument is the new origin point (i.e., a <db:link xlink:href="qpointf.xml">QPointF</db:link>); to get the old origin point, call <db:link xlink:href="qgraphicsitem.xml#transformOriginPoint">transformOriginPoint</db:link>(). Do not call <db:link xlink:href="qgraphicsitem.xml#setTransformOriginPoint">setTransformOriginPoint</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered; instead, you can return the new transform origin point from <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemTransformOriginPointHasChanged</db:code></db:para>
</db:td>
<db:td><db:code>33</db:code></db:td>
<db:td>
<db:para>The item's transform origin point property has changed. This notification is sent if the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemSendsGeometryChanges</db:link> flag is enabled, and after the item's transform origin point property has changed. The value argument is the new origin point (i.e., a <db:link xlink:href="qpointf.xml">QPointF</db:link>), and <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> ignores the return value for this notification (i.e., a read-only notification). Do not call <db:link xlink:href="qgraphicsitem.xml#setTransformOriginPoint">setTransformOriginPoint</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemSelectedChange</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The item's selected state changes. If the item is presently selected, it will become unselected, and vice verca. The value argument is the new selected state (i.e., true or false). Do not call <db:link xlink:href="qgraphicsitem.xml#setSelected">setSelected</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered; instead, you can return the new selected state from <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemSelectedHasChanged</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td>
<db:para>The item's selected state has changed. The value argument is the new selected state (i.e., true or false). Do not call <db:link xlink:href="qgraphicsitem.xml#setSelected">setSelected</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered. The return value is ignored.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemVisibleChange</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The item's visible state changes. If the item is presently visible, it will become invisible, and vice verca. The value argument is the new visible state (i.e., true or false). Do not call <db:link xlink:href="qgraphicsitem.xml#setVisible">setVisible</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered; instead, you can return the new visible state from <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemVisibleHasChanged</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>The item's visible state has changed. The value argument is the new visible state (i.e., true or false). Do not call <db:link xlink:href="qgraphicsitem.xml#setVisible">setVisible</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered. The return value is ignored.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemParentChange</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The item's parent changes. The value argument is the new parent item (i.e., a <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> pointer). Do not call <db:link xlink:href="qgraphicsitem.xml#setParentItem">setParentItem</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered; instead, you can return the new parent from <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemParentHasChanged</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
<db:td>
<db:para>The item's parent has changed. The value argument is the new parent (i.e., a pointer to a <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>). Do not call <db:link xlink:href="qgraphicsitem.xml#setParentItem">setParentItem</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered. The return value is ignored.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemChildAddedChange</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>A child is added to this item. The value argument is the new child item (i.e., a <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> pointer). Do not pass this item to any item's <db:link xlink:href="qgraphicsitem.xml#setParentItem">setParentItem</db:link>() function as this notification is delivered. The return value is unused; you cannot adjust anything in this notification. Note that the new child might not be fully constructed when this notification is sent; calling pure virtual functions on the child can lead to a crash.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemChildRemovedChange</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>A child is removed from this item. The value argument is the child item that is about to be removed (i.e., a <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> pointer). The return value is unused; you cannot adjust anything in this notification.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemSceneChange</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>The item is moved to a new scene. This notification is also sent when the item is added to its initial scene, and when it is removed. The item's <db:link xlink:href="qgraphicsitem.xml#scene">scene</db:link>() is the old scene, or <db:code>nullptr</db:code> if the item has not been added to a scene yet. The value argument is the new scene (i.e., a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> pointer), or <db:code>nullptr</db:code> if the item is removed from a scene. Do not override this change by passing this item to <db:link xlink:href="qgraphicsscene.xml#addItem">QGraphicsScene::addItem</db:link>() as this notification is delivered; instead, you can return the new scene from <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>(). Use this feature with caution; objecting to a scene change can quickly lead to unwanted recursion.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemSceneHasChanged</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td>
<db:para>The item's scene has changed. The item's <db:link xlink:href="qgraphicsitem.xml#scene">scene</db:link>() is the new scene. This notification is also sent when the item is added to its initial scene, and when it is removed.The value argument is the new scene (i.e., a pointer to a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>). Do not call setScene() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered. The return value is ignored.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemCursorChange</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
<db:td>
<db:para>The item's cursor changes. The value argument is the new cursor (i.e., a <db:link xlink:href="qcursor.xml">QCursor</db:link>). Do not call <db:link xlink:href="qgraphicsitem.xml#setCursor">setCursor</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered. Instead, you can return a new cursor from <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemCursorHasChanged</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
<db:td>
<db:para>The item's cursor has changed. The value argument is the new cursor (i.e., a <db:link xlink:href="qcursor.xml">QCursor</db:link>). Do not call <db:link xlink:href="qgraphicsitem.xml#setCursor">setCursor</db:link>() as this notification is delivered. The return value is ignored.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemToolTipChange</db:code></db:para>
</db:td>
<db:td><db:code>19</db:code></db:td>
<db:td>
<db:para>The item's tooltip changes. The value argument is the new tooltip (i.e., a <db:link xlink:href="qtooltip.xml">QToolTip</db:link>). Do not call <db:link xlink:href="qgraphicsitem.xml#setToolTip">setToolTip</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered. Instead, you can return a new tooltip from <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemToolTipHasChanged</db:code></db:para>
</db:td>
<db:td><db:code>20</db:code></db:td>
<db:td>
<db:para>The item's tooltip has changed. The value argument is the new tooltip (i.e., a <db:link xlink:href="qtooltip.xml">QToolTip</db:link>). Do not call <db:link xlink:href="qgraphicsitem.xml#setToolTip">setToolTip</db:link>() as this notification is delivered. The return value is ignored.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemFlagsChange</db:code></db:para>
</db:td>
<db:td><db:code>21</db:code></db:td>
<db:td>
<db:para>The item's flags change. The value argument is the new flags (i.e., a quint32). Do not call <db:link xlink:href="qgraphicsitem.xml#setFlags">setFlags</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered. Instead, you can return the new flags from <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemFlagsHaveChanged</db:code></db:para>
</db:td>
<db:td><db:code>22</db:code></db:td>
<db:td>
<db:para>The item's flags have changed. The value argument is the new flags (i.e., a quint32). Do not call <db:link xlink:href="qgraphicsitem.xml#setFlags">setFlags</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered. The return value is ignored.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemZValueChange</db:code></db:para>
</db:td>
<db:td><db:code>23</db:code></db:td>
<db:td>
<db:para>The item's Z-value changes. The value argument is the new Z-value (i.e., a double). Do not call <db:link xlink:href="qgraphicsitem.xml#setZValue">setZValue</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered. Instead, you can return a new Z-value from <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemZValueHasChanged</db:code></db:para>
</db:td>
<db:td><db:code>24</db:code></db:td>
<db:td>
<db:para>The item's Z-value has changed. The value argument is the new Z-value (i.e., a double). Do not call <db:link xlink:href="qgraphicsitem.xml#setZValue">setZValue</db:link>() as this notification is delivered. The return value is ignored.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemOpacityChange</db:code></db:para>
</db:td>
<db:td><db:code>25</db:code></db:td>
<db:td>
<db:para>The item's opacity changes. The value argument is the new opacity (i.e., a double). Do not call <db:link xlink:href="qgraphicsitem.xml#setOpacity">setOpacity</db:link>() in <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() as this notification is delivered. Instead, you can return a new opacity from <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemOpacityHasChanged</db:code></db:para>
</db:td>
<db:td><db:code>26</db:code></db:td>
<db:td>
<db:para>The item's opacity has changed. The value argument is the new opacity (i.e., a double). Do not call <db:link xlink:href="qgraphicsitem.xml#setOpacity">setOpacity</db:link>() as this notification is delivered. The return value is ignored.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemScenePositionHasChanged</db:code></db:para>
</db:td>
<db:td><db:code>27</db:code></db:td>
<db:td>
<db:para>The item's scene position has changed. This notification is sent if the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemSendsScenePositionChanges</db:link> flag is enabled, and after the item's scene position has changed (i.e., the position or transformation of the item itself or the position or transformation of any ancestor has changed). The value argument is the new scene position (the same as <db:link xlink:href="qgraphicsitem.xml#scenePos">scenePos</db:link>()), and <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> ignores the return value for this notification (i.e., a read-only notification).</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="GraphicsItemFlag-enum">
<db:title>enum QGraphicsItem::GraphicsItemFlag</db:title>
<db:bridgehead renderas="sect2">flags QGraphicsItem::GraphicsItemFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>GraphicsItemFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>ItemIsMovable</db:enumidentifier>
<db:enumvalue>0x1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemIsSelectable</db:enumidentifier>
<db:enumvalue>0x2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemIsFocusable</db:enumidentifier>
<db:enumvalue>0x4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemClipsToShape</db:enumidentifier>
<db:enumvalue>0x8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemClipsChildrenToShape</db:enumidentifier>
<db:enumvalue>0x10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemIgnoresTransformations</db:enumidentifier>
<db:enumvalue>0x20</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemIgnoresParentOpacity</db:enumidentifier>
<db:enumvalue>0x40</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemDoesntPropagateOpacityToChildren</db:enumidentifier>
<db:enumvalue>0x80</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemStacksBehindParent</db:enumidentifier>
<db:enumvalue>0x100</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemUsesExtendedStyleOption</db:enumidentifier>
<db:enumvalue>0x200</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemHasNoContents</db:enumidentifier>
<db:enumvalue>0x400</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemSendsGeometryChanges</db:enumidentifier>
<db:enumvalue>0x800</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemAcceptsInputMethod</db:enumidentifier>
<db:enumvalue>0x1000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemNegativeZStacksBehindParent</db:enumidentifier>
<db:enumvalue>0x2000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemIsPanel</db:enumidentifier>
<db:enumvalue>0x4000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemIsFocusScope</db:enumidentifier>
<db:enumvalue>0x8000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemSendsScenePositionChanges</db:enumidentifier>
<db:enumvalue>0x10000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemStopsClickFocusPropagation</db:enumidentifier>
<db:enumvalue>0x20000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemStopsFocusHandling</db:enumidentifier>
<db:enumvalue>0x40000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ItemContainsChildrenInShape</db:enumidentifier>
<db:enumvalue>0x80000</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QGraphicsItem::GraphicsItemFlags</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum describes different flags that you can set on an item to toggle different features in the item's behavior.</db:para>
<db:para>All flags are disabled by default.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemIsMovable</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>The item supports interactive movement using the mouse. By clicking on the item and then dragging, the item will move together with the mouse cursor. If the item has children, all children are also moved. If the item is part of a selection, all selected items are also moved. This feature is provided as a convenience through the base implementation of <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>'s mouse event handlers.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemIsSelectable</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>The item supports selection. Enabling this feature will enable <db:link xlink:href="qgraphicsitem.xml#setSelected">setSelected</db:link>() to toggle selection for the item. It will also let the item be selected automatically as a result of calling <db:link xlink:href="qgraphicsscene.xml#setSelectionArea">QGraphicsScene::setSelectionArea</db:link>(), by clicking on an item, or by using rubber band selection in <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemIsFocusable</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>The item supports keyboard input focus (i.e., it is an input item). Enabling this flag will allow the item to accept focus, which again allows the delivery of key events to <db:link xlink:href="qgraphicsitem.xml#keyPressEvent">QGraphicsItem::keyPressEvent</db:link>() and <db:link xlink:href="qgraphicsitem.xml#keyReleaseEvent">QGraphicsItem::keyReleaseEvent</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemClipsToShape</db:code></db:para>
</db:td>
<db:td><db:code>0x8</db:code></db:td>
<db:td>
<db:para>The item clips to its own shape. The item cannot draw or receive mouse, tablet, drag and drop or hover events outside its shape. It is disabled by default. This behavior is enforced by QGraphicsView::drawItems() or QGraphicsScene::drawItems(). This flag was introduced in Qt 4.3.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemClipsChildrenToShape</db:code></db:para>
</db:td>
<db:td><db:code>0x10</db:code></db:td>
<db:td>
<db:para>The item clips the painting of all its descendants to its own shape. Items that are either direct or indirect children of this item cannot draw outside this item's shape. By default, this flag is disabled; children can draw anywhere. This behavior is enforced by QGraphicsView::drawItems() or QGraphicsScene::drawItems(). This flag was introduced in Qt 4.3.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>This flag is similar to ItemContainsChildrenInShape but in addition enforces the containment by clipping the children.</db:para>
</db:note>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemIgnoresTransformations</db:code></db:para>
</db:td>
<db:td><db:code>0x20</db:code></db:td>
<db:td>
<db:para>The item ignores inherited transformations (i.e., its position is still anchored to its parent, but the parent or view rotation, zoom or shear transformations are ignored). This flag is useful for keeping text label items horizontal and unscaled, so they will still be readable if the view is transformed. When set, the item's view geometry and scene geometry will be maintained separately. You must call <db:link xlink:href="qgraphicsitem.xml#deviceTransform">deviceTransform</db:link>() to map coordinates and detect collisions in the view. By default, this flag is disabled. This flag was introduced in Qt 4.3.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>With this flag set you can still scale the item itself, and that scale transformation will influence the item's children.</db:para>
</db:note>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemIgnoresParentOpacity</db:code></db:para>
</db:td>
<db:td><db:code>0x40</db:code></db:td>
<db:td>
<db:para>The item ignores its parent's opacity. The item's effective opacity is the same as its own; it does not combine with the parent's opacity. This flags allows your item to keep its absolute opacity even if the parent is semitransparent. This flag was introduced in Qt 4.5.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemDoesntPropagateOpacityToChildren</db:code></db:para>
</db:td>
<db:td><db:code>0x80</db:code></db:td>
<db:td>
<db:para>The item doesn't propagate its opacity to its children. This flag allows you to create a semitransparent item that does not affect the opacity of its children. This flag was introduced in Qt 4.5.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemStacksBehindParent</db:code></db:para>
</db:td>
<db:td><db:code>0x100</db:code></db:td>
<db:td>
<db:para>The item is stacked behind its parent. By default, child items are stacked on top of the parent item. But setting this flag, the child will be stacked behind it. This flag is useful for drop shadow effects and for decoration objects that follow the parent item's geometry without drawing on top of it. This flag was introduced in Qt 4.5.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemUsesExtendedStyleOption</db:code></db:para>
</db:td>
<db:td><db:code>0x200</db:code></db:td>
<db:td>
<db:para>The item makes use of either <db:link xlink:href="qstyleoptiongraphicsitem.xml#exposedRect-var">exposedRect</db:link> in <db:link xlink:href="qstyleoptiongraphicsitem.xml">QStyleOptionGraphicsItem</db:link>. By default, the <db:link xlink:href="qstyleoptiongraphicsitem.xml#exposedRect-var">exposedRect</db:link> is initialized to the item's <db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>(). You can enable this flag for the style options to be set up with more fine-grained values. Use <db:link xlink:href="qstyleoptiongraphicsitem.xml#levelOfDetailFromTransform">QStyleOptionGraphicsItem::levelOfDetailFromTransform</db:link>() if you need a higher value. This flag was introduced in Qt 4.6.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemHasNoContents</db:code></db:para>
</db:td>
<db:td><db:code>0x400</db:code></db:td>
<db:td>
<db:para>The item does not paint anything (i.e., calling <db:link xlink:href="qgraphicsitem.xml#paint">paint</db:link>() on the item has no effect). You should set this flag on items that do not need to be painted to ensure that Graphics View avoids unnecessary painting preparations. This flag was introduced in Qt 4.6.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemSendsGeometryChanges</db:code></db:para>
</db:td>
<db:td><db:code>0x800</db:code></db:td>
<db:td>
<db:para>The item enables <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() notifications for <db:link xlink:href="qgraphicsitem.xml#GraphicsItemChange-enum">ItemPositionChange</db:link>, <db:link xlink:href="qgraphicsitem.xml#GraphicsItemChange-enum">ItemPositionHasChanged</db:link>, <db:link xlink:href="qgraphicsitem.xml#GraphicsItemChange-enum">ItemTransformChange</db:link>, <db:link xlink:href="qgraphicsitem.xml#GraphicsItemChange-enum">ItemTransformHasChanged</db:link>, <db:link xlink:href="qgraphicsitem.xml#GraphicsItemChange-enum">ItemRotationChange</db:link>, <db:link xlink:href="qgraphicsitem.xml#GraphicsItemChange-enum">ItemRotationHasChanged</db:link>, <db:link xlink:href="qgraphicsitem.xml#GraphicsItemChange-enum">ItemScaleChange</db:link>, <db:link xlink:href="qgraphicsitem.xml#GraphicsItemChange-enum">ItemScaleHasChanged</db:link>, <db:link xlink:href="qgraphicsitem.xml#GraphicsItemChange-enum">ItemTransformOriginPointChange</db:link>, and <db:link xlink:href="qgraphicsitem.xml#GraphicsItemChange-enum">ItemTransformOriginPointHasChanged</db:link>. For performance reasons, these notifications are disabled by default. You must enable this flag to receive notifications for position and transform changes. This flag was introduced in Qt 4.6.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemAcceptsInputMethod</db:code></db:para>
</db:td>
<db:td><db:code>0x1000</db:code></db:td>
<db:td>
<db:para>The item supports input methods typically used for Asian languages. This flag was introduced in Qt 4.6.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemNegativeZStacksBehindParent</db:code></db:para>
</db:td>
<db:td><db:code>0x2000</db:code></db:td>
<db:td>
<db:para>The item automatically stacks behind it's parent if it's z-value is negative. This flag enables <db:link xlink:href="qgraphicsitem.xml#setZValue">setZValue</db:link>() to toggle ItemStacksBehindParent. This flag was introduced in Qt 4.6.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemIsPanel</db:code></db:para>
</db:td>
<db:td><db:code>0x4000</db:code></db:td>
<db:td>
<db:para>The item is a panel. A panel provides activation and contained focus handling. Only one panel can be active at a time (see <db:link xlink:href="qgraphicsitem.xml#isActive">QGraphicsItem::isActive</db:link>()). When no panel is active, <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> activates all non-panel items. Window items (i.e., <db:link xlink:href="qgraphicsitem.xml#isWindow">QGraphicsItem::isWindow</db:link>() returns <db:code>true</db:code>) are panels. This flag was introduced in Qt 4.6.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemSendsScenePositionChanges</db:code></db:para>
</db:td>
<db:td><db:code>0x10000</db:code></db:td>
<db:td>
<db:para>The item enables <db:link xlink:href="qgraphicsitem.xml#itemChange">itemChange</db:link>() notifications for <db:link xlink:href="qgraphicsitem.xml#GraphicsItemChange-enum">ItemScenePositionHasChanged</db:link>. For performance reasons, these notifications are disabled by default. You must enable this flag to receive notifications for scene position changes. This flag was introduced in Qt 4.6.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::ItemContainsChildrenInShape</db:code></db:para>
</db:td>
<db:td><db:code>0x80000</db:code></db:td>
<db:td>
<db:para>This flag indicates that all of the item's direct or indirect children only draw within the item's shape. Unlike ItemClipsChildrenToShape, this restriction is not enforced. Set ItemContainsChildrenInShape when you manually assure that drawing is bound to the item's shape and want to avoid the cost associated with enforcing the clip. Setting this flag enables more efficient drawing and collision detection. The flag is disabled by default.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>If both this flag and ItemClipsChildrenToShape are set, the clip will be enforced. This is equivalent to just setting ItemClipsChildrenToShape.</db:para>
</db:note>
<db:para>This flag was introduced in Qt 5.4.</db:para>
<db:para>The <db:code>GraphicsItemFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;GraphicsItemFlag&gt;. </db:code>It stores an OR combination of <db:code>GraphicsItemFlag</db:code> values.</db:para>
</db:section>
<db:section xml:id="PanelModality-enum">
<db:title>enum QGraphicsItem::PanelModality</db:title>
<db:enumsynopsis>
<db:enumname>PanelModality</db:enumname>
<db:enumitem>
<db:enumidentifier>NonModal</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PanelModal</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SceneModal</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies the behavior of a modal panel. A modal panel is one that blocks input to other panels. Note that items that are children of a modal panel are not blocked.</db:para>
<db:para>The values are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::NonModal</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The panel is not modal and does not block input to other panels. This is the default value for panels.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::PanelModal</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The panel is modal to a single item hierarchy and blocks input to its parent pane, all grandparent panels, and all siblings of its parent and grandparent panels.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::SceneModal</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The window is modal to the entire scene and blocks input to all panels.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setPanelModality">QGraphicsItem::setPanelModality</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#panelModality">QGraphicsItem::panelModality</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">QGraphicsItem::ItemIsPanel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="anonymous-enum">
<db:title>enum QGraphicsItem::anonymous</db:title>
<db:enumsynopsis>
<db:enumname>anonymous</db:enumname>
<db:enumitem>
<db:enumidentifier>Type</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UserType</db:enumidentifier>
<db:enumvalue>65536</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>The value returned by the virtual <db:link xlink:href="qgraphicsitem.xml#type">type</db:link>() function in standard graphics item classes in Qt. All such standard graphics item classes in Qt are associated with a unique value for Type, e.g. the value returned by <db:link xlink:href="qgraphicspathitem.xml#type">QGraphicsPathItem::type</db:link>() is 2.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::Type</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:programlisting language="cpp">class QGraphicsPathItem : public QAbstractGraphicsShapeItem
{
 public:
  enum { Type = 2 };
    int type() const override { return Type; }
  ...
};
</db:programlisting>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:emphasis>::UserType</db:code></db:para>
</db:td>
<db:td><db:code>65536</db:code></db:td>
<db:td>
<db:para>The lowest value returned by the virtual <db:link xlink:href="qgraphicsitem.xml#type">type</db:link>() function for custom subclasses of <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>.</db:para>
<db:programlisting language="cpp">class CustomItem : public QGraphicsItem
{
public:
   enum { Type = UserType + 1 };

   int type() const override
   {
       // Enable the use of qgraphicsitem_cast with this item.
       return Type;
   }
   ...
};
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGraphicsItem">
<db:title>[explicit] QGraphicsItem::QGraphicsItem(QGraphicsItem *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QGraphicsItem</db:methodname>
<db:methodparam>
<db:type>QGraphicsItem *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsItem(QGraphicsItem *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> with the given <db:code role="parameter">parent</db:code> item. It does not modify the parent object returned by <db:link xlink:href="qobject.xml#parent">QObject::parent</db:link>().</db:para>
<db:para>If <db:code role="parameter">parent</db:code> is <db:code>nullptr</db:code>, you can add the item to a scene by calling <db:link xlink:href="qgraphicsscene.xml#addItem">QGraphicsScene::addItem</db:link>(). The item will then become a top-level item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">QGraphicsScene::addItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setParentItem">setParentItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QGraphicsItem">
<db:title>[virtual] QGraphicsItem::~QGraphicsItem()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QGraphicsItem</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGraphicsItem()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> and all its children. If this item is currently associated with a scene, the item will be removed from the scene before it is deleted.</db:para>
<db:note>
<db:para>It is more efficient to remove the item from the <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> before destroying the item.</db:para>
</db:note>
</db:section>
<db:section xml:id="acceptDrops">
<db:title>bool QGraphicsItem::acceptDrops() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>acceptDrops</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool acceptDrops() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this item can accept drag and drop events; otherwise, returns <db:code>false</db:code>. By default, items do not accept drag and drop events; items are transparent to drag and drop.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setAcceptDrops">setAcceptDrops</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="acceptHoverEvents">
<db:title>bool QGraphicsItem::acceptHoverEvents() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>acceptHoverEvents</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool acceptHoverEvents() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if an item accepts hover events (<db:link xlink:href="qgraphicsscenehoverevent.xml">QGraphicsSceneHoverEvent</db:link>); otherwise, returns <db:code>false</db:code>. By default, items do not accept hover events.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setAcceptHoverEvents">setAcceptHoverEvents</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setAcceptedMouseButtons">setAcceptedMouseButtons</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="acceptTouchEvents">
<db:title>bool QGraphicsItem::acceptTouchEvents() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>acceptTouchEvents</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool acceptTouchEvents() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if an item accepts <db:link xlink:href="qtouchevent.xml">touch events</db:link>; otherwise, returns <db:code>false</db:code>. By default, items do not accept touch events.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setAcceptTouchEvents">setAcceptTouchEvents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="acceptedMouseButtons">
<db:title>Qt::MouseButtons QGraphicsItem::acceptedMouseButtons() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::MouseButtons</db:type>
<db:methodname>acceptedMouseButtons</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::MouseButtons acceptedMouseButtons() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the mouse buttons that this item accepts mouse events for. By default, all mouse buttons are accepted.</db:para>
<db:para>If an item accepts a mouse button, it will become the mouse grabber item when a mouse press event is delivered for that mouse button. However, if the item does not accept the button, <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> will forward the mouse events to the first item beneath it that does.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setAcceptedMouseButtons">setAcceptedMouseButtons</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mousePressEvent">mousePressEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="advance">
<db:title>[virtual] void QGraphicsItem::advance(int <db:emphasis>phase</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>advance</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>phase</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void advance(int phase)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called twice for all items by the <db:link xlink:href="qgraphicsscene.xml#advance">QGraphicsScene::advance</db:link>() slot. In the first phase, all items are called with <db:code role="parameter">phase</db:code> == 0, indicating that items on the scene are about to advance, and then all items are called with <db:code role="parameter">phase</db:code> == 1. Reimplement this function to update your item if you need simple scene-controlled animation.</db:para>
<db:para>The default implementation does nothing.</db:para>
<db:para>This function is intended for animations. An alternative is to multiple-inherit from <db:link xlink:href="qobject.xml">QObject</db:link> and <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> and use the <db:link xlink:href="animation-overview.xml">Animation Framework</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#advance">QGraphicsScene::advance</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml">QTimeLine</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundingRect">
<db:title>[pure virtual] QRectF QGraphicsItem::boundingRect() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>boundingRect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF boundingRect() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This pure virtual function defines the outer bounds of the item as a rectangle; all painting must be restricted to inside an item's bounding rect. <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> uses this to determine whether the item requires redrawing.</db:para>
<db:para>Although the item's shape can be arbitrary, the bounding rect is always rectangular, and it is unaffected by the items' transformation.</db:para>
<db:para>If you want to change the item's bounding rectangle, you must first call <db:link xlink:href="qgraphicsitem.xml#prepareGeometryChange">prepareGeometryChange</db:link>(). This notifies the scene of the imminent change, so that it can update its item geometry index; otherwise, the scene will be unaware of the item's new geometry, and the results are undefined (typically, rendering artifacts are left within the view).</db:para>
<db:para>Reimplement this function to let <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> determine what parts of the widget, if any, need to be redrawn.</db:para>
<db:para>Note: For shapes that paint an outline / stroke, it is important to include half the pen width in the bounding rect. It is not necessary to compensate for antialiasing, though.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QRectF CircleItem::boundingRect() const
{
    qreal penWidth = 1;
    return QRectF(-radius - penWidth / 2, -radius - penWidth / 2,
                  diameter + penWidth, diameter + penWidth);
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#boundingRegion">boundingRegion</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#shape">shape</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#prepareGeometryChange">prepareGeometryChange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundingRegion">
<db:title>QRegion QGraphicsItem::boundingRegion(const QTransform &amp;<db:emphasis>itemToDeviceTransform</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>boundingRegion</db:methodname>
<db:methodparam>
<db:type>const QTransform &amp;</db:type>
<db:parameter>itemToDeviceTransform</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion boundingRegion(const QTransform &amp;itemToDeviceTransform) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the bounding region for this item. The coordinate space of the returned region depends on <db:code role="parameter">itemToDeviceTransform</db:code>. If you pass an identity <db:link xlink:href="qtransform.xml">QTransform</db:link> as a parameter, this function will return a local coordinate region.</db:para>
<db:para>The bounding region describes a coarse outline of the item's visual contents. Although it's expensive to calculate, it's also more precise than <db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>(), and it can help to avoid unnecessary repainting when an item is updated. This is particularly efficient for thin items (e.g., lines or simple polygons). You can tune the granularity for the bounding region by calling <db:link xlink:href="qgraphicsitem.xml#setBoundingRegionGranularity">setBoundingRegionGranularity</db:link>(). The default granularity is 0; in which the item's bounding region is the same as its bounding rect.</db:para>
<db:para><db:code role="parameter">itemToDeviceTransform</db:code> is the transformation from item coordinates to device coordinates. If you want this function to return a <db:link xlink:href="qregion.xml">QRegion</db:link> in scene coordinates, you can pass <db:link xlink:href="qgraphicsitem.xml#sceneTransform">sceneTransform</db:link>() as an argument.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#boundingRegionGranularity">boundingRegionGranularity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundingRegionGranularity">
<db:title>qreal QGraphicsItem::boundingRegionGranularity() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>boundingRegionGranularity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal boundingRegionGranularity() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item's bounding region granularity; a value between and including 0 and 1. The default value is 0 (i.e., the lowest granularity, where the bounding region corresponds to the item's bounding rectangle).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setBoundingRegionGranularity">setBoundingRegionGranularity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cacheMode">
<db:title>QGraphicsItem::CacheMode QGraphicsItem::cacheMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsItem::CacheMode</db:type>
<db:methodname>cacheMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsItem::CacheMode cacheMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the cache mode for this item. The default mode is <db:link xlink:href="qgraphicsitem.xml#CacheMode-enum">NoCache</db:link> (i.e., cache is disabled and all painting is immediate).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setCacheMode">setCacheMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="childItems">
<db:title>QList&lt;QGraphicsItem *&gt; QGraphicsItem::childItems() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QGraphicsItem *&gt;</db:type>
<db:methodname>childItems</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QGraphicsItem *&gt; childItems() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of this item's children.</db:para>
<db:para>The items are sorted by stacking order. This takes into account both the items' insertion order and their Z-values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setParentItem">setParentItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#zValue">zValue</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="childrenBoundingRect">
<db:title>QRectF QGraphicsItem::childrenBoundingRect() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>childrenBoundingRect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF childrenBoundingRect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the bounding rect of this item's descendants (i.e., its children, their children, etc.) in local coordinates. The rectangle will contain all descendants after they have been mapped to local coordinates. If the item has no children, this function returns an empty <db:link xlink:href="qrectf.xml">QRectF</db:link>.</db:para>
<db:para>This does not include this item's own bounding rect; it only returns its descendants' accumulated bounding rect. If you need to include this item's bounding rect, you can add <db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>() to childrenBoundingRect() using QRectF::operator|().</db:para>
<db:para>This function is linear in complexity; it determines the size of the returned bounding rect by iterating through all descendants.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneBoundingRect">sceneBoundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearFocus">
<db:title>void QGraphicsItem::clearFocus()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearFocus</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearFocus()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Takes keyboard input focus from the item.</db:para>
<db:para>If it has focus, a <db:link xlink:href="qgraphicsitem.xml#focusOutEvent">focus out event</db:link> is sent to this item to tell it that it is about to lose the focus.</db:para>
<db:para>Only items that set the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemIsFocusable</db:link> flag, or widgets that set an appropriate focus policy, can accept keyboard focus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setFocus">setFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#hasFocus">hasFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#focusPolicy-prop">QGraphicsWidget::focusPolicy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clipPath">
<db:title>QPainterPath QGraphicsItem::clipPath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPainterPath</db:type>
<db:methodname>clipPath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainterPath clipPath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this item's clip path, or an empty <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> if this item is not clipped. The clip path constrains the item's appearance and interaction (i.e., restricts the area the item can draw within and receive events for).</db:para>
<db:para>You can enable clipping by setting the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemClipsToShape</db:link> or <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemClipsChildrenToShape</db:link> flags. The item's clip path is calculated by intersecting all clipping ancestors' shapes. If the item sets <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemClipsToShape</db:link>, the final clip is intersected with the item's own shape.</db:para>
<db:note>
<db:para>Clipping introduces a performance penalty for all items involved; you should generally avoid using clipping if you can (e.g., if your items always draw inside <db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>() or <db:link xlink:href="qgraphicsitem.xml#shape">shape</db:link>() boundaries, clipping is not necessary).</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#isClipped">isClipped</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#shape">shape</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="collidesWithItem">
<db:title>[virtual] bool QGraphicsItem::collidesWithItem(const QGraphicsItem *<db:emphasis>other</db:emphasis>, Qt::ItemSelectionMode <db:emphasis>mode</db:emphasis> = Qt::IntersectsItemShape) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>collidesWithItem</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ItemSelectionMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Qt::IntersectsItemShape</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool collidesWithItem(const QGraphicsItem *other, Qt::ItemSelectionMode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this item collides with <db:code role="parameter">other</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>The <db:code role="parameter">mode</db:code> is applied to <db:code role="parameter">other</db:code>, and the resulting shape or bounding rectangle is then compared to this item's shape. The default value for <db:code role="parameter">mode</db:code> is <db:link xlink:href="qt.xml#ItemSelectionMode-enum">Qt::IntersectsItemShape</db:link>; <db:code role="parameter">other</db:code> collides with this item if it either intersects, contains, or is contained by this item's shape (see <db:link xlink:href="qt.xml#ItemSelectionMode-enum">Qt::ItemSelectionMode</db:link> for details).</db:para>
<db:para>The default implementation is based on shape intersection, and it calls <db:link xlink:href="qgraphicsitem.xml#shape">shape</db:link>() on both items. Because the complexity of arbitrary shape-shape intersection grows with an order of magnitude when the shapes are complex, this operation can be noticably time consuming. You have the option of reimplementing this function in a subclass of <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> to provide a custom algorithm. This allows you to make use of natural constraints in the shapes of your own items, in order to improve the performance of the collision detection. For instance, two untransformed perfectly circular items' collision can be determined very efficiently by comparing their positions and radii.</db:para>
<db:para>Keep in mind that when reimplementing this function and calling <db:link xlink:href="qgraphicsitem.xml#shape">shape</db:link>() or <db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>() on <db:code role="parameter">other</db:code>, the returned coordinates must be mapped to this item's coordinate system before any intersection can take place.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#shape">shape</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="collidesWithPath">
<db:title>[virtual] bool QGraphicsItem::collidesWithPath(const QPainterPath &amp;<db:emphasis>path</db:emphasis>, Qt::ItemSelectionMode <db:emphasis>mode</db:emphasis> = Qt::IntersectsItemShape) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>collidesWithPath</db:methodname>
<db:methodparam>
<db:type>const QPainterPath &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ItemSelectionMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Qt::IntersectsItemShape</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool collidesWithPath(const QPainterPath &amp;path, Qt::ItemSelectionMode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this item collides with <db:code role="parameter">path</db:code>.</db:para>
<db:para>The collision is determined by <db:code role="parameter">mode</db:code>. The default value for <db:code role="parameter">mode</db:code> is <db:link xlink:href="qt.xml#ItemSelectionMode-enum">Qt::IntersectsItemShape</db:link>; <db:code role="parameter">path</db:code> collides with this item if it either intersects, contains, or is contained by this item's shape.</db:para>
<db:para>Note that this function checks whether the item's shape or bounding rectangle (depending on <db:code role="parameter">mode</db:code>) is contained within <db:code role="parameter">path</db:code>, and not whether <db:code role="parameter">path</db:code> is contained within the items shape or bounding rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#collidesWithItem">collidesWithItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#shape">shape</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="collidingItems">
<db:title>QList&lt;QGraphicsItem *&gt; QGraphicsItem::collidingItems(Qt::ItemSelectionMode <db:emphasis>mode</db:emphasis> = Qt::IntersectsItemShape) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QGraphicsItem *&gt;</db:type>
<db:methodname>collidingItems</db:methodname>
<db:methodparam>
<db:type>Qt::ItemSelectionMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Qt::IntersectsItemShape</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QGraphicsItem *&gt; collidingItems(Qt::ItemSelectionMode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of all items that collide with this item.</db:para>
<db:para>The way collisions are detected is determined by applying <db:code role="parameter">mode</db:code> to items that are compared to this item, i.e., each item's shape or bounding rectangle is checked against this item's shape. The default value for <db:code role="parameter">mode</db:code> is <db:link xlink:href="qt.xml#ItemSelectionMode-enum">Qt::IntersectsItemShape</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#collidesWithItem">collidesWithItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="commonAncestorItem">
<db:title>QGraphicsItem *QGraphicsItem::commonAncestorItem(const QGraphicsItem *<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsItem *</db:type>
<db:methodname>commonAncestorItem</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsItem * commonAncestorItem(const QGraphicsItem *other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the closest common ancestor item of this item and <db:code role="parameter">other</db:code>, or <db:code>nullptr</db:code> if either <db:code role="parameter">other</db:code> is <db:code>nullptr</db:code>, or there is no common ancestor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#isAncestorOf">isAncestorOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains">
<db:title>[virtual] bool QGraphicsItem::contains(const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(const QPointF &amp;point) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this item contains <db:code role="parameter">point</db:code>, which is in local coordinates; otherwise, false is returned. It is most often called from <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> to determine what item is under the cursor, and for that reason, the implementation of this function should be as light-weight as possible.</db:para>
<db:para>By default, this function calls <db:link xlink:href="qgraphicsitem.xml#shape">shape</db:link>(), but you can reimplement it in a subclass to provide a (perhaps more efficient) implementation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#shape">shape</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#collidesWithPath">collidesWithPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contextMenuEvent">
<db:title>[virtual protected] void QGraphicsItem::contextMenuEvent(QGraphicsSceneContextMenuEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>contextMenuEvent</db:methodname>
<db:methodparam>
<db:type>QGraphicsSceneContextMenuEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void contextMenuEvent(QGraphicsSceneContextMenuEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This event handler can be reimplemented in a subclass to process context menu events. The <db:code role="parameter">event</db:code> parameter contains details about the event to be handled.</db:para>
<db:para>If you ignore the event (i.e., by calling <db:link xlink:href="qevent.xml#ignore">QEvent::ignore</db:link>()), <db:code role="parameter">event</db:code> will propagate to any item beneath this item. If no items accept the event, it will be ignored by the scene and propagate to the view.</db:para>
<db:para>It's common to open a <db:link xlink:href="qmenu.xml">QMenu</db:link> in response to receiving a context menu event. Example:</db:para>
<db:programlisting language="cpp">void CustomItem::contextMenuEvent(QGraphicsSceneContextMenuEvent *event)
{
    QMenu menu;
    QAction *removeAction = menu.addAction(&quot;Remove&quot;);
    QAction *markAction = menu.addAction(&quot;Mark&quot;);
    QAction *selectedAction = menu.exec(event-&amp;gt;screenPos());
    // ...
}
</db:programlisting>
<db:para>The default implementation ignores the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneEvent">sceneEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cursor">
<db:title>QCursor QGraphicsItem::cursor() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCursor</db:type>
<db:methodname>cursor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCursor cursor() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current cursor shape for the item. The mouse cursor will assume this shape when it's over this item. See the <db:link xlink:href="qt.xml#CursorShape-enum">list of predefined cursor objects</db:link> for a range of useful shapes.</db:para>
<db:para>An editor item might want to use an I-beam cursor:</db:para>
<db:programlisting language="cpp">item-&amp;gt;setCursor(Qt::IBeamCursor);
</db:programlisting>
<db:para>If no cursor has been set, the cursor of the item beneath is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setCursor">setCursor</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#hasCursor">hasCursor</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#unsetCursor">unsetCursor</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#cursor-prop">QWidget::cursor</db:link></db:member>
<db:member><db:link xlink:href="qguiapplication.xml#overrideCursor">QApplication::overrideCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>QVariant QGraphicsItem::data(int <db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>data</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant data(int key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this item's custom data for the key <db:code role="parameter">key</db:code> as a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>Custom item data is useful for storing arbitrary properties in any item. Example:</db:para>
<db:programlisting language="cpp">static const int ObjectName = 0;

QGraphicsItem *item = scene.itemAt(100, 50);
if (item-&amp;gt;data(ObjectName).toString().isEmpty()) {
    if (qgraphicsitem_cast&amp;lt;ButtonItem *&amp;gt;(item))
        item-&amp;gt;setData(ObjectName, &quot;Button&quot;);
}
</db:programlisting>
<db:para>Qt does not use this feature for storing data; it is provided solely for the convenience of the user.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deviceTransform">
<db:title>QTransform QGraphicsItem::deviceTransform(const QTransform &amp;<db:emphasis>viewportTransform</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTransform</db:type>
<db:methodname>deviceTransform</db:methodname>
<db:methodparam>
<db:type>const QTransform &amp;</db:type>
<db:parameter>viewportTransform</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTransform deviceTransform(const QTransform &amp;viewportTransform) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this item's device transformation matrix, using <db:code role="parameter">viewportTransform</db:code> to map from scene to device coordinates. This matrix can be used to map coordinates and geometrical shapes from this item's local coordinate system to the viewport's (or any device's) coordinate system. To map coordinates from the viewport, you must first invert the returned matrix.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QGraphicsRectItem rect;
rect.setPos(100, 100);

rect.deviceTransform(view-&amp;gt;viewportTransform()).map(QPointF(0, 0));
// returns the item's (0, 0) point in view's viewport coordinates

rect.deviceTransform(view-&amp;gt;viewportTransform()).inverted().map(QPointF(100, 100));
// returns view's viewport's (100, 100) coordinate in item coordinates
</db:programlisting>
<db:para>This function is the same as combining this item's scene transform with the view's viewport transform, but it also understands the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemIgnoresTransformations</db:link> flag. The device transform can be used to do accurate coordinate mapping (and collision detection) for untransformable items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setTransform">setTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#scenePos">scenePos</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#itemTransform">itemTransform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragEnterEvent">
<db:title>[virtual protected] void QGraphicsItem::dragEnterEvent(QGraphicsSceneDragDropEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dragEnterEvent</db:methodname>
<db:methodparam>
<db:type>QGraphicsSceneDragDropEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragEnterEvent(QGraphicsSceneDragDropEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented to receive drag enter events for this item. Drag enter events are generated as the cursor enters the item's area.</db:para>
<db:para>By accepting the event (i.e., by calling <db:link xlink:href="qevent.xml#accept">QEvent::accept</db:link>()), the item will accept drop events, in addition to receiving drag move and drag leave. Otherwise, the event will be ignored and propagate to the item beneath. If the event is accepted, the item will receive a drag move event before control goes back to the event loop.</db:para>
<db:para>A common implementation of dragEnterEvent accepts or ignores <db:code role="parameter">event</db:code> depending on the associated mime data in <db:code role="parameter">event</db:code>. Example:</db:para>
<db:programlisting language="cpp">CustomItem::CustomItem()
{
    setAcceptDrops(true);
    ...
}

void CustomItem::dragEnterEvent(QGraphicsSceneDragDropEvent *event)
{
    event-&amp;gt;setAccepted(event-&amp;gt;mimeData()-&amp;gt;hasFormat(&quot;text/plain&quot;));
}
</db:programlisting>
<db:para>Items do not receive drag and drop events by default; to enable this feature, call <db:code>setAcceptDrops(true)</db:code>.</db:para>
<db:para>The default implementation does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#dropEvent">dropEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#dragMoveEvent">dragMoveEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#dragLeaveEvent">dragLeaveEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragLeaveEvent">
<db:title>[virtual protected] void QGraphicsItem::dragLeaveEvent(QGraphicsSceneDragDropEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dragLeaveEvent</db:methodname>
<db:methodparam>
<db:type>QGraphicsSceneDragDropEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragLeaveEvent(QGraphicsSceneDragDropEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented to receive drag leave events for this item. Drag leave events are generated as the cursor leaves the item's area. Most often you will not need to reimplement this function, but it can be useful for resetting state in your item (e.g., highlighting).</db:para>
<db:para>Calling <db:link xlink:href="qevent.xml#ignore">QEvent::ignore</db:link>() or <db:link xlink:href="qevent.xml#accept">QEvent::accept</db:link>() on <db:code role="parameter">event</db:code> has no effect.</db:para>
<db:para>Items do not receive drag and drop events by default; to enable this feature, call <db:code>setAcceptDrops(true)</db:code>.</db:para>
<db:para>The default implementation does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#dragEnterEvent">dragEnterEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#dropEvent">dropEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#dragMoveEvent">dragMoveEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragMoveEvent">
<db:title>[virtual protected] void QGraphicsItem::dragMoveEvent(QGraphicsSceneDragDropEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dragMoveEvent</db:methodname>
<db:methodparam>
<db:type>QGraphicsSceneDragDropEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragMoveEvent(QGraphicsSceneDragDropEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented to receive drag move events for this item. Drag move events are generated as the cursor moves around inside the item's area. Most often you will not need to reimplement this function; it is used to indicate that only parts of the item can accept drops.</db:para>
<db:para>Calling <db:link xlink:href="qevent.xml#ignore">QEvent::ignore</db:link>() or <db:link xlink:href="qevent.xml#accept">QEvent::accept</db:link>() on <db:code role="parameter">event</db:code> toggles whether or not the item will accept drops at the position from the event. By default, <db:code role="parameter">event</db:code> is accepted, indicating that the item allows drops at the specified position.</db:para>
<db:para>Items do not receive drag and drop events by default; to enable this feature, call <db:code>setAcceptDrops(true)</db:code>.</db:para>
<db:para>The default implementation does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#dropEvent">dropEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#dragEnterEvent">dragEnterEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#dragLeaveEvent">dragLeaveEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dropEvent">
<db:title>[virtual protected] void QGraphicsItem::dropEvent(QGraphicsSceneDragDropEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dropEvent</db:methodname>
<db:methodparam>
<db:type>QGraphicsSceneDragDropEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dropEvent(QGraphicsSceneDragDropEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented to receive drop events for this item. Items can only receive drop events if the last drag move event was accepted.</db:para>
<db:para>Calling <db:link xlink:href="qevent.xml#ignore">QEvent::ignore</db:link>() or <db:link xlink:href="qevent.xml#accept">QEvent::accept</db:link>() on <db:code role="parameter">event</db:code> has no effect.</db:para>
<db:para>Items do not receive drag and drop events by default; to enable this feature, call <db:code>setAcceptDrops(true)</db:code>.</db:para>
<db:para>The default implementation does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#dragEnterEvent">dragEnterEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#dragMoveEvent">dragMoveEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#dragLeaveEvent">dragLeaveEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="effectiveOpacity">
<db:title>qreal QGraphicsItem::effectiveOpacity() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>effectiveOpacity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal effectiveOpacity() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this item's <db:emphasis>effective</db:emphasis> opacity, which is between 0.0 (transparent) and 1.0 (opaque). This value is a combination of this item's local opacity, and its parent and ancestors' opacities. The effective opacity decides how the item is rendered.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#opacity">opacity</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setOpacity">setOpacity</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#paint">paint</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemIgnoresParentOpacity</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemDoesntPropagateOpacityToChildren</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ensureVisible">
<db:title>void QGraphicsItem::ensureVisible(const QRectF &amp;<db:emphasis>rect</db:emphasis> = QRectF(), int <db:emphasis>xmargin</db:emphasis> = 50, int <db:emphasis>ymargin</db:emphasis> = 50)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>ensureVisible</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
<db:initializer>QRectF()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>xmargin</db:parameter>
<db:initializer>50</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>ymargin</db:parameter>
<db:initializer>50</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void ensureVisible(const QRectF &amp;rect, int xmargin, int ymargin)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If this item is part of a scene that is viewed by a <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>, this convenience function will attempt to scroll the view to ensure that <db:code role="parameter">rect</db:code> is visible inside the view's viewport. If <db:code role="parameter">rect</db:code> is a null rect (the default), <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> will default to the item's bounding rect. <db:code role="parameter">xmargin</db:code> and <db:code role="parameter">ymargin</db:code> are the number of pixels the view should use for margins.</db:para>
<db:para>If the specified rect cannot be reached, the contents are scrolled to the nearest valid position.</db:para>
<db:para>If this item is not viewed by a <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>, this function does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#ensureVisible">QGraphicsView::ensureVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ensureVisible-1">
<db:title>void QGraphicsItem::ensureVisible(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>, int <db:emphasis>xmargin</db:emphasis> = 50, int <db:emphasis>ymargin</db:emphasis> = 50)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>ensureVisible</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>xmargin</db:parameter>
<db:initializer>50</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>ymargin</db:parameter>
<db:initializer>50</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void ensureVisible(qreal x, qreal y, qreal w, qreal h, int xmargin, int ymargin)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#ensureVisible">ensureVisible</db:link>(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>), <db:code role="parameter">xmargin</db:code>, <db:code role="parameter">ymargin</db:code>).</db:para>
</db:section>
<db:section xml:id="filtersChildEvents">
<db:title>bool QGraphicsItem::filtersChildEvents() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>filtersChildEvents</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool filtersChildEvents() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this item filters child events (i.e., all events intended for any of its children are instead sent to this item); otherwise, false is returned.</db:para>
<db:para>The default value is false; child events are not filtered.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setFiltersChildEvents">setFiltersChildEvents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flags">
<db:title>QGraphicsItem::GraphicsItemFlags QGraphicsItem::flags() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsItem::GraphicsItemFlags</db:type>
<db:methodname>flags</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsItem::GraphicsItemFlags flags() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this item's flags. The flags describe what configurable features of the item are enabled and not. For example, if the flags include <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemIsFocusable</db:link>, the item can accept input focus.</db:para>
<db:para>By default, no flags are enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setFlags">setFlags</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setFlag">setFlag</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[virtual protected] void QGraphicsItem::focusInEvent(QFocusEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>focusInEvent</db:methodname>
<db:methodparam>
<db:type>QFocusEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusInEvent(QFocusEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented to receive focus in events for this item. The default implementation calls <db:link xlink:href="qgraphicsitem.xml#ensureVisible">ensureVisible</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#focusOutEvent">focusOutEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneEvent">sceneEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setFocus">setFocus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusItem">
<db:title>QGraphicsItem *QGraphicsItem::focusItem() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsItem *</db:type>
<db:methodname>focusItem</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsItem * focusItem() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If this item, a child or descendant of this item currently has input focus, this function will return a pointer to that item. If no descendant has input focus, <db:code>nullptr</db:code> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#hasFocus">hasFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setFocus">setFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#focusWidget">QWidget::focusWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[virtual protected] void QGraphicsItem::focusOutEvent(QFocusEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>focusOutEvent</db:methodname>
<db:methodparam>
<db:type>QFocusEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusOutEvent(QFocusEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented to receive focus out events for this item. The default implementation does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#focusInEvent">focusInEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneEvent">sceneEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setFocus">setFocus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusProxy">
<db:title>QGraphicsItem *QGraphicsItem::focusProxy() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsItem *</db:type>
<db:methodname>focusProxy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsItem * focusProxy() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this item's focus proxy, or <db:code>nullptr</db:code> if this item has no focus proxy.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setFocusProxy">setFocusProxy</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setFocus">setFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#hasFocus">hasFocus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="grabKeyboard">
<db:title>void QGraphicsItem::grabKeyboard()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>grabKeyboard</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void grabKeyboard()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Grabs the keyboard input.</db:para>
<db:para>The item will receive all keyboard input to the scene until one of the following events occur:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The item becomes invisible</db:para>
</db:listitem>
<db:listitem>
<db:para>The item is removed from the scene</db:para>
</db:listitem>
<db:listitem>
<db:para>The item is deleted</db:para>
</db:listitem>
<db:listitem>
<db:para>The item calls <db:link xlink:href="qgraphicsitem.xml#ungrabKeyboard">ungrabKeyboard</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para>Another item calls grabKeyboard(); the item will regain the keyboard grab when the other item calls <db:link xlink:href="qgraphicsitem.xml#ungrabKeyboard">ungrabKeyboard</db:link>().</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When an item gains the keyboard grab, it receives a <db:link xlink:href="qevent.xml#Type-enum">QEvent::GrabKeyboard</db:link> event. When it loses the keyboard grab, it receives a <db:link xlink:href="qevent.xml#Type-enum">QEvent::UngrabKeyboard</db:link> event. These events can be used to detect when your item gains or loses the keyboard grab through other means than gaining input focus.</db:para>
<db:para>It is almost never necessary to explicitly grab the keyboard in Qt, as Qt grabs and releases it sensibly. In particular, Qt grabs the keyboard when your item gains input focus, and releases it when your item loses input focus, or when the item is hidden.</db:para>
<db:para>Note that only visible items can grab keyboard input. Calling grabKeyboard() on an invisible item has no effect.</db:para>
<db:para>Keyboard events are not affected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#ungrabKeyboard">ungrabKeyboard</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#grabMouse">grabMouse</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setFocus">setFocus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="grabMouse">
<db:title>void QGraphicsItem::grabMouse()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>grabMouse</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void grabMouse()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Grabs the mouse input.</db:para>
<db:para>This item will receive all mouse events for the scene until any of the following events occurs:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The item becomes invisible</db:para>
</db:listitem>
<db:listitem>
<db:para>The item is removed from the scene</db:para>
</db:listitem>
<db:listitem>
<db:para>The item is deleted</db:para>
</db:listitem>
<db:listitem>
<db:para>The item call <db:link xlink:href="qgraphicsitem.xml#ungrabMouse">ungrabMouse</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para>Another item calls grabMouse(); the item will regain the mouse grab when the other item calls <db:link xlink:href="qgraphicsitem.xml#ungrabMouse">ungrabMouse</db:link>().</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When an item gains the mouse grab, it receives a <db:link xlink:href="qevent.xml#Type-enum">QEvent::GrabMouse</db:link> event. When it loses the mouse grab, it receives a <db:link xlink:href="qevent.xml#Type-enum">QEvent::UngrabMouse</db:link> event. These events can be used to detect when your item gains or loses the mouse grab through other means than receiving mouse button events.</db:para>
<db:para>It is almost never necessary to explicitly grab the mouse in Qt, as Qt grabs and releases it sensibly. In particular, Qt grabs the mouse when you press a mouse button, and keeps the mouse grabbed until you release the last mouse button. Also, <db:link xlink:href="qt.xml#WindowType-enum">Qt::Popup</db:link> widgets implicitly call grabMouse() when shown, and <db:link xlink:href="qgraphicsitem.xml#ungrabMouse">ungrabMouse</db:link>() when hidden.</db:para>
<db:para>Note that only visible items can grab mouse input. Calling grabMouse() on an invisible item has no effect.</db:para>
<db:para>Keyboard events are not affected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#mouseGrabberItem">QGraphicsScene::mouseGrabberItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#ungrabMouse">ungrabMouse</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#grabKeyboard">grabKeyboard</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="graphicsEffect">
<db:title>QGraphicsEffect *QGraphicsItem::graphicsEffect() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsEffect *</db:type>
<db:methodname>graphicsEffect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsEffect * graphicsEffect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to this item's effect if it has one; otherwise <db:code>nullptr</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setGraphicsEffect">setGraphicsEffect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="group">
<db:title>QGraphicsItemGroup *QGraphicsItem::group() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsItemGroup *</db:type>
<db:methodname>group</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsItemGroup * group() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to this item's item group, or <db:code>nullptr</db:code> if this item is not member of a group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setGroup">setGroup</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitemgroup.xml">QGraphicsItemGroup</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#createItemGroup">QGraphicsScene::createItemGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasCursor">
<db:title>bool QGraphicsItem::hasCursor() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasCursor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasCursor() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this item has a cursor set; otherwise, false is returned.</db:para>
<db:para>By default, items don't have any cursor set. <db:link xlink:href="qgraphicsitem.xml#cursor">cursor</db:link>() will return a standard pointing arrow cursor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#unsetCursor">unsetCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasFocus">
<db:title>bool QGraphicsItem::hasFocus() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasFocus</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasFocus() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this item is active, and it or its <db:link xlink:href="qgraphicsitem.xml#focusProxy">focus proxy</db:link> has keyboard input focus; otherwise, returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#focusItem">focusItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setFocus">setFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#setFocusItem">QGraphicsScene::setFocusItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#isActive">isActive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hide">
<db:title>void QGraphicsItem::hide()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>hide</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hide()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Hides the item (items are visible by default).</db:para>
<db:para>This convenience function is equivalent to calling <db:code>setVisible(false)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#show">show</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setVisible">setVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hoverEnterEvent">
<db:title>[virtual protected] void QGraphicsItem::hoverEnterEvent(QGraphicsSceneHoverEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>hoverEnterEvent</db:methodname>
<db:methodparam>
<db:type>QGraphicsSceneHoverEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hoverEnterEvent(QGraphicsSceneHoverEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented to receive hover enter events for this item. The default implementation calls <db:link xlink:href="qgraphicsitem.xml#update">update</db:link>(); otherwise it does nothing.</db:para>
<db:para>Calling <db:link xlink:href="qevent.xml#ignore">QEvent::ignore</db:link>() or <db:link xlink:href="qevent.xml#accept">QEvent::accept</db:link>() on <db:code role="parameter">event</db:code> has no effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#hoverMoveEvent">hoverMoveEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#hoverLeaveEvent">hoverLeaveEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneEvent">sceneEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setAcceptHoverEvents">setAcceptHoverEvents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hoverLeaveEvent">
<db:title>[virtual protected] void QGraphicsItem::hoverLeaveEvent(QGraphicsSceneHoverEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>hoverLeaveEvent</db:methodname>
<db:methodparam>
<db:type>QGraphicsSceneHoverEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hoverLeaveEvent(QGraphicsSceneHoverEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented to receive hover leave events for this item. The default implementation calls <db:link xlink:href="qgraphicsitem.xml#update">update</db:link>(); otherwise it does nothing.</db:para>
<db:para>Calling <db:link xlink:href="qevent.xml#ignore">QEvent::ignore</db:link>() or <db:link xlink:href="qevent.xml#accept">QEvent::accept</db:link>() on <db:code role="parameter">event</db:code> has no effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#hoverEnterEvent">hoverEnterEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#hoverMoveEvent">hoverMoveEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneEvent">sceneEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setAcceptHoverEvents">setAcceptHoverEvents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hoverMoveEvent">
<db:title>[virtual protected] void QGraphicsItem::hoverMoveEvent(QGraphicsSceneHoverEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>hoverMoveEvent</db:methodname>
<db:methodparam>
<db:type>QGraphicsSceneHoverEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hoverMoveEvent(QGraphicsSceneHoverEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented to receive hover move events for this item. The default implementation does nothing.</db:para>
<db:para>Calling <db:link xlink:href="qevent.xml#ignore">QEvent::ignore</db:link>() or <db:link xlink:href="qevent.xml#accept">QEvent::accept</db:link>() on <db:code role="parameter">event</db:code> has no effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#hoverEnterEvent">hoverEnterEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#hoverLeaveEvent">hoverLeaveEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneEvent">sceneEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setAcceptHoverEvents">setAcceptHoverEvents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inputMethodEvent">
<db:title>[virtual protected] void QGraphicsItem::inputMethodEvent(QInputMethodEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>inputMethodEvent</db:methodname>
<db:methodparam>
<db:type>QInputMethodEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void inputMethodEvent(QInputMethodEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented to receive input method events for this item. The default implementation ignores the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#inputMethodQuery">inputMethodQuery</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneEvent">sceneEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inputMethodHints">
<db:title>Qt::InputMethodHints QGraphicsItem::inputMethodHints() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::InputMethodHints</db:type>
<db:methodname>inputMethodHints</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::InputMethodHints inputMethodHints() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current input method hints of this item.</db:para>
<db:para>Input method hints are only relevant for input items. The hints are used by the input method to indicate how it should operate. For example, if the Qt::ImhNumbersOnly flag is set, the input method may change its visual components to reflect that only numbers can be entered.</db:para>
<db:para>The effect may vary between input method implementations.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setInputMethodHints">setInputMethodHints</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#inputMethodQuery">inputMethodQuery</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inputMethodQuery">
<db:title>[virtual protected] QVariant QGraphicsItem::inputMethodQuery(Qt::InputMethodQuery <db:emphasis>query</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>inputMethodQuery</db:methodname>
<db:methodparam>
<db:type>Qt::InputMethodQuery</db:type>
<db:parameter>query</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant inputMethodQuery(Qt::InputMethodQuery query) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This method is only relevant for input items. It is used by the input method to query a set of properties of the item to be able to support complex input method operations, such as support for surrounding text and reconversions. <db:code role="parameter">query</db:code> specifies which property is queried.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#inputMethodEvent">inputMethodEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qinputmethodevent.xml">QInputMethodEvent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="installSceneEventFilter">
<db:title>void QGraphicsItem::installSceneEventFilter(QGraphicsItem *<db:emphasis>filterItem</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>installSceneEventFilter</db:methodname>
<db:methodparam>
<db:type>QGraphicsItem *</db:type>
<db:parameter>filterItem</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void installSceneEventFilter(QGraphicsItem *filterItem)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Installs an event filter for this item on <db:code role="parameter">filterItem</db:code>, causing all events for this item to first pass through <db:code role="parameter">filterItem</db:code>'s <db:link xlink:href="qgraphicsitem.xml#sceneEventFilter">sceneEventFilter</db:link>() function.</db:para>
<db:para>To filter another item's events, install this item as an event filter for the other item. Example:</db:para>
<db:programlisting language="cpp">QGraphicsScene scene;
QGraphicsEllipseItem *ellipse = scene.addEllipse(QRectF(-10, -10, 20, 20));
QGraphicsLineItem *line = scene.addLine(QLineF(-10, -10, 20, 20));

line-&amp;gt;installSceneEventFilter(ellipse);
// line's events are filtered by ellipse's sceneEventFilter() function.

ellipse-&amp;gt;installSceneEventFilter(line);
// ellipse's events are filtered by line's sceneEventFilter() function.
</db:programlisting>
<db:para>An item can only filter events for other items in the same scene. Also, an item cannot filter its own events; instead, you can reimplement <db:link xlink:href="qgraphicsitem.xml#sceneEvent">sceneEvent</db:link>() directly.</db:para>
<db:para>Items must belong to a scene for scene event filters to be installed and used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#removeSceneEventFilter">removeSceneEventFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneEventFilter">sceneEventFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneEvent">sceneEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isActive">
<db:title>bool QGraphicsItem::isActive() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isActive</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isActive() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this item is active; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>An item can only be active if the scene is active. An item is active if it is, or is a descendent of, an active panel. Items in non-active panels are not active.</db:para>
<db:para>Items that are not part of a panel follow scene activation when the scene has no active panel.</db:para>
<db:para>Only active items can gain input focus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#isActive">QGraphicsScene::isActive</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#activePanel">QGraphicsScene::activePanel</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#panel">panel</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#isPanel">isPanel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAncestorOf">
<db:title>bool QGraphicsItem::isAncestorOf(const QGraphicsItem *<db:emphasis>child</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isAncestorOf</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>child</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAncestorOf(const QGraphicsItem *child) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this item is an ancestor of <db:code role="parameter">child</db:code> (i.e., if this item is <db:code role="parameter">child</db:code>'s parent, or one of <db:code role="parameter">child</db:code>'s parent's ancestors).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#parentItem">parentItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isBlockedByModalPanel">
<db:title>bool QGraphicsItem::isBlockedByModalPanel(QGraphicsItem **<db:emphasis>blockingPanel</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isBlockedByModalPanel</db:methodname>
<db:methodparam>
<db:type>QGraphicsItem **</db:type>
<db:parameter>blockingPanel</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isBlockedByModalPanel(QGraphicsItem **blockingPanel) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this item is blocked by a modal panel, false otherwise. If <db:code role="parameter">blockingPanel</db:code> is non-zero, <db:code role="parameter">blockingPanel</db:code> will be set to the modal panel that is blocking this item. If this item is not blocked, <db:code role="parameter">blockingPanel</db:code> will not be set by this function.</db:para>
<db:para>This function always returns <db:code>false</db:code> for items not in a scene.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#panelModality">panelModality</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setPanelModality">setPanelModality</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#PanelModality-enum">PanelModality</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isClipped">
<db:title>bool QGraphicsItem::isClipped() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isClipped</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isClipped() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this item is clipped. An item is clipped if it has either set the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemClipsToShape</db:link> flag, or if it or any of its ancestors has set the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemClipsChildrenToShape</db:link> flag.</db:para>
<db:para>Clipping affects the item's appearance (i.e., painting), as well as mouse and hover event delivery.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#clipPath">clipPath</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#shape">shape</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEnabled">
<db:title>bool QGraphicsItem::isEnabled() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEnabled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEnabled() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the item is enabled; otherwise, false is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setEnabled">setEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isObscured">
<db:title>bool QGraphicsItem::isObscured(const QRectF &amp;<db:emphasis>rect</db:emphasis> = QRectF()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isObscured</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
<db:initializer>QRectF()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isObscured(const QRectF &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">rect</db:code> is completely obscured by the opaque shape of any of colliding items above it (i.e., with a higher Z value than this item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#opaqueArea">opaqueArea</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isObscured-1">
<db:title>bool QGraphicsItem::isObscured(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isObscured</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isObscured(qreal x, qreal y, qreal w, qreal h) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#isObscured">isObscured</db:link>(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>)).</db:para>
</db:section>
<db:section xml:id="isObscuredBy">
<db:title>[virtual] bool QGraphicsItem::isObscuredBy(const QGraphicsItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isObscuredBy</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isObscuredBy(const QGraphicsItem *item) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this item's bounding rect is completely obscured by the opaque shape of <db:code role="parameter">item</db:code>.</db:para>
<db:para>The base implementation maps <db:code role="parameter">item</db:code>'s <db:link xlink:href="qgraphicsitem.xml#opaqueArea">opaqueArea</db:link>() to this item's coordinate system, and then checks if this item's <db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>() is fully contained within the mapped shape.</db:para>
<db:para>You can reimplement this function to provide a custom algorithm for determining whether this item is obscured by <db:code role="parameter">item</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#opaqueArea">opaqueArea</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#isObscured">isObscured</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isPanel">
<db:title>bool QGraphicsItem::isPanel() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isPanel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isPanel() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the item is a panel; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#panel">QGraphicsItem::panel</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemIsPanel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSelected">
<db:title>bool QGraphicsItem::isSelected() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSelected</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSelected() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this item is selected; otherwise, false is returned.</db:para>
<db:para>Items that are in a group inherit the group's selected state.</db:para>
<db:para>Items are not selected by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setSelected">setSelected</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#setSelectionArea">QGraphicsScene::setSelectionArea</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isUnderMouse">
<db:title>bool QGraphicsItem::isUnderMouse() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isUnderMouse</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isUnderMouse() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this item is currently under the mouse cursor in one of the views; otherwise, false is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#views">QGraphicsScene::views</db:link>()</db:member>
<db:member><db:link xlink:href="qcursor.xml#pos">QCursor::pos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isVisible">
<db:title>bool QGraphicsItem::isVisible() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isVisible</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isVisible() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the item is visible; otherwise, false is returned.</db:para>
<db:para>Note that the item's general visibility is unrelated to whether or not it is actually being visualized by a <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setVisible">setVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isVisibleTo">
<db:title>bool QGraphicsItem::isVisibleTo(const QGraphicsItem *<db:emphasis>parent</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isVisibleTo</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isVisibleTo(const QGraphicsItem *parent) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the item is visible to <db:code role="parameter">parent</db:code>; otherwise, false is returned. <db:code role="parameter">parent</db:code> can be <db:code>nullptr</db:code>, in which case this function will return whether the item is visible to the scene or not.</db:para>
<db:para>An item may not be visible to its ancestors even if <db:link xlink:href="qgraphicsitem.xml#isVisible">isVisible</db:link>() is true. It may also be visible to its ancestors even if <db:link xlink:href="qgraphicsitem.xml#isVisible">isVisible</db:link>() is false. If any ancestor is hidden, the item itself will be implicitly hidden, in which case this function will return false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#isVisible">isVisible</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setVisible">setVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isWidget">
<db:title>bool QGraphicsItem::isWidget() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isWidget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isWidget() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this item is a widget (i.e., <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link>); otherwise, returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isWindow">
<db:title>bool QGraphicsItem::isWindow() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isWindow</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isWindow() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the item is a <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> window, otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#windowFlags-prop">QGraphicsWidget::windowFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemChange">
<db:title>[virtual protected] QVariant QGraphicsItem::itemChange(QGraphicsItem::GraphicsItemChange <db:emphasis>change</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>itemChange</db:methodname>
<db:methodparam>
<db:type>QGraphicsItem::GraphicsItemChange</db:type>
<db:parameter>change</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant itemChange(QGraphicsItem::GraphicsItemChange change, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called by <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> to notify custom items that some part of the item's state changes. By reimplementing this function, you can react to a change, and in some cases (depending on <db:code role="parameter">change</db:code>), adjustments can be made.</db:para>
<db:para><db:code role="parameter">change</db:code> is the parameter of the item that is changing. <db:code role="parameter">value</db:code> is the new value; the type of the value depends on <db:code role="parameter">change</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QVariant Component::itemChange(GraphicsItemChange change, const QVariant &amp;amp;value)
{
    if (change == ItemPositionChange &amp;amp;&amp;amp; scene()) {
        // value is the new position.
        QPointF newPos = value.toPointF();
        QRectF rect = scene()-&amp;gt;sceneRect();
        if (!rect.contains(newPos)) {
            // Keep the item inside the scene rect.
            newPos.setX(qMin(rect.right(), qMax(newPos.x(), rect.left())));
            newPos.setY(qMin(rect.bottom(), qMax(newPos.y(), rect.top())));
            return newPos;
        }
    }
    return QGraphicsItem::itemChange(change, value);
}
</db:programlisting>
<db:para>The default implementation does nothing, and returns <db:code role="parameter">value</db:code>.</db:para>
<db:para>Note: Certain <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> functions cannot be called in a reimplementation of this function; see the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemChange-enum">GraphicsItemChange</db:link> documentation for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#GraphicsItemChange-enum">GraphicsItemChange</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemTransform">
<db:title>QTransform QGraphicsItem::itemTransform(const QGraphicsItem *<db:emphasis>other</db:emphasis>, bool *<db:emphasis>ok</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTransform</db:type>
<db:methodname>itemTransform</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTransform itemTransform(const QGraphicsItem *other, bool *ok) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qtransform.xml">QTransform</db:link> that maps coordinates from this item to <db:code role="parameter">other</db:code>. If <db:code role="parameter">ok</db:code> is not null, and if there is no such transform, the boolean pointed to by <db:code role="parameter">ok</db:code> will be set to false; otherwise it will be set to true.</db:para>
<db:para>This transform provides an alternative to the <db:link xlink:href="qgraphicsitem.xml#mapToItem">mapToItem</db:link>() or <db:link xlink:href="qgraphicsitem.xml#mapFromItem">mapFromItem</db:link>() functions, by returning the appropriate transform so that you can map shapes and coordinates yourself. It also helps you write more efficient code when repeatedly mapping between the same two items.</db:para>
<db:note>
<db:para>In rare circumstances, there is no transform that maps between two items.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToItem">mapToItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromItem">mapFromItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#deviceTransform">deviceTransform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[virtual protected] void QGraphicsItem::keyPressEvent(QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>keyPressEvent</db:methodname>
<db:methodparam>
<db:type>QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyPressEvent(QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented to receive key press events for this item. The default implementation ignores the event. If you reimplement this handler, the event will by default be accepted.</db:para>
<db:para>Note that key events are only received for items that set the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemIsFocusable</db:link> flag, and that have keyboard input focus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#keyReleaseEvent">keyReleaseEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setFocus">setFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#setFocusItem">QGraphicsScene::setFocusItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneEvent">sceneEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyReleaseEvent">
<db:title>[virtual protected] void QGraphicsItem::keyReleaseEvent(QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>keyReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyReleaseEvent(QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented to receive key release events for this item. The default implementation ignores the event. If you reimplement this handler, the event will by default be accepted.</db:para>
<db:para>Note that key events are only received for items that set the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemIsFocusable</db:link> flag, and that have keyboard input focus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#keyPressEvent">keyPressEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setFocus">setFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#setFocusItem">QGraphicsScene::setFocusItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneEvent">sceneEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromItem">
<db:title>QPointF QGraphicsItem::mapFromItem(const QGraphicsItem *<db:emphasis>item</db:emphasis>, const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>mapFromItem</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF mapFromItem(const QGraphicsItem *item, const QPointF &amp;point) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the point <db:code role="parameter">point</db:code>, which is in <db:code role="parameter">item</db:code>'s coordinate system, to this item's coordinate system, and returns the mapped coordinate.</db:para>
<db:para>If <db:code role="parameter">item</db:code> is <db:code>nullptr</db:code>, this function returns the same as <db:link xlink:href="qgraphicsitem.xml#mapFromScene">mapFromScene</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#itemTransform">itemTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromParent">mapFromParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromScene">mapFromScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToItem">mapToItem</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromItem-1">
<db:title>QPolygonF QGraphicsItem::mapFromItem(const QGraphicsItem *<db:emphasis>item</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>mapFromItem</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF mapFromItem(const QGraphicsItem *item, const QRectF &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the rectangle <db:code role="parameter">rect</db:code>, which is in <db:code role="parameter">item</db:code>'s coordinate system, to this item's coordinate system, and returns the mapped rectangle as a polygon.</db:para>
<db:para>If <db:code role="parameter">item</db:code> is <db:code>nullptr</db:code>, this function returns the same as <db:link xlink:href="qgraphicsitem.xml#mapFromScene">mapFromScene</db:link>()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#itemTransform">itemTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToItem">mapToItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromParent">mapFromParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromItem-2">
<db:title>QPolygonF QGraphicsItem::mapFromItem(const QGraphicsItem *<db:emphasis>item</db:emphasis>, const QPolygonF &amp;<db:emphasis>polygon</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>mapFromItem</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPolygonF &amp;</db:type>
<db:parameter>polygon</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF mapFromItem(const QGraphicsItem *item, const QPolygonF &amp;polygon) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the polygon <db:code role="parameter">polygon</db:code>, which is in <db:code role="parameter">item</db:code>'s coordinate system, to this item's coordinate system, and returns the mapped polygon.</db:para>
<db:para>If <db:code role="parameter">item</db:code> is <db:code>nullptr</db:code>, this function returns the same as <db:link xlink:href="qgraphicsitem.xml#mapFromScene">mapFromScene</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#itemTransform">itemTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToItem">mapToItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromParent">mapFromParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromItem-3">
<db:title>QPainterPath QGraphicsItem::mapFromItem(const QGraphicsItem *<db:emphasis>item</db:emphasis>, const QPainterPath &amp;<db:emphasis>path</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPainterPath</db:type>
<db:methodname>mapFromItem</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPainterPath &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainterPath mapFromItem(const QGraphicsItem *item, const QPainterPath &amp;path) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the path <db:code role="parameter">path</db:code>, which is in <db:code role="parameter">item</db:code>'s coordinate system, to this item's coordinate system, and returns the mapped path.</db:para>
<db:para>If <db:code role="parameter">item</db:code> is <db:code>nullptr</db:code>, this function returns the same as <db:link xlink:href="qgraphicsitem.xml#mapFromScene">mapFromScene</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#itemTransform">itemTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromParent">mapFromParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromScene">mapFromScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToItem">mapToItem</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromItem-4">
<db:title>QPointF QGraphicsItem::mapFromItem(const QGraphicsItem *<db:emphasis>item</db:emphasis>, qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>mapFromItem</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF mapFromItem(const QGraphicsItem *item, qreal x, qreal y) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#mapFromItem">mapFromItem</db:link>(<db:code role="parameter">item</db:code>, <db:link xlink:href="qpointf.xml">QPointF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapFromItem-5">
<db:title>QPolygonF QGraphicsItem::mapFromItem(const QGraphicsItem *<db:emphasis>item</db:emphasis>, qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>mapFromItem</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF mapFromItem(const QGraphicsItem *item, qreal x, qreal y, qreal w, qreal h) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#mapFromItem">mapFromItem</db:link>(item, <db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapFromParent">
<db:title>QPointF QGraphicsItem::mapFromParent(const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>mapFromParent</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF mapFromParent(const QPointF &amp;point) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the point <db:code role="parameter">point</db:code>, which is in this item's parent's coordinate system, to this item's coordinate system, and returns the mapped coordinate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromItem">mapFromItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromScene">mapFromScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToParent">mapToParent</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromParent-1">
<db:title>QPolygonF QGraphicsItem::mapFromParent(const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>mapFromParent</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF mapFromParent(const QRectF &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the rectangle <db:code role="parameter">rect</db:code>, which is in this item's parent's coordinate system, to this item's coordinate system, and returns the mapped rectangle as a polygon.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToParent">mapToParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromItem">mapFromItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromParent-2">
<db:title>QPolygonF QGraphicsItem::mapFromParent(const QPolygonF &amp;<db:emphasis>polygon</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>mapFromParent</db:methodname>
<db:methodparam>
<db:type>const QPolygonF &amp;</db:type>
<db:parameter>polygon</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF mapFromParent(const QPolygonF &amp;polygon) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the polygon <db:code role="parameter">polygon</db:code>, which is in this item's parent's coordinate system, to this item's coordinate system, and returns the mapped polygon.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToParent">mapToParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToItem">mapToItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromParent-3">
<db:title>QPainterPath QGraphicsItem::mapFromParent(const QPainterPath &amp;<db:emphasis>path</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPainterPath</db:type>
<db:methodname>mapFromParent</db:methodname>
<db:methodparam>
<db:type>const QPainterPath &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainterPath mapFromParent(const QPainterPath &amp;path) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the path <db:code role="parameter">path</db:code>, which is in this item's parent's coordinate system, to this item's coordinate system, and returns the mapped path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromScene">mapFromScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromItem">mapFromItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToParent">mapToParent</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromParent-4">
<db:title>QPointF QGraphicsItem::mapFromParent(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>mapFromParent</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF mapFromParent(qreal x, qreal y) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#mapFromParent">mapFromParent</db:link>(<db:link xlink:href="qpointf.xml">QPointF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapFromParent-5">
<db:title>QPolygonF QGraphicsItem::mapFromParent(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>mapFromParent</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF mapFromParent(qreal x, qreal y, qreal w, qreal h) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#mapFromItem">mapFromItem</db:link>(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapFromScene">
<db:title>QPointF QGraphicsItem::mapFromScene(const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>mapFromScene</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF mapFromScene(const QPointF &amp;point) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the point <db:code role="parameter">point</db:code>, which is in this item's scene's coordinate system, to this item's coordinate system, and returns the mapped coordinate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromItem">mapFromItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromParent">mapFromParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromScene-1">
<db:title>QPolygonF QGraphicsItem::mapFromScene(const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>mapFromScene</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF mapFromScene(const QRectF &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the rectangle <db:code role="parameter">rect</db:code>, which is in this item's scene's coordinate system, to this item's coordinate system, and returns the mapped rectangle as a polygon.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromItem">mapFromItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromScene-2">
<db:title>QPolygonF QGraphicsItem::mapFromScene(const QPolygonF &amp;<db:emphasis>polygon</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>mapFromScene</db:methodname>
<db:methodparam>
<db:type>const QPolygonF &amp;</db:type>
<db:parameter>polygon</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF mapFromScene(const QPolygonF &amp;polygon) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the polygon <db:code role="parameter">polygon</db:code>, which is in this item's scene's coordinate system, to this item's coordinate system, and returns the mapped polygon.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromParent">mapFromParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromScene-3">
<db:title>QPainterPath QGraphicsItem::mapFromScene(const QPainterPath &amp;<db:emphasis>path</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPainterPath</db:type>
<db:methodname>mapFromScene</db:methodname>
<db:methodparam>
<db:type>const QPainterPath &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainterPath mapFromScene(const QPainterPath &amp;path) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the path <db:code role="parameter">path</db:code>, which is in this item's scene's coordinate system, to this item's coordinate system, and returns the mapped path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromParent">mapFromParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromItem">mapFromItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromScene-4">
<db:title>QPointF QGraphicsItem::mapFromScene(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>mapFromScene</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF mapFromScene(qreal x, qreal y) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#mapFromScene">mapFromScene</db:link>(<db:link xlink:href="qpointf.xml">QPointF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapFromScene-5">
<db:title>QPolygonF QGraphicsItem::mapFromScene(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>mapFromScene</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF mapFromScene(qreal x, qreal y, qreal w, qreal h) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#mapFromScene">mapFromScene</db:link>(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapRectFromItem">
<db:title>QRectF QGraphicsItem::mapRectFromItem(const QGraphicsItem *<db:emphasis>item</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>mapRectFromItem</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF mapRectFromItem(const QGraphicsItem *item, const QRectF &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the rectangle <db:code role="parameter">rect</db:code>, which is in <db:code role="parameter">item</db:code>'s coordinate system, to this item's coordinate system, and returns the mapped rectangle as a new rectangle (i.e., the bounding rectangle of the resulting polygon).</db:para>
<db:para>If <db:code role="parameter">item</db:code> is <db:code>nullptr</db:code>, this function returns the same as <db:link xlink:href="qgraphicsitem.xml#mapRectFromScene">mapRectFromScene</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#itemTransform">itemTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToParent">mapToParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromItem">mapFromItem</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapRectFromItem-1">
<db:title>QRectF QGraphicsItem::mapRectFromItem(const QGraphicsItem *<db:emphasis>item</db:emphasis>, qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>mapRectFromItem</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF mapRectFromItem(const QGraphicsItem *item, qreal x, qreal y, qreal w, qreal h) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#mapRectFromItem">mapRectFromItem</db:link>(item, <db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapRectFromParent">
<db:title>QRectF QGraphicsItem::mapRectFromParent(const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>mapRectFromParent</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF mapRectFromParent(const QRectF &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the rectangle <db:code role="parameter">rect</db:code>, which is in this item's parent's coordinate system, to this item's coordinate system, and returns the mapped rectangle as a new rectangle (i.e., the bounding rectangle of the resulting polygon).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#itemTransform">itemTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToParent">mapToParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromItem">mapFromItem</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapRectFromParent-1">
<db:title>QRectF QGraphicsItem::mapRectFromParent(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>mapRectFromParent</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF mapRectFromParent(qreal x, qreal y, qreal w, qreal h) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#mapRectFromParent">mapRectFromParent</db:link>(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapRectFromScene">
<db:title>QRectF QGraphicsItem::mapRectFromScene(const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>mapRectFromScene</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF mapRectFromScene(const QRectF &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the rectangle <db:code role="parameter">rect</db:code>, which is in scene coordinates, to this item's coordinate system, and returns the mapped rectangle as a new rectangle (i.e., the bounding rectangle of the resulting polygon).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#itemTransform">itemTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToParent">mapToParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromItem">mapFromItem</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapRectFromScene-1">
<db:title>QRectF QGraphicsItem::mapRectFromScene(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>mapRectFromScene</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF mapRectFromScene(qreal x, qreal y, qreal w, qreal h) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#mapRectFromScene">mapRectFromScene</db:link>(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapRectToItem">
<db:title>QRectF QGraphicsItem::mapRectToItem(const QGraphicsItem *<db:emphasis>item</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>mapRectToItem</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF mapRectToItem(const QGraphicsItem *item, const QRectF &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the rectangle <db:code role="parameter">rect</db:code>, which is in this item's coordinate system, to <db:code role="parameter">item</db:code>'s coordinate system, and returns the mapped rectangle as a new rectangle (i.e., the bounding rectangle of the resulting polygon).</db:para>
<db:para>If <db:code role="parameter">item</db:code> is <db:code>nullptr</db:code>, this function returns the same as <db:link xlink:href="qgraphicsitem.xml#mapRectToScene">mapRectToScene</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#itemTransform">itemTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToParent">mapToParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromItem">mapFromItem</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapRectToItem-1">
<db:title>QRectF QGraphicsItem::mapRectToItem(const QGraphicsItem *<db:emphasis>item</db:emphasis>, qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>mapRectToItem</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF mapRectToItem(const QGraphicsItem *item, qreal x, qreal y, qreal w, qreal h) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#mapRectToItem">mapRectToItem</db:link>(item, <db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapRectToParent">
<db:title>QRectF QGraphicsItem::mapRectToParent(const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>mapRectToParent</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF mapRectToParent(const QRectF &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the rectangle <db:code role="parameter">rect</db:code>, which is in this item's coordinate system, to its parent's coordinate system, and returns the mapped rectangle as a new rectangle (i.e., the bounding rectangle of the resulting polygon).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#itemTransform">itemTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToParent">mapToParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromItem">mapFromItem</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapRectToParent-1">
<db:title>QRectF QGraphicsItem::mapRectToParent(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>mapRectToParent</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF mapRectToParent(qreal x, qreal y, qreal w, qreal h) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#mapRectToParent">mapRectToParent</db:link>(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapRectToScene">
<db:title>QRectF QGraphicsItem::mapRectToScene(const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>mapRectToScene</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF mapRectToScene(const QRectF &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the rectangle <db:code role="parameter">rect</db:code>, which is in this item's coordinate system, to the scene coordinate system, and returns the mapped rectangle as a new rectangle (i.e., the bounding rectangle of the resulting polygon).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#itemTransform">itemTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToParent">mapToParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromItem">mapFromItem</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapRectToScene-1">
<db:title>QRectF QGraphicsItem::mapRectToScene(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>mapRectToScene</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF mapRectToScene(qreal x, qreal y, qreal w, qreal h) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#mapRectToScene">mapRectToScene</db:link>(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapToItem">
<db:title>QPointF QGraphicsItem::mapToItem(const QGraphicsItem *<db:emphasis>item</db:emphasis>, const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>mapToItem</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF mapToItem(const QGraphicsItem *item, const QPointF &amp;point) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the point <db:code role="parameter">point</db:code>, which is in this item's coordinate system, to <db:code role="parameter">item</db:code>'s coordinate system, and returns the mapped coordinate.</db:para>
<db:para>If <db:code role="parameter">item</db:code> is <db:code>nullptr</db:code>, this function returns the same as <db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#itemTransform">itemTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToParent">mapToParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromItem">mapFromItem</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToItem-1">
<db:title>QPolygonF QGraphicsItem::mapToItem(const QGraphicsItem *<db:emphasis>item</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>mapToItem</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF mapToItem(const QGraphicsItem *item, const QRectF &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the rectangle <db:code role="parameter">rect</db:code>, which is in this item's coordinate system, to <db:code role="parameter">item</db:code>'s coordinate system, and returns the mapped rectangle as a polygon.</db:para>
<db:para>If <db:code role="parameter">item</db:code> is <db:code>nullptr</db:code>, this function returns the same as <db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#itemTransform">itemTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToParent">mapToParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromItem">mapFromItem</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToItem-2">
<db:title>QPolygonF QGraphicsItem::mapToItem(const QGraphicsItem *<db:emphasis>item</db:emphasis>, const QPolygonF &amp;<db:emphasis>polygon</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>mapToItem</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPolygonF &amp;</db:type>
<db:parameter>polygon</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF mapToItem(const QGraphicsItem *item, const QPolygonF &amp;polygon) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the polygon <db:code role="parameter">polygon</db:code>, which is in this item's coordinate system, to <db:code role="parameter">item</db:code>'s coordinate system, and returns the mapped polygon.</db:para>
<db:para>If <db:code role="parameter">item</db:code> is <db:code>nullptr</db:code>, this function returns the same as <db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#itemTransform">itemTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToParent">mapToParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromItem">mapFromItem</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToItem-3">
<db:title>QPainterPath QGraphicsItem::mapToItem(const QGraphicsItem *<db:emphasis>item</db:emphasis>, const QPainterPath &amp;<db:emphasis>path</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPainterPath</db:type>
<db:methodname>mapToItem</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPainterPath &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainterPath mapToItem(const QGraphicsItem *item, const QPainterPath &amp;path) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the path <db:code role="parameter">path</db:code>, which is in this item's coordinate system, to <db:code role="parameter">item</db:code>'s coordinate system, and returns the mapped path.</db:para>
<db:para>If <db:code role="parameter">item</db:code> is <db:code>nullptr</db:code>, this function returns the same as <db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#itemTransform">itemTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToParent">mapToParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromItem">mapFromItem</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToItem-4">
<db:title>QPointF QGraphicsItem::mapToItem(const QGraphicsItem *<db:emphasis>item</db:emphasis>, qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>mapToItem</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF mapToItem(const QGraphicsItem *item, qreal x, qreal y) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#mapToItem">mapToItem</db:link>(<db:code role="parameter">item</db:code>, <db:link xlink:href="qpointf.xml">QPointF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapToItem-5">
<db:title>QPolygonF QGraphicsItem::mapToItem(const QGraphicsItem *<db:emphasis>item</db:emphasis>, qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>mapToItem</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF mapToItem(const QGraphicsItem *item, qreal x, qreal y, qreal w, qreal h) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#mapToItem">mapToItem</db:link>(item, <db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapToParent">
<db:title>QPointF QGraphicsItem::mapToParent(const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>mapToParent</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF mapToParent(const QPointF &amp;point) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the point <db:code role="parameter">point</db:code>, which is in this item's coordinate system, to its parent's coordinate system, and returns the mapped coordinate. If the item has no parent, <db:code role="parameter">point</db:code> will be mapped to the scene's coordinate system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToItem">mapToItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromParent">mapFromParent</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToParent-1">
<db:title>QPolygonF QGraphicsItem::mapToParent(const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>mapToParent</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF mapToParent(const QRectF &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the rectangle <db:code role="parameter">rect</db:code>, which is in this item's coordinate system, to its parent's coordinate system, and returns the mapped rectangle as a polygon. If the item has no parent, <db:code role="parameter">rect</db:code> will be mapped to the scene's coordinate system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToItem">mapToItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromParent">mapFromParent</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToParent-2">
<db:title>QPolygonF QGraphicsItem::mapToParent(const QPolygonF &amp;<db:emphasis>polygon</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>mapToParent</db:methodname>
<db:methodparam>
<db:type>const QPolygonF &amp;</db:type>
<db:parameter>polygon</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF mapToParent(const QPolygonF &amp;polygon) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the polygon <db:code role="parameter">polygon</db:code>, which is in this item's coordinate system, to its parent's coordinate system, and returns the mapped polygon. If the item has no parent, <db:code role="parameter">polygon</db:code> will be mapped to the scene's coordinate system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToItem">mapToItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromParent">mapFromParent</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToParent-3">
<db:title>QPainterPath QGraphicsItem::mapToParent(const QPainterPath &amp;<db:emphasis>path</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPainterPath</db:type>
<db:methodname>mapToParent</db:methodname>
<db:methodparam>
<db:type>const QPainterPath &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainterPath mapToParent(const QPainterPath &amp;path) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the path <db:code role="parameter">path</db:code>, which is in this item's coordinate system, to its parent's coordinate system, and returns the mapped path. If the item has no parent, <db:code role="parameter">path</db:code> will be mapped to the scene's coordinate system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToItem">mapToItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromParent">mapFromParent</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToParent-4">
<db:title>QPointF QGraphicsItem::mapToParent(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>mapToParent</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF mapToParent(qreal x, qreal y) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#mapToParent">mapToParent</db:link>(<db:link xlink:href="qpointf.xml">QPointF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapToParent-5">
<db:title>QPolygonF QGraphicsItem::mapToParent(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>mapToParent</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF mapToParent(qreal x, qreal y, qreal w, qreal h) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#mapToParent">mapToParent</db:link>(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapToScene">
<db:title>QPointF QGraphicsItem::mapToScene(const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>mapToScene</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF mapToScene(const QPointF &amp;point) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the point <db:code role="parameter">point</db:code>, which is in this item's coordinate system, to the scene's coordinate system, and returns the mapped coordinate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToItem">mapToItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToParent">mapToParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromScene">mapFromScene</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToScene-1">
<db:title>QPolygonF QGraphicsItem::mapToScene(const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>mapToScene</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF mapToScene(const QRectF &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the rectangle <db:code role="parameter">rect</db:code>, which is in this item's coordinate system, to the scene's coordinate system, and returns the mapped rectangle as a polygon.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToParent">mapToParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToItem">mapToItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromScene">mapFromScene</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToScene-2">
<db:title>QPolygonF QGraphicsItem::mapToScene(const QPolygonF &amp;<db:emphasis>polygon</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>mapToScene</db:methodname>
<db:methodparam>
<db:type>const QPolygonF &amp;</db:type>
<db:parameter>polygon</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF mapToScene(const QPolygonF &amp;polygon) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the polygon <db:code role="parameter">polygon</db:code>, which is in this item's coordinate system, to the scene's coordinate system, and returns the mapped polygon.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToParent">mapToParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToItem">mapToItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromScene">mapFromScene</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToScene-3">
<db:title>QPainterPath QGraphicsItem::mapToScene(const QPainterPath &amp;<db:emphasis>path</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPainterPath</db:type>
<db:methodname>mapToScene</db:methodname>
<db:methodparam>
<db:type>const QPainterPath &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainterPath mapToScene(const QPainterPath &amp;path) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the path <db:code role="parameter">path</db:code>, which is in this item's coordinate system, to the scene's coordinate system, and returns the mapped path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToParent">mapToParent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapToItem">mapToItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mapFromScene">mapFromScene</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToScene-4">
<db:title>QPointF QGraphicsItem::mapToScene(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>mapToScene</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF mapToScene(qreal x, qreal y) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>(<db:link xlink:href="qpointf.xml">QPointF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapToScene-5">
<db:title>QPolygonF QGraphicsItem::mapToScene(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>mapToScene</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF mapToScene(qreal x, qreal y, qreal w, qreal h) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>)).</db:para>
</db:section>
<db:section xml:id="mouseDoubleClickEvent">
<db:title>[virtual protected] void QGraphicsItem::mouseDoubleClickEvent(QGraphicsSceneMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseDoubleClickEvent</db:methodname>
<db:methodparam>
<db:type>QGraphicsSceneMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseDoubleClickEvent(QGraphicsSceneMouseEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented to receive mouse doubleclick events for this item.</db:para>
<db:para>When doubleclicking an item, the item will first receive a mouse press event, followed by a release event (i.e., a click), then a doubleclick event, and finally a release event.</db:para>
<db:para>Calling <db:link xlink:href="qevent.xml#ignore">QEvent::ignore</db:link>() or <db:link xlink:href="qevent.xml#accept">QEvent::accept</db:link>() on <db:code role="parameter">event</db:code> has no effect.</db:para>
<db:para>The default implementation calls <db:link xlink:href="qgraphicsitem.xml#mousePressEvent">mousePressEvent</db:link>(). If you want to keep the base implementation when reimplementing this function, call QGraphicsItem::mouseDoubleClickEvent() in your reimplementation.</db:para>
<db:para>Note that an item will not receive double click events if it is neither <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">selectable</db:link> nor <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">movable</db:link> (single mouse clicks are ignored in this case, and that stops the generation of double clicks).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mousePressEvent">mousePressEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mouseMoveEvent">mouseMoveEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mouseReleaseEvent">mouseReleaseEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneEvent">sceneEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[virtual protected] void QGraphicsItem::mouseMoveEvent(QGraphicsSceneMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseMoveEvent</db:methodname>
<db:methodparam>
<db:type>QGraphicsSceneMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseMoveEvent(QGraphicsSceneMouseEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented to receive mouse move events for this item. If you do receive this event, you can be certain that this item also received a mouse press event, and that this item is the current mouse grabber.</db:para>
<db:para>Calling <db:link xlink:href="qevent.xml#ignore">QEvent::ignore</db:link>() or <db:link xlink:href="qevent.xml#accept">QEvent::accept</db:link>() on <db:code role="parameter">event</db:code> has no effect.</db:para>
<db:para>The default implementation handles basic item interaction, such as selection and moving. If you want to keep the base implementation when reimplementing this function, call QGraphicsItem::mouseMoveEvent() in your reimplementation.</db:para>
<db:para>Please note that <db:link xlink:href="qgraphicsitem.xml#mousePressEvent">mousePressEvent</db:link>() decides which graphics item it is that receives mouse events. See the <db:link xlink:href="qgraphicsitem.xml#mousePressEvent">mousePressEvent</db:link>() description for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mousePressEvent">mousePressEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mouseReleaseEvent">mouseReleaseEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mouseDoubleClickEvent">mouseDoubleClickEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneEvent">sceneEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[virtual protected] void QGraphicsItem::mousePressEvent(QGraphicsSceneMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mousePressEvent</db:methodname>
<db:methodparam>
<db:type>QGraphicsSceneMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mousePressEvent(QGraphicsSceneMouseEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented to receive mouse press events for this item. Mouse press events are only delivered to items that accept the mouse button that is pressed. By default, an item accepts all mouse buttons, but you can change this by calling <db:link xlink:href="qgraphicsitem.xml#setAcceptedMouseButtons">setAcceptedMouseButtons</db:link>().</db:para>
<db:para>The mouse press event decides which item should become the mouse grabber (see <db:link xlink:href="qgraphicsscene.xml#mouseGrabberItem">QGraphicsScene::mouseGrabberItem</db:link>()). If you do not reimplement this function, the press event will propagate to any topmost item beneath this item, and no other mouse events will be delivered to this item.</db:para>
<db:para>If you do reimplement this function, <db:code role="parameter">event</db:code> will by default be accepted (see <db:link xlink:href="qevent.xml#accept">QEvent::accept</db:link>()), and this item is then the mouse grabber. This allows the item to receive future move, release and doubleclick events. If you call <db:link xlink:href="qevent.xml#ignore">QEvent::ignore</db:link>() on <db:code role="parameter">event</db:code>, this item will lose the mouse grab, and <db:code role="parameter">event</db:code> will propagate to any topmost item beneath. No further mouse events will be delivered to this item unless a new mouse press event is received.</db:para>
<db:para>The default implementation handles basic item interaction, such as selection and moving. If you want to keep the base implementation when reimplementing this function, call QGraphicsItem::mousePressEvent() in your reimplementation.</db:para>
<db:para>The event is <db:link xlink:href="qevent.xml#ignore">QEvent::ignore</db:link>()d for items that are neither <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">movable</db:link> nor <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">selectable</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mouseMoveEvent">mouseMoveEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mouseReleaseEvent">mouseReleaseEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mouseDoubleClickEvent">mouseDoubleClickEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneEvent">sceneEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[virtual protected] void QGraphicsItem::mouseReleaseEvent(QGraphicsSceneMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QGraphicsSceneMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseReleaseEvent(QGraphicsSceneMouseEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented to receive mouse release events for this item.</db:para>
<db:para>Calling <db:link xlink:href="qevent.xml#ignore">QEvent::ignore</db:link>() or <db:link xlink:href="qevent.xml#accept">QEvent::accept</db:link>() on <db:code role="parameter">event</db:code> has no effect.</db:para>
<db:para>The default implementation handles basic item interaction, such as selection and moving. If you want to keep the base implementation when reimplementing this function, call QGraphicsItem::mouseReleaseEvent() in your reimplementation.</db:para>
<db:para>Please note that <db:link xlink:href="qgraphicsitem.xml#mousePressEvent">mousePressEvent</db:link>() decides which graphics item it is that receives mouse events. See the <db:link xlink:href="qgraphicsitem.xml#mousePressEvent">mousePressEvent</db:link>() description for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mousePressEvent">mousePressEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mouseMoveEvent">mouseMoveEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mouseDoubleClickEvent">mouseDoubleClickEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneEvent">sceneEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveBy">
<db:title>void QGraphicsItem::moveBy(qreal <db:emphasis>dx</db:emphasis>, qreal <db:emphasis>dy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>moveBy</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>dx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void moveBy(qreal dx, qreal dy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the item by <db:code role="parameter">dx</db:code> points horizontally, and <db:code role="parameter">dy</db:code> point vertically. This function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#setPos">setPos</db:link>(<db:link xlink:href="qgraphicsitem.xml#pos">pos</db:link>() + <db:link xlink:href="qpointf.xml">QPointF</db:link>(<db:code role="parameter">dx</db:code>, <db:code role="parameter">dy</db:code>)).</db:para>
</db:section>
<db:section xml:id="opacity">
<db:title>qreal QGraphicsItem::opacity() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>opacity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal opacity() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this item's local opacity, which is between 0.0 (transparent) and 1.0 (opaque). This value is combined with parent and ancestor values into the <db:link xlink:href="qgraphicsitem.xml#effectiveOpacity">effectiveOpacity</db:link>(). The effective opacity decides how the item is rendered and also affects its visibility when queried by functions such as <db:link xlink:href="qgraphicsview.xml#items">QGraphicsView::items</db:link>().</db:para>
<db:para>The opacity property decides the state of the painter passed to the <db:link xlink:href="qgraphicsitem.xml#paint">paint</db:link>() function. If the item is cached, i.e., <db:link xlink:href="qgraphicsitem.xml#CacheMode-enum">ItemCoordinateCache</db:link> or <db:link xlink:href="qgraphicsitem.xml#CacheMode-enum">DeviceCoordinateCache</db:link>, the effective property will be applied to the item's cache as it is rendered.</db:para>
<db:para>The default opacity is 1.0; fully opaque.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setOpacity">setOpacity</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#paint">paint</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemIgnoresParentOpacity</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemDoesntPropagateOpacityToChildren</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="opaqueArea">
<db:title>[virtual] QPainterPath QGraphicsItem::opaqueArea() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QPainterPath</db:type>
<db:methodname>opaqueArea</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainterPath opaqueArea() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function returns a shape representing the area where this item is opaque. An area is opaque if it is filled using an opaque brush or color (i.e., not transparent).</db:para>
<db:para>This function is used by <db:link xlink:href="qgraphicsitem.xml#isObscuredBy">isObscuredBy</db:link>(), which is called by underlying items to determine if they are obscured by this item.</db:para>
<db:para>The default implementation returns an empty <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link>, indicating that this item is completely transparent and does not obscure any other items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#isObscuredBy">isObscuredBy</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#isObscured">isObscured</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#shape">shape</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paint">
<db:title>[pure virtual] void QGraphicsItem::paint(QPainter *<db:emphasis>painter</db:emphasis>, const QStyleOptionGraphicsItem *<db:emphasis>option</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paint</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStyleOptionGraphicsItem *</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function, which is usually called by <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>, paints the contents of an item in local coordinates.</db:para>
<db:para>Reimplement this function in a <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> subclass to provide the item's painting implementation, using <db:code role="parameter">painter</db:code>. The <db:code role="parameter">option</db:code> parameter provides style options for the item, such as its state, exposed area and its level-of-detail hints. The <db:code role="parameter">widget</db:code> argument is optional. If provided, it points to the widget that is being painted on; otherwise, it is 0. For cached painting, <db:code role="parameter">widget</db:code> is always 0.</db:para>
<db:programlisting language="cpp">void RoundRectItem::paint(QPainter *painter,
                          const QStyleOptionGraphicsItem *option,
                          QWidget *widget)
{
    painter-&amp;gt;drawRoundedRect(-10, -10, 20, 20, 5, 5);
}
</db:programlisting>
<db:para>The painter's pen is 0-width by default, and its pen is initialized to the <db:link xlink:href="qpalette.xml#ColorRole-enum">QPalette::Text</db:link> brush from the paint device's palette. The brush is initialized to <db:link xlink:href="qpalette.xml#ColorRole-enum">QPalette::Window</db:link>.</db:para>
<db:para>Make sure to constrain all painting inside the boundaries of <db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>() to avoid rendering artifacts (as <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> does not clip the painter for you). In particular, when <db:link xlink:href="qpainter.xml">QPainter</db:link> renders the outline of a shape using an assigned <db:link xlink:href="qpen.xml">QPen</db:link>, half of the outline will be drawn outside, and half inside, the shape you're rendering (e.g., with a pen width of 2 units, you must draw outlines 1 unit inside <db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>()). <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> does not support use of cosmetic pens with a non-zero width.</db:para>
<db:para>All painting is done in local coordinates.</db:para>
<db:note>
<db:para>It is mandatory that an item will always redraw itself in the exact same way, unless <db:link xlink:href="qgraphicsitem.xml#update">update</db:link>() was called; otherwise visual artifacts may occur. In other words, two subsequent calls to paint() must always produce the same output, unless <db:link xlink:href="qgraphicsitem.xml#update">update</db:link>() was called between them.</db:para>
</db:note>
<db:note>
<db:para>Enabling caching for an item does not guarantee that paint() will be invoked only once by the Graphics View framework, even without any explicit call to <db:link xlink:href="qgraphicsitem.xml#update">update</db:link>(). See the documentation of <db:link xlink:href="qgraphicsitem.xml#setCacheMode">setCacheMode</db:link>() for more details.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setCacheMode">setCacheMode</db:link>()</db:member>
<db:member><db:link xlink:href="qpen.xml#width">QPen::width</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#item-coordinates">Item Coordinates</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemUsesExtendedStyleOption</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="panel">
<db:title>QGraphicsItem *QGraphicsItem::panel() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsItem *</db:type>
<db:methodname>panel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsItem * panel() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item's panel, or <db:code>nullptr</db:code> if this item does not have a panel. If the item is a panel, it will return itself. Otherwise it will return the closest ancestor that is a panel.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#isPanel">isPanel</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemIsPanel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="panelModality">
<db:title>QGraphicsItem::PanelModality QGraphicsItem::panelModality() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsItem::PanelModality</db:type>
<db:methodname>panelModality</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsItem::PanelModality panelModality() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the modality for this item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setPanelModality">setPanelModality</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parentItem">
<db:title>QGraphicsItem *QGraphicsItem::parentItem() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsItem *</db:type>
<db:methodname>parentItem</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsItem * parentItem() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to this item's parent item. If this item does not have a parent, <db:code>nullptr</db:code> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setParentItem">setParentItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#childItems">childItems</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parentObject">
<db:title>QGraphicsObject *QGraphicsItem::parentObject() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsObject *</db:type>
<db:methodname>parentObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsObject * parentObject() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the item's parent, cast to a <db:link xlink:href="qgraphicsobject.xml">QGraphicsObject</db:link>. Returns <db:code>nullptr</db:code> if the parent item is not a <db:link xlink:href="qgraphicsobject.xml">QGraphicsObject</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#parentItem">parentItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#childItems">childItems</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parentWidget">
<db:title>QGraphicsWidget *QGraphicsItem::parentWidget() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsWidget *</db:type>
<db:methodname>parentWidget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsWidget * parentWidget() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the item's parent widget. The item's parent widget is the closest parent item that is a widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#parentItem">parentItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#childItems">childItems</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pos">
<db:title>QPointF QGraphicsItem::pos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>pos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF pos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position of the item in parent coordinates. If the item has no parent, its position is given in scene coordinates.</db:para>
<db:para>The position of the item describes its origin (local coordinate (0, 0)) in parent coordinates; this function returns the same as <db:link xlink:href="qgraphicsitem.xml#mapToParent">mapToParent</db:link>(0, 0).</db:para>
<db:para>For convenience, you can also call <db:link xlink:href="qgraphicsitem.xml#scenePos">scenePos</db:link>() to determine the item's position in scene coordinates, regardless of its parent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setPos">setPos</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="prepareGeometryChange">
<db:title>[protected] void QGraphicsItem::prepareGeometryChange()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>prepareGeometryChange</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void prepareGeometryChange()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Prepares the item for a geometry change. Call this function before changing the bounding rect of an item to keep <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>'s index up to date.</db:para>
<db:para>prepareGeometryChange() will call <db:link xlink:href="qgraphicsitem.xml#update">update</db:link>() if this is necessary.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">void CircleItem::setRadius(qreal newRadius)
{
    if (radius != newRadius) {
        prepareGeometryChange();
        radius = newRadius;
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeSceneEventFilter">
<db:title>void QGraphicsItem::removeSceneEventFilter(QGraphicsItem *<db:emphasis>filterItem</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeSceneEventFilter</db:methodname>
<db:methodparam>
<db:type>QGraphicsItem *</db:type>
<db:parameter>filterItem</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeSceneEventFilter(QGraphicsItem *filterItem)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes an event filter on this item from <db:code role="parameter">filterItem</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#installSceneEventFilter">installSceneEventFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resetTransform">
<db:title>void QGraphicsItem::resetTransform()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resetTransform</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resetTransform()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets this item's transformation matrix to the identity matrix or all the transformation properties to their default values. This is equivalent to calling <db:code>setTransform(QTransform())</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setTransform">setTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rotation">
<db:title>qreal QGraphicsItem::rotation() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>rotation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal rotation() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the clockwise rotation, in degrees, around the Z axis. The default value is 0 (i.e., the item is not rotated).</db:para>
<db:para>The rotation is combined with the item's <db:link xlink:href="qgraphicsitem.xml#scale">scale</db:link>(), <db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>() and <db:link xlink:href="qgraphicsitem.xml#transformations">transformations</db:link>() to map the item's coordinate system to the parent item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setRotation">setRotation</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transformOriginPoint">transformOriginPoint</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transformations">Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scale">
<db:title>qreal QGraphicsItem::scale() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>scale</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal scale() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the scale factor of the item. The default scale factor is 1.0 (i.e., the item is not scaled).</db:para>
<db:para>The scale is combined with the item's <db:link xlink:href="qgraphicsitem.xml#rotation">rotation</db:link>(), <db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>() and <db:link xlink:href="qgraphicsitem.xml#transformations">transformations</db:link>() to map the item's coordinate system to the parent item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setScale">setScale</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#rotation">rotation</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transformations">Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scene">
<db:title>QGraphicsScene *QGraphicsItem::scene() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsScene *</db:type>
<db:methodname>scene</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsScene * scene() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current scene for the item, or <db:code>nullptr</db:code> if the item is not stored in a scene.</db:para>
<db:para>To add or move an item to a scene, call <db:link xlink:href="qgraphicsscene.xml#addItem">QGraphicsScene::addItem</db:link>().</db:para>
</db:section>
<db:section xml:id="sceneBoundingRect">
<db:title>QRectF QGraphicsItem::sceneBoundingRect() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>sceneBoundingRect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF sceneBoundingRect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the bounding rect of this item in scene coordinates, by combining <db:link xlink:href="qgraphicsitem.xml#sceneTransform">sceneTransform</db:link>() with <db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sceneEvent">
<db:title>[virtual protected] bool QGraphicsItem::sceneEvent(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>sceneEvent</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool sceneEvent(QEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function receives events to this item. Reimplement this function to intercept events before they are dispatched to the specialized event handlers <db:link xlink:href="qgraphicsitem.xml#contextMenuEvent">contextMenuEvent</db:link>(), <db:link xlink:href="qgraphicsitem.xml#focusInEvent">focusInEvent</db:link>(), <db:link xlink:href="qgraphicsitem.xml#focusOutEvent">focusOutEvent</db:link>(), <db:link xlink:href="qgraphicsitem.xml#hoverEnterEvent">hoverEnterEvent</db:link>(), <db:link xlink:href="qgraphicsitem.xml#hoverMoveEvent">hoverMoveEvent</db:link>(), <db:link xlink:href="qgraphicsitem.xml#hoverLeaveEvent">hoverLeaveEvent</db:link>(), <db:link xlink:href="qgraphicsitem.xml#keyPressEvent">keyPressEvent</db:link>(), <db:link xlink:href="qgraphicsitem.xml#keyReleaseEvent">keyReleaseEvent</db:link>(), <db:link xlink:href="qgraphicsitem.xml#mousePressEvent">mousePressEvent</db:link>(), <db:link xlink:href="qgraphicsitem.xml#mouseReleaseEvent">mouseReleaseEvent</db:link>(), <db:link xlink:href="qgraphicsitem.xml#mouseMoveEvent">mouseMoveEvent</db:link>(), and <db:link xlink:href="qgraphicsitem.xml#mouseDoubleClickEvent">mouseDoubleClickEvent</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if the event was recognized and handled; otherwise, (e.g., if the event type was not recognized,) false is returned.</db:para>
<db:para><db:code role="parameter">event</db:code> is the intercepted event.</db:para>
</db:section>
<db:section xml:id="sceneEventFilter">
<db:title>[virtual protected] bool QGraphicsItem::sceneEventFilter(QGraphicsItem *<db:emphasis>watched</db:emphasis>, QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>sceneEventFilter</db:methodname>
<db:methodparam>
<db:type>QGraphicsItem *</db:type>
<db:parameter>watched</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool sceneEventFilter(QGraphicsItem *watched, QEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Filters events for the item <db:code role="parameter">watched</db:code>. <db:code role="parameter">event</db:code> is the filtered event.</db:para>
<db:para>Reimplementing this function in a subclass makes it possible for the item to be used as an event filter for other items, intercepting all the events sent to those items before they are able to respond.</db:para>
<db:para>Reimplementations must return true to prevent further processing of a given event, ensuring that it will not be delivered to the watched item, or return false to indicate that the event should be propagated further by the event system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#installSceneEventFilter">installSceneEventFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scenePos">
<db:title>QPointF QGraphicsItem::scenePos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>scenePos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF scenePos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item's position in scene coordinates. This is equivalent to calling <db:code>mapToScene(0, 0)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#pos">pos</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneTransform">sceneTransform</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sceneTransform">
<db:title>QTransform QGraphicsItem::sceneTransform() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTransform</db:type>
<db:methodname>sceneTransform</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTransform sceneTransform() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this item's scene transformation matrix. This matrix can be used to map coordinates and geometrical shapes from this item's local coordinate system to the scene's coordinate system. To map coordinates from the scene, you must first invert the returned matrix.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QGraphicsRectItem rect;
rect.setPos(100, 100);

rect.sceneTransform().map(QPointF(0, 0));
// returns QPointF(100, 100);

rect.sceneTransform().inverted().map(QPointF(100, 100));
// returns QPointF(0, 0);
</db:programlisting>
<db:para>Unlike <db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>(), which returns only an item's local transformation, this function includes the item's (and any parents') position, and all the transfomation properties.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setTransform">setTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#scenePos">scenePos</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transformations">Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scroll">
<db:title>void QGraphicsItem::scroll(qreal <db:emphasis>dx</db:emphasis>, qreal <db:emphasis>dy</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis> = QRectF())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>scroll</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>dx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
<db:initializer>QRectF()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void scroll(qreal dx, qreal dy, const QRectF &amp;rect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Scrolls the contents of <db:code role="parameter">rect</db:code> by <db:code role="parameter">dx</db:code>, <db:code role="parameter">dy</db:code>. If <db:code role="parameter">rect</db:code> is a null rect (the default), the item's bounding rect is scrolled.</db:para>
<db:para>Scrolling provides a fast alternative to simply redrawing when the contents of the item (or parts of the item) are shifted vertically or horizontally. Depending on the current transformation and the capabilities of the paint device (i.e., the viewport), this operation may consist of simply moving pixels from one location to another using memmove(). In most cases this is faster than rerendering the entire area.</db:para>
<db:para>After scrolling, the item will issue an update for the newly exposed areas. If scrolling is not supported (e.g., you are rendering to an OpenGL viewport, which does not benefit from scroll optimizations), this function is equivalent to calling update(<db:code role="parameter">rect</db:code>).</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Scrolling is only supported when <db:link xlink:href="qgraphicsitem.xml#CacheMode-enum">QGraphicsItem::ItemCoordinateCache</db:link> is enabled; in all other cases calling this function is equivalent to calling update(<db:code role="parameter">rect</db:code>). If you for sure know that the item is opaque and not overlapped by other items, you can map the <db:code role="parameter">rect</db:code> to viewport coordinates and scroll the viewport.</db:para>
<db:programlisting language="cpp">QTransform xform = item-&amp;gt;deviceTransform(view-&amp;gt;viewportTransform());
QRect deviceRect = xform.mapRect(rect).toAlignedRect();
view-&amp;gt;viewport()-&amp;gt;scroll(dx, dy, deviceRect);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAcceptDrops">
<db:title>void QGraphicsItem::setAcceptDrops(bool <db:emphasis>on</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAcceptDrops</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>on</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAcceptDrops(bool on)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">on</db:code> is true, this item will accept drag and drop events; otherwise, it is transparent for drag and drop events. By default, items do not accept drag and drop events.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#acceptDrops">acceptDrops</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAcceptHoverEvents">
<db:title>void QGraphicsItem::setAcceptHoverEvents(bool <db:emphasis>enabled</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAcceptHoverEvents</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enabled</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAcceptHoverEvents(bool enabled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enabled</db:code> is true, this item will accept hover events; otherwise, it will ignore them. By default, items do not accept hover events.</db:para>
<db:para>Hover events are delivered when there is no current mouse grabber item. They are sent when the mouse cursor enters an item, when it moves around inside the item, and when the cursor leaves an item. Hover events are commonly used to highlight an item when it's entered, and for tracking the mouse cursor as it hovers over the item (equivalent to <db:link xlink:href="qwidget.xml#mouseTracking-prop">QWidget::mouseTracking</db:link>).</db:para>
<db:para>Parent items receive hover enter events before their children, and leave events after their children. The parent does not receive a hover leave event if the cursor enters a child, though; the parent stays &quot;hovered&quot; until the cursor leaves its area, including its children's areas.</db:para>
<db:para>If a parent item handles child events, it will receive hover move, drag move, and drop events as the cursor passes through its children, but it does not receive hover enter and hover leave, nor drag enter and drag leave events on behalf of its children.</db:para>
<db:para>A <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> with window decorations will accept hover events regardless of the value of <db:link xlink:href="qgraphicsitem.xml#acceptHoverEvents">acceptHoverEvents</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#acceptHoverEvents">acceptHoverEvents</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#hoverEnterEvent">hoverEnterEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#hoverMoveEvent">hoverMoveEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#hoverLeaveEvent">hoverLeaveEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAcceptTouchEvents">
<db:title>void QGraphicsItem::setAcceptTouchEvents(bool <db:emphasis>enabled</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAcceptTouchEvents</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enabled</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAcceptTouchEvents(bool enabled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enabled</db:code> is true, this item will accept <db:link xlink:href="qtouchevent.xml">touch events</db:link>; otherwise, it will ignore them. By default, items do not accept touch events.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#acceptTouchEvents">acceptTouchEvents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAcceptedMouseButtons">
<db:title>void QGraphicsItem::setAcceptedMouseButtons(Qt::MouseButtons <db:emphasis>buttons</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAcceptedMouseButtons</db:methodname>
<db:methodparam>
<db:type>Qt::MouseButtons</db:type>
<db:parameter>buttons</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAcceptedMouseButtons(Qt::MouseButtons buttons)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the mouse <db:code role="parameter">buttons</db:code> that this item accepts mouse events for.</db:para>
<db:para>By default, all mouse buttons are accepted. If an item accepts a mouse button, it will become the mouse grabber item when a mouse press event is delivered for that button. However, if the item does not accept the mouse button, <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> will forward the mouse events to the first item beneath it that does.</db:para>
<db:para>To disable mouse events for an item (i.e., make it transparent for mouse events), call setAcceptedMouseButtons(0).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#acceptedMouseButtons">acceptedMouseButtons</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mousePressEvent">mousePressEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setActive">
<db:title>void QGraphicsItem::setActive(bool <db:emphasis>active</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setActive</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>active</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setActive(bool active)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">active</db:code> is true, and the scene is active, this item's panel will be activated. Otherwise, the panel is deactivated.</db:para>
<db:para>If the item is not part of an active scene, <db:code role="parameter">active</db:code> will decide what happens to the panel when the scene becomes active or the item is added to the scene. If true, the item's panel will be activated when the item is either added to the scene or the scene is activated. Otherwise, the item will stay inactive independent of the scene's activated state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#isPanel">isPanel</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#setActivePanel">QGraphicsScene::setActivePanel</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#isActive">QGraphicsScene::isActive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBoundingRegionGranularity">
<db:title>void QGraphicsItem::setBoundingRegionGranularity(qreal <db:emphasis>granularity</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBoundingRegionGranularity</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>granularity</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBoundingRegionGranularity(qreal granularity)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the bounding region granularity to <db:code role="parameter">granularity</db:code>; a value between and including 0 and 1. The default value is 0 (i.e., the lowest granularity, where the bounding region corresponds to the item's bounding rectangle).</db:para>
<db:para>The granularity is used by <db:link xlink:href="qgraphicsitem.xml#boundingRegion">boundingRegion</db:link>() to calculate how fine the bounding region of the item should be. The highest achievable granularity is 1, where <db:link xlink:href="qgraphicsitem.xml#boundingRegion">boundingRegion</db:link>() will return the finest outline possible for the respective device (e.g., for a <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> viewport, this gives you a pixel-perfect bounding region). The lowest possible granularity is 0. The value of <db:code role="parameter">granularity</db:code> describes the ratio between device resolution and the resolution of the bounding region (e.g., a value of 0.25 will provide a region where each chunk corresponds to 4x4 device units / pixels).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#boundingRegionGranularity">boundingRegionGranularity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCacheMode">
<db:title>void QGraphicsItem::setCacheMode(QGraphicsItem::CacheMode <db:emphasis>mode</db:emphasis>, const QSize &amp;<db:emphasis>logicalCacheSize</db:emphasis> = QSize())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCacheMode</db:methodname>
<db:methodparam>
<db:type>QGraphicsItem::CacheMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>logicalCacheSize</db:parameter>
<db:initializer>QSize()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCacheMode(QGraphicsItem::CacheMode mode, const QSize &amp;logicalCacheSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item's cache mode to <db:code role="parameter">mode</db:code>.</db:para>
<db:para>The optional <db:code role="parameter">logicalCacheSize</db:code> argument is used only by <db:link xlink:href="qgraphicsitem.xml#CacheMode-enum">ItemCoordinateCache</db:link> mode, and describes the resolution of the cache buffer; if <db:code role="parameter">logicalCacheSize</db:code> is (100, 100), <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> will fit the item into 100x100 pixels in graphics memory, regardless of the logical size of the item itself. By default <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> uses the size of <db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>(). For all other cache modes than <db:link xlink:href="qgraphicsitem.xml#CacheMode-enum">ItemCoordinateCache</db:link>, <db:code role="parameter">logicalCacheSize</db:code> is ignored.</db:para>
<db:para>Caching can speed up rendering if your item spends a significant time redrawing itself. In some cases the cache can also slow down rendering, in particular when the item spends less time redrawing than <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> spends redrawing from the cache.</db:para>
<db:para>When caching is enabled, an item's <db:link xlink:href="qgraphicsitem.xml#paint">paint</db:link>() function will generally draw into an offscreen pixmap cache; for any subsequent repaint requests, the Graphics View framework will redraw from the cache. This approach works particularly well with QGLWidget, which stores all the cache as OpenGL textures.</db:para>
<db:para>Be aware that <db:link xlink:href="qpixmapcache.xml">QPixmapCache</db:link>'s cache limit may need to be changed to obtain optimal performance.</db:para>
<db:para>You can read more about the different cache modes in the <db:link xlink:href="qgraphicsitem.xml#CacheMode-enum">CacheMode</db:link> documentation.</db:para>
<db:note>
<db:para>Enabling caching does not imply that the item's <db:link xlink:href="qgraphicsitem.xml#paint">paint</db:link>() function will be called only in response to an explicit <db:link xlink:href="qgraphicsitem.xml#update">update</db:link>() call. For instance, under memory pressure, Qt may decide to drop some of the cache information; in such cases an item's <db:link xlink:href="qgraphicsitem.xml#paint">paint</db:link>() function will be called even if there was no <db:link xlink:href="qgraphicsitem.xml#update">update</db:link>() call (that is, exactly as if there were no caching enabled).</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#cacheMode">cacheMode</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#CacheMode-enum">CacheMode</db:link></db:member>
<db:member><db:link xlink:href="qpixmapcache.xml#setCacheLimit">QPixmapCache::setCacheLimit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCursor">
<db:title>void QGraphicsItem::setCursor(const QCursor &amp;<db:emphasis>cursor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCursor</db:methodname>
<db:methodparam>
<db:type>const QCursor &amp;</db:type>
<db:parameter>cursor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCursor(const QCursor &amp;cursor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current cursor shape for the item to <db:code role="parameter">cursor</db:code>. The mouse cursor will assume this shape when it's over this item. See the <db:link xlink:href="qt.xml#CursorShape-enum">list of predefined cursor objects</db:link> for a range of useful shapes.</db:para>
<db:para>An editor item might want to use an I-beam cursor:</db:para>
<db:programlisting language="cpp">item-&amp;gt;setCursor(Qt::IBeamCursor);
</db:programlisting>
<db:para>If no cursor has been set, the cursor of the item beneath is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#cursor">cursor</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#hasCursor">hasCursor</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#unsetCursor">unsetCursor</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#cursor-prop">QWidget::cursor</db:link></db:member>
<db:member><db:link xlink:href="qguiapplication.xml#overrideCursor">QApplication::overrideCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData">
<db:title>void QGraphicsItem::setData(int <db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(int key, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this item's custom data for the key <db:code role="parameter">key</db:code> to <db:code role="parameter">value</db:code>.</db:para>
<db:para>Custom item data is useful for storing arbitrary properties for any item. Qt does not use this feature for storing data; it is provided solely for the convenience of the user.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEnabled">
<db:title>void QGraphicsItem::setEnabled(bool <db:emphasis>enabled</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEnabled</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enabled</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEnabled(bool enabled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enabled</db:code> is true, the item is enabled; otherwise, it is disabled.</db:para>
<db:para>Disabled items are visible, but they do not receive any events, and cannot take focus nor be selected. Mouse events are discarded; they are not propagated unless the item is also invisible, or if it does not accept mouse events (see <db:link xlink:href="qgraphicsitem.xml#acceptedMouseButtons">acceptedMouseButtons</db:link>()). A disabled item cannot become the mouse grabber, and as a result of this, an item loses the grab if it becomes disabled when grabbing the mouse, just like it loses focus if it had focus when it was disabled.</db:para>
<db:para>Disabled items are traditionally drawn using grayed-out colors (see <db:link xlink:href="qpalette.xml#ColorGroup-enum">QPalette::Disabled</db:link>).</db:para>
<db:para>If you disable a parent item, all its children will also be disabled. If you enable a parent item, all children will be enabled, unless they have been explicitly disabled (i.e., if you call setEnabled(false) on a child, it will not be reenabled if its parent is disabled, and then enabled again).</db:para>
<db:para>Items are enabled by default.</db:para>
<db:note>
<db:para>If you install an event filter, you can still intercept events before they are delivered to items; this mechanism disregards the item's enabled state.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#isEnabled">isEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFiltersChildEvents">
<db:title>void QGraphicsItem::setFiltersChildEvents(bool <db:emphasis>enabled</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFiltersChildEvents</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enabled</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFiltersChildEvents(bool enabled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enabled</db:code> is true, this item is set to filter all events for all its children (i.e., all events intented for any of its children are instead sent to this item); otherwise, if <db:code role="parameter">enabled</db:code> is false, this item will only handle its own events. The default value is false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#filtersChildEvents">filtersChildEvents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFlag">
<db:title>void QGraphicsItem::setFlag(QGraphicsItem::GraphicsItemFlag <db:emphasis>flag</db:emphasis>, bool <db:emphasis>enabled</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFlag</db:methodname>
<db:methodparam>
<db:type>QGraphicsItem::GraphicsItemFlag</db:type>
<db:parameter>flag</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enabled</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFlag(QGraphicsItem::GraphicsItemFlag flag, bool enabled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enabled</db:code> is true, the item flag <db:code role="parameter">flag</db:code> is enabled; otherwise, it is disabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#flags">flags</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFlags">
<db:title>void QGraphicsItem::setFlags(QGraphicsItem::GraphicsItemFlags <db:emphasis>flags</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFlags</db:methodname>
<db:methodparam>
<db:type>QGraphicsItem::GraphicsItemFlags</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFlags(QGraphicsItem::GraphicsItemFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item flags to <db:code role="parameter">flags</db:code>. All flags in <db:code role="parameter">flags</db:code> are enabled; all flags not in <db:code role="parameter">flags</db:code> are disabled.</db:para>
<db:para>If the item had focus and <db:code role="parameter">flags</db:code> does not enable <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemIsFocusable</db:link>, the item loses focus as a result of calling this function. Similarly, if the item was selected, and <db:code role="parameter">flags</db:code> does not enabled <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemIsSelectable</db:link>, the item is automatically unselected.</db:para>
<db:para>By default, no flags are enabled. (<db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> enables the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemSendsGeometryChanges</db:link> flag by default in order to track position changes.)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#flags">flags</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setFlag">setFlag</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFocus">
<db:title>void QGraphicsItem::setFocus(Qt::FocusReason <db:emphasis>focusReason</db:emphasis> = Qt::OtherFocusReason)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFocus</db:methodname>
<db:methodparam>
<db:type>Qt::FocusReason</db:type>
<db:parameter>focusReason</db:parameter>
<db:initializer>Qt::OtherFocusReason</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFocus(Qt::FocusReason focusReason)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Gives keyboard input focus to this item. The <db:code role="parameter">focusReason</db:code> argument will be passed into any <db:link xlink:href="qfocusevent.xml">focus event</db:link> generated by this function; it is used to give an explanation of what caused the item to get focus.</db:para>
<db:para>Only enabled items that set the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemIsFocusable</db:link> flag can accept keyboard focus.</db:para>
<db:para>If this item is not visible, not active, or not associated with a scene, it will not gain immediate input focus. However, it will be registered as the preferred focus item for its subtree of items, should it later become visible.</db:para>
<db:para>As a result of calling this function, this item will receive a <db:link xlink:href="qgraphicsitem.xml#focusInEvent">focus in event</db:link> with <db:code role="parameter">focusReason</db:code>. If another item already has focus, that item will first receive a <db:link xlink:href="qgraphicsitem.xml#focusOutEvent">focus out event</db:link> indicating that it has lost input focus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#clearFocus">clearFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#hasFocus">hasFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#focusItem">focusItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#focusProxy">focusProxy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFocusProxy">
<db:title>void QGraphicsItem::setFocusProxy(QGraphicsItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFocusProxy</db:methodname>
<db:methodparam>
<db:type>QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFocusProxy(QGraphicsItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item's focus proxy to <db:code role="parameter">item</db:code>.</db:para>
<db:para>If an item has a focus proxy, the focus proxy will receive input focus when the item gains input focus. The item itself will still have focus (i.e., <db:link xlink:href="qgraphicsitem.xml#hasFocus">hasFocus</db:link>() will return true), but only the focus proxy will receive the keyboard input.</db:para>
<db:para>A focus proxy can itself have a focus proxy, and so on. In such case, keyboard input will be handled by the outermost focus proxy.</db:para>
<db:para>The focus proxy <db:code role="parameter">item</db:code> must belong to the same scene as this item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#focusProxy">focusProxy</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setFocus">setFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#hasFocus">hasFocus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGraphicsEffect">
<db:title>void QGraphicsItem::setGraphicsEffect(QGraphicsEffect *<db:emphasis>effect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setGraphicsEffect</db:methodname>
<db:methodparam>
<db:type>QGraphicsEffect *</db:type>
<db:parameter>effect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGraphicsEffect(QGraphicsEffect *effect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">effect</db:code> as the item's effect. If there already is an effect installed on this item, <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> will delete the existing effect before installing the new <db:code role="parameter">effect</db:code>. You can delete an existing effect by calling setGraphicsEffect(<db:code>nullptr</db:code>).</db:para>
<db:para>If <db:code role="parameter">effect</db:code> is the installed effect on a different item, setGraphicsEffect() will remove the effect from the item and install it on this item.</db:para>
<db:para><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> takes ownership of <db:code role="parameter">effect</db:code>.</db:para>
<db:note>
<db:para>This function will apply the effect on itself and all its children.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#graphicsEffect">graphicsEffect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGroup">
<db:title>void QGraphicsItem::setGroup(QGraphicsItemGroup *<db:emphasis>group</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setGroup</db:methodname>
<db:methodparam>
<db:type>QGraphicsItemGroup *</db:type>
<db:parameter>group</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGroup(QGraphicsItemGroup *group)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds this item to the item group <db:code role="parameter">group</db:code>. If <db:code role="parameter">group</db:code> is <db:code>nullptr</db:code>, this item is removed from any current group and added as a child of the previous group's parent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#group">group</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#createItemGroup">QGraphicsScene::createItemGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setInputMethodHints">
<db:title>void QGraphicsItem::setInputMethodHints(Qt::InputMethodHints <db:emphasis>hints</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setInputMethodHints</db:methodname>
<db:methodparam>
<db:type>Qt::InputMethodHints</db:type>
<db:parameter>hints</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setInputMethodHints(Qt::InputMethodHints hints)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current input method hints of this item to <db:code role="parameter">hints</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#inputMethodHints">inputMethodHints</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#inputMethodQuery">inputMethodQuery</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOpacity">
<db:title>void QGraphicsItem::setOpacity(qreal <db:emphasis>opacity</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOpacity</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>opacity</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOpacity(qreal opacity)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this item's local <db:code role="parameter">opacity</db:code>, between 0.0 (transparent) and 1.0 (opaque). The item's local opacity is combined with parent and ancestor opacities into the <db:link xlink:href="qgraphicsitem.xml#effectiveOpacity">effectiveOpacity</db:link>().</db:para>
<db:para>By default, opacity propagates from parent to child, so if a parent's opacity is 0.5 and the child is also 0.5, the child's effective opacity will be 0.25.</db:para>
<db:para>The opacity property decides the state of the painter passed to the <db:link xlink:href="qgraphicsitem.xml#paint">paint</db:link>() function. If the item is cached, i.e., <db:link xlink:href="qgraphicsitem.xml#CacheMode-enum">ItemCoordinateCache</db:link> or <db:link xlink:href="qgraphicsitem.xml#CacheMode-enum">DeviceCoordinateCache</db:link>, the effective property will be applied to the item's cache as it is rendered.</db:para>
<db:para>There are two item flags that affect how the item's opacity is combined with the parent: <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemIgnoresParentOpacity</db:link> and <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemDoesntPropagateOpacityToChildren</db:link>.</db:para>
<db:note>
<db:para>Setting the opacity of an item to 0 will not make the item invisible (according to <db:link xlink:href="qgraphicsitem.xml#isVisible">isVisible</db:link>()), but the item will be treated like an invisible one. See the documentation of <db:link xlink:href="qgraphicsitem.xml#setVisible">setVisible</db:link>() for more information.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#opacity">opacity</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#effectiveOpacity">effectiveOpacity</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setVisible">setVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPanelModality">
<db:title>void QGraphicsItem::setPanelModality(QGraphicsItem::PanelModality <db:emphasis>panelModality</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPanelModality</db:methodname>
<db:methodparam>
<db:type>QGraphicsItem::PanelModality</db:type>
<db:parameter>panelModality</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPanelModality(QGraphicsItem::PanelModality panelModality)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the modality for this item to <db:code role="parameter">panelModality</db:code>.</db:para>
<db:para>Changing the modality of a visible item takes effect immediately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#panelModality">panelModality</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setParentItem">
<db:title>void QGraphicsItem::setParentItem(QGraphicsItem *<db:emphasis>newParent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setParentItem</db:methodname>
<db:methodparam>
<db:type>QGraphicsItem *</db:type>
<db:parameter>newParent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setParentItem(QGraphicsItem *newParent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this item's parent item to <db:code role="parameter">newParent</db:code>. If this item already has a parent, it is first removed from the previous parent. If <db:code role="parameter">newParent</db:code> is 0, this item will become a top-level item.</db:para>
<db:para>Note that this implicitly adds this graphics item to the scene of the parent. You should not <db:link xlink:href="qgraphicsscene.xml#addItem">add</db:link> the item to the scene yourself.</db:para>
<db:para>The behavior when calling this function on an item that is an ancestor of <db:code role="parameter">newParent</db:code> is undefined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#parentItem">parentItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#childItems">childItems</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPos">
<db:title>void QGraphicsItem::setPos(const QPointF &amp;<db:emphasis>pos</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPos</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPos(const QPointF &amp;pos)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the position of the item to <db:code role="parameter">pos</db:code>, which is in parent coordinates. For items with no parent, <db:code role="parameter">pos</db:code> is in scene coordinates.</db:para>
<db:para>The position of the item describes its origin (local coordinate (0, 0)) in parent coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#pos">pos</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#scenePos">scenePos</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPos-1">
<db:title>void QGraphicsItem::setPos(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPos</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPos(qreal x, qreal y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#setPos">setPos</db:link>(<db:link xlink:href="qpointf.xml">QPointF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>)).</db:para>
</db:section>
<db:section xml:id="setRotation">
<db:title>void QGraphicsItem::setRotation(qreal <db:emphasis>angle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRotation</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>angle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRotation(qreal angle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the clockwise rotation <db:code role="parameter">angle</db:code>, in degrees, around the Z axis. The default value is 0 (i.e., the item is not rotated). Assigning a negative value will rotate the item counter-clockwise. Normally the rotation angle is in the range (-360, 360), but it's also possible to assign values outside of this range (e.g., a rotation of 370 degrees is the same as a rotation of 10 degrees).</db:para>
<db:para>The item is rotated around its transform origin point, which by default is (0, 0). You can select a different transformation origin by calling <db:link xlink:href="qgraphicsitem.xml#setTransformOriginPoint">setTransformOriginPoint</db:link>().</db:para>
<db:para>The rotation is combined with the item's <db:link xlink:href="qgraphicsitem.xml#scale">scale</db:link>(), <db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>() and <db:link xlink:href="qgraphicsitem.xml#transformations">transformations</db:link>() to map the item's coordinate system to the parent item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#rotation">rotation</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setTransformOriginPoint">setTransformOriginPoint</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transformations">Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setScale">
<db:title>void QGraphicsItem::setScale(qreal <db:emphasis>factor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setScale</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>factor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setScale(qreal factor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the scale <db:code role="parameter">factor</db:code> of the item. The default scale factor is 1.0 (i.e., the item is not scaled). A scale factor of 0.0 will collapse the item to a single point. If you provide a negative scale factor, the item will be flipped and mirrored (i.e., rotated 180 degrees).</db:para>
<db:para>The item is scaled around its transform origin point, which by default is (0, 0). You can select a different transformation origin by calling <db:link xlink:href="qgraphicsitem.xml#setTransformOriginPoint">setTransformOriginPoint</db:link>().</db:para>
<db:para>The scale is combined with the item's <db:link xlink:href="qgraphicsitem.xml#rotation">rotation</db:link>(), <db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>() and <db:link xlink:href="qgraphicsitem.xml#transformations">transformations</db:link>() to map the item's coordinate system to the parent item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#scale">scale</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setTransformOriginPoint">setTransformOriginPoint</db:link>()</db:member>
<db:member><db:link xlink:href="qtwidgets-painting-transformations-example.xml">Transformations Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelected">
<db:title>void QGraphicsItem::setSelected(bool <db:emphasis>selected</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSelected</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>selected</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSelected(bool selected)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">selected</db:code> is true and this item is selectable, this item is selected; otherwise, it is unselected.</db:para>
<db:para>If the item is in a group, the whole group's selected state is toggled by this function. If the group is selected, all items in the group are also selected, and if the group is not selected, no item in the group is selected.</db:para>
<db:para>Only visible, enabled, selectable items can be selected. If <db:code role="parameter">selected</db:code> is true and this item is either invisible or disabled or unselectable, this function does nothing.</db:para>
<db:para>By default, items cannot be selected. To enable selection, set the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemIsSelectable</db:link> flag.</db:para>
<db:para>This function is provided for convenience, allowing individual toggling of the selected state of an item. However, a more common way of selecting items is to call <db:link xlink:href="qgraphicsscene.xml#setSelectionArea">QGraphicsScene::setSelectionArea</db:link>(), which will call this function for all visible, enabled, and selectable items within a specified area on the scene.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#isSelected">isSelected</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#selectedItems">QGraphicsScene::selectedItems</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setToolTip">
<db:title>void QGraphicsItem::setToolTip(const QString &amp;<db:emphasis>toolTip</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setToolTip</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>toolTip</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setToolTip(const QString &amp;toolTip)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item's tool tip to <db:code role="parameter">toolTip</db:code>. If <db:code role="parameter">toolTip</db:code> is empty, the item's tool tip is cleared.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#toolTip">toolTip</db:link>()</db:member>
<db:member><db:link xlink:href="qtooltip.xml">QToolTip</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransform">
<db:title>void QGraphicsItem::setTransform(const QTransform &amp;<db:emphasis>matrix</db:emphasis>, bool <db:emphasis>combine</db:emphasis> = false)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTransform</db:methodname>
<db:methodparam>
<db:type>const QTransform &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>combine</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTransform(const QTransform &amp;matrix, bool combine)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item's current transformation matrix to <db:code role="parameter">matrix</db:code>.</db:para>
<db:para>If <db:code role="parameter">combine</db:code> is true, then <db:code role="parameter">matrix</db:code> is combined with the current matrix; otherwise, <db:code role="parameter">matrix</db:code> <db:emphasis>replaces</db:emphasis> the current matrix. <db:code role="parameter">combine</db:code> is false by default.</db:para>
<db:para>To simplify interaction with items using a transformed view, <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> provides mapTo... and mapFrom... functions that can translate between items' and the scene's coordinates. For example, you can call <db:link xlink:href="qgraphicsitem.xml#mapToScene">mapToScene</db:link>() to map an item coordiate to a scene coordinate, or <db:link xlink:href="qgraphicsitem.xml#mapFromScene">mapFromScene</db:link>() to map from scene coordinates to item coordinates.</db:para>
<db:para>The transformation matrix is combined with the item's <db:link xlink:href="qgraphicsitem.xml#rotation">rotation</db:link>(), <db:link xlink:href="qgraphicsitem.xml#scale">scale</db:link>() and <db:link xlink:href="qgraphicsitem.xml#transformations">transformations</db:link>() into a combined transformation that maps the item's coordinate system to its parent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setRotation">setRotation</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setScale">setScale</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setTransformOriginPoint">setTransformOriginPoint</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#the-graphics-view-coordinate-system">The Graphics View Coordinate System</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transformations">Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransformOriginPoint">
<db:title>void QGraphicsItem::setTransformOriginPoint(const QPointF &amp;<db:emphasis>origin</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTransformOriginPoint</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>origin</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTransformOriginPoint(const QPointF &amp;origin)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">origin</db:code> point for the transformation in item coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#transformOriginPoint">transformOriginPoint</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transformations">Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransformOriginPoint-1">
<db:title>void QGraphicsItem::setTransformOriginPoint(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTransformOriginPoint</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTransformOriginPoint(qreal x, qreal y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the origin point for the transformation in item coordinates. This is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#setTransformOriginPoint">setTransformOriginPoint</db:link>(<db:link xlink:href="qpointf.xml">QPointF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>)).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setTransformOriginPoint">setTransformOriginPoint</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transformations">Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransformations">
<db:title>void QGraphicsItem::setTransformations(const QList&lt;QGraphicsTransform *&gt; &amp;<db:emphasis>transformations</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTransformations</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QGraphicsTransform *&gt; &amp;</db:type>
<db:parameter>transformations</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTransformations(const QList&lt;QGraphicsTransform *&gt; &amp;transformations)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a list of graphics <db:code role="parameter">transformations</db:code> (<db:link xlink:href="qgraphicstransform.xml">QGraphicsTransform</db:link>) that currently apply to this item.</db:para>
<db:para>If all you want is to rotate or scale an item, you should call <db:link xlink:href="qgraphicsitem.xml#setRotation">setRotation</db:link>() or <db:link xlink:href="qgraphicsitem.xml#setScale">setScale</db:link>() instead. If you want to set an arbitrary transformation on an item, you can call <db:link xlink:href="qgraphicsitem.xml#setTransform">setTransform</db:link>().</db:para>
<db:para><db:link xlink:href="qgraphicstransform.xml">QGraphicsTransform</db:link> is for applying and controlling a chain of individual transformation operations on an item. It's particularly useful in animations, where each transform operation needs to be interpolated independently, or differently.</db:para>
<db:para>The transformations are combined with the item's <db:link xlink:href="qgraphicsitem.xml#rotation">rotation</db:link>(), <db:link xlink:href="qgraphicsitem.xml#scale">scale</db:link>() and <db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>() to map the item's coordinate system to the parent item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#transformations">transformations</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#scale">scale</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setTransformOriginPoint">setTransformOriginPoint</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transformations">Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVisible">
<db:title>void QGraphicsItem::setVisible(bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVisible</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>visible</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVisible(bool visible)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">visible</db:code> is true, the item is made visible. Otherwise, the item is made invisible. Invisible items are not painted, nor do they receive any events. In particular, mouse events pass right through invisible items, and are delivered to any item that may be behind. Invisible items are also unselectable, they cannot take input focus, and are not detected by <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>'s item location functions.</db:para>
<db:para>If an item becomes invisible while grabbing the mouse, (i.e., while it is receiving mouse events,) it will automatically lose the mouse grab, and the grab is not regained by making the item visible again; it must receive a new mouse press to regain the mouse grab.</db:para>
<db:para>Similarly, an invisible item cannot have focus, so if the item has focus when it becomes invisible, it will lose focus, and the focus is not regained by simply making the item visible again.</db:para>
<db:para>If you hide a parent item, all its children will also be hidden. If you show a parent item, all children will be shown, unless they have been explicitly hidden (i.e., if you call setVisible(false) on a child, it will not be reshown even if its parent is hidden, and then shown again).</db:para>
<db:para>Items are visible by default; it is unnecessary to call setVisible() on a new item.</db:para>
<db:note>
<db:para>An item with opacity set to 0 will still be considered visible, although it will be treated like an invisible item: mouse events will pass through it, it will not be included in the items returned by <db:link xlink:href="qgraphicsview.xml#items">QGraphicsView::items</db:link>(), and so on. However, the item will retain the focus.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#isVisible">isVisible</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#show">show</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#hide">hide</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setOpacity">setOpacity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setX">
<db:title>void QGraphicsItem::setX(qreal <db:emphasis>x</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setX</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setX(qreal x)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set's the <db:code role="parameter">x</db:code> coordinate of the item's position. Equivalent to calling <db:link xlink:href="qgraphicsitem.xml#setPos">setPos</db:link>(x, <db:link xlink:href="qgraphicsitem.xml#y">y</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setPos">setPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setY">
<db:title>void QGraphicsItem::setY(qreal <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setY</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setY(qreal y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set's the <db:code role="parameter">y</db:code> coordinate of the item's position. Equivalent to calling <db:link xlink:href="qgraphicsitem.xml#setPos">setPos</db:link>(<db:link xlink:href="qgraphicsitem.xml#x">x</db:link>(), y).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setPos">setPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setZValue">
<db:title>void QGraphicsItem::setZValue(qreal <db:emphasis>z</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setZValue</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>z</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setZValue(qreal z)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the Z-value of the item to <db:code role="parameter">z</db:code>. The Z value decides the stacking order of sibling (neighboring) items. A sibling item of high Z value will always be drawn on top of another sibling item with a lower Z value.</db:para>
<db:para>If you restore the Z value, the item's insertion order will decide its stacking order.</db:para>
<db:para>The Z-value does not affect the item's size in any way.</db:para>
<db:para>The default Z-value is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#zValue">zValue</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#stackBefore">stackBefore</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemStacksBehindParent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shape">
<db:title>[virtual] QPainterPath QGraphicsItem::shape() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QPainterPath</db:type>
<db:methodname>shape</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainterPath shape() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the shape of this item as a <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> in local coordinates. The shape is used for many things, including collision detection, hit tests, and for the <db:link xlink:href="qgraphicsscene.xml#items">QGraphicsScene::items</db:link>() functions.</db:para>
<db:para>The default implementation calls <db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>() to return a simple rectangular shape, but subclasses can reimplement this function to return a more accurate shape for non-rectangular items. For example, a round item may choose to return an elliptic shape for better collision detection. For example:</db:para>
<db:programlisting language="cpp">QPainterPath RoundItem::shape() const
{
    QPainterPath path;
    path.addEllipse(boundingRect());
    return path;
}
</db:programlisting>
<db:para>The outline of a shape can vary depending on the width and style of the pen used when drawing. If you want to include this outline in the item's shape, you can create a shape from the stroke using <db:link xlink:href="qpainterpathstroker.xml">QPainterPathStroker</db:link>.</db:para>
<db:para>This function is called by the default implementations of <db:link xlink:href="qgraphicsitem.xml#contains">contains</db:link>() and <db:link xlink:href="qgraphicsitem.xml#collidesWithPath">collidesWithPath</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#prepareGeometryChange">prepareGeometryChange</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpathstroker.xml">QPainterPathStroker</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="show">
<db:title>void QGraphicsItem::show()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>show</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void show()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Shows the item (items are visible by default).</db:para>
<db:para>This convenience function is equivalent to calling <db:code>setVisible(true)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#hide">hide</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setVisible">setVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stackBefore">
<db:title>void QGraphicsItem::stackBefore(const QGraphicsItem *<db:emphasis>sibling</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stackBefore</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>sibling</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stackBefore(const QGraphicsItem *sibling)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stacks this item before <db:code role="parameter">sibling</db:code>, which must be a sibling item (i.e., the two items must share the same parent item, or must both be toplevel items). The <db:code role="parameter">sibling</db:code> must have the same Z value as this item, otherwise calling this function will have no effect.</db:para>
<db:para>By default, all sibling items are stacked by insertion order (i.e., the first item you add is drawn before the next item you add). If two items' Z values are different, then the item with the highest Z value is drawn on top. When the Z values are the same, the insertion order will decide the stacking order.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setZValue">setZValue</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemStacksBehindParent</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toGraphicsObject">
<db:title>QGraphicsObject *QGraphicsItem::toGraphicsObject()</db:title>
<db:methodsynopsis>
<db:type>QGraphicsObject *</db:type>
<db:methodname>toGraphicsObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsObject * toGraphicsObject()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the graphics item cast to a <db:link xlink:href="qgraphicsobject.xml">QGraphicsObject</db:link>, if the class is actually a graphics object, 0 otherwise.</db:para>
</db:section>
<db:section xml:id="toGraphicsObject-1">
<db:title>const QGraphicsObject *QGraphicsItem::toGraphicsObject() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QGraphicsObject *</db:type>
<db:methodname>toGraphicsObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const QGraphicsObject * toGraphicsObject() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the graphics item cast to a <db:link xlink:href="qgraphicsobject.xml">QGraphicsObject</db:link>, if the class is actually a graphics object, 0 otherwise.</db:para>
</db:section>
<db:section xml:id="toolTip">
<db:title>QString QGraphicsItem::toolTip() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toolTip</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toolTip() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item's tool tip, or an empty <db:link xlink:href="qstring.xml">QString</db:link> if no tool tip has been set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setToolTip">setToolTip</db:link>()</db:member>
<db:member><db:link xlink:href="qtooltip.xml">QToolTip</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="topLevelItem">
<db:title>QGraphicsItem *QGraphicsItem::topLevelItem() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsItem *</db:type>
<db:methodname>topLevelItem</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsItem * topLevelItem() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this item's top-level item. The top-level item is the item's topmost ancestor item whose parent is <db:code>nullptr</db:code>. If an item has no parent, its own pointer is returned (i.e., a top-level item is its own top-level item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#parentItem">parentItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="topLevelWidget">
<db:title>QGraphicsWidget *QGraphicsItem::topLevelWidget() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsWidget *</db:type>
<db:methodname>topLevelWidget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsWidget * topLevelWidget() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the item's top level widget (i.e., the item's ancestor whose parent is <db:code>nullptr</db:code>, or whose parent is not a widget), or <db:code>nullptr</db:code> if this item does not have a top level widget. If the item is its own top level widget, this function returns a pointer to the item itself.</db:para>
</db:section>
<db:section xml:id="transform">
<db:title>QTransform QGraphicsItem::transform() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTransform</db:type>
<db:methodname>transform</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTransform transform() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this item's transformation matrix.</db:para>
<db:para>The transformation matrix is combined with the item's <db:link xlink:href="qgraphicsitem.xml#rotation">rotation</db:link>(), <db:link xlink:href="qgraphicsitem.xml#scale">scale</db:link>() and <db:link xlink:href="qgraphicsitem.xml#transformations">transformations</db:link>() into a combined transformations for the item.</db:para>
<db:para>The default transformation matrix is an identity matrix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setTransform">setTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneTransform">sceneTransform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transformOriginPoint">
<db:title>QPointF QGraphicsItem::transformOriginPoint() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>transformOriginPoint</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF transformOriginPoint() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the origin point for the transformation in item coordinates.</db:para>
<db:para>The default is <db:link xlink:href="qpointf.xml">QPointF</db:link>(0,0).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setTransformOriginPoint">setTransformOriginPoint</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transformations">Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transformations">
<db:title>QList&lt;QGraphicsTransform *&gt; QGraphicsItem::transformations() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QGraphicsTransform *&gt;</db:type>
<db:methodname>transformations</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QGraphicsTransform *&gt; transformations() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of graphics transforms that currently apply to this item.</db:para>
<db:para><db:link xlink:href="qgraphicstransform.xml">QGraphicsTransform</db:link> is for applying and controlling a chain of individual transformation operations on an item. It's particularly useful in animations, where each transform operation needs to be interpolated independently, or differently.</db:para>
<db:para>The transformations are combined with the item's <db:link xlink:href="qgraphicsitem.xml#rotation">rotation</db:link>(), <db:link xlink:href="qgraphicsitem.xml#scale">scale</db:link>() and <db:link xlink:href="qgraphicsitem.xml#transform">transform</db:link>() to map the item's coordinate system to the parent item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setTransformations">setTransformations</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#scale">scale</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#rotation">rotation</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transformOriginPoint">transformOriginPoint</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#transformations">Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>[virtual] int QGraphicsItem::type() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int type() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of an item as an int. All standard graphicsitem classes are associated with a unique value; see <db:link xlink:href="qgraphicsitem.xml#anonymous-enum">QGraphicsItem::Type</db:link>. This type information is used by <db:link xlink:href="qgraphicsitem.xml#qgraphicsitem_cast">qgraphicsitem_cast</db:link>() to distinguish between types.</db:para>
<db:para>The default implementation (in <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>) returns <db:link xlink:href="qgraphicsitem.xml#anonymous-enum">UserType</db:link>.</db:para>
<db:para>To enable use of <db:link xlink:href="qgraphicsitem.xml#qgraphicsitem_cast">qgraphicsitem_cast</db:link>() with a custom item, reimplement this function and declare a Type enum value equal to your custom item's type. Custom items must return a value larger than or equal to <db:link xlink:href="qgraphicsitem.xml#anonymous-enum">UserType</db:link> (65536).</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">class CustomItem : public QGraphicsItem
{
public:
   enum { Type = UserType + 1 };

   int type() const override
   {
       // Enable the use of qgraphicsitem_cast with this item.
       return Type;
   }
   ...
};
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#anonymous-enum">UserType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ungrabKeyboard">
<db:title>void QGraphicsItem::ungrabKeyboard()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>ungrabKeyboard</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void ungrabKeyboard()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Releases the keyboard grab.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#grabKeyboard">grabKeyboard</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#ungrabMouse">ungrabMouse</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ungrabMouse">
<db:title>void QGraphicsItem::ungrabMouse()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>ungrabMouse</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void ungrabMouse()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Releases the mouse grab.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#grabMouse">grabMouse</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#ungrabKeyboard">ungrabKeyboard</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unsetCursor">
<db:title>void QGraphicsItem::unsetCursor()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>unsetCursor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void unsetCursor()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the cursor from this item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#hasCursor">hasCursor</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setCursor">setCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="update">
<db:title>void QGraphicsItem::update(const QRectF &amp;<db:emphasis>rect</db:emphasis> = QRectF())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>update</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
<db:initializer>QRectF()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void update(const QRectF &amp;rect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Schedules a redraw of the area covered by <db:code role="parameter">rect</db:code> in this item. You can call this function whenever your item needs to be redrawn, such as if it changes appearance or size.</db:para>
<db:para>This function does not cause an immediate paint; instead it schedules a paint request that is processed by <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> after control reaches the event loop. The item will only be redrawn if it is visible in any associated view.</db:para>
<db:para>As a side effect of the item being repainted, other items that overlap the area <db:code role="parameter">rect</db:code> may also be repainted.</db:para>
<db:para>If the item is invisible (i.e., <db:link xlink:href="qgraphicsitem.xml#isVisible">isVisible</db:link>() returns <db:code>false</db:code>), this function does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#paint">paint</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#boundingRect">boundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="update-1">
<db:title>void QGraphicsItem::update(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>width</db:emphasis>, qreal <db:emphasis>height</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>update</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void update(qreal x, qreal y, qreal width, qreal height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This convenience function is equivalent to calling update(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code>)).</db:para>
</db:section>
<db:section xml:id="updateMicroFocus">
<db:title>[protected] void QGraphicsItem::updateMicroFocus()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>updateMicroFocus</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updateMicroFocus()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Updates the item's micro focus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethod.xml">QInputMethod</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[virtual protected] void QGraphicsItem::wheelEvent(QGraphicsSceneWheelEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>wheelEvent</db:methodname>
<db:methodparam>
<db:type>QGraphicsSceneWheelEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void wheelEvent(QGraphicsSceneWheelEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented to receive wheel events for this item. If you reimplement this function, <db:code role="parameter">event</db:code> will be accepted by default.</db:para>
<db:para>If you ignore the event, (i.e., by calling <db:link xlink:href="qevent.xml#ignore">QEvent::ignore</db:link>(),) it will propagate to any item beneath this item. If no items accept the event, it will be ignored by the scene, and propagate to the view (e.g., the view's vertical scroll bar).</db:para>
<db:para>The default implementation ignores the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneEvent">sceneEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="window">
<db:title>QGraphicsWidget *QGraphicsItem::window() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsWidget *</db:type>
<db:methodname>window</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsWidget * window() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item's window, or <db:code>nullptr</db:code> if this item does not have a window. If the item is a window, it will return itself. Otherwise it will return the closest ancestor that is a window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#isWindow">QGraphicsWidget::isWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="x">
<db:title>qreal QGraphicsItem::x() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>x</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal x() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#pos">pos</db:link>().x().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setX">setX</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#y">y</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="y">
<db:title>qreal QGraphicsItem::y() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>y</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal y() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsitem.xml#pos">pos</db:link>().y().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setY">setY</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#x">x</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="zValue">
<db:title>qreal QGraphicsItem::zValue() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>zValue</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal zValue() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the Z-value of the item. The Z-value affects the stacking order of sibling (neighboring) items.</db:para>
<db:para>The default Z-value is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setZValue">setZValue</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#stackBefore">stackBefore</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">ItemStacksBehindParent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qgraphicsitem_cast">
<db:title>T qgraphicsitem_cast(QGraphicsItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>T</db:type>
<db:methodname>qgraphicsitem_cast</db:methodname>
<db:methodparam>
<db:type>QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T qgraphicsitem_cast(QGraphicsItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the given <db:code role="parameter">item</db:code> cast to type T if <db:code role="parameter">item</db:code> is of type T; otherwise, <db:code>nullptr</db:code> is returned.</db:para>
<db:note>
<db:para>To make this function work correctly with custom items, reimplement the <db:link xlink:href="qgraphicsitem.xml#type">type</db:link>() function for each custom <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> subclass.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#type">QGraphicsItem::type</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#anonymous-enum">QGraphicsItem::UserType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QGraphicsItem</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="handlesChildEvents">
<db:title>bool QGraphicsItem::handlesChildEvents() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>handlesChildEvents</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool handlesChildEvents() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns <db:code>true</db:code> if this item handles child events (i.e., all events intended for any of its children are instead sent to this item); otherwise, false is returned.</db:para>
<db:para>This property is useful for item groups; it allows one item to handle events on behalf of its children, as opposed to its children handling their events individually.</db:para>
<db:para>The default is to return false; children handle their own events. The exception for this is if the item is a <db:link xlink:href="qgraphicsitemgroup.xml">QGraphicsItemGroup</db:link>, then it defaults to return true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#setHandlesChildEvents">setHandlesChildEvents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHandlesChildEvents">
<db:title>void QGraphicsItem::setHandlesChildEvents(bool <db:emphasis>enabled</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHandlesChildEvents</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enabled</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHandlesChildEvents(bool enabled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>If <db:code role="parameter">enabled</db:code> is true, this item is set to handle all events for all its children (i.e., all events intented for any of its children are instead sent to this item); otherwise, if <db:code role="parameter">enabled</db:code> is false, this item will only handle its own events. The default value is false.</db:para>
<db:para>This property is useful for item groups; it allows one item to handle events on behalf of its children, as opposed to its children handling their events individually.</db:para>
<db:para>If a child item accepts hover events, its parent will receive hover move events as the cursor passes through the child, but it does not receive hover enter and hover leave events on behalf of its child.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#handlesChildEvents">handlesChildEvents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
