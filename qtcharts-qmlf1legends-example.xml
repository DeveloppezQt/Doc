<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qml F1 Legends</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This application demonstrates how to use <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link> as a datasource for a Chart.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlf1legends.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Let's define an empty <db:link xlink:href="qml-qtcharts-chartview.xml">ChartView</db:link> first:</db:para>
<db:programlisting language="qml">ChartView {
    id: chartView
    title: &quot;Driver Speeds, lap 1&quot;
    anchors.fill: parent
    legend.alignment: Qt.AlignTop
    animationOptions: ChartView.SeriesAnimations
    antialiasing: true
}
</db:programlisting>
<db:para>Our <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link> uses hard-coded test data. In a real application the data source would be a timing system.</db:para>
<db:programlisting language="qml">XmlListModel {
    // Hard-coded test data
    xml: &quot;&lt;results&gt;&lt;row&gt;&lt;speedTrap&gt;0&lt;/speedTrap&gt;&lt;driver&gt;Fittipaldi&lt;/driver&gt;&lt;speed&gt;104.12&lt;/speed&gt;&lt;/row&gt;&quot;
        +&quot;&lt;row&gt;&lt;speedTrap&gt;0&lt;/speedTrap&gt;&lt;driver&gt;Stewart&lt;/driver&gt;&lt;speed&gt;106.12&lt;/speed&gt;&lt;/row&gt;&quot;
        +&quot;&lt;row&gt;&lt;speedTrap&gt;0&lt;/speedTrap&gt;&lt;driver&gt;Hunt&lt;/driver&gt;&lt;speed&gt;106.12&lt;/speed&gt;&lt;/row&gt;&quot;
    ...
    query: &quot;/results/row&quot;

    XmlRole { name: &quot;speedTrap&quot;; query: &quot;speedTrap/string()&quot; }
    XmlRole { name: &quot;driver&quot;; query: &quot;driver/string()&quot; }
    XmlRole { name: &quot;speed&quot;; query: &quot;speed/string()&quot; }
}
// An example XmlListModel containing F1 legend drivers' speeds at speed traps
SpeedsXml {
    id: speedsXml
    onStatusChanged: {
        if (status == XmlListModel.Ready) {
            timer.start();
        }
    }
}
</db:programlisting>
<db:para>The data is parsed with a timer. The line series representing each driver are created on the fly.</db:para>
<db:programlisting language="qml">// A timer to mimic refreshing the data dynamically
Timer {
    id: timer
    interval: 700
    repeat: true
    triggeredOnStart: true
    running: false
    onTriggered: {
        currentIndex++;
        if (currentIndex &lt; speedsXml.count) {
            // Check if there is a series for the data already (we are using driver name to identify series)
            var lineSeries = chartView.series(speedsXml.get(currentIndex).driver);
            if (!lineSeries) {
                lineSeries = chartView.createSeries(ChartView.SeriesTypeLine, speedsXml.get(currentIndex).driver);
                chartView.axisY().min = 0;
                chartView.axisY().max = 250;
                chartView.axisY().tickCount = 6;
                chartView.axisY().titleText = &quot;speed (kph)&quot;;
                chartView.axisX().titleText = &quot;speed trap&quot;;
                chartView.axisX().labelFormat = &quot;%.0f&quot;;
            }
            lineSeries.append(speedsXml.get(currentIndex).speedTrap, speedsXml.get(currentIndex).speed);

            if (speedsXml.get(currentIndex).speedTrap &gt; 3) {
                chartView.axisX().max = Number(speedsXml.get(currentIndex).speedTrap) + 1;
                chartView.axisX().min = chartView.axisX().max - 5;
            } else {
                chartView.axisX().max = 5;
                chartView.axisX().min = 0;
            }
            chartView.axisX().tickCount = chartView.axisX().max - chartView.axisX().min + 1;
        } else {
            // No more data, change x-axis range to show all the data
            timer.stop();
            chartView.animationOptions = ChartView.AllAnimations;
            chartView.axisX().min = 0;
            chartView.axisX().max = speedsXml.get(currentIndex - 1).speedTrap;
        }
    }
}
</db:programlisting>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmlf1legends/main.cpp">qmlf1legends/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmlf1legends/qml/qmlf1legends/SpeedsXml.qml">qmlf1legends/qml/qmlf1legends/SpeedsXml.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmlf1legends/qml/qmlf1legends/main.qml">qmlf1legends/qml/qmlf1legends/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmlf1legends/qmlf1legends.pro">qmlf1legends/qmlf1legends.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmlf1legends/resources.qrc">qmlf1legends/resources.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
