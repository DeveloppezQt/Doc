<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qml F1 Legends</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This application demonstrates how to use <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> as a datasource for a Chart.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlf1legends.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="using-list-models-as-data-sources">
<db:title>Using List Models as Data Sources</db:title>
<db:para>Let's define an empty <db:link xlink:href="qml-qtcharts-chartview.xml">ChartView</db:link> first:</db:para>
<db:programlisting language="qml">ChartView {
    id: chartView
    title: &quot;Driver Speeds, lap 1&quot;
    anchors.fill: parent
    legend.alignment: Qt.AlignTop
    animationOptions: ChartView.SeriesAnimations
    antialiasing: true
}
</db:programlisting>
<db:para>Our <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> uses hard-coded test data. In a real application the data source would be a timing system.</db:para>
<db:programlisting language="qml">ListModel {
    // Hard-coded test data
    ListElement { speedTrap:0; driver: &quot;Fittipaldi&quot;; speed:104.12 }
        ListElement { speedTrap:0; driver:&quot;Stewart&quot;; speed:106.12 }
        ListElement { speedTrap:0; driver:&quot;Hunt&quot;; speed:106.12 }
    ...
// An example ListModel containing F1 legend drivers' speeds at speed traps
SpeedsList {
    id: speedsList
    Component.onCompleted: {
        timer.start();
    }
}
</db:programlisting>
<db:para>The data is parsed with a timer. The line series representing each driver are created on the fly.</db:para>
<db:programlisting language="qml">// A timer to mimic refreshing the data dynamically
Timer {
    id: timer
    interval: 700
    repeat: true
    triggeredOnStart: true
    running: false
    onTriggered: {
        currentIndex++;
        if (currentIndex &amp;lt; speedsList.count) {
            // Check if there is a series for the data already
            // (we are using driver name to identify series)
            var lineSeries = chartView.series(speedsList.get(currentIndex).driver);
            if (!lineSeries) {
                lineSeries = chartView.createSeries(ChartView.SeriesTypeLine,
                                                    speedsList.get(currentIndex).driver);
                chartView.axisY().min = 0;
                chartView.axisY().max = 250;
                chartView.axisY().tickCount = 6;
                chartView.axisY().titleText = &quot;speed (kph)&quot;;
                chartView.axisX().titleText = &quot;speed trap&quot;;
                chartView.axisX().labelFormat = &quot;%.0f&quot;;
            }
            lineSeries.append(speedsList.get(currentIndex).speedTrap,
                              speedsList.get(currentIndex).speed);

            if (speedsList.get(currentIndex).speedTrap &amp;gt; 3) {
                chartView.axisX().max = Number(speedsList.get(currentIndex).speedTrap) + 1;
                chartView.axisX().min = chartView.axisX().max - 5;
            } else {
                chartView.axisX().max = 5;
                chartView.axisX().min = 0;
            }
            chartView.axisX().tickCount = chartView.axisX().max - chartView.axisX().min + 1;
        } else {
            // No more data, change x-axis range to show all the data
            timer.stop();
            chartView.animationOptions = ChartView.AllAnimations;
            chartView.axisX().min = 0;
            chartView.axisX().max = speedsList.get(currentIndex - 1).speedTrap;
        }
    }
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtcharts.git/tree/examples/charts/qmlf1legends?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
