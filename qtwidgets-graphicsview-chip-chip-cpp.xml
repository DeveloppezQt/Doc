<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>40000 Chips</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Visualizes a huge graphic view scene with 40000 chip items.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the demonstration applications of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Digia gives you certain additional
** rights.  These rights are described in the Digia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;chip.h&quot;

#include &lt;QtWidgets&gt;

Chip::Chip(const QColor &amp;color, int x, int y)
{
    this-&gt;x = x;
    this-&gt;y = y;
    this-&gt;color = color;
    setZValue((x + y) % 2);

    setFlags(ItemIsSelectable | ItemIsMovable);
    setAcceptHoverEvents(true);
}

QRectF Chip::boundingRect() const
{
    return QRectF(0, 0, 110, 70);
}

QPainterPath Chip::shape() const
{
    QPainterPath path;
    path.addRect(14, 14, 82, 42);
    return path;
}

void Chip::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)
{
    Q_UNUSED(widget);

    QColor fillColor = (option-&gt;state &amp; QStyle::State_Selected) ? color.dark(150) : color;
    if (option-&gt;state &amp; QStyle::State_MouseOver)
        fillColor = fillColor.light(125);

    const qreal lod = option-&gt;levelOfDetailFromTransform(painter-&gt;worldTransform());
    if (lod &lt; 0.2) {
        if (lod &lt; 0.125) {
            painter-&gt;fillRect(QRectF(0, 0, 110, 70), fillColor);
            return;
        }

        QBrush b = painter-&gt;brush();
        painter-&gt;setBrush(fillColor);
        painter-&gt;drawRect(13, 13, 97, 57);
        painter-&gt;setBrush(b);
        return;
    }

    QPen oldPen = painter-&gt;pen();
    QPen pen = oldPen;
    int width = 0;
    if (option-&gt;state &amp; QStyle::State_Selected)
        width += 2;

    pen.setWidth(width);
    QBrush b = painter-&gt;brush();
    painter-&gt;setBrush(QBrush(fillColor.dark(option-&gt;state &amp; QStyle::State_Sunken ? 120 : 100)));

    painter-&gt;drawRect(QRect(14, 14, 79, 39));
    painter-&gt;setBrush(b);

    if (lod &gt;= 1) {
        painter-&gt;setPen(QPen(Qt::gray, 1));
        painter-&gt;drawLine(15, 54, 94, 54);
        painter-&gt;drawLine(94, 53, 94, 15);
        painter-&gt;setPen(QPen(Qt::black, 0));
    }

    // Draw text
    if (lod &gt;= 2) {
        QFont font(&quot;Times&quot;, 10);
        font.setStyleStrategy(QFont::ForceOutline);
        painter-&gt;setFont(font);
        painter-&gt;save();
        painter-&gt;scale(0.1, 0.1);
        painter-&gt;drawText(170, 180, QString(&quot;Model: VSC-2000 (Very Small Chip) at %1x%2&quot;).arg(x).arg(y));
        painter-&gt;drawText(170, 200, QString(&quot;Serial number: DLWR-WEER-123L-ZZ33-SDSJ&quot;));
        painter-&gt;drawText(170, 220, QString(&quot;Manufacturer: Chip Manufacturer&quot;));
        painter-&gt;restore();
    }

    // Draw lines
    QVarLengthArray&lt;QLineF, 36&gt; lines;
    if (lod &gt;= 0.5) {
        for (int i = 0; i &lt;= 10; i += (lod &gt; 0.5 ? 1 : 2)) {
            lines.append(QLineF(18 + 7 * i, 13, 18 + 7 * i, 5));
            lines.append(QLineF(18 + 7 * i, 54, 18 + 7 * i, 62));
        }
        for (int i = 0; i &lt;= 6; i += (lod &gt; 0.5 ? 1 : 2)) {
            lines.append(QLineF(5, 18 + i * 5, 13, 18 + i * 5));
            lines.append(QLineF(94, 18 + i * 5, 102, 18 + i * 5));
        }
    }
    if (lod &gt;= 0.4) {
        const QLineF lineData[] = {
            QLineF(25, 35, 35, 35),
            QLineF(35, 30, 35, 40),
            QLineF(35, 30, 45, 35),
            QLineF(35, 40, 45, 35),
            QLineF(45, 30, 45, 40),
            QLineF(45, 35, 55, 35)
        };
        lines.append(lineData, 6);
    }
    painter-&gt;drawLines(lines.data(), lines.size());

    // Draw red ink
    if (stuff.size() &gt; 1) {
        QPen p = painter-&gt;pen();
        painter-&gt;setPen(QPen(Qt::red, 1, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin));
        painter-&gt;setBrush(Qt::NoBrush);
        QPainterPath path;
        path.moveTo(stuff.first());
        for (int i = 1; i &lt; stuff.size(); ++i)
            path.lineTo(stuff.at(i));
        painter-&gt;drawPath(path);
        painter-&gt;setPen(p);
    }
}

void Chip::mousePressEvent(QGraphicsSceneMouseEvent *event)
{
    QGraphicsItem::mousePressEvent(event);
    update();
}

void Chip::mouseMoveEvent(QGraphicsSceneMouseEvent *event)
{
    if (event-&gt;modifiers() &amp; Qt::ShiftModifier) {
        stuff &lt;&lt; event-&gt;pos();
        update();
        return;
    }
    QGraphicsItem::mouseMoveEvent(event);
}

void Chip::mouseReleaseEvent(QGraphicsSceneMouseEvent *event)
{
    QGraphicsItem::mouseReleaseEvent(event);
    update();
}

</db:programlisting>
</db:article>
