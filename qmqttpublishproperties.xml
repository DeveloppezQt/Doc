<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMqttPublishProperties Class</db:title>
<db:productname>QtMqtt</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt MQTT Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmqttpublishproperties.xml">QMqttPublishProperties</db:link> class represents configuration options for sending or receiving a message.</db:para>
<db:para>This class was introduced in Qt 5.12.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMqttPublishProperties</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.12</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += mqtt</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Invoking <db:link xlink:href="qmqttclient.xml#publish">QMqttClient::publish</db:link>() to send a message to a broker can include <db:link xlink:href="qmqttpublishproperties.xml">QMqttPublishProperties</db:link> to provide additional arguments on how the message should be treated on the broker.</db:para>
<db:para>Furthermore receiving a message by an instantiated subscription might contain publish properties which have been forwarded or adapted by the server.</db:para>
<db:note>
<db:para>Publish properties are part of the MQTT 5.0 specification and cannot be used when connecting with a lower protocol level. See <db:link xlink:href="qmqttclient.xml#ProtocolVersion-enum">QMqttClient::ProtocolVersion</db:link> for more information.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="PublishPropertyDetail-enum">
<db:title>enum QMqttPublishProperties::PublishPropertyDetail</db:title>
<db:bridgehead renderas="sect2">flags QMqttPublishProperties::PublishPropertyDetails</db:bridgehead>
<db:enumsynopsis>
<db:enumname>PublishPropertyDetail</db:enumname>
<db:enumitem>
<db:enumidentifier>None</db:enumidentifier>
<db:enumvalue>0x00000000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PayloadFormatIndicator</db:enumidentifier>
<db:enumvalue>0x00000001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MessageExpiryInterval</db:enumidentifier>
<db:enumvalue>0x00000002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TopicAlias</db:enumidentifier>
<db:enumvalue>0x00000004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ResponseTopic</db:enumidentifier>
<db:enumvalue>0x00000008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CorrelationData</db:enumidentifier>
<db:enumvalue>0x00000010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UserProperty</db:enumidentifier>
<db:enumvalue>0x00000020</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SubscriptionIdentifier</db:enumidentifier>
<db:enumvalue>0x00000040</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ContentType</db:enumidentifier>
<db:enumvalue>0x00000080</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QMqttPublishProperties::PublishPropertyDetails</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum type specifies the available properties set by the server or the client when creating a message.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttpublishproperties.xml">QMqttPublishProperties</db:link></db:emphasis>::None</db:code></db:para>
</db:td>
<db:td><db:code>0x00000000</db:code></db:td>
<db:td>
<db:para>No property has been specified.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttpublishproperties.xml">QMqttPublishProperties</db:link></db:emphasis>::PayloadFormatIndicator</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>The type of content of the message.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttpublishproperties.xml">QMqttPublishProperties</db:link></db:emphasis>::MessageExpiryInterval</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>The duration a message is valid.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttpublishproperties.xml">QMqttPublishProperties</db:link></db:emphasis>::TopicAlias</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>The topic alias for this message.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttpublishproperties.xml">QMqttPublishProperties</db:link></db:emphasis>::ResponseTopic</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
<db:td>
<db:para>The topic the receipient should respond to.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttpublishproperties.xml">QMqttPublishProperties</db:link></db:emphasis>::CorrelationData</db:code></db:para>
</db:td>
<db:td><db:code>0x00000010</db:code></db:td>
<db:td>
<db:para>An identifier of the response message.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttpublishproperties.xml">QMqttPublishProperties</db:link></db:emphasis>::UserProperty</db:code></db:para>
</db:td>
<db:td><db:code>0x00000020</db:code></db:td>
<db:td>
<db:para>Additional properties set by the user.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttpublishproperties.xml">QMqttPublishProperties</db:link></db:emphasis>::SubscriptionIdentifier</db:code></db:para>
</db:td>
<db:td><db:code>0x00000040</db:code></db:td>
<db:td>
<db:para>An identifier of subscriptions matching the publication.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttpublishproperties.xml">QMqttPublishProperties</db:link></db:emphasis>::ContentType</db:code></db:para>
</db:td>
<db:td><db:code>0x00000080</db:code></db:td>
<db:td>
<db:para>A description of the content of the message.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>PublishPropertyDetails</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;PublishPropertyDetail&gt;. </db:code>It stores an OR combination of <db:code>PublishPropertyDetail</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="availableProperties">
<db:title>QMqttPublishProperties::PublishPropertyDetails QMqttPublishProperties::availableProperties() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMqttPublishProperties::PublishPropertyDetails</db:type>
<db:methodname>availableProperties</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMqttPublishProperties::PublishPropertyDetails availableProperties() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the available properties specified in this instance. When a message is created, it does not need to include all properties. This function serves as an indicator of those properties which have been explicitly set.</db:para>
</db:section>
<db:section xml:id="contentType">
<db:title>QString QMqttPublishProperties::contentType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>contentType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString contentType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the content type of the message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttpublishproperties.xml#setContentType">setContentType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="correlationData">
<db:title>QByteArray QMqttPublishProperties::correlationData() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>correlationData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray correlationData() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the correlation data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttpublishproperties.xml#setCorrelationData">setCorrelationData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="messageExpiryInterval">
<db:title>quint32 QMqttPublishProperties::messageExpiryInterval() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>quint32</db:type>
<db:methodname>messageExpiryInterval</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">quint32 messageExpiryInterval() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the message expiry interval. This value specifies the number of seconds a server is allowed to forward the message. If the interval expires, the server must delete the message and abort publishing it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttpublishproperties.xml#setMessageExpiryInterval">setMessageExpiryInterval</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="payloadFormatIndicator">
<db:title>QMqtt::PayloadFormatIndicator QMqttPublishProperties::payloadFormatIndicator() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMqtt::PayloadFormatIndicator</db:type>
<db:methodname>payloadFormatIndicator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMqtt::PayloadFormatIndicator payloadFormatIndicator() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the payload format indicator.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttpublishproperties.xml#setPayloadFormatIndicator">setPayloadFormatIndicator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="responseTopic">
<db:title>QString QMqttPublishProperties::responseTopic() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>responseTopic</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString responseTopic() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the response topic a user should use as a follow up to a request.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttpublishproperties.xml#setResponseTopic">setResponseTopic</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContentType">
<db:title>void QMqttPublishProperties::setContentType(const QString &amp;<db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setContentType</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setContentType(const QString &amp;type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the content type of the message to <db:code role="parameter">type</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttpublishproperties.xml#contentType">contentType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCorrelationData">
<db:title>void QMqttPublishProperties::setCorrelationData(const QByteArray &amp;<db:emphasis>correlation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCorrelationData</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>correlation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCorrelationData(const QByteArray &amp;correlation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the correlation data to <db:code role="parameter">correlation</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttpublishproperties.xml#correlationData">correlationData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMessageExpiryInterval">
<db:title>void QMqttPublishProperties::setMessageExpiryInterval(quint32 <db:emphasis>interval</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMessageExpiryInterval</db:methodname>
<db:methodparam>
<db:type>quint32</db:type>
<db:parameter>interval</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMessageExpiryInterval(quint32 interval)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the message expiry interval to <db:code role="parameter">interval</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttpublishproperties.xml#messageExpiryInterval">messageExpiryInterval</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPayloadFormatIndicator">
<db:title>void QMqttPublishProperties::setPayloadFormatIndicator(QMqtt::PayloadFormatIndicator <db:emphasis>indicator</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPayloadFormatIndicator</db:methodname>
<db:methodparam>
<db:type>QMqtt::PayloadFormatIndicator</db:type>
<db:parameter>indicator</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPayloadFormatIndicator(QMqtt::PayloadFormatIndicator indicator)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the payload format indicator to <db:code role="parameter">indicator</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttpublishproperties.xml#payloadFormatIndicator">payloadFormatIndicator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setResponseTopic">
<db:title>void QMqttPublishProperties::setResponseTopic(const QString &amp;<db:emphasis>topic</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setResponseTopic</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>topic</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setResponseTopic(const QString &amp;topic)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the response topic to <db:code role="parameter">topic</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttpublishproperties.xml#responseTopic">responseTopic</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSubscriptionIdentifiers">
<db:title>void QMqttPublishProperties::setSubscriptionIdentifiers(const QList&lt;quint32&gt; &amp;<db:emphasis>ids</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSubscriptionIdentifiers</db:methodname>
<db:methodparam>
<db:type>const QList&lt;quint32&gt; &amp;</db:type>
<db:parameter>ids</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSubscriptionIdentifiers(const QList&lt;quint32&gt; &amp;ids)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the subscription identifiers to <db:code role="parameter">ids</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttpublishproperties.xml#subscriptionIdentifiers">subscriptionIdentifiers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTopicAlias">
<db:title>void QMqttPublishProperties::setTopicAlias(quint16 <db:emphasis>alias</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTopicAlias</db:methodname>
<db:methodparam>
<db:type>quint16</db:type>
<db:parameter>alias</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTopicAlias(quint16 alias)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the topic alias for publishing a message to <db:code role="parameter">alias</db:code>. A topic alias value must be greater than zero and less than the maximum topic alias specified by the server.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttpublishproperties.xml#topicAlias">topicAlias</db:link>()</db:member>
<db:member><db:link xlink:href="qmqttconnectionproperties.xml#maximumTopicAlias">QMqttServerConnectionProperties::maximumTopicAlias</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUserProperties">
<db:title>void QMqttPublishProperties::setUserProperties(const QMqttUserProperties &amp;<db:emphasis>properties</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUserProperties</db:methodname>
<db:methodparam>
<db:type>const QMqttUserProperties &amp;</db:type>
<db:parameter>properties</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUserProperties(const QMqttUserProperties &amp;properties)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the user properties of a message to <db:code role="parameter">properties</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttpublishproperties.xml#userProperties">userProperties</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="subscriptionIdentifiers">
<db:title>QList&lt;quint32&gt; QMqttPublishProperties::subscriptionIdentifiers() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;quint32&gt;</db:type>
<db:methodname>subscriptionIdentifiers</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;quint32&gt; subscriptionIdentifiers() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the subscription identifiers of subscriptions matching the topic filter of the message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttpublishproperties.xml#setSubscriptionIdentifiers">setSubscriptionIdentifiers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="topicAlias">
<db:title>quint16 QMqttPublishProperties::topicAlias() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>quint16</db:type>
<db:methodname>topicAlias</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">quint16 topicAlias() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the topic alias used for publishing a message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttpublishproperties.xml#setTopicAlias">setTopicAlias</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="userProperties">
<db:title>QMqttUserProperties QMqttPublishProperties::userProperties() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMqttUserProperties</db:type>
<db:methodname>userProperties</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMqttUserProperties userProperties() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the user properties of a message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttpublishproperties.xml#setUserProperties">setUserProperties</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
