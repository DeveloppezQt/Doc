<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWebSocketCorsAuthenticator Class</db:title>
<db:productname>QtWebSockets</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebSockets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwebsocketcorsauthenticator.xml">QWebSocketCorsAuthenticator</db:link> class provides an authenticator object for Cross Origin Requests (CORS).</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWebSocketCorsAuthenticator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS WebSockets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::WebSockets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += websockets</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qwebsocketcorsauthenticator.xml">QWebSocketCorsAuthenticator</db:link> class is used in the <db:link xlink:href="qwebsocketserver.xml#originAuthenticationRequired">originAuthenticationRequired</db:link>() signal. The class provides a way to pass back the required information to the <db:link xlink:href="qwebsocketserver.xml">QWebSocketServer</db:link>. It provides applications with fine-grained control over which origin URLs are allowed and which aren't. By default, every origin is accepted. To get fine-grained control, an application connects the <db:link xlink:href="qwebsocketserver.xml#originAuthenticationRequired">originAuthenticationRequired</db:link>() signal to a slot. When the origin (<db:link xlink:href="qwebsocketcorsauthenticator.xml#origin">QWebSocketCorsAuthenticator::origin</db:link>()) is accepted, it calls <db:link xlink:href="qwebsocketcorsauthenticator.xml#setAllowed">QWebSocketCorsAuthenticator::setAllowed</db:link>(true)</db:para>
<db:note>
<db:para>Checking on the origin does not make much sense when the server is accessed via a non-browser client, as that client can set whatever origin header it likes. In case of a browser client, the server SHOULD check the validity of the origin.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="https://datatracker.ietf.org/doc/html/rfc6455#section-10">WebSocket Security Considerations</db:link></db:member>
<db:member><db:link xlink:href="qwebsocketserver.xml">QWebSocketServer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWebSocketCorsAuthenticator">
<db:title>[explicit] QWebSocketCorsAuthenticator::QWebSocketCorsAuthenticator(const QString &amp;<db:emphasis>origin</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QWebSocketCorsAuthenticator</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>origin</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebSocketCorsAuthenticator(const QString &amp;origin)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new QCorsAuthencator object with the given <db:code role="parameter">origin</db:code>.</db:para>
<db:note>
<db:para>By default, <db:link xlink:href="qwebsocketcorsauthenticator.xml#allowed">allowed</db:link>() returns true. This means that per default every origin is accepted.</db:para>
</db:note>
</db:section>
<db:section xml:id="QWebSocketCorsAuthenticator-1">
<db:title>[explicit] QWebSocketCorsAuthenticator::QWebSocketCorsAuthenticator(const QWebSocketCorsAuthenticator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QWebSocketCorsAuthenticator</db:methodname>
<db:methodparam>
<db:type>const QWebSocketCorsAuthenticator &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebSocketCorsAuthenticator(const QWebSocketCorsAuthenticator &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QWebSocketCorsAuthenticator-2">
<db:title>QWebSocketCorsAuthenticator::QWebSocketCorsAuthenticator(QWebSocketCorsAuthenticator &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QWebSocketCorsAuthenticator</db:methodname>
<db:methodparam>
<db:type>QWebSocketCorsAuthenticator &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebSocketCorsAuthenticator(QWebSocketCorsAuthenticator &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a <db:link xlink:href="qwebsocketcorsauthenticator.xml">QWebSocketCorsAuthenticator</db:link>, making it point at the same object <db:code role="parameter">other</db:code> was pointing to.</db:para>
</db:section>
<db:section xml:id="dtor.QWebSocketCorsAuthenticator">
<db:title>QWebSocketCorsAuthenticator::~QWebSocketCorsAuthenticator()</db:title>
<db:destructorsynopsis>
<db:methodname>~QWebSocketCorsAuthenticator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QWebSocketCorsAuthenticator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the object.</db:para>
</db:section>
<db:section xml:id="allowed">
<db:title>bool QWebSocketCorsAuthenticator::allowed() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>allowed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool allowed() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the origin is allowed, otherwise returns false.</db:para>
<db:note>
<db:para>By default, all origins are accepted.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocketcorsauthenticator.xml#setAllowed">setAllowed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="origin">
<db:title>QString QWebSocketCorsAuthenticator::origin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>origin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString origin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the origin this autenticator is handling about.</db:para>
</db:section>
<db:section xml:id="setAllowed">
<db:title>void QWebSocketCorsAuthenticator::setAllowed(bool <db:emphasis>allowed</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAllowed</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>allowed</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAllowed(bool allowed)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Allows or disallows the origin. Setting <db:code role="parameter">allowed</db:code> to true, will accept the connection request for the given origin.</db:para>
<db:para>Setting <db:code role="parameter">allowed</db:code> to false, will reject the connection request.</db:para>
<db:note>
<db:para>By default, all origins are accepted.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocketcorsauthenticator.xml#allowed">allowed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QWebSocketCorsAuthenticator::swap(QWebSocketCorsAuthenticator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QWebSocketCorsAuthenticator &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QWebSocketCorsAuthenticator &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps <db:code role="parameter">other</db:code> with this authenticator.</db:para>
<db:para>This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QWebSocketCorsAuthenticator &amp;QWebSocketCorsAuthenticator::operator=(QWebSocketCorsAuthenticator &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QWebSocketCorsAuthenticator &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QWebSocketCorsAuthenticator &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebSocketCorsAuthenticator &amp; operator=(QWebSocketCorsAuthenticator &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this instance.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QWebSocketCorsAuthenticator &amp;QWebSocketCorsAuthenticator::operator=(const QWebSocketCorsAuthenticator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QWebSocketCorsAuthenticator &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QWebSocketCorsAuthenticator &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebSocketCorsAuthenticator &amp; operator=(const QWebSocketCorsAuthenticator &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this authenticator object.</db:para>
</db:section>
</db:section>
</db:article>
