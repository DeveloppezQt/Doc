<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Legend Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how to detach the legend from the chart and how to attach it back.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>By default, the chart draws the legend inside the same graphics view the chart is contained within. In some cases, the user may want to draw the legend somewhere else. To make this possible, the legend can be detached from the chart. Detaching means that the legend is no longer fixed to an edge of the chart, and the chart no longer controls the legend's layout. Instead, the legend geometry is controlled by the user, allowing free control of the location and size of the legend. This can be floating atop the content of the chart, or even drawn in a different graphics scene. The behavior of the legend can be tested by running this example.</db:para>
<db:para>In this example we show a bar series, allowing bar sets to be added or removed interactively. The legend reflects the changes in series as bar sets are added and/or removed. The attachment of the legend, its alignment, and its ability to be moved and resized can be controlled using methods in <db:code>QLegend</db:code>.</db:para>
<db:para>When the legend is detached, it can be resized and positioned freely. If the interactive feature of the legend is enabled, the legend can be freely dragged and resized by the user. If the user drags the legend off of any side of the chart, it will automatically re-attach to that side of the chart.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_legend_detach.png"/>
</db:imageobject>
</db:mediaobject>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_legend_detach2.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="detaching-and-attaching-legends">
<db:title>Detaching and Attaching Legends</db:title>
<db:para>Here we turn the legend visible and set its alignment to the bottom of the chart.</db:para>
<db:programlisting language="cpp">    m_chart-&amp;gt;legend()-&amp;gt;setVisible(true);
    m_chart-&amp;gt;legend()-&amp;gt;setAlignment(Qt::AlignBottom);
</db:programlisting>
<db:para>This snippet shows how to detach the legend from the chart.</db:para>
<db:programlisting language="cpp">legend-&amp;gt;detachFromChart();
</db:programlisting>
<db:para>Here we reattach the legend to the chart. The background is turned invisible.</db:para>
<db:programlisting language="cpp">legend-&amp;gt;attachToChart();
</db:programlisting>
<db:para>Here we connect to the signal emitted when the legend is detached or attached, turning its background on when detached and off when attached. This makes it easier to see how the items inside the legend are arranged when it is detached.</db:para>
<db:programlisting language="cpp">    connect(legend, &amp;amp;QLegend::attachedToChartChanged, [legend, this](bool attachedToChart) {
        m_toggleAttachedButton-&amp;gt;setChecked(attachedToChart);
        legend-&amp;gt;setBackgroundVisible(!attachedToChart);
        m_geometrySettings-&amp;gt;setDisabled(attachedToChart);
    });
</db:programlisting>
<db:para>This shows how to make the legend interactive to the user using a pointing device such as a mouse.</db:para>
<db:programlisting language="cpp">    legend-&amp;gt;setInteractive(true);
</db:programlisting>
<db:para>This shows how we set the detached legend dimensions if the legend is not interactive. After setting the new values, we call update to show changes on screen.</db:para>
<db:programlisting language="cpp">    QRectF geom = m_chart-&amp;gt;legend()-&amp;gt;geometry();
    if (qFuzzyCompare(geom.x(), m_legendPosX-&amp;gt;value())
            &amp;amp;&amp;amp; qFuzzyCompare(geom.y(), m_legendPosY-&amp;gt;value())
            &amp;amp;&amp;amp; qFuzzyCompare(geom.width(), m_legendWidth-&amp;gt;value())
            &amp;amp;&amp;amp; qFuzzyCompare(geom.height(), m_legendHeight-&amp;gt;value()))
        return;

    m_chart-&amp;gt;legend()-&amp;gt;setGeometry(QRectF(m_legendPosX-&amp;gt;value(),
                                          m_legendPosY-&amp;gt;value(),
                                          m_legendWidth-&amp;gt;value(),
                                          m_legendHeight-&amp;gt;value()));
    m_chart-&amp;gt;legend()-&amp;gt;update();
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtcharts.git/tree/examples/charts/legend?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
