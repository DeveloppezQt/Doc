<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ContextMenu QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qml-qtquick-controls-contextmenu.xml">ContextMenu</db:link> attached type provides a way to open a context menu in a platform-appropriate manner.</db:para>
<db:para>This type was introduced in Qt 6.9.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.9</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>ContextMenu is part of <db:simplelist><db:member>qtquickcontrols-menus</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls-contextmenu.xml">ContextMenu</db:link> can be attached to any <db:link xlink:href="qquickitem.xml">item</db:link> in order to show a context menu upon a platform-specific event, such as a right click or the context menu key.</db:para>
<db:programlisting language="qml">Pane {
    anchors.fill: parent

    ContextMenu.menu: Menu {
        MenuItem {
            text: qsTr(&quot;Eat Tomato&quot;)
            onTriggered: { /* ... */ }
        }
        MenuItem {
            text: qsTr(&quot;Throw Tomato&quot;)
            onTriggered: { /* ... */ }
        }
        MenuItem {
            text: qsTr(&quot;Squash Tomato&quot;)
            onTriggered: { /* ... */ }
        }
    }
}
</db:programlisting>
<db:section xml:id="sharing-context-menus">
<db:title>Sharing context menus</db:title>
<db:para>It's possible to share a <db:link xlink:href="qml-qtquick-controls-menu.xml">Menu</db:link> amongst several attached context menu objects. This allows reusing a single Menu when the items that need context menus have data in common. For example:</db:para>
<db:programlisting language="qml">pragma ComponentBehavior: Bound

import QtQuick
import QtQuick.Controls.Basic
import QtQuick.Templates as T

ApplicationWindow {
    width: 600
    height: 400
    visible: true

    component Tomato: Label {
        id: tomato
        objectName: text
        horizontalAlignment: Label.AlignHCenter
        verticalAlignment: Label.AlignVCenter
        width: Math.max(200, contentWidth * 1.5, contentWidth * 1.5)
        height: width
        color: skinColor

        function eat() { print(&quot;Ate &quot; + text) }
        function ditch() { print(&quot;Threw &quot; + text) }
        function squash() { print(&quot;Squashed &quot; + text) }

        property color skinColor: &quot;tomato&quot;

        background: Rectangle {
            color: tomato.skinColor
            radius: width / 2
        }

        ContextMenu.menu: contextMenu
    }

    Menu {
        id: contextMenu

        readonly property Tomato triggerItem: parent as Tomato
        readonly property string triggerItemText: triggerItem?.text ?? &quot;&quot;

        MenuItem {
            text: qsTr(&quot;Eat %1&quot;).arg(contextMenu.triggerItemText)
            onTriggered: contextMenu.triggerItem.eat()
        }
        MenuItem {
            text: qsTr(&quot;Throw %1&quot;).arg(contextMenu.triggerItemText)
            onTriggered: contextMenu.triggerItem.ditch()
        }
        MenuItem {
            text: qsTr(&quot;Squash %1&quot;).arg(contextMenu.triggerItemText)
            onTriggered: contextMenu.triggerItem.squash()
        }
    }

    Row {
        anchors.centerIn: parent

        Tomato {
            text: qsTr(&quot;tomato&quot;)
        }

        Tomato {
            text: qsTr(&quot;really ripe tomato&quot;)
            skinColor: &quot;maroon&quot;
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="performance">
<db:title>Performance</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls-contextmenu.xml">ContextMenu</db:link> lazily creates its <db:code>Menu</db:code> only when it's requested. If it wasn't for this optimization, the <db:code>Menu</db:code> would be created when the containing component is being loaded, which is typically at application startup.</db:para>
<db:para>It is recommended not to give the <db:code>Menu</db:code> assigned to <db:link xlink:href="qml-qtquick-controls-contextmenu.xml">ContextMenu</db:link>'s <db:link xlink:href="qml-qtquick-controls-contextmenu.xml#menu-prop">menu</db:link> property an id when it's defined where it's assigned. Doing so prevents this optimization. For example:</db:para>
<db:programlisting language="qml">Pane {
    anchors.fill: parent

    ContextMenu.menu: Menu {
        // This prevents lazy creation of the Menu.
        id: myMenu

        // ...
    }
}
</db:programlisting>
<db:para>The example in the <db:link xlink:href="qml-qtquick-controls-contextmenu.xml#sharing-context-menus">Sharing context menus</db:link> section works because the <db:code>Menu</db:code> is defined separately from its assignment.</db:para>
</db:section>
<db:section xml:id="interaction-with-other-menus">
<db:title>Interaction with other menus</db:title>
<db:para>If a <db:code>Menu</db:code> is opened via e.g. a <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link> or other means, <db:link xlink:href="qml-qtquick-controls-contextmenu.xml">ContextMenu</db:link> will not open at the same time. This allows legacy applications that were written before <db:link xlink:href="qml-qtquick-controls-contextmenu.xml">ContextMenu</db:link> was introduced to continue working as expected.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="menu-prop">
<db:title>menu : Menu</db:title>
<db:para>This property holds the context menu that will be opened. It can be set to any <db:link xlink:href="qml-qtquick-controls-menu.xml">Menu</db:link> object.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qml-qtquick-controls-menu.xml">Menu</db:link> assigned to this property cannot be given an id. See <db:link xlink:href="qml-qtquick-controls-contextmenu.xml#sharing-context-menus">Sharing context menus</db:link> for more information.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="requested-signal">
<db:title>requested(point <db:emphasis>position</db:emphasis>)</db:title>
<db:para>This signal is emitted when a context menu is requested.</db:para>
<db:para>If it was requested by a right mouse button click, <db:code role="parameter">position</db:code> gives the position of the click relative to the parent.</db:para>
<db:para>The example below shows how to programmatically open a context menu:</db:para>
<db:programlisting language="qml">Button {
    id: button
    text: qsTr(&quot;Click me!&quot;)
    ContextMenu.onRequested: position =&gt; {
        const menu = buttonMenu.createObject(button)
        menu.popup(position)
    }
}

Component {
    id: buttonMenu
    Menu {
        MenuItem { text: qsTr(&quot;Open&quot;) }
    }
}
</db:programlisting>
<db:para>If no menu is set, but this signal is connected, the context menu event will be accepted and will not propagate.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onRequested</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcontextmenuevent.xml#pos">QContextMenuEvent::pos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
