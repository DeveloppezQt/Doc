<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStringConverter Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstringconverter.xml">QStringConverter</db:link> class provides a base class for encoding and decoding text.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStringConverter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qstringdecoder.xml" xlink:role="class">QStringDecoder</db:link> and <db:link xlink:href="qstringencoder.xml" xlink:role="class">QStringEncoder</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStringConverter is part of <db:simplelist><db:member>i18n</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Qt uses UTF-16 to store, draw and manipulate strings. In many situations you may wish to deal with data that uses a different encoding. Most text data transferred over files and network connections is encoded in UTF-8.</db:para>
<db:para>The <db:link xlink:href="qstringconverter.xml">QStringConverter</db:link> class is a base class for the <db:link xlink:href="qstringencoder.xml">QStringEncoder</db:link> and <db:link xlink:href="qstringdecoder.xml">QStringDecoder</db:link> classes that help with converting between different text encodings. <db:link xlink:href="qstringdecoder.xml">QStringDecoder</db:link> can decode a string from an encoded representation into UTF-16, the format Qt uses internally. <db:link xlink:href="qstringencoder.xml">QStringEncoder</db:link> does the opposite operation, encoding UTF-16 encoded data (usually in the form of a <db:link xlink:href="qstring.xml">QString</db:link>) to the requested encoding.</db:para>
<db:para>The following encodings are always supported:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>UTF-8</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-16</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-16BE</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-16LE</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-32</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-32BE</db:para>
</db:listitem>
<db:listitem>
<db:para>UTF-32LE</db:para>
</db:listitem>
<db:listitem>
<db:para>ISO-8859-1 (Latin-1)</db:para>
</db:listitem>
<db:listitem>
<db:para>The system encoding</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:link xlink:href="qstringconverter.xml">QStringConverter</db:link> may support more encodings depending on how Qt was compiled. If more codecs are supported, they can be listed using <db:link xlink:href="qstringconverter.xml#availableCodecs">availableCodecs</db:link>().</db:para>
<db:para><db:link xlink:href="qstringconverter.xml">QStringConverter</db:link>s can be used as follows to convert some encoded string to and from UTF-16.</db:para>
<db:para>Suppose you have some string encoded in UTF-8, and want to convert it to a <db:link xlink:href="qstring.xml">QString</db:link>. The simple way to do it is to use a <db:link xlink:href="qstringdecoder.xml">QStringDecoder</db:link> like this:</db:para>
<db:programlisting language="cpp">QByteArray encodedString = &quot;...&quot;;
auto toUtf16 = QStringDecoder(QStringDecoder::Utf8);
QString string = toUtf16(encodedString);
</db:programlisting>
<db:para>After this, <db:code>string</db:code> holds the text in decoded form. Converting a string from Unicode to the local encoding is just as easy using the <db:link xlink:href="qstringencoder.xml">QStringEncoder</db:link> class:</db:para>
<db:programlisting language="cpp">QString string = &quot;...&quot;;
auto fromUtf16 = QStringEncoder(QStringEncoder::Utf8);
QByteArray encodedString = fromUtf16(string);
</db:programlisting>
<db:para>To read or write text files in various encodings, use <db:link xlink:href="qtextstream.xml">QTextStream</db:link> and its <db:link xlink:href="qtextstream.xml#setEncoding">setEncoding</db:link>() function.</db:para>
<db:para>Some care must be taken when trying to convert the data in chunks, for example, when receiving it over a network. In such cases it is possible that a multi-byte character will be split over two chunks. At best this might result in the loss of a character and at worst cause the entire conversion to fail.</db:para>
<db:para>Both <db:link xlink:href="qstringencoder.xml">QStringEncoder</db:link> and <db:link xlink:href="qstringdecoder.xml">QStringDecoder</db:link> make this easy, by tracking this in an internal state. So simply calling the encoder or decoder again with the next chunk of data will automatically continue encoding or decoding the data correctly:</db:para>
<db:programlisting language="cpp">auto toUtf16 = QStringDecoder(QStringDecoder::Utf8);

QString string;
while (new_data_available()) {
    QByteArray chunk = get_new_data();
    string += toUtf16(chunk);
}
</db:programlisting>
<db:para>The <db:link xlink:href="qstringdecoder.xml">QStringDecoder</db:link> object maintains state between chunks and therefore works correctly even if a multi-byte character is split between chunks.</db:para>
<db:para><db:link xlink:href="qstringconverter.xml">QStringConverter</db:link> objects can't be copied because of their internal state, but can be moved.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:member>
<db:member><db:link xlink:href="qstringdecoder.xml">QStringDecoder</db:link></db:member>
<db:member><db:link xlink:href="qstringencoder.xml">QStringEncoder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Encoding-enum">
<db:title>enum QStringConverter::Encoding</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstringconverter.xml">QStringConverter</db:link></db:emphasis>::Utf8</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Create a converter to or from UTF-8</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstringconverter.xml">QStringConverter</db:link></db:emphasis>::Utf16</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Create a converter to or from UTF-16. When decoding, the byte order will get automatically detected by a leading byte order mark. If none exists or when encoding, the system byte order will be assumed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstringconverter.xml">QStringConverter</db:link></db:emphasis>::Utf16BE</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Create a converter to or from big-endian UTF-16.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstringconverter.xml">QStringConverter</db:link></db:emphasis>::Utf16LE</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Create a converter to or from little-endian UTF-16.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstringconverter.xml">QStringConverter</db:link></db:emphasis>::Utf32</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Create a converter to or from UTF-32. When decoding, the byte order will get automatically detected by a leading byte order mark. If none exists or when encoding, the system byte order will be assumed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstringconverter.xml">QStringConverter</db:link></db:emphasis>::Utf32BE</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Create a converter to or from big-endian UTF-32.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstringconverter.xml">QStringConverter</db:link></db:emphasis>::Utf32LE</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Create a converter to or from little-endian UTF-32.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstringconverter.xml">QStringConverter</db:link></db:emphasis>::Latin1</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Create a converter to or from ISO-8859-1 (Latin1).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstringconverter.xml">QStringConverter</db:link></db:emphasis>::System</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Create a converter to or from the underlying encoding of the operating systems locale. This is always assumed to be UTF-8 for Unix based systems. On Windows, this converts to and from the locale code page.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Flag-enum">
<db:title>enum QStringConverter::Flag</db:title>
<db:bridgehead renderas="sect2">flags QStringConverter::Flags</db:bridgehead>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstringconverter.xml">QStringConverter</db:link></db:emphasis>::<db:emphasis role="bold">Flag</db:emphasis>::Default</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Default conversion rules apply.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstringconverter.xml">QStringConverter</db:link></db:emphasis>::<db:emphasis role="bold">Flag</db:emphasis>::ConvertInvalidToNull</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>If this flag is set, each invalid input character is output as a null character. If it is not set, invalid input characters are represented as <db:link xlink:href="qchar.xml#SpecialCharacter-enum">QChar::ReplacementCharacter</db:link> if the output encoding can represent that character, otherwise as a question mark.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstringconverter.xml">QStringConverter</db:link></db:emphasis>::<db:emphasis role="bold">Flag</db:emphasis>::WriteBom</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>When converting from a <db:link xlink:href="qstring.xml">QString</db:link> to an output encoding, write a <db:link xlink:href="qchar.xml#SpecialCharacter-enum">QChar::ByteOrderMark</db:link> as the first character if the output encoding supports this. This is the case for UTF-8, UTF-16 and UTF-32 encodings.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstringconverter.xml">QStringConverter</db:link></db:emphasis>::<db:emphasis role="bold">Flag</db:emphasis>::ConvertInitialBom</db:code></db:para>
</db:td>
<db:td><db:code>0x8</db:code></db:td>
<db:td>
<db:para>When converting from an input encoding to a <db:link xlink:href="qstring.xml">QString</db:link> the <db:link xlink:href="qstringdecoder.xml">QStringDecoder</db:link> usually skips an leading <db:link xlink:href="qchar.xml#SpecialCharacter-enum">QChar::ByteOrderMark</db:link>. When this flag is set, the byte order mark will not be skipped, but converted to utf-16 and inserted at the start of the created <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstringconverter.xml">QStringConverter</db:link></db:emphasis>::<db:emphasis role="bold">Flag</db:emphasis>::Stateless</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>Ignore possible converter states between different function calls to encode or decode strings. This will also cause the <db:link xlink:href="qstringconverter.xml">QStringConverter</db:link> to raise an error if an incomplete sequence of data is encountered.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Flags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Flag&gt;. </db:code>It stores an OR combination of <db:code>Flag</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="availableCodecs">
<db:title>[static] QStringList QStringConverter::availableCodecs()</db:title>
<db:para>Returns a list of names of supported codecs. The names returned by this function can be passed to <db:link xlink:href="qstringencoder.xml">QStringEncoder</db:link>'s and <db:link xlink:href="qstringdecoder.xml">QStringDecoder</db:link>'s constructor to create a en- or decoder for the given codec.</db:para>
<db:para>This function may be used to obtain a listing of additional codecs beyond the standard ones. Support for additional codecs requires Qt be compiled with support for the ICU library.</db:para>
<db:note>
<db:para>The order of codecs is an internal implementation detail and not guaranteed to be stable.</db:para>
</db:note>
</db:section>
<db:section xml:id="encodingForData">
<db:title>[static noexcept] std::optional&lt;QStringConverter::Encoding&gt; QStringConverter::encodingForData(QByteArrayView <db:emphasis>data</db:emphasis>, char16_t <db:emphasis>expectedFirstCharacter</db:emphasis> = 0)</db:title>
<db:para>Returns the encoding for the content of <db:code role="parameter">data</db:code> if it can be determined. <db:code role="parameter">expectedFirstCharacter</db:code> can be passed as an additional hint to help determine the encoding.</db:para>
<db:para>The returned optional is empty, if the encoding is unclear.</db:para>
</db:section>
<db:section xml:id="encodingForHtml">
<db:title>[static] std::optional&lt;QStringConverter::Encoding&gt; QStringConverter::encodingForHtml(QByteArrayView <db:emphasis>data</db:emphasis>)</db:title>
<db:para>Tries to determine the encoding of the HTML in <db:code role="parameter">data</db:code> by looking at leading byte order marks or a charset specifier in the HTML meta tag. If the optional is empty, the encoding specified is not supported by <db:link xlink:href="qstringconverter.xml">QStringConverter</db:link>. If no encoding is detected, the method returns Utf8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringdecoder.xml#decoderForHtml">QStringDecoder::decoderForHtml</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="encodingForName">
<db:title>[static noexcept] std::optional&lt;QStringConverter::Encoding&gt; QStringConverter::encodingForName(QAnyStringView <db:emphasis>name</db:emphasis>)</db:title>
<db:para>Convert <db:code role="parameter">name</db:code> to the corresponding <db:link xlink:href="qstringconverter.xml#Encoding-enum">Encoding</db:link> member, if there is one.</db:para>
<db:para>If the <db:code role="parameter">name</db:code> is not the name of a codec listed in the Encoding enumeration, <db:code>std::nullopt</db:code> is returned. Such a name may, none the less, be accepted by the <db:link xlink:href="qstringconverter.xml">QStringConverter</db:link> constructor when Qt is built with ICU, if ICU provides a converter with the given name.</db:para>
<db:note>
<db:para>In Qt versions prior to 6.8, this function took only a <db:code>const char *</db:code>, which was expected to be UTF-8-encoded.</db:para>
</db:note>
</db:section>
<db:section xml:id="hasError">
<db:title>[noexcept] bool QStringConverter::hasError() const</db:title>
<db:para>Returns true if a conversion could not correctly convert a character. This could for example get triggered by an invalid UTF-8 sequence or when a character can't get converted due to limitations in the target encoding.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>[noexcept] bool QStringConverter::isValid() const</db:title>
<db:para>Returns true if this is a valid string converter that can be used for encoding or decoding text.</db:para>
<db:para>Default constructed string converters or converters constructed with an unsupported name are not valid.</db:para>
</db:section>
<db:section xml:id="name">
<db:title>[noexcept] const char *QStringConverter::name() const</db:title>
<db:para>Returns the canonical name of the encoding this <db:link xlink:href="qstringconverter.xml">QStringConverter</db:link> can encode or decode. Returns a nullptr if the converter is not valid. The returned name is UTF-8 encoded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringconverter.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nameForEncoding">
<db:title>[static] const char *QStringConverter::nameForEncoding(QStringConverter::Encoding <db:emphasis>e</db:emphasis>)</db:title>
<db:para>Returns the canonical name for encoding <db:code role="parameter">e</db:code>.</db:para>
</db:section>
<db:section xml:id="resetState">
<db:title>[noexcept] void QStringConverter::resetState()</db:title>
<db:para>Resets the internal state of the converter, clearing potential errors or partial conversions.</db:para>
</db:section>
</db:section>
</db:article>
