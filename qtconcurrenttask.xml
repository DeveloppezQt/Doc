<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Concurrent Task</db:title>
<db:productname>QtConcurrent</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Concurrent Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A configurable way to run a task in a separate thread.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:link xlink:href="qtconcurrent.xml#task">QtConcurrent::task</db:link> provides an alternative interface for running a task in a separate thread. The return value of the function is made available through the QFuture API.</db:para>
<db:para>If you want to just run a function in a separate thread without adjusting any parameters, use <db:link xlink:href="qtconcurrent.xml#run">QtConcurrent::run</db:link> as that lets you write less code. The <db:link xlink:href="qtconcurrent.xml#task">QtConcurrent::task</db:link> is designed for cases where you need to perform extra configurations steps.</db:para>
<db:para>This function is a part of the <db:link xlink:href="qtconcurrent-index.xml">Qt Concurrent</db:link> framework.</db:para>
<db:section xml:id="fluent-interface">
<db:title>Fluent interface</db:title>
<db:para>The <db:link xlink:href="qtconcurrent.xml#task">QtConcurrent::task</db:link> returns an instance of an auxiliary class called <db:link xlink:href="qtconcurrent-qtaskbuilder.xml">QtConcurrent::QTaskBuilder</db:link>. Normally, you don't need to create an instance of this class manually. The <db:link xlink:href="qtconcurrent-qtaskbuilder.xml">QtConcurrent::QTaskBuilder</db:link> provides an interface to adjust different task parameters in a chain-like manner. This approach is known as a <db:link xlink:href="https://en.wikipedia.org/wiki/Fluent_interface">fluent interface</db:link>.</db:para>
<db:para>You can just set the parameters you need and then kick a task off. In order to finalize the configuration of a task you must invoke <db:link xlink:href="qtconcurrent-qtaskbuilder.xml#spawn">QtConcurrent::QTaskBuilder::spawn</db:link>. This function is non-blocking (i.e. returns a future object immediately), but it's not guaranteed that the task starts immediately. You can use the QFuture and QFutureWatcher classes to monitor the status of the task.</db:para>
<db:para>See more examples and explanations below.</db:para>
</db:section>
<db:section xml:id="running-a-task-in-a-separate-thread">
<db:title>Running a task in a separate thread</db:title>
<db:para>To run a function in another thread, use <db:link xlink:href="qtconcurrent-qtaskbuilder.xml#spawn">QtConcurrent::QTaskBuilder::spawn</db:link>:</db:para>
<db:programlisting language="cpp">QtConcurrent::task([]{ qDebug(&quot;Hello, world!&quot;); }).spawn();
</db:programlisting>
<db:para>This will run a lambda function in a separate thread obtained from the default QThreadPool.</db:para>
</db:section>
<db:section xml:id="passing-arguments-to-the-task">
<db:title>Passing arguments to the task</db:title>
<db:para>Invoking a function with arguments is done by passing them to <db:link xlink:href="qtconcurrent-qtaskbuilder.xml#withArguments">QtConcurrent::QTaskBuilder::withArguments</db:link>:</db:para>
<db:programlisting language="cpp">auto task = [](const QString &amp;s){ qDebug() &lt;&lt; (&quot;Hello, &quot; + s); };
QtConcurrent::task(std::move(task))
    .withArguments(&quot;world!&quot;)
    .spawn();
</db:programlisting>
<db:para>A copy of each argument is made at the point where <db:link xlink:href="qtconcurrent-qtaskbuilder.xml#withArguments">QtConcurrent::QTaskBuilder::withArguments</db:link> is called, and these values are passed to the thread when it begins executing the task. Changes made to the arguments after calling <db:link xlink:href="qtconcurrent-qtaskbuilder.xml#withArguments">QtConcurrent::QTaskBuilder::withArguments</db:link> are not visible to the thread.</db:para>
<db:para>If you want to run a function that accepts arguments by reference, you should use <db:link xlink:href="https://en.cppreference.com/w/cpp/utility/functional/ref">std::ref/cref</db:link> auxiliary functions. These functions create thin wrappers around passed arguments:</db:para>
<db:programlisting language="cpp">QString s(&quot;Hello, &quot;);
QtConcurrent::task([](QString &amp;s){ s.append(&quot;world!&quot;); })
    .withArguments(std::ref(s))
    .spawn();
</db:programlisting>
<db:para>Make sure that all wrapped objects live long enough. It is possible to get undefined behavior if a task outlives the object wrapped by std::ref/cref.</db:para>
</db:section>
<db:section xml:id="returning-values-from-the-task">
<db:title>Returning values from the task</db:title>
<db:para>You can obtain the result of a task with the QFuture API:</db:para>
<db:programlisting language="cpp">auto future = QtConcurrent::task([]{ return 42; }).spawn();
auto result = future.result(); // result == 42
</db:programlisting>
<db:para>Note that QFuture::result() is a blocking call, it waits for the result to become available. Use QFutureWatcher to get a notification when the task has finished execution and the result is available.</db:para>
<db:para>In case you want to pass a result to another asynchronous task, you can use QFuture::then() to create a chain of dependent tasks. See the QFuture documentation for more details.</db:para>
</db:section>
<db:section xml:id="additional-api-features">
<db:title>Additional API features</db:title>
<db:section xml:id="using-different-types-of-callable-objects">
<db:title>Using different types of callable objects</db:title>
<db:para>Strictly speaking, you can use any type of tasks and arguments that satisfy the following condition:</db:para>
<db:programlisting language="cpp">std::is_invocable_v&lt;std::decay_t&lt;Task&gt;, std::decay_t&lt;Args&gt;...&gt;
</db:programlisting>
<db:para>You can use a free function:</db:para>
<db:programlisting language="cpp">QVariant value(42);
auto result = QtConcurrent::task([](const QVariant &amp;var){return qvariant_cast&lt;int&gt;(var);})
                  .withArguments(value)
                  .spawn()
                  .result(); // result == 42
</db:programlisting>
<db:para>You can use a member function:</db:para>
<db:programlisting language="cpp">QString result(&quot;Hello, world!&quot;);

QtConcurrent::task(&amp;QString::chop)
    .withArguments(&amp;result, 8)
    .spawn()
    .waitForFinished(); // result == &quot;Hello&quot;
</db:programlisting>
<db:para>You can use a callable object with an operator():</db:para>
<db:programlisting language="cpp">auto result = QtConcurrent::task(std::plus&lt;int&gt;())
                  .withArguments(40, 2)
                  .spawn()
                  .result() // result == 42
</db:programlisting>
<db:para>If you want to use an existing callable object, you need to either copy/move it to <db:link xlink:href="qtconcurrent.xml#task">QtConcurrent::task</db:link> or wrap it with std::ref/cref:</db:para>
<db:programlisting language="cpp">struct CallableWithState
{
    void operator()(int newState) { state = newState; }

    // ...
};

// ...

CallableWithState object;

QtConcurrent::task(std::ref(object))
   .withArguments(42)
   .spawn()
   .waitForFinished(); // The object's state is set to 42
</db:programlisting>
</db:section>
<db:section xml:id="using-custom-thread-pool">
<db:title>Using custom thread pool</db:title>
<db:para>You can specify a custom thread pool:</db:para>
<db:programlisting language="cpp">QThreadPool pool;
QtConcurrent::task([]{ return 42; }).onThreadPool(pool).spawn();
</db:programlisting>
</db:section>
<db:section xml:id="setting-priority-for-a-task">
<db:title>Setting priority for a task</db:title>
<db:para>You can set the priority for a task:</db:para>
<db:programlisting language="cpp">QtConcurrent::task([]{ return 42; }).withPriority(10).spawn();
</db:programlisting>
<db:para>If you don't need a future object, you can call <db:link xlink:href="qtconcurrent-qtaskbuilder.xml#spawn">QtConcurrent::QTaskBuilder::spawn</db:link>(<db:link xlink:href="qtconcurrent.xml#FutureResult-enum">QtConcurrent::FutureResult::Ignore</db:link>):</db:para>
<db:programlisting language="cpp">QtConcurrent::task([]{ qDebug(&quot;Hello, world!&quot;); }).spawn(FutureResult::Ignore);
</db:programlisting>
<db:para>You can access the promise object associated with the task by defining an additional argument of <db:code>QPromise&lt;T&gt; &amp;</db:code> type inside the function. This additional argument must be the first argument passed to the function, and like in <db:link xlink:href="qtconcurrentrun.xml#concurrent-run-with-promise">Concurrent Run With Promise</db:link> mode, the function is expected to return void type. Result reporting is done through QPromise API:</db:para>
<db:programlisting language="cpp">void increment(QPromise&lt;int&gt; &amp;promise, int i)
{
    promise.addResult(i + 1);
}

int result = QtConcurrent::task(&amp;increment).withArguments(10).spawn().result(); // result == 11
</db:programlisting>
</db:section>
</db:section>
</db:article>
