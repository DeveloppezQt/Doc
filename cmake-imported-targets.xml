<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Imported targets</db:title>
<db:productname>QtCMake</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Using Qt with CMake</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="cmake-deployment.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Deployment"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qt-cmake-policies.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Qt CMake policies"/></db:extendedlink>
<db:abstract>
<db:para>Provides an overview of the CMake targets imported by Qt.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Each Qt module that is loaded defines a CMake library target. The target names start with <db:code>Qt6::</db:code>, followed by the module name. For example: <db:code>Qt6::Core</db:code>, <db:code>Qt6::Gui</db:code>. Pass the name of the library target to <db:code>target_link_libraries</db:code> to use the respective library.</db:para>
<db:note>
<db:para>The targets are also available with a <db:code>Qt::</db:code> prefix: <db:code>Qt::Core</db:code>, <db:code>Qt::Gui</db:code>, and so on. See also <db:link xlink:href="cmake-qt5-and-qt6-compatibility.xml">Qt 5 and Qt 6 compatibility</db:link>.</db:para>
</db:note>
<db:para>Imported targets are created with the same configurations as when Qt was configured. That is:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>If Qt was configured with the <db:code>-debug</db:code> switch, an imported target with the DEBUG configuration is created.</db:para>
</db:listitem>
<db:listitem>
<db:para>If Qt was configured with the <db:code>-release</db:code> switch, an imported target with the RELEASE configuration is created.</db:para>
</db:listitem>
<db:listitem>
<db:para>If Qt was configured with the <db:code>-debug-and-release</db:code> switch, then imported targets are created with both RELEASE and DEBUG configurations.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If your project has custom <db:code>CMake</db:code> build configurations, you have to map your custom configuration to either the debug or the release Qt configuration.</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS Core)

set(CMAKE_CXX_FLAGS_COVERAGE &quot;${CMAKE_CXX_FLAGS_RELEASE} -fprofile-arcs -ftest-coverage&quot;)

# set up a mapping so that the Release configuration for the Qt imported target is
# used in the COVERAGE CMake configuration.
set_target_properties(Qt6::Core PROPERTIES MAP_IMPORTED_CONFIG_COVERAGE &quot;RELEASE&quot;)
</db:programlisting>
</db:article>
