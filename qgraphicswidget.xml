<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGraphicsWidget Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> class is the base class for all widget items in a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsWidget</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsobject.xml" xlink:role="class">QGraphicsObject</db:link> and <db:link xlink:href="qgraphicslayoutitem.xml" xlink:role="class">QGraphicsLayoutItem</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsproxywidget.xml" xlink:role="class">QGraphicsProxyWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsWidget is part of <db:simplelist><db:member>graphicsview-api</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> is an extended base item that provides extra functionality over <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>. It is similar to <db:link xlink:href="qwidget.xml">QWidget</db:link> in many ways:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Provides a <db:link xlink:href="qgraphicswidget.xml#palette-prop">palette</db:link>, a <db:link xlink:href="qgraphicswidget.xml#font-prop">font</db:link> and a <db:link xlink:href="qgraphicswidget.xml#style">style</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>Has a defined <db:link xlink:href="qgraphicslayoutitem.xml#geometry">geometry</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>Supports layouts with <db:link xlink:href="qgraphicswidget.xml#setLayout">setLayout</db:link>() and <db:link xlink:href="qgraphicswidget.xml#layout">layout</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>Supports shortcuts and actions with <db:link xlink:href="qgraphicswidget.xml#grabShortcut">grabShortcut</db:link>() and <db:link xlink:href="qgraphicswidget.xml#insertAction">insertAction</db:link>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Unlike <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>, <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> is not an abstract class; you can create instances of a <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> without having to subclass it. This approach is useful for widgets that only serve the purpose of organizing child widgets into a layout.</db:para>
<db:para><db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> can be used as a base item for your own custom item if you require advanced input focus handling, e.g., tab focus and activation, or layouts.</db:para>
<db:para>Since <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> resembles <db:link xlink:href="qwidget.xml">QWidget</db:link> and has similar API, it is easier to port a widget from <db:link xlink:href="qwidget.xml">QWidget</db:link> to <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link>, instead of <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>.</db:para>
<db:note>
<db:para><db:link xlink:href="qwidget.xml">QWidget</db:link>-based widgets can be directly embedded into a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> using <db:link xlink:href="qgraphicsproxywidget.xml">QGraphicsProxyWidget</db:link>.</db:para>
</db:note>
<db:para>Noticeable differences between <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> and <db:link xlink:href="qwidget.xml">QWidget</db:link> are:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link></db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qwidget.xml">QWidget</db:link></db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Coordinates and geometry are defined with qreals (doubles or floats, depending on the platform).</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qwidget.xml">QWidget</db:link> uses integer geometry (<db:link xlink:href="qpoint.xml">QPoint</db:link>, <db:link xlink:href="qrect.xml">QRect</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>The widget is already visible by default; you do not have to call <db:link xlink:href="qgraphicsitem.xml#show">show</db:link>() to display the widget.</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qwidget.xml">QWidget</db:link> is hidden by default until you call <db:link xlink:href="qgraphicsitem.xml#show">show</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>A subset of widget attributes are supported.</db:para>
</db:td>
<db:td>
<db:para>All widget attributes are supported.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>A top-level item's style defaults to <db:link xlink:href="qgraphicsscene.xml#style">QGraphicsScene::style</db:link></db:para>
</db:td>
<db:td>
<db:para>A top-level widget's style defaults to <db:link xlink:href="qapplication.xml#style">QApplication::style</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Graphics View provides a custom drag and drop framework, different from <db:link xlink:href="qwidget.xml">QWidget</db:link>.</db:para>
</db:td>
<db:td>
<db:para>Standard drag and drop framework.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Widget items do not support modality.</db:para>
</db:td>
<db:td>
<db:para>Full modality support.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> supports a subset of Qt's widget attributes, (<db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WidgetAttribute</db:link>), as shown in the table below. Any attributes not listed in this table are unsupported, or otherwise unused.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Widget Attribute</db:para>
</db:th>
<db:th>
<db:para>Usage</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_SetLayoutDirection</db:link></db:para>
</db:td>
<db:td>
<db:para>Set by <db:link xlink:href="qgraphicswidget.xml#layoutDirection-prop">setLayoutDirection</db:link>(), cleared by <db:link xlink:href="qgraphicswidget.xml#layoutDirection-prop">unsetLayoutDirection</db:link>(). You can test this attribute to check if the widget has been explicitly assigned a <db:link xlink:href="qgraphicswidget.xml#layoutDirection-prop">layoutDirection</db:link>. If the attribute is not set, the <db:link xlink:href="qgraphicswidget.xml#layoutDirection-prop">layoutDirection</db:link>() is inherited.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_RightToLeft</db:link></db:para>
</db:td>
<db:td>
<db:para>Toggled by <db:link xlink:href="qgraphicswidget.xml#layoutDirection-prop">setLayoutDirection</db:link>(). Inherited from the parent/scene. If set, the widget's layout will order horizontally arranged widgets from right to left.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_SetStyle</db:link></db:para>
</db:td>
<db:td>
<db:para>Set and cleared by <db:link xlink:href="qgraphicswidget.xml#setStyle">setStyle</db:link>(). If this attribute is set, the widget has been explicitly assigned a style. If it is unset, the widget will use the scene's or the application's style.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_Resized</db:link></db:para>
</db:td>
<db:td>
<db:para>Set by <db:link xlink:href="qgraphicswidget.xml#setGeometry">setGeometry</db:link>() and <db:link xlink:href="qgraphicswidget.xml#size-prop">resize</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_SetPalette</db:link></db:para>
</db:td>
<db:td>
<db:para>Set by <db:link xlink:href="qgraphicswidget.xml#palette-prop">setPalette</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_SetFont</db:link></db:para>
</db:td>
<db:td>
<db:para>Set by <db:link xlink:href="qgraphicswidget.xml#font-prop">setFont</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_WindowPropagation</db:link></db:para>
</db:td>
<db:td>
<db:para>Enables propagation to window widgets.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Although <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> inherits from both <db:link xlink:href="qobject.xml">QObject</db:link> and <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>, you should use the functions provided by <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>, <db:emphasis>not</db:emphasis> <db:link xlink:href="qobject.xml">QObject</db:link>, to manage the relationships between parent and child items. These functions control the stacking order of items as well as their ownership.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qobject.xml#parent">QObject::parent</db:link>() should always return <db:code>nullptr</db:code> for QGraphicsWidgets, but this policy is not strictly defined.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsproxywidget.xml">QGraphicsProxyWidget</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:member>
<db:member><db:link xlink:href="graphicsview.xml#widgets-and-layouts">Widgets and Layouts</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="anonymous-enum">
<db:title>enum QGraphicsWidget::anonymous</db:title>
<db:para>The value returned by the virtual <db:link xlink:href="qgraphicswidget.xml#type">type</db:link>() function.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link></db:emphasis>::Type</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>A graphics widget item</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="autoFillBackground-prop">
<db:title>autoFillBackground : bool</db:title>
<db:para>This property holds whether the widget background is filled automatically</db:para>
<db:para>If enabled, this property will cause Qt to fill the background of the widget before invoking the <db:link xlink:href="qgraphicswidget.xml#paint">paint</db:link>() method. The color used is defined by the <db:link xlink:href="qpalette.xml#ColorRole-enum">QPalette::Window</db:link> color role from the widget's <db:link xlink:href="qpalette.xml">palette</db:link>.</db:para>
<db:para>In addition, Windows are always filled with <db:link xlink:href="qpalette.xml#ColorRole-enum">QPalette::Window</db:link>, unless the WA_OpaquePaintEvent or WA_NoSystemBackground attributes are set.</db:para>
<db:para>By default, this property is <db:code>false</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">autoFillBackground</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAutoFillBackground</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_OpaquePaintEvent</db:link></db:member>
<db:member><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_NoSystemBackground</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusPolicy-prop">
<db:title>focusPolicy : Qt::FocusPolicy</db:title>
<db:para>This property holds the way the widget accepts keyboard focus</db:para>
<db:para>The focus policy is <db:link xlink:href="qt.xml#FocusPolicy-enum">Qt::TabFocus</db:link> if the widget accepts keyboard focus by tabbing, <db:link xlink:href="qt.xml#FocusPolicy-enum">Qt::ClickFocus</db:link> if the widget accepts focus by clicking, <db:link xlink:href="qt.xml#FocusPolicy-enum">Qt::StrongFocus</db:link> if it accepts both, and <db:link xlink:href="qt.xml#FocusPolicy-enum">Qt::NoFocus</db:link> (the default) if it does not accept focus at all.</db:para>
<db:para>You must enable keyboard focus for a widget if it processes keyboard events. This is normally done from the widget's constructor. For instance, the <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> constructor calls setFocusPolicy(<db:link xlink:href="qt.xml#FocusPolicy-enum">Qt::StrongFocus</db:link>).</db:para>
<db:para>If you enable a focus policy (i.e., not <db:link xlink:href="qt.xml#FocusPolicy-enum">Qt::NoFocus</db:link>), <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> will automatically enable the ItemIsFocusable flag. Setting <db:link xlink:href="qt.xml#FocusPolicy-enum">Qt::NoFocus</db:link> on a widget will clear the ItemIsFocusable flag. If the widget currently has keyboard focus, the widget will automatically lose focus.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#FocusPolicy-enum">Qt::FocusPolicy</db:link></db:type> <db:emphasis role="bold">focusPolicy</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFocusPolicy</db:emphasis>(<db:type><db:link xlink:href="qt.xml#FocusPolicy-enum">Qt::FocusPolicy</db:link></db:type> <db:emphasis>policy</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#focusInEvent">focusInEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#focusOutEvent">focusOutEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#keyPressEvent">keyPressEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#keyReleaseEvent">keyReleaseEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsobject.xml#enabled-prop">enabled</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font-prop">
<db:title>font : QFont</db:title>
<db:para>This property holds the widgets' font</db:para>
<db:para>This property provides the widget's font.</db:para>
<db:para><db:link xlink:href="qfont.xml">QFont</db:link> consists of font properties that have been explicitly defined and properties implicitly inherited from the widget's parent. Hence, font() can return a different font compared to the one set with setFont(). This scheme allows you to define single entries in a font without affecting the font's inherited entries.</db:para>
<db:para>When a widget's font changes, it resolves its entries against its parent widget. If the widget does not have a parent widget, it resolves its entries against the scene. The widget then sends itself a <db:link xlink:href="qevent.xml#Type-enum">FontChange</db:link> event and notifies all its descendants so that they can resolve their fonts as well.</db:para>
<db:para>By default, this property contains the application's default font.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qfont.xml">QFont</db:link></db:type> <db:emphasis role="bold">font</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFont</db:emphasis>(const <db:type><db:link xlink:href="qfont.xml">QFont</db:link></db:type> &amp;<db:emphasis>font</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#font">QApplication::font</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#font-prop">QGraphicsScene::font</db:link></db:member>
<db:member><db:link xlink:href="qfont.xml#resolve">QFont::resolve</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="geometry-prop">
<db:title>geometry : QRectF</db:title>
<db:para>This property holds the geometry of the widget</db:para>
<db:para>Sets the item's geometry to <db:code role="parameter">rect</db:code>. The item's position and size are modified as a result of calling this function. The item is first moved, then resized.</db:para>
<db:para>A side effect of calling this function is that the widget will receive a move event and a resize event. Also, if the widget has a layout assigned, the layout will activate.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>virtual <db:type>void</db:type> <db:emphasis role="bold">setGeometry</db:emphasis>(const <db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> &amp;<db:emphasis>rect</db:emphasis>) override</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qgraphicswidget.xml#setGeometry">setGeometry</db:link></db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>x</db:emphasis>, <db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>y</db:emphasis>, <db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>w</db:emphasis>, <db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>h</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qgraphicswidget.xml#geometryChanged">geometryChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#geometry">geometry</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#size-prop">resize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layout-prop">
<db:title>layout : QGraphicsLayout*</db:title>
<db:para>This property holds the layout of the widget</db:para>
<db:para>Any existing layout manager is deleted before the new layout is assigned. If <db:code role="parameter">layout</db:code> is <db:code>nullptr</db:code>, the widget is left without a layout. Existing subwidgets' geometries will remain unaffected.</db:para>
<db:para><db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> takes ownership of <db:code role="parameter">layout</db:code>.</db:para>
<db:para>All widgets that are currently managed by <db:code role="parameter">layout</db:code> or all of its sublayouts, are automatically reparented to this item. The layout is then invalidated, and the child widget geometries are adjusted according to this item's <db:link xlink:href="qgraphicslayoutitem.xml#geometry">geometry</db:link>() and contentsMargins(). Children who are not explicitly managed by <db:code role="parameter">layout</db:code> remain unaffected by the layout after it has been assigned to this widget.</db:para>
<db:para>If no layout is currently managing this widget, <db:link xlink:href="qgraphicswidget.xml#layout">layout</db:link>() will return <db:code>nullptr</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link></db:type> *<db:emphasis role="bold"><db:link xlink:href="qgraphicswidget.xml#layout">layout</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qgraphicswidget.xml#setLayout">setLayout</db:link></db:emphasis>(<db:type><db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link></db:type> *<db:emphasis>layout</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">layoutChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="layoutDirection-prop">
<db:title>layoutDirection : Qt::LayoutDirection</db:title>
<db:para>This property holds the layout direction for this widget.</db:para>
<db:para>This property modifies this widget's and all of its descendants' <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_RightToLeft</db:link> attribute. It also sets this widget's <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_SetLayoutDirection</db:link> attribute.</db:para>
<db:para>The widget's layout direction determines the order in which the layout manager horizontally arranges subwidgets of this widget. The default value depends on the language and locale of the application, and is typically in the same direction as words are read and written. With <db:link xlink:href="qt.xml#LayoutDirection-enum">Qt::LeftToRight</db:link>, the layout starts placing subwidgets from the left side of this widget towards the right. <db:link xlink:href="qt.xml#LayoutDirection-enum">Qt::RightToLeft</db:link> does the opposite - the layout will place widgets starting from the right edge moving towards the left.</db:para>
<db:para>Subwidgets inherit their layout direction from the parent. Top-level widget items inherit their layout direction from QGraphicsScene::layoutDirection. If you change a widget's layout direction by calling setLayoutDirection(), the widget will send itself a <db:link xlink:href="qevent.xml#Type-enum">LayoutDirectionChange</db:link> event, and then propagate the new layout direction to all its descendants.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#LayoutDirection-enum">Qt::LayoutDirection</db:link></db:type> <db:emphasis role="bold">layoutDirection</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLayoutDirection</db:emphasis>(<db:type><db:link xlink:href="qt.xml#LayoutDirection-enum">Qt::LayoutDirection</db:link></db:type> <db:emphasis>direction</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">unsetLayoutDirection</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#layoutDirection-prop">QWidget::layoutDirection</db:link></db:member>
<db:member><db:link xlink:href="qguiapplication.xml#layoutDirection-prop">QApplication::layoutDirection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumSize-prop">
<db:title>maximumSize : const QSizeF</db:title>
<db:para>This property holds the maximum size of the widget</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMaximumSize">setMaximumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#maximumSize">maximumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#minimumSize-prop">minimumSize</db:link></db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#preferredSize-prop">preferredSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumSize-prop">
<db:title>minimumSize : const QSizeF</db:title>
<db:para>This property holds the minimum size of the widget</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setMinimumSize">setMinimumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#minimumSize">minimumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#preferredSize-prop">preferredSize</db:link></db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#maximumSize-prop">maximumSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="palette-prop">
<db:title>palette : QPalette</db:title>
<db:para>This property holds the widget's palette</db:para>
<db:para>This property provides the widget's palette. The palette provides colors and brushes for color groups (e.g., <db:link xlink:href="qpalette.xml#ColorRole-enum">QPalette::Button</db:link>) and states (e.g., <db:link xlink:href="qpalette.xml#ColorGroup-enum">QPalette::Inactive</db:link>), loosely defining the general look of the widget and its children.</db:para>
<db:para><db:link xlink:href="qpalette.xml">QPalette</db:link> consists of color groups that have been explicitly defined, and groups that are implicitly inherited from the widget's parent. Because of this, palette() can return a different palette than what has been set with setPalette(). This scheme allows you to define single entries in a palette without affecting the palette's inherited entries.</db:para>
<db:para>When a widget's palette changes, it resolves its entries against its parent widget, or if it doesn't have a parent widget, it resolves against the scene. It then sends itself a <db:link xlink:href="qevent.xml#Type-enum">PaletteChange</db:link> event, and notifies all its descendants so they can resolve their palettes as well.</db:para>
<db:para>By default, this property contains the application's default palette.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpalette.xml">QPalette</db:link></db:type> <db:emphasis role="bold">palette</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPalette</db:emphasis>(const <db:type><db:link xlink:href="qpalette.xml">QPalette</db:link></db:type> &amp;<db:emphasis>palette</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QGuiApplication::palette()</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#palette-prop">QGraphicsScene::palette</db:link></db:member>
<db:member><db:link xlink:href="qpalette.xml#resolve">QPalette::resolve</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="preferredSize-prop">
<db:title>preferredSize : const QSizeF</db:title>
<db:para>This property holds the preferred size of the widget</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setPreferredSize">setPreferredSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#preferredSize">preferredSize</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#minimumSize-prop">minimumSize</db:link></db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#maximumSize-prop">maximumSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size-prop">
<db:title>size : QSizeF</db:title>
<db:para>This property holds the size of the widget</db:para>
<db:para>Calling resize() resizes the widget to a <db:code role="parameter">size</db:code> bounded by <db:link xlink:href="qgraphicslayoutitem.xml#minimumSize">minimumSize</db:link>() and <db:link xlink:href="qgraphicslayoutitem.xml#maximumSize">maximumSize</db:link>(). This property only affects the widget's width and height (e.g., its right and bottom edges); the widget's position and top-left corner remains unaffected.</db:para>
<db:para>Resizing a widget triggers the widget to immediately receive a <db:link xlink:href="qevent.xml#Type-enum">GraphicsSceneResize</db:link> event with the widget's old and new size. If the widget has a layout assigned when this event arrives, the layout will be activated and it will automatically update any child widgets's geometry.</db:para>
<db:para>This property does not affect any layout of the parent widget. If the widget itself is managed by a parent layout; e.g., it has a parent widget with a layout assigned, that layout will not activate.</db:para>
<db:para>By default, this property contains a size with zero width and height.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsizef.xml">QSizeF</db:link></db:type> <db:emphasis role="bold">size</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">resize</db:emphasis>(const <db:type><db:link xlink:href="qsizef.xml">QSizeF</db:link></db:type> &amp;<db:emphasis>size</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qgraphicswidget.xml#resize-1">resize</db:link></db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>w</db:emphasis>, <db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>h</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qgraphicswidget.xml#geometryChanged">geometryChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#setGeometry">setGeometry</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicssceneresizeevent.xml">QGraphicsSceneResizeEvent</db:link></db:member>
<db:member><db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizePolicy-prop">
<db:title>sizePolicy : const QSizePolicy</db:title>
<db:para>This property holds the size policy for the widget</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#sizePolicy">sizePolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#setSizePolicy">setSizePolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#sizePolicy-prop">QWidget::sizePolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowFlags-prop">
<db:title>windowFlags : Qt::WindowFlags</db:title>
<db:para>This property holds the widget's window flags</db:para>
<db:para>Window flags are a combination of a window type (e.g., <db:link xlink:href="qt.xml#WindowType-enum">Qt::Dialog</db:link>) and several flags giving hints on the behavior of the window. The behavior is platform-dependent.</db:para>
<db:para>By default, this property contains no window flags.</db:para>
<db:para>Windows are panels. If you set the <db:link xlink:href="qt.xml#WindowType-enum">Qt::Window</db:link> flag, the ItemIsPanel flag will be set automatically. If you clear the <db:link xlink:href="qt.xml#WindowType-enum">Qt::Window</db:link> flag, the ItemIsPanel flag is also cleared. Note that the ItemIsPanel flag can be set independently of <db:link xlink:href="qt.xml#WindowType-enum">Qt::Window</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#WindowType-enum">Qt::WindowFlags</db:link></db:type> <db:emphasis role="bold">windowFlags</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWindowFlags</db:emphasis>(<db:type><db:link xlink:href="qt.xml#WindowType-enum">Qt::WindowFlags</db:link></db:type> <db:emphasis>wFlags</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#isWindow">isWindow</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#isPanel">isPanel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowTitle-prop">
<db:title>windowTitle : QString</db:title>
<db:para>This property holds the window title (caption).</db:para>
<db:para>This property is only used for windows.</db:para>
<db:para>By default, if no title has been set, this property contains an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">windowTitle</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWindowTitle</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>title</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGraphicsWidget">
<db:title>QGraphicsWidget::QGraphicsWidget(QGraphicsItem *<db:emphasis>parent</db:emphasis> = nullptr, Qt::WindowFlags <db:emphasis>wFlags</db:emphasis> = Qt::WindowFlags())</db:title>
<db:para>Constructs a <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> instance. The optional <db:code role="parameter">parent</db:code> argument is passed to <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>'s constructor. The optional <db:code role="parameter">wFlags</db:code> argument specifies the widget's window flags (e.g., whether the widget should be a window, a tool, a popup, etc).</db:para>
</db:section>
<db:section xml:id="dtor.QGraphicsWidget">
<db:title>[virtual noexcept] QGraphicsWidget::~QGraphicsWidget()</db:title>
<db:para>Destroys the <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> instance.</db:para>
</db:section>
<db:section xml:id="actions">
<db:title>QList&lt;QAction *&gt; QGraphicsWidget::actions() const</db:title>
<db:para>Returns the (possibly empty) list of this widget's actions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#insertAction">insertAction</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#removeAction">removeAction</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#actions">QWidget::actions</db:link>()</db:member>
<db:member><db:link xlink:href="qaction.xml#associatedWidgets" role="deprecated">QAction::associatedWidgets</db:link>()</db:member>
<db:member><db:link xlink:href="qaction.xml#associatedGraphicsWidgets" role="deprecated">QAction::associatedGraphicsWidgets</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addAction">
<db:title>void QGraphicsWidget::addAction(QAction *<db:emphasis>action</db:emphasis>)</db:title>
<db:para>Appends the action <db:code role="parameter">action</db:code> to this widget's list of actions.</db:para>
<db:para>All QGraphicsWidgets have a list of <db:link xlink:href="qaction.xml">QAction</db:link>s, however they can be represented graphically in many different ways. The default use of the <db:link xlink:href="qaction.xml">QAction</db:link> list (as returned by <db:link xlink:href="qgraphicswidget.xml#actions">actions</db:link>()) is to create a context <db:link xlink:href="qmenu.xml">QMenu</db:link>.</db:para>
<db:para>A <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> should only have one of each action and adding an action it already has will not cause the same action to be in the widget twice.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#removeAction">removeAction</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#insertAction">insertAction</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#actions">actions</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addActions">
<db:title>void QGraphicsWidget::addActions(const QList&lt;QAction *&gt; &amp;<db:emphasis>actions</db:emphasis>)</db:title>
<db:para>Appends the actions <db:code role="parameter">actions</db:code> to this widget's list of actions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#removeAction">removeAction</db:link>()</db:member>
<db:member><db:link xlink:href="qmenu.xml">QMenu</db:link></db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#addAction">addAction</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#addActions">QWidget::addActions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="adjustSize">
<db:title>void QGraphicsWidget::adjustSize()</db:title>
<db:para>Adjusts the size of the widget to its effective preferred size hint.</db:para>
<db:para>This function is called implicitly when the item is shown for the first time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#effectiveSizeHint">effectiveSizeHint</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#SizeHint-enum">Qt::MinimumSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundingRect">
<db:title>[override virtual] QRectF QGraphicsWidget::boundingRect() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#boundingRect" role="function">QGraphicsItem::boundingRect() const</db:link>.</db:para>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[virtual protected] void QGraphicsWidget::changeEvent(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler can be reimplemented to handle state changes.</db:para>
<db:para>The state being changed in this event can be retrieved through <db:code role="parameter">event</db:code>.</db:para>
<db:para>Change events include: <db:link xlink:href="qevent.xml#Type-enum">QEvent::ActivationChange</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::EnabledChange</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::FontChange</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::StyleChange</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::PaletteChange</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::ParentChange</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::LayoutDirectionChange</db:link>, and <db:link xlink:href="qevent.xml#Type-enum">QEvent::ContentsRectChange</db:link>.</db:para>
</db:section>
<db:section xml:id="close">
<db:title>bool QGraphicsWidget::close()</db:title>
<db:para>Call this function to close the widget.</db:para>
<db:para>Returns <db:code>true</db:code> if the widget was closed; otherwise returns <db:code>false</db:code>. This slot will first send a <db:link xlink:href="qcloseevent.xml">QCloseEvent</db:link> to the widget, which may or may not accept the event. If the event was ignored, nothing happens. If the event was accepted, it will <db:link xlink:href="qgraphicsitem.xml#hide">hide</db:link>() the widget.</db:para>
<db:para>If the widget has the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_DeleteOnClose</db:link> attribute set it will be deleted.</db:para>
</db:section>
<db:section xml:id="closeEvent">
<db:title>[virtual protected] void QGraphicsWidget::closeEvent(QCloseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler, for <db:code role="parameter">event</db:code>, can be reimplemented in a subclass to receive widget close events. The default implementation accepts the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#close">close</db:link>()</db:member>
<db:member><db:link xlink:href="qcloseevent.xml">QCloseEvent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QGraphicsWidget::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsobject.xml#event" role="function">QGraphicsObject::event(QEvent *ev)</db:link>.</db:para>
<db:para>Handles the <db:code role="parameter">event</db:code>. <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> handles the following events:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Event</db:para>
</db:th>
<db:th>
<db:para>Usage</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Polish</db:para>
</db:td>
<db:td>
<db:para>Delivered to the widget some time after it has been shown.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>GraphicsSceneMove</db:para>
</db:td>
<db:td>
<db:para>Delivered to the widget after its local position has changed.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>GraphicsSceneResize</db:para>
</db:td>
<db:td>
<db:para>Delivered to the widget after its size has changed.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Show</db:para>
</db:td>
<db:td>
<db:para>Delivered to the widget before it has been shown.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Hide</db:para>
</db:td>
<db:td>
<db:para>Delivered to the widget after it has been hidden.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PaletteChange</db:para>
</db:td>
<db:td>
<db:para>Delivered to the widget after its palette has changed.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>FontChange</db:para>
</db:td>
<db:td>
<db:para>Delivered to the widget after its font has changed.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>EnabledChange</db:para>
</db:td>
<db:td>
<db:para>Delivered to the widget after its enabled state has changed.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>StyleChange</db:para>
</db:td>
<db:td>
<db:para>Delivered to the widget after its style has changed.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LayoutDirectionChange</db:para>
</db:td>
<db:td>
<db:para>Delivered to the widget after its layout direction has changed.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ContentsRectChange</db:para>
</db:td>
<db:td>
<db:para>Delivered to the widget after its contents margins/ contents rect has changed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[override virtual protected] void QGraphicsWidget::focusInEvent(QFocusEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#focusInEvent" role="function">QGraphicsItem::focusInEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusNextPrevChild">
<db:title>[virtual protected] bool QGraphicsWidget::focusNextPrevChild(bool <db:emphasis>next</db:emphasis>)</db:title>
<db:para>Finds a new widget to give the keyboard focus to, as appropriate for Tab and Shift+Tab, and returns <db:code>true</db:code> if it can find a new widget; returns <db:code>false</db:code> otherwise. If <db:code role="parameter">next</db:code> is true, this function searches forward; if <db:code role="parameter">next</db:code> is false, it searches backward.</db:para>
<db:para>Sometimes, you will want to reimplement this function to provide special focus handling for your widget and its subwidgets. For example, a web browser might reimplement it to move its current active link forward or backward, and call the base implementation only when it reaches the last or first link on the page.</db:para>
<db:para>Child widgets call focusNextPrevChild() on their parent widgets, but only the window that contains the child widgets decides where to redirect focus. By reimplementing this function for an object, you gain control of focus traversal for all child widgets.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#focusPolicy-prop">focusPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[override virtual protected] void QGraphicsWidget::focusOutEvent(QFocusEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#focusOutEvent" role="function">QGraphicsItem::focusOutEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusWidget">
<db:title>QGraphicsWidget *QGraphicsWidget::focusWidget() const</db:title>
<db:para>If this widget, a child or descendant of this widget currently has input focus, this function will return a pointer to that widget. If no descendant widget has input focus, <db:code>nullptr</db:code> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#focusItem">QGraphicsItem::focusItem</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#focusWidget">QWidget::focusWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="geometryChanged">
<db:title>void QGraphicsWidget::geometryChanged()</db:title>
<db:para>This signal gets emitted whenever the geometry is changed in <db:link xlink:href="qgraphicswidget.xml#setGeometry">setGeometry</db:link>().</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qgraphicswidget.xml#geometry-prop">geometry</db:link>. </db:para>
<db:para>Notifier signal for property <db:link xlink:href="qgraphicswidget.xml#size-prop">size</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="getContentsMargins">
<db:title>[override virtual] void QGraphicsWidget::getContentsMargins(qreal *<db:emphasis>left</db:emphasis>, qreal *<db:emphasis>top</db:emphasis>, qreal *<db:emphasis>right</db:emphasis>, qreal *<db:emphasis>bottom</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayoutitem.xml#getContentsMargins" role="function">QGraphicsLayoutItem::getContentsMargins(qreal *left, qreal *top, qreal *right, qreal *bottom) const</db:link>.</db:para>
<db:para>Gets the widget's contents margins. The margins are stored in <db:code role="parameter">left</db:code>, <db:code role="parameter">top</db:code>, <db:code role="parameter">right</db:code> and <db:code role="parameter">bottom</db:code>, as pointers to qreals. Each argument can be <db:emphasis>omitted</db:emphasis> by passing <db:code>nullptr</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#setContentsMargins">setContentsMargins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getWindowFrameMargins">
<db:title>void QGraphicsWidget::getWindowFrameMargins(qreal *<db:emphasis>left</db:emphasis>, qreal *<db:emphasis>top</db:emphasis>, qreal *<db:emphasis>right</db:emphasis>, qreal *<db:emphasis>bottom</db:emphasis>) const</db:title>
<db:para>Gets the widget's window frame margins. The margins are stored in <db:code role="parameter">left</db:code>, <db:code role="parameter">top</db:code>, <db:code role="parameter">right</db:code> and <db:code role="parameter">bottom</db:code> as pointers to qreals. Each argument can be <db:emphasis>omitted</db:emphasis> by passing <db:code>nullptr</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#setWindowFrameMargins">setWindowFrameMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#windowFrameRect">windowFrameRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="grabKeyboardEvent">
<db:title>[virtual protected] void QGraphicsWidget::grabKeyboardEvent(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler, for <db:code role="parameter">event</db:code>, can be reimplemented in a subclass to receive notifications for <db:link xlink:href="qevent.xml#Type-enum">QEvent::GrabKeyboard</db:link> events.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#grabKeyboard">grabKeyboard</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#grabMouse">grabMouse</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="grabMouseEvent">
<db:title>[virtual protected] void QGraphicsWidget::grabMouseEvent(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler, for <db:code role="parameter">event</db:code>, can be reimplemented in a subclass to receive notifications for <db:link xlink:href="qevent.xml#Type-enum">QEvent::GrabMouse</db:link> events.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#grabMouse">grabMouse</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#grabKeyboard">grabKeyboard</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="grabShortcut">
<db:title>int QGraphicsWidget::grabShortcut(const QKeySequence &amp;<db:emphasis>sequence</db:emphasis>, Qt::ShortcutContext <db:emphasis>context</db:emphasis> = Qt::WindowShortcut)</db:title>
<db:para>Adds a shortcut to Qt's shortcut system that watches for the given key <db:code role="parameter">sequence</db:code> in the given <db:code role="parameter">context</db:code>. If the <db:code role="parameter">context</db:code> is <db:link xlink:href="qt.xml#ShortcutContext-enum">Qt::ApplicationShortcut</db:link>, the shortcut applies to the application as a whole. Otherwise, it is either local to this widget, <db:link xlink:href="qt.xml#ShortcutContext-enum">Qt::WidgetShortcut</db:link>, or to the window itself, <db:link xlink:href="qt.xml#ShortcutContext-enum">Qt::WindowShortcut</db:link>. For widgets that are not part of a window (i.e., top-level widgets and their children), <db:link xlink:href="qt.xml#ShortcutContext-enum">Qt::WindowShortcut</db:link> shortcuts apply to the scene.</db:para>
<db:para>If the same key <db:code role="parameter">sequence</db:code> has been grabbed by several widgets, when the key <db:code role="parameter">sequence</db:code> occurs a <db:link xlink:href="qevent.xml#Type-enum">QEvent::Shortcut</db:link> event is sent to all the widgets to which it applies in a non-deterministic order, but with the ``ambiguous'' flag set to true.</db:para>
<db:warning>
<db:para>You should not normally need to use this function; instead create <db:link xlink:href="qaction.xml">QAction</db:link>s with the shortcut key sequences you require (if you also want equivalent menu options and toolbar buttons), or create <db:link xlink:href="qshortcut.xml">QShortcut</db:link>s if you just need key sequences. Both <db:link xlink:href="qaction.xml">QAction</db:link> and <db:link xlink:href="qshortcut.xml">QShortcut</db:link> handle all the event filtering for you, and provide signals which are triggered when the user triggers the key sequence, so are much easier to use than this low-level function.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#releaseShortcut">releaseShortcut</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#setShortcutEnabled">setShortcutEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#grabShortcut">QWidget::grabShortcut</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hideEvent">
<db:title>[virtual protected] void QGraphicsWidget::hideEvent(QHideEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler, for <db:link xlink:href="qevent.xml#Type-enum">Hide</db:link> events, is delivered after the widget has been hidden, for example, setVisible(false) has been called for the widget or one of its ancestors when the widget was previously shown.</db:para>
<db:para>You can reimplement this event handler to detect when your widget is hidden. Calling <db:link xlink:href="qevent.xml#accept">QEvent::accept</db:link>() or <db:link xlink:href="qevent.xml#ignore">QEvent::ignore</db:link>() on <db:code role="parameter">event</db:code> has no effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#showEvent">showEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#hideEvent">QWidget::hideEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#GraphicsItemChange-enum">ItemVisibleChange</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hoverLeaveEvent">
<db:title>[override virtual protected] void QGraphicsWidget::hoverLeaveEvent(QGraphicsSceneHoverEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#hoverLeaveEvent" role="function">QGraphicsItem::hoverLeaveEvent(QGraphicsSceneHoverEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="hoverMoveEvent">
<db:title>[override virtual protected] void QGraphicsWidget::hoverMoveEvent(QGraphicsSceneHoverEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#hoverMoveEvent" role="function">QGraphicsItem::hoverMoveEvent(QGraphicsSceneHoverEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[virtual protected] void QGraphicsWidget::initStyleOption(QStyleOption *<db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Populates a style option object for this widget based on its current state, and stores the output in <db:code role="parameter">option</db:code>. The default implementation populates <db:code role="parameter">option</db:code> with the following properties.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Style Option Property</db:para>
</db:th>
<db:th>
<db:para>Value</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>state &amp; <db:link xlink:href="qstyle.xml#StateFlag-enum">QStyle::State_Enabled</db:link></db:para>
</db:td>
<db:td>
<db:para>Corresponds to <db:link xlink:href="qgraphicsitem.xml#isEnabled">QGraphicsItem::isEnabled</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>state &amp; <db:link xlink:href="qstyle.xml#StateFlag-enum">QStyle::State_HasFocus</db:link></db:para>
</db:td>
<db:td>
<db:para>Corresponds to <db:link xlink:href="qgraphicsitem.xml#hasFocus">QGraphicsItem::hasFocus</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>state &amp; <db:link xlink:href="qstyle.xml#StateFlag-enum">QStyle::State_MouseOver</db:link></db:para>
</db:td>
<db:td>
<db:para>Corresponds to <db:link xlink:href="qgraphicsitem.xml#isUnderMouse">QGraphicsItem::isUnderMouse</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>direction</db:para>
</db:td>
<db:td>
<db:para>Corresponds to <db:link xlink:href="qgraphicswidget.xml#layoutDirection-prop">QGraphicsWidget::layoutDirection</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>rect</db:para>
</db:td>
<db:td>
<db:para>Corresponds to <db:link xlink:href="qgraphicswidget.xml#rect">QGraphicsWidget::rect</db:link>().toRect().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>palette</db:para>
</db:td>
<db:td>
<db:para>Corresponds to <db:link xlink:href="qgraphicswidget.xml#palette-prop">QGraphicsWidget::palette</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>fontMetrics</db:para>
</db:td>
<db:td>
<db:para>Corresponds to <db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link>(<db:link xlink:href="qgraphicswidget.xml#font-prop">QGraphicsWidget::font</db:link>()).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Subclasses of <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> should call the base implementation, and then test the type of <db:code role="parameter">option</db:code> using <db:link xlink:href="qstylehintreturn.xml#qstyleoption_cast">qstyleoption_cast</db:link>&lt;&gt;() or test <db:link xlink:href="qstyleoption.xml#StyleOptionType-enum">QStyleOption::Type</db:link> before storing widget-specific options.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">void MyGroupBoxWidget::initStyleOption(QStyleOption *option) const
{
    QGraphicsWidget::initStyleOption(option);
    if (QStyleOptionGroupBox *box = qstyleoption_cast&lt;QStyleOptionGroupBox *&gt;(option)) {
        // Add group box specific state.
        box-&gt;flat = isFlat();
        ...
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertAction">
<db:title>void QGraphicsWidget::insertAction(QAction *<db:emphasis>before</db:emphasis>, QAction *<db:emphasis>action</db:emphasis>)</db:title>
<db:para>Inserts the action <db:code role="parameter">action</db:code> to this widget's list of actions, before the action <db:code role="parameter">before</db:code>. It appends the action if <db:code role="parameter">before</db:code> is <db:code>nullptr</db:code> or <db:code role="parameter">before</db:code> is not a valid action for this widget.</db:para>
<db:para>A <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> should only have one of each action.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#removeAction">removeAction</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#addAction">addAction</db:link>()</db:member>
<db:member><db:link xlink:href="qmenu.xml">QMenu</db:link></db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#actions">actions</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#insertActions">QWidget::insertActions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertActions">
<db:title>void QGraphicsWidget::insertActions(QAction *<db:emphasis>before</db:emphasis>, const QList&lt;QAction *&gt; &amp;<db:emphasis>actions</db:emphasis>)</db:title>
<db:para>Inserts the actions <db:code role="parameter">actions</db:code> to this widget's list of actions, before the action <db:code role="parameter">before</db:code>. It appends the action if <db:code role="parameter">before</db:code> is <db:code>nullptr</db:code> or <db:code role="parameter">before</db:code> is not a valid action for this widget.</db:para>
<db:para>A <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> can have at most one of each action.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#removeAction">removeAction</db:link>()</db:member>
<db:member><db:link xlink:href="qmenu.xml">QMenu</db:link></db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#insertAction">insertAction</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#insertActions">QWidget::insertActions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isActiveWindow">
<db:title>bool QGraphicsWidget::isActiveWindow() const</db:title>
<db:para>Returns <db:code>true</db:code> if this widget's window is in the active window, or if the widget does not have a window but is in an active scene (i.e., a scene that currently has focus).</db:para>
<db:para>The active window is the window that either contains a child widget that currently has input focus, or that itself has input focus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#activeWindow">QGraphicsScene::activeWindow</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#setActiveWindow">QGraphicsScene::setActiveWindow</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#isActive">isActive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemChange">
<db:title>[override virtual protected] QVariant QGraphicsWidget::itemChange(QGraphicsItem::GraphicsItemChange <db:emphasis>change</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#itemChange" role="function">QGraphicsItem::itemChange(QGraphicsItem::GraphicsItemChange change, const QVariant &amp;value)</db:link>.</db:para>
<db:para><db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> uses the base implementation of this function to catch and deliver events related to state changes in the item. Because of this, it is very important that subclasses call the base implementation.</db:para>
<db:para><db:code role="parameter">change</db:code> specifies the type of change, and <db:code role="parameter">value</db:code> is the new value.</db:para>
<db:para>For example, <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> uses ItemVisibleChange to deliver <db:link xlink:href="qevent.xml#Type-enum">Show</db:link> and <db:link xlink:href="qevent.xml#Type-enum">Hide</db:link> events, ItemPositionHasChanged to deliver <db:link xlink:href="qevent.xml#Type-enum">Move</db:link> events, and ItemParentChange both to deliver <db:link xlink:href="qevent.xml#Type-enum">ParentChange</db:link> events, and for managing the focus chain.</db:para>
<db:para><db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> enables the ItemSendsGeometryChanges flag by default in order to track position changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#itemChange">QGraphicsItem::itemChange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layout">
<db:title>QGraphicsLayout *QGraphicsWidget::layout() const</db:title>
<db:para>Returns this widget's layout, or <db:code>nullptr</db:code> if no layout is currently managing this widget.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qgraphicswidget.xml#layout-prop">layout</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#setLayout">setLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveEvent">
<db:title>[virtual protected] void QGraphicsWidget::moveEvent(QGraphicsSceneMoveEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler, for <db:link xlink:href="qevent.xml#Type-enum">GraphicsSceneMove</db:link> events, is delivered after the widget has moved (e.g., its local position has changed).</db:para>
<db:para>This event is only delivered when the item is moved locally. Calling <db:link xlink:href="qgraphicsitem.xml#setTransform">setTransform</db:link>() or moving any of the item's ancestors does not affect the item's local position.</db:para>
<db:para>You can reimplement this event handler to detect when your widget has moved. Calling <db:link xlink:href="qevent.xml#accept">QEvent::accept</db:link>() or <db:link xlink:href="qevent.xml#ignore">QEvent::ignore</db:link>() on <db:code role="parameter">event</db:code> has no effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#GraphicsItemChange-enum">ItemPositionChange</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#GraphicsItemChange-enum">ItemPositionHasChanged</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paint">
<db:title>[override virtual] void QGraphicsWidget::paint(QPainter *<db:emphasis>painter</db:emphasis>, const QStyleOptionGraphicsItem *<db:emphasis>option</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis> = nullptr)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#paint" role="function">QGraphicsItem::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)</db:link>.</db:para>
</db:section>
<db:section xml:id="paintWindowFrame">
<db:title>[virtual] void QGraphicsWidget::paintWindowFrame(QPainter *<db:emphasis>painter</db:emphasis>, const QStyleOptionGraphicsItem *<db:emphasis>option</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis> = nullptr)</db:title>
<db:para>This virtual function is called by <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> to draw the window frame for windows using <db:code role="parameter">painter</db:code>, <db:code role="parameter">option</db:code>, and <db:code role="parameter">widget</db:code>, in local coordinates. The base implementation uses the current style to render the frame and title bar.</db:para>
<db:para>You can reimplement this function in a subclass of <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> to provide custom rendering of the widget's window frame.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#paint">QGraphicsItem::paint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="polishEvent">
<db:title>[virtual protected] void QGraphicsWidget::polishEvent()</db:title>
<db:para>This event is delivered to the item by the scene at some point after it has been constructed, but before it is shown or otherwise accessed through the scene. You can use this event handler to do last-minute initializations of the widget which require the item to be fully constructed.</db:para>
<db:para>The base implementation does nothing.</db:para>
</db:section>
<db:section xml:id="rect">
<db:title>QRectF QGraphicsWidget::rect() const</db:title>
<db:para>Returns the item's local rect as a <db:link xlink:href="qrectf.xml">QRectF</db:link>. This function is equivalent to <db:link xlink:href="qrectf.xml">QRectF</db:link>(QPointF(), <db:link xlink:href="qgraphicswidget.xml#size-prop">size</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#setGeometry">setGeometry</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#size-prop">resize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="releaseShortcut">
<db:title>void QGraphicsWidget::releaseShortcut(int <db:emphasis>id</db:emphasis>)</db:title>
<db:para>Removes the shortcut with the given <db:code role="parameter">id</db:code> from Qt's shortcut system. The widget will no longer receive <db:link xlink:href="qevent.xml#Type-enum">QEvent::Shortcut</db:link> events for the shortcut's key sequence (unless it has other shortcuts with the same key sequence).</db:para>
<db:warning>
<db:para>You should not normally need to use this function since Qt's shortcut system removes shortcuts automatically when their parent widget is destroyed. It is best to use <db:link xlink:href="qaction.xml">QAction</db:link> or <db:link xlink:href="qshortcut.xml">QShortcut</db:link> to handle shortcuts, since they are easier to use than this low-level function. Note also that this is an expensive operation.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#grabShortcut">grabShortcut</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#setShortcutEnabled">setShortcutEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#releaseShortcut">QWidget::releaseShortcut</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeAction">
<db:title>void QGraphicsWidget::removeAction(QAction *<db:emphasis>action</db:emphasis>)</db:title>
<db:para>Removes the action <db:code role="parameter">action</db:code> from this widget's list of actions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#insertAction">insertAction</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#actions">actions</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#insertAction">insertAction</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#removeAction">QWidget::removeAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resize-1">
<db:title>void QGraphicsWidget::resize(qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Constructs a resize with the given <db:code>width</db:code> (<db:code role="parameter">w</db:code>) and <db:code>height</db:code> (<db:code role="parameter">h</db:code>). This convenience function is equivalent to calling resize(<db:link xlink:href="qsizef.xml">QSizeF</db:link>(w, h)).</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qgraphicswidget.xml#size-prop">size</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#setGeometry">setGeometry</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setTransform">setTransform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[virtual protected] void QGraphicsWidget::resizeEvent(QGraphicsSceneResizeEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler, for <db:link xlink:href="qevent.xml#Type-enum">GraphicsSceneResize</db:link> events, is delivered after the widget has been resized (i.e., its local size has changed). <db:code role="parameter">event</db:code> contains both the old and the new size.</db:para>
<db:para>This event is only delivered when the widget is resized locally; calling <db:link xlink:href="qgraphicsitem.xml#setTransform">setTransform</db:link>() on the widget or any of its ancestors or view, does not affect the widget's local size.</db:para>
<db:para>You can reimplement this event handler to detect when your widget has been resized. Calling <db:link xlink:href="qevent.xml#accept">QEvent::accept</db:link>() or <db:link xlink:href="qevent.xml#ignore">QEvent::ignore</db:link>() on <db:code role="parameter">event</db:code> has no effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#geometry">geometry</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#setGeometry">setGeometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sceneEvent">
<db:title>[override virtual protected] bool QGraphicsWidget::sceneEvent(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#sceneEvent" role="function">QGraphicsItem::sceneEvent(QEvent *event)</db:link>.</db:para>
<db:para><db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link>'s implementation of sceneEvent() simply passes <db:code role="parameter">event</db:code> to <db:link xlink:href="qgraphicswidget.xml#event">QGraphicsWidget::event</db:link>(). You can handle all events for your widget in <db:link xlink:href="qgraphicswidget.xml#event">event</db:link>() or in any of the convenience functions; you should not have to reimplement this function in a subclass of <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link>.</db:para>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">event</db:code> has been recognized and processed; otherwise, returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneEvent">QGraphicsItem::sceneEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttribute">
<db:title>void QGraphicsWidget::setAttribute(Qt::WidgetAttribute <db:emphasis>attribute</db:emphasis>, bool <db:emphasis>on</db:emphasis> = true)</db:title>
<db:para>If <db:code role="parameter">on</db:code> is true, this function enables <db:code role="parameter">attribute</db:code>; otherwise <db:code role="parameter">attribute</db:code> is disabled.</db:para>
<db:para>See the class documentation for <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> for a complete list of which attributes are supported, and what they are for.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#testAttribute">testAttribute</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#setAttribute">QWidget::setAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContentsMargins">
<db:title>void QGraphicsWidget::setContentsMargins(QMarginsF <db:emphasis>margins</db:emphasis>)</db:title>
<db:para>Sets the widget's contents margins to <db:code role="parameter">margins</db:code>.</db:para>
<db:para>Contents margins are used by the assigned layout to define the placement of subwidgets and layouts. Margins are particularly useful for widgets that constrain subwidgets to only a section of its own geometry. For example, a group box with a layout will place subwidgets inside its frame, but below the title.</db:para>
<db:para>Changing a widget's contents margins will always trigger an <db:link xlink:href="qgraphicsitem.xml#update">update</db:link>(), and any assigned layout will be activated automatically. The widget will then receive a <db:link xlink:href="qevent.xml#Type-enum">ContentsRectChange</db:link> event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#getContentsMargins">getContentsMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#setGeometry">setGeometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContentsMargins-1">
<db:title>void QGraphicsWidget::setContentsMargins(qreal <db:emphasis>left</db:emphasis>, qreal <db:emphasis>top</db:emphasis>, qreal <db:emphasis>right</db:emphasis>, qreal <db:emphasis>bottom</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the widget's contents margins to <db:code role="parameter">left</db:code>, <db:code role="parameter">top</db:code>, <db:code role="parameter">right</db:code> and <db:code role="parameter">bottom</db:code>.</db:para>
</db:section>
<db:section xml:id="setGeometry">
<db:title>void QGraphicsWidget::setGeometry(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>)</db:title>
<db:para>This convenience function is equivalent to calling setGeometry(<db:link xlink:href="qrectf.xml">QRectF</db:link>( <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>)).</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qgraphicswidget.xml#geometry-prop">geometry</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayoutitem.xml#geometry">geometry</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#size-prop">resize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLayout">
<db:title>void QGraphicsWidget::setLayout(QGraphicsLayout *<db:emphasis>layout</db:emphasis>)</db:title>
<db:para>Sets the layout for this widget to <db:code role="parameter">layout</db:code>. Any existing layout manager is deleted before the new layout is assigned. If <db:code role="parameter">layout</db:code> is <db:code>nullptr</db:code>, the widget is left without a layout. Existing subwidgets' geometries will remain unaffected.</db:para>
<db:para>All widgets that are currently managed by <db:code role="parameter">layout</db:code> or all of its sublayouts, are automatically reparented to this item. The layout is then invalidated, and the child widget geometries are adjusted according to this item's <db:link xlink:href="qgraphicslayoutitem.xml#geometry">geometry</db:link>() and contentsMargins(). Children who are not explicitly managed by <db:code role="parameter">layout</db:code> remain unaffected by the layout after it has been assigned to this widget.</db:para>
<db:para><db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> takes ownership of <db:code role="parameter">layout</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qgraphicswidget.xml#layout-prop">layout</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#layout">layout</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#addItem">QGraphicsLinearLayout::addItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslayout.xml#invalidate">QGraphicsLayout::invalidate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setShortcutAutoRepeat">
<db:title>void QGraphicsWidget::setShortcutAutoRepeat(int <db:emphasis>id</db:emphasis>, bool <db:emphasis>enabled</db:emphasis> = true)</db:title>
<db:para>If <db:code role="parameter">enabled</db:code> is true, auto repeat of the shortcut with the given <db:code role="parameter">id</db:code> is enabled; otherwise it is disabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#grabShortcut">grabShortcut</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#releaseShortcut">releaseShortcut</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#setShortcutAutoRepeat">QWidget::setShortcutAutoRepeat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setShortcutEnabled">
<db:title>void QGraphicsWidget::setShortcutEnabled(int <db:emphasis>id</db:emphasis>, bool <db:emphasis>enabled</db:emphasis> = true)</db:title>
<db:para>If <db:code role="parameter">enabled</db:code> is true, the shortcut with the given <db:code role="parameter">id</db:code> is enabled; otherwise the shortcut is disabled.</db:para>
<db:warning>
<db:para>You should not normally need to use this function since Qt's shortcut system enables/disables shortcuts automatically as widgets become hidden/visible and gain or lose focus. It is best to use <db:link xlink:href="qaction.xml">QAction</db:link> or <db:link xlink:href="qshortcut.xml">QShortcut</db:link> to handle shortcuts, since they are easier to use than this low-level function.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#grabShortcut">grabShortcut</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#releaseShortcut">releaseShortcut</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#setShortcutEnabled">QWidget::setShortcutEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStyle">
<db:title>void QGraphicsWidget::setStyle(QStyle *<db:emphasis>style</db:emphasis>)</db:title>
<db:para>Sets the widget's style to <db:code role="parameter">style</db:code>. <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> does <db:emphasis>not</db:emphasis> take ownership of <db:code role="parameter">style</db:code>.</db:para>
<db:para>If no style is assigned, or <db:code role="parameter">style</db:code> is <db:code>nullptr</db:code>, the widget will use <db:link xlink:href="qgraphicsscene.xml#style">QGraphicsScene::style</db:link>() (if this has been set). Otherwise the widget will use <db:link xlink:href="qapplication.xml#style">QApplication::style</db:link>().</db:para>
<db:para>This function sets the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_SetStyle</db:link> attribute if <db:code role="parameter">style</db:code> is not <db:code>nullptr</db:code>; otherwise it clears the attribute.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#style">style</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTabOrder">
<db:title>[static] void QGraphicsWidget::setTabOrder(QGraphicsWidget *<db:emphasis>first</db:emphasis>, QGraphicsWidget *<db:emphasis>second</db:emphasis>)</db:title>
<db:para>Moves the <db:code role="parameter">second</db:code> widget around the ring of focus widgets so that keyboard focus moves from the <db:code role="parameter">first</db:code> widget to the <db:code role="parameter">second</db:code> widget when the Tab key is pressed.</db:para>
<db:para>Note that since the tab order of the <db:code role="parameter">second</db:code> widget is changed, you should order a chain like this:</db:para>
<db:programlisting language="cpp">setTabOrder(a, b); // a to b
setTabOrder(b, c); // a to b to c
setTabOrder(c, d); // a to b to c to d
</db:programlisting>
<db:para><db:emphasis>not</db:emphasis> like this:</db:para>
<db:programlisting language="cpp">// WRONG
setTabOrder(c, d); // c to d
setTabOrder(a, b); // a to b AND c to d
setTabOrder(b, c); // a to b to c, but not c to d
</db:programlisting>
<db:para>If <db:code role="parameter">first</db:code> is <db:code>nullptr</db:code>, this indicates that <db:code role="parameter">second</db:code> should be the first widget to receive input focus should the scene gain Tab focus (i.e., the user hits Tab so that focus passes into the scene). If <db:code role="parameter">second</db:code> is <db:code>nullptr</db:code>, this indicates that <db:code role="parameter">first</db:code> should be the first widget to gain focus if the scene gained BackTab focus.</db:para>
<db:para>By default, tab order is defined implicitly using widget creation order.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#focusPolicy-prop">focusPolicy</db:link></db:member>
<db:member><db:link xlink:href="focus.xml">Keyboard Focus in Widgets</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWindowFrameMargins">
<db:title>void QGraphicsWidget::setWindowFrameMargins(QMarginsF <db:emphasis>margins</db:emphasis>)</db:title>
<db:para>Sets the widget's window frame margins to <db:code role="parameter">margins</db:code>. The default frame margins are provided by the style, and they depend on the current window flags.</db:para>
<db:para>If you would like to draw your own window decoration, you can set your own frame margins to override the default margins.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#unsetWindowFrameMargins">unsetWindowFrameMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#getWindowFrameMargins">getWindowFrameMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#windowFrameRect">windowFrameRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWindowFrameMargins-1">
<db:title>void QGraphicsWidget::setWindowFrameMargins(qreal <db:emphasis>left</db:emphasis>, qreal <db:emphasis>top</db:emphasis>, qreal <db:emphasis>right</db:emphasis>, qreal <db:emphasis>bottom</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the widget's window frame margins to <db:code role="parameter">left</db:code>, <db:code role="parameter">top</db:code>, <db:code role="parameter">right</db:code> and <db:code role="parameter">bottom</db:code>.</db:para>
</db:section>
<db:section xml:id="shape">
<db:title>[override virtual] QPainterPath QGraphicsWidget::shape() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#shape" role="function">QGraphicsItem::shape() const</db:link>.</db:para>
</db:section>
<db:section xml:id="showEvent">
<db:title>[virtual protected] void QGraphicsWidget::showEvent(QShowEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler, for <db:link xlink:href="qevent.xml#Type-enum">Show</db:link> events, is delivered before the widget has been shown, for example, setVisible(true) has been called for the widget or one of its ancestors when the widget was previously hidden.</db:para>
<db:para>You can reimplement this event handler to detect when your widget is shown. Calling <db:link xlink:href="qevent.xml#accept">QEvent::accept</db:link>() or <db:link xlink:href="qevent.xml#ignore">QEvent::ignore</db:link>() on <db:code role="parameter">event</db:code> has no effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#hideEvent">hideEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#showEvent">QWidget::showEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#GraphicsItemChange-enum">ItemVisibleChange</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual protected] QSizeF QGraphicsWidget::sizeHint(Qt::SizeHint <db:emphasis>which</db:emphasis>, const QSizeF &amp;<db:emphasis>constraint</db:emphasis> = QSizeF()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayoutitem.xml#sizeHint" role="function">QGraphicsLayoutItem::sizeHint(Qt::SizeHint which, const QSizeF &amp;constraint) const</db:link>.</db:para>
</db:section>
<db:section xml:id="style">
<db:title>QStyle *QGraphicsWidget::style() const</db:title>
<db:para>Returns a pointer to the widget's style. If this widget does not have any explicitly assigned style, the scene's style is returned instead. In turn, if the scene does not have any assigned style, this function returns <db:link xlink:href="qapplication.xml#style">QApplication::style</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#setStyle">setStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="testAttribute">
<db:title>bool QGraphicsWidget::testAttribute(Qt::WidgetAttribute <db:emphasis>attribute</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">attribute</db:code> is enabled for this widget; otherwise, returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#setAttribute">setAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>[override virtual] int QGraphicsWidget::type() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#type" role="function">QGraphicsItem::type() const</db:link>.</db:para>
</db:section>
<db:section xml:id="ungrabKeyboardEvent">
<db:title>[virtual protected] void QGraphicsWidget::ungrabKeyboardEvent(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler, for <db:code role="parameter">event</db:code>, can be reimplemented in a subclass to receive notifications for <db:link xlink:href="qevent.xml#Type-enum">QEvent::UngrabKeyboard</db:link> events.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#ungrabKeyboard">ungrabKeyboard</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#ungrabMouse">ungrabMouse</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ungrabMouseEvent">
<db:title>[virtual protected] void QGraphicsWidget::ungrabMouseEvent(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler, for <db:code role="parameter">event</db:code>, can be reimplemented in a subclass to receive notifications for <db:link xlink:href="qevent.xml#Type-enum">QEvent::UngrabMouse</db:link> events.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#ungrabMouse">ungrabMouse</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#ungrabKeyboard">ungrabKeyboard</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unsetWindowFrameMargins">
<db:title>void QGraphicsWidget::unsetWindowFrameMargins()</db:title>
<db:para>Resets the window frame margins to the default value, provided by the style.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#setWindowFrameMargins">setWindowFrameMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#getWindowFrameMargins">getWindowFrameMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#windowFrameRect">windowFrameRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateGeometry">
<db:title>[override virtual protected] void QGraphicsWidget::updateGeometry()</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayoutitem.xml#updateGeometry" role="function">QGraphicsLayoutItem::updateGeometry()</db:link>.</db:para>
<db:para>If this widget is currently managed by a layout, this function notifies the layout that the widget's size hints have changed and the layout may need to resize and reposition the widget accordingly.</db:para>
<db:para>Call this function if the widget's <db:link xlink:href="qgraphicswidget.xml#sizeHint">sizeHint</db:link>() has changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslayout.xml#invalidate">QGraphicsLayout::invalidate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowFrameEvent">
<db:title>[virtual protected] bool QGraphicsWidget::windowFrameEvent(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler, for <db:code role="parameter">event</db:code>, receives events for the window frame if this widget is a window. Its base implementation provides support for default window frame interaction such as moving, resizing, etc.</db:para>
<db:para>You can reimplement this handler in a subclass of <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> to provide your own custom window frame interaction support.</db:para>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">event</db:code> has been recognized and processed; otherwise, returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#event">event</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowFrameGeometry">
<db:title>QRectF QGraphicsWidget::windowFrameGeometry() const</db:title>
<db:para>Returns the widget's geometry in parent coordinates including any window frame.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#windowFrameRect">windowFrameRect</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#getWindowFrameMargins">getWindowFrameMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#setWindowFrameMargins">setWindowFrameMargins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowFrameRect">
<db:title>QRectF QGraphicsWidget::windowFrameRect() const</db:title>
<db:para>Returns the widget's local rect including any window frame.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#windowFrameGeometry">windowFrameGeometry</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#getWindowFrameMargins">getWindowFrameMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#setWindowFrameMargins">setWindowFrameMargins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowFrameSectionAt">
<db:title>[virtual protected] Qt::WindowFrameSection QGraphicsWidget::windowFrameSectionAt(const QPointF &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>Returns the window frame section at position <db:code role="parameter">pos</db:code>, or <db:link xlink:href="qt.xml#WindowFrameSection-enum">Qt::NoSection</db:link> if there is no window frame section at this position.</db:para>
<db:para>This function is used in <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link>'s base implementation for window frame interaction.</db:para>
<db:para>You can reimplement this function if you want to customize how a window can be interactively moved or resized. For instance, if you only want to allow a window to be resized by the bottom right corner, you can reimplement this function to return <db:link xlink:href="qt.xml#WindowFrameSection-enum">Qt::NoSection</db:link> for all sections except <db:link xlink:href="qt.xml#WindowFrameSection-enum">Qt::BottomRightSection</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#windowFrameEvent">windowFrameEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#paintWindowFrame">paintWindowFrame</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#windowFrameGeometry">windowFrameGeometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowType">
<db:title>Qt::WindowType QGraphicsWidget::windowType() const</db:title>
<db:para>Returns the widgets window type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicswidget.xml#windowFlags-prop">windowFlags</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#isWindow">isWindow</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#isPanel">isPanel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
