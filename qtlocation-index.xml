<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Location</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides QML and C++ interfaces to create location-aware applications.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt Location module helps you create mapping solutions using data available from popular location service providers, such as <db:link xlink:href="http://openstreetmap.org">Open Street Map</db:link>.</db:para>
<db:para>The Qt Location API enables you to:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Access and present map data.</db:para>
</db:listitem>
<db:listitem>
<db:para>Support touch gesture on a specific area of the map.</db:para>
</db:listitem>
<db:listitem>
<db:para>Query for a specific geographical location and route.</db:para>
</db:listitem>
<db:listitem>
<db:para>Add additional layers on top, such as polylines and circles.</db:para>
</db:listitem>
<db:listitem>
<db:para>Search for places and related images.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="using-the-module">
<db:title>Using the Module</db:title>
<db:section xml:id="qml-api">
<db:title>QML API</db:title>
<db:para>To use the types, add the following import statements to your .qml file:</db:para>
<db:programlisting language="qml">import QtPositioning
import QtLocation
</db:programlisting>
<db:note>
<db:para>Many Qt Location QML module APIs are using types from the Qt Positioning module. For example, defining a coordinate to be the center of the map requires types from the Qt Positioning module.</db:para>
</db:note>
</db:section>
<db:section xml:id="c-api">
<db:title>C++ API</db:title>
<db:para>For C++ projects, include the header appropriate for the current use case; for example, applications using routes may use:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QGeoRoute&amp;gt;
</db:programlisting>
<db:para>Using a Qt module's C++ API requires linking against the module library, either directly or through other dependencies. Several build tools have dedicated support for this, including <db:link xlink:href="https://cmake.org/cmake/help/latest/">CMake</db:link> and <db:link xlink:href="qmake-manual.xml">qmake</db:link>.</db:para>
<db:section xml:id="building-with-cmake">
<db:title>Building with CMake</db:title>
<db:para>Use the find_package() command to locate the needed module component in the Qt6 package:</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS Location)
target_link_libraries(mytarget PRIVATE Qt6::Location)
</db:programlisting>
<db:para>For more details, see the <db:link xlink:href="cmake-manual.xml">Build with CMake</db:link> overview.</db:para>
</db:section>
<db:section xml:id="building-with-qmake">
<db:title>Building with qmake</db:title>
<db:para>To configure the module for building with qmake, add the module as a value of the QT variable in the project's .pro file:</db:para>
<db:programlisting language="cpp">QT += location
</db:programlisting>
</db:section>
</db:section>
</db:section>
<db:section xml:id="submodules">
<db:title>Submodules</db:title>
<db:para>The API is split into sub-modules, which provide QML and C++ interfaces for specific purposes. They focus mainly on Map and Place information. The required position data can be retrieved using the <db:link xlink:href="qml-qtpositioning-qtpositioning.xml">QtPositioning</db:link> module.</db:para>
<db:section xml:id="places">
<db:title>Places</db:title>
<db:para>The Places submodule is the natural complement to Positioning, providing a source of geographical data about Places of Interest (POI). Besides the source information, the API provides information about the location, size, and other related information about a POI. The Places API can also retrieve images, reviews, and other content related to a place.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>Places introduction:</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="location-places-qml.xml">for QML</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="location-places-cpp.xml">for C++</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="maps-and-navigation">
<db:title>Maps and Navigation</db:title>
<db:para>The module provides the QML and C++ alternatives for maps and navigation. The C++ alternative provides utility classes to get geocoding (finding a geographic coordinate from a street address) and navigation (including driving and walking directions) information, whereas its QML counterpart provides UI components to render the information.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>Maps and Navigation introduction:</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="location-maps-qml.xml">for QML</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="location-maps-cpp.xml">for C++</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtlocation-examples.xml">Example Apps</db:link></db:para>
</db:td>
<db:td>
<db:para>Examples demonstrating use of the Qt Location APIs</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-location5-maps.xml">Maps and Navigation Tutorial</db:link></db:para>
</db:td>
<db:td>
<db:para>Tutorial introducing the QML Maps Types</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="api-reference">
<db:title>API Reference</db:title>
<db:para>The following are lists of the classes and UI components provided by the module, with example applications to demonstrate their usage:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtlocation-qmlmodule.xml">QML API Reference</db:link></db:para>
</db:td>
<db:td>
<db:para>Full list of QML components in the Qt Location API</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtlocation-cpp.xml">C++ API Reference by domain</db:link></db:para>
</db:td>
<db:td>
<db:para>Full list of C++ classes and methods of the Qt Location APIs sorted by domain</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtlocation-module.xml">C++ API Reference</db:link></db:para>
</db:td>
<db:td>
<db:para>Full list of C++ classes and methods of the Qt Location APIs</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="plugin-references-and-parameters">
<db:title>Plugin References and Parameters</db:title>
<db:para>Information about plugins, important notes on their usage, parameters that can be provided to influence their behavior.</db:para>
<db:variablelist role="QtLocation-plugins">
<db:varlistentry>
<db:term><db:link xlink:href="location-plugin-itemsoverlay.xml" xlink:role="page">Qt Location Items Overlay Plugin</db:link></db:term>
<db:listitem>
<db:para>Provides an empty map intended to be used as background for an overlay layers for map items.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="location-plugin-osm.xml" xlink:role="page">Qt Location Open Street Map Plugin</db:link></db:term>
<db:listitem>
<db:para>Uses Open Street Map and related services.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="implementing-new-back-ends-and-porting">
<db:title>Implementing New Back-Ends and Porting</db:title>
<db:para>For systems integrators and distributors, information related to making Qt Location available for a new platform.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtlocation-geoservices.xml">GeoServices</db:link></db:para>
</db:td>
<db:td>
<db:para>Information about the Qt Location GeoServices plugins</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="location-places-backend.xml">Places</db:link></db:para>
</db:td>
<db:td>
<db:para>Information for places backend implementors</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtlocation-changes-qt6.xml">API changes</db:link></db:para>
</db:td>
<db:td>
<db:para>Information about porting from Qt 5 to Qt 6</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="licenses">
<db:title>Licenses</db:title>
<db:para>Qt Location is available under commercial licenses from <db:link xlink:href="http://www.qt.io/about-us/">The Qt Company</db:link>. In addition, it is available under the <db:link xlink:href="http://www.gnu.org/licenses/lgpl-3.0.html">GNU Lesser General Public License, version 3</db:link>, or the <db:link xlink:href="http://www.gnu.org/licenses/gpl-2.0.html">GNU General Public License, version 2</db:link>. See <db:link xlink:href="licensing.xml">Qt Licensing</db:link> for further details.</db:para>
</db:section>
</db:article>
