<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Controls Overview</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A set of UI controls to create user interfaces in Qt Quick.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt Quick Controls provide a set of UI controls to create user interfaces in Qt Quick.</db:para>
<db:section xml:id="getting-started">
<db:title>Getting Started</db:title>
<db:para>The QML types can be imported into your application using the following import statement in your <db:code>.qml</db:code> file.</db:para>
<db:programlisting language="cpp">import QtQuick.Controls 1.2
</db:programlisting>
</db:section>
<db:section xml:id="creating-a-basic-example">
<db:title>Creating a basic example</db:title>
<db:para>A basic example of a QML file that makes use of controls is shown here:</db:para>
<db:programlisting language="cpp">import QtQuick.Controls 1.2

ApplicationWindow {
    title: &quot;My Application&quot;
    width: 640
    height: 480
    visible: true

    Button {
        text: &quot;Push Me&quot;
        anchors.centerIn: parent
    }
}
</db:programlisting>
<db:para>For an overview of the controls provided by <db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls</db:link>, you can look at the <db:link xlink:href="qtquickcontrols-gallery-example.xml">Gallery</db:link> example.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-example-gallery-osx.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="setting-up-controls-from-c">
<db:title>Setting Up Controls from C++</db:title>
<db:para>Although we have traditionally used a <db:link xlink:href="qquickview.xml">QQuickView</db:link> window to display QML files in a C++ application, doing this means you can only set window properties from C++.</db:para>
<db:para>With Qt Quick Controls, declare an <db:link xlink:href="qml-qtquick-controls-applicationwindow.xml">ApplicationWindow</db:link> as the root item of your application and launch it by using the <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link> instead. This ensures that you can control top level window properties from QML.</db:para>
<db:para>A basic example of a source file that makes use of controls is shown here:</db:para>
<db:programlisting language="cpp">#include &lt;QApplication&gt;
#include &lt;QQmlApplicationEngine&gt;

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    QQmlApplicationEngine engine(&quot;main.qml&quot;);
    return app.exec();
}
</db:programlisting>
<db:note>
<db:para>We are using <db:link xlink:href="qapplication.xml">QApplication</db:link> and not <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> in this example. Though you can use <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> instead, doing this will eliminate platform-dependent styling. This is because it is relying on the widget module to provide the native look and feel.</db:para>
</db:note>
<db:section xml:id="using-c-data-from-qml">
<db:title>Using C++ Data From QML</db:title>
<db:para>If you need to register a C++ class to use from QML, you can call, for example, <db:link xlink:href="qqmlengine.xml#qmlRegisterType">qmlRegisterType</db:link>() before declaring your <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link>. You can find the list of all registering functions <db:link xlink:href="qqmlengine.xml">here</db:link>.</db:para>
<db:para>If you need to expose data to QML components, you need to set them to the context of the current QML engine. See <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link> for more information.</db:para>
</db:section>
<db:section xml:id="deploying-qt-quick-controls">
<db:title>Deploying Qt Quick Controls</db:title>
<db:para>Since Qt 5.2, the Qt Quick Controls JavaScript and QML files are embedded into the plugin using <db:link xlink:href="resources.xml">Qt resources</db:link> (.qrc) for the <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls and <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls.Styles imports. It is only necessary to deploy the qtquickcontrolsplugin C++ library and its qmldir file found in the plugin directory <db:emphasis>qml/<db:link xlink:href="qtquick-module.xml">QtQuick</db:link>/Controls</db:emphasis>.</db:para>
<db:para>The .js/.qml files are still placed into the plugin directory though for keeping the development tasks convenient, debugging and autocompletion capabilities remain unchanged. For deployment, these files can be ignored. In practice, the <db:emphasis>Styles</db:emphasis> and <db:emphasis>Private</db:emphasis> subfolders can be deleted as well as all .js and .qml files present under <db:emphasis>qml/<db:link xlink:href="qtquick-module.xml">QtQuick</db:link>/Controls</db:emphasis>.</db:para>
<db:note>
<db:para>On Windows, the <db:link xlink:href="windows-deployment.xml#the-windows-deployment-tool">Windows Deployment Tool</db:link> only deploys the Qt Quick Controls plugin and its qmldir file.</db:para>
</db:note>
<db:para>Using resources facilitates the deployment of the Qt Quick Controls though it has limitations that still need to be addressed.</db:para>
<db:note>
<db:para>On iOS, the qmlimportscanner tool is used to parse the required qml imports so they can be deployed accordingly. The files embedded in resources are not scanned by this tool though and when linking statically, some required imports used by the Qt Quick Controls can be forgotten. This is a known limitation and a workaround is to add potentially missing imports in one of the qml files of the application using the controls.</db:para>
</db:note>
</db:section>
<db:section xml:id="testing-desktop-and-mobile-behavior-of-the-controls">
<db:title>Testing Desktop and Mobile behavior of the controls</db:title>
<db:para>You can test how the controls on your application or style will behave on a mobile platform by setting the environment variable <db:emphasis>QT_QUICK_CONTROLS_MOBILE</db:emphasis>, to force a behavior optimized for mobile devices.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-information">
<db:title>Related information</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquick-index.xml">Qt Quick</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-examples.xml">Qt Quick Controls Examples</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
