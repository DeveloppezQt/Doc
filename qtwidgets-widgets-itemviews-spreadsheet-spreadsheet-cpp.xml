<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Spreadsheet</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Spreadsheet example shows how to create a simple spreadsheet application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the demonstration applications of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;
#if defined(QT_PRINTSUPPORT_LIB)
#include &amp;lt;QtPrintSupport/qtprintsupportglobal.h&amp;gt;
#if QT_CONFIG(printdialog)
#include &amp;lt;QPrinter&amp;gt;
#include &amp;lt;QPrintDialog&amp;gt;
#endif
#if QT_CONFIG(printpreviewdialog)
#include &amp;lt;QPrintPreviewDialog&amp;gt;
#endif
#endif

#include &quot;spreadsheet.h&quot;
#include &quot;spreadsheetdelegate.h&quot;
#include &quot;spreadsheetitem.h&quot;
#include &quot;printview.h&quot;

SpreadSheet::SpreadSheet(int rows, int cols, QWidget *parent)
        : QMainWindow(parent)
{
    addToolBar(toolBar = new QToolBar());
    formulaInput = new QLineEdit();

    cellLabel = new QLabel(toolBar);
    cellLabel-&amp;gt;setMinimumSize(80, 0);

    toolBar-&amp;gt;addWidget(cellLabel);
    toolBar-&amp;gt;addWidget(formulaInput);

    table = new QTableWidget(rows, cols, this);
    table-&amp;gt;setSizeAdjustPolicy(QTableWidget::AdjustToContents);
    for (int c = 0; c &amp;lt; cols; ++c) {
        QString character(QChar('A' + c));
        table-&amp;gt;setHorizontalHeaderItem(c, new QTableWidgetItem(character));
    }

    table-&amp;gt;setItemPrototype(table-&amp;gt;item(rows - 1, cols - 1));
    table-&amp;gt;setItemDelegate(new SpreadSheetDelegate());

    createActions();
    updateColor(0);
    setupMenuBar();
    setupContents();
    setupContextMenu();
    setCentralWidget(table);

    statusBar();
    connect(table, &amp;amp;QTableWidget::currentItemChanged,
            this, &amp;amp;SpreadSheet::updateStatus);
    connect(table, &amp;amp;QTableWidget::currentItemChanged,
            this, &amp;amp;SpreadSheet::updateColor);
    connect(table, &amp;amp;QTableWidget::currentItemChanged,
            this, &amp;amp;SpreadSheet::updateLineEdit);
    connect(table, &amp;amp;QTableWidget::itemChanged,
            this, &amp;amp;SpreadSheet::updateStatus);
    connect(formulaInput, &amp;amp;QLineEdit::returnPressed, this, &amp;amp;SpreadSheet::returnPressed);
    connect(table, &amp;amp;QTableWidget::itemChanged,
            this, &amp;amp;SpreadSheet::updateLineEdit);

    setWindowTitle(tr(&quot;Spreadsheet&quot;));
}

void SpreadSheet::createActions()
{
    cell_sumAction = new QAction(tr(&quot;Sum&quot;), this);
    connect(cell_sumAction, &amp;amp;QAction::triggered, this, &amp;amp;SpreadSheet::actionSum);

    cell_addAction = new QAction(tr(&quot;&amp;amp;Add&quot;), this);
    cell_addAction-&amp;gt;setShortcut(Qt::CTRL | Qt::Key_Plus);
    connect(cell_addAction, &amp;amp;QAction::triggered, this, &amp;amp;SpreadSheet::actionAdd);

    cell_subAction = new QAction(tr(&quot;&amp;amp;Subtract&quot;), this);
    cell_subAction-&amp;gt;setShortcut(Qt::CTRL | Qt::Key_Minus);
    connect(cell_subAction, &amp;amp;QAction::triggered, this, &amp;amp;SpreadSheet::actionSubtract);

    cell_mulAction = new QAction(tr(&quot;&amp;amp;Multiply&quot;), this);
    cell_mulAction-&amp;gt;setShortcut(Qt::CTRL | Qt::Key_multiply);
    connect(cell_mulAction, &amp;amp;QAction::triggered, this, &amp;amp;SpreadSheet::actionMultiply);

    cell_divAction = new QAction(tr(&quot;&amp;amp;Divide&quot;), this);
    cell_divAction-&amp;gt;setShortcut(Qt::CTRL | Qt::Key_division);
    connect(cell_divAction, &amp;amp;QAction::triggered, this, &amp;amp;SpreadSheet::actionDivide);

    fontAction = new QAction(tr(&quot;Font...&quot;), this);
    fontAction-&amp;gt;setShortcut(Qt::CTRL | Qt::Key_F);
    connect(fontAction, &amp;amp;QAction::triggered, this, &amp;amp;SpreadSheet::selectFont);

    colorAction = new QAction(QPixmap(16, 16), tr(&quot;Background &amp;amp;Color...&quot;), this);
    connect(colorAction, &amp;amp;QAction::triggered, this, &amp;amp;SpreadSheet::selectColor);

    clearAction = new QAction(tr(&quot;Clear&quot;), this);
    clearAction-&amp;gt;setShortcut(Qt::Key_Delete);
    connect(clearAction, &amp;amp;QAction::triggered, this, &amp;amp;SpreadSheet::clear);

    aboutSpreadSheet = new QAction(tr(&quot;About Spreadsheet&quot;), this);
    connect(aboutSpreadSheet, &amp;amp;QAction::triggered, this, &amp;amp;SpreadSheet::showAbout);

    exitAction = new QAction(tr(&quot;E&amp;amp;xit&quot;), this);
    connect(exitAction, &amp;amp;QAction::triggered, qApp, &amp;amp;QCoreApplication::quit);

    printAction = new QAction(tr(&quot;&amp;amp;Print&quot;), this);
    connect(printAction, &amp;amp;QAction::triggered, this, &amp;amp;SpreadSheet::print);

    firstSeparator = new QAction(this);
    firstSeparator-&amp;gt;setSeparator(true);

    secondSeparator = new QAction(this);
    secondSeparator-&amp;gt;setSeparator(true);
}

void SpreadSheet::setupMenuBar()
{
    QMenu *fileMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;File&quot;));
    fileMenu-&amp;gt;addAction(printAction);
    fileMenu-&amp;gt;addAction(exitAction);

    QMenu *cellMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;Cell&quot;));
    cellMenu-&amp;gt;addAction(cell_addAction);
    cellMenu-&amp;gt;addAction(cell_subAction);
    cellMenu-&amp;gt;addAction(cell_mulAction);
    cellMenu-&amp;gt;addAction(cell_divAction);
    cellMenu-&amp;gt;addAction(cell_sumAction);
    cellMenu-&amp;gt;addSeparator();
    cellMenu-&amp;gt;addAction(colorAction);
    cellMenu-&amp;gt;addAction(fontAction);

    menuBar()-&amp;gt;addSeparator();

    QMenu *aboutMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;Help&quot;));
    aboutMenu-&amp;gt;addAction(aboutSpreadSheet);
}

void SpreadSheet::updateStatus(QTableWidgetItem *item)
{
    if (item &amp;amp;&amp;amp; item == table-&amp;gt;currentItem()) {
        statusBar()-&amp;gt;showMessage(item-&amp;gt;data(Qt::StatusTipRole).toString(), 1000);
        cellLabel-&amp;gt;setText(tr(&quot;Cell: (%1)&quot;).arg(encode_pos(table-&amp;gt;row(item), table-&amp;gt;column(item))));
    }
}

void SpreadSheet::updateColor(QTableWidgetItem *item)
{
    QPixmap pix(16, 16);
    QColor col;
    if (item)
        col = item-&amp;gt;backgroundColor();
    if (!col.isValid())
        col = palette().base().color();

    QPainter pt(&amp;amp;pix);
    pt.fillRect(0, 0, 16, 16, col);

    QColor lighter = col.light();
    pt.setPen(lighter);
    QPoint lightFrame[] = { QPoint(0, 15), QPoint(0, 0), QPoint(15, 0) };
    pt.drawPolyline(lightFrame, 3);

    pt.setPen(col.dark());
    QPoint darkFrame[] = { QPoint(1, 15), QPoint(15, 15), QPoint(15, 1) };
    pt.drawPolyline(darkFrame, 3);

    pt.end();

    colorAction-&amp;gt;setIcon(pix);
}

void SpreadSheet::updateLineEdit(QTableWidgetItem *item)
{
    if (item != table-&amp;gt;currentItem())
        return;
    if (item)
        formulaInput-&amp;gt;setText(item-&amp;gt;data(Qt::EditRole).toString());
    else
        formulaInput-&amp;gt;clear();
}

void SpreadSheet::returnPressed()
{
    QString text = formulaInput-&amp;gt;text();
    int row = table-&amp;gt;currentRow();
    int col = table-&amp;gt;currentColumn();
    QTableWidgetItem *item = table-&amp;gt;item(row, col);
    if (!item)
        table-&amp;gt;setItem(row, col, new SpreadSheetItem(text));
    else
        item-&amp;gt;setData(Qt::EditRole, text);
    table-&amp;gt;viewport()-&amp;gt;update();
}

void SpreadSheet::selectColor()
{
    QTableWidgetItem *item = table-&amp;gt;currentItem();
    QColor col = item ? item-&amp;gt;backgroundColor() : table-&amp;gt;palette().base().color();
    col = QColorDialog::getColor(col, this);
    if (!col.isValid())
        return;

    QList&amp;lt;QTableWidgetItem*&amp;gt; selected = table-&amp;gt;selectedItems();
    if (selected.count() == 0)
        return;

    foreach (QTableWidgetItem *i, selected) {
        if (i)
            i-&amp;gt;setBackgroundColor(col);
    }

    updateColor(table-&amp;gt;currentItem());
}

void SpreadSheet::selectFont()
{
    QList&amp;lt;QTableWidgetItem*&amp;gt; selected = table-&amp;gt;selectedItems();
    if (selected.count() == 0)
        return;

    bool ok = false;
    QFont fnt = QFontDialog::getFont(&amp;amp;ok, font(), this);

    if (!ok)
        return;
    foreach (QTableWidgetItem *i, selected) {
        if (i)
            i-&amp;gt;setFont(fnt);
    }
}

bool SpreadSheet::runInputDialog(const QString &amp;amp;title,
                                 const QString &amp;amp;c1Text,
                                 const QString &amp;amp;c2Text,
                                 const QString &amp;amp;opText,
                                 const QString &amp;amp;outText,
                                 QString *cell1, QString *cell2, QString *outCell)
{
    QStringList rows, cols;
    for (int c = 0; c &amp;lt; table-&amp;gt;columnCount(); ++c)
        cols &amp;lt;&amp;lt; QChar('A' + c);
    for (int r = 0; r &amp;lt; table-&amp;gt;rowCount(); ++r)
        rows &amp;lt;&amp;lt; QString::number(1 + r);

    QDialog addDialog(this);
    addDialog.setWindowTitle(title);

    QGroupBox group(title, &amp;amp;addDialog);
    group.setMinimumSize(250, 100);

    QLabel cell1Label(c1Text, &amp;amp;group);
    QComboBox cell1RowInput(&amp;amp;group);
    int c1Row, c1Col;
    decode_pos(*cell1, &amp;amp;c1Row, &amp;amp;c1Col);
    cell1RowInput.addItems(rows);
    cell1RowInput.setCurrentIndex(c1Row);

    QComboBox cell1ColInput(&amp;amp;group);
    cell1ColInput.addItems(cols);
    cell1ColInput.setCurrentIndex(c1Col);

    QLabel operatorLabel(opText, &amp;amp;group);
    operatorLabel.setAlignment(Qt::AlignHCenter);

    QLabel cell2Label(c2Text, &amp;amp;group);
    QComboBox cell2RowInput(&amp;amp;group);
    int c2Row, c2Col;
    decode_pos(*cell2, &amp;amp;c2Row, &amp;amp;c2Col);
    cell2RowInput.addItems(rows);
    cell2RowInput.setCurrentIndex(c2Row);
    QComboBox cell2ColInput(&amp;amp;group);
    cell2ColInput.addItems(cols);
    cell2ColInput.setCurrentIndex(c2Col);

    QLabel equalsLabel(&quot;=&quot;, &amp;amp;group);
    equalsLabel.setAlignment(Qt::AlignHCenter);

    QLabel outLabel(outText, &amp;amp;group);
    QComboBox outRowInput(&amp;amp;group);
    int outRow, outCol;
    decode_pos(*outCell, &amp;amp;outRow, &amp;amp;outCol);
    outRowInput.addItems(rows);
    outRowInput.setCurrentIndex(outRow);
    QComboBox outColInput(&amp;amp;group);
    outColInput.addItems(cols);
    outColInput.setCurrentIndex(outCol);

    QPushButton cancelButton(tr(&quot;Cancel&quot;), &amp;amp;addDialog);
    connect(&amp;amp;cancelButton, &amp;amp;QAbstractButton::clicked, &amp;amp;addDialog, &amp;amp;QDialog::reject);

    QPushButton okButton(tr(&quot;OK&quot;), &amp;amp;addDialog);
    okButton.setDefault(true);
    connect(&amp;amp;okButton, &amp;amp;QAbstractButton::clicked, &amp;amp;addDialog, &amp;amp;QDialog::accept);

    QHBoxLayout *buttonsLayout = new QHBoxLayout;
    buttonsLayout-&amp;gt;addStretch(1);
    buttonsLayout-&amp;gt;addWidget(&amp;amp;okButton);
    buttonsLayout-&amp;gt;addSpacing(10);
    buttonsLayout-&amp;gt;addWidget(&amp;amp;cancelButton);

    QVBoxLayout *dialogLayout = new QVBoxLayout(&amp;amp;addDialog);
    dialogLayout-&amp;gt;addWidget(&amp;amp;group);
    dialogLayout-&amp;gt;addStretch(1);
    dialogLayout-&amp;gt;addItem(buttonsLayout);

    QHBoxLayout *cell1Layout = new QHBoxLayout;
    cell1Layout-&amp;gt;addWidget(&amp;amp;cell1Label);
    cell1Layout-&amp;gt;addSpacing(10);
    cell1Layout-&amp;gt;addWidget(&amp;amp;cell1ColInput);
    cell1Layout-&amp;gt;addSpacing(10);
    cell1Layout-&amp;gt;addWidget(&amp;amp;cell1RowInput);

    QHBoxLayout *cell2Layout = new QHBoxLayout;
    cell2Layout-&amp;gt;addWidget(&amp;amp;cell2Label);
    cell2Layout-&amp;gt;addSpacing(10);
    cell2Layout-&amp;gt;addWidget(&amp;amp;cell2ColInput);
    cell2Layout-&amp;gt;addSpacing(10);
    cell2Layout-&amp;gt;addWidget(&amp;amp;cell2RowInput);

    QHBoxLayout *outLayout = new QHBoxLayout;
    outLayout-&amp;gt;addWidget(&amp;amp;outLabel);
    outLayout-&amp;gt;addSpacing(10);
    outLayout-&amp;gt;addWidget(&amp;amp;outColInput);
    outLayout-&amp;gt;addSpacing(10);
    outLayout-&amp;gt;addWidget(&amp;amp;outRowInput);

    QVBoxLayout *vLayout = new QVBoxLayout(&amp;amp;group);
    vLayout-&amp;gt;addItem(cell1Layout);
    vLayout-&amp;gt;addWidget(&amp;amp;operatorLabel);
    vLayout-&amp;gt;addItem(cell2Layout);
    vLayout-&amp;gt;addWidget(&amp;amp;equalsLabel);
    vLayout-&amp;gt;addStretch(1);
    vLayout-&amp;gt;addItem(outLayout);

    if (addDialog.exec()) {
        *cell1 = cell1ColInput.currentText() + cell1RowInput.currentText();
        *cell2 = cell2ColInput.currentText() + cell2RowInput.currentText();
        *outCell = outColInput.currentText() + outRowInput.currentText();
        return true;
    }

    return false;
}

void SpreadSheet::actionSum()
{
    int row_first = 0;
    int row_last = 0;
    int row_cur = 0;

    int col_first = 0;
    int col_last = 0;
    int col_cur = 0;

    QList&amp;lt;QTableWidgetItem*&amp;gt; selected = table-&amp;gt;selectedItems();

    if (!selected.isEmpty()) {
        QTableWidgetItem *first = selected.first();
        QTableWidgetItem *last = selected.last();
        row_first = table-&amp;gt;row(first);
        row_last = table-&amp;gt;row(last);
        col_first = table-&amp;gt;column(first);
        col_last = table-&amp;gt;column(last);
    }

    QTableWidgetItem *current = table-&amp;gt;currentItem();

    if (current) {
        row_cur = table-&amp;gt;row(current);
        col_cur = table-&amp;gt;column(current);
    }

    QString cell1 = encode_pos(row_first, col_first);
    QString cell2 = encode_pos(row_last, col_last);
    QString out = encode_pos(row_cur, col_cur);

    if (runInputDialog(tr(&quot;Sum cells&quot;), tr(&quot;First cell:&quot;), tr(&quot;Last cell:&quot;),
                       QString(&quot;%1&quot;).arg(QChar(0x03a3)), tr(&quot;Output to:&quot;),
                       &amp;amp;cell1, &amp;amp;cell2, &amp;amp;out)) {
        int row;
        int col;
        decode_pos(out, &amp;amp;row, &amp;amp;col);
        table-&amp;gt;item(row, col)-&amp;gt;setText(tr(&quot;sum %1 %2&quot;).arg(cell1, cell2));
    }
}

void SpreadSheet::actionMath_helper(const QString &amp;amp;title, const QString &amp;amp;op)
{
    QString cell1 = &quot;C1&quot;;
    QString cell2 = &quot;C2&quot;;
    QString out = &quot;C3&quot;;

    QTableWidgetItem *current = table-&amp;gt;currentItem();
    if (current)
        out = encode_pos(table-&amp;gt;currentRow(), table-&amp;gt;currentColumn());

    if (runInputDialog(title, tr(&quot;Cell 1&quot;), tr(&quot;Cell 2&quot;), op, tr(&quot;Output to:&quot;),
                       &amp;amp;cell1, &amp;amp;cell2, &amp;amp;out)) {
        int row, col;
        decode_pos(out, &amp;amp;row, &amp;amp;col);
        table-&amp;gt;item(row, col)-&amp;gt;setText(tr(&quot;%1 %2 %3&quot;).arg(op, cell1, cell2));
    }
}

void SpreadSheet::actionAdd()
{
    actionMath_helper(tr(&quot;Addition&quot;), &quot;+&quot;);
}

void SpreadSheet::actionSubtract()
{
    actionMath_helper(tr(&quot;Subtraction&quot;), &quot;-&quot;);
}

void SpreadSheet::actionMultiply()
{
    actionMath_helper(tr(&quot;Multiplication&quot;), &quot;*&quot;);
}
void SpreadSheet::actionDivide()
{
    actionMath_helper(tr(&quot;Division&quot;), &quot;/&quot;);
}

void SpreadSheet::clear()
{
    foreach (QTableWidgetItem *i, table-&amp;gt;selectedItems())
        i-&amp;gt;setText(&quot;&quot;);
}

void SpreadSheet::setupContextMenu()
{
    addAction(cell_addAction);
    addAction(cell_subAction);
    addAction(cell_mulAction);
    addAction(cell_divAction);
    addAction(cell_sumAction);
    addAction(firstSeparator);
    addAction(colorAction);
    addAction(fontAction);
    addAction(secondSeparator);
    addAction(clearAction);
    setContextMenuPolicy(Qt::ActionsContextMenu);
}

void SpreadSheet::setupContents()
{
    QColor titleBackground(Qt::lightGray);
    QFont titleFont = table-&amp;gt;font();
    titleFont.setBold(true);

    // column 0
    table-&amp;gt;setItem(0, 0, new SpreadSheetItem(&quot;Item&quot;));
    table-&amp;gt;item(0, 0)-&amp;gt;setBackgroundColor(titleBackground);
    table-&amp;gt;item(0, 0)-&amp;gt;setToolTip(&quot;This column shows the purchased item/service&quot;);
    table-&amp;gt;item(0, 0)-&amp;gt;setFont(titleFont);

    table-&amp;gt;setItem(1, 0, new SpreadSheetItem(&quot;AirportBus&quot;));
    table-&amp;gt;setItem(2, 0, new SpreadSheetItem(&quot;Flight (Munich)&quot;));
    table-&amp;gt;setItem(3, 0, new SpreadSheetItem(&quot;Lunch&quot;));
    table-&amp;gt;setItem(4, 0, new SpreadSheetItem(&quot;Flight (LA)&quot;));
    table-&amp;gt;setItem(5, 0, new SpreadSheetItem(&quot;Taxi&quot;));
    table-&amp;gt;setItem(6, 0, new SpreadSheetItem(&quot;Dinner&quot;));
    table-&amp;gt;setItem(7, 0, new SpreadSheetItem(&quot;Hotel&quot;));
    table-&amp;gt;setItem(8, 0, new SpreadSheetItem(&quot;Flight (Oslo)&quot;));
    table-&amp;gt;setItem(9, 0, new SpreadSheetItem(&quot;Total:&quot;));

    table-&amp;gt;item(9, 0)-&amp;gt;setFont(titleFont);
    table-&amp;gt;item(9, 0)-&amp;gt;setBackgroundColor(Qt::lightGray);

    // column 1
    table-&amp;gt;setItem(0, 1, new SpreadSheetItem(&quot;Date&quot;));
    table-&amp;gt;item(0, 1)-&amp;gt;setBackgroundColor(titleBackground);
    table-&amp;gt;item(0, 1)-&amp;gt;setToolTip(&quot;This column shows the purchase date, double click to change&quot;);
    table-&amp;gt;item(0, 1)-&amp;gt;setFont(titleFont);

    table-&amp;gt;setItem(1, 1, new SpreadSheetItem(&quot;15/6/2006&quot;));
    table-&amp;gt;setItem(2, 1, new SpreadSheetItem(&quot;15/6/2006&quot;));
    table-&amp;gt;setItem(3, 1, new SpreadSheetItem(&quot;15/6/2006&quot;));
    table-&amp;gt;setItem(4, 1, new SpreadSheetItem(&quot;21/5/2006&quot;));
    table-&amp;gt;setItem(5, 1, new SpreadSheetItem(&quot;16/6/2006&quot;));
    table-&amp;gt;setItem(6, 1, new SpreadSheetItem(&quot;16/6/2006&quot;));
    table-&amp;gt;setItem(7, 1, new SpreadSheetItem(&quot;16/6/2006&quot;));
    table-&amp;gt;setItem(8, 1, new SpreadSheetItem(&quot;18/6/2006&quot;));

    table-&amp;gt;setItem(9, 1, new SpreadSheetItem());
    table-&amp;gt;item(9, 1)-&amp;gt;setBackgroundColor(Qt::lightGray);

    // column 2
    table-&amp;gt;setItem(0, 2, new SpreadSheetItem(&quot;Price&quot;));
    table-&amp;gt;item(0, 2)-&amp;gt;setBackgroundColor(titleBackground);
    table-&amp;gt;item(0, 2)-&amp;gt;setToolTip(&quot;This column shows the price of the purchase&quot;);
    table-&amp;gt;item(0, 2)-&amp;gt;setFont(titleFont);

    table-&amp;gt;setItem(1, 2, new SpreadSheetItem(&quot;150&quot;));
    table-&amp;gt;setItem(2, 2, new SpreadSheetItem(&quot;2350&quot;));
    table-&amp;gt;setItem(3, 2, new SpreadSheetItem(&quot;-14&quot;));
    table-&amp;gt;setItem(4, 2, new SpreadSheetItem(&quot;980&quot;));
    table-&amp;gt;setItem(5, 2, new SpreadSheetItem(&quot;5&quot;));
    table-&amp;gt;setItem(6, 2, new SpreadSheetItem(&quot;120&quot;));
    table-&amp;gt;setItem(7, 2, new SpreadSheetItem(&quot;300&quot;));
    table-&amp;gt;setItem(8, 2, new SpreadSheetItem(&quot;1240&quot;));

    table-&amp;gt;setItem(9, 2, new SpreadSheetItem());
    table-&amp;gt;item(9, 2)-&amp;gt;setBackgroundColor(Qt::lightGray);

    // column 3
    table-&amp;gt;setItem(0, 3, new SpreadSheetItem(&quot;Currency&quot;));
    table-&amp;gt;item(0, 3)-&amp;gt;setBackgroundColor(titleBackground);
    table-&amp;gt;item(0, 3)-&amp;gt;setToolTip(&quot;This column shows the currency&quot;);
    table-&amp;gt;item(0, 3)-&amp;gt;setFont(titleFont);

    table-&amp;gt;setItem(1, 3, new SpreadSheetItem(&quot;NOK&quot;));
    table-&amp;gt;setItem(2, 3, new SpreadSheetItem(&quot;NOK&quot;));
    table-&amp;gt;setItem(3, 3, new SpreadSheetItem(&quot;EUR&quot;));
    table-&amp;gt;setItem(4, 3, new SpreadSheetItem(&quot;EUR&quot;));
    table-&amp;gt;setItem(5, 3, new SpreadSheetItem(&quot;USD&quot;));
    table-&amp;gt;setItem(6, 3, new SpreadSheetItem(&quot;USD&quot;));
    table-&amp;gt;setItem(7, 3, new SpreadSheetItem(&quot;USD&quot;));
    table-&amp;gt;setItem(8, 3, new SpreadSheetItem(&quot;USD&quot;));

    table-&amp;gt;setItem(9, 3, new SpreadSheetItem());
    table-&amp;gt;item(9,3)-&amp;gt;setBackgroundColor(Qt::lightGray);

    // column 4
    table-&amp;gt;setItem(0, 4, new SpreadSheetItem(&quot;Ex. Rate&quot;));
    table-&amp;gt;item(0, 4)-&amp;gt;setBackgroundColor(titleBackground);
    table-&amp;gt;item(0, 4)-&amp;gt;setToolTip(&quot;This column shows the exchange rate to NOK&quot;);
    table-&amp;gt;item(0, 4)-&amp;gt;setFont(titleFont);

    table-&amp;gt;setItem(1, 4, new SpreadSheetItem(&quot;1&quot;));
    table-&amp;gt;setItem(2, 4, new SpreadSheetItem(&quot;1&quot;));
    table-&amp;gt;setItem(3, 4, new SpreadSheetItem(&quot;8&quot;));
    table-&amp;gt;setItem(4, 4, new SpreadSheetItem(&quot;8&quot;));
    table-&amp;gt;setItem(5, 4, new SpreadSheetItem(&quot;7&quot;));
    table-&amp;gt;setItem(6, 4, new SpreadSheetItem(&quot;7&quot;));
    table-&amp;gt;setItem(7, 4, new SpreadSheetItem(&quot;7&quot;));
    table-&amp;gt;setItem(8, 4, new SpreadSheetItem(&quot;7&quot;));

    table-&amp;gt;setItem(9, 4, new SpreadSheetItem());
    table-&amp;gt;item(9,4)-&amp;gt;setBackgroundColor(Qt::lightGray);

    // column 5
    table-&amp;gt;setItem(0, 5, new SpreadSheetItem(&quot;NOK&quot;));
    table-&amp;gt;item(0, 5)-&amp;gt;setBackgroundColor(titleBackground);
    table-&amp;gt;item(0, 5)-&amp;gt;setToolTip(&quot;This column shows the expenses in NOK&quot;);
    table-&amp;gt;item(0, 5)-&amp;gt;setFont(titleFont);

    table-&amp;gt;setItem(1, 5, new SpreadSheetItem(&quot;* C2 E2&quot;));
    table-&amp;gt;setItem(2, 5, new SpreadSheetItem(&quot;* C3 E3&quot;));
    table-&amp;gt;setItem(3, 5, new SpreadSheetItem(&quot;* C4 E4&quot;));
    table-&amp;gt;setItem(4, 5, new SpreadSheetItem(&quot;* C5 E5&quot;));
    table-&amp;gt;setItem(5, 5, new SpreadSheetItem(&quot;* C6 E6&quot;));
    table-&amp;gt;setItem(6, 5, new SpreadSheetItem(&quot;* C7 E7&quot;));
    table-&amp;gt;setItem(7, 5, new SpreadSheetItem(&quot;* C8 E8&quot;));
    table-&amp;gt;setItem(8, 5, new SpreadSheetItem(&quot;* C9 E9&quot;));

    table-&amp;gt;setItem(9, 5, new SpreadSheetItem(&quot;sum F2 F9&quot;));
    table-&amp;gt;item(9,5)-&amp;gt;setBackgroundColor(Qt::lightGray);
}

const char *htmlText =
&quot;&amp;lt;HTML&amp;gt;&quot;
&quot;&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;This demo shows use of &amp;lt;c&amp;gt;QTableWidget&amp;lt;/c&amp;gt; with custom handling for&quot;
&quot; individual cells.&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;&quot;
&quot;&amp;lt;p&amp;gt;Using a customized table item we make it possible to have dynamic&quot;
&quot; output in different cells. The content that is implemented for this&quot;
&quot; particular demo is:&quot;
&quot;&amp;lt;ul&amp;gt;&quot;
&quot;&amp;lt;li&amp;gt;Adding two cells.&amp;lt;/li&amp;gt;&quot;
&quot;&amp;lt;li&amp;gt;Subtracting one cell from another.&amp;lt;/li&amp;gt;&quot;
&quot;&amp;lt;li&amp;gt;Multiplying two cells.&amp;lt;/li&amp;gt;&quot;
&quot;&amp;lt;li&amp;gt;Dividing one cell with another.&amp;lt;/li&amp;gt;&quot;
&quot;&amp;lt;li&amp;gt;Summing the contents of an arbitrary number of cells.&amp;lt;/li&amp;gt;&quot;
&quot;&amp;lt;/HTML&amp;gt;&quot;;

void SpreadSheet::showAbout()
{
    QMessageBox::about(this, &quot;About Spreadsheet&quot;, htmlText);
}

void decode_pos(const QString &amp;amp;pos, int *row, int *col)
{
    if (pos.isEmpty()) {
        *col = -1;
        *row = -1;
    } else {
        *col = pos.at(0).toLatin1() - 'A';
        *row = pos.right(pos.size() - 1).toInt() - 1;
    }
}

QString encode_pos(int row, int col)
{
    return QString(col + 'A') + QString::number(row + 1);
}

void SpreadSheet::print()
{
#if QT_CONFIG(printpreviewdialog)
    QPrinter printer(QPrinter::ScreenResolution);
    QPrintPreviewDialog dlg(&amp;amp;printer);
    PrintView view;
    view.setModel(table-&amp;gt;model());
    connect(&amp;amp;dlg, &amp;amp;QPrintPreviewDialog::paintRequested, &amp;amp;view, &amp;amp;PrintView::print);
    dlg.exec();
#endif
}

</db:programlisting>
</db:article>
