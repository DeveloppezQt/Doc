<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Scene Graph - Custom Material</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to implement a custom material in the Qt Quick Scene Graph.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The custom material example shows how to implement an item that is rendered using a material with a custom vertex and fragment shader.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/custom-material-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="shader-and-material">
<db:title>Shader and material</db:title>
<db:para>The main functionality is in the fragment shader</db:para>
<db:programlisting language="cpp">#version 440

layout(location = 0) in vec2 vTexCoord;

layout(location = 0) out vec4 fragColor;

// uniform block: 84 bytes
layout(std140, binding = 0) uniform buf {
    mat4 qt_Matrix; // offset 0
    float qt_Opacity; // offset 64
    float zoom; // offset 68
    vec2 center; // offset 72
    int limit; // offset 80
} ubuf;

void main()
{
    vec4 color1 = vec4(1.0, 0.85, 0.55, 1);
    vec4 color2 = vec4(0.226, 0.0, 0.615, 1);

    float aspect_ratio = -ubuf.qt_Matrix[0][0]/ubuf.qt_Matrix[1][1];
    vec2 z, c;

    c.x = (vTexCoord.x - 0.5) / ubuf.zoom + ubuf.center.x;
    c.y = aspect_ratio * (vTexCoord.y - 0.5) / ubuf.zoom + ubuf.center.y;

    int i;
    z = c;
    for (i = 0; i &amp;lt; ubuf.limit; i++) {
        float x = (z.x * z.x - z.y * z.y) + c.x;
        float y = (z.y * z.x + z.x * z.y) + c.y;

        if ((x * x + y * y) &amp;gt; 4.0) break;
        z.x = x;
        z.y = y;
    }

    if (i == ubuf.limit) {
        fragColor = vec4(0.0, 0.0, 0.0, 1.0);
    } else {
        float f = (i * 1.0) / ubuf.limit;
        fragColor = mix(color1, color2, sqrt(f));
    }
}
</db:programlisting>
<db:para>The fragment and vertex shaders are combined into a <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link> subclass.</db:para>
<db:programlisting language="cpp">class CustomShader : public QSGMaterialShader
{
public:
    CustomShader()
    {
        setShaderFileName(VertexStage, QLatin1String(&quot;:/scenegraph/custommaterial/shaders/mandelbrot.vert.qsb&quot;));
        setShaderFileName(FragmentStage, QLatin1String(&quot;:/scenegraph/custommaterial/shaders/mandelbrot.frag.qsb&quot;));
    }
    bool updateUniformData(RenderState &amp;amp;state,
                           QSGMaterial *newMaterial, QSGMaterial *oldMaterial) override;
};
</db:programlisting>
<db:para>A <db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link> subclass encapsulates the shader together with the render state. In this example, we add state information corresponding to the shader uniforms. The material is responsible for creating the shader by reimplementing <db:link xlink:href="qsgmaterial.xml#createShader">QSGMaterial::createShader</db:link>().</db:para>
<db:programlisting language="cpp">class CustomMaterial : public QSGMaterial
{
public:
    CustomMaterial();
    QSGMaterialType *type() const override;
    int compare(const QSGMaterial *other) const override;

    QSGMaterialShader *createShader(QSGRendererInterface::RenderMode) const override
    {
        return new CustomShader;
    }

    struct {
        float center[2];
        float zoom;
        int limit;
        bool dirty;
    } uniforms;
};
</db:programlisting>
<db:para>To update the uniform data, we reimplement <db:link xlink:href="qsgmaterialshader.xml#updateUniformData">QSGMaterialShader::updateUniformData</db:link>().</db:para>
<db:programlisting language="cpp">bool CustomShader::updateUniformData(RenderState &amp;amp;state, QSGMaterial *newMaterial, QSGMaterial *oldMaterial)
{
    bool changed = false;
    QByteArray *buf = state.uniformData();
    Q_ASSERT(buf-&amp;gt;size() &amp;gt;= 84);

    if (state.isMatrixDirty()) {
        const QMatrix4x4 m = state.combinedMatrix();
        memcpy(buf-&amp;gt;data(), m.constData(), 64);
        changed = true;
    }

    if (state.isOpacityDirty()) {
        const float opacity = state.opacity();
        memcpy(buf-&amp;gt;data() + 64, &amp;amp;opacity, 4);
        changed = true;
    }

    auto *customMaterial = static_cast&amp;lt;CustomMaterial *&amp;gt;(newMaterial);
    if (oldMaterial != newMaterial || customMaterial-&amp;gt;uniforms.dirty) {
        memcpy(buf-&amp;gt;data() + 68, &amp;amp;customMaterial-&amp;gt;uniforms.zoom, 4);
        memcpy(buf-&amp;gt;data() + 72, &amp;amp;customMaterial-&amp;gt;uniforms.center, 8);
        memcpy(buf-&amp;gt;data() + 80, &amp;amp;customMaterial-&amp;gt;uniforms.limit, 4);
        customMaterial-&amp;gt;uniforms.dirty = false;
        changed = true;
    }
    return changed;
}
</db:programlisting>
</db:section>
<db:section xml:id="item-and-node">
<db:title>Item and node</db:title>
<db:para>We create a custom item to show off our new material:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QQuickItem&amp;gt;

class CustomItem : public QQuickItem
{
    Q_OBJECT
    Q_PROPERTY(qreal zoom READ zoom WRITE setZoom NOTIFY zoomChanged)
    Q_PROPERTY(int iterationLimit READ iterationLimit WRITE setIterationLimit NOTIFY iterationLimitChanged)
    Q_PROPERTY(QPointF center READ center WRITE setCenter NOTIFY centerChanged)
    QML_ELEMENT

public:
    explicit CustomItem(QQuickItem *parent = 0);

    qreal zoom() const
    {
        return m_zoom;
    }

    int iterationLimit() const
    {
        return m_limit;
    }

    QPointF center() const
    {
        return m_center;
    }

public slots:
    void setZoom(qreal zoom);

    void setIterationLimit(int iterationLimit);

    void setCenter(QPointF center);

signals:
    void zoomChanged(qreal zoom);

    void iterationLimitChanged(int iterationLimit);

    void centerChanged(QPointF center);

protected:
    QSGNode *updatePaintNode(QSGNode *, UpdatePaintNodeData *) override;
    void geometryChange(const QRectF &amp;amp;newGeometry, const QRectF &amp;amp;oldGeometry) override;

private:
    bool m_geometryChanged = true;
    qreal m_zoom;
    bool m_zoomChanged = true;
    int m_limit;
    bool m_limitChanged = true;
    QPointF m_center;
    bool m_centerChanged = true;
};
</db:programlisting>
<db:para>The CustomItem declaration adds three properties corresponding to the uniforms that we want to expose to QML.</db:para>
<db:programlisting language="cpp">    Q_PROPERTY(qreal zoom READ zoom WRITE setZoom NOTIFY zoomChanged)
    Q_PROPERTY(int iterationLimit READ iterationLimit WRITE setIterationLimit NOTIFY iterationLimitChanged)
    Q_PROPERTY(QPointF center READ center WRITE setCenter NOTIFY centerChanged)
</db:programlisting>
<db:para>As with every custom Qt Quick item, the implementation is split in two: in addition to <db:code>CustomItem</db:code>, which lives in the GUI thread, we create a <db:link xlink:href="qsgnode.xml">QSGNode</db:link> subclass that lives in the render thread.</db:para>
<db:programlisting language="cpp">class CustomNode : public QSGGeometryNode
{
public:
    CustomNode()
    {
        auto *m = new CustomMaterial;
        setMaterial(m);
        setFlag(OwnsMaterial, true);

        QSGGeometry *g = new QSGGeometry(QSGGeometry::defaultAttributes_TexturedPoint2D(), 4);
        QSGGeometry::updateTexturedRectGeometry(g, QRect(), QRect());
        setGeometry(g);
        setFlag(OwnsGeometry, true);
    }

    void setRect(const QRectF &amp;amp;bounds)
    {
        QSGGeometry::updateTexturedRectGeometry(geometry(), bounds, QRectF(0, 0, 1, 1));
        markDirty(QSGNode::DirtyGeometry);
    }

    void setZoom(qreal zoom)
    {
        auto *m = static_cast&amp;lt;CustomMaterial *&amp;gt;(material());
        m-&amp;gt;uniforms.zoom = zoom;
        m-&amp;gt;uniforms.dirty = true;
        markDirty(DirtyMaterial);
    }

    void setLimit(int limit)
    {
        auto *m = static_cast&amp;lt;CustomMaterial *&amp;gt;(material());
        m-&amp;gt;uniforms.limit = limit;
        m-&amp;gt;uniforms.dirty = true;
        markDirty(DirtyMaterial);
    }

    void setCenter(const QPointF &amp;amp;center)
    {
        auto *m = static_cast&amp;lt;CustomMaterial *&amp;gt;(material());
        m-&amp;gt;uniforms.center[0] = center.x();
        m-&amp;gt;uniforms.center[1] = center.y();
        m-&amp;gt;uniforms.dirty = true;
        markDirty(DirtyMaterial);
    }
};
</db:programlisting>
<db:para>The node owns an instance of the material, and has logic to update the material's state. The item maintains the corresponding QML properties. It needs to duplicate the information from the material since the item and material live on different threads.</db:para>
<db:programlisting language="cpp">void CustomItem::setZoom(qreal zoom)
{
    if (qFuzzyCompare(m_zoom, zoom))
        return;

    m_zoom = zoom;
    m_zoomChanged = true;
    emit zoomChanged(m_zoom);
    update();
}

void CustomItem::setIterationLimit(int limit)
{
    if (m_limit == limit)
        return;

    m_limit = limit;
    m_limitChanged = true;
    emit iterationLimitChanged(m_limit);
    update();
}

void CustomItem::setCenter(QPointF center)
{
    if (m_center == center)
        return;

    m_center = center;
    m_centerChanged = true;
    emit centerChanged(m_center);
    update();
}
</db:programlisting>
<db:para>The information is copied from the item to the scene graph in a reimplementation of <db:link xlink:href="qquickitem.xml#updatePaintNode">QQuickItem::updatePaintNode</db:link>(). The two threads are at a synchronization point when the function is called, so it is safe to access both classes.</db:para>
<db:programlisting language="cpp">QSGNode *CustomItem::updatePaintNode(QSGNode *old, UpdatePaintNodeData *)
{
    auto *node = static_cast&amp;lt;CustomNode *&amp;gt;(old);

    if (!node)
        node = new CustomNode;

    if (m_geometryChanged)
        node-&amp;gt;setRect(boundingRect());
    m_geometryChanged = false;

    if (m_zoomChanged)
        node-&amp;gt;setZoom(m_zoom);
    m_zoomChanged = false;

    if (m_limitChanged)
        node-&amp;gt;setLimit(m_limit);
    m_limitChanged = false;

    if (m_centerChanged)
        node-&amp;gt;setCenter(m_center);
    m_centerChanged = false;

    return node;
}
</db:programlisting>
</db:section>
<db:section xml:id="the-rest-of-the-example">
<db:title>The rest of the example</db:title>
<db:para>The application is a straightforward QML application, with a <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> and a <db:link xlink:href="qquickview.xml">QQuickView</db:link> that we pass a .qml file.</db:para>
<db:para>In the QML file, we create the customitem which we anchor to fill the root.</db:para>
<db:programlisting language="qml">    CustomItem {
        property real t: 1
        anchors.fill: parent
        center: Qt.point(-0.748, 0.1);
        iterationLimit: 3 * (zoom + 30)
        zoom: t * t / 10
        NumberAnimation on t {
            from: 1
            to: 60
            duration: 30*1000;
            running: true
            loops: Animation.Infinite
        }
    }
</db:programlisting>
<db:para>To make the example a bit more interesting we add an animation to change the zoom level and iteration limit. The center stays constant.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/scenegraph/custommaterial?h=6.1">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
