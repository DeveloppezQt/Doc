<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt SCXML Examples</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SCXML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Examples for the Qt SCXML module.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="details"/>
<db:para>The Qt SCXML example applications demonstrate the functionality provided by the <db:link xlink:href="qtscxml-index.xml">Qt SCXML</db:link> module.</db:para>
<db:para>There are multiple versions of the <db:emphasis>Invoke</db:emphasis>, <db:emphasis>Media Player</db:emphasis>, and <db:emphasis>Traffic Light</db:emphasis> example applications. Each application has some common files that are stored in a common folder, in addition to the files stored in the example version folder.</db:para>
<db:para>All versions of an example application have the same appearance and functionality. They demonstrate the different options for creating user interfaces (using <db:link xlink:href="qtwidgets-index.xml">Qt Widgets</db:link> or <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link>) and for loading the SCXML dynamically versus first compiling it to a C++ class (the <db:emphasis>static</db:emphasis> versions).</db:para>
<db:para>In addition, the Media Player example versions demonstrate how to access the C++ and ECMAScript data models.</db:para>
<db:variablelist role="members">
<db:varlistentry>
<db:term><db:link xlink:href="qtscxml-calculator-widgets-example.xml" xlink:role="page">Qt SCXML Calculator Example</db:link></db:term>
<db:listitem>
<db:para>A widget-based application that implements the Calculator example presented in the SCXML Specification.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtscxml-calculator-qml-example.xml" xlink:role="page">Qt SCXML Calculator QML Example</db:link></db:term>
<db:listitem>
<db:para>A Qt Quick application that implements the Calculator example presented in the SCXML Specification.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtscxml-ftpclient-example.xml" xlink:role="page">Qt SCXML FTP Client Example</db:link></db:term>
<db:listitem>
<db:para>Implements a simple FTP client using a state machine.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtscxml-invoke-dynamic-example.xml" xlink:role="page">Qt SCXML Invoke Example (Dynamic)</db:link></db:term>
<db:listitem>
<db:para>Invokes a dynamically loaded nested state machine.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtscxml-invoke-static-example.xml" xlink:role="page">Qt SCXML Invoke Example (Static)</db:link></db:term>
<db:listitem>
<db:para>Invokes a compiled nested state machine.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtscxml-mediaplayer-widgets-dynamic-example.xml" xlink:role="page">Qt SCXML Media Player Example (Dynamic)</db:link></db:term>
<db:listitem>
<db:para>A widget-based application that sends data to and receives it from a dynamically loaded ECMAScript data model.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtscxml-mediaplayer-widgets-static-example.xml" xlink:role="page">Qt SCXML Media Player Example (Static)</db:link></db:term>
<db:listitem>
<db:para>A widget-based application that sends data to and receives it from a compiled ECMAScript data model.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtscxml-mediaplayer-qml-cppdatamodel-example.xml" xlink:role="page">Qt SCXML Media Player QML Example (C++ Data Model)</db:link></db:term>
<db:listitem>
<db:para>Sends data to and receives it from a C++ data model.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtscxml-mediaplayer-qml-dynamic-example.xml" xlink:role="page">Qt SCXML Media Player QML Example (Dynamic)</db:link></db:term>
<db:listitem>
<db:para>A Qt Quick application that sends data to and receives it from a dynamically loaded ECMAScript data model.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtscxml-mediaplayer-qml-static-example.xml" xlink:role="page">Qt SCXML Media Player QML Example (Static)</db:link></db:term>
<db:listitem>
<db:para>A Qt Quick application that sends data to and receives it from a compiled ECMAScript data model.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtscxml-pinball-example.xml" xlink:role="page">Qt SCXML Pinball Example</db:link></db:term>
<db:listitem>
<db:para>Encapsulates the internal logic of an application in an SCXML file.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtscxml-sudoku-example.xml" xlink:role="page">Qt SCXML Sudoku Example</db:link></db:term>
<db:listitem>
<db:para>Presents the use of SCXML in a sudoku game.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtscxml-trafficlight-widgets-dynamic-example.xml" xlink:role="page">Qt SCXML Traffic Light Example (Dynamic)</db:link></db:term>
<db:listitem>
<db:para>A widget-based application that uses a dynamically loaded state machine to implement a traffic light.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtscxml-trafficlight-widgets-static-example.xml" xlink:role="page">Qt SCXML Traffic Light Example (Static)</db:link></db:term>
<db:listitem>
<db:para>A widget-based application that uses a compiled state machine to implement a traffic light.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtscxml-trafficlight-qml-dynamic-example.xml" xlink:role="page">Qt SCXML Traffic Light QML Example (Dynamic)</db:link></db:term>
<db:listitem>
<db:para>A Qt Quick application that uses a dynamically loaded state machine to implement a traffic light.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtscxml-trafficlight-qml-simple-example.xml" xlink:role="page">Qt SCXML Traffic Light QML Example (Simple)</db:link></db:term>
<db:listitem>
<db:para>A Qt Quick application that uses a compiled state machine to implement a simplified traffic light.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtscxml-trafficlight-qml-static-example.xml" xlink:role="page">Qt SCXML Traffic Light QML Example (Static)</db:link></db:term>
<db:listitem>
<db:para>A Qt Quick application that uses a compiled state machine to implement a traffic light.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:article>
