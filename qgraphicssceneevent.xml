<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGraphicsSceneEvent Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicssceneevent.xml">QGraphicsSceneEvent</db:link> class provides a base class for all graphics view related events.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsSceneEvent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qevent.xml" xlink:role="class">QEvent</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsscenecontextmenuevent.xml" xlink:role="class">QGraphicsSceneContextMenuEvent</db:link>, <db:link xlink:href="qgraphicsscenedragdropevent.xml" xlink:role="class">QGraphicsSceneDragDropEvent</db:link>, <db:link xlink:href="qgraphicsscenehelpevent.xml" xlink:role="class">QGraphicsSceneHelpEvent</db:link>, <db:link xlink:href="qgraphicsscenehoverevent.xml" xlink:role="class">QGraphicsSceneHoverEvent</db:link>, <db:link xlink:href="qgraphicsscenemouseevent.xml" xlink:role="class">QGraphicsSceneMouseEvent</db:link>, <db:link xlink:href="qgraphicsscenemoveevent.xml" xlink:role="class">QGraphicsSceneMoveEvent</db:link>, <db:link xlink:href="qgraphicssceneresizeevent.xml" xlink:role="class">QGraphicsSceneResizeEvent</db:link>, and <db:link xlink:href="qgraphicsscenewheelevent.xml" xlink:role="class">QGraphicsSceneWheelEvent</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsSceneEvent is part of <db:simplelist><db:member>graphicsview-api</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>When a <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> receives Qt mouse, keyboard, and drag and drop events (<db:link xlink:href="qmouseevent.xml">QMouseEvent</db:link>, <db:link xlink:href="qkeyevent.xml">QKeyEvent</db:link>, QDragEvent, etc.), it translates them into instances of <db:link xlink:href="qgraphicssceneevent.xml">QGraphicsSceneEvent</db:link> subclasses and forwards them to the <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> it displays. The scene then forwards the events to the relevant items.</db:para>
<db:para>For example, when a <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> receives a <db:link xlink:href="qmouseevent.xml">QMouseEvent</db:link> of type MousePress as a response to a user click, the view sends a <db:link xlink:href="qgraphicsscenemouseevent.xml">QGraphicsSceneMouseEvent</db:link> of type GraphicsSceneMousePress to the underlying <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> through its <db:link xlink:href="qgraphicsscene.xml#mousePressEvent">mousePressEvent</db:link>() function. The default <db:link xlink:href="qgraphicsscene.xml#mousePressEvent">QGraphicsScene::mousePressEvent</db:link>() implementation determines which item was clicked and forwards the event to <db:link xlink:href="qgraphicsitem.xml#mousePressEvent">QGraphicsItem::mousePressEvent</db:link>().</db:para>
<db:para>Subclasses such as <db:link xlink:href="qgraphicsscenemouseevent.xml">QGraphicsSceneMouseEvent</db:link> and <db:link xlink:href="qgraphicsscenecontextmenuevent.xml">QGraphicsSceneContextMenuEvent</db:link> provide the coordinates from the original <db:link xlink:href="qevent.xml">QEvent</db:link> in screen, scene, and item coordinates (see <db:link xlink:href="qgraphicsscenemouseevent.xml#screenPos">screenPos</db:link>(), <db:link xlink:href="qgraphicsscenemouseevent.xml#scenePos">scenePos</db:link>(), and <db:link xlink:href="qgraphicsscenemouseevent.xml#pos">pos</db:link>()). The item coordinates are set by the <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> before it forwards the event to the event to a <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>. The mouse events also add the possibility to retrieve the coordinates from the last event received by the view (see <db:link xlink:href="qgraphicsscenemouseevent.xml#lastScreenPos">lastScreenPos</db:link>(), <db:link xlink:href="qgraphicsscenemouseevent.xml#lastScenePos">lastScenePos</db:link>(), and <db:link xlink:href="qgraphicsscenemouseevent.xml#lastPos">lastPos</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qevent.xml">QEvent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QGraphicsSceneEvent">
<db:title>[virtual] QGraphicsSceneEvent::~QGraphicsSceneEvent()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QGraphicsSceneEvent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGraphicsSceneEvent()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the event.</db:para>
</db:section>
<db:section xml:id="timestamp">
<db:title>[since 6.2] quint64 QGraphicsSceneEvent::timestamp() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>quint64</db:type>
<db:methodname>timestamp</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">quint64 timestamp() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the timestamp of the original event, or 0 if the original event does not report a time stamp.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="widget">
<db:title>QWidget *QGraphicsSceneEvent::widget() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>widget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * widget() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the widget where the event originated, or <db:code>nullptr</db:code> if the event originates from another application.</db:para>
</db:section>
</db:section>
</db:article>
