<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQmlPropertyMap Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqmlpropertymap.xml">QQmlPropertyMap</db:link> class allows you to set key-value pairs that can be used in QML bindings.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlPropertyMap</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtlocation-extendedattributes.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qqmlpropertymap.xml">QQmlPropertyMap</db:link> provides a convenient way to expose domain data to the UI layer. The following example shows how you might declare data in C++ and then access it in QML.</db:para>
<db:para>In the C++ file:</db:para>
<db:programlisting language="cpp">// create our data
QQmlPropertyMap ownerData;
ownerData.insert(&quot;name&quot;, QVariant(QString(&quot;John Smith&quot;)));
ownerData.insert(&quot;phone&quot;, QVariant(QString(&quot;555-5555&quot;)));

// expose it to the UI layer
QQuickView view;
QQmlContext *ctxt = view.rootContext();
ctxt-&amp;gt;setContextProperty(&quot;owner&quot;, &amp;amp;ownerData);

view.setSource(QUrl::fromLocalFile(&quot;main.qml&quot;));
view.show();
</db:programlisting>
<db:para>Then, in <db:code>main.qml</db:code>:</db:para>
<db:programlisting language="cpp">Text { text: owner.name + &quot; &quot; + owner.phone }
</db:programlisting>
<db:para>The binding is dynamic - whenever a key's value is updated, anything bound to that key will be updated as well.</db:para>
<db:para>To detect value changes made in the UI layer you can connect to the <db:link xlink:href="qqmlpropertymap.xml#valueChanged">valueChanged</db:link>() signal. However, note that <db:link xlink:href="qqmlpropertymap.xml#valueChanged">valueChanged</db:link>() is <db:emphasis role="bold">NOT</db:emphasis> emitted when changes are made by calling <db:link xlink:href="qqmlpropertymap.xml#insert">insert</db:link>() or <db:link xlink:href="qqmlpropertymap.xml#clear">clear</db:link>() - it is only emitted when a value is updated from QML.</db:para>
<db:note>
<db:para>It is not possible to remove keys from the map; once a key has been added, you can only modify or clear its associated value.</db:para>
</db:note>
<db:note>
<db:para>When deriving a class from <db:link xlink:href="qqmlpropertymap.xml">QQmlPropertyMap</db:link>, use the <db:link xlink:href="qqmlpropertymap.xml#QQmlPropertyMap-1">protected two-argument constructor</db:link> which ensures that the class is correctly registered with the Qt <db:link xlink:href="metaobjects.xml">Meta-Object System</db:link>.</db:para>
</db:note>
<db:note>
<db:para>The <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> of a <db:link xlink:href="qqmlpropertymap.xml">QQmlPropertyMap</db:link> is dynamically generated and modified. Operations on that meta object are not thread safe, so applications need to take care to explicitly synchronize access to the meta object.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQmlPropertyMap">
<db:title>[explicit] QQmlPropertyMap::QQmlPropertyMap(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlPropertyMap</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlPropertyMap(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a bindable map with parent object <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QQmlPropertyMap-1">
<db:title>[protected] QQmlPropertyMap::QQmlPropertyMap(DerivedType *<db:emphasis>derived</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlPropertyMap</db:methodname>
<db:methodparam>
<db:type>DerivedType *</db:type>
<db:parameter>derived</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlPropertyMap(DerivedType *derived, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a bindable map with parent object <db:code role="parameter">parent</db:code>. Use this constructor in classes derived from <db:link xlink:href="qqmlpropertymap.xml">QQmlPropertyMap</db:link>.</db:para>
<db:para>The type of <db:code role="parameter">derived</db:code> is used to register the property map with the <db:link xlink:href="metaobjects.xml">Meta-Object System</db:link>, which is necessary to ensure that properties of the derived class are accessible. This type must be derived from <db:link xlink:href="qqmlpropertymap.xml">QQmlPropertyMap</db:link>.</db:para>
</db:section>
<db:section xml:id="dtor.QQmlPropertyMap">
<db:title>[override virtual] QQmlPropertyMap::~QQmlPropertyMap()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QQmlPropertyMap</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QQmlPropertyMap() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the bindable map.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QQmlPropertyMap::clear(const QString &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear(const QString &amp;key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the value (if any) associated with <db:code role="parameter">key</db:code>.</db:para>
</db:section>
<db:section xml:id="contains">
<db:title>bool QQmlPropertyMap::contains(const QString &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(const QString &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the map contains <db:code role="parameter">key</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlpropertymap.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>int QQmlPropertyMap::count() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int count() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Same as <db:link xlink:href="qqmlpropertymap.xml#size">size</db:link>().</db:para>
</db:section>
<db:section xml:id="insert">
<db:title>void QQmlPropertyMap::insert(const QString &amp;<db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insert(const QString &amp;key, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the value associated with <db:code role="parameter">key</db:code> to <db:code role="parameter">value</db:code>.</db:para>
<db:para>If the key doesn't exist, it is automatically created.</db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QQmlPropertyMap::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the map contains no keys; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlpropertymap.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keys">
<db:title>QStringList QQmlPropertyMap::keys() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>keys</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList keys() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of keys.</db:para>
<db:para>Keys that have been cleared will still appear in this list, even though their associated values are invalid QVariants.</db:para>
</db:section>
<db:section xml:id="size">
<db:title>int QQmlPropertyMap::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of keys in the map.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlpropertymap.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qqmlpropertymap.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateValue">
<db:title>[virtual protected] QVariant QQmlPropertyMap::updateValue(const QString &amp;<db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>input</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>updateValue</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>input</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant updateValue(const QString &amp;key, const QVariant &amp;input)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the new value to be stored for the key <db:code role="parameter">key</db:code>. This function is provided to intercept updates to a property from QML, where the value provided from QML is <db:code role="parameter">input</db:code>.</db:para>
<db:para>Override this function to manipulate the property value as it is updated. Note that this function is only invoked when the value is updated from QML.</db:para>
</db:section>
<db:section xml:id="value">
<db:title>QVariant QQmlPropertyMap::value(const QString &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>value</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant value(const QString &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value associated with <db:code role="parameter">key</db:code>.</db:para>
<db:para>If no value has been set for this key (or if the value has been cleared), an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link> is returned.</db:para>
</db:section>
<db:section xml:id="valueChanged">
<db:title>void QQmlPropertyMap::valueChanged(const QString &amp;<db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>valueChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void valueChanged(const QString &amp;key, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever one of the values in the map is changed. <db:code role="parameter">key</db:code> is the key corresponding to the <db:code role="parameter">value</db:code> that was changed.</db:para>
<db:note>
<db:para>valueChanged() is <db:emphasis role="bold">NOT</db:emphasis> emitted when changes are made by calling <db:link xlink:href="qqmlpropertymap.xml#insert">insert</db:link>() or <db:link xlink:href="qqmlpropertymap.xml#clear">clear</db:link>() - it is only emitted when a value is updated from QML.</db:para>
</db:note>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>QVariant &amp;QQmlPropertyMap::operator[](const QString &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVariant &amp;</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant &amp; operator[](const QString &amp;key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value associated with the key <db:code role="parameter">key</db:code> as a modifiable reference.</db:para>
<db:para>If the map contains no item with key <db:code role="parameter">key</db:code>, the function inserts an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link> into the map with key <db:code role="parameter">key</db:code>, and returns a reference to it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlpropertymap.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qqmlpropertymap.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5b-5d-1">
<db:title>QVariant QQmlPropertyMap::operator[](const QString &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant operator[](const QString &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Same as <db:link xlink:href="qqmlpropertymap.xml#value">value</db:link>().</db:para>
</db:section>
</db:section>
</db:article>
