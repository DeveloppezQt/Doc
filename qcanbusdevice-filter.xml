<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title></db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcanbusdevice-filter.xml">QCanBusDevice::Filter</db:link> struct defines a filter for CAN bus frames.</db:para>
<db:para>This struct was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>Filter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += serialbus</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A list of <db:link xlink:href="qcanbusdevice-filter.xml">QCanBusDevice::Filter</db:link> instances is passed to <db:link xlink:href="qcanbusdevice.xml#setConfigurationParameter">QCanBusDevice::setConfigurationParameter</db:link>() to enable filtering. If a received CAN frame matches at least one of the filters in the list, the <db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link> will accept it.</db:para>
<db:para>The example below demonstrates how to use the struct:</db:para>
<db:programlisting language="cpp">QCanBusDevice::Filter filter;
QList&lt;QCanBusDevice::Filter&gt; filterList;

// filter all CAN bus packages with id 0x444 (base) or 0xXXXXX444 (extended)
filter.frameId = 0x444u;
filter.frameIdMask = 0x7FFu;
filter.format = QCanBusDevice::Filter::MatchBaseAndExtendedFormat;
filter.type = QCanBusFrame::InvalidFrame;
filterList.append(filter);

// filter all DataFrames with extended CAN bus package format
filter.frameId = 0x0;
filter.frameIdMask = 0x0;
filter.format = QCanBusDevice::Filter::MatchExtendedFormat;
filter.type = QCanBusFrame::DataFrame;
filterList.append(filter);

// apply filter
device-&gt;setConfigurationParameter(QCanBusDevice::RawFilterKey, QVariant::fromValue(filterList));
</db:programlisting>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="FormatFilter-enum">
<db:title>enum Filter::FormatFilter</db:title>
<db:bridgehead renderas="sect2">flags Filter::FormatFilters</db:bridgehead>
<db:para>This enum describes the format pattern, which is used to filter incoming CAN bus frames.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qcanbusdevice-filter.xml">Filter</db:link></db:emphasis>::MatchBaseFormat</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>The CAN bus frame must use the base frame format (11 bit identifier).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qcanbusdevice-filter.xml">Filter</db:link></db:emphasis>::MatchExtendedFormat</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>The CAN bus frame must use the extended frame format (29 bit identifier).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qcanbusdevice-filter.xml">Filter</db:link></db:emphasis>::MatchBaseAndExtendedFormat</db:code></db:para>
</db:td>
<db:td><db:code>0x0003</db:code></db:td>
<db:td>
<db:para>The CAN bus frame can have a base or an extended frame format.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>FormatFilters</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;FormatFilter&gt;. </db:code>It stores an OR combination of <db:code>FormatFilter</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="format-var">
<db:title>QCanBusDevice::Filter::FormatFilter Filter::format</db:title>
<db:para>This variable holds the frame format of the matching CAN bus frame.</db:para>
<db:para>By default this field is set to <db:link xlink:href="qcanbusdevice-filter.xml#FormatFilter-enum">QCanBusDevice::Filter::MatchBaseAndExtendedFormat</db:link>.</db:para>
</db:section>
<db:section xml:id="frameId-var">
<db:title>quint32 Filter::frameId</db:title>
<db:para>This variable holds the frame id used to filter the incoming frames.</db:para>
<db:para>The frameId is used in conjunction with <db:code role="parameter">frameIdMask</db:code>. The matching is successful if the following evaluates to <db:code>true</db:code>:</db:para>
<db:programlisting language="cpp">(receivedFrameId &amp; frameIdMask) == (frameId &amp; frameIdMask)
</db:programlisting>
<db:para>By default this field is set to <db:code>0x0</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice-filter.xml#frameIdMask-var">frameIdMask</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="frameIdMask-var">
<db:title>quint32 Filter::frameIdMask</db:title>
<db:para>This variable holds the bit mask that is applied to the frame id of the filter and the received frame.</db:para>
<db:para>The two frame ids are matching if the following evaluates to <db:code>true</db:code>:</db:para>
<db:programlisting language="cpp">(receivedFrameId &amp; frameIdMask) == (frameId &amp; frameIdMask)
</db:programlisting>
<db:para>By default this field is set to <db:code>0x0</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusdevice-filter.xml#frameId-var">frameId</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type-var">
<db:title>QCanBusFrame::FrameType Filter::type</db:title>
<db:para>This variable holds the type of the frame to be filtered.</db:para>
<db:para>Any CAN bus frame type can be matched by setting this variable to <db:link xlink:href="qcanbusframe.xml#FrameType-enum">QCanBusFrame::InvalidFrame</db:link>. The filter object is invalid if type is equal to <db:link xlink:href="qcanbusframe.xml#FrameType-enum">QCanBusFrame::UnknownFrame</db:link>.</db:para>
<db:para>By default this field is set to <db:link xlink:href="qcanbusframe.xml#FrameType-enum">QCanBusFrame::InvalidFrame</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbusframe.xml#FrameType-enum">QCanBusFrame::FrameType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
