<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QBluetoothServiceDiscoveryAgent Class</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbluetoothservicediscoveryagent.xml">QBluetoothServiceDiscoveryAgent</db:link> class enables you to query for Bluetooth services.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBluetoothServiceDiscoveryAgent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += bluetooth</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>To query the services provided by all contactable Bluetooth devices:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>create an instance of <db:link xlink:href="qbluetoothservicediscoveryagent.xml">QBluetoothServiceDiscoveryAgent</db:link>,</db:para>
</db:listitem>
<db:listitem>
<db:para>connect to either the <db:link xlink:href="qbluetoothservicediscoveryagent.xml#serviceDiscovered">serviceDiscovered</db:link>() or <db:link xlink:href="qbluetoothservicediscoveryagent.xml#finished">finished</db:link>() signals,</db:para>
</db:listitem>
<db:listitem>
<db:para>and call <db:link xlink:href="qbluetoothservicediscoveryagent.xml#start">start</db:link>().</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="cpp">void MyClass::startServiceDiscovery()
{

    // Create a discovery agent and connect to its signals
    QBluetoothServiceDiscoveryAgent *discoveryAgent = new QBluetoothServiceDiscoveryAgent(this);
    connect(discoveryAgent, SIGNAL(serviceDiscovered(QBluetoothServiceInfo)),
            this, SLOT(serviceDiscovered(QBluetoothServiceInfo)));

    // Start a discovery
    discoveryAgent-&gt;start();

    //...
}

// In your local slot, read information about the found devices
void MyClass::serviceDiscovered(const QBluetoothServiceInfo &amp;service)
{
    qDebug() &lt;&lt; &quot;Found new service:&quot; &lt;&lt; service.serviceName()
             &lt;&lt; '(' &lt;&lt; service.device().address().toString() &lt;&lt; ')';
}
</db:programlisting>
<db:para>By default a minimal service discovery is performed. In this mode, the QBluetotohServiceInfo objects returned are guaranteed to contain only device and service UUID information. Depending on platform and device capabilities, other service information may also be available. For most use cases this is adequate as <db:link xlink:href="qbluetoothsocket.xml#connectToService">QBluetoothSocket::connectToService</db:link>() will perform additional discovery if required. If full service information is required, pass <db:link xlink:href="qbluetoothservicediscoveryagent.xml#DiscoveryMode-enum">FullDiscovery</db:link> as the discoveryMode parameter to <db:link xlink:href="qbluetoothservicediscoveryagent.xml#start">start</db:link>().</db:para>
<db:para>This class may internally utilize <db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link> to find unknown devices.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DiscoveryMode-enum">
<db:title>enum QBluetoothServiceDiscoveryAgent::DiscoveryMode</db:title>
<db:para>This enum describes the service discovery mode.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothservicediscoveryagent.xml">QBluetoothServiceDiscoveryAgent</db:link></db:emphasis>::MinimalDiscovery</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Performs a minimal service discovery. The <db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link> objects returned may be incomplete and are only guaranteed to contain device and service UUID information.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothservicediscoveryagent.xml">QBluetoothServiceDiscoveryAgent</db:link></db:emphasis>::FullDiscovery</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Performs a full service discovery.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Error-enum">
<db:title>enum QBluetoothServiceDiscoveryAgent::Error</db:title>
<db:para>This enum describes errors that can occur during service discovery.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothservicediscoveryagent.xml">QBluetoothServiceDiscoveryAgent</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>QBluetoothDeviceDiscoveryAgent::NoError</db:code></db:td>
<db:td>
<db:para>No error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothservicediscoveryagent.xml">QBluetoothServiceDiscoveryAgent</db:link></db:emphasis>::PoweredOffError</db:code></db:para>
</db:td>
<db:td><db:code>QBluetoothDeviceDiscoveryAgent::PoweredOffError</db:code></db:td>
<db:td>
<db:para>The Bluetooth adaptor is powered off, power it on before doing discovery.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothservicediscoveryagent.xml">QBluetoothServiceDiscoveryAgent</db:link></db:emphasis>::InputOutputError</db:code></db:para>
</db:td>
<db:td><db:code>QBluetoothDeviceDiscoveryAgent::InputOutputError</db:code></db:td>
<db:td>
<db:para>Writing or reading from the device resulted in an error.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothservicediscoveryagent.xml">QBluetoothServiceDiscoveryAgent</db:link></db:emphasis>::InvalidBluetoothAdapterError</db:code></db:para>
</db:td>
<db:td><db:code>QBluetoothDeviceDiscoveryAgent::InvalidBluetoothAdapterError</db:code></db:td>
<db:td>
<db:para>The passed local adapter address does not match the physical adapter address of any local Bluetooth device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothservicediscoveryagent.xml">QBluetoothServiceDiscoveryAgent</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>QBluetoothDeviceDiscoveryAgent::UnknownError</db:code></db:td>
<db:td>
<db:para>An unknown error has occurred.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QBluetoothServiceDiscoveryAgent">
<db:title>QBluetoothServiceDiscoveryAgent::QBluetoothServiceDiscoveryAgent(QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a new <db:link xlink:href="qbluetoothservicediscoveryagent.xml">QBluetoothServiceDiscoveryAgent</db:link> with <db:code role="parameter">parent</db:code>. The search is performed via the local default Bluetooth adapter.</db:para>
</db:section>
<db:section xml:id="QBluetoothServiceDiscoveryAgent-1">
<db:title>[explicit] QBluetoothServiceDiscoveryAgent::QBluetoothServiceDiscoveryAgent(const QBluetoothAddress &amp;<db:emphasis>deviceAdapter</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a new <db:link xlink:href="qbluetoothservicediscoveryagent.xml">QBluetoothServiceDiscoveryAgent</db:link> for <db:code role="parameter">deviceAdapter</db:code> and with <db:code role="parameter">parent</db:code>.</db:para>
<db:para>It uses <db:code role="parameter">deviceAdapter</db:code> for the service search. If <db:code role="parameter">deviceAdapter</db:code> is default constructed the resulting <db:link xlink:href="qbluetoothservicediscoveryagent.xml">QBluetoothServiceDiscoveryAgent</db:link> object will use the local default Bluetooth adapter.</db:para>
<db:para>If a <db:code role="parameter">deviceAdapter</db:code> is specified that is not a local adapter <db:link xlink:href="qbluetoothservicediscoveryagent.xml#error">error</db:link>() will be set to <db:link xlink:href="qbluetoothservicediscoveryagent.xml#Error-enum">InvalidBluetoothAdapterError</db:link>. Therefore it is recommended to test the error flag immediately after using this constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothservicediscoveryagent.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QBluetoothServiceDiscoveryAgent">
<db:title>[virtual noexcept] QBluetoothServiceDiscoveryAgent::~QBluetoothServiceDiscoveryAgent()</db:title>
<db:para>Destructor for <db:link xlink:href="qbluetoothservicediscoveryagent.xml">QBluetoothServiceDiscoveryAgent</db:link></db:para>
</db:section>
<db:section xml:id="canceled">
<db:title>void QBluetoothServiceDiscoveryAgent::canceled()</db:title>
<db:para>This signal is triggered when the service discovery was canceled via a call to <db:link xlink:href="qbluetoothservicediscoveryagent.xml#stop">stop</db:link>().</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QBluetoothServiceDiscoveryAgent::clear()</db:title>
<db:para>Clears the results of previous service discoveries and resets <db:link xlink:href="qbluetoothservicediscoveryagent.xml#uuidFilter">uuidFilter</db:link>(). This function does nothing during an ongoing service discovery (see <db:link xlink:href="qbluetoothservicediscoveryagent.xml#isActive">isActive</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothservicediscoveryagent.xml#discoveredServices">discoveredServices</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="discoveredServices">
<db:title>QList&lt;QBluetoothServiceInfo&gt; QBluetoothServiceDiscoveryAgent::discoveredServices() const</db:title>
<db:para>Returns the list of all discovered services.</db:para>
<db:para>This list of services accumulates newly discovered services from multiple calls to <db:link xlink:href="qbluetoothservicediscoveryagent.xml#start">start</db:link>(). Unless <db:link xlink:href="qbluetoothservicediscoveryagent.xml#clear">clear</db:link>() is called the list cannot decrease in size. This implies that if a remote Bluetooth device moves out of range in between two subsequent calls to <db:link xlink:href="qbluetoothservicediscoveryagent.xml#start">start</db:link>() the list may contain stale entries.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothservicediscoveryagent.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>QBluetoothServiceDiscoveryAgent::Error QBluetoothServiceDiscoveryAgent::error() const</db:title>
<db:para>Returns the type of error that last occurred. If the service discovery is done for a single <db:link xlink:href="qbluetoothservicediscoveryagent.xml#remoteAddress">remoteAddress</db:link>() it will return errors that occurred while trying to discover services on that device. If the <db:link xlink:href="qbluetoothservicediscoveryagent.xml#remoteAddress">remoteAddress</db:link>() is not set and devices are discovered by a scan, errors during service discovery on individual devices are not saved and no signals are emitted. In this case, errors are fairly normal as some devices may not respond to discovery or may no longer be in range. Such errors are surpressed. If no services are returned, it can be assumed no services could be discovered.</db:para>
</db:section>
<db:section xml:id="error-1">
<db:title>void QBluetoothServiceDiscoveryAgent::error(QBluetoothServiceDiscoveryAgent::Error <db:emphasis>error</db:emphasis>)</db:title>
<db:para>This signal is emitted when an <db:code role="parameter">error</db:code> occurs. The <db:code role="parameter">error</db:code> parameter describes the error that occurred.</db:para>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QBluetoothServiceDiscoveryAgent::errorString() const</db:title>
<db:para>Returns a human-readable description of the last error that occurred during the service discovery.</db:para>
</db:section>
<db:section xml:id="finished">
<db:title>void QBluetoothServiceDiscoveryAgent::finished()</db:title>
<db:para>This signal is emitted when the Bluetooth service discovery completes.</db:para>
<db:para>Unlike the <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#finished">QBluetoothDeviceDiscoveryAgent::finished</db:link>() signal this signal will even be emitted when an error occurred during the service discovery. Therefore it is recommended to check the <db:link xlink:href="qbluetoothservicediscoveryagent.xml#error">error</db:link>() signal to evaluate the success of the service discovery discovery.</db:para>
</db:section>
<db:section xml:id="isActive">
<db:title>bool QBluetoothServiceDiscoveryAgent::isActive() const</db:title>
<db:para>Returns <db:code>true</db:code> if the service discovery is currently active; otherwise returns <db:code>false</db:code>. An active discovery can be stopped by calling <db:link xlink:href="qbluetoothservicediscoveryagent.xml#stop">stop</db:link>().</db:para>
</db:section>
<db:section xml:id="remoteAddress">
<db:title>QBluetoothAddress QBluetoothServiceDiscoveryAgent::remoteAddress() const</db:title>
<db:para>Returns the remote device address. If <db:link xlink:href="qbluetoothservicediscoveryagent.xml#setRemoteAddress">setRemoteAddress</db:link>() is not called, the function will return a default constructed <db:link xlink:href="qbluetoothaddress.xml">QBluetoothAddress</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothservicediscoveryagent.xml#setRemoteAddress">setRemoteAddress</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="serviceDiscovered">
<db:title>void QBluetoothServiceDiscoveryAgent::serviceDiscovered(const QBluetoothServiceInfo &amp;<db:emphasis>info</db:emphasis>)</db:title>
<db:para>This signal is emitted when the Bluetooth service described by <db:code role="parameter">info</db:code> is discovered.</db:para>
</db:section>
<db:section xml:id="setRemoteAddress">
<db:title>bool QBluetoothServiceDiscoveryAgent::setRemoteAddress(const QBluetoothAddress &amp;<db:emphasis>address</db:emphasis>)</db:title>
<db:para>Sets the remote device address to <db:code role="parameter">address</db:code>. If <db:code role="parameter">address</db:code> is default constructed, services will be discovered on all contactable Bluetooth devices. A new remote address can only be set while there is no service discovery in progress; otherwise this function returns false.</db:para>
<db:para>On some platforms such as Blackberry the service discovery might lead to pairing requests. Therefore it is not recommended to do service discoveries on all devices.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothservicediscoveryagent.xml#remoteAddress">remoteAddress</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUuidFilter">
<db:title>void QBluetoothServiceDiscoveryAgent::setUuidFilter(const QBluetoothUuid &amp;<db:emphasis>uuid</db:emphasis>)</db:title>
<db:para>This is an overloaded member function, provided for convenience.</db:para>
<db:para>Sets the UUID filter to a list containing the single element <db:code role="parameter">uuid</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothservicediscoveryagent.xml#uuidFilter">uuidFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUuidFilter-1">
<db:title>void QBluetoothServiceDiscoveryAgent::setUuidFilter(const QList&lt;QBluetoothUuid&gt; &amp;<db:emphasis>uuids</db:emphasis>)</db:title>
<db:para>Sets the UUID filter to <db:code role="parameter">uuids</db:code>. Only services matching the UUIDs in <db:code role="parameter">uuids</db:code> will be returned.</db:para>
<db:para>An empty UUID list is equivalent to a list containing only <db:link xlink:href="qbluetoothuuid.xml#ServiceClassUuid-enum">QBluetoothUuid::PublicBrowseGroup</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothservicediscoveryagent.xml#uuidFilter">uuidFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start">
<db:title>void QBluetoothServiceDiscoveryAgent::start(QBluetoothServiceDiscoveryAgent::DiscoveryMode <db:emphasis>mode</db:emphasis> = MinimalDiscovery)</db:title>
<db:para>Starts service discovery. <db:code role="parameter">mode</db:code> specifies the type of service discovery to perform.</db:para>
<db:para>On BlackBerry devices, device discovery may lead to pairing requests.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothservicediscoveryagent.xml#DiscoveryMode-enum">DiscoveryMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stop">
<db:title>void QBluetoothServiceDiscoveryAgent::stop()</db:title>
<db:para>Stops the service discovery process. The <db:link xlink:href="qbluetoothservicediscoveryagent.xml#canceled">canceled</db:link>() signal will be emitted once the search has stopped.</db:para>
</db:section>
<db:section xml:id="uuidFilter">
<db:title>QList&lt;QBluetoothUuid&gt; QBluetoothServiceDiscoveryAgent::uuidFilter() const</db:title>
<db:para>Returns the UUID filter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothservicediscoveryagent.xml#setUuidFilter">setUuidFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
