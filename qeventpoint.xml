<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QEventPoint Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qeventpoint.xml">QEventPoint</db:link> class provides information about a point in a <db:link xlink:href="qpointerevent.xml">QPointerEvent</db:link>.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QEventPoint</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtquick-eventpoint.xml</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="State-enum">
<db:title>enum QEventPoint::State</db:title>
<db:bridgehead renderas="sect2">flags QEventPoint::States</db:bridgehead>
<db:enumsynopsis>
<db:enumname>State</db:enumname>
<db:enumitem>
<db:enumidentifier>Unknown</db:enumidentifier>
<db:enumvalue>Qt::TouchPointUnknownState</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Stationary</db:enumidentifier>
<db:enumvalue>Qt::TouchPointStationary</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Pressed</db:enumidentifier>
<db:enumvalue>Qt::TouchPointPressed</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Updated</db:enumidentifier>
<db:enumvalue>Qt::TouchPointMoved</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Released</db:enumidentifier>
<db:enumvalue>Qt::TouchPointReleased</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QEventPoint::States</db:typedefname>
</db:typedefsynopsis>
<db:para>Specifies the state of this event point.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeventpoint.xml">QEventPoint</db:link></db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>Qt::TouchPointUnknownState</db:code></db:td>
<db:td>
<db:para>Unknown state.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeventpoint.xml">QEventPoint</db:link></db:emphasis>::Stationary</db:code></db:para>
</db:td>
<db:td><db:code>Qt::TouchPointStationary</db:code></db:td>
<db:td>
<db:para>The event point did not move.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeventpoint.xml">QEventPoint</db:link></db:emphasis>::Pressed</db:code></db:para>
</db:td>
<db:td><db:code>Qt::TouchPointPressed</db:code></db:td>
<db:td>
<db:para>The touch point or button is pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeventpoint.xml">QEventPoint</db:link></db:emphasis>::Updated</db:code></db:para>
</db:td>
<db:td><db:code>Qt::TouchPointMoved</db:code></db:td>
<db:td>
<db:para>The event point was updated.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeventpoint.xml">QEventPoint</db:link></db:emphasis>::Released</db:code></db:para>
</db:td>
<db:td><db:code>Qt::TouchPointReleased</db:code></db:td>
<db:td>
<db:para>The touch point or button was released.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>States</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;State&gt;. </db:code>It stores an OR combination of <db:code>State</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="accepted-prop">
<db:title>accepted : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>accepted</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isAccepted</db:synopsisinfo>
<db:synopsisinfo role="setter">setAccepted</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the accepted state of the event point.</db:para>
<db:para>In widget-based applications, this property is not used, as it's only meaningful for a widget to accept or reject a complete <db:link xlink:href="qinputevent.xml">QInputEvent</db:link>.</db:para>
<db:para>In Qt Quick however, it's normal for an Item or Event Handler to accept only the individual points in a <db:link xlink:href="qtouchevent.xml">QTouchEvent</db:link> that are actually participating in a gesture, while other points can be delivered to other items or handlers. For the sake of consistency, that applies to any <db:link xlink:href="qpointerevent.xml">QPointerEvent</db:link>; and delivery is done only when all points in a <db:link xlink:href="qpointerevent.xml">QPointerEvent</db:link> have been accepted.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isAccepted</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAccepted</db:emphasis>(<db:type>bool</db:type> <db:emphasis>accepted</db:emphasis> = true)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qevent.xml#accepted-prop">QEvent::accepted</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="device-prop">
<db:title>[read-only] device : QPointingDevice* const</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPointingDevice*</db:type>
<db:varname>device</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">device</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the pointing device from which this event point originates.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>const <db:type><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:type> *<db:emphasis role="bold"><db:link xlink:href="qeventpoint.xml#device">device</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="ellipseDiameters-prop">
<db:title>[read-only] ellipseDiameters : const QSizeF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QSizeF</db:type>
<db:varname>ellipseDiameters</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">ellipseDiameters</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the width and height of the bounding ellipse of the touch point.</db:para>
<db:para>The return value is in logical pixels. Most touchscreens do not detect the shape of the contact point, and no mice or tablet devices can detect it, so a null size is the most common value. On some touchscreens the diameters may be nonzero and always equal (the ellipse is approximated as a circle).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsizef.xml">QSizeF</db:link></db:type> <db:emphasis role="bold">ellipseDiameters</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="globalGrabPosition-prop">
<db:title>[read-only] globalGrabPosition : const QPointF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPointF</db:type>
<db:varname>globalGrabPosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">globalGrabPosition</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the global position at which this point was grabbed.</db:para>
<db:para>The global position is relative to the screen or virtual desktop.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> <db:emphasis role="bold">globalGrabPosition</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventpoint.xml#globalPosition-prop">globalPosition</db:link></db:member>
<db:member><db:link xlink:href="qeventpoint.xml#grabPosition-prop">grabPosition</db:link></db:member>
<db:member><db:link xlink:href="qeventpoint.xml#sceneGrabPosition-prop">sceneGrabPosition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="globalLastPosition-prop">
<db:title>[read-only] globalLastPosition : const QPointF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPointF</db:type>
<db:varname>globalLastPosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">globalLastPosition</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the global position of this point from the previous press or move event.</db:para>
<db:para>The global position is relative to the screen or virtual desktop.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> <db:emphasis role="bold">globalLastPosition</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventpoint.xml#globalPosition-prop">globalPosition</db:link></db:member>
<db:member><db:link xlink:href="qeventpoint.xml#lastPosition-prop">lastPosition</db:link></db:member>
<db:member><db:link xlink:href="qeventpoint.xml#sceneLastPosition-prop">sceneLastPosition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="globalPosition-prop">
<db:title>[read-only] globalPosition : const QPointF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPointF</db:type>
<db:varname>globalPosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">globalPosition</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the global position of this point.</db:para>
<db:para>The global position is relative to the screen or virtual desktop.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> <db:emphasis role="bold">globalPosition</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventpoint.xml#globalPressPosition-prop">globalPressPosition</db:link></db:member>
<db:member><db:link xlink:href="qeventpoint.xml#position-prop">position</db:link></db:member>
<db:member><db:link xlink:href="qeventpoint.xml#scenePosition-prop">scenePosition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="globalPressPosition-prop">
<db:title>[read-only] globalPressPosition : const QPointF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPointF</db:type>
<db:varname>globalPressPosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">globalPressPosition</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the global position at which this point was pressed.</db:para>
<db:para>The global position is relative to the screen or virtual desktop.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> <db:emphasis role="bold">globalPressPosition</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventpoint.xml#globalPosition-prop">globalPosition</db:link></db:member>
<db:member><db:link xlink:href="qeventpoint.xml#pressPosition-prop">pressPosition</db:link></db:member>
<db:member><db:link xlink:href="qeventpoint.xml#scenePressPosition-prop">scenePressPosition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="grabPosition-prop">
<db:title>[read-only] grabPosition : const QPointF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPointF</db:type>
<db:varname>grabPosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">grabPosition</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the position at which this point was grabbed.</db:para>
<db:para>The position is relative to the widget or item that received the event.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> <db:emphasis role="bold">grabPosition</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventpoint.xml#position-prop">position</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="id-prop">
<db:title>[read-only] id : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>id</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">id</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the ID number of this event point.</db:para>
<db:note>
<db:para>Do not assume that ID numbers start at zero or that they are sequential. Such an assumption is often false due to the way the underlying drivers work.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">id</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="lastPosition-prop">
<db:title>[read-only] lastPosition : const QPointF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPointF</db:type>
<db:varname>lastPosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">lastPosition</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the position of this point from the previous press or move event.</db:para>
<db:para>The position is relative to the widget or item that received the event.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> <db:emphasis role="bold">lastPosition</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventpoint.xml#position-prop">position</db:link></db:member>
<db:member><db:link xlink:href="qeventpoint.xml#pressPosition-prop">pressPosition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastTimestamp-prop">
<db:title>[read-only] lastTimestamp : const ulong</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>ulong</db:type>
<db:varname>lastTimestamp</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">lastTimestamp</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the time from the previous <db:link xlink:href="qpointerevent.xml">QPointerEvent</db:link> that contained this point.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#ulong-typedef">ulong</db:link></db:type> <db:emphasis role="bold">lastTimestamp</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventpoint.xml#globalLastPosition-prop">globalLastPosition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="position-prop">
<db:title>[read-only] position : const QPointF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPointF</db:type>
<db:varname>position</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">position</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the position of this point.</db:para>
<db:para>The position is relative to the widget or item that received the event.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> <db:emphasis role="bold">position</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="pressPosition-prop">
<db:title>[read-only] pressPosition : const QPointF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPointF</db:type>
<db:varname>pressPosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pressPosition</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the position at which this point was pressed.</db:para>
<db:para>The position is relative to the widget or item that received the event.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> <db:emphasis role="bold">pressPosition</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventpoint.xml#position-prop">position</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pressTimestamp-prop">
<db:title>[read-only] pressTimestamp : const ulong</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>ulong</db:type>
<db:varname>pressTimestamp</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pressTimestamp</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the most recent time at which this point was pressed.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#ulong-typedef">ulong</db:link></db:type> <db:emphasis role="bold">pressTimestamp</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventpoint.xml#timestamp-prop">timestamp</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pressure-prop">
<db:title>[read-only] pressure : const qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>pressure</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pressure</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the pressure of this point.</db:para>
<db:para>The return value is in the range <db:code>0.0</db:code> to <db:code>1.0</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">pressure</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="rotation-prop">
<db:title>[read-only] rotation : const qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>rotation</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">rotation</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the angular orientation of this point.</db:para>
<db:para>The return value is in degrees, where zero (the default) indicates the finger, token or stylus is pointing upwards, a negative angle means it's rotated to the left, and a positive angle means it's rotated to the right. Most touchscreens do not detect rotation, so zero is the most common value.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">rotation</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="sceneGrabPosition-prop">
<db:title>[read-only] sceneGrabPosition : const QPointF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPointF</db:type>
<db:varname>sceneGrabPosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">sceneGrabPosition</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the scene position at which this point was grabbed.</db:para>
<db:para>The scene position is the position relative to <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> if handled in <db:link xlink:href="qquickitem.xml#event">QQuickItem::event</db:link>(), in <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> coordinates if handled by an override of QGraphicsItem::touchEvent(), or the window position in widget applications.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> <db:emphasis role="bold">sceneGrabPosition</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventpoint.xml#scenePosition-prop">scenePosition</db:link></db:member>
<db:member><db:link xlink:href="qeventpoint.xml#grabPosition-prop">grabPosition</db:link></db:member>
<db:member><db:link xlink:href="qeventpoint.xml#globalGrabPosition-prop">globalGrabPosition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sceneLastPosition-prop">
<db:title>[read-only] sceneLastPosition : const QPointF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPointF</db:type>
<db:varname>sceneLastPosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">sceneLastPosition</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the scene position of this point from the previous press or move event.</db:para>
<db:para>The scene position is the position relative to <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> if handled in <db:link xlink:href="qquickitem.xml#event">QQuickItem::event</db:link>(), in <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> coordinates if handled by an override of QGraphicsItem::touchEvent(), or the window position in widget applications.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> <db:emphasis role="bold">sceneLastPosition</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventpoint.xml#scenePosition-prop">scenePosition</db:link></db:member>
<db:member><db:link xlink:href="qeventpoint.xml#scenePressPosition-prop">scenePressPosition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scenePosition-prop">
<db:title>[read-only] scenePosition : const QPointF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPointF</db:type>
<db:varname>scenePosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">scenePosition</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the scene position of this point.</db:para>
<db:para>The scene position is the position relative to <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> if handled in <db:link xlink:href="qquickitem.xml#event">QQuickItem::event</db:link>(), in <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> coordinates if handled by an override of QGraphicsItem::touchEvent(), or the window position in widget applications.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> <db:emphasis role="bold">scenePosition</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventpoint.xml#scenePressPosition-prop">scenePressPosition</db:link></db:member>
<db:member><db:link xlink:href="qeventpoint.xml#position-prop">position</db:link></db:member>
<db:member><db:link xlink:href="qeventpoint.xml#globalPosition-prop">globalPosition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scenePressPosition-prop">
<db:title>[read-only] scenePressPosition : const QPointF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPointF</db:type>
<db:varname>scenePressPosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">scenePressPosition</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the scene position at which this point was pressed.</db:para>
<db:para>The scene position is the position relative to <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> if handled in <db:link xlink:href="qquickitem.xml#event">QQuickItem::event</db:link>(), in <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> coordinates if handled by an override of QGraphicsItem::touchEvent(), or the window position in widget applications.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> <db:emphasis role="bold">scenePressPosition</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventpoint.xml#scenePosition-prop">scenePosition</db:link></db:member>
<db:member><db:link xlink:href="qeventpoint.xml#pressPosition-prop">pressPosition</db:link></db:member>
<db:member><db:link xlink:href="qeventpoint.xml#globalPressPosition-prop">globalPressPosition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state-prop">
<db:title>[read-only] state : const State</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>State</db:type>
<db:varname>state</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">state</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current state of the event point.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qeventpoint.xml#State-enum">QEventPoint::State</db:link></db:type> <db:emphasis role="bold">state</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="timeHeld-prop">
<db:title>[read-only] timeHeld : const qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>timeHeld</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">timeHeld</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the duration, in seconds, since this point was pressed and not released.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">timeHeld</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventpoint.xml#pressTimestamp-prop">pressTimestamp</db:link></db:member>
<db:member><db:link xlink:href="qeventpoint.xml#timestamp-prop">timestamp</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timestamp-prop">
<db:title>[read-only] timestamp : const ulong</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>ulong</db:type>
<db:varname>timestamp</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">timestamp</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the most recent time at which this point was included in a <db:link xlink:href="qpointerevent.xml">QPointerEvent</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#ulong-typedef">ulong</db:link></db:type> <db:emphasis role="bold">timestamp</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputevent.xml#timestamp">QPointerEvent::timestamp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uniqueId-prop">
<db:title>[read-only] uniqueId : const QPointingDeviceUniqueId</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPointingDeviceUniqueId</db:type>
<db:varname>uniqueId</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">uniqueId</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the unique ID of this point or token, if any.</db:para>
<db:para>It is often invalid (see <db:link xlink:href="qpointingdeviceuniqueid.xml#isValid">isValid</db:link>()), because touchscreens cannot uniquely identify fingers.</db:para>
<db:para>When it comes from a <db:link xlink:href="qtabletevent.xml">QTabletEvent</db:link>, it identifies the serial number of the stylus in use.</db:para>
<db:para>It may identify a specific token (fiducial object) when the TUIO driver is in use with a touchscreen that supports them.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpointingdeviceuniqueid.xml">QPointingDeviceUniqueId</db:link></db:type> <db:emphasis role="bold">uniqueId</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="velocity-prop">
<db:title>[read-only] velocity : const QVector2D</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QVector2D</db:type>
<db:varname>velocity</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">velocity</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds a velocity vector, in units of pixels per second, in the coordinate. system of the screen or desktop.</db:para>
<db:note>
<db:para>If the device's capabilities include <db:link xlink:href="qinputdevice.xml#Capability-enum">QInputDevice::Velocity</db:link>, it means velocity comes from the operating system (perhaps the touch hardware or driver provides it). But usually the <db:code>Velocity</db:code> capability is not set, indicating that the velocity is calculated by Qt, using a simple Kalman filter to provide a smoothed average velocity rather than an instantaneous value. Effectively it tells how fast and in what direction the user has been dragging this point over the last few events, with the most recent event having the strongest influence.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvector2d.xml">QVector2D</db:link></db:type> <db:emphasis role="bold">velocity</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputdevice.xml#capabilities">QInputDevice::capabilities</db:link>()</db:member>
<db:member><db:link xlink:href="qinputevent.xml#device">QInputEvent::device</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QEventPoint-1">
<db:title>QEventPoint::QEventPoint(int <db:emphasis>pointId</db:emphasis>, QEventPoint::State <db:emphasis>state</db:emphasis>, const QPointF &amp;<db:emphasis>scenePosition</db:emphasis>, const QPointF &amp;<db:emphasis>globalPosition</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QEventPoint</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pointId</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QEventPoint::State</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>scenePosition</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>globalPosition</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QEventPoint(int pointId, QEventPoint::State state, const QPointF &amp;scenePosition, const QPointF &amp;globalPosition)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an event point with the given <db:code role="parameter">pointId</db:code>, <db:code role="parameter">state</db:code>, <db:code role="parameter">scenePosition</db:code> and <db:code role="parameter">globalPosition</db:code>.</db:para>
</db:section>
<db:section xml:id="QEventPoint-2">
<db:title>QEventPoint::QEventPoint(const QEventPoint &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QEventPoint</db:methodname>
<db:methodparam>
<db:type>const QEventPoint &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QEventPoint(const QEventPoint &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an event point by making a shallow copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QEventPoint-3">
<db:title>QEventPoint::QEventPoint(QEventPoint &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QEventPoint</db:methodname>
<db:methodparam>
<db:type>QEventPoint &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QEventPoint(QEventPoint &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an event point by moving <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QEventPoint">
<db:title>QEventPoint::~QEventPoint()</db:title>
<db:destructorsynopsis>
<db:methodname>~QEventPoint</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QEventPoint()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the event point.</db:para>
</db:section>
<db:section xml:id="normalizedPosition">
<db:title>QPointF QEventPoint::normalizedPosition() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>normalizedPosition</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF normalizedPosition() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the normalized position of this point.</db:para>
<db:para>The coordinates are calculated by transforming <db:link xlink:href="qeventpoint.xml#globalPosition-prop">globalPosition</db:link>() into the space of <db:link xlink:href="qinputdevice.xml#availableVirtualGeometry">QInputDevice::availableVirtualGeometry</db:link>(), i.e. <db:code>(0, 0)</db:code> is the top-left corner and <db:code>(1, 1)</db:code> is the bottom-right corner.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventpoint.xml#globalPosition-prop">globalPosition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QEventPoint::operator!=(const QEventPoint &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QEventPoint &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QEventPoint &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this event point is not equal to <db:code role="parameter">other</db:code>, otherwise return <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QEventPoint &amp;QEventPoint::operator=(const QEventPoint &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QEventPoint &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QEventPoint &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QEventPoint &amp; operator=(const QEventPoint &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this event point and returns a reference to this event point.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QEventPoint &amp;QEventPoint::operator=(QEventPoint &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QEventPoint &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QEventPoint &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QEventPoint &amp; operator=(QEventPoint &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this event point instance.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QEventPoint::operator==(const QEventPoint &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QEventPoint &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QEventPoint &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this event point is equal to <db:code role="parameter">other</db:code>, otherwise return <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QEventPoint</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qeventpoint.xml">QEventPoint</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="lastNormalizedPos">
<db:title>QPointF QEventPoint::lastNormalizedPos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>lastNormalizedPos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF lastNormalizedPos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qeventpoint.xml#globalLastPosition-prop">globalLastPosition</db:link>() instead.</db:para>
<db:para>Returns the normalized position of this point from the previous press or move event.</db:para>
<db:para>The coordinates are normalized to <db:link xlink:href="qinputdevice.xml#availableVirtualGeometry">QInputDevice::availableVirtualGeometry</db:link>(), i.e. <db:code>(0, 0)</db:code> is the top-left corner and <db:code>(1, 1)</db:code> is the bottom-right corner.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventpoint.xml#normalizedPosition">normalizedPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qeventpoint.xml#globalPressPosition-prop">globalPressPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normalizedPos">
<db:title>QPointF QEventPoint::normalizedPos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>normalizedPos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF normalizedPos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qeventpoint.xml#normalizedPosition">normalizedPosition</db:link>() instead.</db:para>
</db:section>
<db:section xml:id="pos">
<db:title>QPointF QEventPoint::pos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>pos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF pos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qeventpoint.xml#position-prop">position</db:link>() instead.</db:para>
<db:para>Returns the position of this point, relative to the widget or item that received the event.</db:para>
</db:section>
<db:section xml:id="startNormalizedPos">
<db:title>QPointF QEventPoint::startNormalizedPos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>startNormalizedPos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF startNormalizedPos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qeventpoint.xml#globalPressPosition-prop">globalPressPosition</db:link>() instead.</db:para>
<db:para>Returns the normalized press position of this point.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
