<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickView Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquickview.xml">QQuickView</db:link> class provides a window for displaying a Qt Quick user interface.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuickView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Quick)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Quick)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qquickwindow.xml" xlink:role="class">QQuickWindow</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This is a convenience subclass of <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> which will automatically load and display a QML scene when given the URL of the main source file. Alternatively, you can instantiate your own objects using <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> and place them in a manually setup <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>.</db:para>
<db:para>Typical usage:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);

    QQuickView *view = new QQuickView;
    view-&amp;gt;setSource(QUrl::fromLocalFile(&quot;myqmlfile.qml&quot;));
    view-&amp;gt;show();
    return app.exec();
}
</db:programlisting>
<db:para>To receive errors related to loading and executing QML with <db:link xlink:href="qquickview.xml">QQuickView</db:link>, you can connect to the <db:link xlink:href="qquickview.xml#statusChanged">statusChanged</db:link>() signal and monitor for <db:link xlink:href="qquickview.xml#Status-enum">QQuickView::Error</db:link>. The errors are available via <db:link xlink:href="qquickview.xml#errors">QQuickView::errors</db:link>().</db:para>
<db:para><db:link xlink:href="qquickview.xml">QQuickView</db:link> also manages sizing of the view and root object. By default, the <db:link xlink:href="qquickview.xml#resizeMode-prop">resizeMode</db:link> is <db:link xlink:href="qquickview.xml#ResizeMode-enum">SizeViewToRootObject</db:link>, which will load the component and resize it to the size of the view. Alternatively the <db:link xlink:href="qquickview.xml#resizeMode-prop">resizeMode</db:link> may be set to <db:link xlink:href="qquickview.xml#ResizeMode-enum">SizeRootObjectToView</db:link> which will resize the view to the size of the root object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-cppintegration-exposecppattributes.xml">Exposing Attributes of C++ Types to QML</db:link></db:member>
<db:member><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ResizeMode-enum">
<db:title>enum QQuickView::ResizeMode</db:title>
<db:enumsynopsis>
<db:enumname>ResizeMode</db:enumname>
<db:enumitem>
<db:enumidentifier>SizeViewToRootObject</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SizeRootObjectToView</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies how to resize the view.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickview.xml">QQuickView</db:link></db:emphasis>::SizeViewToRootObject</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The view resizes with the root item in the QML.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickview.xml">QQuickView</db:link></db:emphasis>::SizeRootObjectToView</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The view will automatically resize the root item to the size of the view.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Status-enum">
<db:title>enum QQuickView::Status</db:title>
<db:enumsynopsis>
<db:enumname>Status</db:enumname>
<db:enumitem>
<db:enumidentifier>Null</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Ready</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Loading</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Error</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Specifies the loading status of the <db:link xlink:href="qquickview.xml">QQuickView</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickview.xml">QQuickView</db:link></db:emphasis>::Null</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>This <db:link xlink:href="qquickview.xml">QQuickView</db:link> has no source set.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickview.xml">QQuickView</db:link></db:emphasis>::Ready</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This <db:link xlink:href="qquickview.xml">QQuickView</db:link> has loaded and created the QML component.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickview.xml">QQuickView</db:link></db:emphasis>::Loading</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>This <db:link xlink:href="qquickview.xml">QQuickView</db:link> is loading network data.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickview.xml">QQuickView</db:link></db:emphasis>::Error</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>One or more errors has occurred. Call <db:link xlink:href="qquickview.xml#errors">errors</db:link>() to retrieve a list of errors.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="resizeMode-prop">
<db:title>resizeMode : ResizeMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>ResizeMode</db:type>
<db:varname>resizeMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">resizeMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setResizeMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the view should resize the window contents</db:para>
<db:para>If this property is set to <db:link xlink:href="qquickview.xml#ResizeMode-enum">SizeViewToRootObject</db:link> (the default), the view resizes to the size of the root item in the QML.</db:para>
<db:para>If this property is set to <db:link xlink:href="qquickview.xml#ResizeMode-enum">SizeRootObjectToView</db:link>, the view will automatically resize the root item to the size of the view.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qquickview.xml#ResizeMode-enum">QQuickView::ResizeMode</db:link></db:type> <db:emphasis role="bold">resizeMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setResizeMode</db:emphasis>(<db:emphasis>QQuickView::ResizeMode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickview.xml#initialSize">initialSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="source-prop">
<db:title>source : QUrl</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QUrl</db:type>
<db:varname>source</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">source</db:synopsisinfo>
<db:synopsisinfo role="setter">setSource</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the URL of the source of the QML component.</db:para>
<db:para>Ensure that the URL provided is full and correct, in particular, use <db:link xlink:href="qurl.xml#fromLocalFile">QUrl::fromLocalFile</db:link>() when loading a file from the local filesystem.</db:para>
<db:para>Note that setting a source URL will result in the QML component being instantiated, even if the URL is unchanged from the current value.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qquickview.xml#source">source</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qquickview.xml#setSource">setSource</db:link></db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>url</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : const Status</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Status</db:type>
<db:varname>status</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">status</db:synopsisinfo>
<db:synopsisinfo role="notifier">statusChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The component's current <db:link xlink:href="qquickview.xml#Status-enum">status</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qquickview.xml#Status-enum">QQuickView::Status</db:link></db:type> <db:emphasis role="bold">status</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qquickview.xml#statusChanged">statusChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qquickview.xml#Status-enum">QQuickView::Status</db:link></db:type> <db:emphasis>status</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQuickView">
<db:title>[explicit] QQuickView::QQuickView(QWindow *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QQuickView</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickView(QWindow *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qquickview.xml">QQuickView</db:link> with the given <db:code role="parameter">parent</db:code>. The default value of <db:code role="parameter">parent</db:code> is 0.</db:para>
</db:section>
<db:section xml:id="QQuickView-1">
<db:title>QQuickView::QQuickView(QQmlEngine *<db:emphasis>engine</db:emphasis>, QWindow *<db:emphasis>parent</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQuickView</db:methodname>
<db:methodparam>
<db:type>QQmlEngine *</db:type>
<db:parameter>engine</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickView(QQmlEngine *engine, QWindow *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qquickview.xml">QQuickView</db:link> with the given QML <db:code role="parameter">engine</db:code> and <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Note: In this case, the <db:link xlink:href="qquickview.xml">QQuickView</db:link> does not own the given <db:code role="parameter">engine</db:code> object; it is the caller's responsibility to destroy the engine. If the <db:code role="parameter">engine</db:code> is deleted before the view, <db:link xlink:href="qquickview.xml#status-prop">status</db:link>() will return <db:link xlink:href="qquickview.xml#Status-enum">QQuickView::Error</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickview.xml#Status-enum">Status</db:link></db:member>
<db:member><db:link xlink:href="qquickview.xml#status-prop">status</db:link>()</db:member>
<db:member><db:link xlink:href="qquickview.xml#errors">errors</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QQuickView-2">
<db:title>[explicit] QQuickView::QQuickView(const QUrl &amp;<db:emphasis>source</db:emphasis>, QWindow *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QQuickView</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickView(const QUrl &amp;source, QWindow *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qquickview.xml">QQuickView</db:link> with the given QML <db:code role="parameter">source</db:code> and <db:code role="parameter">parent</db:code>. The default value of <db:code role="parameter">parent</db:code> is 0.</db:para>
</db:section>
<db:section xml:id="dtor.QQuickView">
<db:title>[override virtual] QQuickView::~QQuickView()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QQuickView</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QQuickView() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qquickview.xml">QQuickView</db:link>.</db:para>
</db:section>
<db:section xml:id="engine">
<db:title>QQmlEngine *QQuickView::engine() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QQmlEngine *</db:type>
<db:methodname>engine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlEngine * engine() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> used for instantiating QML Components.</db:para>
</db:section>
<db:section xml:id="errors">
<db:title>QList&lt;QQmlError&gt; QQuickView::errors() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QQmlError&gt;</db:type>
<db:methodname>errors</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QQmlError&gt; errors() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the list of errors that occurred during the last compile or create operation. When the status is not Error, an empty list is returned.</db:para>
</db:section>
<db:section xml:id="initialSize">
<db:title>QSize QQuickView::initialSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>initialSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize initialSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the initial size of the root object.</db:para>
<db:para>If <db:link xlink:href="qquickview.xml#resizeMode-prop">resizeMode</db:link> is QQuickItem::SizeRootObjectToView the root object will be resized to the size of the view. initialSize contains the size of the root object before it was resized.</db:para>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QQuickView::keyPressEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>keyPressEvent</db:methodname>
<db:methodparam>
<db:type>QKeyEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyPressEvent(QKeyEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qquickwindow.xml#keyPressEvent" role="function">QQuickWindow::keyPressEvent(QKeyEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="keyReleaseEvent">
<db:title>[override virtual protected] void QQuickView::keyReleaseEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>keyReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QKeyEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyReleaseEvent(QKeyEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qquickwindow.xml#keyReleaseEvent" role="function">QQuickWindow::keyReleaseEvent(QKeyEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QQuickView::mouseMoveEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseMoveEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseMoveEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qquickwindow.xml#mouseMoveEvent" role="function">QQuickWindow::mouseMoveEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QQuickView::mousePressEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mousePressEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mousePressEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qquickwindow.xml#mousePressEvent" role="function">QQuickWindow::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QQuickView::mouseReleaseEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseReleaseEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qquickwindow.xml#mouseReleaseEvent" role="function">QQuickWindow::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="rootContext">
<db:title>QQmlContext *QQuickView::rootContext() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QQmlContext *</db:type>
<db:methodname>rootContext</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlContext * rootContext() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns the root of the context hierarchy. Each QML component is instantiated in a <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link>. <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link>'s are essential for passing data to QML components. In QML, contexts are arranged hierarchically and this hierarchy is managed by the <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link>.</db:para>
</db:section>
<db:section xml:id="rootObject">
<db:title>QQuickItem *QQuickView::rootObject() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QQuickItem *</db:type>
<db:methodname>rootObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickItem * rootObject() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the view's root <db:link xlink:href="qquickitem.xml">item</db:link>.</db:para>
</db:section>
<db:section xml:id="setInitialProperties">
<db:title>[since 5.14] void QQuickView::setInitialProperties(const QVariantMap &amp;<db:emphasis>initialProperties</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setInitialProperties</db:methodname>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>initialProperties</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setInitialProperties(const QVariantMap &amp;initialProperties)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the initial properties <db:code role="parameter">initialProperties</db:code> with which the QML component gets initialized after calling <db:link xlink:href="qquickview.xml#setSource">QQuickView::setSource</db:link>().</db:para>
<db:programlisting language="cpp">    QScopedPointer&amp;lt;QQuickView&amp;gt; view { new QQuickView };
    view-&amp;gt;setInitialProperties({&quot;x, 100&quot;}, {&quot;width&quot;, 50});
    view-&amp;gt;setSource(QUrl::fromLocalFile(&quot;myqmlfile.qml&quot;));
    view-&amp;gt;show();
</db:programlisting>
<db:note>
<db:para>You can only use this function to initialize top-level properties.</db:para>
</db:note>
<db:note>
<db:para>This function should always be called before <db:link xlink:href="qquickview.xml#setSource">setSource</db:link>, as it has no effect once the component has become <db:code>Ready</db:code>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlcomponent.xml#createWithInitialProperties">QQmlComponent::createWithInitialProperties</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSource">
<db:title>void QQuickView::setSource(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSource</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">source</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSource(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the source to the <db:code role="parameter">url</db:code>, loads the QML component and instantiates it.</db:para>
<db:para>Ensure that the URL provided is full and correct, in particular, use <db:link xlink:href="qurl.xml#fromLocalFile">QUrl::fromLocalFile</db:link>() when loading a file from the local filesystem.</db:para>
<db:para>Calling this method multiple times with the same url will result in the QML component being reinstantiated.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qquickview.xml#source-prop">source</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickview.xml#source">source</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="source">
<db:title>QUrl QQuickView::source() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>source</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">source</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl source() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the source URL, if set.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qquickview.xml#source-prop">source</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickview.xml#setSource">setSource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="statusChanged">
<db:title>void QQuickView::statusChanged(QQuickView::Status <db:emphasis>status</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>statusChanged</db:methodname>
<db:methodparam>
<db:type>QQuickView::Status</db:type>
<db:parameter>status</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">status</db:synopsisinfo>
<db:synopsisinfo role="signature">void statusChanged(QQuickView::Status status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the component's current <db:code role="parameter">status</db:code> changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qquickview.xml#status-prop">status</db:link>. </db:para>
</db:note>
</db:section>
</db:section>
</db:article>
