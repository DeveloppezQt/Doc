<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Frozen Column Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example demonstrates how to freeze a column within a <db:link xlink:href="qtableview.xml">QTableView</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;freezetablewidget.h&quot;

#include &amp;lt;QScrollBar&amp;gt;
#include &amp;lt;QHeaderView&amp;gt;

FreezeTableWidget::FreezeTableWidget(QAbstractItemModel * model)
{
      setModel(model);
      frozenTableView = new QTableView(this);

      init();

      //connect the headers and scrollbars of both tableviews together
      connect(horizontalHeader(),&amp;amp;QHeaderView::sectionResized, this,
              &amp;amp;FreezeTableWidget::updateSectionWidth);
      connect(verticalHeader(),&amp;amp;QHeaderView::sectionResized, this,
              &amp;amp;FreezeTableWidget::updateSectionHeight);

      connect(frozenTableView-&amp;gt;verticalScrollBar(), &amp;amp;QAbstractSlider::valueChanged,
              verticalScrollBar(), &amp;amp;QAbstractSlider::setValue);
      connect(verticalScrollBar(), &amp;amp;QAbstractSlider::valueChanged,
              frozenTableView-&amp;gt;verticalScrollBar(), &amp;amp;QAbstractSlider::setValue);

}

FreezeTableWidget::~FreezeTableWidget()
{
      delete frozenTableView;
}

void FreezeTableWidget::init()
{
      frozenTableView-&amp;gt;setModel(model());
      frozenTableView-&amp;gt;setFocusPolicy(Qt::NoFocus);
      frozenTableView-&amp;gt;verticalHeader()-&amp;gt;hide();
      frozenTableView-&amp;gt;horizontalHeader()-&amp;gt;setSectionResizeMode(QHeaderView::Fixed);

      viewport()-&amp;gt;stackUnder(frozenTableView);

      frozenTableView-&amp;gt;setStyleSheet(&quot;QTableView { border: none;&quot;
                                     &quot;background-color: #8EDE21;&quot;
                                     &quot;selection-background-color: #999}&quot;); //for demo purposes
      frozenTableView-&amp;gt;setSelectionModel(selectionModel());
      for (int col = 1; col &amp;lt; model()-&amp;gt;columnCount(); ++col)
            frozenTableView-&amp;gt;setColumnHidden(col, true);

      frozenTableView-&amp;gt;setColumnWidth(0, columnWidth(0) );

      frozenTableView-&amp;gt;setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
      frozenTableView-&amp;gt;setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
      frozenTableView-&amp;gt;show();

      updateFrozenTableGeometry();

      setHorizontalScrollMode(ScrollPerPixel);
      setVerticalScrollMode(ScrollPerPixel);
      frozenTableView-&amp;gt;setVerticalScrollMode(ScrollPerPixel);
}

void FreezeTableWidget::updateSectionWidth(int logicalIndex, int /* oldSize */, int newSize)
{
      if (logicalIndex == 0){
            frozenTableView-&amp;gt;setColumnWidth(0, newSize);
            updateFrozenTableGeometry();
      }
}

void FreezeTableWidget::updateSectionHeight(int logicalIndex, int /* oldSize */, int newSize)
{
      frozenTableView-&amp;gt;setRowHeight(logicalIndex, newSize);
}

void FreezeTableWidget::resizeEvent(QResizeEvent * event)
{
      QTableView::resizeEvent(event);
      updateFrozenTableGeometry();
 }

QModelIndex FreezeTableWidget::moveCursor(CursorAction cursorAction,
                                          Qt::KeyboardModifiers modifiers)
{
      QModelIndex current = QTableView::moveCursor(cursorAction, modifiers);

      if (cursorAction == MoveLeft &amp;amp;&amp;amp; current.column() &amp;gt; 0
              &amp;amp;&amp;amp; visualRect(current).topLeft().x() &amp;lt; frozenTableView-&amp;gt;columnWidth(0) ){
            const int newValue = horizontalScrollBar()-&amp;gt;value() + visualRect(current).topLeft().x()
                                 - frozenTableView-&amp;gt;columnWidth(0);
            horizontalScrollBar()-&amp;gt;setValue(newValue);
      }
      return current;
}

void FreezeTableWidget::scrollTo (const QModelIndex &amp;amp; index, ScrollHint hint){
    if (index.column() &amp;gt; 0)
        QTableView::scrollTo(index, hint);
}

void FreezeTableWidget::updateFrozenTableGeometry()
{
      frozenTableView-&amp;gt;setGeometry(verticalHeader()-&amp;gt;width() + frameWidth(),
                                   frameWidth(), columnWidth(0),
                                   viewport()-&amp;gt;height()+horizontalHeader()-&amp;gt;height());
}

</db:programlisting>
</db:article>
