<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScxmlEvent Class</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SCXML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscxmlevent.xml">QScxmlEvent</db:link> class is an event for a Qt SCXML state machine.</db:para>
<db:para>This class was introduced in Qt 5.7.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScxmlEvent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Scxml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Scxml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += scxml</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>SCXML <db:emphasis>events</db:emphasis> drive transitions. Most events are generated by using the <db:code>&lt;raise&gt;</db:code> and <db:code>&lt;send&gt;</db:code> elements in the application. The state machine automatically generates some mandatory events, such as errors.</db:para>
<db:para>For more information, see <db:link xlink:href="https://www.w3.org/TR/scxml/#InternalStructureofEvents">SCXML Specification - 5.10.1 The Internal Structure of Events</db:link>. For more information about how the Qt SCXML API differs from the specification, see <db:link xlink:href="qtscxml-scxml-compliance.xml">SCXML Compliance</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlstatemachine.xml">QScxmlStateMachine</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="EventType-enum">
<db:title>enum QScxmlEvent::EventType</db:title>
<db:enumsynopsis>
<db:enumname>EventType</db:enumname>
<db:enumitem>
<db:enumidentifier>PlatformEvent</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InternalEvent</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExternalEvent</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type specifies the type of an SCXML event:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml">QScxmlEvent</db:link></db:emphasis>::PlatformEvent</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>An event generated internally by the state machine. For example, errors.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml">QScxmlEvent</db:link></db:emphasis>::InternalEvent</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An event generated by a <db:code>&lt;raise&gt;</db:code> element.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml">QScxmlEvent</db:link></db:emphasis>::ExternalEvent</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>An event generated by a <db:code>&lt;send&gt;</db:code> element.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="data-prop">
<db:title>data : QVariant</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QVariant</db:type>
<db:varname>data</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">data</db:synopsisinfo>
<db:synopsisinfo role="setter">setData</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the data included by the sender.</db:para>
<db:para>When <db:code>&lt;param&gt;</db:code> elements are used in the <db:code>&lt;send&gt;</db:code> element, the data will contain a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link> where the key is the <db:emphasis>name</db:emphasis> attribute, and the value is taken from the <db:emphasis>expr</db:emphasis> attribute or the <db:emphasis>location</db:emphasis> attribute.</db:para>
<db:para>When a <db:code>&lt;content&gt;</db:code> element is used, the data will contain a single item with either the value of the <db:emphasis>expr</db:emphasis> attribute of the <db:code>&lt;content&gt;</db:code> element or the child data of the <db:code>&lt;content&gt;</db:code> element.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvariant.xml">QVariant</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml#data">data</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml#setData">setData</db:link></db:emphasis>(const <db:type><db:link xlink:href="qvariant.xml">QVariant</db:link></db:type> &amp;<db:emphasis>data</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="delay-prop">
<db:title>delay : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>delay</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">delay</db:synopsisinfo>
<db:synopsisinfo role="setter">setDelay</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the delay in milliseconds after which the event is to be delivered after processing the <db:code>&lt;send&gt;</db:code> element.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml#delay">delay</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml#setDelay">setDelay</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>delayInMiliSecs</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="errorEvent-prop">
<db:title>[read-only] errorEvent : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>errorEvent</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isErrorEvent</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the event represents an error.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml#isErrorEvent">isErrorEvent</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="errorMessage-prop">
<db:title>errorMessage : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>errorMessage</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">errorMessage</db:synopsisinfo>
<db:synopsisinfo role="setter">setErrorMessage</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds an error message for an error event, or an empty <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml#errorMessage">errorMessage</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml#setErrorMessage">setErrorMessage</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>message</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="eventType-prop">
<db:title>eventType : EventType</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>EventType</db:type>
<db:varname>eventType</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">eventType</db:synopsisinfo>
<db:synopsisinfo role="setter">setEventType</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the type of the event.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qscxmlevent.xml#EventType-enum">QScxmlEvent::EventType</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml#eventType">eventType</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml#setEventType">setEventType</db:link></db:emphasis>(const <db:type><db:link xlink:href="qscxmlevent.xml#EventType-enum">QScxmlEvent::EventType</db:link></db:type> &amp;<db:emphasis>type</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="invokeId-prop">
<db:title>invokeId : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>invokeId</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">invokeId</db:synopsisinfo>
<db:synopsisinfo role="setter">setInvokeId</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the ID of the invoked state machine if the event is generated by one.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml#invokeId">invokeId</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml#setInvokeId">setInvokeId</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>invokeid</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="name-prop">
<db:title>name : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>name</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">name</db:synopsisinfo>
<db:synopsisinfo role="setter">setName</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the name of the event.</db:para>
<db:para>If the event is generated inside the SCXML document, this property holds the value of the <db:emphasis>event</db:emphasis> attribute specified inside the <db:code>&lt;raise&gt;</db:code> or <db:code>&lt;send&gt;</db:code> element.</db:para>
<db:para>If the event is created in the C++ code and submitted to the <db:link xlink:href="qscxmlstatemachine.xml">QScxmlStateMachine</db:link>, the value of this property is matched against the value of the <db:emphasis>event</db:emphasis> attribute specified inside the <db:code>&lt;transition&gt;</db:code> element in the SCXML document.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml#name">name</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml#setName">setName</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>name</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="origin-prop">
<db:title>origin : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>origin</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">origin</db:synopsisinfo>
<db:synopsisinfo role="setter">setOrigin</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the URI that points to the origin of an SCXML event.</db:para>
<db:para>The origin is equivalent to the <db:emphasis>target</db:emphasis> attribute of the <db:code>&lt;send&gt;</db:code> element.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml#origin">origin</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml#setOrigin">setOrigin</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>origin</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="originType-prop">
<db:title>originType : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>originType</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">originType</db:synopsisinfo>
<db:synopsisinfo role="setter">setOriginType</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the origin type of an SCXML event.</db:para>
<db:para>The origin type is equivalent to the <db:emphasis>type</db:emphasis> attribute of the <db:code>&lt;send&gt;</db:code> element.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml#originType">originType</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml#setOriginType">setOriginType</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>origintype</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="scxmlType-prop">
<db:title>[read-only] scxmlType : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>scxmlType</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">scxmlType</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the event type.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml#scxmlType">scxmlType</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="sendId-prop">
<db:title>sendId : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>sendId</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">sendId</db:synopsisinfo>
<db:synopsisinfo role="setter">setSendId</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the ID of the event.</db:para>
<db:para>The ID is used by the <db:code>&lt;cancel&gt;</db:code> element to identify the event to be canceled.</db:para>
<db:note>
<db:para>The state machine generates a unique ID if the <db:emphasis>id</db:emphasis> attribute is not specified in the <db:code>&lt;send&gt;</db:code> element. The generated ID can be accessed through this property.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml#sendId">sendId</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscxmlevent.xml#setSendId">setSendId</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>sendid</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QScxmlEvent">
<db:title>QScxmlEvent::QScxmlEvent()</db:title>
<db:constructorsynopsis>
<db:methodname>QScxmlEvent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QScxmlEvent()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new external SCXML event.</db:para>
</db:section>
<db:section xml:id="QScxmlEvent-1">
<db:title>QScxmlEvent::QScxmlEvent(const QScxmlEvent &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QScxmlEvent</db:methodname>
<db:methodparam>
<db:type>const QScxmlEvent &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QScxmlEvent(const QScxmlEvent &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QScxmlEvent">
<db:title>QScxmlEvent::~QScxmlEvent()</db:title>
<db:destructorsynopsis>
<db:methodname>~QScxmlEvent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QScxmlEvent()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the SCXML event.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QScxmlEvent::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the contents of the event.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>QVariant QScxmlEvent::data() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">data</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant data() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the data included by the sender.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qscxmlevent.xml#data-prop">data</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlevent.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="delay">
<db:title>int QScxmlEvent::delay() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>delay</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">delay</db:synopsisinfo>
<db:synopsisinfo role="signature">int delay() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the delay in milliseconds after which this event is to be delivered after processing the <db:code>&lt;send&gt;</db:code> element.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qscxmlevent.xml#delay-prop">delay</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlevent.xml#setDelay">setDelay</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorMessage">
<db:title>QString QScxmlEvent::errorMessage() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>errorMessage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">errorMessage</db:synopsisinfo>
<db:synopsisinfo role="signature">QString errorMessage() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If this is an error event, returns the error message. Otherwise, returns an empty <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qscxmlevent.xml#errorMessage-prop">errorMessage</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlevent.xml#setErrorMessage">setErrorMessage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="eventType">
<db:title>QScxmlEvent::EventType QScxmlEvent::eventType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QScxmlEvent::EventType</db:type>
<db:methodname>eventType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">eventType</db:synopsisinfo>
<db:synopsisinfo role="signature">QScxmlEvent::EventType eventType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of this event.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qscxmlevent.xml#eventType-prop">eventType</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlevent.xml#setEventType">setEventType</db:link>()</db:member>
<db:member><db:link xlink:href="qscxmlevent.xml#EventType-enum">QScxmlEvent::EventType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invokeId">
<db:title>QString QScxmlEvent::invokeId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>invokeId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">invokeId</db:synopsisinfo>
<db:synopsisinfo role="signature">QString invokeId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If this event is generated by an invoked state machine, returns the ID of the <db:code>&lt;invoke&gt;</db:code> element. Otherwise, returns an empty value.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qscxmlevent.xml#invokeId-prop">invokeId</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlevent.xml#setInvokeId">setInvokeId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isErrorEvent">
<db:title>bool QScxmlEvent::isErrorEvent() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isErrorEvent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">errorEvent</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isErrorEvent() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> when this is an error event, <db:code>false</db:code> otherwise.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qscxmlevent.xml#errorEvent-prop">errorEvent</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="name">
<db:title>QString QScxmlEvent::name() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">name</db:synopsisinfo>
<db:synopsisinfo role="signature">QString name() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the event.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qscxmlevent.xml#name-prop">name</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlevent.xml#setName">setName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="origin">
<db:title>QString QScxmlEvent::origin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>origin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">origin</db:synopsisinfo>
<db:synopsisinfo role="signature">QString origin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a URI that points to the origin of an SCXML event.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qscxmlevent.xml#origin-prop">origin</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlevent.xml#setOrigin">setOrigin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="originType">
<db:title>QString QScxmlEvent::originType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>originType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">originType</db:synopsisinfo>
<db:synopsisinfo role="signature">QString originType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the origin type of an SCXML event.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qscxmlevent.xml#originType-prop">originType</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlevent.xml#setOriginType">setOriginType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scxmlType">
<db:title>QString QScxmlEvent::scxmlType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>scxmlType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">scxmlType</db:synopsisinfo>
<db:synopsisinfo role="signature">QString scxmlType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the event type.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qscxmlevent.xml#scxmlType-prop">scxmlType</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="sendId">
<db:title>QString QScxmlEvent::sendId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>sendId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">sendId</db:synopsisinfo>
<db:synopsisinfo role="signature">QString sendId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the ID of the event.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qscxmlevent.xml#sendId-prop">sendId</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlevent.xml#setSendId">setSendId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData">
<db:title>void QScxmlEvent::setData(const QVariant &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">data</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(const QVariant &amp;data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the payload data to <db:code role="parameter">data</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qscxmlevent.xml#data-prop">data</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlevent.xml#data">QScxmlEvent::data</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDelay">
<db:title>void QScxmlEvent::setDelay(int <db:emphasis>delayInMiliSecs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDelay</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>delayInMiliSecs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">delay</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDelay(int delayInMiliSecs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the delay in milliseconds as the value of <db:code role="parameter">delayInMiliSecs</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qscxmlevent.xml#delay-prop">delay</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlevent.xml#delay">QScxmlEvent::delay</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setErrorMessage">
<db:title>void QScxmlEvent::setErrorMessage(const QString &amp;<db:emphasis>message</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setErrorMessage</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">errorMessage</db:synopsisinfo>
<db:synopsisinfo role="signature">void setErrorMessage(const QString &amp;message)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If this is an error event, the <db:code role="parameter">message</db:code> is set as the error message.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qscxmlevent.xml#errorMessage-prop">errorMessage</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlevent.xml#errorMessage">errorMessage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEventType">
<db:title>void QScxmlEvent::setEventType(const QScxmlEvent::EventType &amp;<db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEventType</db:methodname>
<db:methodparam>
<db:type>const QScxmlEvent::EventType &amp;</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">eventType</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEventType(const QScxmlEvent::EventType &amp;type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the event type to <db:code role="parameter">type</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qscxmlevent.xml#eventType-prop">eventType</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlevent.xml#eventType">QScxmlEvent::eventType</db:link></db:member>
<db:member><db:link xlink:href="qscxmlevent.xml#EventType-enum">QScxmlEvent::EventType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setInvokeId">
<db:title>void QScxmlEvent::setInvokeId(const QString &amp;<db:emphasis>invokeid</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setInvokeId</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>invokeid</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">invokeId</db:synopsisinfo>
<db:synopsisinfo role="signature">void setInvokeId(const QString &amp;invokeid)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the ID of an invoked state machine to <db:code role="parameter">invokeid</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qscxmlevent.xml#invokeId-prop">invokeId</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlevent.xml#invokeId">QScxmlEvent::invokeId</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setName">
<db:title>void QScxmlEvent::setName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">name</db:synopsisinfo>
<db:synopsisinfo role="signature">void setName(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the name of the event to <db:code role="parameter">name</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qscxmlevent.xml#name-prop">name</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlevent.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOrigin">
<db:title>void QScxmlEvent::setOrigin(const QString &amp;<db:emphasis>origin</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOrigin</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>origin</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">origin</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOrigin(const QString &amp;origin)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the origin of an SCXML event to <db:code role="parameter">origin</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qscxmlevent.xml#origin-prop">origin</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlevent.xml#origin">QScxmlEvent::origin</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOriginType">
<db:title>void QScxmlEvent::setOriginType(const QString &amp;<db:emphasis>origintype</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOriginType</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>origintype</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">originType</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOriginType(const QString &amp;origintype)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the origin type of an SCXML event to <db:code role="parameter">origintype</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qscxmlevent.xml#originType-prop">originType</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlevent.xml#originType">QScxmlEvent::originType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSendId">
<db:title>void QScxmlEvent::setSendId(const QString &amp;<db:emphasis>sendid</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSendId</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>sendid</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">sendId</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSendId(const QString &amp;sendid)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the ID <db:code role="parameter">sendid</db:code> for this event.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qscxmlevent.xml#sendId-prop">sendId</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlevent.xml#sendId">sendId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QScxmlEvent &amp;QScxmlEvent::operator=(const QScxmlEvent &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QScxmlEvent &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QScxmlEvent &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QScxmlEvent &amp; operator=(const QScxmlEvent &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this SCXML event and returns a reference to this SCXML event.</db:para>
</db:section>
</db:section>
</db:article>
