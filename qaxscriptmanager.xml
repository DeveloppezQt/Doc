<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QAxScriptManager Class</db:title>
<db:productname>ActiveQt</db:productname>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaxscriptmanager.xml">QAxScriptManager</db:link> class provides a bridge between application objects and script code.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAxScriptManager</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qaxscriptmanager.xml">QAxScriptManager</db:link> acts as a bridge between the COM objects embedded in the Qt application through <db:link xlink:href="qaxobject.xml">QAxObject</db:link> or <db:link xlink:href="qaxwidget.xml">QAxWidget</db:link>, and the scripting languages available through the Windows Script technologies, usually JScript and VBScript.</db:para>
<db:para>Create one <db:link xlink:href="qaxscriptmanager.xml">QAxScriptManager</db:link> for each separate document in your application, and add the COM objects the scripts need to access using <db:link xlink:href="qaxscriptmanager.xml#addObject">addObject</db:link>(). Then <db:link xlink:href="qaxscriptmanager.xml#load">load</db:link>() the script sources and invoke the functions using <db:link xlink:href="qaxscriptmanager.xml#call">call</db:link>().</db:para>
<db:warning>
<db:para>This class is not available with the bcc5.5 and MingW compilers.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxscript.xml">QAxScript</db:link></db:member>
<db:member><db:link xlink:href="qaxscriptengine.xml">QAxScriptEngine</db:link></db:member>
<db:member><db:link xlink:href="qaxbase.xml">QAxBase</db:link></db:member>
<db:member><db:link xlink:href="activeqt-index.xml#activeqt-framework">ActiveQt Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAxScriptManager">
<db:title>QAxScriptManager::QAxScriptManager(QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Creates a <db:link xlink:href="qaxscriptmanager.xml">QAxScriptManager</db:link> object. <db:code role="parameter">parent</db:code> is passed on to the QObject constructor.</db:para>
<db:para>It is usual to create one <db:link xlink:href="qaxscriptmanager.xml">QAxScriptManager</db:link> for each document in an application.</db:para>
</db:section>
<db:section xml:id="dtor.QAxScriptManager">
<db:title>[virtual noexcept] QAxScriptManager::~QAxScriptManager()</db:title>
<db:para>Destroys the objects, releasing all allocated resources.</db:para>
</db:section>
<db:section xml:id="addObject">
<db:title>void QAxScriptManager::addObject(QAxBase *<db:emphasis>object</db:emphasis>)</db:title>
<db:para>Adds <db:code role="parameter">object</db:code> to the manager. Scripts handled by this manager can access the object in the code using the object's objectName property.</db:para>
<db:para>You must add all the necessary objects before loading any scripts.</db:para>
</db:section>
<db:section xml:id="addObject-1">
<db:title>void QAxScriptManager::addObject(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds a generic COM wrapper for <db:code role="parameter">object</db:code> to the manager. <db:code role="parameter">object</db:code> must be exposed as a COM object using the functionality provided by the <db:link xlink:href="qaxserver-module.xml">QAxServer</db:link> module. Applications using this function you must link against the qaxserver library.</db:para>
</db:section>
<db:section xml:id="call">
<db:title>QVariant QAxScriptManager::call(const QString &amp;<db:emphasis>function</db:emphasis>, const QVariant &amp;<db:emphasis>var1</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var2</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var3</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var4</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var5</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var6</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var7</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var8</db:emphasis> = QVariant())</db:title>
<db:para>Calls <db:code role="parameter">function</db:code>, passing the parameters <db:code role="parameter">var1</db:code>, <db:code role="parameter">var1</db:code>, <db:code role="parameter">var2</db:code>, <db:code role="parameter">var3</db:code>, <db:code role="parameter">var4</db:code>, <db:code role="parameter">var5</db:code>, <db:code role="parameter">var6</db:code>, <db:code role="parameter">var7</db:code> and <db:code role="parameter">var8</db:code> as arguments and returns the value returned by the function, or an invalid QVariant if the function does not return a value or when the function call failed. The call returns when the script's execution has finished.</db:para>
<db:para>In most script engines the only supported parameter type is &quot;const QVariant&amp;&quot;, for example, to call a JavaScript function</db:para>
<db:programlisting language="cpp">function setNumber(number)
{
    n = number;
}
</db:programlisting>
<db:para>use</db:para>
<db:programlisting language="cpp">QValueList args;
args &lt;&lt; 5;
script-&gt;call(&quot;setNumber(const QVariant&amp;)&quot;, args);
</db:programlisting>
<db:para>As with <db:link xlink:href="qaxbase.xml#dynamicCall">dynamicCall</db:link> the parameters can directly be embedded in the function string.</db:para>
<db:programlisting language="cpp">script-&gt;call(&quot;setNumber(5)&quot;);
</db:programlisting>
<db:para>However, this is slower.</db:para>
<db:para>Functions provided by script engines that don't support introspection are not available and must be called directly using <db:link xlink:href="qaxscript.xml#call">QAxScript::call</db:link>() on the respective <db:link xlink:href="qaxscriptmanager.xml#script">script</db:link> object.</db:para>
<db:para>Note that calling this function can be significantely slower than using call() on the respective <db:link xlink:href="qaxscript.xml">QAxScript</db:link> directly.</db:para>
</db:section>
<db:section xml:id="call-1">
<db:title>QVariant QAxScriptManager::call(const QString &amp;<db:emphasis>function</db:emphasis>, QList&lt;QVariant&gt; &amp;<db:emphasis>arguments</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Calls <db:code role="parameter">function</db:code> passing <db:code role="parameter">arguments</db:code> as parameters, and returns the result. Returns when the script's execution has finished.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>void QAxScriptManager::error(QAxScript *<db:emphasis>script</db:emphasis>, int <db:emphasis>code</db:emphasis>, const QString &amp;<db:emphasis>description</db:emphasis>, int <db:emphasis>sourcePosition</db:emphasis>, const QString &amp;<db:emphasis>sourceText</db:emphasis>)</db:title>
<db:para>This signal is emitted when an execution error occurred while running <db:code role="parameter">script</db:code>.</db:para>
<db:para><db:code role="parameter">code</db:code>, <db:code role="parameter">description</db:code>, <db:code role="parameter">sourcePosition</db:code> and <db:code role="parameter">sourceText</db:code> contain information about the execution error.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">script</db:code> in a slot connected to this signal. Use deleteLater() instead.</db:para>
</db:warning>
</db:section>
<db:section xml:id="functions">
<db:title>QStringList QAxScriptManager::functions(QAxScript::FunctionFlags <db:emphasis>flags</db:emphasis> = QAxScript::FunctionNames) const</db:title>
<db:para>Returns a list with all the functions that are available. Functions provided by script engines that don't support introspection are not included in the list. The functions are either provided with full prototypes or only as names, depending on the value of <db:code role="parameter">flags</db:code>.</db:para>
</db:section>
<db:section xml:id="load">
<db:title>QAxScript *QAxScriptManager::load(const QString &amp;<db:emphasis>code</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>language</db:emphasis>)</db:title>
<db:para>Loads the script source <db:code role="parameter">code</db:code> using the script engine for <db:code role="parameter">language</db:code>. The script can later be referred to using its <db:code role="parameter">name</db:code> which should not be empty.</db:para>
<db:para>The function returns a pointer to the script for the given <db:code role="parameter">code</db:code> if the <db:code role="parameter">code</db:code> was loaded successfully; otherwise it returns 0.</db:para>
<db:para>If <db:code role="parameter">language</db:code> is empty it will be determined heuristically. If <db:code role="parameter">code</db:code> contains the string &quot;End Sub&quot; it will be interpreted as VBScript, otherwise as JScript. Additional script engines can be registered using <db:link xlink:href="qaxscriptmanager.xml#registerEngine">registerEngine</db:link>().</db:para>
<db:para>You must add all the objects necessary (using <db:link xlink:href="qaxscriptmanager.xml#addObject">addObject</db:link>()) <db:emphasis>before</db:emphasis> loading any scripts. If <db:code role="parameter">code</db:code> declares a function that is already available (no matter in which language) the first function is overloaded and can no longer be called via <db:link xlink:href="qaxscriptmanager.xml#call">call</db:link>(); but it will still be available by calling its <db:link xlink:href="qaxscriptmanager.xml#script">script</db:link> directly.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxscriptmanager.xml#addObject">addObject</db:link>()</db:member>
<db:member><db:link xlink:href="qaxscriptmanager.xml#scriptNames">scriptNames</db:link>()</db:member>
<db:member><db:link xlink:href="qaxscriptmanager.xml#functions">functions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="load-1">
<db:title>QAxScript *QAxScriptManager::load(const QString &amp;<db:emphasis>file</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Loads the source code from the <db:code role="parameter">file</db:code>. The script can later be referred to using its <db:code role="parameter">name</db:code> which should not be empty.</db:para>
<db:para>The function returns a pointer to the script engine for the code in <db:code role="parameter">file</db:code> if <db:code role="parameter">file</db:code> was loaded successfully; otherwise it returns 0.</db:para>
<db:para>The script engine used is determined from the file's extension. By default &quot;.js&quot; files are interpreted as JScript files, and &quot;.vbs&quot; and &quot;.dsm&quot; files are interpreted as VBScript. Additional script engines can be registered using <db:link xlink:href="qaxscriptmanager.xml#registerEngine">registerEngine</db:link>().</db:para>
</db:section>
<db:section xml:id="registerEngine">
<db:title>[static] bool QAxScriptManager::registerEngine(const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>extension</db:emphasis>, const QString &amp;<db:emphasis>code</db:emphasis> = QString())</db:title>
<db:para>Registers the script engine called <db:code role="parameter">name</db:code> and returns true if the engine was found; otherwise does nothing and returns false.</db:para>
<db:para>The script engine will be used when loading files with the given <db:code role="parameter">extension</db:code>, or when loading source code that contains the string <db:code role="parameter">code</db:code>.</db:para>
</db:section>
<db:section xml:id="script">
<db:title>QAxScript *QAxScriptManager::script(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns the script called <db:code role="parameter">name</db:code>.</db:para>
<db:para>You can use the returned pointer to call functions directly through <db:link xlink:href="qaxscript.xml#call">QAxScript::call</db:link>(), to access the script engine directly, or to delete and thus unload the script.</db:para>
</db:section>
<db:section xml:id="scriptFileFilter">
<db:title>[static] QString QAxScriptManager::scriptFileFilter()</db:title>
<db:para>Returns a file filter listing all the supported script languages. This filter string is convenient for use with QFileDialog.</db:para>
</db:section>
<db:section xml:id="scriptNames">
<db:title>QStringList QAxScriptManager::scriptNames() const</db:title>
<db:para>Returns a list with the names of all the scripts.</db:para>
</db:section>
</db:section>
</db:article>
