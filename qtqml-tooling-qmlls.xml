<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Language Server</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A tool that helps you write code in your favorite LSP-supporting editor.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>QML Language Server is a tool shipped with Qt that helps you write code in your favorite (LSP-supporting) editor. See <db:link xlink:href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol</db:link> for more information.</db:para>
<db:para>Currently, it enables your editor to:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Autocomplete your code</db:para>
</db:listitem>
<db:listitem>
<db:para>Display qmllint warnings</db:para>
</db:listitem>
<db:listitem>
<db:para>Navigate to definitions in QML files</db:para>
</db:listitem>
<db:listitem>
<db:para>Find usages of JavaScript variables and QML objects</db:para>
</db:listitem>
<db:listitem>
<db:para>Rename JavaScript variables and QML objects</db:para>
</db:listitem>
<db:listitem>
<db:para>Format QML files</db:para>
</db:listitem>
<db:listitem>
<db:para>Get help from Qt Documentation</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>qmlls is currently in development, see <db:link xlink:href="qtqml-tooling-qmlls.xml#known-limitations">Known Limitations</db:link> for more details.</db:para>
</db:note>
<db:section xml:id="supported-features">
<db:title>Supported Features</db:title>
<db:section xml:id="linting">
<db:title>Linting</db:title>
<db:para>QML Language Server can automatically lint opened QML files and display warnings or errors straight in the editor. See <db:link xlink:href="qtqml-tooling-qmllint.xml">qmllint</db:link> for more information about the linting process, and <db:link xlink:href="qmllint-warnings-and-errors.xml">QML Lint Warning and Errors</db:link> on how to fix warnings and errors.</db:para>
</db:section>
<db:section xml:id="formatting">
<db:title>Formatting</db:title>
<db:para>QML Language Server can format entire files from inside the editor. See <db:link xlink:href="qtqml-tooling-qmlformat.xml">qmlformat</db:link> for more information about the formatting process.</db:para>
</db:section>
<db:section xml:id="finding-definitions">
<db:title>Finding Definitions</db:title>
<db:para>QML Language Server can find definitions of JavaScript variables, functions, QML object id's and QML properties from their usages.</db:para>
<db:para>QML Language Server can also find the definition of types used in type annotations for JavaScript functions, QML object properties, and QML object instantiation.</db:para>
</db:section>
<db:section xml:id="finding-usages">
<db:title>Finding Usages</db:title>
<db:para>QML Language Server can find usages of JavaScript variables, QML object properties, JavaScript functions, QML object methods, and QML object id's.</db:para>
</db:section>
<db:section xml:id="renaming">
<db:title>Renaming</db:title>
<db:para>QML Language Server can rename JavaScript variables and functions, as well as QML object properties, methods, and id's, as long as they are defined in a QML file.</db:para>
</db:section>
<db:section xml:id="suggesting-autocompletion-items">
<db:title>Suggesting Autocompletion Items</db:title>
<db:para>QML Language Server provides autocompletion suggestions for JavaScript variables, expressions, and statements, as well as QML object properties, methods, and id's.</db:para>
</db:section>
<db:section xml:id="tracking-changes-in-c-files">
<db:title>Tracking Changes in C++ Files</db:title>
<db:para>QML Language Server can track changes in C++ files defining QML types. It automatically rebuilds CMake QML modules to provide accurate and up-to-date warnings and completion items for C++ defined QML types.</db:para>
<db:para>You can <db:link xlink:href="qtqml-tooling-qmlls.xml#disabling-automatic-cmake-builds">disable this feature</db:link>.</db:para>
</db:section>
<db:section xml:id="documentation-hints">
<db:title>Documentation Hints</db:title>
<db:para>QML Language Server includes a documentation hints feature that provides programmers with quick access to Qtâ€™s documentation by hovering over a keyword. In order to use this feature, your Qt kit should contain the Qt documentation and your project should be built with <db:link xlink:href="cmake-variable-qt-qml-generate-qmlls-ini.xml">QT_QML_GENERATE_QMLLS_INI</db:link> variable.</db:para>
</db:section>
</db:section>
<db:section xml:id="setting-up-the-qml-language-server-in-your-editor">
<db:title>Setting up the QML Language Server in Your Editor</db:title>
<db:note>
<db:para>You can find the QML Language Server binary under &lt;Qt installation folder&gt;/bin/qmlls in installations of Qt made with Qt Online Installer.</db:para>
</db:note>
<db:section xml:id="setting-up-the-build-directory">
<db:title>Setting up the Build Directory</db:title>
<db:para>QML Language Server needs to know the location of your build folder. You can pass it in the following ways:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The --build-dir command line option. In this case your editor should invoke qmlls as following:</db:para>
<db:programlisting language="cpp" role="bad">&lt;path/to/qmlls&gt; ... --build-dir &lt;path/to/build-directory&gt; ...
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>The QMLLS_BUILD_DIRS environment variable.</db:para>
</db:listitem>
<db:listitem>
<db:para>The .qmlls.ini settings file, see <db:link xlink:href="qtqml-tooling-qmlls.xml#configuration-file">Configuration File</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>When the build directory is specified in multiple ways, the command line option takes preference over the environment variable that takes precedence over the setting file.</db:para>
</db:note>
</db:section>
<db:section xml:id="setting-up-the-import-paths">
<db:title>Setting up the import paths</db:title>
<db:para>QML Language Server needs to know the import paths of the Qt version that you are using in your project. You can pass the import paths in the following ways:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The -I command line option. In this case your editor should invoke qmlls as following:</db:para>
<db:programlisting language="cpp" role="bad">&lt;path/to/qmlls&gt; ... -I /path/to/imports -I /optional/path/to/another/import ...
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>The QML_IMPORT_PATH environment variable. In this case you should pass the -E option to QML Language Server.</db:para>
</db:listitem>
<db:listitem>
<db:para>The .qmlls.ini settings file, see <db:link xlink:href="qtqml-tooling-qmlls.xml#configuration-file">Configuration File</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>When the import path is specified in multiple ways, the command line option takes preference over the environment variable that takes precedence over the setting file.</db:para>
</db:note>
</db:section>
<db:section xml:id="setting-up-the-documentation-path">
<db:title>Setting up the documentation path</db:title>
<db:para>QML Language Server can show documentation hints when it knows the documentation path of the Qt version that you are using in your project. You can pass the documentation path in the following ways:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The -d or -p command line option. In this case your editor should invoke qmlls as following:</db:para>
<db:programlisting language="cpp" role="bad">&lt;path/to/qmlls&gt; ... -d /path/to/docs ...
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>The .qmlls.ini settings file, see <db:link xlink:href="qtqml-tooling-qmlls.xml#configuration-file">Configuration File</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>When the documentation path is specified in multiple ways, the command line option takes preference over the environment variable that takes precedence over the setting file.</db:para>
</db:note>
</db:section>
<db:section xml:id="disabling-automatic-cmake-builds">
<db:title>Disabling Automatic CMake Builds</db:title>
<db:para>qmlls will try to trigger a CMake rebuild when it detects that the source code of a C++ defined QML type has been modified.</db:para>
<db:para>To disable this feature, use the following ways:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The --no-cmake-calls command line option. In this case your editor should invoke qmlls as follows:</db:para>
<db:programlisting language="cpp" role="bad">&lt;path/to/qmlls&gt; --build-dir &lt;path/to/build-directory&gt; --no-cmake-calls
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>The QMLLS_NO_CMAKE_CALLS environment variable.</db:para>
</db:listitem>
<db:listitem>
<db:para>The .qmlls.ini settings file, see <db:link xlink:href="qtqml-tooling-qmlls.xml#configuration-file">Configuration File</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="configuration-file">
<db:title>Configuration File</db:title>
<db:para>QML Language Server can be configured via a configuration file .qmlls.ini. This file should be in the root source directory of the project. It should be a text file in the ini-format.</db:para>
<db:note>
<db:para>.qmlls.ini files can be generated automatically via <db:link xlink:href="cmake-variable-qt-qml-generate-qmlls-ini.xml">QT_QML_GENERATE_QMLLS_INI</db:link>.</db:para>
</db:note>
<db:para>The configuration file should look like this:</db:para>
<db:programlisting language="cpp">// .qmlls.ini
[General]
buildDir=&lt;path/to/build-directory&gt;
no-cmake-calls=&lt;true-or-false&gt;
docDir=&lt;path/to/qt-documentation&gt;
importPaths=&lt;path/to/imports&gt;
</db:programlisting>
<db:para>Currently, the configuration file can be used to set the build directory of the current project and optionally disable the automatic CMake rebuild functionality for C++ defined QML types.</db:para>
<db:note>
<db:para>QML Language Server can create default configuration files using the --write-defaults option. This will overwrite an already existing .qmlls.ini file in the current directory.</db:para>
</db:note>
</db:section>
<db:section xml:id="known-limitations">
<db:title>Known Limitations</db:title>
<db:para>Despite covering many common QML features, QML Language Server is still in development with some features yet to be supported:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Suggesting autocompletions on invalid QML files.</db:para>
</db:listitem>
<db:listitem>
<db:para>Navigating to definitions of objects defined in C++.</db:para>
</db:listitem>
<db:listitem>
<db:para>Autocompleting context properties</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>QML Language Server might emit false positive warnings on projects</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>using QMake or imperative type registrationâ€”see <db:link xlink:href="qt6-port-to-qt-add-qml-module.xml">Port QML modules to CMake</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>that were not builtâ€”QML Language Server uses the build information to find QML modules</db:para>
</db:listitem>
<db:listitem>
<db:para>where QML modules don't follow the guidelines in <db:link xlink:href="qt6-modernize-qml-modules.xml">Modern QML modules</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>not using <db:link xlink:href="cmake-variable-qt-qml-generate-qmlls-ini.xml">QT_QML_GENERATE_QMLLS_INI</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
