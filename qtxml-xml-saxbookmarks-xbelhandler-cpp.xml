<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SAX Bookmarks Example</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to read XBEL files.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;

#include &quot;xbelhandler.h&quot;

static inline QString versionAttribute() { return QStringLiteral(&quot;version&quot;); }
static inline QString hrefAttribute() { return QStringLiteral(&quot;href&quot;); }
static inline QString foldedAttribute() { return QStringLiteral(&quot;folded&quot;); }

XbelHandler::XbelHandler(QTreeWidget *treeWidget)
    : treeWidget(treeWidget)
{
    item = 0;
    metXbelTag = false;

    QStyle *style = treeWidget-&amp;gt;style();

    folderIcon.addPixmap(style-&amp;gt;standardPixmap(QStyle::SP_DirClosedIcon),
                         QIcon::Normal, QIcon::Off);
    folderIcon.addPixmap(style-&amp;gt;standardPixmap(QStyle::SP_DirOpenIcon),
                         QIcon::Normal, QIcon::On);
    bookmarkIcon.addPixmap(style-&amp;gt;standardPixmap(QStyle::SP_FileIcon));
}

bool XbelHandler::startElement(const QString &amp;amp; /* namespaceURI */,
                               const QString &amp;amp; /* localName */,
                               const QString &amp;amp;qName,
                               const QXmlAttributes &amp;amp;attributes)
{
    if (!metXbelTag &amp;amp;&amp;amp; qName != QLatin1String(&quot;xbel&quot;)) {
        errorStr = QObject::tr(&quot;The file is not an XBEL file.&quot;);
        return false;
    }

    if (qName == QLatin1String(&quot;xbel&quot;)) {
        QString version = attributes.value(versionAttribute());
        if (!version.isEmpty() &amp;amp;&amp;amp; version != QLatin1String(&quot;1.0&quot;)) {
            errorStr = QObject::tr(&quot;The file is not an XBEL version 1.0 file.&quot;);
            return false;
        }
        metXbelTag = true;
    } else if (qName == QLatin1String(&quot;folder&quot;)) {
        item = createChildItem(qName);
        item-&amp;gt;setFlags(item-&amp;gt;flags() | Qt::ItemIsEditable);
        item-&amp;gt;setIcon(0, folderIcon);
        item-&amp;gt;setText(0, QObject::tr(&quot;Folder&quot;));
        bool folded = (attributes.value(foldedAttribute()) != QLatin1String(&quot;no&quot;));
        treeWidget-&amp;gt;setItemExpanded(item, !folded);
    } else if (qName == QLatin1String(&quot;bookmark&quot;)) {
        item = createChildItem(qName);
        item-&amp;gt;setFlags(item-&amp;gt;flags() | Qt::ItemIsEditable);
        item-&amp;gt;setIcon(0, bookmarkIcon);
        item-&amp;gt;setText(0, QObject::tr(&quot;Unknown title&quot;));
        item-&amp;gt;setText(1, attributes.value(hrefAttribute()));
    } else if (qName == QLatin1String(&quot;separator&quot;)) {
        item = createChildItem(qName);
        item-&amp;gt;setFlags(item-&amp;gt;flags() &amp;amp; ~Qt::ItemIsSelectable);
        item-&amp;gt;setText(0, QString(30, 0xB7));
    }

    currentText.clear();
    return true;
}

bool XbelHandler::endElement(const QString &amp;amp; /* namespaceURI */,
                             const QString &amp;amp; /* localName */,
                             const QString &amp;amp;qName)
{
    if (qName == QLatin1String(&quot;title&quot;)) {
        if (item)
            item-&amp;gt;setText(0, currentText);
    } else if (qName == QLatin1String(&quot;folder&quot;) || qName == QLatin1String(&quot;bookmark&quot;)
               || qName == QLatin1String(&quot;separator&quot;)) {
        item = item-&amp;gt;parent();
    }
    return true;
}

bool XbelHandler::characters(const QString &amp;amp;str)
{
    currentText += str;
    return true;
}

bool XbelHandler::fatalError(const QXmlParseException &amp;amp;exception)
{
    QMessageBox::information(treeWidget-&amp;gt;window(), QObject::tr(&quot;SAX Bookmarks&quot;),
                             QObject::tr(&quot;Parse error at line %1, column %2:\n&quot;
                                         &quot;%3&quot;)
                             .arg(exception.lineNumber())
                             .arg(exception.columnNumber())
                             .arg(exception.message()));
    return false;
}

QString XbelHandler::errorString() const
{
    return errorStr;
}

QTreeWidgetItem *XbelHandler::createChildItem(const QString &amp;amp;tagName)
{
    QTreeWidgetItem *childItem;
    if (item) {
        childItem = new QTreeWidgetItem(item);
    } else {
        childItem = new QTreeWidgetItem(treeWidget);
    }
    childItem-&amp;gt;setData(0, Qt::UserRole, tagName);
    return childItem;
}

</db:programlisting>
</db:article>
