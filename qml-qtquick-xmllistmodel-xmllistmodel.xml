<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>XmlListModel QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>For specifying a read-only model using XPath expressions.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.XmlListModel 2.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>XmlListModel is part of <db:simplelist><db:member>qtquick-models</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>To use this element, you will need to import the module with the following line:</db:para>
<db:programlisting language="cpp">import QtQuick.XmlListModel 2.0
</db:programlisting>
<db:para><db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link> is used to create a read-only model from XML data. It can be used as a data source for view elements (such as <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>, <db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link>, <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>) and other elements that interact with model data (such as <db:link xlink:href="qml-qtquick-repeater.xml">Repeater</db:link>).</db:para>
<db:para>For example, if there is a XML document at http://www.mysite.com/feed.xml like this:</db:para>
<db:programlisting language="cpp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;rss version=&quot;2.0&quot;&gt;
    ...
    &lt;channel&gt;
        &lt;item&gt;
            &lt;title&gt;A blog post&lt;/title&gt;
            &lt;pubDate&gt;Sat, 07 Sep 2010 10:00:01 GMT&lt;/pubDate&gt;
        &lt;/item&gt;
        &lt;item&gt;
            &lt;title&gt;Another blog post&lt;/title&gt;
            &lt;pubDate&gt;Sat, 07 Sep 2010 15:35:01 GMT&lt;/pubDate&gt;
        &lt;/item&gt;
    &lt;/channel&gt;
&lt;/rss&gt;
</db:programlisting>
<db:para>A <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link> could create a model from this data, like this:</db:para>
<db:programlisting language="qml">import QtQuick 2.0
import QtQuick.XmlListModel 2.0

XmlListModel {
    id: xmlModel
    source: &quot;http://www.mysite.com/feed.xml&quot;
    query: &quot;/rss/channel/item&quot;

    XmlRole { name: &quot;title&quot;; query: &quot;title/string()&quot; }
    XmlRole { name: &quot;pubDate&quot;; query: &quot;pubDate/string()&quot; }
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml#query-prop">query</db:link> value of &quot;/rss/channel/item&quot; specifies that the <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link> should generate a model item for each <db:code>&lt;item&gt;</db:code> in the XML document.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick-xmllistmodel-xmlrole.xml">XmlRole</db:link> objects define the model item attributes. Here, each model item will have <db:code>title</db:code> and <db:code>pubDate</db:code> attributes that match the <db:code>title</db:code> and <db:code>pubDate</db:code> values of its corresponding <db:code>&lt;item&gt;</db:code>. (See <db:link xlink:href="qml-qtquick-xmllistmodel-xmlrole.xml#query-prop">XmlRole::query</db:link> for more examples of valid XPath expressions for <db:link xlink:href="qml-qtquick-xmllistmodel-xmlrole.xml">XmlRole</db:link>.)</db:para>
<db:para>The model could be used in a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>, like this:</db:para>
<db:programlisting language="qml">ListView {
    width: 180; height: 300
    model: xmlModel
    delegate: Text { text: title + &quot;: &quot; + pubDate }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-xmllistmodel-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link> data is loaded asynchronously, and <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml#status-prop">status</db:link> is set to <db:code>XmlListModel.Ready</db:code> when loading is complete. Note this means when <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link> is used for a view, the view is not populated until the model is loaded.</db:para>
<db:section xml:id="using-key-xml-roles">
<db:title>Using key XML roles</db:title>
<db:para>You can define certain roles as &quot;keys&quot; so that when <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml#reload-method">reload</db:link>() is called, the model will only add and refresh data that contains new values for these keys.</db:para>
<db:para>For example, if above role for &quot;pubDate&quot; was defined like this instead:</db:para>
<db:programlisting language="qml">XmlRole { name: &quot;pubDate&quot;; query: &quot;pubDate/string()&quot;; isKey: true }
</db:programlisting>
<db:para>Then when <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml#reload-method">reload</db:link>() is called, the model will only add and reload items with a &quot;pubDate&quot; value that is not already present in the model.</db:para>
<db:para>This is useful when displaying the contents of XML documents that are incrementally updated (such as RSS feeds) to avoid repainting the entire contents of a model in a view.</db:para>
<db:para>If multiple key roles are specified, the model only adds and reload items with a combined value of all key roles that is not already present in the model.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-demos-rssnews-example.xml">Qt Quick Demo - RSS News</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="count-prop">
<db:title>[read-only] count : int</db:title>
<db:para>The number of data entries in the model.</db:para>
</db:section>
<db:section xml:id="namespaceDeclarations-prop">
<db:title>namespaceDeclarations : string</db:title>
<db:para>The namespace declarations to be used in the XPath queries.</db:para>
<db:para>The namespaces should be declared as in XQuery. For example, if a requested document at http://mysite.com/feed.xml uses the namespace &quot;http://www.w3.org/2005/Atom&quot;, this can be declared as the default namespace:</db:para>
<db:programlisting language="qml">XmlListModel {
    source: &quot;http://mysite.com/feed.xml&quot;
    query: &quot;/feed/entry&quot;
    namespaceDeclarations: &quot;declare default element namespace 'http://www.w3.org/2005/Atom';&quot;

    XmlRole { name: &quot;title&quot;; query: &quot;title/string()&quot; }
}
</db:programlisting>
</db:section>
<db:section xml:id="progress-prop">
<db:title>[read-only] progress : real</db:title>
<db:para>This indicates the current progress of the downloading of the XML data source. This value ranges from 0.0 (no data downloaded) to 1.0 (all data downloaded). If the XML data is not from a remote source, the progress becomes 1.0 as soon as the data is read.</db:para>
<db:para>Note that when the progress is 1.0, the XML data has been downloaded, but it is yet to be loaded into the model at this point. Use the status property to find out when the XML data has been read and loaded into the model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml#status-prop">status</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml#source-prop">source</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="query-prop">
<db:title>query : string</db:title>
<db:para>An absolute XPath query representing the base query for creating model items from this model's <db:link xlink:href="qml-qtquick-xmllistmodel-xmlrole.xml">XmlRole</db:link> objects. The query should start with '/' or '//'.</db:para>
</db:section>
<db:section xml:id="roles-prop">
<db:title>[read-only] roles : list&lt;XmlRole&gt;</db:title>
<db:para>The roles to make available for this model.</db:para>
</db:section>
<db:section xml:id="source-prop">
<db:title>source : url</db:title>
<db:para>The location of the XML data source.</db:para>
<db:para>If both <db:code>source</db:code> and <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml#xml-prop">xml</db:link> are set, <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml#xml-prop">xml</db:link> is used.</db:para>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : enumeration</db:title>
<db:para>Specifies the model loading status, which can be one of the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link>.Null - No XML data has been set for this model.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link>.Ready - The XML data has been loaded into the model.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link>.Loading - The model is in the process of reading and loading XML data.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link>.Error - An error occurred while the model was loading. See <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml#errorString-method">errorString</db:link>() for details about the error.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml#progress-prop">progress</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="xml-prop">
<db:title>xml : string</db:title>
<db:para>This property holds the XML data for this model, if set.</db:para>
<db:para>The text is assumed to be UTF-8 encoded.</db:para>
<db:para>If both <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml#source-prop">source</db:link> and <db:code>xml</db:code> are set, <db:code>xml</db:code> is used.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="errorString-method">
<db:title>errorString()</db:title>
<db:para>Returns a string description of the last error that occurred if <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml#status-prop">status</db:link> is XmlListModel::Error.</db:para>
</db:section>
<db:section xml:id="get-method">
<db:title>object get(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns the item at <db:code role="parameter">index</db:code> in the model.</db:para>
<db:para>For example, for a model like this:</db:para>
<db:programlisting language="qml">XmlListModel {
    id: model
    source: &quot;http://mysite.com/feed.xml&quot;
    query: &quot;/feed/entry&quot;
    XmlRole { name: &quot;title&quot;; query: &quot;title/string()&quot; }
}
</db:programlisting>
<db:para>This will access the <db:code>title</db:code> value for the first item in the model:</db:para>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>js</db:code></db:emphasis>var title = model.get(0).title; <db:emphasis role="bold">&lt;Unknown command&gt;<db:code>endjs</db:code></db:emphasis></db:para>
</db:section>
<db:section xml:id="reload-method">
<db:title>reload()</db:title>
<db:para>Reloads the model.</db:para>
<db:para>If no key roles have been specified, all existing model data is removed, and the model is rebuilt from scratch.</db:para>
<db:para>Otherwise, items are only added if the model does not already contain items with matching key role values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml#using-key-xml-roles">Using key XML roles</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-xmllistmodel-xmlrole.xml#isKey-prop">XmlRole::isKey</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
