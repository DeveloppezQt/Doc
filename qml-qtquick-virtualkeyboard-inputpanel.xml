<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>InputPanel QML Type</db:title>
<db:productname>QtVirtualKeyboard</db:productname>
<db:edition>Qt Virtual Keyboard | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Virtual Keyboard</db:titleabbrev>
<db:abstract>
<db:para>Provides the virtual keyboard UI.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.VirtualKeyboard</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Item</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>InputPanel is part of <db:simplelist><db:member>qmlclass</db:member><db:member>qtvirtualkeyboard-qml</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The keyboard size is automatically calculated from the available width; that is, the keyboard maintains the aspect ratio specified by the current style. Therefore the application should only set the <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link> and <db:link xlink:href="qml-qtquick-item.xml#y-prop">y</db:link> coordinates of the <db:link xlink:href="qml-qtquick-virtualkeyboard-inputpanel.xml">InputPanel</db:link>, and not the <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link>.</db:para>
<db:para>As with <db:link xlink:href="qtvirtualkeyboard-qmltypes.xml">all other QML types</db:link> provided by the module, the <db:code>QT_IM_MODULE</db:code> environment variable must be set to <db:code>qtvirtualkeyboard</db:code> before using <db:link xlink:href="qml-qtquick-virtualkeyboard-inputpanel.xml">InputPanel</db:link>. For more information, see <db:link xlink:href="qtvirtualkeyboard-deployment-guide.xml#loading-the-plugin">Loading the Plugin</db:link>.</db:para>
<db:note>
<db:para>You can have only one <db:link xlink:href="qml-qtquick-virtualkeyboard-inputpanel.xml">InputPanel</db:link> instance in your application. The panel will not be blocked by modal dialogs, but it can be obscured by items with a higher <db:link xlink:href="qml-qtquick-item.xml#z-prop">z</db:link> value.</db:para>
</db:note>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="active-prop">
<db:title>[since QtQuick.VirtualKeyboard 2.0] active : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>active</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property reflects the active status of the input panel. The keyboard should be made visible to the user when this property is <db:code>true</db:code>.</db:para>
<db:para>This property was introduced in QtQuick.VirtualKeyboard 2.0.</db:para>
</db:section>
<db:section xml:id="externalLanguageSwitchEnabled-prop">
<db:title>[since QtQuick.VirtualKeyboard 2.4] externalLanguageSwitchEnabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>externalLanguageSwitchEnabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property enables the external language switch mechanism. When this property is <db:code>true</db:code>, the virtual keyboard will not show the built-in language popup, but will emit the <db:link xlink:href="qml-qtquick-virtualkeyboard-inputpanel.xml#externalLanguageSwitch-signal">externalLanguageSwitch</db:link> signal instead. The application can handle this signal and show a custom language selection dialog instead.</db:para>
<db:para>This property was introduced in QtQuick.VirtualKeyboard 2.4.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="externalLanguageSwitch-signal">
<db:title>[since QtQuick.VirtualKeyboard 2.4] externalLanguageSwitch(var <db:emphasis>localeList</db:emphasis>, int <db:emphasis>currentIndex</db:emphasis>)</db:title>
<db:para>This signal is emitted when <db:link xlink:href="qml-qtquick-virtualkeyboard-inputpanel.xml#externalLanguageSwitchEnabled-prop">externalLanguageSwitchEnabled</db:link> is <db:code>true</db:code> and the <db:link xlink:href="qtvirtualkeyboard-user-guide.xml#user-guide-language">language switch key</db:link> is pressed by the user.</db:para>
<db:para>It serves as a hook to display a custom language dialog instead of the built-in language popup in the virtual keyboard.</db:para>
<db:para>The <db:code role="parameter">localeList</db:code> parameter contains a list of locale names to choose from. To get more information about a particular language, use the <db:link xlink:href="qml-qtqml-qt.xml#locale-method">Qt.locale</db:link>() function. The <db:code role="parameter">currentIndex</db:code> is the index of current locale in the <db:code role="parameter">localeList</db:code>. This item should be highlighted as the current item in the UI.</db:para>
<db:para>To select a new language, use the <db:link xlink:href="qml-qtquick-virtualkeyboard-settings-virtualkeyboardsettings.xml#locale-prop">VirtualKeyboardSettings.locale</db:link> property.</db:para>
<db:para>Below is an example that demonstrates a custom language dialog implementation:</db:para>
<db:programlisting language="qml">Dialog {
    id: languageDialog
    title: &quot;Select Input Language&quot;
    modality: Qt.ApplicationModal

    function show(localeList, currentIndex) {
        languageListModel.clear()
        for (var i = 0; i &amp;lt; localeList.length; i++) {
            languageListModel.append({localeName: localeList[i], displayName: Qt.locale(localeList[i]).nativeLanguageName})
        }
        languageListView.currentIndex = currentIndex
        languageListView.positionViewAtIndex(currentIndex, ListView.Center)
        languageDialog.visible = true
    }

    contentItem: ListView {
        id: languageListView
        model: ListModel {
            id: languageListModel
            function selectItem(index) {
                VirtualKeyboardSettings.locale = languageListModel.get(index).localeName
                languageDialog.visible = false
            }
        }
        delegate: Item {
            id: languageListItem
            width: languageNameTextMetrics.width * 17
            height: languageNameTextMetrics.height + languageListLabel.anchors.topMargin + languageListLabel.anchors.bottomMargin
            Text {
                id: languageListLabel
                anchors.left: parent.left
                anchors.top: parent.top
                anchors.leftMargin: languageNameTextMetrics.height / 2
                anchors.rightMargin: anchors.leftMargin
                anchors.topMargin: languageNameTextMetrics.height / 3
                anchors.bottomMargin: anchors.topMargin
                text: languageNameFormatter.elidedText
                color: &quot;#5CAA15&quot;
                font {
                    weight: Font.Normal
                    pixelSize: 28
                }
            }
            TextMetrics {
                id: languageNameTextMetrics
                font {
                    weight: Font.Normal
                    pixelSize: 28
                }
                text: &quot;X&quot;
            }
            TextMetrics {
                id: languageNameFormatter
                font {
                    weight: Font.Normal
                    pixelSize: 28
                }
                elide: Text.ElideRight
                elideWidth: languageListItem.width - languageListLabel.anchors.leftMargin - languageListLabel.anchors.rightMargin
                text: displayName
            }
            MouseArea {
                anchors.fill: parent
                hoverEnabled: true
                onClicked: {
                    if (index === -1)
                        return
                    parent.ListView.view.currentIndex = index
                    parent.ListView.view.model.selectItem(index)
                }
            }
            states: State {
                name: &quot;current&quot;
                when: languageListItem.ListView.isCurrentItem
                PropertyChanges {
                    target: languageListLabel
                    color: &quot;black&quot;
                }
            }
        }
    }
}
</db:programlisting>
<db:para>The dialog would then be declared:</db:para>
<db:programlisting language="qml">LanguageDialog {
    id: languageDialog
    width: 400
    height: 400
}
</db:programlisting>
<db:para>In the application's <db:link xlink:href="qml-qtquick-virtualkeyboard-inputpanel.xml">InputPanel</db:link>, add the following code:</db:para>
<db:programlisting language="qml">InputPanel {
    id: inputPanel
    externalLanguageSwitchEnabled: true
    onExternalLanguageSwitch: languageDialog.show(localeList, currentIndex)
    // ...
}
</db:programlisting>
<db:para>The custom dialog will now be shown when the language switch key is pressed.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onExternalLanguageSwitch</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtQuick.VirtualKeyboard 2.4.</db:para>
</db:section>
</db:section>
</db:article>
