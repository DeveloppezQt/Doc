<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Chapter 5: Using List Property Types</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt QML Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Right now, a <db:code>PieChart</db:code> can only have one <db:code>PieSlice</db:code>. Ideally a chart would have multiple slices, with different colors and sizes. To do this, we could have a <db:code>slices</db:code> property that accepts a list of <db:code>PieSlice</db:code> items:</db:para>
<db:programlisting language="qml">import Charts 1.0
import QtQuick 2.0

Item {
    width: 300; height: 200

    PieChart {
        anchors.centerIn: parent
        width: 100; height: 100

        slices: [
            PieSlice {
                anchors.fill: parent
                color: &quot;red&quot;
                fromAngle: 0; angleSpan: 110
            },
            PieSlice {
                anchors.fill: parent
                color: &quot;black&quot;
                fromAngle: 110; angleSpan: 50
            },
            PieSlice {
                anchors.fill: parent
                color: &quot;blue&quot;
                fromAngle: 160; angleSpan: 100
            }
        ]
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/extending-tutorial-chapter5.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>To do this, we replace the <db:code>pieSlice</db:code> property in <db:code>PieChart</db:code> with a <db:code>slices</db:code> property, declared as a <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> type. The <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> class enables the creation of list properties in QML extensions. We replace the <db:code>pieSlice()</db:code> function with a <db:code>slices()</db:code> function that returns a list of slices, and add an internal <db:code>append_slice()</db:code> function (discussed below). We also use a <db:link xlink:href="qlist.xml">QList</db:link> to store the internal list of slices as <db:code>m_slices</db:code>:</db:para>
<db:programlisting language="cpp">class PieChart : public QQuickItem
{
    Q_OBJECT
    Q_PROPERTY(QQmlListProperty&lt;PieSlice&gt; slices READ slices)
    ...
public:
    ...
    QQmlListProperty&lt;PieSlice&gt; slices();

private:
    static void append_slice(QQmlListProperty&lt;PieSlice&gt; *list, PieSlice *slice);

    QString m_name;
    QList&lt;PieSlice *&gt; m_slices;
};
</db:programlisting>
<db:para>Although the <db:code>slices</db:code> property does not have an associated <db:code>WRITE</db:code> function, it is still modifiable because of the way <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> works. In the <db:code>PieChart</db:code> implementation, we implement <db:code>PieChart::slices()</db:code> to return a <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> value and indicate that the internal <db:code>PieChart::append_slice()</db:code> function is to be called whenever a request is made from QML to add items to the list:</db:para>
<db:programlisting language="cpp">QQmlListProperty&lt;PieSlice&gt; PieChart::slices()
{
    return QQmlListProperty&lt;PieSlice&gt;(this, 0, &amp;PieChart::append_slice, 0, 0, 0);
}

void PieChart::append_slice(QQmlListProperty&lt;PieSlice&gt; *list, PieSlice *slice)
{
    PieChart *chart = qobject_cast&lt;PieChart *&gt;(list-&gt;object);
    if (chart) {
        slice-&gt;setParentItem(chart);
        chart-&gt;m_slices.append(slice);
    }
}
</db:programlisting>
<db:para>The <db:code>append_slice()</db:code> function simply sets the parent item as before, and adds the new item to the <db:code>m_slices</db:code> list. As you can see, the append function for a <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> is called with two arguments: the list property, and the item that is to be appended.</db:para>
<db:para>The <db:code>PieSlice</db:code> class has also been modified to include <db:code>fromAngle</db:code> and <db:code>angleSpan</db:code> properties and to draw the slice according to these values. This is a straightforward modification if you have read the previous pages in this tutorial, so the code is not shown here.</db:para>
<db:para>The complete code can be seen in the updated <db:code>examples/qml/tutorials/extending/chapter5-listproperties</db:code> directory.</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="tutorials/extending/chapter5-listproperties/app.qml">tutorials/extending/chapter5-listproperties/app.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/extending/chapter5-listproperties/chapter5-listproperties.pro">tutorials/extending/chapter5-listproperties/chapter5-listproperties.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/extending/chapter5-listproperties/chapter5-listproperties.qrc">tutorials/extending/chapter5-listproperties/chapter5-listproperties.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/extending/chapter5-listproperties/main.cpp">tutorials/extending/chapter5-listproperties/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/extending/chapter5-listproperties/piechart.cpp">tutorials/extending/chapter5-listproperties/piechart.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/extending/chapter5-listproperties/piechart.h">tutorials/extending/chapter5-listproperties/piechart.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/extending/chapter5-listproperties/pieslice.cpp">tutorials/extending/chapter5-listproperties/pieslice.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/extending/chapter5-listproperties/pieslice.h">tutorials/extending/chapter5-listproperties/pieslice.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
