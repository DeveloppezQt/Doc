<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWebEngineContextMenuData Class</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link> class provides context data for populating or extending a context menu with actions.</db:para>
<db:para>This class was introduced in Qt 5.7.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWebEngineContextMenuData</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += webenginewidgets</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link> is returned by <db:link xlink:href="qwebenginepage.xml#contextMenuData">QWebEnginePage::contextMenuData</db:link>() after a context menu event, and contains information about where the context menu event took place. This is also in the context in which any context specific <db:link xlink:href="qwebenginepage.xml#WebAction-enum">QWebEnginePage::WebAction</db:link> will be performed.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="EditFlag-enum">
<db:title>[since 5.11] enum QWebEngineContextMenuData::EditFlag</db:title>
<db:bridgehead renderas="sect2">flags QWebEngineContextMenuData::EditFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>EditFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>CanUndo</db:enumidentifier>
<db:enumvalue>0x1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CanRedo</db:enumidentifier>
<db:enumvalue>0x2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CanCut</db:enumidentifier>
<db:enumvalue>0x4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CanCopy</db:enumidentifier>
<db:enumvalue>0x8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CanPaste</db:enumidentifier>
<db:enumvalue>0x10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CanDelete</db:enumidentifier>
<db:enumvalue>0x20</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CanSelectAll</db:enumidentifier>
<db:enumvalue>0x40</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CanTranslate</db:enumidentifier>
<db:enumvalue>0x80</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CanEditRichly</db:enumidentifier>
<db:enumvalue>0x100</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QWebEngineContextMenuData::EditFlags</db:typedefname>
</db:typedefsynopsis>
<db:para>The available edit operations in the current context.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::CanUndo</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>Undo is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::CanRedo</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>Redo is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::CanCut</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>Cut is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::CanCopy</db:code></db:para>
</db:td>
<db:td><db:code>0x8</db:code></db:td>
<db:td>
<db:para>Copy is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::CanPaste</db:code></db:para>
</db:td>
<db:td><db:code>0x10</db:code></db:td>
<db:td>
<db:para>Paste is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::CanDelete</db:code></db:para>
</db:td>
<db:td><db:code>0x20</db:code></db:td>
<db:td>
<db:para>Delete is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::CanSelectAll</db:code></db:para>
</db:td>
<db:td><db:code>0x40</db:code></db:td>
<db:td>
<db:para>Select All is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::CanTranslate</db:code></db:para>
</db:td>
<db:td><db:code>0x80</db:code></db:td>
<db:td>
<db:para>Translate is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::CanEditRichly</db:code></db:para>
</db:td>
<db:td><db:code>0x100</db:code></db:td>
<db:td>
<db:para>Context is richly editable.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.11.</db:para>
<db:para>The <db:code>EditFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;EditFlag&gt;. </db:code>It stores an OR combination of <db:code>EditFlag</db:code> values.</db:para>
</db:section>
<db:section xml:id="MediaFlag-enum">
<db:title>[since 5.11] enum QWebEngineContextMenuData::MediaFlag</db:title>
<db:bridgehead renderas="sect2">flags QWebEngineContextMenuData::MediaFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>MediaFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>MediaInError</db:enumidentifier>
<db:enumvalue>0x1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MediaPaused</db:enumidentifier>
<db:enumvalue>0x2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MediaMuted</db:enumidentifier>
<db:enumvalue>0x4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MediaLoop</db:enumidentifier>
<db:enumvalue>0x8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MediaCanSave</db:enumidentifier>
<db:enumvalue>0x10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MediaHasAudio</db:enumidentifier>
<db:enumvalue>0x20</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MediaCanToggleControls</db:enumidentifier>
<db:enumvalue>0x40</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MediaControls</db:enumidentifier>
<db:enumvalue>0x80</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MediaCanPrint</db:enumidentifier>
<db:enumvalue>0x100</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MediaCanRotate</db:enumidentifier>
<db:enumvalue>0x200</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QWebEngineContextMenuData::MediaFlags</db:typedefname>
</db:typedefsynopsis>
<db:para>The current media element's status and its available operations. <db:code>MediaNone</db:code> if the selected web page content is not a media element.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::MediaInError</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>An error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::MediaPaused</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>Media is paused.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::MediaMuted</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>Media is muted.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::MediaLoop</db:code></db:para>
</db:td>
<db:td><db:code>0x8</db:code></db:td>
<db:td>
<db:para>Media can be looped.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::MediaCanSave</db:code></db:para>
</db:td>
<db:td><db:code>0x10</db:code></db:td>
<db:td>
<db:para>Media can be saved.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::MediaHasAudio</db:code></db:para>
</db:td>
<db:td><db:code>0x20</db:code></db:td>
<db:td>
<db:para>Media has audio.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::MediaCanToggleControls</db:code></db:para>
</db:td>
<db:td><db:code>0x40</db:code></db:td>
<db:td>
<db:para>Media can show controls.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::MediaControls</db:code></db:para>
</db:td>
<db:td><db:code>0x80</db:code></db:td>
<db:td>
<db:para>Media controls are shown.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::MediaCanPrint</db:code></db:para>
</db:td>
<db:td><db:code>0x100</db:code></db:td>
<db:td>
<db:para>Media is printable.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::MediaCanRotate</db:code></db:para>
</db:td>
<db:td><db:code>0x200</db:code></db:td>
<db:td>
<db:para>Media is rotatable.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.11.</db:para>
<db:para>The <db:code>MediaFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;MediaFlag&gt;. </db:code>It stores an OR combination of <db:code>MediaFlag</db:code> values.</db:para>
</db:section>
<db:section xml:id="MediaType-enum">
<db:title>enum QWebEngineContextMenuData::MediaType</db:title>
<db:enumsynopsis>
<db:enumname>MediaType</db:enumname>
<db:enumitem>
<db:enumidentifier>MediaTypeNone</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MediaTypeImage</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MediaTypeVideo</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MediaTypeAudio</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MediaTypeCanvas</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MediaTypeFile</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MediaTypePlugin</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the media type of the context if any.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::MediaTypeNone</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The context is not a media type.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::MediaTypeImage</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The context is an image element.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::MediaTypeVideo</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The context is a video element.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::MediaTypeAudio</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The context is an audio element.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::MediaTypeCanvas</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The context is a canvas element.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::MediaTypeFile</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The context is a file.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginecontextmenudata.xml">QWebEngineContextMenuData</db:link></db:emphasis>::MediaTypePlugin</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The context is a plugin element.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWebEngineContextMenuData">
<db:title>QWebEngineContextMenuData::QWebEngineContextMenuData()</db:title>
<db:constructorsynopsis>
<db:methodname>QWebEngineContextMenuData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineContextMenuData()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs null context menu data.</db:para>
</db:section>
<db:section xml:id="QWebEngineContextMenuData-1">
<db:title>QWebEngineContextMenuData::QWebEngineContextMenuData(const QWebEngineContextMenuData &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QWebEngineContextMenuData</db:methodname>
<db:methodparam>
<db:type>const QWebEngineContextMenuData &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineContextMenuData(const QWebEngineContextMenuData &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs context menu data from <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QWebEngineContextMenuData">
<db:title>QWebEngineContextMenuData::~QWebEngineContextMenuData()</db:title>
<db:destructorsynopsis>
<db:methodname>~QWebEngineContextMenuData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QWebEngineContextMenuData()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the context menu data.</db:para>
</db:section>
<db:section xml:id="editFlags">
<db:title>QWebEngineContextMenuData::EditFlags QWebEngineContextMenuData::editFlags() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWebEngineContextMenuData::EditFlags</db:type>
<db:methodname>editFlags</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineContextMenuData::EditFlags editFlags() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the available edit operations in the current context or <db:code>CanDoNone</db:code> if no actions are available.</db:para>
</db:section>
<db:section xml:id="isContentEditable">
<db:title>bool QWebEngineContextMenuData::isContentEditable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isContentEditable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isContentEditable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the content is editable by the user; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QWebEngineContextMenuData::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the context data is valid; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="linkText">
<db:title>QString QWebEngineContextMenuData::linkText() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>linkText</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString linkText() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the text of a link if the context is a link.</db:para>
</db:section>
<db:section xml:id="linkUrl">
<db:title>QUrl QWebEngineContextMenuData::linkUrl() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>linkUrl</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl linkUrl() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the URL of a link if the context is a link. It is not guaranteed to be a valid URL.</db:para>
</db:section>
<db:section xml:id="mediaFlags">
<db:title>QWebEngineContextMenuData::MediaFlags QWebEngineContextMenuData::mediaFlags() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWebEngineContextMenuData::MediaFlags</db:type>
<db:methodname>mediaFlags</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineContextMenuData::MediaFlags mediaFlags() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current media element's status and its available operations. <db:code>MediaNone</db:code> if the selected web page content is not a media element.</db:para>
</db:section>
<db:section xml:id="mediaType">
<db:title>QWebEngineContextMenuData::MediaType QWebEngineContextMenuData::mediaType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWebEngineContextMenuData::MediaType</db:type>
<db:methodname>mediaType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineContextMenuData::MediaType mediaType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of the media element or <db:code>MediaTypeNone</db:code> if the context is not a media element.</db:para>
</db:section>
<db:section xml:id="mediaUrl">
<db:title>QUrl QWebEngineContextMenuData::mediaUrl() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>mediaUrl</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl mediaUrl() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the context is a media element, returns the URL of that media.</db:para>
</db:section>
<db:section xml:id="misspelledWord">
<db:title>[since 5.8] QString QWebEngineContextMenuData::misspelledWord() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>misspelledWord</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString misspelledWord() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the context is a word considered misspelled by the spell-checker, returns the misspelled word.</db:para>
<db:para>For possible replacements of the word, see <db:link xlink:href="qwebenginecontextmenudata.xml#spellCheckerSuggestions">spellCheckerSuggestions</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
</db:section>
<db:section xml:id="position">
<db:title>QPoint QWebEngineContextMenuData::position() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>position</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint position() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position of the context, usually the mouse position where the context menu event was triggered.</db:para>
</db:section>
<db:section xml:id="selectedText">
<db:title>QString QWebEngineContextMenuData::selectedText() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>selectedText</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString selectedText() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the selected text of the context.</db:para>
</db:section>
<db:section xml:id="spellCheckerSuggestions">
<db:title>[since 5.8] QStringList QWebEngineContextMenuData::spellCheckerSuggestions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>spellCheckerSuggestions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList spellCheckerSuggestions() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the context is a word considered misspelled by the spell-checker, returns a list of suggested replacements for <db:link xlink:href="qwebenginecontextmenudata.xml#misspelledWord">misspelledWord</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QWebEngineContextMenuData &amp;QWebEngineContextMenuData::operator=(const QWebEngineContextMenuData &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QWebEngineContextMenuData &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QWebEngineContextMenuData &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineContextMenuData &amp; operator=(const QWebEngineContextMenuData &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the <db:code role="parameter">other</db:code> context menu data to this.</db:para>
</db:section>
</db:section>
</db:article>
