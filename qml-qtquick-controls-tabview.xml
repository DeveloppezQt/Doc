<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>TabView QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A control that allows the user to select one of multiple stacked items.</db:para>
<db:para>This type was introduced in Qt 5.1.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls 1.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-focusscope.xml">FocusScope</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>TabView is part of <db:simplelist><db:member><db:link xlink:href="views.xml">Application Navigation and Views</db:link></db:member><db:member><db:link xlink:href="controls.xml">Buttons and Controls</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/tabview.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:link xlink:href="qml-qtquick-controls-tabview.xml">TabView</db:link> provides tab-based navigation model for your application. For example, the following snippet uses tabs to present rectangles of different color on each tab page:</db:para>
<db:programlisting language="qml">TabView {
    Tab {
        title: &quot;Red&quot;
        Rectangle { color: &quot;red&quot; }
    }
    Tab {
        title: &quot;Blue&quot;
        Rectangle { color: &quot;blue&quot; }
    }
    Tab {
        title: &quot;Green&quot;
        Rectangle { color: &quot;green&quot; }
    }
}
</db:programlisting>
<db:note>
<db:para>You can create a custom appearance for a <db:link xlink:href="qml-qtquick-controls-tabview.xml">TabView</db:link> by assigning a <db:link xlink:href="qml-qtquick-controls-styles-tabviewstyle.xml">TabViewStyle</db:link>.</db:para>
</db:note>
<db:para><db:link xlink:href="qml-qtquick-controls-tab.xml">Tab</db:link> represents the content of a tab in a <db:link xlink:href="qml-qtquick-controls-tabview.xml">TabView</db:link>.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="contentItem-prop">
<db:title>[read-only, since QtQuick.Controls 1.3] contentItem : Item</db:title>
<db:para>This property holds the content item of the tab view.</db:para>
<db:para>Tabs declared as children of a <db:link xlink:href="qml-qtquick-controls-tabview.xml">TabView</db:link> are automatically parented to the <db:link xlink:href="qml-qtquick-controls-tabview.xml">TabView</db:link>'s contentItem.</db:para>
<db:para>This property was introduced in QtQuick.Controls 1.3.</db:para>
</db:section>
<db:section xml:id="count-prop">
<db:title>[read-only] count : int</db:title>
<db:para>The current tab count</db:para>
</db:section>
<db:section xml:id="currentIndex-prop">
<db:title>currentIndex : int</db:title>
<db:para>The current tab index</db:para>
</db:section>
<db:section xml:id="frameVisible-prop">
<db:title>frameVisible : bool</db:title>
<db:para>The visibility of the tab frame around contents</db:para>
</db:section>
<db:section xml:id="tabPosition-prop">
<db:title>tabPosition : enumeration</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.TopEdge (default)</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.BottomEdge</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="tabsVisible-prop">
<db:title>tabsVisible : bool</db:title>
<db:para>The visibility of the tab bar</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="addTab-method">
<db:title>Tab addTab(string <db:emphasis>title</db:emphasis>, Component <db:emphasis>component</db:emphasis>)</db:title>
<db:para>Adds a new tab with the given <db:code role="parameter">title</db:code> and an optional <db:code role="parameter">component</db:code>.</db:para>
<db:para>Returns the newly added tab.</db:para>
</db:section>
<db:section xml:id="getTab-method">
<db:title>Tab getTab(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns the <db:link xlink:href="qml-qtquick-controls-tab.xml">Tab</db:link> item at <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="insertTab-method">
<db:title>Tab insertTab(int <db:emphasis>index</db:emphasis>, string <db:emphasis>title</db:emphasis>, Component <db:emphasis>component</db:emphasis>)</db:title>
<db:para>Inserts a new tab at <db:code role="parameter">index</db:code>, with the given <db:code role="parameter">title</db:code> and an optional <db:code role="parameter">component</db:code>.</db:para>
<db:para>Returns the newly added tab.</db:para>
</db:section>
<db:section xml:id="moveTab-method">
<db:title>void moveTab(int <db:emphasis>from</db:emphasis>, int <db:emphasis>to</db:emphasis>)</db:title>
<db:para>Moves a tab <db:code role="parameter">from</db:code> index <db:code role="parameter">to</db:code> another.</db:para>
</db:section>
<db:section xml:id="removeTab-method">
<db:title>void removeTab(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Removes and destroys a tab at the given <db:code role="parameter">index</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
