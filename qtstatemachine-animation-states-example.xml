<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>States Example</db:title>
<db:productname>QtStateMachine</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt State Machine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The States example shows how to use the Qt state machine to play animations.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The example demonstrates how <db:link xlink:href="qstatemachine.xml">QStateMachine</db:link> states can be used to animate properties of widgets. There are three states in the application that can be sequentially triggered by a button. The button initiates state transitions that animate the properties of the application widgets.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/states-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="the-main-function">
<db:title>The <db:code>main()</db:code> Function</db:title>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    Q_INIT_RESOURCE(states);

    QApplication app(argc, argv);

    // Text edit and button
    QTextEdit *edit = new QTextEdit;
    edit-&amp;gt;setText(&quot;asdf lkjha yuoiqwe asd iuaysd u iasyd uiy &quot;
                  &quot;asdf lkjha yuoiqwe asd iuaysd u iasyd uiy &quot;
                  &quot;asdf lkjha yuoiqwe asd iuaysd u iasyd uiy &quot;
                  &quot;asdf lkjha yuoiqwe asd iuaysd u iasyd uiy!&quot;);

    QPushButton *button = new QPushButton;
    QGraphicsProxyWidget *buttonProxy = new QGraphicsProxyWidget;
    buttonProxy-&amp;gt;setWidget(button);
    QGraphicsProxyWidget *editProxy = new QGraphicsProxyWidget;
    editProxy-&amp;gt;setWidget(edit);

    QGroupBox *box = new QGroupBox;
    box-&amp;gt;setFlat(true);
    box-&amp;gt;setTitle(&quot;Options&quot;);

    QVBoxLayout *layout2 = new QVBoxLayout;
    box-&amp;gt;setLayout(layout2);
    layout2-&amp;gt;addWidget(new QRadioButton(&quot;Herring&quot;));
    layout2-&amp;gt;addWidget(new QRadioButton(&quot;Blue Parrot&quot;));
    layout2-&amp;gt;addWidget(new QRadioButton(&quot;Petunias&quot;));
    layout2-&amp;gt;addStretch();

    QGraphicsProxyWidget *boxProxy = new QGraphicsProxyWidget;
    boxProxy-&amp;gt;setWidget(box);

    // Parent widget
    QGraphicsWidget *widget = new QGraphicsWidget;
    QGraphicsLinearLayout *layout = new QGraphicsLinearLayout(Qt::Vertical, widget);
    layout-&amp;gt;addItem(editProxy);
    layout-&amp;gt;addItem(buttonProxy);
    widget-&amp;gt;setLayout(layout);

    Pixmap *p1 = new Pixmap(QPixmap(&quot;:/digikam.png&quot;));
    Pixmap *p2 = new Pixmap(QPixmap(&quot;:/akregator.png&quot;));
    Pixmap *p3 = new Pixmap(QPixmap(&quot;:/accessories-dictionary.png&quot;));
    Pixmap *p4 = new Pixmap(QPixmap(&quot;:/k3b.png&quot;));
    Pixmap *p5 = new Pixmap(QPixmap(&quot;:/help-browser.png&quot;));
    Pixmap *p6 = new Pixmap(QPixmap(&quot;:/kchart.png&quot;));

    QGraphicsScene scene(0, 0, 400, 300);
    scene.setBackgroundBrush(scene.palette().window());
    scene.addItem(widget);
    scene.addItem(boxProxy);
    scene.addItem(p1);
    scene.addItem(p2);
    scene.addItem(p3);
    scene.addItem(p4);
    scene.addItem(p5);
    scene.addItem(p6);
</db:programlisting>
<db:para>The widgets are created and added to the <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>. The Pixmap class is also defined in the example. It extends <db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link> so that its position can be read and written as Qt properties.</db:para>
<db:programlisting language="cpp">    QStateMachine machine;
    QState *state1 = new QState(&amp;amp;machine);
    QState *state2 = new QState(&amp;amp;machine);
    QState *state3 = new QState(&amp;amp;machine);
    machine.setInitialState(state1);
</db:programlisting>
<db:para>The state machine and the states are created.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/states-chart.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="cpp">    // State 1
    state1-&amp;gt;assignProperty(button, &quot;text&quot;, &quot;Switch to state 2&quot;);
    state1-&amp;gt;assignProperty(widget, &quot;geometry&quot;, QRectF(0, 0, 400, 150));
    state1-&amp;gt;assignProperty(box, &quot;geometry&quot;, QRect(-200, 150, 200, 150));
    state1-&amp;gt;assignProperty(p1, &quot;pos&quot;, QPointF(68, 200)); // 185));
    state1-&amp;gt;assignProperty(p2, &quot;pos&quot;, QPointF(168, 200)); // 185));
    state1-&amp;gt;assignProperty(p3, &quot;pos&quot;, QPointF(268, 200)); // 185));
    state1-&amp;gt;assignProperty(p4, &quot;pos&quot;, QPointF(68 - 150, 48 - 150));
    state1-&amp;gt;assignProperty(p5, &quot;pos&quot;, QPointF(168, 48 - 150));
    state1-&amp;gt;assignProperty(p6, &quot;pos&quot;, QPointF(268 + 150, 48 - 150));
    state1-&amp;gt;assignProperty(p1, &quot;rotation&quot;, qreal(0));
    state1-&amp;gt;assignProperty(p2, &quot;rotation&quot;, qreal(0));
    state1-&amp;gt;assignProperty(p3, &quot;rotation&quot;, qreal(0));
    state1-&amp;gt;assignProperty(p4, &quot;rotation&quot;, qreal(-270));
    state1-&amp;gt;assignProperty(p5, &quot;rotation&quot;, qreal(-90));
    state1-&amp;gt;assignProperty(p6, &quot;rotation&quot;, qreal(270));
    state1-&amp;gt;assignProperty(boxProxy, &quot;opacity&quot;, qreal(0));
    state1-&amp;gt;assignProperty(p1, &quot;opacity&quot;, qreal(1));
    state1-&amp;gt;assignProperty(p2, &quot;opacity&quot;, qreal(1));
    state1-&amp;gt;assignProperty(p3, &quot;opacity&quot;, qreal(1));
    state1-&amp;gt;assignProperty(p4, &quot;opacity&quot;, qreal(0));
    state1-&amp;gt;assignProperty(p5, &quot;opacity&quot;, qreal(0));
    state1-&amp;gt;assignProperty(p6, &quot;opacity&quot;, qreal(0));
</db:programlisting>
<db:para>Each state is assigned the object properties that they will apply.</db:para>
<db:programlisting language="cpp">    QAbstractTransition *t1 = state1-&amp;gt;addTransition(button, &amp;amp;QAbstractButton::clicked, state2);
    QSequentialAnimationGroup *animation1SubGroup = new QSequentialAnimationGroup;
    animation1SubGroup-&amp;gt;addPause(250);
    animation1SubGroup-&amp;gt;addAnimation(new QPropertyAnimation(box, &quot;geometry&quot;));
    t1-&amp;gt;addAnimation(animation1SubGroup);
    t1-&amp;gt;addAnimation(new QPropertyAnimation(widget, &quot;geometry&quot;));
    t1-&amp;gt;addAnimation(new QPropertyAnimation(p1, &quot;pos&quot;));
    t1-&amp;gt;addAnimation(new QPropertyAnimation(p2, &quot;pos&quot;));
    t1-&amp;gt;addAnimation(new QPropertyAnimation(p3, &quot;pos&quot;));
    t1-&amp;gt;addAnimation(new QPropertyAnimation(p4, &quot;pos&quot;));
    t1-&amp;gt;addAnimation(new QPropertyAnimation(p5, &quot;pos&quot;));
    t1-&amp;gt;addAnimation(new QPropertyAnimation(p6, &quot;pos&quot;));
    t1-&amp;gt;addAnimation(new QPropertyAnimation(p1, &quot;rotation&quot;));
    t1-&amp;gt;addAnimation(new QPropertyAnimation(p2, &quot;rotation&quot;));
    t1-&amp;gt;addAnimation(new QPropertyAnimation(p3, &quot;rotation&quot;));
    t1-&amp;gt;addAnimation(new QPropertyAnimation(p4, &quot;rotation&quot;));
    t1-&amp;gt;addAnimation(new QPropertyAnimation(p5, &quot;rotation&quot;));
    t1-&amp;gt;addAnimation(new QPropertyAnimation(p6, &quot;rotation&quot;));
    t1-&amp;gt;addAnimation(new QPropertyAnimation(p1, &quot;opacity&quot;));
    t1-&amp;gt;addAnimation(new QPropertyAnimation(p2, &quot;opacity&quot;));
    t1-&amp;gt;addAnimation(new QPropertyAnimation(p3, &quot;opacity&quot;));
    t1-&amp;gt;addAnimation(new QPropertyAnimation(p4, &quot;opacity&quot;));
    t1-&amp;gt;addAnimation(new QPropertyAnimation(p5, &quot;opacity&quot;));
    t1-&amp;gt;addAnimation(new QPropertyAnimation(p6, &quot;opacity&quot;));
</db:programlisting>
<db:para>The state transitions are created with the trigger of the button click. For each property, a <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> is created that interpolates between the property values.</db:para>
<db:programlisting language="cpp">    machine.start();

    GraphicsView view(&amp;amp;scene);

    view.show();

    return app.exec();
</db:programlisting>
<db:para>The state machine is started and the <db:code>scene</db:code> is assigned to a GraphicsView.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtscxml.git/tree/examples/statemachine/animation/states?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
