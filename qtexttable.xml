<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextTable Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtexttable.xml">QTextTable</db:link> class represents a table in a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextTable</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qtextframe.xml" xlink:role="class">QTextFrame</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextTable is part of <db:simplelist><db:member><db:link xlink:href="richtext-processing.xml">Rich Text Processing APIs</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A table is a group of cells ordered into rows and columns. Each table contains at least one row and one column. Each cell contains a block, and is surrounded by a frame.</db:para>
<db:para>Tables are usually created and inserted into a document with the <db:link xlink:href="qtextcursor.xml#insertTable">QTextCursor::insertTable</db:link>() function. For example, we can insert a table with three rows and two columns at the current cursor position in an editor using the following lines of code:</db:para>
<db:programlisting language="cpp">    QTextCursor cursor(editor-&amp;gt;textCursor());
    cursor.movePosition(QTextCursor::Start);

    QTextTable *table = cursor.insertTable(rows, columns, tableFormat);
</db:programlisting>
<db:para>The table format is either defined when the table is created or changed later with <db:link xlink:href="qtexttable.xml#setFormat">setFormat</db:link>().</db:para>
<db:para>The table currently being edited by the cursor is found with <db:link xlink:href="qtextcursor.xml#currentTable">QTextCursor::currentTable</db:link>(). This allows its format or dimensions to be changed after it has been inserted into a document.</db:para>
<db:para>A table's size can be changed with <db:link xlink:href="qtexttable.xml#resize">resize</db:link>(), or by using <db:link xlink:href="qtexttable.xml#insertRows">insertRows</db:link>(), <db:link xlink:href="qtexttable.xml#insertColumns">insertColumns</db:link>(), <db:link xlink:href="qtexttable.xml#removeRows">removeRows</db:link>(), or <db:link xlink:href="qtexttable.xml#removeColumns">removeColumns</db:link>(). Use <db:link xlink:href="qtexttable.xml#cellAt">cellAt</db:link>() to retrieve table cells.</db:para>
<db:para>The starting and ending positions of table rows can be found by moving a cursor within a table, and using the <db:link xlink:href="qtexttable.xml#rowStart">rowStart</db:link>() and <db:link xlink:href="qtexttable.xml#rowEnd">rowEnd</db:link>() functions to obtain cursors at the start and end of each row.</db:para>
<db:para>Rows and columns within a <db:link xlink:href="qtexttable.xml">QTextTable</db:link> can be merged and split using the <db:link xlink:href="qtexttable.xml#mergeCells">mergeCells</db:link>() and <db:link xlink:href="qtexttable.xml#splitCell">splitCell</db:link>() functions. However, only cells that span multiple rows or columns can be split. (Merging or splitting does not increase or decrease the number of rows and columns.)</db:para>
<db:para>Note that if you have merged multiple columns and rows into one cell, you will not be able to split the merged cell into new cells spanning over more than one row or column. To be able to split cells spanning over several rows and columns you need to do this over several iterations.</db:para>
<db:informaltable style="generic" width="80%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/texttable-split.png"/>
</db:imageobject>
</db:inlinemediaobject> Original Table</db:para>
</db:td>
<db:td>
<db:para>Suppose we have a 2x3 table of names and addresses. To merge both columns in the first row we invoke <db:link xlink:href="qtexttable.xml#mergeCells">mergeCells</db:link>() with <db:code role="parameter">row</db:code> = 0, <db:code role="parameter">column</db:code> = 0, <db:code role="parameter">numRows</db:code> = 1 and <db:code role="parameter">numColumns</db:code> = 2.</db:para>
<db:programlisting language="cpp">    table-&amp;gt;mergeCells(0, 0, 1, 2);
</db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/texttable-merge.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para>This gives us the following table. To split the first row of the table back into two cells, we invoke the <db:link xlink:href="qtexttable.xml#splitCell">splitCell</db:link>() function with <db:code role="parameter">numRows</db:code> and <db:code role="parameter">numCols</db:code> = 1.</db:para>
<db:programlisting language="cpp">    table-&amp;gt;splitCell(0, 0, 1, 1);
</db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/texttable-split.png"/>
</db:imageobject>
</db:inlinemediaobject> Split Table</db:para>
</db:td>
<db:td>
<db:para>This results in the original table.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttableformat.xml">QTextTableFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="appendColumns">
<db:title>void QTextTable::appendColumns(int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>appendColumns</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void appendColumns(int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends <db:code role="parameter">count</db:code> columns at the right side of the table.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttable.xml#insertColumns">insertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#insertRows">insertRows</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#resize">resize</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#removeRows">removeRows</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#removeColumns">removeColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#appendRows">appendRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="appendRows">
<db:title>void QTextTable::appendRows(int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>appendRows</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void appendRows(int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends <db:code role="parameter">count</db:code> rows at the bottom of the table.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttable.xml#insertColumns">insertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#insertRows">insertRows</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#resize">resize</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#removeRows">removeRows</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#removeColumns">removeColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#appendColumns">appendColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cellAt">
<db:title>QTextTableCell QTextTable::cellAt(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextTableCell</db:type>
<db:methodname>cellAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextTableCell cellAt(int row, int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the table cell at the given <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> in the table.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttable.xml#columns">columns</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#rows">rows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cellAt-1">
<db:title>QTextTableCell QTextTable::cellAt(int <db:emphasis>position</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextTableCell</db:type>
<db:methodname>cellAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextTableCell cellAt(int position) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the table cell that contains the character at the given <db:code role="parameter">position</db:code> in the document.</db:para>
</db:section>
<db:section xml:id="cellAt-2">
<db:title>QTextTableCell QTextTable::cellAt(const QTextCursor &amp;<db:emphasis>cursor</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextTableCell</db:type>
<db:methodname>cellAt</db:methodname>
<db:methodparam>
<db:type>const QTextCursor &amp;</db:type>
<db:parameter>cursor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextTableCell cellAt(const QTextCursor &amp;cursor) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the table cell containing the given <db:code role="parameter">cursor</db:code>.</db:para>
</db:section>
<db:section xml:id="columns">
<db:title>int QTextTable::columns() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>columns</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int columns() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of columns in the table.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttable.xml#rows">rows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="format">
<db:title>QTextTableFormat QTextTable::format() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextTableFormat</db:type>
<db:methodname>format</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextTableFormat format() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the table's format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttable.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertColumns">
<db:title>void QTextTable::insertColumns(int <db:emphasis>index</db:emphasis>, int <db:emphasis>columns</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertColumns</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>columns</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertColumns(int index, int columns)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a number of <db:code role="parameter">columns</db:code> before the column with the specified <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttable.xml#insertRows">insertRows</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#resize">resize</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#removeRows">removeRows</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#removeColumns">removeColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#appendRows">appendRows</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#appendColumns">appendColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertRows">
<db:title>void QTextTable::insertRows(int <db:emphasis>index</db:emphasis>, int <db:emphasis>rows</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertRows</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rows</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertRows(int index, int rows)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a number of <db:code role="parameter">rows</db:code> before the row with the specified <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttable.xml#resize">resize</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#insertColumns">insertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#removeRows">removeRows</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#removeColumns">removeColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#appendRows">appendRows</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#appendColumns">appendColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mergeCells">
<db:title>void QTextTable::mergeCells(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, int <db:emphasis>numRows</db:emphasis>, int <db:emphasis>numCols</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mergeCells</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>numRows</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>numCols</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mergeCells(int row, int column, int numRows, int numCols)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Merges the cell at the specified <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> with the adjacent cells into one cell. The new cell will span <db:code role="parameter">numRows</db:code> rows and <db:code role="parameter">numCols</db:code> columns. This method does nothing if <db:code role="parameter">numRows</db:code> or <db:code role="parameter">numCols</db:code> is less than the current number of rows or columns spanned by the cell.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttable.xml#splitCell">splitCell</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mergeCells-1">
<db:title>void QTextTable::mergeCells(const QTextCursor &amp;<db:emphasis>cursor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mergeCells</db:methodname>
<db:methodparam>
<db:type>const QTextCursor &amp;</db:type>
<db:parameter>cursor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void mergeCells(const QTextCursor &amp;cursor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Merges the cells selected by the provided <db:code role="parameter">cursor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttable.xml#splitCell">splitCell</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeColumns">
<db:title>void QTextTable::removeColumns(int <db:emphasis>index</db:emphasis>, int <db:emphasis>columns</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeColumns</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>columns</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeColumns(int index, int columns)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes a number of <db:code role="parameter">columns</db:code> starting with the column at the specified <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttable.xml#insertRows">insertRows</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#insertColumns">insertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#removeRows">removeRows</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#resize">resize</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#appendRows">appendRows</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#appendColumns">appendColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeRows">
<db:title>void QTextTable::removeRows(int <db:emphasis>index</db:emphasis>, int <db:emphasis>rows</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeRows</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rows</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeRows(int index, int rows)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes a number of <db:code role="parameter">rows</db:code> starting with the row at the specified <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttable.xml#insertRows">insertRows</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#insertColumns">insertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#resize">resize</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#removeColumns">removeColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#appendRows">appendRows</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#appendColumns">appendColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resize">
<db:title>void QTextTable::resize(int <db:emphasis>rows</db:emphasis>, int <db:emphasis>columns</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resize</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rows</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>columns</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resize(int rows, int columns)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resizes the table to contain the required number of <db:code role="parameter">rows</db:code> and <db:code role="parameter">columns</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttable.xml#insertRows">insertRows</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#insertColumns">insertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#removeRows">removeRows</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttable.xml#removeColumns">removeColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowEnd">
<db:title>QTextCursor QTextTable::rowEnd(const QTextCursor &amp;<db:emphasis>cursor</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextCursor</db:type>
<db:methodname>rowEnd</db:methodname>
<db:methodparam>
<db:type>const QTextCursor &amp;</db:type>
<db:parameter>cursor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCursor rowEnd(const QTextCursor &amp;cursor) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a cursor pointing to the end of the row that contains the given <db:code role="parameter">cursor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttable.xml#rowStart">rowStart</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowStart">
<db:title>QTextCursor QTextTable::rowStart(const QTextCursor &amp;<db:emphasis>cursor</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextCursor</db:type>
<db:methodname>rowStart</db:methodname>
<db:methodparam>
<db:type>const QTextCursor &amp;</db:type>
<db:parameter>cursor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCursor rowStart(const QTextCursor &amp;cursor) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a cursor pointing to the start of the row that contains the given <db:code role="parameter">cursor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttable.xml#rowEnd">rowEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rows">
<db:title>int QTextTable::rows() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>rows</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int rows() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of rows in the table.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttable.xml#columns">columns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFormat">
<db:title>void QTextTable::setFormat(const QTextTableFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFormat</db:methodname>
<db:methodparam>
<db:type>const QTextTableFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFormat(const QTextTableFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the table's <db:code role="parameter">format</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttable.xml#format">format</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="splitCell">
<db:title>void QTextTable::splitCell(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, int <db:emphasis>numRows</db:emphasis>, int <db:emphasis>numCols</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>splitCell</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>numRows</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>numCols</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void splitCell(int row, int column, int numRows, int numCols)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Splits the specified cell at <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> into an array of multiple cells with dimensions specified by <db:code role="parameter">numRows</db:code> and <db:code role="parameter">numCols</db:code>.</db:para>
<db:note>
<db:para>It is only possible to split cells that span multiple rows or columns, such as rows that have been merged using <db:link xlink:href="qtexttable.xml#mergeCells">mergeCells</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttable.xml#mergeCells">mergeCells</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
