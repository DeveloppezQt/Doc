<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>PieMenu QML Type</db:title>
<db:productname>QtQuickExtras</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Extras Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A popup menu that displays several menu items along an arc.</db:para>
<db:para>This type was introduced in Qt 5.5.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Extras 1.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-focusscope.xml">FocusScope</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>PieMenu is part of <db:simplelist><db:member>extras</db:member><db:member>extras-interactive</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:alt>A PieMenu</db:alt>
<db:imageobject>
<db:imagedata fileref="images/piemenu.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:link xlink:href="qml-qtquick-extras-piemenu.xml">PieMenu</db:link> provides a radial context menu as an alternative to a traditional menu. All of the items in a <db:link xlink:href="qml-qtquick-extras-piemenu.xml">PieMenu</db:link> are an equal distance from the center of the control.</db:para>
<db:section xml:id="populating-the-menu">
<db:title>Populating the Menu</db:title>
<db:para>To create a menu, define at least one <db:link xlink:href="qml-qtquick-controls-menuitem.xml">MenuItem</db:link> as a child of it:</db:para>
<db:programlisting language="cpp">PieMenu {
    id: pieMenu

    MenuItem {
        text: &quot;Action 1&quot;
        onTriggered: print(&quot;Action 1&quot;)
    }
    MenuItem {
        text: &quot;Action 2&quot;
        onTriggered: print(&quot;Action 2&quot;)
    }
    MenuItem {
        text: &quot;Action 3&quot;
        onTriggered: print(&quot;Action 3&quot;)
    }
}
</db:programlisting>
<db:para>By default, only the currently selected item's text is displayed above the menu. To provide text that is always visible when there is no current item, set the <db:link xlink:href="qml-qtquick-extras-piemenu.xml#title-prop">title</db:link> property.</db:para>
</db:section>
<db:section xml:id="displaying-the-menu">
<db:title>Displaying the Menu</db:title>
<db:para>The typical use case for a menu is to open at the point of the mouse cursor after a right click occurs. To do that, define a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> that covers the region upon which clicks should open the menu. When the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> is right-clicked, call the <db:link xlink:href="qml-qtquick-extras-piemenu.xml#popup-method">popup</db:link>() function:</db:para>
<db:programlisting language="cpp">MouseArea {
    anchors.fill: parent
    acceptedButtons: Qt.RightButton

    onClicked: pieMenu.popup(mouseX, mouseY)
}
</db:programlisting>
<db:para>If the menu is opened in a position where some of its menu items would be outside of <db:link xlink:href="qml-qtquick-extras-piemenu.xml#boundingItem-prop">boundingItem</db:link>, it is automatically moved to a position where they will not be hidden. By default, the <db:link xlink:href="qml-qtquick-extras-piemenu.xml#boundingItem-prop">boundingItem</db:link> is set to the parent of the menu. It can also be set to <db:code>null</db:code> to prevent this behavior.</db:para>
<db:para><db:link xlink:href="qml-qtquick-extras-piemenu.xml">PieMenu</db:link> can be displayed at any position on the screen. With a traditional context menu, the menu would be positioned with its top left corner at the position of the right click, but since <db:link xlink:href="qml-qtquick-extras-piemenu.xml">PieMenu</db:link> is radial, we position it centered over the position of the right click.</db:para>
<db:para>To create a <db:link xlink:href="qml-qtquick-extras-piemenu.xml">PieMenu</db:link> that opens after a long press and selects items upon releasing, you can combine ActivationMode.ActivateOnRelease with a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> using a Timer:</db:para>
<db:programlisting language="cpp">MouseArea {
    id: touchArea
    anchors.fill: parent

    Timer {
        id: pressAndHoldTimer
        interval: 300
        onTriggered: pieMenu.popup(touchArea.mouseX, touchArea.mouseY);
    }

    onPressed: pressAndHoldTimer.start()
    onReleased: pressAndHoldTimer.stop();
}

PieMenu {
    id: pieMenu

    triggerMode: TriggerMode.TriggerOnRelease

    MenuItem {
        text: &quot;Action 1&quot;
        onTriggered: print(&quot;Action 1&quot;)
    }
    MenuItem {
        text: &quot;Action 2&quot;
        onTriggered: print(&quot;Action 2&quot;)
    }
    MenuItem {
        text: &quot;Action 3&quot;
        onTriggered: print(&quot;Action 3&quot;)
    }
}
</db:programlisting>
<db:para>You can hide individual menu items by setting their visible property to <db:code>false</db:code>. Hiding items does not affect the <db:link xlink:href="qml-qtquick-controls-styles-piemenustyle.xml#startAngle-prop">startAngle</db:link> or <db:link xlink:href="qml-qtquick-controls-styles-piemenustyle.xml#endAngle-prop">endAngle</db:link>; the remaining items will grow to consume the available space.</db:para>
<db:para>You can create a custom appearance for a <db:link xlink:href="qml-qtquick-extras-piemenu.xml">PieMenu</db:link> by assigning a <db:link xlink:href="qml-qtquick-controls-styles-piemenustyle.xml">PieMenuStyle</db:link></db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="boundingItem-prop">
<db:title>boundingItem : Item</db:title>
<db:para>The item which the menu must stay within.</db:para>
<db:para>A typical use case for <db:link xlink:href="qml-qtquick-extras-piemenu.xml">PieMenu</db:link> involves:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> that determines the clickable area within which the menu can be opened.</db:para>
</db:listitem>
<db:listitem>
<db:para>The bounds that the menu must not go outside of.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Although they sound similar, they have different purposes. Consider the example below:</db:para>
<db:mediaobject>
<db:alt>Canvas boundingItem example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/piemenu-boundingItem-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The user can only open the menu within the inner rectangle. In this case, they've opened the menu on the edge of the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>, but there would not be enough room to display the entire menu centered at the cursor position, so it was moved to the left.</db:para>
<db:para>If for some reason we didn't want this restriction, we can set boundingItem to <db:code>null</db:code>:</db:para>
<db:mediaobject>
<db:alt>Canvas null boundingItem example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/piemenu-boundingItem-null-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>By default, the menu's <db:link xlink:href="qml-qtquick-item.xml#parent-prop">parent</db:link> is the boundingItem.</db:para>
</db:section>
<db:section xml:id="currentIndex-prop">
<db:title>[read-only] currentIndex : int</db:title>
<db:para>The index of the the menu item that is currently under the mouse, or <db:code>-1</db:code> if there is no such item.</db:para>
</db:section>
<db:section xml:id="currentItem-prop">
<db:title>[read-only] currentItem : int</db:title>
<db:para>The menu item that is currently under the mouse, or <db:code>null</db:code> if there is no such item.</db:para>
</db:section>
<db:section xml:id="menuItems-prop">
<db:title>[default] menuItems : MenuItem</db:title>
<db:para>The list of menu items displayed by this menu.</db:para>
<db:para>You can assign menu items by declaring them as children of <db:link xlink:href="qml-qtquick-extras-piemenu.xml">PieMenu</db:link>:</db:para>
<db:programlisting language="cpp">PieMenu {
    MenuItem {
        text: &quot;Action 1&quot;
        onTriggered: function() { print(&quot;Action 1&quot;); }
    }
    MenuItem {
        text: &quot;Action 2&quot;
        onTriggered: function() { print(&quot;Action 2&quot;); }
    }
    MenuItem {
        text: &quot;Action 3&quot;
        onTriggered: function() { print(&quot;Action 3&quot;); }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="selectionAngle-prop">
<db:title>[read-only] selectionAngle : real</db:title>
<db:para>This property reflects the angle (in radians) created by the imaginary line from the center of the menu to the position of the cursor.</db:para>
<db:para>Its value is undefined when the menu is not visible.</db:para>
</db:section>
<db:section xml:id="style-prop">
<db:title>style : Component</db:title>
<db:para>The style Component for this control.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-controls-styles-qmlmodule.xml">Qt Quick Controls Styles QML Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="title-prop">
<db:title>title : string</db:title>
<db:para>This property defines the text that is shown above the menu when there is no current menu item (<db:link xlink:href="qml-qtquick-extras-piemenu.xml#currentIndex-prop">currentIndex</db:link> is <db:code>-1</db:code>).</db:para>
<db:para>The default value is <db:code>&quot;&quot;</db:code> (an empty string).</db:para>
</db:section>
<db:section xml:id="triggerMode-prop">
<db:title>triggerMode : enumeration</db:title>
<db:para>This property determines the method for selecting items in the menu.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A triggerMode of <db:code role="parameter">TriggerMode.TriggerOnPress</db:code> means that menu items will only be selected when a mouse press event occurs over them.</db:para>
</db:listitem>
<db:listitem>
<db:para>A triggerMode of <db:code role="parameter">TriggerMode.TriggerOnRelease</db:code> means that menu items will only be selected when a mouse release event occurs over them. This means that the user must keep the mouse button down after opening the menu and release the mouse over the item they wish to select.</db:para>
</db:listitem>
<db:listitem>
<db:para>A triggerMode of <db:code role="parameter">TriggerMode.TriggerOnClick</db:code> means that menu items will only be selected when the user clicks once over them.</db:para>
</db:listitem>
</db:itemizedlist>
<db:warning>
<db:para>Changing the triggerMode while the menu is visible will result in undefined behavior.</db:para>
</db:warning>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="addItem-method">
<db:title>void addItem(string <db:emphasis>text</db:emphasis>)</db:title>
<db:para>Adds an item to the end of the menu items.</db:para>
<db:para>Equivalent to passing calling <db:code>insertItem(menuItems.length, text)</db:code>.</db:para>
<db:para>Returns the newly added item.</db:para>
</db:section>
<db:section xml:id="insertItem-method">
<db:title>void insertItem(int <db:emphasis>before</db:emphasis>, string <db:emphasis>text</db:emphasis>)</db:title>
<db:para>Inserts a <db:link xlink:href="qml-qtquick-controls-menuitem.xml">MenuItem</db:link> with <db:code role="parameter">text</db:code> before the index at <db:code role="parameter">before</db:code>.</db:para>
<db:para>To insert an item at the end, pass <db:code>menuItems.length</db:code>.</db:para>
<db:para>Returns the newly inserted item, or <db:code>null</db:code> if <db:code role="parameter">before</db:code> is invalid.</db:para>
</db:section>
<db:section xml:id="popup-method">
<db:title>void popup(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Opens the menu at coordinates <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>.</db:para>
</db:section>
<db:section xml:id="removeItem-method">
<db:title>void removeItem(<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Removes <db:code role="parameter">item</db:code> from the menu.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for PieMenu</db:title>
<db:para><db:emphasis role="bold">The following members of QML type <db:link xlink:href="qml-qtquick-extras-piemenu.xml">PieMenu</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-property-documentation">
<db:title>Obsolete Property Documentation</db:title>
<db:section xml:id="activationMode-prop">
<db:title>[deprecated] activationMode : enumeration</db:title>
<db:para>This property is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This property determines the method for selecting items in the menu.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>An activationMode of <db:code role="parameter">ActivationMode.ActivateOnPress</db:code> means that menu items will only be selected when a mouse press event occurs over them.</db:para>
</db:listitem>
<db:listitem>
<db:para>An activationMode of <db:code role="parameter">ActivationMode.ActivateOnRelease</db:code> means that menu items will only be selected when a mouse release event occurs over them. This means that the user must keep the mouse button down after opening the menu and release the mouse over the item they wish to select.</db:para>
</db:listitem>
<db:listitem>
<db:para>An activationMode of <db:code role="parameter">ActivationMode.ActivateOnClick</db:code> means that menu items will only be selected when the user clicks once over them.</db:para>
</db:listitem>
</db:itemizedlist>
<db:warning>
<db:para>Changing the activationMode while the menu is visible will result in undefined behavior.</db:para>
</db:warning>
<db:para>Use <db:link xlink:href="qml-qtquick-extras-piemenu.xml#triggerMode-prop">triggerMode</db:link> instead.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
