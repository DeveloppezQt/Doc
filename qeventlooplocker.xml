<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QEventLoopLocker Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qeventlooplocker.xml">QEventLoopLocker</db:link> class provides a means to quit an event loop when it is no longer needed.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QEventLoopLocker</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qeventlooplocker.xml">QEventLoopLocker</db:link> operates on particular objects - either a <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> instance, a <db:link xlink:href="qeventloop.xml">QEventLoop</db:link> instance or a <db:link xlink:href="qthread.xml">QThread</db:link> instance.</db:para>
<db:para>This makes it possible to, for example, run a batch of jobs with an event loop and exit that event loop after the last job is finished. That is accomplished by keeping a <db:link xlink:href="qeventlooplocker.xml">QEventLoopLocker</db:link> with each job instance.</db:para>
<db:para>The variant which operates on <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> makes it possible to finish asynchronously running jobs after the last gui window has been closed. This can be useful for example for running a job which uploads data to a network.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventloop.xml">QEventLoop</db:link></db:member>
<db:member><db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QEventLoopLocker">
<db:title>[noexcept] QEventLoopLocker::QEventLoopLocker()</db:title>
<db:para>Creates an event locker operating on the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link>.</db:para>
<db:para>The application will attempt to quit when there are no more QEventLoopLockers operating on it, as long as <db:link xlink:href="qcoreapplication.xml#quitLockEnabled-prop">QCoreApplication::isQuitLockEnabled</db:link>() is true.</db:para>
<db:para>Note that attempting a quit may not necessarily result in the application quitting, if there for example are open windows, or the <db:link xlink:href="qevent.xml#Type-enum">QEvent::Quit</db:link> event is ignored.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#quit">QCoreApplication::quit</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#quitLockEnabled-prop">QCoreApplication::isQuitLockEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QEventLoopLocker-1">
<db:title>[explicit noexcept] QEventLoopLocker::QEventLoopLocker(QEventLoop *<db:emphasis>loop</db:emphasis>)</db:title>
<db:para>Creates an event locker operating on the <db:code role="parameter">loop</db:code>.</db:para>
<db:para>This particular <db:link xlink:href="qeventloop.xml">QEventLoop</db:link> will quit when there are no more QEventLoopLockers operating on it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventloop.xml#quit">QEventLoop::quit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QEventLoopLocker-3">
<db:title>[explicit noexcept] QEventLoopLocker::QEventLoopLocker(QThread *<db:emphasis>thread</db:emphasis>)</db:title>
<db:para>Creates an event locker operating on the <db:code role="parameter">thread</db:code>.</db:para>
<db:para>This particular <db:link xlink:href="qthread.xml">QThread</db:link> will quit when there are no more QEventLoopLockers operating on it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qthread.xml#quit">QThread::quit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QEventLoopLocker-2">
<db:title>[noexcept, since 6.7] QEventLoopLocker::QEventLoopLocker(QEventLoopLocker &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-constructs an event-loop locker from <db:code role="parameter">other</db:code>. <db:code role="parameter">other</db:code> will have a no-op destructor, while responsibility for preventing the <db:link xlink:href="qeventloop.xml">QEventLoop</db:link>/<db:link xlink:href="qthread.xml">QThread</db:link>/<db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> from quitting is transferred to the new object.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="dtor.QEventLoopLocker">
<db:title>[noexcept] QEventLoopLocker::~QEventLoopLocker()</db:title>
<db:para>Destroys this event loop locker object</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept, since 6.7] void QEventLoopLocker::swap(QEventLoopLocker &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps the object and the state of this <db:link xlink:href="qeventlooplocker.xml">QEventLoopLocker</db:link> with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept, since 6.7] QEventLoopLocker &amp;QEventLoopLocker::operator=(QEventLoopLocker &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns this event-loop locker from <db:code role="parameter">other</db:code>. <db:code role="parameter">other</db:code> will have a no-op destructor, while responsibility for preventing the <db:link xlink:href="qeventloop.xml">QEventLoop</db:link>/<db:link xlink:href="qthread.xml">QThread</db:link>/<db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> from quitting is transferred to this object.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="swap-1">
<db:title>[noexcept, since 6.7] void swap(QEventLoopLocker &amp;<db:emphasis>lhs</db:emphasis>, QEventLoopLocker &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Swaps the object and the state of <db:code role="parameter">lhs</db:code> with <db:code role="parameter">rhs</db:code>. This operation is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
</db:section>
</db:article>
