<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title></db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qconstiterator.xml">QConstIterator</db:link> allows iteration over a container in a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>This struct was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QConstIterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiterator.xml">QIterator</db:link></db:member>
<db:member><db:link xlink:href="qiterable.xml">QIterable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QConstIterator">
<db:title>[explicit] QConstIterator::QConstIterator(const QIterable&lt;Container&gt; *<db:emphasis>iterable</db:emphasis>, void *<db:emphasis>iterator</db:emphasis>)</db:title>
<db:para>Creates a <db:link xlink:href="qconstiterator.xml">QConstIterator</db:link> to wrap <db:code role="parameter">iterator</db:code>, operating on <db:code role="parameter">iterable</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QConstIterator::operator!=(const QConstIterator&lt;Container&gt; &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">other</db:code> points to a different item than this iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qconstiterator.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b">
<db:title>QConstIterator&lt;Container&gt; QConstIterator::operator+(qsizetype <db:emphasis>j</db:emphasis>) const</db:title>
<db:para>Returns an iterator to the item at <db:code role="parameter">j</db:code> positions forward from this iterator.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qconstiterator.xml#operator-">operator-</db:link>()</db:member>
<db:member><db:link xlink:href="qconstiterator.xml#operator-2b-eq">operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b">
<db:title>QConstIterator&lt;Container&gt; &amp;QConstIterator::operator++()</db:title>
<db:para>The prefix ++ operator (++it) advances the iterator to the next item in the container and returns an iterator to the new current item.</db:para>
<db:para>Calling this function on <db:link xlink:href="qiterable.xml">QIterable</db:link>&lt;Container&gt;::end() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qconstiterator.xml#operator--">operator--</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b-1">
<db:title>QConstIterator&lt;Container&gt; QConstIterator::operator++(<db:emphasis>int</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix ++ operator (it++) advances the iterator to the next item in the container and returns an iterator to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>QConstIterator&lt;Container&gt; &amp;QConstIterator::operator+=(qsizetype <db:emphasis>j</db:emphasis>)</db:title>
<db:para>Advances the iterator by <db:code role="parameter">j</db:code> items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qconstiterator.xml#operator--eq">operator-=</db:link>()</db:member>
<db:member><db:link xlink:href="qconstiterator.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-">
<db:title>QConstIterator&lt;Container&gt; QConstIterator::operator-(qsizetype <db:emphasis>j</db:emphasis>) const</db:title>
<db:para>Returns an iterator to the item at <db:code role="parameter">j</db:code> positions backward from this iterator.</db:para>
<db:para>If the container in the <db:link xlink:href="qvariant.xml">QVariant</db:link> does not support bi-directional iteration, calling this function leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qconstiterator.xml#operator-2b">operator+</db:link>()</db:member>
<db:member><db:link xlink:href="qconstiterator.xml#operator--eq">operator-=</db:link>()</db:member>
<db:member><db:link xlink:href="qiterable.xml#canReverseIterate">QIterable::canReverseIterate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--1">
<db:title>qsizetype QConstIterator::operator-(const QConstIterator&lt;Container&gt; &amp;<db:emphasis>j</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the distance between the two iterators.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qconstiterator.xml#operator-2b">operator+</db:link>()</db:member>
<db:member><db:link xlink:href="qconstiterator.xml#operator--eq">operator-=</db:link>()</db:member>
<db:member><db:link xlink:href="qiterable.xml#canReverseIterate">QIterable::canReverseIterate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--">
<db:title>QConstIterator&lt;Container&gt; &amp;QConstIterator::operator--()</db:title>
<db:para>The prefix -- operator (--it) makes the preceding item current and returns an iterator to the new current item.</db:para>
<db:para>Calling this function on <db:link xlink:href="qiterable.xml">QIterable</db:link>&lt;Container&gt;::begin() leads to undefined results.</db:para>
<db:para>If the container in the <db:link xlink:href="qvariant.xml">QVariant</db:link> does not support bi-directional iteration, calling this function leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qconstiterator.xml#operator-2b-2b">operator++</db:link>()</db:member>
<db:member><db:link xlink:href="qiterable.xml#canReverseIterate">QIterable::canReverseIterate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator---1">
<db:title>QConstIterator&lt;Container&gt; QConstIterator::operator--(<db:emphasis>int</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix -- operator (it--) makes the preceding item current and returns an iterator to the previously current item.</db:para>
<db:para>If the container in the <db:link xlink:href="qvariant.xml">QVariant</db:link> does not support bi-directional iteration, calling this function leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiterable.xml#canReverseIterate">QIterable::canReverseIterate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--eq">
<db:title>QConstIterator&lt;Container&gt; &amp;QConstIterator::operator-=(qsizetype <db:emphasis>j</db:emphasis>)</db:title>
<db:para>Makes the iterator go back by <db:code role="parameter">j</db:code> items.</db:para>
<db:para>If the container in the <db:link xlink:href="qvariant.xml">QVariant</db:link> does not support bi-directional iteration, calling this function leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qconstiterator.xml#operator-2b-eq">operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qconstiterator.xml#operator-">operator-</db:link>()</db:member>
<db:member><db:link xlink:href="qiterable.xml#canReverseIterate">QIterable::canReverseIterate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QConstIterator::operator==(const QConstIterator&lt;Container&gt; &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">other</db:code> points to the same item as this iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qconstiterator.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
