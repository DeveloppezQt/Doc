<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCoapClient Class</db:title>
<db:productname>QtCoap</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt CoAP Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcoapclient.xml">QCoapClient</db:link> class allows the application to send CoAP requests and receive replies.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCoapClient</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += coap</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qcoapclient.xml">QCoapClient</db:link> class contains signals that get triggered when the reply of a sent request has arrived.</db:para>
<db:para>The application can use a <db:link xlink:href="qcoapclient.xml">QCoapClient</db:link> to send requests over a CoAP network. It provides functions for standard requests: each returns a <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> object, to which the response data shall be delivered; this can be read when the <db:link xlink:href="qcoapclient.xml#finished">finished</db:link>() signal arrives.</db:para>
<db:para>A simple request can be sent with:</db:para>
<db:programlisting language="cpp">QCoapClient *client = new QCoapClient(this);
connect(client, &amp;amp;QCoapClient::finished, this, &amp;amp;TestClass::slotFinished);
client-&amp;gt;get(QCoapRequest(Qurl(&quot;coap://coap.me/test&quot;)));
</db:programlisting>
<db:note>
<db:para>After processing of the request has finished, it is the responsibility of the user to delete the <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> object at an appropriate time. Do not directly delete it inside the slot connected to <db:link xlink:href="qcoapclient.xml#finished">finished</db:link>(). You can use the <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() function.</db:para>
</db:note>
<db:para>You can also use an <db:emphasis>observe</db:emphasis> request. This can be used as above, or more conveniently with the QCoapReply::notified() signal:</db:para>
<db:programlisting language="cpp">QCoapRequest request = QCoapRequest(Qurl(&quot;coap://coap.me/obs&quot;));
QCoapReply *reply = client-&amp;gt;observe(request);
connect(reply, &amp;amp;QCoapReply::notified, this, &amp;amp;TestClass::slotNotified);
</db:programlisting>
<db:para>And the observation can be cancelled with:</db:para>
<db:programlisting language="cpp">client-&amp;gt;cancelObserve(reply);
</db:programlisting>
<db:para>When a reply arrives, the <db:link xlink:href="qcoapclient.xml">QCoapClient</db:link> emits a <db:link xlink:href="qcoapclient.xml#finished">finished</db:link>() signal.</db:para>
<db:note>
<db:para>For a discovery request, the returned object is a <db:link xlink:href="qcoapresourcediscoveryreply.xml">QCoapResourceDiscoveryReply</db:link>. It can be used the same way as a <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> but contains also a list of resources.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoaprequest.xml">QCoapRequest</db:link></db:member>
<db:member><db:link xlink:href="qcoapreply.xml">QCoapReply</db:link></db:member>
<db:member><db:link xlink:href="qcoapresourcediscoveryreply.xml">QCoapResourceDiscoveryReply</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCoapClient">
<db:title>[explicit] QCoapClient::QCoapClient(QtCoap::SecurityMode <db:emphasis>securityMode</db:emphasis> = QtCoap::SecurityMode::NoSecurity, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QCoapClient</db:methodname>
<db:methodparam>
<db:type>QtCoap::SecurityMode</db:type>
<db:parameter>securityMode</db:parameter>
<db:initializer>QtCoap::SecurityMode::NoSecurity</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapClient(QtCoap::SecurityMode securityMode, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qcoapclient.xml">QCoapClient</db:link> object for the given <db:code role="parameter">securityMode</db:code> and sets <db:code role="parameter">parent</db:code> as the parent object.</db:para>
<db:para>The default for <db:code role="parameter">securityMode</db:code> is <db:link xlink:href="qtcoap.xml#SecurityMode-enum">QtCoap::NoSecurity</db:link>, which disables security.</db:para>
<db:para>This connects using a QCoapQUdpConnection; to use a custom transport, sub-class QCoapConnection and pass an instance to one of the other constructors.</db:para>
</db:section>
<db:section xml:id="dtor.QCoapClient">
<db:title>[virtual] QCoapClient::~QCoapClient()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QCoapClient</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCoapClient()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qcoapclient.xml">QCoapClient</db:link> object and frees up any resources. Note that <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> objects that are returned from this class have the <db:link xlink:href="qcoapclient.xml">QCoapClient</db:link> set as their parents, which means that they will be deleted along with it.</db:para>
</db:section>
<db:section xml:id="cancelObserve">
<db:title>void QCoapClient::cancelObserve(QCoapReply *<db:emphasis>notifiedReply</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>cancelObserve</db:methodname>
<db:methodparam>
<db:type>QCoapReply *</db:type>
<db:parameter>notifiedReply</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cancelObserve(QCoapReply *notifiedReply)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Cancels the observation of a resource using the reply <db:code role="parameter">notifiedReply</db:code> returned by the <db:link xlink:href="qcoapclient.xml#observe">observe</db:link>() method.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#observe">observe</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cancelObserve-1">
<db:title>void QCoapClient::cancelObserve(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>cancelObserve</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void cancelObserve(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Cancels the observation of a resource identified by the <db:code role="parameter">url</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#observe">observe</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deleteResource">
<db:title>QCoapReply *QCoapClient::deleteResource(const QCoapRequest &amp;<db:emphasis>request</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCoapReply *</db:type>
<db:methodname>deleteResource</db:methodname>
<db:methodparam>
<db:type>const QCoapRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapReply * deleteResource(const QCoapRequest &amp;request)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends the <db:code role="parameter">request</db:code> using the DELETE method and returns a new <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#get">get</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#put">put</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#post">post</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#observe">observe</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#discover">discover</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deleteResource-1">
<db:title>QCoapReply *QCoapClient::deleteResource(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCoapReply *</db:type>
<db:methodname>deleteResource</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapReply * deleteResource(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sends a DELETE request to the target <db:code role="parameter">url</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#get">get</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#put">put</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#post">post</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#observe">observe</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#discover">discover</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="disconnect">
<db:title>void QCoapClient::disconnect()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>disconnect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void disconnect()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes the open sockets and connections to free the transport.</db:para>
<db:note>
<db:para>In the secure mode this needs to be called before changing the security configuration or connecting to another server.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#setSecurityConfiguration">setSecurityConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="discover">
<db:title>QCoapResourceDiscoveryReply *QCoapClient::discover(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QString &amp;<db:emphasis>discoveryPath</db:emphasis> = QLatin1String(&quot;/.well-known/core&quot;))</db:title>
<db:methodsynopsis>
<db:type>QCoapResourceDiscoveryReply *</db:type>
<db:methodname>discover</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>discoveryPath</db:parameter>
<db:initializer>QLatin1String(&quot;/.well-known/core&quot;)</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapResourceDiscoveryReply * discover(const QUrl &amp;url, const QString &amp;discoveryPath)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Discovers the resources available at the given <db:code role="parameter">url</db:code> and returns a new <db:link xlink:href="qcoapresourcediscoveryreply.xml">QCoapResourceDiscoveryReply</db:link> object which emits the <db:link xlink:href="">QCoapResourceDiscoveryReply::discovered</db:link>() signal whenever the response arrives.</db:para>
<db:para>Discovery path defaults to &quot;/.well-known/core&quot;, but can be changed by passing a different path to <db:code role="parameter">discoveryPath</db:code>. Discovery is described in <db:link xlink:href="https://tools.ietf.org/html/rfc6690#section-1.2.1">RFC 6690</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#get">get</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#post">post</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#put">put</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#deleteResource">deleteResource</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#observe">observe</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="discover-1">
<db:title>QCoapResourceDiscoveryReply *QCoapClient::discover(QtCoap::MulticastGroup <db:emphasis>group</db:emphasis> = QtCoap::MulticastGroup::AllCoapNodesIPv4, int <db:emphasis>port</db:emphasis> = QtCoap::DefaultPort, const QString &amp;<db:emphasis>discoveryPath</db:emphasis> = QLatin1String(&quot;/.well-known/core&quot;))</db:title>
<db:methodsynopsis>
<db:type>QCoapResourceDiscoveryReply *</db:type>
<db:methodname>discover</db:methodname>
<db:methodparam>
<db:type>QtCoap::MulticastGroup</db:type>
<db:parameter>group</db:parameter>
<db:initializer>QtCoap::MulticastGroup::AllCoapNodesIPv4</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>port</db:parameter>
<db:initializer>QtCoap::DefaultPort</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>discoveryPath</db:parameter>
<db:initializer>QLatin1String(&quot;/.well-known/core&quot;)</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapResourceDiscoveryReply * discover(QtCoap::MulticastGroup group, int port, const QString &amp;discoveryPath)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Discovers the resources available at the endpoints which have joined the <db:code role="parameter">group</db:code> at the given <db:code role="parameter">port</db:code>. Returns a new <db:link xlink:href="qcoapresourcediscoveryreply.xml">QCoapResourceDiscoveryReply</db:link> object which emits the <db:link xlink:href="">QCoapResourceDiscoveryReply::discovered</db:link>() signal whenever a response arrives. The <db:code role="parameter">group</db:code> is one of the CoAP multicast group addresses and defaults to <db:link xlink:href="qtcoap.xml#MulticastGroup-enum">QtCoap::AllCoapNodesIPv4</db:link>.</db:para>
<db:para>Discovery path defaults to &quot;/.well-known/core&quot;, but can be changed by passing a different path to <db:code role="parameter">discoveryPath</db:code>. Discovery is described in <db:link xlink:href="https://tools.ietf.org/html/rfc6690#section-1.2.1">RFC 6690</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#get">get</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#post">post</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#put">put</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#deleteResource">deleteResource</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#observe">observe</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>void QCoapClient::error(QCoapReply *<db:emphasis>reply</db:emphasis>, QtCoap::Error <db:emphasis>error</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>error</db:methodname>
<db:methodparam>
<db:type>QCoapReply *</db:type>
<db:parameter>reply</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QtCoap::Error</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void error(QCoapReply *reply, QtCoap::Error error)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever an error occurs. The <db:code role="parameter">reply</db:code> parameter can be <db:code>nullptr</db:code> if the error is not related to a specific <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link>. The <db:code role="parameter">error</db:code> parameter contains the error code.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#finished">finished</db:link>()</db:member>
<db:member><db:link xlink:href="">QCoapReply::error</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapreply.xml#finished">QCoapReply::finished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="finished">
<db:title>void QCoapClient::finished(QCoapReply *<db:emphasis>reply</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>finished</db:methodname>
<db:methodparam>
<db:type>QCoapReply *</db:type>
<db:parameter>reply</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void finished(QCoapReply *reply)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted along with the <db:link xlink:href="qcoapreply.xml#finished">QCoapReply::finished</db:link>() signal whenever a CoAP reply is received, after either a success or an error. The <db:code role="parameter">reply</db:code> parameter will contain a pointer to the reply that has just been received.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapreply.xml#finished">QCoapReply::finished</db:link>()</db:member>
<db:member><db:link xlink:href="">QCoapReply::error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="get">
<db:title>QCoapReply *QCoapClient::get(const QCoapRequest &amp;<db:emphasis>request</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCoapReply *</db:type>
<db:methodname>get</db:methodname>
<db:methodparam>
<db:type>const QCoapRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapReply * get(const QCoapRequest &amp;request)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends the <db:code role="parameter">request</db:code> using the GET method and returns a new <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#post">post</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#put">put</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#deleteResource">deleteResource</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#observe">observe</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#discover">discover</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="get-1">
<db:title>QCoapReply *QCoapClient::get(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCoapReply *</db:type>
<db:methodname>get</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapReply * get(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sends a GET request to <db:code role="parameter">url</db:code> and returns a new <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#post">post</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#put">put</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#deleteResource">deleteResource</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#observe">observe</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#discover">discover</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="observe">
<db:title>QCoapReply *QCoapClient::observe(const QCoapRequest &amp;<db:emphasis>request</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCoapReply *</db:type>
<db:methodname>observe</db:methodname>
<db:methodparam>
<db:type>const QCoapRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapReply * observe(const QCoapRequest &amp;request)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a request to observe the target <db:code role="parameter">request</db:code> and returns a new <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> object which emits the <db:link xlink:href="">QCoapReply::notified</db:link>() signal whenever a new notification arrives.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#cancelObserve">cancelObserve</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#get">get</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#post">post</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#put">put</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#deleteResource">deleteResource</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#discover">discover</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="observe-1">
<db:title>QCoapReply *QCoapClient::observe(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCoapReply *</db:type>
<db:methodname>observe</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapReply * observe(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sends a request to observe the target <db:code role="parameter">url</db:code> and returns a new <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> object which emits the <db:link xlink:href="">QCoapReply::notified</db:link>() signal whenever a new notification arrives.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#cancelObserve">cancelObserve</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#get">get</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#post">post</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#put">put</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#deleteResource">deleteResource</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#discover">discover</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="post">
<db:title>QCoapReply *QCoapClient::post(const QCoapRequest &amp;<db:emphasis>request</db:emphasis>, const QByteArray &amp;<db:emphasis>data</db:emphasis> = QByteArray())</db:title>
<db:methodsynopsis>
<db:type>QCoapReply *</db:type>
<db:methodname>post</db:methodname>
<db:methodparam>
<db:type>const QCoapRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
<db:initializer>QByteArray()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapReply * post(const QCoapRequest &amp;request, const QByteArray &amp;data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends the <db:code role="parameter">request</db:code> using the POST method and returns a new <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> object. Uses <db:code role="parameter">data</db:code> as the payload for this request. If <db:code role="parameter">data</db:code> is empty, the payload of the <db:code role="parameter">request</db:code> will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#get">get</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#put">put</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#deleteResource">deleteResource</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#observe">observe</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#discover">discover</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="post-1">
<db:title>QCoapReply *QCoapClient::post(const QCoapRequest &amp;<db:emphasis>request</db:emphasis>, QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCoapReply *</db:type>
<db:methodname>post</db:methodname>
<db:methodparam>
<db:type>const QCoapRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapReply * post(const QCoapRequest &amp;request, QIODevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sends the <db:code role="parameter">request</db:code> using the POST method and returns a new <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> object. Uses <db:code role="parameter">device</db:code> content as the payload for this request. A null device is treated as empty content.</db:para>
<db:note>
<db:para>The device has to be open and readable before calling this function.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#get">get</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#put">put</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#deleteResource">deleteResource</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#observe">observe</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#discover">discover</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="post-2">
<db:title>QCoapReply *QCoapClient::post(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QByteArray &amp;<db:emphasis>data</db:emphasis> = QByteArray())</db:title>
<db:methodsynopsis>
<db:type>QCoapReply *</db:type>
<db:methodname>post</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
<db:initializer>QByteArray()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapReply * post(const QUrl &amp;url, const QByteArray &amp;data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sends a POST request to <db:code role="parameter">url</db:code> and returns a new <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> object. Uses <db:code role="parameter">data</db:code> as the payload for this request.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#get">get</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#put">put</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#deleteResource">deleteResource</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#observe">observe</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#discover">discover</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="put">
<db:title>QCoapReply *QCoapClient::put(const QCoapRequest &amp;<db:emphasis>request</db:emphasis>, const QByteArray &amp;<db:emphasis>data</db:emphasis> = QByteArray())</db:title>
<db:methodsynopsis>
<db:type>QCoapReply *</db:type>
<db:methodname>put</db:methodname>
<db:methodparam>
<db:type>const QCoapRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
<db:initializer>QByteArray()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapReply * put(const QCoapRequest &amp;request, const QByteArray &amp;data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends the <db:code role="parameter">request</db:code> using the PUT method and returns a new <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> object. Uses <db:code role="parameter">data</db:code> as the payload for this request. If <db:code role="parameter">data</db:code> is empty, the payload of the <db:code role="parameter">request</db:code> will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#get">get</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#post">post</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#deleteResource">deleteResource</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#observe">observe</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#discover">discover</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="put-1">
<db:title>QCoapReply *QCoapClient::put(const QCoapRequest &amp;<db:emphasis>request</db:emphasis>, QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCoapReply *</db:type>
<db:methodname>put</db:methodname>
<db:methodparam>
<db:type>const QCoapRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapReply * put(const QCoapRequest &amp;request, QIODevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sends the <db:code role="parameter">request</db:code> using the PUT method and returns a new <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> object. Uses <db:code role="parameter">device</db:code> content as the payload for this request. A null device is treated as empty content.</db:para>
<db:note>
<db:para>The device has to be open and readable before calling this function.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#get">get</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#post">post</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#deleteResource">deleteResource</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#observe">observe</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#discover">discover</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="put-2">
<db:title>QCoapReply *QCoapClient::put(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QByteArray &amp;<db:emphasis>data</db:emphasis> = QByteArray())</db:title>
<db:methodsynopsis>
<db:type>QCoapReply *</db:type>
<db:methodname>put</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
<db:initializer>QByteArray()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapReply * put(const QUrl &amp;url, const QByteArray &amp;data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sends a PUT request to <db:code role="parameter">url</db:code> and returns a new <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> object. Uses <db:code role="parameter">data</db:code> as the payload for this request.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#get">get</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#post">post</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#deleteResource">deleteResource</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#observe">observe</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapclient.xml#discover">discover</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="responseToMulticastReceived">
<db:title>void QCoapClient::responseToMulticastReceived(QCoapReply *<db:emphasis>reply</db:emphasis>, const QCoapMessage &amp;<db:emphasis>message</db:emphasis>, const QHostAddress &amp;<db:emphasis>sender</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>responseToMulticastReceived</db:methodname>
<db:methodparam>
<db:type>QCoapReply *</db:type>
<db:parameter>reply</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QCoapMessage &amp;</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QHostAddress &amp;</db:type>
<db:parameter>sender</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void responseToMulticastReceived(QCoapReply *reply, const QCoapMessage &amp;message, const QHostAddress &amp;sender)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a unicast response to a multicast request arrives. The <db:code role="parameter">reply</db:code> parameter contains a pointer to the reply that has just been received, <db:code role="parameter">message</db:code> contains the payload and the message details, and <db:code role="parameter">sender</db:code> contains the sender address.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapreply.xml#finished">QCoapReply::finished</db:link>()</db:member>
<db:member><db:link xlink:href="">QCoapReply::error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAckRandomFactor">
<db:title>void QCoapClient::setAckRandomFactor(double <db:emphasis>ackRandomFactor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAckRandomFactor</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>ackRandomFactor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAckRandomFactor(double ackRandomFactor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code>ACK_RANDOM_FACTOR</db:code> value defined in <db:link xlink:href="https://tools.ietf.org/html/rfc7252#section-4.2">RFC 7252 - Section 4.2</db:link>, to <db:code role="parameter">ackRandomFactor</db:code>. This value should be greater than or equal to 1. The default is 1.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#setAckTimeout">setAckTimeout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAckTimeout">
<db:title>void QCoapClient::setAckTimeout(uint <db:emphasis>ackTimeout</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAckTimeout</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>ackTimeout</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAckTimeout(uint ackTimeout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code>ACK_TIMEOUT</db:code> value defined in <db:link xlink:href="https://tools.ietf.org/html/rfc7252#section-4.2">RFC 7252 - Section 4.2</db:link> to <db:code role="parameter">ackTimeout</db:code> in milliseconds. The default is 2000 ms.</db:para>
<db:para>This timeout only applies to confirmable messages. The actual timeout for reliable transmissions is a random value between <db:code>ACK_TIMEOUT</db:code> and <db:code>ACK_TIMEOUT * ACK_RANDOM_FACTOR</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#setAckRandomFactor">setAckRandomFactor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBlockSize">
<db:title>void QCoapClient::setBlockSize(quint16 <db:emphasis>blockSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBlockSize</db:methodname>
<db:methodparam>
<db:type>quint16</db:type>
<db:parameter>blockSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBlockSize(quint16 blockSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum block size used by the protocol to <db:code role="parameter">blockSize</db:code> when sending requests and receiving replies. The block size must be a power of two.</db:para>
</db:section>
<db:section xml:id="setMaximumRetransmitCount">
<db:title>void QCoapClient::setMaximumRetransmitCount(uint <db:emphasis>maximumRetransmitCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMaximumRetransmitCount</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>maximumRetransmitCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMaximumRetransmitCount(uint maximumRetransmitCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code>MAX_RETRANSMIT</db:code> value defined in <db:link xlink:href="https://tools.ietf.org/html/rfc7252#section-4.2">RFC 7252 - Section 4.2</db:link> to <db:code role="parameter">maximumRetransmitCount</db:code>. This value should be less than or equal to 25. The default is 4.</db:para>
</db:section>
<db:section xml:id="setMaximumServerResponseDelay">
<db:title>void QCoapClient::setMaximumServerResponseDelay(uint <db:emphasis>responseDelay</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMaximumServerResponseDelay</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>responseDelay</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMaximumServerResponseDelay(uint responseDelay)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code>MAX_SERVER_RESPONSE_DELAY</db:code> value to <db:code role="parameter">responseDelay</db:code> in milliseconds. The default is 250 seconds.</db:para>
<db:para>As defined in <db:link xlink:href="https://tools.ietf.org/search/rfc7390#section-2.5">RFC 7390 - Section 2.5</db:link>, <db:code>MAX_SERVER_RESPONSE_DELAY</db:code> is the expected maximum response delay over all servers that the client can send a multicast request to.</db:para>
</db:section>
<db:section xml:id="setMinimumTokenSize">
<db:title>void QCoapClient::setMinimumTokenSize(int <db:emphasis>tokenSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMinimumTokenSize</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>tokenSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMinimumTokenSize(int tokenSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the minimum token size to <db:code role="parameter">tokenSize</db:code> in bytes. For security reasons it is recommended to use tokens with a length of at least 4 bytes. The default value for this parameter is 4 bytes.</db:para>
</db:section>
<db:section xml:id="setSecurityConfiguration">
<db:title>void QCoapClient::setSecurityConfiguration(const QCoapSecurityConfiguration &amp;<db:emphasis>configuration</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSecurityConfiguration</db:methodname>
<db:methodparam>
<db:type>const QCoapSecurityConfiguration &amp;</db:type>
<db:parameter>configuration</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSecurityConfiguration(const QCoapSecurityConfiguration &amp;configuration)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the security configuration parameters from <db:code role="parameter">configuration</db:code>. Configuration will be ignored if the <db:link xlink:href="qtcoap.xml#SecurityMode-enum">QtCoap::NoSecurity</db:link> mode is used.</db:para>
<db:note>
<db:para>This method must be called before the handshake starts. If you need to change the security configuration after establishing a secure connection with the server, the client needs to be disconnected first.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#disconnect">disconnect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSocketOption">
<db:title>void QCoapClient::setSocketOption(QAbstractSocket::SocketOption <db:emphasis>option</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSocketOption</db:methodname>
<db:methodparam>
<db:type>QAbstractSocket::SocketOption</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSocketOption(QAbstractSocket::SocketOption option, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link> socket <db:code role="parameter">option</db:code> to <db:code role="parameter">value</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
