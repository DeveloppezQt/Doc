<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Baked Lightmap Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates the use of baked lightmaps in a 3D scene.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2022 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import QtQuick3D
import QtQuick3D.Helpers

Window {
    width: 1280
    height: 720
    title: &quot;Qt Quick 3D Baked Lightmap Example&quot;
    visible: true

    View3D {
        id: root
        anchors.fill: parent

        environment: SceneEnvironment {
            backgroundMode: SceneEnvironment.Color
            clearColor: &quot;black&quot;
        }

        PerspectiveCamera {
            id: camera
            z: 300
            y: 100
        }

        property bool lmEnabled: lmToggle.checked
        property int lightBakeMode: lmToggle.checked ? Light.BakeModeAll : Light.BakeModeDisabled

        PointLight {
            bakeMode: root.lightBakeMode
            y: 190
            brightness: brightnessSlider.value
            castsShadow: true
            shadowFactor: 75
        }

        Box {
            usedInBakedLighting: true
            lightmapBaseResolution: 256
            bakedLightmap: BakedLightmap {
                enabled: root.lmEnabled
                key: &quot;box&quot;
                loadPrefix: &quot;file:&quot;
            }
            scale: Qt.vector3d(100, 100, 100)
        }

        Rectangle {
            color: &quot;lightGray&quot;
            width: 320
            height: 160
            ColumnLayout {
                anchors.centerIn: parent
                CheckBox {
                    id: lmToggle
                    text: &quot;Use lightmaps (fully baked direct+indirect)\nif available&quot;
                    checked: true
                    focusPolicy: Qt.NoFocus
                }
                Text {
                    text: &quot;How to bake lightmaps: \nOpen DebugView -&amp;gt; Tools -&amp;gt; Bake lightmap&quot;
                }
                Text {
                    text: &quot;Slider controls light brightness&quot;
                }
                Slider {
                    id: brightnessSlider
                    value: 5.0
                    from: 0
                    to: 10
                }
            }
        }
    }

    Item {
        width: debugViewToggleText.implicitWidth
        height: debugViewToggleText.implicitHeight
        anchors.right: parent.right
        Label {
            id: debugViewToggleText
            text: &quot;Click here &quot; + (dbg.visible ? &quot;to hide DebugView&quot; : &quot;for DebugView&quot;)
            color: &quot;white&quot;
            anchors.right: parent.right
            anchors.top: parent.top
        }
        MouseArea {
            anchors.fill: parent
            onClicked: dbg.visible = !dbg.visible
            DebugView {
                y: debugViewToggleText.height * 2
                anchors.right: parent.right
                source: root
                id: dbg
                visible: false
            }
        }
    }
}

</db:programlisting>
</db:article>
