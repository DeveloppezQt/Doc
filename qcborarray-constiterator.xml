<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ConstIterator Class</db:title>
<db:subtitle>QCborArray::ConstIterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcborarray-constiterator.xml">QCborArray::ConstIterator</db:link> class provides an STL-style const iterator for <db:link xlink:href="qcborarray.xml">QCborArray</db:link>.</db:para>
<db:para>This class is <db:emphasis>strongly comparable</db:emphasis>.</db:para>
<db:para>This class is <db:emphasis role="bold">strongly comparable</db:emphasis> with <db:link xlink:href="qcborarray-iterator.xml">QCborArray::Iterator</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>ConstIterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>ConstIterator is part of <db:simplelist><db:member><db:link xlink:href="cbor.xml">CBOR Support in Qt</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qcborarray-constiterator.xml">QCborArray::ConstIterator</db:link> allows you to iterate over a <db:link xlink:href="qcborarray.xml">QCborArray</db:link>. If you want to modify the <db:link xlink:href="qcborarray.xml">QCborArray</db:link> as you iterate over it, use <db:link xlink:href="qcborarray-iterator.xml">QCborArray::Iterator</db:link> instead. It is generally good practice to use <db:link xlink:href="qcborarray-constiterator.xml">QCborArray::ConstIterator</db:link>, even on a non-const <db:link xlink:href="qcborarray.xml">QCborArray</db:link>, when you don't need to change the <db:link xlink:href="qcborarray.xml">QCborArray</db:link> through the iterator. Const iterators are slightly faster and improves code readability.</db:para>
<db:para>Iterators are initialized by using a <db:link xlink:href="qcborarray.xml">QCborArray</db:link> function like <db:link xlink:href="qcborarray.xml#begin">QCborArray::begin</db:link>() or <db:link xlink:href="qcborarray.xml#end">QCborArray::end</db:link>(). Iteration is only possible after that.</db:para>
<db:para>Most <db:link xlink:href="qcborarray.xml">QCborArray</db:link> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <db:link xlink:href="qcborarray.xml">QCborArray</db:link>. One place where STL-style iterators do make sense is as arguments to <db:link xlink:href="qtalgorithms.xml">generic algorithms</db:link>.</db:para>
<db:para>Multiple iterators can be used on the same array. However, be aware that any non-const function call performed on the <db:link xlink:href="qcborarray.xml">QCborArray</db:link> will render all existing iterators undefined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray-iterator.xml">QCborArray::Iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="iterator_category-typedef">
<db:title>ConstIterator::iterator_category</db:title>
<db:para>A synonym for <db:emphasis>std::random_access_iterator_tag</db:emphasis> indicating this iterator is a random access iterator.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="ConstIterator">
<db:title>[constexpr noexcept] ConstIterator::ConstIterator()</db:title>
<db:para>Constructs an uninitialized iterator.</db:para>
<db:para>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#constBegin">QCborArray::constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#constEnd">QCborArray::constEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ConstIterator-1">
<db:title>[constexpr noexcept] ConstIterator::ConstIterator(const QCborArray::ConstIterator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2a">
<db:title>QCborValueConstRef ConstIterator::operator*() const</db:title>
<db:para>Returns the current item.</db:para>
</db:section>
<db:section xml:id="operator-2b">
<db:title>QCborArray::ConstIterator ConstIterator::operator+(qsizetype <db:emphasis>j</db:emphasis>) const</db:title>
<db:para>Returns an iterator to the item at a position <db:code role="parameter">j</db:code> steps forward from this iterator. If <db:code role="parameter">j</db:code> is negative, the iterator goes backward.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray-constiterator.xml#operator-">operator-</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray-constiterator.xml#operator-2b-eq">operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b">
<db:title>QCborArray::ConstIterator &amp;ConstIterator::operator++()</db:title>
<db:para>The prefix ++ operator, ++it, advances the iterator to the next item in the array and returns this iterator.</db:para>
<db:para>Calling this function on <db:link xlink:href="qcborarray.xml#end">QCborArray::end</db:link>() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray-constiterator.xml#operator--">operator--</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b-1">
<db:title>QCborArray::ConstIterator ConstIterator::operator++(<db:emphasis>int</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix ++ operator, it++, advances the iterator to the next item in the array and returns an iterator to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>QCborArray::ConstIterator &amp;ConstIterator::operator+=(qsizetype <db:emphasis>j</db:emphasis>)</db:title>
<db:para>Advances the iterator by <db:code role="parameter">j</db:code> positions. If <db:code role="parameter">j</db:code> is negative, the iterator goes backward. Returns a reference to this iterator.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray-constiterator.xml#operator--eq">operator-=</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray-constiterator.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-">
<db:title>qsizetype ConstIterator::operator-(QCborArray::ConstIterator <db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns the offset of this iterator relative to <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator--1">
<db:title>QCborArray::ConstIterator ConstIterator::operator-(qsizetype <db:emphasis>j</db:emphasis>) const</db:title>
<db:para>Returns an iterator to the item at a position <db:code role="parameter">j</db:code> steps backward from this iterator. If <db:code role="parameter">j</db:code> is negative, the iterator goes forward.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray-constiterator.xml#operator-2b">operator+</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray-constiterator.xml#operator--eq">operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--">
<db:title>QCborArray::ConstIterator &amp;ConstIterator::operator--()</db:title>
<db:para>The prefix -- operator, --it, makes the preceding item current and returns this iterator.</db:para>
<db:para>Calling this function on <db:link xlink:href="qcborarray.xml#begin">QCborArray::begin</db:link>() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray-constiterator.xml#operator-2b-2b">operator++</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator---1">
<db:title>QCborArray::ConstIterator ConstIterator::operator--(<db:emphasis>int</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix -- operator, it--, makes the preceding item current and returns an iterator to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator--eq">
<db:title>QCborArray::ConstIterator &amp;ConstIterator::operator-=(qsizetype <db:emphasis>j</db:emphasis>)</db:title>
<db:para>Makes the iterator go back by <db:code role="parameter">j</db:code> positions. If <db:code role="parameter">j</db:code> is negative, the iterator goes forward. Returns a reference to this iterator.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray-constiterator.xml#operator-2b-eq">operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray-constiterator.xml#operator-">operator-</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--gt">
<db:title>const QCborValueConstRef *ConstIterator::operator-&gt;() const</db:title>
<db:para>Returns a pointer to the current item.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QCborArray::ConstIterator &amp;ConstIterator::operator=(const QCborArray::ConstIterator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Makes this iterator a copy of <db:code role="parameter">other</db:code> and returns a reference to this iterator.</db:para>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>QCborValueConstRef ConstIterator::operator[](qsizetype <db:emphasis>j</db:emphasis>) const</db:title>
<db:para>Returns the item at a position <db:code role="parameter">j</db:code> steps forward from the item pointed to by this iterator.</db:para>
<db:para>This function is provided to make <db:link xlink:href="qcborarray.xml">QCborArray</db:link> iterators behave like C++ pointers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray-constiterator.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>[noexcept] bool operator!=(const QCborArray::ConstIterator &amp;<db:emphasis>lhs</db:emphasis>, const QCborArray::ConstIterator &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> points to a different entry in the array than <db:code role="parameter">rhs</db:code> iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray-constiterator.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt">
<db:title>[noexcept] bool operator&lt;(const QCborArray::ConstIterator &amp;<db:emphasis>lhs</db:emphasis>, const QCborArray::ConstIterator &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if the entry in the array pointed to by <db:code role="parameter">lhs</db:code> iterator occurs before the entry pointed to by the <db:code role="parameter">rhs</db:code> iterator.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq">
<db:title>[noexcept] bool operator&lt;=(const QCborArray::ConstIterator &amp;<db:emphasis>lhs</db:emphasis>, const QCborArray::ConstIterator &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if the entry in the array pointed to by <db:code role="parameter">lhs</db:code> iterator occurs before or is the same entry as is pointed to by the <db:code role="parameter">rhs</db:code> iterator.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[noexcept] bool operator==(const QCborArray::ConstIterator &amp;<db:emphasis>lhs</db:emphasis>, const QCborArray::ConstIterator &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> points to the same entry in the array as <db:code role="parameter">rhs</db:code> iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray-constiterator.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt">
<db:title>[noexcept] bool operator&gt;(const QCborArray::ConstIterator &amp;<db:emphasis>lhs</db:emphasis>, const QCborArray::ConstIterator &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if the entry in the array pointed to by <db:code role="parameter">lhs</db:code> iterator occurs after the entry pointed to by the <db:code role="parameter">rhs</db:code> iterator.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq">
<db:title>[noexcept] bool operator&gt;=(const QCborArray::ConstIterator &amp;<db:emphasis>lhs</db:emphasis>, const QCborArray::ConstIterator &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if the entry in the array pointed to by <db:code role="parameter">lhs</db:code> iterator occurs after or is the same entry as is pointed to by the <db:code role="parameter">rhs</db:code> iterator.</db:para>
</db:section>
</db:section>
</db:article>
