<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>DelegateModelGroup QML Type</db:title>
<db:productname>QtQmlModels</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Models Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Encapsulates a filtered set of visual data items.</db:para>
<db:para>This type was introduced in Qt 5.1.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQml.Models 2.14</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>DelegateModelGroup is part of <db:simplelist><db:member>qtquick-models</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml">DelegateModelGroup</db:link> type provides a means to address the model data of a <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link>'s delegate items, as well as sort and filter these delegate items.</db:para>
<db:para>The initial set of instantiable delegate items in a <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link> is represented by its <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#items-prop">items</db:link> group, which normally directly reflects the contents of the model assigned to <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#model-attached-prop">DelegateModel::model</db:link>. This set can be changed to the contents of any other member of <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#groups-attached-prop">DelegateModel::groups</db:link> by assigning the <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml#name-prop">name</db:link> of that <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml">DelegateModelGroup</db:link> to the <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#filterOnGroup-prop">DelegateModel::filterOnGroup</db:link> property.</db:para>
<db:para>The data of an item in a <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml">DelegateModelGroup</db:link> can be accessed using the <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml#get-method">get</db:link>() function, which returns information about group membership and indexes as well as model data. In combination with the <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml#move-method">move</db:link>() function this can be used to implement view sorting, with <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml#remove-method">remove</db:link>() to filter items out of a view, or with <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml#setGroups-method">setGroups</db:link>() and <db:link xlink:href="qml-qtqml-models-package.xml">Package</db:link> delegates to categorize items into different views. Different groups can only be sorted independently if they are disjunct. Moving an item in one group will also move it in all other groups it is a part of.</db:para>
<db:para>Data from models can be supplemented by inserting data directly into a <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml">DelegateModelGroup</db:link> with the <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml#insert-method">insert</db:link>() function. This can be used to introduce mock items into a view, or placeholder items that are later <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml#resolve-method">resolved</db:link> to real model data when it becomes available.</db:para>
<db:para>Delegate items can also be instantiated directly from a <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml">DelegateModelGroup</db:link> using the <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml#create-method">create</db:link>() function, making it possible to use <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link> without an accompanying view type or to cherry-pick specific items that should be instantiated irregardless of whether they're currently within a view's visible area.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-dynamicview-tutorial.xml">QML Dynamic View Ordering Tutorial</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="count-prop">
<db:title>count : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>count</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of items in the group.</db:para>
</db:section>
<db:section xml:id="includeByDefault-prop">
<db:title>includeByDefault : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>includeByDefault</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether new items are assigned to this group by default.</db:para>
</db:section>
<db:section xml:id="name-prop">
<db:title>name : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>name</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the name of the group.</db:para>
<db:para>Each group in a model must have a unique name starting with a lower case letter.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="changed-signal">
<db:title>changed(array <db:emphasis>removed</db:emphasis>, array <db:emphasis>inserted</db:emphasis>)</db:title>
<db:para>This signal is emitted when items have been removed from or inserted into the group.</db:para>
<db:para>Each object in the <db:code role="parameter">removed</db:code> and <db:code role="parameter">inserted</db:code> arrays has two values; the <db:emphasis>index</db:emphasis> of the first item inserted or removed and a <db:emphasis>count</db:emphasis> of the number of consecutive items inserted or removed.</db:para>
<db:para>Each index is adjusted for previous changes with all removed items preceding any inserted items.</db:para>
<db:para>The corresponding handler is <db:code>onChanged</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onChanged</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="insert-method">
<db:title>insert(int <db:emphasis>index</db:emphasis>, jsdict <db:emphasis>data</db:emphasis>, array <db:emphasis>groups</db:emphasis> = undefined)</db:title>
<db:methodsynopsis>
<db:type></db:type>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>jsdict</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>array</db:type>
<db:parameter>groups</db:parameter>
<db:initializer>undefined</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="signature">insert(int index, jsdict data, array groups)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:bridgehead renderas="sect2">insert(jsdict <db:emphasis>data</db:emphasis>, var <db:emphasis>groups</db:emphasis> = undefined)</db:bridgehead><db:methodsynopsis>
<db:type></db:type>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>jsdict</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>var</db:type>
<db:parameter>groups</db:parameter>
<db:initializer>undefined</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">insert(jsdict data, var groups)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a new entry at <db:code role="parameter">index</db:code> in a <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link> with the values from <db:code role="parameter">data</db:code> that correspond to roles in the model assigned to <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#model-attached-prop">DelegateModel::model</db:link>.</db:para>
<db:para>If no index is supplied the data is appended to the model.</db:para>
<db:para>The optional <db:code role="parameter">groups</db:code> parameter identifies the groups the new entry should belong to, if unspecified this is equal to the group insert was called on.</db:para>
<db:para>Data inserted into a <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link> can later be merged with an existing entry in <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#model-attached-prop">DelegateModel::model</db:link> using the <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml#resolve-method">resolve</db:link>() function. This can be used to create placeholder items that are later replaced by actual data.</db:para>
</db:section>
<db:section xml:id="create-method">
<db:title>create(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type></db:type>
<db:methodname>create</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="signature">create(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:bridgehead renderas="sect2">create(int <db:emphasis>index</db:emphasis>, jsdict <db:emphasis>data</db:emphasis>, array <db:emphasis>groups</db:emphasis> = undefined)</db:bridgehead><db:methodsynopsis>
<db:type></db:type>
<db:methodname>create</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>jsdict</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>array</db:type>
<db:parameter>groups</db:parameter>
<db:initializer>undefined</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">create(int index, jsdict data, array groups)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:bridgehead renderas="sect2">create(jsdict <db:emphasis>data</db:emphasis>, array <db:emphasis>groups</db:emphasis> = undefined)</db:bridgehead><db:methodsynopsis>
<db:type></db:type>
<db:methodname>create</db:methodname>
<db:methodparam>
<db:type>jsdict</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>array</db:type>
<db:parameter>groups</db:parameter>
<db:initializer>undefined</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">create(jsdict data, array groups)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the instantiated item at <db:code role="parameter">index</db:code> in the group.</db:para>
<db:para>If a <db:code role="parameter">data</db:code> object is provided it will be <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml#insert-method">inserted</db:link> at <db:code role="parameter">index</db:code> and an item referencing this new entry will be returned. The optional <db:code role="parameter">groups</db:code> parameter identifies the groups the new entry should belong to, if unspecified this is equal to the group <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml#create-method">create</db:link>() was called on.</db:para>
<db:para>All items returned by create are added to the <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#persistedItems-prop">persistedItems</db:link> group. Items in this group remain instantiated when not referenced by any view.</db:para>
</db:section>
<db:section xml:id="addGroups-method">
<db:title>addGroups(int <db:emphasis>index</db:emphasis>, int <db:emphasis>count</db:emphasis>, stringlist <db:emphasis>groups</db:emphasis>)</db:title>
<db:para>Adds <db:code role="parameter">count</db:code> items starting at <db:code role="parameter">index</db:code> to <db:code role="parameter">groups</db:code>.</db:para>
</db:section>
<db:section xml:id="get-method">
<db:title>object get(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns a javascript object describing the item at <db:code role="parameter">index</db:code> in the group.</db:para>
<db:para>The returned object contains the same information that is available to a delegate from the <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link> attached as well as the model for that item. It has the properties:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">model</db:emphasis> The model data of the item. This is the same as the model context property in a delegate</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">groups</db:emphasis> A list the of names of groups the item is a member of. This property can be written to change the item's membership.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">inItems</db:emphasis> Whether the item belongs to the <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#items-prop">items</db:link> group. Writing to this property will add or remove the item from the group.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">itemsIndex</db:emphasis> The index of the item within the <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#items-prop">items</db:link> group.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">in&lt;GroupName&gt;</db:emphasis> Whether the item belongs to the dynamic group <db:emphasis>groupName</db:emphasis>. Writing to this property will add or remove the item from the group.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">&lt;groupName&gt;Index</db:emphasis> The index of the item within the dynamic group <db:emphasis>groupName</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">isUnresolved</db:emphasis> Whether the item is bound to an index in the model assigned to <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#model-attached-prop">DelegateModel::model</db:link>. Returns true if the item is not bound to the model, and false if it is.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="move-method">
<db:title>move(var <db:emphasis>from</db:emphasis>, var <db:emphasis>to</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Moves <db:code role="parameter">count</db:code> at <db:code role="parameter">from</db:code> in a group <db:code role="parameter">to</db:code> a new position.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link> acts as a proxy model: it holds the delegates in a different order than the <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#model-prop">underlying model</db:link> has them. Any subsequent changes to the underlying model will not undo whatever reordering you have done via this function.</db:para>
</db:note>
</db:section>
<db:section xml:id="remove-method">
<db:title>remove(int <db:emphasis>index</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Removes <db:code role="parameter">count</db:code> items starting at <db:code role="parameter">index</db:code> from the group.</db:para>
</db:section>
<db:section xml:id="removeGroups-method">
<db:title>removeGroups(int <db:emphasis>index</db:emphasis>, int <db:emphasis>count</db:emphasis>, stringlist <db:emphasis>groups</db:emphasis>)</db:title>
<db:para>Removes <db:code role="parameter">count</db:code> items starting at <db:code role="parameter">index</db:code> from <db:code role="parameter">groups</db:code>.</db:para>
</db:section>
<db:section xml:id="resolve-method">
<db:title>resolve(int <db:emphasis>from</db:emphasis>, int <db:emphasis>to</db:emphasis>)</db:title>
<db:para>Binds an unresolved item at <db:code role="parameter">from</db:code> to an item in <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#model-attached-prop">DelegateModel::model</db:link> at index <db:code role="parameter">to</db:code>.</db:para>
<db:para>Unresolved items are entries whose data has been <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml#insert-method">inserted</db:link> into a <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml">DelegateModelGroup</db:link> instead of being derived from a <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#model-attached-prop">DelegateModel::model</db:link> index. Resolving an item will replace the item at the target index with the unresolved item. A resolved an item will reflect the data of the source model at its bound index and will move when that index moves like any other item.</db:para>
<db:para>If a new item is replaced in the <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml">DelegateModelGroup</db:link> onChanged() handler its insertion and replacement will be communicated to views as an atomic operation, creating the appearance that the model contents have not changed, or if the unresolved and model item are not adjacent that the previously unresolved item has simply moved.</db:para>
</db:section>
<db:section xml:id="setGroups-method">
<db:title>setGroups(int <db:emphasis>index</db:emphasis>, int <db:emphasis>count</db:emphasis>, stringlist <db:emphasis>groups</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">groups</db:code> <db:code role="parameter">count</db:code> items starting at <db:code role="parameter">index</db:code> belong to.</db:para>
</db:section>
<db:section xml:id="setGroups-method-1">
<db:title>setGroups(int <db:emphasis>index</db:emphasis>, int <db:emphasis>count</db:emphasis>, stringlist <db:emphasis>groups</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">groups</db:code> <db:code role="parameter">count</db:code> items starting at <db:code role="parameter">index</db:code> belong to.</db:para>
</db:section>
</db:section>
</db:article>
