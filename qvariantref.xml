<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QVariantRef Class</db:title>
<db:subtitle>template &lt;typename Pointer&gt; class QVariantRef</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qvariantref.xml">QVariantRef</db:link> acts as a non-const reference to a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QVariantRef</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>As the generic iterators don't actually instantiate a <db:link xlink:href="qvariant.xml">QVariant</db:link> on each step, they cannot return a reference to one from operator*(). <db:link xlink:href="qvariantref.xml">QVariantRef</db:link> provides the same functionality as an actual reference to a <db:link xlink:href="qvariant.xml">QVariant</db:link> would, but is backed by a pointer given as template parameter. The template is implemented for pointers of type QSequentialIterator and QAssociativeIterator.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QVariantRef">
<db:title>[explicit] QVariantRef::QVariantRef(const Pointer *<db:emphasis>pointer</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QVariantRef</db:methodname>
<db:methodparam>
<db:type>const Pointer *</db:type>
<db:parameter>pointer</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariantRef(const Pointer *pointer)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qvariantref.xml">QVariantRef</db:link> from an <db:code role="parameter">pointer</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QVariantRef::operator QVariant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>operator QVariant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant operator QVariant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resolves the <db:link xlink:href="qvariantref.xml">QVariantRef</db:link> to an actual <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QVariantRef&lt;Pointer&gt; &amp;QVariantRef::operator=(const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVariantRef&lt;Pointer&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariantRef&lt;Pointer&gt; &amp; operator=(const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns a new <db:code role="parameter">value</db:code> to the value pointed to by the pointer this <db:link xlink:href="qvariantref.xml">QVariantRef</db:link> refers to.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QVariantRef&lt;Pointer&gt; &amp;QVariantRef::operator=(const QVariantRef&lt;Pointer&gt; &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVariantRef&lt;Pointer&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QVariantRef&lt;Pointer&gt; &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariantRef&lt;Pointer&gt; &amp; operator=(const QVariantRef&lt;Pointer&gt; &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns a new <db:code role="parameter">value</db:code> to the value pointed to by the pointer this <db:link xlink:href="qvariantref.xml">QVariantRef</db:link> refers to.</db:para>
</db:section>
<db:section xml:id="operator-eq-2">
<db:title>QVariantRef&lt;Pointer&gt; &amp;QVariantRef::operator=(QVariantRef&lt;Pointer&gt; &amp;&amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVariantRef&lt;Pointer&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QVariantRef&lt;Pointer&gt; &amp;&amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariantRef&lt;Pointer&gt; &amp; operator=(QVariantRef&lt;Pointer&gt; &amp;&amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns a new <db:code role="parameter">value</db:code> to the value pointed to by the pointer this <db:link xlink:href="qvariantref.xml">QVariantRef</db:link> refers to.</db:para>
</db:section>
</db:section>
</db:article>
