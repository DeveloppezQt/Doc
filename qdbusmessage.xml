<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDBusMessage Class</db:title>
<db:productname>QtDBus</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>QtDBus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdbusmessage.xml">QDBusMessage</db:link> class represents one message sent or received over the D-Bus bus.</db:para>
<db:para>This class was introduced in Qt 4.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDBusMessage</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += dbus</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This object can represent any of the four different types of messages (<db:link xlink:href="qdbusmessage.xml#MessageType-enum">MessageType</db:link>) that can occur on the bus:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Method calls</db:para>
</db:listitem>
<db:listitem>
<db:para>Method return values</db:para>
</db:listitem>
<db:listitem>
<db:para>Signal emissions</db:para>
</db:listitem>
<db:listitem>
<db:para>Error codes</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Objects of this type are created with the static <db:link xlink:href="qdbusmessage.xml#createError">createError</db:link>(), <db:link xlink:href="qdbusmessage.xml#createMethodCall">createMethodCall</db:link>() and <db:link xlink:href="qdbusmessage.xml#createSignal">createSignal</db:link>() functions. Use the <db:link xlink:href="qdbusconnection.xml#send">QDBusConnection::send</db:link>() function to send the messages.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="MessageType-enum">
<db:title>enum QDBusMessage::MessageType</db:title>
<db:para>The possible message types:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusmessage.xml">QDBusMessage</db:link></db:emphasis>::MethodCallMessage</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>a message representing an outgoing or incoming method call</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusmessage.xml">QDBusMessage</db:link></db:emphasis>::SignalMessage</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>a message representing an outgoing or incoming signal emission</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusmessage.xml">QDBusMessage</db:link></db:emphasis>::ReplyMessage</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>a message representing the return values of a method call</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusmessage.xml">QDBusMessage</db:link></db:emphasis>::ErrorMessage</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>a message representing an error condition in response to a method call</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusmessage.xml">QDBusMessage</db:link></db:emphasis>::InvalidMessage</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>an invalid message: this is never set on messages received from D-Bus</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDBusMessage">
<db:title>QDBusMessage::QDBusMessage()</db:title>
<db:para>Constructs an empty, invalid <db:link xlink:href="qdbusmessage.xml">QDBusMessage</db:link> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusmessage.xml#createError">createError</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusmessage.xml#createMethodCall">createMethodCall</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusmessage.xml#createSignal">createSignal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDBusMessage-1">
<db:title>QDBusMessage::QDBusMessage(const QDBusMessage &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of the object given by <db:code role="parameter">other</db:code>.</db:para>
<db:para>Note: <db:link xlink:href="qdbusmessage.xml">QDBusMessage</db:link> objects are shared. Modifications made to the copy will affect the original one as well. See <db:link xlink:href="qdbusmessage.xml#setDelayedReply">setDelayedReply</db:link>() for more information.</db:para>
</db:section>
<db:section xml:id="dtor.QDBusMessage">
<db:title>[noexcept] QDBusMessage::~QDBusMessage()</db:title>
<db:para>Disposes of the object and frees any resources that were being held.</db:para>
</db:section>
<db:section xml:id="arguments">
<db:title>QList&lt;QVariant&gt; QDBusMessage::arguments() const</db:title>
<db:para>Returns the list of arguments that are going to be sent or were received from D-Bus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusmessage.xml#setArguments">setArguments</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="autoStartService">
<db:title>[since 4.7] bool QDBusMessage::autoStartService() const</db:title>
<db:para>Returns the auto start flag, as set by <db:link xlink:href="qdbusmessage.xml#setAutoStartService">setAutoStartService</db:link>(). By default, this flag is true, which means Qt D-Bus will auto start a service, if it is not running already.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusmessage.xml#setAutoStartService">setAutoStartService</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createError">
<db:title>[static] QDBusMessage QDBusMessage::createError(const QDBusError &amp;<db:emphasis>error</db:emphasis>)</db:title>
<db:para>Constructs a new DBus message representing the given <db:code role="parameter">error</db:code>.</db:para>
</db:section>
<db:section xml:id="createError-1">
<db:title>[static] QDBusMessage QDBusMessage::createError(QDBusError::ErrorType <db:emphasis>type</db:emphasis>, const QString &amp;<db:emphasis>msg</db:emphasis>)</db:title>
<db:para>Constructs a new DBus message for the error type <db:code role="parameter">type</db:code> using the message <db:code role="parameter">msg</db:code>. Returns the DBus message.</db:para>
</db:section>
<db:section xml:id="createError-2">
<db:title>[static] QDBusMessage QDBusMessage::createError(const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>msg</db:emphasis>)</db:title>
<db:para>Constructs a new DBus message representing an error, with the given <db:code role="parameter">name</db:code> and <db:code role="parameter">msg</db:code>.</db:para>
</db:section>
<db:section xml:id="createErrorReply">
<db:title>QDBusMessage QDBusMessage::createErrorReply(const QDBusError &amp;<db:emphasis>error</db:emphasis>) const</db:title>
<db:para>Constructs a new DBus message representing an error reply message, from the given <db:code role="parameter">error</db:code> object.</db:para>
</db:section>
<db:section xml:id="createErrorReply-1">
<db:title>QDBusMessage QDBusMessage::createErrorReply(QDBusError::ErrorType <db:emphasis>type</db:emphasis>, const QString &amp;<db:emphasis>msg</db:emphasis>) const</db:title>
<db:para>Constructs a new DBus reply message for the error type <db:code role="parameter">type</db:code> using the message <db:code role="parameter">msg</db:code>. Returns the DBus message.</db:para>
</db:section>
<db:section xml:id="createErrorReply-2">
<db:title>QDBusMessage QDBusMessage::createErrorReply(const QString <db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>msg</db:emphasis>) const</db:title>
<db:para>Constructs a new DBus message representing an error reply message, with the given <db:code role="parameter">name</db:code> and <db:code role="parameter">msg</db:code>.</db:para>
</db:section>
<db:section xml:id="createMethodCall">
<db:title>[static] QDBusMessage QDBusMessage::createMethodCall(const QString &amp;<db:emphasis>service</db:emphasis>, const QString &amp;<db:emphasis>path</db:emphasis>, const QString &amp;<db:emphasis>interface</db:emphasis>, const QString &amp;<db:emphasis>method</db:emphasis>)</db:title>
<db:para>Constructs a new DBus message representing a method call. A method call always informs its destination address (<db:code role="parameter">service</db:code>, <db:code role="parameter">path</db:code>, <db:code role="parameter">interface</db:code> and <db:code role="parameter">method</db:code>).</db:para>
<db:para>The DBus bus allows calling a method on a given remote object without specifying the destination interface, if the method name is unique. However, if two interfaces on the remote object export the same method name, the result is undefined (one of the two may be called or an error may be returned).</db:para>
<db:para>When using DBus in a peer-to-peer context (i.e., not on a bus), the <db:code role="parameter">service</db:code> parameter is optional.</db:para>
<db:para>The <db:link xlink:href="qdbusinterface.xml">QDBusInterface</db:link> class provides a simpler abstraction to synchronous method calling.</db:para>
<db:para>This function returns a <db:link xlink:href="qdbusmessage.xml">QDBusMessage</db:link> object that can be sent with <db:link xlink:href="qdbusconnection.xml#call">QDBusConnection::call</db:link>().</db:para>
</db:section>
<db:section xml:id="createReply">
<db:title>QDBusMessage QDBusMessage::createReply(const QList&lt;QVariant&gt; &amp;<db:emphasis>arguments</db:emphasis> = QList&lt;QVariant&gt;()) const</db:title>
<db:para>Constructs a new DBus message representing a reply, with the given <db:code role="parameter">arguments</db:code>.</db:para>
</db:section>
<db:section xml:id="createReply-1">
<db:title>QDBusMessage QDBusMessage::createReply(const QVariant &amp;<db:emphasis>argument</db:emphasis>) const</db:title>
<db:para>Constructs a new DBus message representing a reply, with the given <db:code role="parameter">argument</db:code>.</db:para>
</db:section>
<db:section xml:id="createSignal">
<db:title>[static] QDBusMessage QDBusMessage::createSignal(const QString &amp;<db:emphasis>path</db:emphasis>, const QString &amp;<db:emphasis>interface</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Constructs a new DBus message with the given <db:code role="parameter">path</db:code>, <db:code role="parameter">interface</db:code> and <db:code role="parameter">name</db:code>, representing a signal emission.</db:para>
<db:para>A DBus signal is emitted from one application and is received by all applications that are listening for that signal from that interface.</db:para>
<db:para>The <db:link xlink:href="qdbusmessage.xml">QDBusMessage</db:link> object that is returned can be sent using the <db:link xlink:href="qdbusconnection.xml#send">QDBusConnection::send</db:link>() function.</db:para>
</db:section>
<db:section xml:id="createTargetedSignal">
<db:title>[static, since 5.6] QDBusMessage QDBusMessage::createTargetedSignal(const QString &amp;<db:emphasis>service</db:emphasis>, const QString &amp;<db:emphasis>path</db:emphasis>, const QString &amp;<db:emphasis>interface</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Constructs a new DBus message with the given <db:code role="parameter">path</db:code>, <db:code role="parameter">interface</db:code> and <db:code role="parameter">name</db:code>, representing a signal emission to a specific destination.</db:para>
<db:para>A DBus signal is emitted from one application and is received only by the application owning the destination <db:code role="parameter">service</db:code> name.</db:para>
<db:para>The <db:link xlink:href="qdbusmessage.xml">QDBusMessage</db:link> object that is returned can be sent using the <db:link xlink:href="qdbusconnection.xml#send">QDBusConnection::send</db:link>() function.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="errorMessage">
<db:title>[since 4.3] QString QDBusMessage::errorMessage() const</db:title>
<db:para>Returns the human-readable message associated with the error that was received.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="errorName">
<db:title>QString QDBusMessage::errorName() const</db:title>
<db:para>Returns the name of the error that was received.</db:para>
</db:section>
<db:section xml:id="interface">
<db:title>QString QDBusMessage::interface() const</db:title>
<db:para>Returns the interface of the method being called (in the case of a method call) or of the signal being received from.</db:para>
</db:section>
<db:section xml:id="isDelayedReply">
<db:title>bool QDBusMessage::isDelayedReply() const</db:title>
<db:para>Returns the delayed reply flag, as set by <db:link xlink:href="qdbusmessage.xml#setDelayedReply">setDelayedReply</db:link>(). By default, this flag is false, which means Qt D-Bus will generate automatic replies when necessary.</db:para>
</db:section>
<db:section xml:id="isReplyRequired">
<db:title>bool QDBusMessage::isReplyRequired() const</db:title>
<db:para>Returns the flag that indicates if this message should see a reply or not. This is only meaningful for <db:link xlink:href="qdbusmessage.xml#MessageType-enum">method call messages</db:link>: any other kind of message cannot have replies and this function will always return false for them.</db:para>
</db:section>
<db:section xml:id="member">
<db:title>QString QDBusMessage::member() const</db:title>
<db:para>Returns the name of the signal that was emitted or the name of the method that was called.</db:para>
</db:section>
<db:section xml:id="path">
<db:title>QString QDBusMessage::path() const</db:title>
<db:para>Returns the path of the object that this message is being sent to (in the case of a method call) or being received from (for a signal).</db:para>
</db:section>
<db:section xml:id="service">
<db:title>QString QDBusMessage::service() const</db:title>
<db:para>Returns the name of the service or the bus address of the remote method call.</db:para>
</db:section>
<db:section xml:id="setArguments">
<db:title>void QDBusMessage::setArguments(const QList&lt;QVariant&gt; &amp;<db:emphasis>arguments</db:emphasis>)</db:title>
<db:para>Sets the arguments that are going to be sent over D-Bus to <db:code role="parameter">arguments</db:code>. Those will be the arguments to a method call or the parameters in the signal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusmessage.xml#arguments">arguments</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAutoStartService">
<db:title>[since 4.7] void QDBusMessage::setAutoStartService(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:para>Sets the auto start flag to <db:code role="parameter">enable</db:code>. This flag only makes sense for method call messages, where it tells the D-Bus server to either auto start the service responsible for the service name, or not to auto start it.</db:para>
<db:para>By default this flag is true, i.e. a service is autostarted. This means:</db:para>
<db:para>When the service that this method call is sent to is already running, the method call is sent to it. If the service is not running yet, the D-Bus daemon is requested to autostart the service that is assigned to this service name. This is handled by .service files that are placed in a directory known to the D-Bus server. These files then each contain a service name and the path to a program that should be executed when this service name is requested.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusmessage.xml#autoStartService">autoStartService</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDelayedReply">
<db:title>void QDBusMessage::setDelayedReply(bool <db:emphasis>enable</db:emphasis>) const</db:title>
<db:para>Sets whether the message will be replied later (if <db:code role="parameter">enable</db:code> is true) or if an automatic reply should be generated by Qt D-Bus (if <db:code role="parameter">enable</db:code> is false).</db:para>
<db:para>In D-Bus, all method calls must generate a reply to the caller, unless the caller explicitly indicates otherwise (see <db:link xlink:href="qdbusmessage.xml#isReplyRequired">isReplyRequired</db:link>()). <db:link xlink:href="qtdbus-module.xml">QtDBus</db:link> automatically generates such replies for any slots being called, but it also allows slots to indicate whether they will take responsibility of sending the reply at a later time, after the function has finished processing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusmessage.xml#isDelayedReply">isDelayedReply</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusdeclaringslots.xml#delayed-replies">Delayed Replies</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="signature">
<db:title>QString QDBusMessage::signature() const</db:title>
<db:para>Returns the signature of the signal that was received or for the output arguments of a method call.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>QDBusMessage::MessageType QDBusMessage::type() const</db:title>
<db:para>Returns the message type.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QDBusMessage &amp;QDBusMessage::operator&lt;&lt;(const QVariant &amp;<db:emphasis>arg</db:emphasis>)</db:title>
<db:para>Appends the argument <db:code role="parameter">arg</db:code> to the list of arguments to be sent over D-Bus in a method call or signal emission.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QDBusMessage &amp;QDBusMessage::operator=(const QDBusMessage &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copies the contents of the object given by <db:code role="parameter">other</db:code>.</db:para>
<db:para>Note: <db:link xlink:href="qdbusmessage.xml">QDBusMessage</db:link> objects are shared. Modifications made to the copy will affect the original one as well. See <db:link xlink:href="qdbusmessage.xml#setDelayedReply">setDelayedReply</db:link>() for more information.</db:para>
</db:section>
</db:section>
</db:article>
