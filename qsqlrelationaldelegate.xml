<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSqlRelationalDelegate Class</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsqlrelationaldelegate.xml">QSqlRelationalDelegate</db:link> class provides a delegate that is used to display and edit data from a <db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSqlRelationalDelegate</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Sql)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Sql)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += sql</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Unlike the default delegate, <db:link xlink:href="qsqlrelationaldelegate.xml">QSqlRelationalDelegate</db:link> provides a combobox for fields that are foreign keys into other tables. To use the class, simply call QAbstractItemView::setItemDelegate() on the view with an instance of <db:link xlink:href="qsqlrelationaldelegate.xml">QSqlRelationalDelegate</db:link>:</db:para>
<db:programlisting language="cpp">    std::unique_ptr&lt;QTableView&gt; view{new QTableView};
    view-&gt;setModel(model);
    view-&gt;setItemDelegate(new QSqlRelationalDelegate(view.get()));
</db:programlisting>
<db:para>The <db:link xlink:href="qtsql-relationaltablemodel-example.xml">Relational Table Model</db:link> example (shown below) illustrates how to use <db:link xlink:href="qsqlrelationaldelegate.xml">QSqlRelationalDelegate</db:link> in conjunction with <db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link> to provide tables with foreign key support.</db:para>
<db:mediaobject>
<db:alt>{The user is able to edit a foreign key in a relational table}</db:alt>
<db:imageobject>
<db:imagedata fileref="images/relationaltable.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link></db:member>
<db:member><db:link xlink:href="">Model/View Programming</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSqlRelationalDelegate">
<db:title>[explicit] QSqlRelationalDelegate::QSqlRelationalDelegate(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a <db:link xlink:href="qsqlrelationaldelegate.xml">QSqlRelationalDelegate</db:link> object with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSqlRelationalDelegate">
<db:title>[virtual noexcept] QSqlRelationalDelegate::~QSqlRelationalDelegate()</db:title>
<db:para>Destroys the <db:link xlink:href="qsqlrelationaldelegate.xml">QSqlRelationalDelegate</db:link> object and frees any allocated resources.</db:para>
</db:section>
<db:section xml:id="createEditor">
<db:title>[override virtual] QWidget *QSqlRelationalDelegate::createEditor(QWidget *<db:emphasis>parent</db:emphasis>, const QStyleOptionViewItem &amp;<db:emphasis>option</db:emphasis>, const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
</db:section>
<db:section xml:id="setModelData">
<db:title>[override virtual] void QSqlRelationalDelegate::setModelData(QWidget *<db:emphasis>editor</db:emphasis>, QAbstractItemModel *<db:emphasis>model</db:emphasis>, const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
</db:section>
</db:section>
</db:article>
