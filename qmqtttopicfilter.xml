<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMqttTopicFilter Class</db:title>
<db:productname>QtMqtt</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt MQTT Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmqtttopicfilter.xml">QMqttTopicFilter</db:link> class represents a MQTT topic filter.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMqttTopicFilter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += mqtt</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMqttTopicFilter is part of <db:simplelist><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmqtttopicfilter.xml">QMqttTopicFilter</db:link> is a thin wrapper around a <db:link xlink:href="qstring.xml">QString</db:link> providing an expressive data type for MQTT topic filters. Beside the benefits of having a strong type preventing unintended misuse, <db:link xlink:href="qmqtttopicfilter.xml">QMqttTopicFilter</db:link> provides convenient functions related to topic filters like <db:link xlink:href="qmqtttopicfilter.xml#isValid">isValid</db:link>() or <db:link xlink:href="qmqtttopicfilter.xml#match">match</db:link>().</db:para>
<db:para>For example, the following code would fail to compile and prevent a possible unintended and meaningless matching of two filters, especially if the variable names were less expressive:</db:para>
<db:programlisting language="cpp">QMqttTopicFilter globalFilter{&quot;foo/#&quot;};
QMqttTopicFilter specificFilter{&quot;foo/bar&quot;};
if (globalFilter.match(specificFilter)) {
    //...
}
</db:programlisting>
<db:para>The usability, however, is not affected since the following snippet compiles and runs as expected:</db:para>
<db:programlisting language="cpp">QMqttTopicFilter globalFilter{&quot;foo/#&quot;};
if (globalFilter.match(&quot;foo/bar&quot;)) {
    //...
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>QMqttTopicName</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="MatchOption-enum">
<db:title>enum QMqttTopicFilter::MatchOption</db:title>
<db:bridgehead renderas="sect2">flags QMqttTopicFilter::MatchOptions</db:bridgehead>
<db:enumsynopsis>
<db:enumname>MatchOption</db:enumname>
<db:enumitem>
<db:enumidentifier>NoMatchOption</db:enumidentifier>
<db:enumvalue>0x0000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WildcardsDontMatchDollarTopicMatchOption</db:enumidentifier>
<db:enumvalue>0x0001</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QMqttTopicFilter::MatchOptions</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum value holds the matching options for the topic filter.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqtttopicfilter.xml">QMqttTopicFilter</db:link></db:emphasis>::NoMatchOption</db:code></db:para>
</db:td>
<db:td><db:code>0x0000</db:code></db:td>
<db:td>
<db:para>No match options are set.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqtttopicfilter.xml">QMqttTopicFilter</db:link></db:emphasis>::WildcardsDontMatchDollarTopicMatchOption</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>A wildcard at the filter's beginning does not match a topic name that starts with the dollar sign ($).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>MatchOptions</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;MatchOption&gt;. </db:code>It stores an OR combination of <db:code>MatchOption</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMqttTopicFilter">
<db:title>QMqttTopicFilter::QMqttTopicFilter(const QString &amp;<db:emphasis>filter</db:emphasis> = QString())</db:title>
<db:constructorsynopsis>
<db:methodname>QMqttTopicFilter</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filter</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMqttTopicFilter(const QString &amp;filter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new MQTT topic filter with the specified <db:code role="parameter">filter</db:code>.</db:para>
</db:section>
<db:section xml:id="QMqttTopicFilter-1">
<db:title>QMqttTopicFilter::QMqttTopicFilter(const QLatin1String &amp;<db:emphasis>filter</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMqttTopicFilter</db:methodname>
<db:methodparam>
<db:type>const QLatin1String &amp;</db:type>
<db:parameter>filter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMqttTopicFilter(const QLatin1String &amp;filter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new MQTT topic filter with the specified <db:code role="parameter">filter</db:code>.</db:para>
</db:section>
<db:section xml:id="QMqttTopicFilter-2">
<db:title>QMqttTopicFilter::QMqttTopicFilter(const QMqttTopicFilter &amp;<db:emphasis>filter</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMqttTopicFilter</db:methodname>
<db:methodparam>
<db:type>const QMqttTopicFilter &amp;</db:type>
<db:parameter>filter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QMqttTopicFilter(const QMqttTopicFilter &amp;filter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new MQTT topic filter as a copy of <db:code role="parameter">filter</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QMqttTopicFilter">
<db:title>QMqttTopicFilter::~QMqttTopicFilter()</db:title>
<db:destructorsynopsis>
<db:methodname>~QMqttTopicFilter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QMqttTopicFilter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qmqtttopicfilter.xml">QMqttTopicFilter</db:link> object.</db:para>
</db:section>
<db:section xml:id="filter">
<db:title>QString QMqttTopicFilter::filter() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>filter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString filter() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the topic filter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqtttopicfilter.xml#setFilter">setFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QMqttTopicFilter::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the topic filter is valid according to the MQTT standard section 4.7, or <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="match">
<db:title>bool QMqttTopicFilter::match(const QMqttTopicName &amp;<db:emphasis>name</db:emphasis>, QMqttTopicFilter::MatchOptions <db:emphasis>matchOptions</db:emphasis> = NoMatchOption) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>match</db:methodname>
<db:methodparam>
<db:type>const QMqttTopicName &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QMqttTopicFilter::MatchOptions</db:type>
<db:parameter>matchOptions</db:parameter>
<db:initializer>NoMatchOption</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool match(const QMqttTopicName &amp;name, QMqttTopicFilter::MatchOptions matchOptions) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the topic filter matches the topic name <db:code role="parameter">name</db:code> honoring the given <db:code role="parameter">matchOptions</db:code>, or <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="setFilter">
<db:title>void QMqttTopicFilter::setFilter(const QString &amp;<db:emphasis>filter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFilter</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFilter(const QString &amp;filter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the topic filter to <db:code role="parameter">filter</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqtttopicfilter.xml#filter">filter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sharedSubscriptionName">
<db:title>[since 5.12] QString QMqttTopicFilter::sharedSubscriptionName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>sharedSubscriptionName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString sharedSubscriptionName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of a share if the topic filter has been specified as a shared subscription. The format of shared subscriptions is defined as <db:code>$share/sharename/topicfilter</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>void QMqttTopicFilter::swap(QMqttTopicFilter &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QMqttTopicFilter &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QMqttTopicFilter &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps the MQTT topic filter <db:code role="parameter">other</db:code> with this MQTT topic filter. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QMqttTopicFilter &amp;QMqttTopicFilter::operator=(const QMqttTopicFilter &amp;<db:emphasis>filter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMqttTopicFilter &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QMqttTopicFilter &amp;</db:type>
<db:parameter>filter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QMqttTopicFilter &amp; operator=(const QMqttTopicFilter &amp;filter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the MQTT topic filter <db:code role="parameter">filter</db:code> to this object, and returns a reference to the copy.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, const QMqttTopicFilter &amp;<db:emphasis>filter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>out</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMqttTopicFilter &amp;</db:type>
<db:parameter>filter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QMqttTopicFilter &amp;filter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the topic filter <db:code role="parameter">filter</db:code> to the stream <db:code role="parameter">out</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Format of the QDataStream operators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QMqttTopicFilter &amp;<db:emphasis>filter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>in</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QMqttTopicFilter &amp;</db:type>
<db:parameter>filter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QMqttTopicFilter &amp;filter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a topic filter into <db:code role="parameter">filter</db:code> from the stream <db:code role="parameter">in</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Format of the QDataStream operators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
