<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScxmlCppDataModel Class</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SCXML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscxmlcppdatamodel.xml">QScxmlCppDataModel</db:link> class is a C++ data model for a Qt SCXML state machine.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScxmlCppDataModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Scxml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Scxml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += scxml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qscxmldatamodel.xml" xlink:role="class">QScxmlDataModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The C++ data model for SCXML lets you write C++ code for <db:emphasis>expr</db:emphasis> attributes and <db:code>&lt;script&gt;</db:code> elements. The <db:emphasis>data part</db:emphasis> of the data model is backed by a subclass of <db:link xlink:href="qscxmlcppdatamodel.xml">QScxmlCppDataModel</db:link>, for which the Qt SCXML compiler (<db:code>qscxmlc</db:code>) will generate the dispatch methods. It cannot be used when loading an SCXML file at runtime.</db:para>
<db:para>Usage is through the <db:emphasis>datamodel</db:emphasis> attribute of the <db:code>&lt;scxml&gt;</db:code> element:</db:para>
<db:programlisting language="cpp">&amp;lt;scxml datamodel=&quot;cplusplus:TheDataModel:thedatamodel.h&quot;  ....&amp;gt;
</db:programlisting>
<db:para>The format of the <db:emphasis>datamodel</db:emphasis> attribute is: <db:code>cplusplus:&lt;class-name&gt;:&lt;classdef-header&gt;</db:code>. So, for the example above, there should be a file <db:emphasis>thedatamodel.h</db:emphasis> containing a subclass of <db:link xlink:href="qscxmlcppdatamodel.xml">QScxmlCppDataModel</db:link>, containing at least the following:</db:para>
<db:programlisting language="cpp" role="bad">#include &quot;qscxmlcppdatamodel.h&quot;

class TheDataModel: public QScxmlCppDataModel
{
    \Q_OBJECT
    Q_SCXML_DATAMODEL
};
   </db:programlisting>
<db:para>The Q_SCXML_DATAMODEL has to appear in the private section of the class definition, for example right after the opening bracket, or after a <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro. This macro expands to the declaration of some virtual methods whose implementation is generated by the Qt SCXML compiler.</db:para>
<db:para>The Qt SCXML compiler will generate the various <db:code>evaluateTo</db:code> methods, and convert expressions and scripts into lambdas inside those methods. For example:</db:para>
<db:programlisting language="cpp">&amp;lt;scxml datamodel=&quot;cplusplus:TheDataModel:thedatamodel.h&quot; xmlns=&quot;http://www.w3.org/2005/07/scxml&quot; version=&quot;1.0&quot; name=&quot;MediaPlayerStateMachine&quot;&amp;gt;
    &amp;lt;state id=&quot;stopped&quot;&amp;gt;
        &amp;lt;transition event=&quot;tap&quot; cond=&quot;isValidMedia()&quot; target=&quot;playing&quot;/&amp;gt;
    &amp;lt;/state&amp;gt;

    &amp;lt;state id=&quot;playing&quot;&amp;gt;
        &amp;lt;onentry&amp;gt;
            &amp;lt;script&amp;gt;
                media = eventData().value(QStringLiteral(&amp;amp;quot;media&amp;amp;quot;)).toString();
            &amp;lt;/script&amp;gt;
            &amp;lt;send event=&quot;playbackStarted&quot;&amp;gt;
                &amp;lt;param name=&quot;media&quot; expr=&quot;media&quot;/&amp;gt;
            &amp;lt;/send&amp;gt;
        &amp;lt;/onentry&amp;gt;
    &amp;lt;/state&amp;gt;
&amp;lt;/scxml&amp;gt;
   </db:programlisting>
<db:para>This will result in:</db:para>
<db:programlisting language="cpp">bool TheDataModel::evaluateToBool(QScxmlExecutableContent::EvaluatorId id, bool *ok) {
    // ....
        return [this]()-&amp;gt;bool{ return isValidMedia(); }();
    // ....
}

QVariant TheDataModel::evaluateToVariant(QScxmlExecutableContent::EvaluatorId id, bool *ok) {
    // ....
        return [this]()-&amp;gt;QVariant{ return media; }();
    // ....
}

void TheDataModel::evaluateToVoid(QScxmlExecutableContent::EvaluatorId id, bool *ok) {
    // ....
        [this]()-&amp;gt;void{ media = eventData().value(QStringLiteral(&quot;media&quot;)).toString(); }();
    // ....
}
   </db:programlisting>
<db:para>So, you are not limited to call functions. In a <db:code>&lt;script&gt;</db:code> element you can put zero or more C++ statements, and in <db:emphasis>cond</db:emphasis> or <db:emphasis>expr</db:emphasis> attributes you can use any C++ expression that can be converted to the respective bool or <db:link xlink:href="qvariant.xml">QVariant</db:link>. And, as the <db:code>this</db:code> pointer is also captured, you can call or access the data model (the <db:emphasis>media</db:emphasis> attribute in the example above). For the full example, see <db:link xlink:href="qtscxml-mediaplayer-example.xml">SCXML Media Player</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlstatemachine.xml">QScxmlStateMachine</db:link></db:member>
<db:member><db:link xlink:href="qscxmldatamodel.xml">QScxmlDataModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QScxmlCppDataModel">
<db:title>[explicit] QScxmlCppDataModel::QScxmlCppDataModel(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QScxmlCppDataModel</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QScxmlCppDataModel(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new C++ data model with the parent object <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="evaluateAssignment">
<db:title>[override virtual] void QScxmlCppDataModel::evaluateAssignment(QScxmlExecutableContent::EvaluatorId <db:emphasis>id</db:emphasis>, bool *<db:emphasis>ok</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>evaluateAssignment</db:methodname>
<db:methodparam>
<db:type>QScxmlExecutableContent::EvaluatorId</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void evaluateAssignment(QScxmlExecutableContent::EvaluatorId id, bool *ok) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qscxmldatamodel.xml#evaluateAssignment" role="function">QScxmlDataModel::evaluateAssignment(QScxmlExecutableContent::EvaluatorId id, bool *ok)</db:link>.</db:para>
<db:para>This method does not perform any action, ignores <db:code role="parameter">id</db:code>, and sets <db:code role="parameter">ok</db:code> to <db:code>false</db:code>. Override it in your specific data model in order to implement <db:code>&lt;assign&gt;</db:code>.</db:para>
</db:section>
<db:section xml:id="evaluateForeach">
<db:title>[override virtual] void QScxmlCppDataModel::evaluateForeach(QScxmlExecutableContent::EvaluatorId <db:emphasis>id</db:emphasis>, bool *<db:emphasis>ok</db:emphasis>, QScxmlDataModel::ForeachLoopBody *<db:emphasis>body</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>evaluateForeach</db:methodname>
<db:methodparam>
<db:type>QScxmlExecutableContent::EvaluatorId</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QScxmlDataModel::ForeachLoopBody *</db:type>
<db:parameter>body</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void evaluateForeach(QScxmlExecutableContent::EvaluatorId id, bool *ok, QScxmlDataModel::ForeachLoopBody *body) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qscxmldatamodel.xml#evaluateForeach" role="function">QScxmlDataModel::evaluateForeach(QScxmlExecutableContent::EvaluatorId id, bool *ok, QScxmlDataModel::ForeachLoopBody *body)</db:link>.</db:para>
<db:para>This method does not perform any action, ignores <db:code role="parameter">id</db:code> and <db:code role="parameter">body</db:code>, and sets <db:code role="parameter">ok</db:code> to <db:code>false</db:code>. Override it in your specific data model in order to implement <db:code>&lt;foreach&gt;</db:code>.</db:para>
</db:section>
<db:section xml:id="evaluateInitialization">
<db:title>[override virtual] void QScxmlCppDataModel::evaluateInitialization(QScxmlExecutableContent::EvaluatorId <db:emphasis>id</db:emphasis>, bool *<db:emphasis>ok</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>evaluateInitialization</db:methodname>
<db:methodparam>
<db:type>QScxmlExecutableContent::EvaluatorId</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void evaluateInitialization(QScxmlExecutableContent::EvaluatorId id, bool *ok) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qscxmldatamodel.xml#evaluateInitialization" role="function">QScxmlDataModel::evaluateInitialization(QScxmlExecutableContent::EvaluatorId id, bool *ok)</db:link>.</db:para>
<db:para>This method does not perform any action, ignores <db:code role="parameter">id</db:code>, and sets <db:code role="parameter">ok</db:code> to <db:code>false</db:code>. Override it in your specific data model in order to implement <db:code>&lt;data&gt;</db:code>.</db:para>
</db:section>
<db:section xml:id="hasScxmlProperty">
<db:title>[override virtual] bool QScxmlCppDataModel::hasScxmlProperty(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasScxmlProperty</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasScxmlProperty(const QString &amp;name) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qscxmldatamodel.xml#hasScxmlProperty" role="function">QScxmlDataModel::hasScxmlProperty(const QString &amp;name) const</db:link>.</db:para>
<db:para>This method always returns <db:code>false</db:code> and ignores <db:code role="parameter">name</db:code>. Override it to implement the lookup of data model properties via the <db:code>location</db:code> attribute of various elements.</db:para>
</db:section>
<db:section xml:id="inState">
<db:title>bool QScxmlCppDataModel::inState(const QString &amp;<db:emphasis>stateName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>inState</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>stateName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool inState(const QString &amp;stateName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the state machine is in the state specified by <db:code role="parameter">stateName</db:code>, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="scxmlEvent">
<db:title>const QScxmlEvent &amp;QScxmlCppDataModel::scxmlEvent() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QScxmlEvent &amp;</db:type>
<db:methodname>scxmlEvent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QScxmlEvent &amp; scxmlEvent() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Holds the current event that is being processed by the state machine.</db:para>
<db:para>See also <db:link xlink:href="https://www.w3.org/TR/scxml/#SystemVariables">SCXML Specification - 5.10 System Variables</db:link> for the description of the <db:code>_event</db:code> variable.</db:para>
<db:para>Returns the event currently being processed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlcppdatamodel.xml#setScxmlEvent">setScxmlEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scxmlProperty">
<db:title>[override virtual] QVariant QScxmlCppDataModel::scxmlProperty(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>scxmlProperty</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant scxmlProperty(const QString &amp;name) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qscxmldatamodel.xml#scxmlProperty" role="function">QScxmlDataModel::scxmlProperty(const QString &amp;name) const</db:link>.</db:para>
<db:para>This method always returns an empty <db:link xlink:href="qvariant.xml">QVariant</db:link> and ignores <db:code role="parameter">name</db:code>. Override it to implement the lookup of data model properties via the <db:code>location</db:code> attribute of various elements.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlcppdatamodel.xml#setScxmlProperty">setScxmlProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setScxmlEvent">
<db:title>[override virtual] void QScxmlCppDataModel::setScxmlEvent(const QScxmlEvent &amp;<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setScxmlEvent</db:methodname>
<db:methodparam>
<db:type>const QScxmlEvent &amp;</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setScxmlEvent(const QScxmlEvent &amp;event) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qscxmldatamodel.xml#setScxmlEvent" role="function">QScxmlDataModel::setScxmlEvent(const QScxmlEvent &amp;event)</db:link>.</db:para>
<db:para>Sets the <db:code role="parameter">event</db:code> that will be processed next.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlcppdatamodel.xml#scxmlEvent">QScxmlCppDataModel::scxmlEvent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setScxmlProperty">
<db:title>[override virtual] bool QScxmlCppDataModel::setScxmlProperty(const QString &amp;<db:emphasis>name</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, const QString &amp;<db:emphasis>context</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setScxmlProperty</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>context</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setScxmlProperty(const QString &amp;name, const QVariant &amp;value, const QString &amp;context) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qscxmldatamodel.xml#setScxmlProperty" role="function">QScxmlDataModel::setScxmlProperty(const QString &amp;name, const QVariant &amp;value, const QString &amp;context)</db:link>.</db:para>
<db:para>This method always returns <db:code>false</db:code> and ignores <db:code role="parameter">name</db:code>, <db:code role="parameter">value</db:code>, and <db:code role="parameter">context</db:code>. Override it to implement the lookup of data model properties via the <db:code>location</db:code> attribute of various elements.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlcppdatamodel.xml#scxmlProperty">scxmlProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setup">
<db:title>[override virtual] bool QScxmlCppDataModel::setup(const QVariantMap &amp;<db:emphasis>initialDataValues</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setup</db:methodname>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>initialDataValues</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setup(const QVariantMap &amp;initialDataValues) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qscxmldatamodel.xml#setup" role="function">QScxmlDataModel::setup(const QVariantMap &amp;initialDataValues)</db:link>.</db:para>
<db:para>Called during state machine initialization to set up a state machine using the initial values for data model variables specified by their keys, <db:code role="parameter">initialDataValues</db:code>. These are the values specified by <db:code>&lt;param&gt;</db:code> tags in an <db:code>&lt;invoke&gt;</db:code> element.</db:para>
<db:para>Returns <db:code>true</db:code> on success.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlstatemachine.xml#init">QScxmlStateMachine::init</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
