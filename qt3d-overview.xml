<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D Overview</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt 3D provides C++ and QML APIs to incorporate 3D content into Qt applications.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt 3D provides a fully configurable renderer that enables developers to quickly implement any rendering pipeline that they need. Further, Qt 3D provides a generic framework for near-realtime simulations beyond rendering.</db:para>
<db:para>Qt 3D is cleanly separated into a core and any number of <db:emphasis>aspects</db:emphasis> that can implement any functionality they wish. The aspects interact with <db:emphasis>components</db:emphasis> and <db:emphasis>entities</db:emphasis> to provide some slice of functionality. Examples of aspects include physics, audio, collision, artificial intelligence (AI), and path finding.</db:para>
<db:section xml:id="basic-3d-features">
<db:title>Basic 3D Features</db:title>
<db:para>Qt 3D is a 3D framework that enables the drawing of 3D shapes and moving them around, as well as moving the camera. It supports the following basic features:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>2D and 3D <db:link xlink:href="qt3drender-module.xml">rendering</db:link> for C++ and Qt Quick applications</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-qmesh.xml">Meshes</db:link> and <db:link xlink:href="qt3drender-geometry.xml">Geometry</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3dextras-module.xml#materials">Materials</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3d-overview.xml#shaders">Shaders</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3d-overview.xml#shadow-mapping">Shadow mapping</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3dextras-qmetalroughmaterial.xml#ambientOcclusion-prop">Ambient occlusion</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>High dynamic range</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-framegraph.xml#deferred-renderer">Deferred rendering</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>Multitexturing</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3d-overview.xml#instanced-rendering">Instanced rendering</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3d-overview.xml#uniform-buffer-objects">Uniform Buffer Objects</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-porting-to-rhi.xml">Porting to RHI</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-protips.xml">Pro Tips</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="materials">
<db:title>Materials</db:title>
<db:para>Qt 3D has a robust and very flexible material system that allows multiple levels of customization. It caters for different rendering approaches on different platforms or OpenGL versions, enables multiple rendering passes with different state sets, provides mechanisms for overriding of parameters at different levels, and allows easy switching of shaders. All this from C++ or using QML property bindings.</db:para>
<db:para>The properties of a <db:link xlink:href="qml-qt3d-render-material.xml">Material</db:link> type can easily be mapped through to uniform variables in a GLSL shader program that is itself specified in the referenced effect property.</db:para>
<db:para>For examples of using materials, see the following examples:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt3d-simplecustommaterial-example.xml">Qt 3D: Simple Custom Material QML Example</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3d-pbr-materials-example.xml">Qt 3D: PBR Materials QML Example</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="shaders">
<db:title>Shaders</db:title>
<db:para>Qt 3D supports all of the OpenGL programmable rendering pipeline stages: vertex, tessellation control, tessellation evaluation, geometry, and fragment shaders. Compute shaders are planned for a future release.</db:para>
<db:para>For examples of using shaders, see the <db:link xlink:href="qt3d-wireframe-example.xml">Qt 3D: Wireframe QML Example</db:link>.</db:para>
</db:section>
<db:section xml:id="shadow-mapping">
<db:title>Shadow Mapping</db:title>
<db:para>Shadows are not directly supported by OpenGL, but there are countless techniques that can be employed to generate them. Shadow mapping is simple to use for generating good-looking shadows, while having a very small performance cost.</db:para>
<db:para>Shadow mapping is typically implemented using a two pass rendering. In the first pass, the shadow information is generated. In the second pass, the scene is generated using a particular rendering technique, while at the same time using the information gathered in the first pass to draw the shadows.</db:para>
<db:para>The idea behind shadow mapping is that only the closest fragments to the light are lit. Fragments <db:emphasis>behind</db:emphasis> other fragments are occluded, and therefore in shadow.</db:para>
<db:para>Therefore, in the first pass, the scene is drawn from the point of view of the light. The information that is stored is simply the distance of the closest fragment in this <db:emphasis>light space</db:emphasis>. In OpenGL terms, this corresponds to having a Framebuffer Object, or FBO, with a depth texture attached to it. In fact, the <db:emphasis>distance from the eye</db:emphasis> is the definition of the depth, and the default depth testing done by OpenGL will actually store only the depth for the closest fragment.</db:para>
<db:para>A color texture attachment is not even needed, because there is no need to shade fragments, only to calculate their depth.</db:para>
<db:para>The following image displays a scene with a self-shadowed plane and trefoil knot:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/shadowmapping-qt3d.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The following image shows an exaggerated shadow map texture of the scene:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/shadowmapping-depth.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The image indicates the depth stored when rendering the scene from the light point of view. Darker colors represent a shallow depth (that is, closer to the camera). In this scene, the light is placed somewhere above the objects in the scene, on the right side with respect to the main camera (compare this with the first screenshot). This matches with the fact that the toy plane is closer to the camera than the other objects.</db:para>
<db:para>Once the shadow map has been generated, the second rendering pass is done. In this second pass, rendering is done using the normal scene's camera. Any effect can be used here, such as Phong shading. It is important that the shadow map algorithm is applied in the fragment shader. That is, the fragment that is closest to the light is drawn lit, whereas the other fragments are drawn in shadow.</db:para>
<db:para>The shadow map generated in the first pass provides the necessary information about the distance of fragments to light. It then suffices to remap the fragment in light space, thereby calculating its depth from the light point of view, as well as where its coordinates are on the shadow map texture. The shadow map texture can then be sampled at the given coordinates and the fragment's depth can be compared with the result of the sampling. If the fragment is further away, then it is in shadow; otherwise it is lit.</db:para>
</db:section>
<db:section xml:id="instanced-rendering">
<db:title>Instanced Rendering</db:title>
<db:para><db:emphasis>Instancing</db:emphasis> is a way of getting the GPU to draw many copies (instances) of a base object that varies in some way for each copy. Often, in position, orientation, color, material properties, scale, and so on. Qt 3D provides an API similar to the Qt Quick <db:link xlink:href="qml-qtquick-repeater.xml">Repeater</db:link> element. In this case, the delegate is the base object and the model provides the per-instance data. So whereas an entity with a <db:link xlink:href="qml-qt3d-render-mesh.xml">Mesh</db:link> component attached eventually gets transformed into a call to glDrawElements, an entity with a instanced component will be translated into a call to glDrawElementsInstanced.</db:para>
<db:para>Instanced rendering is planned for a future release.</db:para>
</db:section>
<db:section xml:id="uniform-buffer-objects">
<db:title>Uniform Buffer Objects</db:title>
<db:para>A Uniform Buffer Object (UBO) can be bound to OpenGL shader programs to make large amounts of data readily available. Typical use cases for UBOs are for sets of material or lighting parameters.</db:para>
</db:section>
<db:section xml:id="useful-tips">
<db:title>Useful Tips</db:title>
<db:para>Some very useful programming tips for 3D rendering can be found on this page: <db:link xlink:href="qt3drender-protips.xml">Qt 3D Render Pro Tips</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="configurable-renderer">
<db:title>Configurable Renderer</db:title>
<db:para>To combine support for both C++ and QML APIs with having a fully configurable renderer, the concept of a <db:emphasis>framegraph</db:emphasis> was introduced. While a <db:emphasis>scenegraph</db:emphasis> is a data-driven description of <db:emphasis>what</db:emphasis> to render, a <db:link xlink:href="qt3drender-framegraph.xml">framegraph</db:link> is a data-driven description of <db:emphasis>how</db:emphasis> to render it.</db:para>
<db:para>A framegraph enables developers to choose between a simple forward renderer, including a z-fill pass, or using a deferred renderer for example. It also gives them control over when to render any transparent objects, and so on. Since this is all configured purely from data, it is very easy to modify even dynamically at runtime without touching any C++ code. It is possible to extend Qt 3D by creating your own framegraphs that implement custom rendering algorithms.</db:para>
</db:section>
<db:section xml:id="A3d-extensions">
<db:title>3D Extensions</db:title>
<db:para>Beyond the essentials of displaying 3D content on the screen, Qt 3D is extensible and flexible enough to act as a host for the following types of extensions related to the 3D objects:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Physics simulation</db:para>
</db:listitem>
<db:listitem>
<db:para>Collision detection</db:para>
</db:listitem>
<db:listitem>
<db:para>3D positional audio</db:para>
</db:listitem>
<db:listitem>
<db:para>Rigid body, skeletal, and morph target animation</db:para>
</db:listitem>
<db:listitem>
<db:para>Path finding and other AI</db:para>
</db:listitem>
<db:listitem>
<db:para>Picking</db:para>
</db:listitem>
<db:listitem>
<db:para>Particles</db:para>
</db:listitem>
<db:listitem>
<db:para>Object spawning</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="performance">
<db:title>Performance</db:title>
<db:para>Qt 3D is designed to perform well and scale up with the number of available CPU cores, because modern hardware improves performance by increasing the numbers of cores rather than base clock speed. Using multiple cores works well, because many tasks are independent of each other. For example, the operations performed by a path finding module do not overlap strongly with the tasks performed by a renderer, except maybe when rendering debug information or statistics.</db:para>
</db:section>
<db:section xml:id="qt-3d-architecture">
<db:title>Qt 3D Architecture</db:title>
<db:para>The main use cases of Qt 3D are simulating objects in near-realtime and rendering the state of those objects onto the screen. The Space Invaders example contains the following objects:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/Space-invaders.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:itemizedlist>
<db:listitem>
<db:para>The player's ground cannon</db:para>
</db:listitem>
<db:listitem>
<db:para>The ground</db:para>
</db:listitem>
<db:listitem>
<db:para>The defensive blocks</db:para>
</db:listitem>
<db:listitem>
<db:para>The enemy space invader ships</db:para>
</db:listitem>
<db:listitem>
<db:para>The enemy boss flying saucer</db:para>
</db:listitem>
<db:listitem>
<db:para>The bullets shot by the enemies and the player</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In a traditional C++ design, these types of object would typically be implemented as classes arranged in some kind of inheritance tree. Various branches in the inheritance tree might add additional functionality to the root class for features such as:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Accepts user input</db:para>
</db:listitem>
<db:listitem>
<db:para>Plays a sound</db:para>
</db:listitem>
<db:listitem>
<db:para>Is animated</db:para>
</db:listitem>
<db:listitem>
<db:para>Collides with other objects</db:para>
</db:listitem>
<db:listitem>
<db:para>Is drawn on screen</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The types in the Space Invaders example can be classified against these features. However, designing an elegant inheritance tree for even such a simple example is not easy.</db:para>
<db:para>This approach and other variations on inheritance present a number of problems:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Deep and wide inheritance hierarchies are difficult to understand, maintain and extend.</db:para>
</db:listitem>
<db:listitem>
<db:para>The inheritance taxonomy is set in stone at compile time.</db:para>
</db:listitem>
<db:listitem>
<db:para>Each level in the class inheritance tree can only classify upon a single criteria or axis.</db:para>
</db:listitem>
<db:listitem>
<db:para>Shared functionality tends to <db:emphasis>bubble up</db:emphasis> the class hierarchy over time.</db:para>
</db:listitem>
<db:listitem>
<db:para>It is impossible to predict what the developers will want to do.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Extending deep and wide inheritance trees usually requires understanding, and agreeing with, the taxonomy used by the original author. Therefore, Qt 3D places focus on aggregation instead of inheritance as the means of imparting functionality onto an instance of an object. Specifically, Qt 3D implements an Entity Component System (ECS).</db:para>
<db:section xml:id="using-an-ecs">
<db:title>Using an ECS</db:title>
<db:para>In an ECS, an entity represents a simulated object, but by itself it is devoid of any specific behavior or characteristics. Additional behavior can be grafted onto an entity by having the entity aggregate one or more components. Each component is a vertical slice of behavior of an object type.</db:para>
<db:para>In the Space Invaders example, the ground is an entity with an attached component that tells the system that the entity needs rendering and what kind of rendering it needs. An enemy space invader ship is another entity with attached components that cause the ship to be rendered, but also enable it to emit sounds, be collided with, be animated, and be controlled by a simple AI.</db:para>
<db:para>The player's ground cannon entity has mostly similar components to the enemy space invader ship, except that it does not have the AI component. In its place, the cannon has an input component to enable the player to move it around and to fire bullets.</db:para>
</db:section>
<db:section xml:id="ecs-backend">
<db:title>ECS Backend</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/ecs-2.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The backend of Qt 3D implements the <db:emphasis>system</db:emphasis> part of the ECS paradigm in the form of <db:emphasis>aspects</db:emphasis>. An aspect implements the particular vertical slice of the functionality provided to entities by a combination of one or more of their aggregated components.</db:para>
<db:para>For example, the renderer aspect looks for entities that have mesh, material, and optionally transformation components. If the renderer aspect finds such an entity, it knows how to take that data and draw something nice from it. If an entity does not have those components, the renderer aspect ignores it.</db:para>
<db:para>Qt 3D builds custom entities by aggregating components that provide additional capabilities. The Qt 3D engine uses aspects to process and update entities with specific components.</db:para>
<db:para>For example, a physics aspect looks for entities that have some kind of collision volume component and another component that specifies other properties needed by such simulations like mass, coefficient of friction, and so on. An entity that emits sound has a component that specifies it is a sound emitter, as well as specifying when and which sounds to play.</db:para>
<db:para>Because ECS uses aggregation rather than inheritance, it is possible to dynamically change how an object behaves at runtime simply by adding or removing components.</db:para>
<db:para>For example, to enable a player to suddenly run through walls after a power-up, that entity's collision volume component can be removed temporarily, until the power-up times out. There is no need to create a special one-off subclass for <db:code>PlayerWhoRunsThroughWalls</db:code>.</db:para>
</db:section>
<db:section xml:id="qt-3d-ecs-implementation">
<db:title>Qt 3D ECS Implementation</db:title>
<db:para>Qt 3D implements ECS as a simple class hierarchy. The Qt 3D base class is <db:link xlink:href="qt3dcore-qnode.xml">Qt3DCore::QNode</db:link>, which is a subclass of <db:link xlink:href="qobject.xml">QObject</db:link>. <db:link xlink:href="qt3dcore-qnode.xml">Qt3DCore::QNode</db:link> adds to <db:link xlink:href="qobject.xml">QObject</db:link> the ability to automatically communicate property changes to aspects and an ID that is unique throughout an application. The aspects exist in additional threads and <db:link xlink:href="qt3dcore-qnode.xml">Qt3DCore::QNode</db:link> simplifies the data transfer between the user-facing objects and the aspects.</db:para>
<db:para>Typically, subclasses of <db:link xlink:href="qt3dcore-qnode.xml">Qt3DCore::QNode</db:link> provide additional supporting data that is referenced by components. For example, the QShaderProgram class specifies the GLSL code to be used when rendering a set of entities.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/ecs-1.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Components in Qt 3D are implemented by subclassing <db:link xlink:href="qt3dcore-qcomponent.xml">Qt3DCore::QComponent</db:link> and adding the data necessary for the corresponding aspect to do its work. For example, the mesh component is used by the renderer aspect to retrieve the per-vertex data that should be sent down the OpenGL pipeline.</db:para>
<db:para>Finally, <db:link xlink:href="qt3dcore-qentity.xml">Qt3DCore::QEntity</db:link> is simply an object that can aggregate zero or more <db:link xlink:href="qt3dcore-qcomponent.xml">Qt3DCore::QComponent</db:link> instances.</db:para>
</db:section>
</db:section>
<db:section xml:id="extending-qt-3d">
<db:title>Extending Qt 3D</db:title>
<db:para>Adding functionality to Qt 3D, either as part of Qt or specific to your own applications to benefit from the multi-threaded back-end consists of the following tasks:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Identify and implement any necessary components and supporting data.</db:para>
</db:listitem>
<db:listitem>
<db:para>Register the components with the QML engine (only if you use the QML API).</db:para>
</db:listitem>
<db:listitem>
<db:para>Subclass QAbstractAspect and implement the subsystem functionality.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-3d-task-based-engine">
<db:title>Qt 3D Task-Based Engine</db:title>
<db:para>In Qt 3D, aspects are asked in each frame for a set of <db:emphasis>tasks</db:emphasis> to execute along with the <db:emphasis>dependencies</db:emphasis> between them. The tasks are distributed across all the configured cores by a scheduler to improve performance.</db:para>
</db:section>
<db:section xml:id="qt-3d-s-aspects">
<db:title>Qt 3D's Aspects</db:title>
<db:para>By default, Qt 3D provides the <db:link xlink:href="qt3drender-module.xml">Qt3DRender</db:link> and <db:link xlink:href="qt3dinput-module.xml">Qt3DInput</db:link> aspects. The components and other supporting classes provided by these aspects are discussed in the documentation for those modules.</db:para>
<db:para>Additional aspects providing more capabilities will be added in future versions of Qt 3D.</db:para>
</db:section>
</db:article>
