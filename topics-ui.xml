<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>User Interfaces</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt's technologies for Creating User Interfaces.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt framework's main user interface technologies are <db:emphasis role="bold">Qt Quick Controls</db:emphasis> and <db:emphasis role="bold">Qt Widgets</db:emphasis>. Qt Quick Control interfaces are fluid, dynamic, and are best on touch interfaces. Qt Widgets are for creating complex desktop applications. You can create Qt Quick Controls and Qt Widgets interfaces with the target platform's native look and feel.</db:para>
<db:section xml:id="building-uis-with-qt-quick-controls">
<db:title>Building UIs with Qt Quick Controls</db:title>
<db:para>Qt Quick Controls is for creating dynamic and fluid user interfaces. The <db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls</db:link> module supplies QML types such as buttons, dialogs, and menus. You can use QML, a declarative language, to build the UI and JavaScript to implement the logic.</db:para>
<db:para>The following list contains related overviews:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmlapplications.xml">QML Applications</db:link> - introduction to QML</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-usecase-visual.xml">Visual types in QML</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-usecase-userinput.xml">Responding to User Input in QML</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-usecase-animations.xml">Animations in QML</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-usecase-text.xml">Displaying Text in QML</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-usecase-layouts.xml">Layouts in QML</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-usecase-styling.xml">Style and Theme Support</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-usecase-integratingjs.xml">Integrating JavaScript in QML</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Qt Quick 3D</db:link> - add-on for 3D graphics</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtshadertools-index.xml">Qt Shader Tools</db:link> - add-on shader effects</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-widgets-user-interfaces">
<db:title>Qt Widgets User Interfaces</db:title>
<db:para><db:link xlink:href="qtwidgets-index.xml">Qt Widgets</db:link> are the user interface elements that are typical in desktop environments. The widgets integrate well to the underlying platform providing native look and feel on Windows, Linux and macOS. The widgets are mature and feature rich user interface elements suitable for mostly traditional user interfaces. In contrast to <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link>, the widgets are for creating large desktop applications and less suited for creating touch-centric applications with fluid interfaces.</db:para>
<db:para>The following list contains related overviews for Qt Widgets:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="widget-classes.xml">Widgets Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="animation.xml">Animation Framework</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="mainwindow.xml">Application Main Window</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dialogs.xml">Dialog Windows</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dnd.xml">Drag and Drop</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="gestures-overview.xml">Gestures in Widgets and Graphics View</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="layout.xml">Layout Management</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="application-windows.xml">Window and Dialog Widgets</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="style-reference.xml">Styles and Style Aware Widgets</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="comparison-of-ui-interfaces">
<db:title>Comparison of UI Interfaces</db:title>
<db:para>The following table compares Qt Widgets and Qt Quick interfaces.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
</db:th>
<db:th>
<db:para>Qt Quick / Qt Quick Controls</db:para>
</db:th>
<db:th>
<db:para>Qt Widgets</db:para>
</db:th>
<db:th>
<db:para>Comments</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Used language(s)</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmlapplications.xml">QML/JS</db:link></db:para>
</db:td>
<db:td>
<db:para>C++</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Native look and feel</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/ok.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/ok.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para>Qt Widgets and Qt Quick Controls support native look and feel on their target platforms.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Custom styling</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/ok.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/ok.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para>Qt Widgets provide customization with <db:link xlink:href="stylesheet.xml">style sheets</db:link> and Qt Quick Controls has a selection of <db:link xlink:href="qtquickcontrols2-styles.xml">customizable styles</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Fluid animated UIs</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/ok.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Qt Widgets do not scale well for animations. Qt Quick Controls offers a convenient and natural way to implement animations in a declarative manner.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Touch screen</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/ok.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Qt Widgets often require a mouse cursor for good interaction, whereas Qt Quick Controls provides QML types for touch interaction.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Standard industry widgets</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/ok.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para>Qt Widgets provide all the bells and whistles, developed over two decades, needed for building standard industry type applications.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Model/View programming</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/ok.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/ok.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para>Qt Quick provides convenient views, but Qt Widgets provide more convenient and complete framework. In addition to Qt Quick views, Qt Quick Controls provide a <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Rapid UI development</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/ok.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/ok.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para>Qt Quick is an excellent choice for rapid UI prototyping and development.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>HW accelerated graphics</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/ok.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/ok.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para>Qt provides full hardware acceleration for Qt Quick interfaces and Qt Widgets interfaces are rendered in software. The <db:link xlink:href="topics-graphics.xml">Graphics</db:link> overview has more information.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Graphical effects</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/ok.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Several Qt Quick modules provide graphical effects and Qt Widgets interfaces can use <db:link xlink:href="qtgui-index.xml">Qt GUI</db:link> for effects.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Rich text processing</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/ok.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/ok.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para>Qt Widgets currently provide the most comprehensive base for implementing text editors. Qt's rich text document classes can also be utilized in Qt Quick and Qt Quick Controls' <db:link xlink:href="qml-qtquick-controls2-textarea.xml">TextArea</db:link>, but may require some C++ implementation.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="related-topics">
<db:title>Related Topics</db:title>
<db:para>The following pages contain more information about designing and developing user interfaces:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="topics-app-development.xml#design-tools">Design Tools</db:link> - overview of user interface tools for designers and developers</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="topics-graphics.xml">Graphics</db:link> - graphics overview</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="highdpi.xml">High DPI</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
