<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>User Interfaces</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt's features for Creating User Interfaces.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt features multiple technologies for creating user interfaces. While it is possible to mix and match these different technologies as needed, one approach is often better suitable for a certain type of user interface than the others. <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link> is a good example of an application that mixes different user interface technologies. In fact, it uses the two different approaches described below. <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link> uses the traditional <db:link xlink:href="qtwidgets-index.xml">Qt Widgets</db:link> such as menus and dialogs as a basis of the user interface, <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> amongst others for the welcome screen. The following sections provide brief introductions to the available technologies for creating user interfaces, and a comparison table to help choosing the best suitable technology.</db:para>
<db:section xml:id="common-important-ui-topics">
<db:title>Common Important UI Topics</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="highdpi.xml">High DPI Displays</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qml-graphical-user-interfaces">
<db:title>QML Graphical User Interfaces</db:title>
<db:para>QML allows developers to build user interfaces in a declarative way. User interfaces specifically benefit from the simplicity of compounding QML objects and configuring them using property bindings.</db:para>
<db:para><db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> is a module which supplies QML types for creating user interfaces such as a visual canvas with its own coordinate system and rendering engine. Animation and transition effects are a first class concept in Qt Quick and visual effects can be supplemented through specialized components for particle and shader effects.</db:para>
<db:section xml:id="important-ui-topics-for-qml-applications">
<db:title>Important UI Topics for QML Applications</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquick-usecase-visual.xml">Visual types in QML</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-usecase-userinput.xml">Responding to User Input in QML</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-usecase-animations.xml">Animations in QML</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-usecase-text.xml">Displaying Text in QML</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-usecase-layouts.xml">Layouts in QML</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-usecase-styling.xml">Style and Theme Support</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-usecase-integratingjs.xml">Integrating JavaScript in QML</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="scalability.xml">Scalability</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="graphical-controls">
<db:title>Graphical Controls</db:title>
<db:para>The <db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls</db:link> module is new in Qt 5.1 and provides a set of UI elements to create user interfaces using <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> 2.</db:para>
<db:para>For more about how to create application user interfaces with QML, visit the <db:link xlink:href="qmlapplications.xml#qml-user-interfaces">QML User Interfaces</db:link> page.</db:para>
</db:section>
</db:section>
<db:section xml:id="widget-based-user-interfaces">
<db:title>Widget-based User Interfaces</db:title>
<db:para><db:link xlink:href="qtwidgets-index.xml">Qt Widgets</db:link> are traditional user interface elements that are typically found in desktop environments. The widgets integrate well to the underlying platform providing native look'n'feel on Windows, Linux and Mac OSX. The widgets are mature and feature rich user interface elements suitable for mostly static user interfaces. In contrast to <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link>, the widgets do not scale that well for touch screens and fluid, highly animated modern user interfaces. The widgets are a good choice for applications with traditional desktop centric user interfaces, such as office type applications.</db:para>
<db:section xml:id="important-concepts-in-qt-widgets">
<db:title>Important Concepts in Qt Widgets</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="mainwindow.xml">Application Main Window</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="desktop-integration.xml">Desktop Integration</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dialogs.xml">Dialog Windows</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="layout.xml">Layout Management</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="richtext.xml">Rich Text Processing</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dnd.xml">Drag and Drop</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="internationalization.xml">Internationalization</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="visualizing-data">
<db:title>Visualizing Data</db:title>
<db:para>Qt provides ready-made C++ classes and QML types for visualizing data in the form of charts and graphs, which are known to be best ways of analyzing data. <db:link xlink:href="qtcharts-index.xml">Qt Charts</db:link> and {Qt Data Visualization} are the two Qt add-ons that make data visualization using 2D and 3D models a reality.</db:para>
</db:section>
<db:section xml:id="displaying-web-content">
<db:title>Displaying Web Content</db:title>
<db:para>Qt provides the Chromium-based <db:link xlink:href="qtwebengine-index.xml">WebEngine</db:link> layout engine, which enable you to embed web content into the Qt application. The engine can be integrated into both Qt Widget-based and Qt Quick-based applications.</db:para>
<db:para>For more information about support for web content in Qt, see <db:link xlink:href="topics-web-content.xml">Integrating Web Content</db:link>.</db:para>
</db:section>
<db:section xml:id="comparison">
<db:title>Comparison</db:title>
<db:para>Notice that choosing the appropriate technology for building an user interface is not always black and white. It depends on several criteria, such as other existing technologies used in a project or even target platform constraints. To some extent, many items in the following table can be implemented using any of the three available technologies. The following table aims to help you choose the best suited tool for the job.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
</db:th>
<db:th>
<db:para>Qt Quick / Qt Quick Controls</db:para>
</db:th>
<db:th>
<db:para>Qt Widgets</db:para>
</db:th>
<db:th>
<db:para>Qt <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link></db:para>
</db:th>
<db:th>
<db:para>Comments</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Used language(s)</db:para>
</db:td>
<db:td>
<db:para>QML/JS</db:para>
</db:td>
<db:td>
<db:para>C++</db:para>
</db:td>
<db:td>
<db:para>HTML/CSS/JS</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Native look'n'feel</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Qt Widgets and Qt Quick Controls integrate well to the underlying platform, providing a native look'n'feel on Windows, Linux, and macOS.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Custom look'n'feel</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>(X)</db:para>
</db:td>
<db:td>
<db:para>(X)</db:para>
</db:td>
<db:td>
<db:para>Qt Widgets provide means for customization via style sheets, but Qt Quick is a better performing choice for user interfaces that do not aim to look native.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Fluid animated UIs</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>Qt Widgets do not scale well for animations. Qt Quick offers a convenient and natural way to implement animations in a declarative manner.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Touch screen</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>Qt Widgets often require a mouse cursor for good interaction, whereas Qt Quick only provides primitive building blocks that were designed with touch interaction in mind. The <db:link xlink:href="qml-qtwebview-webview.xml">WebView</db:link> Qt Quick component has support for multi-touch gestures to interact with web content.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Standard industry widgets</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Qt Widgets provide all the bells and whistles, developed over two decades, needed for building standard industry type applications. Qt <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> Widgets provide widgets and additional classes to render and interact with web content.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Model/View programming</db:para>
</db:td>
<db:td>
<db:para>(X)</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Qt Quick provides convenient views, but Qt Widgets provide more convenient and complete framework. In addition to Qt Quick views, Qt Quick Controls provide a <db:link xlink:href="qml-qtquick-controls-tableview.xml">TableView</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Rapid UI development</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>(X)</db:para>
</db:td>
<db:td>
<db:para>(X)</db:para>
</db:td>
<db:td>
<db:para>Qt Quick is an excellent choice for rapid UI prototyping and development.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>HW accelerated graphics</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>(X)</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>Qt Widgets provide QGLWidget for rendering OpenGL graphics, and Qt <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> supports WebGL, but the OpenGL ES 2.0 or OpenGL 2.0 based <db:link xlink:href="topics-graphics.xml#qt-quick-scene-graph">Qt Quick Scene Graph</db:link> has proven to provide the best performance for UIs and for integrating with OpenGL content.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Graphical effects</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>The particle system and shader effects available in Qt Quick are more flexible. Qt Widgets offer very little in this area.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Rich text processing</db:para>
</db:td>
<db:td>
<db:para>(X)</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Qt Widgets currently provide the most comprehensive base for implementing text editors. Qt's rich text document classes can also be utilized in Qt Quick and Qt Quick Controls' <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link>, but may require some C++ implementation.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Existing web content</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>Both Qt Quick and Qt Widgets provide components for presenting <db:link xlink:href="richtext-html-subset.xml">simple rich text</db:link>, but Qt <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> is the right choice for presenting full-blown web content.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="internationalization-and-translations">
<db:title>Internationalization and Translations</db:title>
<db:para>Qt provides excellent support for translating applications into local languages. Release managers, translators, and developers can use Qt translation tools to accomplish their tasks.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="internationalization.xml">Internationalization with Qt</db:link> - instructions and the process of creating localized applications.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtlinguist-index.xml">Qt Linguist Manual</db:link> - manual of Qt's translation tool</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
