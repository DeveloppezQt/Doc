<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Books</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to use Qt SQL classes with a model/view framework.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Books example shows how Qt's SQL classes can be used with the model/view framework to create rich user interfaces for information stored in a database.</db:para>
<db:mediaobject>
<db:alt>{The main window displays information related to the books stored in the database}</db:alt>
<db:imageobject>
<db:imagedata fileref="images/books-demo.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Information about a collection of books is held in a database. The books are catalogued by author, title, genre, and year of publication. Although each of these fields can be displayed and edited using standard widgets, an additional field describing an arbitrary rating for the book needs something extra.</db:para>
<db:para>Books are rated using a system where each is allocated a number of stars; the more a book has, the better it is supposed to be. By clicking on a cell containing the rating, the number of stars can be modified, and the rating in the database is updated.</db:para>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/sql/books?h=6.9">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
