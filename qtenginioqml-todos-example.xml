<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Enginio QML Examples - Todos</db:title>
<db:productname>QtEnginioQml</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Client library for Enginio from QML</db:titleabbrev>
<db:abstract>
<db:para>The Todo example shows the <db:link xlink:href="qml-enginio-enginiomodel.xml">EnginioModel</db:link> usage in Qt Quick.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>In this example a simple list of objects is displayed in a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>. Each item in the list is a &quot;To Do&quot; object which can be <db:emphasis>done</db:emphasis> or <db:emphasis>not yet done</db:emphasis>. Todos can be added and removed (when hovering with the mouse).</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/todolist.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>In this simple schema, the objects will only have two properties that are added to the default properties (such as creation date, which always exists): a string <db:code>title</db:code> and a bool <db:code>completed</db:code>. The object type will be created when a call to create, or, in this case, a call to <db:link xlink:href="qml-enginio-enginiomodel.xml#append-method">EnginioModel::append</db:link>() is made.</db:para>
<db:para>A todo object will look like this in <db:link xlink:href="http://json.org">JSON</db:link>:</db:para>
<db:programlisting language="cpp">{
  &quot;title&quot;: &quot;Buy Milk&quot;,
  &quot;completed&quot;: false
}
    </db:programlisting>
<db:para>The example uses Qt Quick Controls, Layouts, and Enginio.</db:para>
<db:programlisting language="qml">import Enginio 1.0
</db:programlisting>
<db:para>The first step is to create an <db:link xlink:href="qml-enginio-enginiomodel.xml">Enginio model</db:link> and its <db:link xlink:href="qml-enginio-enginioclient.xml">Enginio client</db:link> with the backend configuration. To get nice debug output in case something goes wrong, the client's <db:link xlink:href="qml-enginio-enginioclient.xml#error-signal">onError</db:link> signal handler is implented. Since the error is a <db:link xlink:href="http://www.ecma-international.org/ecma-262/5.1/#sec-15.12">JSON object</db:link>, JSON.stringify is used to format it to a string.</db:para>
<db:programlisting language="qml">EnginioModel {
    id: enginioModel
    client: EnginioClient {
        backendId: backendHelper.backendId
        onError: console.log(&quot;Enginio error:&quot;, JSON.stringify(reply.data))
    }
    query: {&quot;objectType&quot;: &quot;objects.todos&quot; }
}
</db:programlisting>
<db:para>A <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> is used to display the list of Todos. In the delegate, the properties of the Enginio objects are used.</db:para>
<db:programlisting language="qml">ListView {
    id: listview
    model: enginioModel
    delegate: listItemDelegate
    anchors.top: header.bottom
    anchors.bottom: footer.top
    width: parent.width
    clip: true

    // Animations
    add: Transition { NumberAnimation { properties: &quot;y&quot;; from: root.height; duration: 250 } }
    removeDisplaced: Transition { NumberAnimation { properties: &quot;y&quot;; duration: 150 } }
    remove: Transition { NumberAnimation { property: &quot;opacity&quot;; to: 0; duration: 150 } }
}
</db:programlisting>
<db:para>It is easy to add a new Todo object to the model using a <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>. By implementing the <db:link xlink:href="qml-qtquick-textinput.xml#accepted-signal">onAccepted</db:link> signal handler, the Todo data is appended to the model. After appending the new Todo, the <db:link xlink:href="qml-qtquick-textinput.xml#text-prop">text property</db:link> is cleared so that the next Todo can be entered.</db:para>
<db:programlisting language="qml">BorderImage {

    anchors.left: parent.left
    anchors.right: addButton.left
    anchors.verticalCenter: parent.verticalCenter
    anchors.margins: 16
    source:&quot;images/textfield.png&quot;
    border.left: 14 ; border.right: 14 ; border.top: 8 ; border.bottom: 8

    TextInput{
        id: textInput
        anchors.fill: parent
        clip: true
        anchors.leftMargin: 14
        anchors.rightMargin: 14
        verticalAlignment: Text.AlignVCenter
        font.pixelSize: 22
        Text {
            id: placeholderText
            anchors.fill: parent
            verticalAlignment: Text.AlignVCenter
            visible: !(parent.text.length || parent.inputMethodComposing)
            font: parent.font
            text: &quot;New todo...&quot;
            color: &quot;#aaa&quot;
        }
        onAccepted: {
            enginioModel.append({&quot;title&quot;: textInput.text, &quot;completed&quot;: false})
            textInput.text = &quot;&quot;
        }
    }
}

Item {
    id: addButton

    width: 40 ; height: 40
    anchors.margins: 20
    anchors.right: parent.right
    anchors.verticalCenter: parent.verticalCenter
    enabled: textInput.text.length
    Image {
        source: addMouseArea.pressed ? &quot;qrc:icons/add_icon_pressed.png&quot; : &quot;qrc:icons/add_icon.png&quot;
        anchors.centerIn: parent
        opacity: enabled ? 1 : 0.5
    }
    MouseArea {
        id: addMouseArea
        anchors.fill: parent
        onClicked: textInput.accepted()
    }
}
}
</db:programlisting>
<db:para>Inside the delegate, the data for the index is available by using the property names (<db:emphasis>title</db:emphasis> and <db:emphasis>completed</db:emphasis>). The <db:emphasis>title</db:emphasis> property is directly assigned to the text displayed on each list item. The <db:emphasis>completed</db:emphasis> boolean is used to display the item with a strikeout font and a light color.</db:para>
<db:programlisting language="qml">Text {
    id: todoText
    text: title
    font.pixelSize: 26
    color: &quot;#333&quot;

    anchors.verticalCenter: parent.verticalCenter
    anchors.left: checkbox.right
    anchors.right: parent.right
    anchors.leftMargin: 12
    anchors.rightMargin: 40
    elide: Text.ElideRight
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-enginio-enginiomodel.xml#setProperty-method">Enginio::EnginioModel::setProperty</db:link>() function is called to update the data in the Enginio backend.</db:para>
<db:programlisting language="qml">MouseArea {
    id: mouse
    anchors.fill: parent
    hoverEnabled: true
    onClicked: {
        if (index !== -1 &amp;&amp; _synced) {
            enginioModel.setProperty(index, &quot;completed&quot;, !completed)
        }
    }
}
</db:programlisting>
<db:para>The <db:code>_synced</db:code> property can be used to ascertain whether an item has been synced or not. It is always available in the delegate, and may be used, for example, to disable the user interface until syncing has completed.</db:para>
<db:programlisting language="qml">Image {
    id: removeIcon

    source: removeMouseArea.pressed ? &quot;qrc:icons/delete_icon_pressed.png&quot; : &quot;qrc:icons/delete_icon.png&quot;
    anchors.margins: 20
    anchors.verticalCenter: parent.verticalCenter
    anchors.right: parent.right
    opacity: enabled ? 1 : 0.5
    Behavior on opacity {NumberAnimation{duration: 100}}
    MouseArea {
        id: removeMouseArea
        anchors.fill: parent
        onClicked: enginioModel.remove(index)
    }
}
</db:programlisting>
<db:para>Finally, a remove button is visible when hovering over an item with the mouse. Removal is implemented by calling <db:link xlink:href="qml-enginio-enginiomodel.xml#remove-method">EnginioModel::remove</db:link>() with the row of the item.</db:para>
<db:programlisting language="qml">MouseArea {
    id: removeMouseArea
    anchors.fill: parent
    onClicked: enginioModel.remove(index)
}
</db:programlisting>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="todos/todo.qml">todos/todo.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="todos/todo.qrc">todos/todo.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="todos/todos.pro">todos/todos.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
