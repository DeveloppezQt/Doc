<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngine Content Manipulation Example</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to load and manipulate web content.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;
#include &lt;QtWebEngineWidgets&gt;
#include &quot;mainwindow.h&quot;

template&lt;typename Arg, typename R, typename C&gt;
struct InvokeWrapper {
    R *receiver;
    void (C::*memberFun)(Arg);
    void operator()(Arg result) {
        (receiver-&gt;*memberFun)(result);
    }
};

template&lt;typename Arg, typename R, typename C&gt;
InvokeWrapper&lt;Arg, R, C&gt; invoke(R *receiver, void (C::*memberFun)(Arg))
{
    InvokeWrapper&lt;Arg, R, C&gt; wrapper = {receiver, memberFun};
    return wrapper;
}

MainWindow::MainWindow(const QUrl&amp; url)
{
    progress = 0;

    QFile file;
    file.setFileName(&quot;:/jquery.min.js&quot;);
    file.open(QIODevice::ReadOnly);
    jQuery = file.readAll();
    jQuery.append(&quot;\nvar qt = { 'jQuery': jQuery.noConflict(true) };&quot;);
    file.close();

    view = new QWebEngineView(this);
    view-&gt;load(url);
    connect(view, SIGNAL(loadFinished(bool)), SLOT(adjustLocation()));
    connect(view, SIGNAL(titleChanged(QString)), SLOT(adjustTitle()));
    connect(view, SIGNAL(loadProgress(int)), SLOT(setProgress(int)));
    connect(view, SIGNAL(loadFinished(bool)), SLOT(finishLoading(bool)));

    locationEdit = new QLineEdit(this);
    locationEdit-&gt;setSizePolicy(QSizePolicy::Expanding, locationEdit-&gt;sizePolicy().verticalPolicy());
    connect(locationEdit, SIGNAL(returnPressed()), SLOT(changeLocation()));

    QToolBar *toolBar = addToolBar(tr(&quot;Navigation&quot;));
    toolBar-&gt;addAction(view-&gt;pageAction(QWebEnginePage::Back));
    toolBar-&gt;addAction(view-&gt;pageAction(QWebEnginePage::Forward));
    toolBar-&gt;addAction(view-&gt;pageAction(QWebEnginePage::Reload));
    toolBar-&gt;addAction(view-&gt;pageAction(QWebEnginePage::Stop));
    toolBar-&gt;addWidget(locationEdit);

    QMenu *viewMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;View&quot;));
    QAction* viewSourceAction = new QAction(&quot;Page Source&quot;, this);
    connect(viewSourceAction, SIGNAL(triggered()), SLOT(viewSource()));
    viewMenu-&gt;addAction(viewSourceAction);

    QMenu *effectMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Effect&quot;));
    effectMenu-&gt;addAction(&quot;Highlight all links&quot;, this, SLOT(highlightAllLinks()));

    rotateAction = new QAction(this);
    rotateAction-&gt;setIcon(style()-&gt;standardIcon(QStyle::SP_FileDialogDetailedView));
    rotateAction-&gt;setCheckable(true);
    rotateAction-&gt;setText(tr(&quot;Turn images upside down&quot;));
    connect(rotateAction, SIGNAL(toggled(bool)), this, SLOT(rotateImages(bool)));
    effectMenu-&gt;addAction(rotateAction);

    QMenu *toolsMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Tools&quot;));
    toolsMenu-&gt;addAction(tr(&quot;Remove GIF images&quot;), this, SLOT(removeGifImages()));
    toolsMenu-&gt;addAction(tr(&quot;Remove all inline frames&quot;), this, SLOT(removeInlineFrames()));
    toolsMenu-&gt;addAction(tr(&quot;Remove all object elements&quot;), this, SLOT(removeObjectElements()));
    toolsMenu-&gt;addAction(tr(&quot;Remove all embedded elements&quot;), this, SLOT(removeEmbeddedElements()));

    setCentralWidget(view);
}

void MainWindow::viewSource()
{
    QTextEdit* textEdit = new QTextEdit(NULL);
    textEdit-&gt;setAttribute(Qt::WA_DeleteOnClose);
    textEdit-&gt;adjustSize();
    textEdit-&gt;move(this-&gt;geometry().center() - textEdit-&gt;rect().center());
    textEdit-&gt;show();

    view-&gt;page()-&gt;toHtml(invoke(textEdit, &amp;QTextEdit::setPlainText));
}

void MainWindow::adjustLocation()
{
    locationEdit-&gt;setText(view-&gt;url().toString());
}

void MainWindow::changeLocation()
{
    QUrl url = QUrl::fromUserInput(locationEdit-&gt;text());
    view-&gt;load(url);
    view-&gt;setFocus();
}

void MainWindow::adjustTitle()
{
    if (progress &lt;= 0 || progress &gt;= 100)
        setWindowTitle(view-&gt;title());
    else
        setWindowTitle(QString(&quot;%1 (%2%)&quot;).arg(view-&gt;title()).arg(progress));
}

void MainWindow::setProgress(int p)
{
    progress = p;
    adjustTitle();
}

void MainWindow::finishLoading(bool)
{
    progress = 100;
    adjustTitle();
    view-&gt;page()-&gt;runJavaScript(jQuery);

    rotateImages(rotateAction-&gt;isChecked());
}

void MainWindow::highlightAllLinks()
{
    QString code = &quot;qt.jQuery('a').each( function () { qt.jQuery(this).css('background-color', 'yellow') } ); undefined&quot;;
    view-&gt;page()-&gt;runJavaScript(code);
}

void MainWindow::rotateImages(bool invert)
{
    QString code;

    if (invert)
        code = &quot;qt.jQuery('img').each( function () { qt.jQuery(this).css('-webkit-transition', '-webkit-transform 2s'); qt.jQuery(this).css('-webkit-transform', 'rotate(180deg)') } ); undefined&quot;;
    else
        code = &quot;qt.jQuery('img').each( function () { qt.jQuery(this).css('-webkit-transition', '-webkit-transform 2s'); qt.jQuery(this).css('-webkit-transform', 'rotate(0deg)') } ); undefined&quot;;
    view-&gt;page()-&gt;runJavaScript(code);
}

void MainWindow::removeGifImages()
{
    QString code = &quot;qt.jQuery('[src*=gif]').remove()&quot;;
    view-&gt;page()-&gt;runJavaScript(code);
}

void MainWindow::removeInlineFrames()
{
    QString code = &quot;qt.jQuery('iframe').remove()&quot;;
    view-&gt;page()-&gt;runJavaScript(code);
}

void MainWindow::removeObjectElements()
{
    QString code = &quot;qt.jQuery('object').remove()&quot;;
    view-&gt;page()-&gt;runJavaScript(code);
}

void MainWindow::removeEmbeddedElements()
{
    QString code = &quot;qt.jQuery('embed').remove()&quot;;
    view-&gt;page()-&gt;runJavaScript(code);
}

</db:programlisting>
</db:article>
