<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Getting Started Programming with Qt Widgets</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>In this topic, we teach basic Qt knowledge by implementing a simple Notepad application using C++ and the <db:link xlink:href="qtwidgets-index.xml">Qt Widgets</db:link> module. We use the Qt Creator IDE and Qt Designer to generate some code, but you could also write all the code yourself.</db:para>
<db:para>After reading this topic, you are ready to refer to our overviews and API documentation, to find the information you need for the application you are developing.</db:para>
<db:para>In this topic, we first use Qt Creator to create a project with the necessary files. Then we use Qt Designer to modify the user interface files to show a text edit and a push button in a window on the desktop. This represents a simple Qt application that has a GUI. Finally, we add user interaction to the application by creating actions for opening and saving files.</db:para>
<db:mediaobject>
<db:alt>&quot;Notepad application&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/gs1.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>You can find the final Notepad source files in the qtdoc repository in the snippets/widgets-tutorial/notepad directory. You can either fetch the Qt 5 sources from Qt Project or install them as part of Qt 5.</db:para>
<db:section xml:id="creating-the-notepad-project">
<db:title>Creating the Notepad Project</db:title>
<db:para>Setting up a new project in Qt Creator is aided by a wizard that guides you step-by-step through the project creation process. The wizard prompts you to enter the settings needed for that particular type of project and creates the project for you.</db:para>
<db:mediaobject>
<db:alt>&quot;Qt Creator New File or Project dialog&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/gs-project1.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>To create the Notepad project, select <db:emphasis role="bold">File</db:emphasis> &gt; <db:emphasis role="bold">New File or Project</db:emphasis> &gt; <db:emphasis role="bold">Applications</db:emphasis> &gt; <db:emphasis role="bold">Qt Widgets Application</db:emphasis> &gt; <db:emphasis role="bold">Choose</db:emphasis>, and follow the instructions of the wizard. In the <db:emphasis role="bold">Class Information</db:emphasis> dialog, type <db:emphasis role="bold">Notepad</db:emphasis> as the class name and select <db:emphasis role="bold">QMainWindow</db:emphasis> as the base class.</db:para>
<db:mediaobject>
<db:alt>&quot;Class Information Dialog&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/gs-project2.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:emphasis role="bold">Qt Widgets Application</db:emphasis> wizard creates a project that contains a main source file and a set of files that specify a user interface (Notepad widget):</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>notepad.pro - the project file.</db:para>
</db:listitem>
<db:listitem>
<db:para>main.cpp - the main source file for the application.</db:para>
</db:listitem>
<db:listitem>
<db:para>notepad.cpp - the source file of the notepad class of the Notepad widget.</db:para>
</db:listitem>
<db:listitem>
<db:para>notepad.h - the header file of the notepad class for the Notepad widget.</db:para>
</db:listitem>
<db:listitem>
<db:para>notepad.ui - the UI form for the Notepad widget.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The .cpp, .h, and .ui files come with the necessary boiler plate code for you to be able to build and run the project. The .pro file is complete. We will take a closer look at the file contents in the following sections.</db:para>
<db:para><db:emphasis role="bold">Learn More</db:emphasis></db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>About</db:para>
</db:th>
<db:th>
<db:para>Here</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Using Qt Creator</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Creating other kind of applications with Qt Creator</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="http://doc.qt.io/qtcreator/creator-tutorials.html">Qt Creator Tutorials</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="main-source-file">
<db:title>Main Source File</db:title>
<db:para>The wizard generates the following code in the main.cpp file:</db:para>
<db:programlisting language="cpp">#include &quot;notepad.h&quot;
#include &lt;QApplication&gt;

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    Notepad w;
    w.show();

    return a.exec();
}
</db:programlisting>
<db:para>Let us go through the code line by line. The following lines include the header files for the Notepad widget and <db:link xlink:href="qapplication.xml">QApplication</db:link>. All Qt classes have a header file named after them.</db:para>
<db:programlisting language="cpp">#include &quot;notepad.h&quot;
#include &lt;QApplication&gt;
</db:programlisting>
<db:para>The following line defines the main function that is the entry point for all C and C++ based applications:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
</db:programlisting>
<db:para>The following line creates a <db:link xlink:href="qapplication.xml">QApplication</db:link> object. This object manages application-wide resources and is necessary to run any Qt program that uses Qt Widgets. It constructs an application object with <db:code>argc</db:code> command line arguments run in <db:code>argv</db:code>. (For GUI applications that do not use Qt Widgets, you can use <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> instead.)</db:para>
<db:programlisting language="cpp">    QApplication a(argc, argv);
</db:programlisting>
<db:para>The following line creates the Notepad object. This is the object for which the wizard created the class and the UI file. The user interface contains visual elements that are called <db:code>widgets</db:code> in Qt. Examples of widgets are text edits, scroll bars, labels, and radio buttons. A widget can also be a container for other widgets; a dialog or a main application window, for example.</db:para>
<db:programlisting language="cpp">    Notepad w;
</db:programlisting>
<db:para>The following line shows the Notepad widget on the screen in its own window. Since widgets also function as containers (for instance a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>, which has toolbars, menus, a status bar, and a few other widgets), it is possible to show a single widget in its own window. Widgets are not visible by default; the function <db:link xlink:href="qwidget.xml#show">show</db:link>() makes the widget visible.</db:para>
<db:programlisting language="cpp">    w.show();
</db:programlisting>
<db:para>The following line makes the <db:link xlink:href="qapplication.xml">QApplication</db:link> enter its event loop. When a Qt application is running, events are generated and sent to the widgets of the application. Examples of events are mouse presses and key strokes.</db:para>
<db:programlisting language="cpp">    return a.exec();
</db:programlisting>
<db:para><db:emphasis role="bold">Learn More</db:emphasis></db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>About</db:para>
</db:th>
<db:th>
<db:para>Here</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Widgets and Window Geometry</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="application-windows.xml">Window and Dialog Widgets</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Events and event handling</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="eventsandfilters.xml">The Event System</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="designing-a-ui">
<db:title>Designing a UI</db:title>
<db:para>The wizard generates a user interface definition in XML format, notepad.ui. When you open the notepad.ui file in Qt Creator, it automatically opens in the integrated Qt Designer.</db:para>
<db:para>When you build the application, Qt Creator launches the Qt <db:link xlink:href="uic.xml">User Interface Compiler (uic)</db:link> that reads the .ui file and creates a corresponding C++ header file, ui_notepad.h.</db:para>
<db:section xml:id="using-qt-designer">
<db:title>Using Qt Designer</db:title>
<db:para>The wizard creates an application that uses a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>. It has its own layout to which you can add a menu bar, dock widgets, tool bars, and a status bar. The center area can be occupied by any kind of widget. The wizard places the Notepad widget there.</db:para>
<db:para>Let us use Qt Designer to add a <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> object and a <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> object to the main window. When you type text in the text edit widget, it receives key pressed events and responds by drawing the text typed. The button will exit the Notepad application when pushed (that is, clicked with the mouse).</db:para>
<db:para>To add widgets in Qt Designer:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>In the Qt Creator <db:emphasis role="bold">Editor</db:emphasis> mode, double-click the notepad.ui file in the <db:emphasis role="bold">Projects</db:emphasis> view to launch the file in the integrated Qt Designer.</db:para>
</db:listitem>
<db:listitem>
<db:para>Drag and drop the following widgets to the form:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Text Edit (<db:link xlink:href="qtextedit.xml">QTextEdit</db:link>)</db:para>
</db:listitem>
<db:listitem>
<db:para>Push Button (<db:link xlink:href="qpushbutton.xml">QPushButton</db:link>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>Double-click the <db:emphasis role="bold">Push Button</db:emphasis> widget and enter the text <db:emphasis role="bold">Quit</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the <db:emphasis role="bold">Properties</db:emphasis> pane, change the value of <db:emphasis role="bold">objectName</db:emphasis> to <db:emphasis role="bold">quitButton</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Press <db:emphasis role="bold">Ctrl+A</db:emphasis> (or <db:emphasis role="bold">Cmd+A</db:emphasis>) to select the widgets and click <db:emphasis role="bold">Lay out Vertically</db:emphasis> (or press <db:emphasis role="bold">Ctrl+L</db:emphasis>) to apply a vertical layout (<db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link>).</db:para>
</db:listitem>
<db:listitem>
<db:para>Press <db:emphasis role="bold">Ctrl+S</db:emphasis> (or <db:emphasis role="bold">Cmd+S</db:emphasis>) to save your changes.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>The UI now looks as follows in Qt Designer:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/gs2.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>You can view the generated XML file in the code editor:</db:para>
<db:programlisting language="cpp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;ui version=&quot;4.0&quot;&gt;
 &lt;class&gt;Notepad&lt;/class&gt;
 &lt;widget class=&quot;QMainWindow&quot; name=&quot;Notepad&quot;&gt;
  &lt;property name=&quot;geometry&quot;&gt;
   &lt;rect&gt;
    &lt;x&gt;0&lt;/x&gt;
    &lt;y&gt;0&lt;/y&gt;
    &lt;width&gt;400&lt;/width&gt;
    &lt;height&gt;300&lt;/height&gt;
   &lt;/rect&gt;
  &lt;/property&gt;
  &lt;property name=&quot;windowTitle&quot;&gt;
   &lt;string&gt;Notepad&lt;/string&gt;
  &lt;/property&gt;
  &lt;widget class=&quot;QWidget&quot; name=&quot;centralWidget&quot;&gt;
   &lt;widget class=&quot;QWidget&quot; name=&quot;&quot;&gt;
    &lt;property name=&quot;geometry&quot;&gt;
     &lt;rect&gt;
      &lt;x&gt;70&lt;/x&gt;
      &lt;y&gt;0&lt;/y&gt;
      &lt;width&gt;268&lt;/width&gt;
      &lt;height&gt;235&lt;/height&gt;
     &lt;/rect&gt;
    &lt;/property&gt;
    &lt;layout class=&quot;QVBoxLayout&quot; name=&quot;verticalLayout&quot;&gt;
     &lt;item&gt;
      &lt;widget class=&quot;QTextEdit&quot; name=&quot;textEdit&quot;/&gt;
     &lt;/item&gt;
     &lt;item&gt;
      &lt;widget class=&quot;QPushButton&quot; name=&quot;quitButton&quot;&gt;
       &lt;property name=&quot;text&quot;&gt;
        &lt;string&gt;Quit&lt;/string&gt;
       &lt;/property&gt;
      &lt;/widget&gt;
     &lt;/item&gt;
    &lt;/layout&gt;
   &lt;/widget&gt;
  &lt;/widget&gt;
  &lt;widget class=&quot;QMenuBar&quot; name=&quot;menuBar&quot;&gt;
    ...
</db:programlisting>
<db:para>The following line contains the XML declaration, which specifies the XML version and character encoding used in the document:</db:para>
<db:programlisting language="cpp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
</db:programlisting>
<db:para>The rest of the file specifies an <db:code>ui</db:code> element that defines a Notepad widget:</db:para>
<db:programlisting language="cpp">&lt;ui version=&quot;4.0&quot;&gt;
</db:programlisting>
<db:para>The following snippet creates a <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link> widget that contains a <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> and <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> widget. As mentioned, widgets can contain other widgets. It is possible to set the bounds (the location and size) of child widgets directly, but it is usually easier to use a layout. A layout manages the bounds of a widget's children. <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link>, for instance, places the children in a vertical row.</db:para>
<db:programlisting language="cpp">&lt;layout class=&quot;QVBoxLayout&quot; name=&quot;verticalLayout&quot;&gt;
 &lt;item&gt;
  &lt;widget class=&quot;QTextEdit&quot; name=&quot;textEdit&quot;/&gt;
 &lt;/item&gt;
 &lt;item&gt;
  &lt;widget class=&quot;QPushButton&quot; name=&quot;quitButton&quot;&gt;
   &lt;property name=&quot;text&quot;&gt;
    &lt;string&gt;Quit&lt;/string&gt;
   &lt;/property&gt;
  &lt;/widget&gt;
 &lt;/item&gt;
&lt;/layout&gt;
</db:programlisting>
<db:para>The UI file is used together with the header and source file of the Notepad class. We will look at the rest of the UI file in the later sections.</db:para>
</db:section>
<db:section xml:id="notepad-header-file">
<db:title>Notepad Header File</db:title>
<db:para>The wizard generated a header file for the Notepad class that has the necessary #includes, a constructor, a destructor, and the Ui object. The file looks as follows:</db:para>
<db:programlisting language="cpp">#include &lt;QMainWindow&gt;

namespace Ui {
class Notepad;
}

class Notepad : public QMainWindow
{
    Q_OBJECT

public:
    explicit Notepad(QWidget *parent = 0);
    ~Notepad();

private:
    Ui::Notepad *ui;
};
</db:programlisting>
<db:para>The following line includes <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> that provides a main application window:</db:para>
<db:programlisting language="cpp">#include &lt;QMainWindow&gt;
</db:programlisting>
<db:para>The following lines declare the Notepad class in the Ui namespace, which is the standard namespace for the UI classes generated from .ui files by the <db:code>uic</db:code> tool:</db:para>
<db:programlisting language="cpp">namespace Ui {
class Notepad;
}
</db:programlisting>
<db:para>The class declaration contains the <db:code>Q_OBJECT</db:code> macro. It must come first in the class definition, and declares our class as a <db:link xlink:href="qobject.xml">QObject</db:link>. Naturally, it must also inherit from <db:link xlink:href="qobject.xml">QObject</db:link>. A <db:link xlink:href="qobject.xml">QObject</db:link> adds several abilities to a normal C++ class. Notably, the class name and slot names can be queried at run-time. It is also possible to query a slot's parameter types and invoke it.</db:para>
<db:programlisting language="cpp">class Notepad : public QMainWindow
{
    Q_OBJECT
</db:programlisting>
<db:para>The following lines declare a constructor that has a default argument called <db:code>parent</db:code>. The value 0 indicates that the widget has no parent (it is a top-level widget).</db:para>
<db:programlisting language="cpp">public:
    explicit Notepad(QWidget *parent = 0);
</db:programlisting>
<db:para>The following line declares a virtual destructor to free the resources that were acquired by the object during its life-cycle. According to the C++ naming convention, destructors have the same name as the class they are associated with, prefixed with a tilde (~). In <db:link xlink:href="qobject.xml">QObject</db:link>, destructors are virtual to ensure that the destructors of derived classes are invoked properly when an object is deleted through a pointer-to-base-class.</db:para>
<db:programlisting language="cpp">    ~Notepad();
</db:programlisting>
<db:para>The following lines declare a member variable which is a pointer to the Notepad UI class. A member variable is associated with a specific class, and accessible for all its methods.</db:para>
<db:programlisting language="cpp">private:
    Ui::Notepad *ui;
</db:programlisting>
</db:section>
<db:section xml:id="notepad-source-file">
<db:title>Notepad Source File</db:title>
<db:para>The source file that the wizard generated for the Notepad class looks as follows:</db:para>
<db:programlisting language="cpp">#include &quot;notepad.h&quot;
#include &quot;ui_notepad.h&quot;

Notepad::Notepad(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::Notepad)
{

    ui-&gt;setupUi(this);
}

Notepad::~Notepad()
{
    delete ui;
}
</db:programlisting>
<db:para>The following lines include the Notepad class header file that was generated by the wizard and the UI header file that was generated by the <db:code>uic</db:code> tool:</db:para>
<db:programlisting language="cpp">#include &quot;notepad.h&quot;
#include &quot;ui_notepad.h&quot;
</db:programlisting>
<db:para>The following line defines the <db:code>Notepad</db:code> constructor:</db:para>
<db:programlisting language="cpp">Notepad::Notepad(QWidget *parent) :
</db:programlisting>
<db:para>The following line calls the <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> constructor, which is the base class for the Notepad class:</db:para>
<db:programlisting language="cpp">    QMainWindow(parent),
</db:programlisting>
<db:para>The following line creates the UI class instance and assigns it to the <db:code>ui</db:code> member:</db:para>
<db:programlisting language="cpp">    ui(new Ui::Notepad)
</db:programlisting>
<db:para>The following line sets up the UI:</db:para>
<db:programlisting language="cpp">    ui-&gt;setupUi(this);
</db:programlisting>
<db:para>In the destructor, we delete the <db:code>ui</db:code>:</db:para>
<db:programlisting language="cpp">Notepad::~Notepad()
{
    delete ui;
}
</db:programlisting>
</db:section>
<db:section xml:id="project-file">
<db:title>Project File</db:title>
<db:para>The wizard generates the following project file, <db:code>notepad.pro</db:code>, for us:</db:para>
<db:programlisting language="cpp">QT       += core gui

greaterThan(QT_MAJOR_VERSION, 4): QT += widgets

TARGET = Notepad
TEMPLATE = app

SOURCES += main.cpp\
        notepad.cpp

HEADERS  += notepad.h

FORMS    += notepad.ui

</db:programlisting>
<db:para>The project file specifies the application name and the <db:code>qmake</db:code> template to use for generating the project, as well as the source, header, and UI files included in the project.</db:para>
<db:para>You could also use <db:code>qmake</db:code>'s <db:code>-project</db:code> option to generate the .pro file. Although, in that case, you have to remember to add the line <db:code>QT += widgets</db:code> to the generated file in order to link against the Qt Widgets Module.</db:para>
<db:para><db:emphasis role="bold">Learn More</db:emphasis></db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>About</db:para>
</db:th>
<db:th>
<db:para>Here</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Using Qt Designer</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtdesigner-manual.xml">Qt Designer Manual</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Layouts</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="layout.xml">Layout Management</db:link>, <db:link xlink:href="graphicsview.xml#widgets-and-layouts">Widgets and Layouts</db:link>, <db:link xlink:href="examples-layouts.xml">Layout Examples</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>The widgets that come with Qt</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="gallery.xml">Qt Widget Gallery</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Main windows and main window classes</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="mainwindow.xml">Application Main Window</db:link>, <db:link xlink:href="examples-mainwindow.xml">Main Window Examples</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QObjects and the Qt Object model (This is essential to understand Qt)</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="object.xml">Object Model</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qmake and the Qt build system</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmake-manual.xml">qmake Manual</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="adding-user-interaction">
<db:title>Adding User Interaction</db:title>
<db:para>We now have a user interface, but it does not really do anything useful, as it only contains a text edit and a push button, as well as some standard functions for quitting, minimizing and maximizing the application. To make the application useful, we will add user interaction to it. First, we will add functionality to the push button. Second, we will add functions for loading a file to the text edit and for saving the contents of the text edit as a file.</db:para>
<db:section xml:id="adding-push-buttons">
<db:title>Adding Push Buttons</db:title>
<db:para>Most desktop operating systems have standard ways of enabling users to quit applications. However, in this example we use this basic function to illustrate how you can add user interaction to applications. To do this, we add a slot that we connect to the <db:emphasis role="bold">Quit button</db:emphasis>.</db:para>
<db:para>To exit the application when the <db:emphasis role="bold">Quit</db:emphasis> button is pushed, you use the Qt signals and slots mechanism. A signal is emitted when a particular event occurs and a slot is a function that is called in response to a particular signal. Qt widgets have predefined signals and slots that you can use directly from Qt Designer.</db:para>
<db:para>To use Qt Designer to add a slot for the quit function, right-click the <db:emphasis role="bold">Quit</db:emphasis> button to open a context-menu and then select <db:emphasis role="bold">Go to slot</db:emphasis> &gt; <db:emphasis role="bold">clicked()</db:emphasis>.</db:para>
<db:para>A private slot, <db:code>on_quitButton_clicked()</db:code>, is added to the Notepad widget class header file, notepad.h and a private function, <db:code>Notepad::on_quitButton_clicked()</db:code>, is added to the Notepad widget class source file, notepad.cpp. We just need to write the code to execute the quit function in the source file.</db:para>
<db:para>Let us look at the modified code in the header file, notepad.h:</db:para>
<db:programlisting language="cpp">namespace Ui {
class Notepad;
}

class Notepad : public QMainWindow
{
    Q_OBJECT

public:
    explicit Notepad(QWidget *parent = 0);
    ~Notepad();

private slots:
    void on_quitButton_clicked();

private:
    Ui::Notepad *ui;
};
</db:programlisting>
<db:para>The following code uses Qt's signals and slots mechanism to make the application exit when the <db:emphasis role="bold">Quit button</db:emphasis> is pushed. Qt Designer uses <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> <db:link xlink:href="designer-using-a-ui-file.xml#automatic-connections">auto-connection facilities</db:link> to connect the button's clicked() signal to a slot in the Notepad class. The <db:code>uic</db:code> tool automatically generates code in the dialog's <db:code>setupUi()</db:code> function to do this, so Qt Designer only needs to declare and implement a slot with a name that follows a standard convention.</db:para>
<db:programlisting language="cpp">private slots:
    void on_quitButton_clicked();
</db:programlisting>
<db:para>The corresponding code in the source file, notepad.cpp, looks as follows:</db:para>
<db:programlisting language="cpp">void Notepad::on_quitButton_clicked()
{

}
</db:programlisting>
<db:para>The code defines the private function that is executed when <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> emits the <db:link xlink:href="qabstractbutton.xml#clicked">clicked</db:link>() signal.</db:para>
<db:para>We now complement the code to have the <db:link xlink:href="qcoreapplication.xml#quit">quit</db:link>() slot of <db:link xlink:href="qapplication.xml">QApplication</db:link> exit Notepad:</db:para>
<db:programlisting language="cpp">void Notepad::on_quitButton_clicked()
{
    QCoreApplication::quit();
}
</db:programlisting>
<db:para><db:emphasis role="bold">Learn More</db:emphasis></db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>About</db:para>
</db:th>
<db:th>
<db:para>Here</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Signals and slots</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="signalsandslots.xml">Signals &amp; Slots</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="adding-menu-items">
<db:title>Adding Menu Items</db:title>
<db:para>Often, in a main window, the same slot should be invoked by several widgets. Examples are menu items and buttons on a tool bar. To make this easier, Qt provides <db:link xlink:href="qaction.xml">QAction</db:link>, which can be given to several widgets, and be connected to a slot. For instance, both <db:link xlink:href="qmenu.xml">QMenu</db:link> and <db:link xlink:href="qtoolbar.xml">QToolBar</db:link> can create menu items and tool buttons from the same <db:link xlink:href="qaction.xml">QAction</db:link>.</db:para>
<db:para>To learn how to use actions with signals and slots, we add menu items to open and save a document and connect them to slots.</db:para>
<db:para>As before, we use Qt Designer to add the widgets to the user interface. The wizard creates an application with a <db:link xlink:href="qmenu.xml">QMenu</db:link> widget, with the text <db:emphasis role="bold">Type Here</db:emphasis> as a placeholder for menu and menu item names. Double-click the text to enter names for the <db:emphasis role="bold">File</db:emphasis> menu and <db:emphasis role="bold">Open</db:emphasis> and <db:emphasis role="bold">Save</db:emphasis> menu items. Qt Designer automatically generates the appropriate actions.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/gs3.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>To connect the actions to slots, right-click an action and select <db:emphasis role="bold">Go to slot</db:emphasis> &gt; <db:emphasis role="bold">triggered()</db:emphasis>.</db:para>
<db:para><db:link xlink:href="qaction.xml">QAction</db:link> instances are created with the text that should appear on the widgets that we add them to (in our case, menu items). If we also wanted to add the actions to a tool bar, we could have specified <db:link xlink:href="qicon.xml">icons</db:link> for them.</db:para>
<db:para>The modified code in notepad.ui now looks as follows:</db:para>
<db:programlisting language="cpp">  &lt;widget class=&quot;QMenuBar&quot; name=&quot;menuBar&quot;&gt;
   &lt;property name=&quot;geometry&quot;&gt;
    &lt;rect&gt;
     &lt;x&gt;0&lt;/x&gt;
     &lt;y&gt;0&lt;/y&gt;
     &lt;width&gt;400&lt;/width&gt;
     &lt;height&gt;22&lt;/height&gt;
    &lt;/rect&gt;
   &lt;/property&gt;
   &lt;widget class=&quot;QMenu&quot; name=&quot;menuFile&quot;&gt;
    &lt;property name=&quot;title&quot;&gt;
     &lt;string&gt;File&lt;/string&gt;
    &lt;/property&gt;
    &lt;addaction name=&quot;actionOpen&quot;/&gt;
    &lt;addaction name=&quot;actionSave&quot;/&gt;
   &lt;/widget&gt;
   &lt;addaction name=&quot;menuFile&quot;/&gt;
  &lt;/widget&gt;
  &lt;widget class=&quot;QToolBar&quot; name=&quot;mainToolBar&quot;&gt;
   &lt;attribute name=&quot;toolBarArea&quot;&gt;
    &lt;enum&gt;TopToolBarArea&lt;/enum&gt;
   &lt;/attribute&gt;
   &lt;attribute name=&quot;toolBarBreak&quot;&gt;
    &lt;bool&gt;false&lt;/bool&gt;
   &lt;/attribute&gt;
  &lt;/widget&gt;
  &lt;widget class=&quot;QStatusBar&quot; name=&quot;statusBar&quot;/&gt;
  &lt;action name=&quot;actionOpen&quot;&gt;
   &lt;property name=&quot;text&quot;&gt;
    &lt;string&gt;Open&lt;/string&gt;
   &lt;/property&gt;
  &lt;/action&gt;
  &lt;action name=&quot;actionSave&quot;&gt;
   &lt;property name=&quot;text&quot;&gt;
    &lt;string&gt;Save&lt;/string&gt;
   &lt;/property&gt;
  &lt;/action&gt;
 &lt;/widget&gt;
</db:programlisting>
<db:para>Qt Designer adds the private slots <db:code>on_actionOpen_triggered()</db:code> and <db:code>on_actionSave_triggered()</db:code> to notepad.h and the private functions <db:code>Notepad::on_actionOpen_triggered()</db:code> and <db:code>Notepad::on_actionSave_triggered()</db:code> to notepad.cpp.</db:para>
<db:para>In the following sections, we complement the code to load and save files. When a menu item is clicked, the item triggers the action, and the respective slot is invoked.</db:para>
</db:section>
<db:section xml:id="opening-files">
<db:title>Opening Files</db:title>
<db:para>In this section, we implement the functionality of the <db:code>on_actionOpen_triggered()</db:code> slot. The first step is asking the user for the name of the file to open. Qt comes with <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>, which is a dialog from which the user can select a file. The appearance of the dialog depends on the desktop platform that you run the application on. The following image shows the dialog on macOS:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/gs4.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>We complement the code generated by Qt Designer in notepad.cpp, as follows:</db:para>
<db:programlisting language="cpp">void Notepad::on_actionOpen_triggered()
{
    QString fileName = QFileDialog::getOpenFileName(this, tr(&quot;Open File&quot;), QString(),
            tr(&quot;Text Files (*.txt);;C++ Files (*.cpp *.h)&quot;));

    if (!fileName.isEmpty()) {
        QFile file(fileName);
        if (!file.open(QIODevice::ReadOnly)) {
            QMessageBox::critical(this, tr(&quot;Error&quot;), tr(&quot;Could not open file&quot;));
            return;
        }
        QTextStream in(&amp;file);
        ui-&gt;textEdit-&gt;setText(in.readAll());
        file.close();
    }
}
</db:programlisting>
<db:para>The static <db:link xlink:href="qfiledialog.xml#getOpenFileName">getOpenFileName</db:link>() function displays a modal file dialog. It returns the file path of the file selected, or an empty string if the user canceled the dialog.</db:para>
<db:para>If we have a file name, we try to open the file with <db:link xlink:href="qiodevice.xml#open">open</db:link>(), which returns true if the file could be opened. We will not go into error handling here, but you can follow the links from the learn more section. If the file could not be opened, we use <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> to display a dialog with an error message (see the <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> class description for further details).</db:para>
<db:para>Actually reading in the data is trivial using the <db:link xlink:href="qtextstream.xml">QTextStream</db:link> class, which wraps the <db:link xlink:href="qfile.xml">QFile</db:link> object. The <db:link xlink:href="qtextstream.xml#readAll">readAll</db:link>() function returns the contents of the file as a <db:link xlink:href="qstring.xml">QString</db:link>. The contents can then be displayed in the text edit. We then <db:link xlink:href="qiodevice.xml#close">close</db:link>() the file to return the file descriptor back to the operating system.</db:para>
<db:para>We now use the function <db:link xlink:href="qobject.xml#tr">tr</db:link>() around our user visible strings. This function is necessary when you want to provide your application in more than one language (for example, English and Chinese). We will not go into details here, but you can follow the <db:code>Qt Linguist</db:code> link from the learn more table.</db:para>
<db:para>To use <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>, <db:link xlink:href="qfile.xml">QFile</db:link>, <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link>, and <db:link xlink:href="qtextstream.xml">QTextStream</db:link>, add the following includes to notepad.cpp:</db:para>
<db:programlisting language="cpp">#include &lt;QFileDialog&gt;
#include &lt;QFile&gt;
#include &lt;QMessageBox&gt;
#include &lt;QTextStream&gt;
</db:programlisting>
</db:section>
<db:section xml:id="saving-files">
<db:title>Saving Files</db:title>
<db:para>Now, let us move on to the <db:code>on_actionSave_triggered()</db:code> slot, which also uses <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> to create a dialog in which the user can save a file with the specified name in the specified location.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/gs5.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>We complement the code generated by Qt Designer in notepad.cpp, as follows:</db:para>
<db:programlisting language="cpp">void Notepad::on_actionSave_triggered()
{
    QString fileName = QFileDialog::getSaveFileName(this, tr(&quot;Save File&quot;), QString(),
            tr(&quot;Text Files (*.txt);;C++ Files (*.cpp *.h)&quot;));

    if (!fileName.isEmpty()) {
        QFile file(fileName);
        if (!file.open(QIODevice::WriteOnly)) {
            // error message
        } else {
            QTextStream stream(&amp;file);
            stream &lt;&lt; ui-&gt;textEdit-&gt;toPlainText();
            stream.flush();
            file.close();
        }
    }
}
</db:programlisting>
<db:para>When we write the contents of the text edit to the file, we use the <db:link xlink:href="qtextstream.xml">QTextStream</db:link> class again. <db:link xlink:href="qtextstream.xml">QTextStream</db:link> can also write <db:link xlink:href="qstring.xml">QString</db:link>s to the file with the &lt;&lt; operator.</db:para>
<db:para><db:emphasis role="bold">Learn More</db:emphasis></db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>About</db:para>
</db:th>
<db:th>
<db:para>Here</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>MDI applications</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmdiarea.xml">QMdiArea</db:link>, <db:link xlink:href="qtwidgets-mainwindows-mdi-example.xml">MDI Example</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Files and I/O devices</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qfile.xml">QFile</db:link>, <db:link xlink:href="qiodevice.xml">QIODevice</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>tr() and internationalization</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtlinguist-index.xml">Qt Linguist Manual</db:link>, <db:link xlink:href="i18n-source-translation.xml">Writing Source Code for Translation</db:link>, <db:link xlink:href="internationalization.xml">Internationalization with Qt</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="building-and-running-notepad">
<db:title>Building and Running Notepad</db:title>
<db:para>Now that you have all the necessary files, select <db:emphasis role="bold">Build</db:emphasis> &gt; <db:emphasis role="bold">Build Project Notepad</db:emphasis> to build and run the application. Qt Creator uses <db:code>qmake</db:code> and <db:code>make</db:code> to create an executable in the directory specified in the build settings of the project and runs it.</db:para>
<db:section xml:id="building-and-running-from-the-command-line">
<db:title>Building and Running from the Command Line</db:title>
<db:para>To build the application from the command line, switch to the directory in which you have the <db:code>.cpp</db:code> file of the application and add the project file (suffixed .pro) described earlier. The following shell commands then build the application:</db:para>
<db:programlisting language="cpp">qmake
make (or nmake on Windows)
</db:programlisting>
<db:para>The commands create an executable in the project directory. The <db:code>qmake</db:code> tool reads the project file and produces a <db:code>Makefile</db:code> with instructions on how to build the application. The <db:code>make</db:code> tool (or the <db:code>nmake</db:code> tool) then reads the <db:code>Makefile</db:code> and produces the executable binary.</db:para>
</db:section>
</db:section>
</db:article>
