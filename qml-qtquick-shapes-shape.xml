<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Shape QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Renders a path.</db:para>
<db:para>This type was introduced in Qt 5.10.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Shapes 1.14</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.10</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-particles-ellipseshape.xml" xlink:role="">EllipseShape</db:link>, <db:link xlink:href="qml-qtquick-particles-lineshape.xml" xlink:role="">LineShape</db:link>, and <db:link xlink:href="qml-qtquick-particles-maskshape.xml" xlink:role="">MaskShape</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Item</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Shape is part of <db:simplelist><db:member>qtquick-paths</db:member><db:member>qtquick-views</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Renders a path either by generating geometry via QPainterPath and manual triangulation or by using a GPU vendor extension like GL_NV_path_rendering.</db:para>
<db:para>This approach is different from rendering shapes via QQuickPaintedItem or the 2D Canvas because the path never gets rasterized in software. Therefore Shape is suitable for creating shapes spreading over larger areas of the screen, avoiding the performance penalty for texture uploads or framebuffer blits. In addition, the declarative API allows manipulating, binding to, and even animating the path element properties like starting and ending position, the control points, and so on.</db:para>
<db:para>The types for specifying path elements are shared between <db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link> and Shape. However, not all Shape implementations support all path element types, while some may not make sense for <db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link>. Shape's currently supported subset is: <db:link xlink:href="qml-qtquick-pathmove.xml">PathMove</db:link>, <db:link xlink:href="qml-qtquick-pathline.xml">PathLine</db:link>, <db:link xlink:href="qml-qtquick-pathquad.xml">PathQuad</db:link>, <db:link xlink:href="qml-qtquick-pathcubic.xml">PathCubic</db:link>, <db:link xlink:href="qml-qtquick-patharc.xml">PathArc</db:link>, and <db:link xlink:href="qml-qtquick-pathsvg.xml">PathSvg</db:link>.</db:para>
<db:para>See <db:link xlink:href="qml-qtquick-path.xml">Path</db:link> for a detailed overview of the supported path elements.</db:para>
<db:programlisting language="qml">Shape {
    width: 200
    height: 150
    anchors.centerIn: parent
    ShapePath {
        strokeWidth: 4
        strokeColor: &quot;red&quot;
        fillGradient: LinearGradient {
            x1: 20; y1: 20
            x2: 180; y2: 130
            GradientStop { position: 0; color: &quot;blue&quot; }
            GradientStop { position: 0.2; color: &quot;green&quot; }
            GradientStop { position: 0.4; color: &quot;red&quot; }
            GradientStop { position: 0.6; color: &quot;yellow&quot; }
            GradientStop { position: 1; color: &quot;cyan&quot; }
        }
        strokeStyle: ShapePath.DashLine
        dashPattern: [ 1, 4 ]
        startX: 20; startY: 20
        PathLine { x: 180; y: 130 }
        PathLine { x: 20; y: 130 }
        PathLine { x: 20; y: 20 }
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/pathitem-code-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Like <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>, Shape also allows any visual or non-visual objects to be declared as children. <db:link xlink:href="qml-qtquick-shapes-shapepath.xml">ShapePath</db:link> objects are handled specially. This is useful since it allows adding visual items, like <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> or <db:link xlink:href="qml-qtquick-image.xml">Image</db:link>, and non-visual objects, like <db:link xlink:href="qml-qtqml-timer.xml">Timer</db:link> directly as children of Shape.</db:para>
<db:para>The following list summarizes the available Shape rendering approaches:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>When running with the OpenGL backend of Qt Quick, both the generic, triangulation-based and the NVIDIA-specific GL_NV_path_rendering methods are available. By default only the generic approach is used. Setting Shape.<db:link xlink:href="qml-qtquick-shapes-shape.xml#vendorExtensionsEnabled-prop">vendorExtensionsEnabled</db:link> property to true leads to using NV_path_rendering on NVIDIA systems when running directly on OpenGL, and the generic method on others. When OpenGL is not used directly by the scene graph, for example because it is using the graphics abstraction layer (QRhi), only the generic shape renderer is available.</db:para>
</db:listitem>
<db:listitem>
<db:para>The software backend is fully supported. The path is rendered via QPainter::strokePath() and QPainter::fillPath() in this case.</db:para>
</db:listitem>
<db:listitem>
<db:para>The Direct 3D 12 backend is not currently supported.</db:para>
</db:listitem>
<db:listitem>
<db:para>The OpenVG backend is not currently supported.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When using Shape, it is important to be aware of potential performance implications:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>When the application is running with the generic, triangulation-based Shape implementation, the geometry generation happens entirely on the CPU. This is potentially expensive. Changing the set of path elements, changing the properties of these elements, or changing certain properties of the Shape itself all lead to retriangulation of the affected paths on every change. Therefore, applying animation to such properties can affect performance on less powerful systems.</db:para>
</db:listitem>
<db:listitem>
<db:para>However, the data-driven, declarative nature of the Shape API often means better cacheability for the underlying CPU and GPU resources. A property change in one <db:link xlink:href="qml-qtquick-shapes-shapepath.xml">ShapePath</db:link> will only lead to reprocessing the affected <db:link xlink:href="qml-qtquick-shapes-shapepath.xml">ShapePath</db:link>, leaving other parts of the Shape unchanged. Therefore, a frequently changing property can still result in a lower overall system load than with imperative painting approaches (for example, QPainter).</db:para>
</db:listitem>
<db:listitem>
<db:para>If animating properties other than stroke and fill colors is a must, it is recommended to target systems providing GL_NV_path_rendering where the cost of property changes is smaller.</db:para>
</db:listitem>
<db:listitem>
<db:para>At the same time, attention must be paid to the number of Shape elements in the scene, in particular when using this special accelerated approach for GL_NV_path_rendering. The way such a Shape item is represented in the scene graph is different from an ordinary geometry-based item, and incurs a certain cost when it comes to OpenGL state changes.</db:para>
</db:listitem>
<db:listitem>
<db:para>As a general rule, scenes should avoid using separate Shape items when it is not absolutely necessary. Prefer using one Shape item with multiple <db:link xlink:href="qml-qtquick-shapes-shapepath.xml">ShapePath</db:link> elements over multiple Shape items.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-shapes-example.xml">Qt Quick Examples - Shapes</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-path.xml">Path</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-pathmove.xml">PathMove</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-pathline.xml">PathLine</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-pathquad.xml">PathQuad</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-pathcubic.xml">PathCubic</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-patharc.xml">PathArc</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-pathsvg.xml">PathSvg</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="asynchronous-prop">
<db:title>asynchronous : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>asynchronous</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>When <db:link xlink:href="qml-qtquick-shapes-shape.xml#rendererType-prop">rendererType</db:link> is Shape.GeometryRenderer, the input path is triangulated on the CPU during the polishing phase of the Shape. This is potentially expensive. To offload this work to separate worker threads, set this property to true.</db:para>
<db:para>When enabled, making a Shape visible will not wait for the content to become available. Instead, the gui/main thread is not blocked and the results of the path rendering are shown only when all the asynchronous work has been finished.</db:para>
<db:para>The default value is false.</db:para>
</db:section>
<db:section xml:id="containsMode-prop">
<db:title>[since QtQuick.Shapes 1.11] containsMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>containsMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property determines the definition of <db:link xlink:href="">contains()</db:link> for the Shape. It is useful in case you add <db:link xlink:href="qtquickhandlers-index.xml">Qt Quick Input Handlers</db:link> and you want to react only when the mouse or touchpoint is fully inside the Shape.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Shape.BoundingRectContains</db:para>
</db:td>
<db:td>
<db:para>The default implementation of <db:link xlink:href="">QQuickItem::contains()</db:link> checks only whether the given point is inside the rectangular bounding box. This is the most efficient implementation, which is why it's the default.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Shape.FillContains</db:para>
</db:td>
<db:td>
<db:para>Check whether the interior (the part that would be filled if you are rendering it with fill) of any <db:link xlink:href="qml-qtquick-shapes-shapepath.xml">ShapePath</db:link> that makes up this Shape contains the given point. The more complex and numerous ShapePaths you add, the less efficient this is to check, which can potentially slow down event delivery in your application. So it should be used with care.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>One way to speed up the FillContains check is to generate an approximate outline with as few points as possible, place that in a transparent Shape on top, and add your Pointer Handlers to that, so that the containment check is cheaper during event delivery.</db:para>
<db:para>This property was introduced in QtQuick.Shapes 1.11.</db:para>
</db:section>
<db:section xml:id="data-prop">
<db:title>data : list&lt;Object&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;Object&gt;</db:type>
<db:varname>data</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the <db:link xlink:href="qml-qtquick-shapes-shapepath.xml">ShapePath</db:link> objects that define the contents of the Shape. It can also contain any other type of objects, since Shape, like Item, allows adding any visual or non-visual objects as children.</db:para>
</db:section>
<db:section xml:id="rendererType-prop">
<db:title>rendererType : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>rendererType</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property determines which path rendering backend is active.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Shape.UnknownRenderer</db:para>
</db:td>
<db:td>
<db:para>The renderer is unknown.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Shape.GeometryRenderer</db:para>
</db:td>
<db:td>
<db:para>The generic, driver independent solution for OpenGL. Uses the same CPU-based triangulation approach as QPainter's OpenGL 2 paint engine. This is the default on non-NVIDIA hardware when the default, OpenGL Qt Quick scenegraph backend is in use.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Shape.NvprRenderer</db:para>
</db:td>
<db:td>
<db:para>Path items are rendered by performing OpenGL calls using the GL_NV_path_rendering extension. This is the default on NVIDIA hardware when the default, OpenGL Qt Quick scenegraph backend is in use.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Shape.SoftwareRenderer</db:para>
</db:td>
<db:td>
<db:para>Pure QPainter drawing using the raster paint engine. This is the default, and only, option when the Qt Quick scenegraph is running with the software backend.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="status-prop">
<db:title>status : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>status</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property determines the status of the Shape and is relevant when Shape.asynchronous is set to true.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Shape.Null</db:para>
</db:td>
<db:td>
<db:para>Not yet initialized.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Shape.Ready</db:para>
</db:td>
<db:td>
<db:para>The Shape has finished processing.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Shape.Processing</db:para>
</db:td>
<db:td>
<db:para>The path is being processed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="vendorExtensionsEnabled-prop">
<db:title>vendorExtensionsEnabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>vendorExtensionsEnabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property controls the usage of non-standard OpenGL extensions like GL_NV_path_rendering.</db:para>
<db:para>The default value is false.</db:para>
<db:para>As of Qt 5.12 Shape.NvprRenderer is disabled by default and a uniform behavior, based on triangulating the path and generating QSGGeometryNode instances, is used regardless of the graphics card and drivers. To enable using vendor-specific path rendering approaches set the value to true. Depending on the platform and content, this can lead to improved performance. Setting the value to true is safe in any case since rendering falls back to the default method when the vendor-specific approach, such as GL_NV_path_rendering, is not supported at run time.</db:para>
</db:section>
</db:section>
</db:article>
