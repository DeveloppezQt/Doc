<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Model-View Client</db:title>
<db:productname>QtRemoteObjects</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Remote Objects Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Remote Objects Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This is the client-side application that accompanies the <db:link xlink:href="qtremoteobjects-modelviewserver-example.xml">Model-View Server</db:link>.</db:para>
<db:para>This example showcases how to make a very simple client program which displays the content and changes made on a server.</db:para>
<db:programlisting language="cpp">    QRemoteObjectNode node(QUrl(QStringLiteral(&quot;local:registry&quot;)));
    node.setHeartbeatInterval(1000);
</db:programlisting>
<db:para>We start by creating a <db:link xlink:href="qremoteobjectnode.xml">QRemoteObjectNode</db:link> and connecting it to a registry found on the local machine. We also set a <db:link xlink:href="qremoteobjectnode.xml#heartbeatInterval-prop">heartbeat interval</db:link>. The heartbeat is useful to detect if the connection to the <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> has been disrupted. In this case, since all the traffic is local, it would detect when the server has been closed.</db:para>
<db:programlisting language="cpp">    QScopedPointer&amp;lt;QAbstractItemModelReplica&amp;gt; model(node.acquireModel(QStringLiteral(&quot;RemoteModel&quot;)));
</db:programlisting>
<db:para>We then <db:link xlink:href="qremoteobjectnode.xml#acquireModel">acquire</db:link> the model which contains all of our data. In this case, we're looking to acquire a model named <db:code>RemoteModel</db:code> from the remote object network we are connected to.</db:para>
<db:programlisting language="cpp">    QTreeView view;
    view.setWindowTitle(QStringLiteral(&quot;RemoteView&quot;));
    view.resize(640,480);
    view.setModel(model.data());
    view.show();
</db:programlisting>
<db:para>And finally, we display the model in a very basic application.</db:para>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtremoteobjects.git/tree/examples/remoteobjects/modelviewclient?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
