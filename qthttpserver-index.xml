<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt HTTP Server</db:title>
<db:productname>QtHttpServer</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Lightweight HTTP Server Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a lightweight server implementing the HTTP protocol.</db:para>
<db:para>This documentation was introduced in Qt 6.4.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt HTTP Server supports building HTTP server functionality into an application. Common use cases are exposing the application's functionality through REST APIs, or making devices in a trusted environment configurable also via HTTP. The limitations are described in <db:link xlink:href="qthttpserver-index.xml#limitations-security">Limitations &amp; Security</db:link>.</db:para>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>Qt HTTP Server provides building blocks for embedding a lightweight HTTP server based on <db:link xlink:href="https://datatracker.ietf.org/doc/html/rfc2616">RFC 2616</db:link> in an application. There are classes for the messages sent and received, and for the various parts of an HTTP server.</db:para>
<db:para>An HTTP server can be created by subclassing the <db:link xlink:href="qabstracthttpserver.xml">QAbstractHttpServer</db:link> class and overriding the <db:link xlink:href="qabstracthttpserver.xml#handleRequest">handleRequest</db:link>() function. The <db:link xlink:href="qabstracthttpserver.xml">QAbstractHttpServer</db:link> class provides functions for listening to incoming ports or binding to an existing <db:link xlink:href="qtcpserver.xml">QTcpServer</db:link>. Dispatching to callables based on incoming URLs can be simplified by using the <db:link xlink:href="qhttpserverrouter.xml">QHttpServerRouter</db:link> class.</db:para>
<db:para>This can be simplified even further by using the <db:link xlink:href="qhttpserver.xml">QHttpServer</db:link> class. The <db:link xlink:href="qhttpserver.xml">QHttpServer</db:link> class is a subclass of <db:link xlink:href="qabstracthttpserver.xml">QAbstractHttpServer</db:link> and defines an overloaded route function to bind callables to different incoming URLs, and an <db:link xlink:href="qhttpserver.xml#afterRequest">afterRequest</db:link>() function to process the response further.</db:para>
<db:para>Runtime logging can be configured as described <db:link xlink:href="qthttpserver-logging.xml">here</db:link>.</db:para>
</db:section>
<db:section xml:id="limitations-security">
<db:title>Limitations &amp; Security</db:title>
<db:para>Qt HTTP Server does not have many of the more advanced features and optimizations that general-purpose HTTP servers have. It also has not seen the same scrutiny regarding various attack vectors over the network. Use Qt HTTP Server, therefore, only for local connections or in a trusted network, and do not expose the ports to the internet.</db:para>
<db:para>You can add HTTPS support as a basic security measure, though. If Qt is compiled with support for TLS, you can bind <db:link xlink:href="qabstracthttpserver.xml">QAbstractHttpServer</db:link> and its subclasses to a <db:link xlink:href="qsslserver.xml">QSslServer</db:link> object, providing Transport Layer Security handling. This can also be achieved by calling the <db:link xlink:href="qabstracthttpserver.xml#sslSetup">QAbstractHttpServer::sslSetup</db:link>() function before calling <db:link xlink:href="qabstracthttpserver.xml#listen">listen</db:link>().</db:para>
</db:section>
<db:section xml:id="using-the-module">
<db:title>Using the Module</db:title>
<db:para>Using a Qt module requires linking against the module library, either directly or through other dependencies. Several build tools have dedicated support for this, including CMake and qmake.</db:para>
<db:section xml:id="building-with-cmake">
<db:title>Building with CMake</db:title>
<db:para>Use the <db:code>find_package()</db:code> command to locate the needed module components in the Qt6 package:</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 REQUIRED COMPONENTS HttpServer)
target_link_libraries(mytarget PRIVATE Qt6::HttpServer)
</db:programlisting>
<db:para>See also the <db:link xlink:href="cmake-manual.xml">Build with CMake</db:link> overview.</db:para>
</db:section>
<db:section xml:id="building-with-qmake">
<db:title>Building with qmake</db:title>
<db:para>To configure the module for building with qmake, add the module as a value of the QT variable in the project's .pro file:</db:para>
<db:programlisting language="cpp" role="bad">QT += httpserver
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="licenses">
<db:title>Licenses</db:title>
<db:para>Qt HTTP Server is available under commercial licenses from <db:link xlink:href="http://www.qt.io/about-us/">The Qt Company</db:link>. In addition, it is available under the <db:link xlink:href="http://www.gnu.org/licenses/gpl-3.0.html">GNU General Public License, version 3</db:link>. See <db:link xlink:href="licensing.xml">Qt Licensing</db:link> for further details.</db:para>
</db:section>
<db:section xml:id="reference">
<db:title>Reference</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qthttpserver-logging.xml">Qt HTTP Server Logging</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qthttpserver-module.xml">C++ Classes</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:para>The module provides the following <db:link xlink:href="qthttpserver-examples.xml">Examples</db:link> as a guide to using the API.</db:para>
</db:section>
</db:article>
