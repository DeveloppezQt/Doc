<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt SCXML Sudoku Example</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Scxml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Presents the use of SCXML in a sudoku game.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtScxml module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;mainwindow.h&quot;

#include &amp;lt;QComboBox&amp;gt;
#include &amp;lt;QDir&amp;gt;
#include &amp;lt;QFile&amp;gt;
#include &amp;lt;QGridLayout&amp;gt;
#include &amp;lt;QLabel&amp;gt;
#include &amp;lt;QScxmlStateMachine&amp;gt;
#include &amp;lt;QStringListModel&amp;gt;
#include &amp;lt;QTextStream&amp;gt;
#include &amp;lt;QToolButton&amp;gt;

static int Size = 9;

QT_USE_NAMESPACE

static QVariantList emptyRow()
{
    QVariantList row;
    for (int i = 0; i &amp;lt; Size; i++)
        row.append(QVariant(0));
    return row;
}

static QVariantMap readSudoku(const QString &amp;amp;fileName)
{
    QFile input(fileName);
    input.open(QIODevice::ReadOnly | QIODevice::Text);
    QTextStream str(&amp;amp;input);
    const QString data = str.readAll();

    QVariantList initRowsVariant;
    const QStringList rows = data.split(QLatin1Char('\n'));
    for (int i = 0; i &amp;lt; Size; i++) {
        if (i &amp;lt; rows.count()) {
            QVariantList initRowVariant;
            const QStringList row = rows.at(i).split(QLatin1Char(','));
            for (int j = 0; j &amp;lt; Size; j++) {
                const int val = j &amp;lt; row.count()
                        ? row.at(j).toInt() % (Size + 1) : 0;
                initRowVariant.append(val);
            }
            initRowsVariant.append(QVariant(initRowVariant));
        } else {
            initRowsVariant.append(QVariant(emptyRow()));
        }
    }

    QVariantMap dataVariant;
    dataVariant.insert(QStringLiteral(&quot;initState&quot;), initRowsVariant);

    return dataVariant;
}

MainWindow::MainWindow(QScxmlStateMachine *machine, QWidget *parent) :
    QWidget(parent),
    m_machine(machine)
{
    const QVector&amp;lt;QToolButton *&amp;gt; initVector(Size, nullptr);
    m_buttons = QVector&amp;lt;QVector&amp;lt;QToolButton *&amp;gt; &amp;gt;(Size, initVector);

    QGridLayout *layout = new QGridLayout(this);

    for (int i = 0; i &amp;lt; Size; i++) {
        for (int j = 0; j &amp;lt; Size; j++) {
            QToolButton *button = new QToolButton(this);
            button-&amp;gt;setSizePolicy(QSizePolicy::Expanding,
                                  QSizePolicy::Expanding);
            layout-&amp;gt;addWidget(button, i + i / 3, j + j / 3);
            m_buttons[i][j] = button;
            connect(button, &amp;amp;QToolButton::clicked, [this, i, j] () {
                QVariantMap data;
                data.insert(QStringLiteral(&quot;x&quot;), i);
                data.insert(QStringLiteral(&quot;y&quot;), j);
                m_machine-&amp;gt;submitEvent(&quot;tap&quot;, data);
            });
        }
    }

    for (int i = 0; i &amp;lt; 3; i++) {
        for (int j = 0; j &amp;lt; 2; j++) {
            QFrame *hFrame = new QFrame(this);
            hFrame-&amp;gt;setFrameShape(QFrame::HLine);
            layout-&amp;gt;addWidget(hFrame, 4 * j + 3, 4 * i, 1, 3);

            QFrame *vFrame = new QFrame(this);
            vFrame-&amp;gt;setFrameShape(QFrame::VLine);
            layout-&amp;gt;addWidget(vFrame, 4 * i, 4 * j + 3, 3, 1);
        }
    }

    m_startButton = new QToolButton(this);
    m_startButton-&amp;gt;setSizePolicy(QSizePolicy::Expanding,
                                 QSizePolicy::Expanding);
    m_startButton-&amp;gt;setText(tr(&quot;Start&quot;));
    layout-&amp;gt;addWidget(m_startButton, Size + 3, 0, 1, 3);

    connect(m_startButton, &amp;amp;QAbstractButton::clicked,
            [this] {
        if (m_machine-&amp;gt;isActive(&quot;playing&quot;))
            m_machine-&amp;gt;submitEvent(&quot;stop&quot;);
        else
            m_machine-&amp;gt;submitEvent(&quot;start&quot;);
    });

    m_label = new QLabel(tr(&quot;unsolved&quot;));
    m_label-&amp;gt;setAlignment(Qt::AlignCenter);
    layout-&amp;gt;addWidget(m_label, Size + 3, 4, 1, 3);

    m_undoButton = new QToolButton(this);
    m_undoButton-&amp;gt;setSizePolicy(QSizePolicy::Expanding,
                                QSizePolicy::Expanding);
    m_undoButton-&amp;gt;setText(tr(&quot;Undo&quot;));
    m_undoButton-&amp;gt;setEnabled(false);
    layout-&amp;gt;addWidget(m_undoButton, Size + 3, 8, 1, 3);

    connect(m_undoButton, &amp;amp;QAbstractButton::clicked,
            [this] {
        m_machine-&amp;gt;submitEvent(&quot;undo&quot;);
    });

    m_chooser = new QComboBox(this);
    layout-&amp;gt;addWidget(m_chooser, Size + 4, 0, 1, 11);

    QDir dataDir(QLatin1String(&quot;:/data&quot;));
    QFileInfoList sudokuFiles = dataDir.entryInfoList(QStringList()
                                                      &amp;lt;&amp;lt; &quot;*.data&quot;);
    for (const QFileInfo &amp;amp;sudokuFile : sudokuFiles) {
        m_chooser-&amp;gt;addItem(sudokuFile.completeBaseName(),
                           sudokuFile.absoluteFilePath());
    }

    connect(m_chooser, QOverload&amp;lt;int&amp;gt;::of(&amp;amp;QComboBox::currentIndexChanged),
            [this] (int index) {
        const QString sudokuFile = m_chooser-&amp;gt;itemData(index).toString();
        const QVariantMap initValues = readSudoku(sudokuFile);
        m_machine-&amp;gt;submitEvent(&quot;setup&quot;, initValues);
    });

    const QVariantMap initValues = readSudoku(
                m_chooser-&amp;gt;itemData(0).toString());
    m_machine-&amp;gt;setInitialValues(initValues);

    m_machine-&amp;gt;connectToState(&quot;playing&quot;, [this] (bool playing) {
        if (playing) {
            m_startButton-&amp;gt;setText(tr(&quot;Stop&quot;));
            m_undoButton-&amp;gt;setEnabled(true);
            m_chooser-&amp;gt;setEnabled(false);
        } else {
            m_startButton-&amp;gt;setText(tr(&quot;Start&quot;));
            m_undoButton-&amp;gt;setEnabled(false);
            m_chooser-&amp;gt;setEnabled(true);
        }
    });

    m_machine-&amp;gt;connectToState(&quot;solved&quot;, [this] (bool solved) {
        if (solved)
            m_label-&amp;gt;setText(tr(&quot;SOLVED !!!&quot;));
        else
            m_label-&amp;gt;setText(tr(&quot;unsolved&quot;));
    });

    m_machine-&amp;gt;connectToEvent(&quot;updateGUI&quot;, [this] (const QScxmlEvent &amp;amp;event) {
        const QVariant data = event.data();

        const QVariantList currentRows = data.toMap().value(
                    &quot;currentState&quot;).toList();
        for (int i = 0; i &amp;lt; currentRows.count(); i++) {
            const QVariantList row = currentRows.at(i).toList();
            for (int j = 0; j &amp;lt; row.count(); j++) {
                const int value = row.at(j).toInt();
                const QString text = value ? QString::number(value) : QString();
                m_buttons[i][j]-&amp;gt;setText(text);
            }
        }

        const bool active = m_machine-&amp;gt;isActive(&quot;playing&quot;);

        const QVariantList initRows = data.toMap().value(&quot;initState&quot;).toList();
        for (int i = 0; i &amp;lt; initRows.count(); i++) {
            const QVariantList row = initRows.at(i).toList();
            for (int j = 0; j &amp;lt; row.count(); j++) {
                const int value = row.at(j).toInt();
                // enable only zeroes from initState
                const bool enabled = !value &amp;amp;&amp;amp; active;
                m_buttons[i][j]-&amp;gt;setEnabled(enabled);
            }
        }
    });

    setLayout(layout);
}

MainWindow::~MainWindow()
{
}

</db:programlisting>
</db:article>
