<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Examples - Item Variable Refresh Rate</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A Qt Quick example shows how to setup variable refresh rate for specific parts of the UI.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-itemvariablerefreshrate-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example demonstrates using the live property of a <db:link xlink:href="qml-qtquick-item.xml#item-layers">Item Layers</db:link> to get a variable and independent refresh rate for Quick items. This can provide a significant boost to performance if specific parts of a UI does not need to be re-rendered every frame, but still require internal updates. Drawing parts that are static most of the time or animations that does not have to run smoothly at all times is a waste of resources. This property gives the user control over when the item is drawn.</db:para>
<db:note>
<db:para>Using <db:link xlink:href="qml-qtquick-item.xml#item-layers">Item Layers</db:link> may involve a performance penalty, depending on the size of the layered item subtree, due to using separate render targets (textures), which are then blended together in the main render pass. Application designers should always evaluate the impact to ensure that the benefits of using layers outweigh the potential disadvantages.</db:para>
</db:note>
<db:para>The example uses <db:link xlink:href="qml-qtquick-frameanimation.xml">FrameAnimation</db:link> to control how often the item is rendered. Useful when you only want to e.g. every second frame. Using something like a timer or other mechanics to toggle the flag is also valid.</db:para>
<db:programlisting language="qml">FrameAnimation {
  id: frameAnimation
  property real fps: smoothFrameTime &gt; 0 ? (1.0 / smoothFrameTime) : 0
  running: true
}
</db:programlisting>
<db:para>In the above snippet, the fps property is only there for visual demonstration purposes.</db:para>
<db:para>The item requires layer.enabled to be true, and then the item will be rendered depending on the state of layer.live as shown in the below snippet.</db:para>
<db:programlisting language="qml">Item {
    id: qt_logo
    width: 230
    height: 230
    anchors.fill: parent
    anchors.topMargin: 125
    layer.enabled: true
    layer.live: slider.value &gt; 0 &amp;&amp; frameAnimation.currentFrame % slider.value == 0
</db:programlisting>
<db:para>Using modulo operator and a slider to set the value, we can dynamically change how often the Qt logo is rendered.</db:para>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/itemvariablerefreshrate?h=6.9">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
