<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QJSValue Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> class acts as a container for Qt/JavaScript data types.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QJSValue</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QJSValue is part of <db:simplelist><db:member><db:link xlink:href="qtjavascript.xml">Scripting Classes and Overviews</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qjsvalue.xml">QJSValue</db:link> supports the types defined in the <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link> standard: The primitive types, which are Undefined, Null, Boolean, Number, and String; and the Object type. Additionally, built-in support is provided for Qt/C++ types such as <db:link xlink:href="qvariant.xml">QVariant</db:link> and <db:link xlink:href="qobject.xml">QObject</db:link>.</db:para>
<db:para>For the object-based types (including Date and RegExp), use the newT() functions in <db:link xlink:href="qjsengine.xml">QJSEngine</db:link> (e.g. <db:link xlink:href="qjsengine.xml#newObject">QJSEngine::newObject</db:link>()) to create a <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> of the desired type. For the primitive types, use one of the <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> constructor overloads.</db:para>
<db:para>The methods named isT() (e.g. <db:link xlink:href="qjsvalue.xml#isBool">isBool</db:link>(), <db:link xlink:href="qjsvalue.xml#isUndefined">isUndefined</db:link>()) can be used to test if a value is of a certain type. The methods named toT() (e.g. <db:link xlink:href="qjsvalue.xml#toBool">toBool</db:link>(), <db:link xlink:href="qjsvalue.xml#toString">toString</db:link>()) can be used to convert a <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> to another type. You can also use the generic QJSValue_cast() function.</db:para>
<db:para>Object values have zero or more properties which are themselves QJSValues. Use <db:link xlink:href="qjsvalue.xml#setProperty">setProperty</db:link>() to set a property of an object, and call <db:link xlink:href="qjsvalue.xml#property">property</db:link>() to retrieve the value of a property.</db:para>
<db:programlisting language="cpp">QJSEngine myEngine;
QJSValue myObject = myEngine.newObject();
QJSValue myOtherObject = myEngine.newObject();
myObject.setProperty(&quot;myChild&quot;, myOtherObject);
myObject.setProperty(&quot;name&quot;, &quot;John Doe&quot;);
</db:programlisting>
<db:para>If you want to iterate over the properties of a script object, use the <db:link xlink:href="qjsvalueiterator.xml">QJSValueIterator</db:link> class.</db:para>
<db:para>Object values have an internal <db:code>prototype</db:code> property, which can be accessed with <db:link xlink:href="qjsvalue.xml#prototype">prototype</db:link>() and <db:link xlink:href="qjsvalue.xml#setPrototype">setPrototype</db:link>().</db:para>
<db:para>Function objects (objects for which <db:link xlink:href="qjsvalue.xml#isCallable">isCallable</db:link>()) returns true) can be invoked by calling <db:link xlink:href="qjsvalue.xml#call">call</db:link>(). Constructor functions can be used to construct new objects by calling <db:link xlink:href="qjsvalue.xml#callAsConstructor">callAsConstructor</db:link>().</db:para>
<db:para>Use <db:link xlink:href="qjsvalue.xml#equals">equals</db:link>() or <db:link xlink:href="qjsvalue.xml#strictlyEquals">strictlyEquals</db:link>() to compare a <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> to another.</db:para>
<db:para>Note that a <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> for which <db:link xlink:href="qjsvalue.xml#isObject">isObject</db:link>() is true only carries a reference to an actual object; copying the <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> will only copy the object reference, not the object itself. If you want to clone an object (i.e. copy an object's properties to another object), you can do so with the help of a <db:code>for-in</db:code> statement in script code, or <db:link xlink:href="qjsvalueiterator.xml">QJSValueIterator</db:link> in C++.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsengine.xml">QJSEngine</db:link></db:member>
<db:member><db:link xlink:href="qjsvalueiterator.xml">QJSValueIterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="SpecialValue-enum">
<db:title>enum QJSValue::SpecialValue</db:title>
<db:para>This enum is used to specify a single-valued type.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qjsvalue.xml">QJSValue</db:link></db:emphasis>::UndefinedValue</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An undefined value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qjsvalue.xml">QJSValue</db:link></db:emphasis>::NullValue</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A null value.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QJSValue-1">
<db:title>QJSValue::QJSValue(QJSValue::SpecialValue <db:emphasis>value</db:emphasis> = UndefinedValue)</db:title>
<db:para>Constructs a new <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> with a special <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="QJSValue-2">
<db:title>QJSValue::QJSValue(bool <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> with a boolean <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="QJSValue-4">
<db:title>QJSValue::QJSValue(const QLatin1String &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> with a string <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="QJSValue-5">
<db:title>QJSValue::QJSValue(const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> with a string <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="QJSValue-6">
<db:title>QJSValue::QJSValue(const char *<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> with a string <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="QJSValue-7">
<db:title>QJSValue::QJSValue(double <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> with a number <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="QJSValue-8">
<db:title>QJSValue::QJSValue(int <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> with a number <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="QJSValue-9">
<db:title>QJSValue::QJSValue(uint <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> with a number <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="QJSValue-3">
<db:title>QJSValue::QJSValue(const QJSValue &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> that is a copy of <db:code role="parameter">other</db:code>.</db:para>
<db:para>Note that if <db:code role="parameter">other</db:code> is an object (i.e., <db:link xlink:href="qjsvalue.xml#isObject">isObject</db:link>() would return true), then only a reference to the underlying object is copied into the new script value (i.e., the object itself is not copied).</db:para>
</db:section>
<db:section xml:id="QJSValue">
<db:title>[default] QJSValue::QJSValue(QJSValue &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move constructor. Moves from <db:code role="parameter">other</db:code> into this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> object.</db:para>
</db:section>
<db:section xml:id="dtor.QJSValue">
<db:title>[noexcept] QJSValue::~QJSValue()</db:title>
<db:para>Destroys this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>.</db:para>
</db:section>
<db:section xml:id="call">
<db:title>QJSValue QJSValue::call(const QJSValueList &amp;<db:emphasis>args</db:emphasis> = QJSValueList())</db:title>
<db:para>Calls this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> as a function, passing <db:code role="parameter">args</db:code> as arguments to the function, and using the globalObject() as the &quot;this&quot;-object. Returns the value returned from the function.</db:para>
<db:para>If this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is not callable, call() does nothing and returns an undefined <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>.</db:para>
<db:para>Calling call() can cause an exception to occur in the script engine; in that case, call() returns the value that was thrown (typically an <db:code>Error</db:code> object). You can call <db:link xlink:href="qjsvalue.xml#isError">isError</db:link>() on the return value to determine whether an exception occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#isCallable">isCallable</db:link>()</db:member>
<db:member><db:link xlink:href="qjsvalue.xml#callWithInstance">callWithInstance</db:link>()</db:member>
<db:member><db:link xlink:href="qjsvalue.xml#callAsConstructor">callAsConstructor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="callAsConstructor">
<db:title>QJSValue QJSValue::callAsConstructor(const QJSValueList &amp;<db:emphasis>args</db:emphasis> = QJSValueList())</db:title>
<db:para>Creates a new <db:code>Object</db:code> and calls this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> as a constructor, using the created object as the `this' object and passing <db:code role="parameter">args</db:code> as arguments. If the return value from the constructor call is an object, then that object is returned; otherwise the default constructed object is returned.</db:para>
<db:para>If this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is not a function, callAsConstructor() does nothing and returns an undefined <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>.</db:para>
<db:para>Calling this function can cause an exception to occur in the script engine; in that case, the value that was thrown (typically an <db:code>Error</db:code> object) is returned. You can call <db:link xlink:href="qjsvalue.xml#isError">isError</db:link>() on the return value to determine whether an exception occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#call">call</db:link>()</db:member>
<db:member><db:link xlink:href="qjsengine.xml#newObject">QJSEngine::newObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="callWithInstance">
<db:title>QJSValue QJSValue::callWithInstance(const QJSValue &amp;<db:emphasis>instance</db:emphasis>, const QJSValueList &amp;<db:emphasis>args</db:emphasis> = QJSValueList())</db:title>
<db:para>Calls this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> as a function, using <db:code role="parameter">instance</db:code> as the `this' object in the function call, and passing <db:code role="parameter">args</db:code> as arguments to the function. Returns the value returned from the function.</db:para>
<db:para>If this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is not a function, <db:link xlink:href="qjsvalue.xml#call">call</db:link>() does nothing and returns an undefined <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>.</db:para>
<db:para>Note that if <db:code role="parameter">instance</db:code> is not an object, the global object (see <db:link xlink:href="qjsengine.xml#globalObject">QJSEngine::globalObject</db:link>()) will be used as the `this' object.</db:para>
<db:para>Calling <db:link xlink:href="qjsvalue.xml#call">call</db:link>() can cause an exception to occur in the script engine; in that case, <db:link xlink:href="qjsvalue.xml#call">call</db:link>() returns the value that was thrown (typically an <db:code>Error</db:code> object). You can call <db:link xlink:href="qjsvalue.xml#isError">isError</db:link>() on the return value to determine whether an exception occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#call">call</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deleteProperty">
<db:title>bool QJSValue::deleteProperty(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Attempts to delete this object's property of the given <db:code role="parameter">name</db:code>. Returns true if the property was deleted, otherwise returns false.</db:para>
<db:para>The behavior of this function is consistent with the JavaScript delete operator. In particular:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Non-configurable properties cannot be deleted.</db:para>
</db:listitem>
<db:listitem>
<db:para>This function will return true even if this object doesn't have a property of the given <db:code role="parameter">name</db:code> (i.e., non-existent properties are &quot;trivially deletable&quot;).</db:para>
</db:listitem>
<db:listitem>
<db:para>If this object doesn't have an own property of the given <db:code role="parameter">name</db:code>, but an object in the <db:link xlink:href="qjsvalue.xml#prototype">prototype</db:link>() chain does, the prototype object's property is not deleted, and this function returns true.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#setProperty">setProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qjsvalue.xml#hasOwnProperty">hasOwnProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="equals">
<db:title>bool QJSValue::equals(const QJSValue &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is equal to <db:code role="parameter">other</db:code>, otherwise returns false. The comparison follows the behavior described in <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link> section 11.9.3, &quot;The Abstract Equality Comparison Algorithm&quot;.</db:para>
<db:para>This function can return true even if the type of this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is different from the type of the <db:code role="parameter">other</db:code> value; i.e. the comparison is not strict. For example, comparing the number 9 to the string &quot;9&quot; returns true; comparing an undefined value to a null value returns true; comparing a <db:code>Number</db:code> object whose primitive value is 6 to a <db:code>String</db:code> object whose primitive value is &quot;6&quot; returns true; and comparing the number 1 to the boolean value <db:code>true</db:code> returns true. If you want to perform a comparison without such implicit value conversion, use <db:link xlink:href="qjsvalue.xml#strictlyEquals">strictlyEquals</db:link>().</db:para>
<db:para>Note that if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> or the <db:code role="parameter">other</db:code> value are objects, calling this function has side effects on the script engine, since the engine will call the object's valueOf() function (and possibly <db:link xlink:href="qjsvalue.xml#toString">toString</db:link>()) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#strictlyEquals">strictlyEquals</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasOwnProperty">
<db:title>bool QJSValue::hasOwnProperty(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns true if this object has an own (not prototype-inherited) property of the given <db:code role="parameter">name</db:code>, otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#property">property</db:link>()</db:member>
<db:member><db:link xlink:href="qjsvalue.xml#hasProperty">hasProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasProperty">
<db:title>bool QJSValue::hasProperty(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns true if this object has a property of the given <db:code role="parameter">name</db:code>, otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#property">property</db:link>()</db:member>
<db:member><db:link xlink:href="qjsvalue.xml#hasOwnProperty">hasOwnProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isArray">
<db:title>bool QJSValue::isArray() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is an object of the Array class; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsengine.xml#newArray">QJSEngine::newArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isBool">
<db:title>bool QJSValue::isBool() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is of the primitive type Boolean; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#toBool">toBool</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isCallable">
<db:title>bool QJSValue::isCallable() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> can be called a function, otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#call">call</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isDate">
<db:title>bool QJSValue::isDate() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is an object of the Date class; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isError">
<db:title>bool QJSValue::isError() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is an object of the Error class; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsengine.xml#script-exceptions">QJSEngine - Script Exceptions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QJSValue::isNull() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is of the primitive type Null; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isNumber">
<db:title>bool QJSValue::isNumber() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is of the primitive type Number; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#toNumber">toNumber</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isObject">
<db:title>bool QJSValue::isObject() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is of the Object type; otherwise returns false.</db:para>
<db:para>Note that function values, variant values, and <db:link xlink:href="qobject.xml">QObject</db:link> values are objects, so this function returns true for such values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsengine.xml#newObject">QJSEngine::newObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isQObject">
<db:title>bool QJSValue::isQObject() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is a <db:link xlink:href="qobject.xml">QObject</db:link>; otherwise returns false.</db:para>
<db:para>Note: This function returns true even if the <db:link xlink:href="qobject.xml">QObject</db:link> that this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> wraps has been deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#toQObject">toQObject</db:link>()</db:member>
<db:member><db:link xlink:href="qjsengine.xml#newQObject">QJSEngine::newQObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isRegExp">
<db:title>bool QJSValue::isRegExp() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is an object of the RegExp class; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isString">
<db:title>bool QJSValue::isString() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is of the primitive type String; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#toString">toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isUndefined">
<db:title>bool QJSValue::isUndefined() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is of the primitive type Undefined; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isVariant">
<db:title>bool QJSValue::isVariant() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is a variant value; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#toVariant">toVariant</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property">
<db:title>QJSValue QJSValue::property(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns the value of this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>'s property with the given <db:code role="parameter">name</db:code>. If no such property exists, an undefined <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is returned.</db:para>
<db:para>If the property is implemented using a getter function (i.e. has the PropertyGetter flag set), calling property() has side-effects on the script engine, since the getter function will be called (possibly resulting in an uncaught script exception). If an exception occurred, property() returns the value that was thrown (typically an <db:code>Error</db:code> object).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#setProperty">setProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qjsvalue.xml#hasProperty">hasProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qjsvalueiterator.xml">QJSValueIterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-1">
<db:title>QJSValue QJSValue::property(quint32 <db:emphasis>arrayIndex</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the property at the given <db:code role="parameter">arrayIndex</db:code>.</db:para>
<db:para>This function is provided for convenience and performance when working with array objects.</db:para>
<db:para>If this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is not an Array object, this function behaves as if <db:link xlink:href="qjsvalue.xml#property">property</db:link>() was called with the string representation of <db:code role="parameter">arrayIndex</db:code>.</db:para>
</db:section>
<db:section xml:id="prototype">
<db:title>QJSValue QJSValue::prototype() const</db:title>
<db:para>If this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is an object, returns the internal prototype (<db:code>__proto__</db:code> property) of this object; otherwise returns an undefined <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#setPrototype">setPrototype</db:link>()</db:member>
<db:member><db:link xlink:href="qjsvalue.xml#isObject">isObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProperty">
<db:title>void QJSValue::setProperty(const QString &amp;<db:emphasis>name</db:emphasis>, const QJSValue &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the value of this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>'s property with the given <db:code role="parameter">name</db:code> to the given <db:code role="parameter">value</db:code>.</db:para>
<db:para>If this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is not an object, this function does nothing.</db:para>
<db:para>If this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> does not already have a property with name <db:code role="parameter">name</db:code>, a new property is created.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#property">property</db:link>()</db:member>
<db:member><db:link xlink:href="qjsvalue.xml#deleteProperty">deleteProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProperty-1">
<db:title>void QJSValue::setProperty(quint32 <db:emphasis>arrayIndex</db:emphasis>, const QJSValue &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the property at the given <db:code role="parameter">arrayIndex</db:code> to the given <db:code role="parameter">value</db:code>.</db:para>
<db:para>This function is provided for convenience and performance when working with array objects.</db:para>
<db:para>If this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is not an Array object, this function behaves as if <db:link xlink:href="qjsvalue.xml#setProperty">setProperty</db:link>() was called with the string representation of <db:code role="parameter">arrayIndex</db:code>.</db:para>
</db:section>
<db:section xml:id="setPrototype">
<db:title>void QJSValue::setPrototype(const QJSValue &amp;<db:emphasis>prototype</db:emphasis>)</db:title>
<db:para>If this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is an object, sets the internal prototype (<db:code>__proto__</db:code> property) of this object to be <db:code role="parameter">prototype</db:code>; if the <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is null, it sets the prototype to null; otherwise does nothing.</db:para>
<db:para>The internal prototype should not be confused with the public property with name &quot;prototype&quot;; the public prototype is usually only set on functions that act as constructors.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#prototype">prototype</db:link>()</db:member>
<db:member><db:link xlink:href="qjsvalue.xml#isObject">isObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="strictlyEquals">
<db:title>bool QJSValue::strictlyEquals(const QJSValue &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is equal to <db:code role="parameter">other</db:code> using strict comparison (no conversion), otherwise returns false. The comparison follows the behavior described in <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link> section 11.9.6, &quot;The Strict Equality Comparison Algorithm&quot;.</db:para>
<db:para>If the type of this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is different from the type of the <db:code role="parameter">other</db:code> value, this function returns false. If the types are equal, the result depends on the type, as shown in the following table:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Type</db:para>
</db:th>
<db:th>
<db:para>Result</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Undefined</db:para>
</db:td>
<db:td>
<db:para>true</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Null</db:para>
</db:td>
<db:td>
<db:para>true</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Boolean</db:para>
</db:td>
<db:td>
<db:para>true if both values are true, false otherwise</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Number</db:para>
</db:td>
<db:td>
<db:para>false if either value is NaN (Not-a-Number); true if values are equal, false otherwise</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>String</db:para>
</db:td>
<db:td>
<db:para>true if both values are exactly the same sequence of characters, false otherwise</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Object</db:para>
</db:td>
<db:td>
<db:para>true if both values refer to the same object, false otherwise</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#equals">equals</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toBool">
<db:title>bool QJSValue::toBool() const</db:title>
<db:para>Returns the boolean value of this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>, using the conversion rules described in <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link> section 9.2, &quot;ToBoolean&quot;.</db:para>
<db:para>Note that if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is an object, calling this function has side effects on the script engine, since the engine will call the object's valueOf() function (and possibly <db:link xlink:href="qjsvalue.xml#toString">toString</db:link>()) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#isBool">isBool</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toDateTime">
<db:title>QDateTime QJSValue::toDateTime() const</db:title>
<db:para>Returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> representation of this value, in local time. If this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is not a date, or the value of the date is NaN (Not-a-Number), an invalid <db:link xlink:href="qdatetime.xml">QDateTime</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#isDate">isDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toInt">
<db:title>qint32 QJSValue::toInt() const</db:title>
<db:para>Returns the signed 32-bit integer value of this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>, using the conversion rules described in <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link> section 9.5, &quot;ToInt32&quot;.</db:para>
<db:para>Note that if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is an object, calling this function has side effects on the script engine, since the engine will call the object's valueOf() function (and possibly <db:link xlink:href="qjsvalue.xml#toString">toString</db:link>()) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#toNumber">toNumber</db:link>()</db:member>
<db:member><db:link xlink:href="qjsvalue.xml#toUInt">toUInt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toNumber">
<db:title>double QJSValue::toNumber() const</db:title>
<db:para>Returns the number value of this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>, as defined in <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link> section 9.3, &quot;ToNumber&quot;.</db:para>
<db:para>Note that if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is an object, calling this function has side effects on the script engine, since the engine will call the object's valueOf() function (and possibly <db:link xlink:href="qjsvalue.xml#toString">toString</db:link>()) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#isNumber">isNumber</db:link>()</db:member>
<db:member><db:link xlink:href="qjsvalue.xml#toInt">toInt</db:link>()</db:member>
<db:member><db:link xlink:href="qjsvalue.xml#toUInt">toUInt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toQObject">
<db:title>QObject *QJSValue::toQObject() const</db:title>
<db:para>If this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is a <db:link xlink:href="qobject.xml">QObject</db:link>, returns the <db:link xlink:href="qobject.xml">QObject</db:link> pointer that the <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> represents; otherwise, returns 0.</db:para>
<db:para>If the <db:link xlink:href="qobject.xml">QObject</db:link> that this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> wraps has been deleted, this function returns 0 (i.e. it is possible for toQObject() to return 0 even when <db:link xlink:href="qjsvalue.xml#isQObject">isQObject</db:link>() returns true).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#isQObject">isQObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString">
<db:title>QString QJSValue::toString() const</db:title>
<db:para>Returns the string value of this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>, as defined in <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link> section 9.8, &quot;ToString&quot;.</db:para>
<db:para>Note that if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is an object, calling this function has side effects on the script engine, since the engine will call the object's toString() function (and possibly valueOf()) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#isString">isString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUInt">
<db:title>quint32 QJSValue::toUInt() const</db:title>
<db:para>Returns the unsigned 32-bit integer value of this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>, using the conversion rules described in <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link> section 9.6, &quot;ToUint32&quot;.</db:para>
<db:para>Note that if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is an object, calling this function has side effects on the script engine, since the engine will call the object's valueOf() function (and possibly <db:link xlink:href="qjsvalue.xml#toString">toString</db:link>()) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#toNumber">toNumber</db:link>()</db:member>
<db:member><db:link xlink:href="qjsvalue.xml#toInt">toInt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toVariant">
<db:title>QVariant QJSValue::toVariant() const</db:title>
<db:para>Returns the <db:link xlink:href="qvariant.xml">QVariant</db:link> value of this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>, if it can be converted to a <db:link xlink:href="qvariant.xml">QVariant</db:link>; otherwise returns an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>. The conversion is performed according to the following table:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Input Type</db:para>
</db:th>
<db:th>
<db:para>Result</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Undefined</db:para>
</db:td>
<db:td>
<db:para>An invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Null</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="qvariant.xml">QVariant</db:link> containing a null pointer (<db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::VoidStar</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Boolean</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="qvariant.xml">QVariant</db:link> containing the value of the boolean.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Number</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="qvariant.xml">QVariant</db:link> containing the value of the number.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>String</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="qvariant.xml">QVariant</db:link> containing the value of the string.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qvariant.xml">QVariant</db:link> Object</db:para>
</db:td>
<db:td>
<db:para>The result is the <db:link xlink:href="qvariant.xml">QVariant</db:link> value of the object (no conversion).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qobject.xml">QObject</db:link> Object</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="qvariant.xml">QVariant</db:link> containing a pointer to the <db:link xlink:href="qobject.xml">QObject</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Date Object</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="qvariant.xml">QVariant</db:link> containing the date value (<db:link xlink:href="qjsvalue.xml#toDateTime">toDateTime</db:link>()).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>RegExp Object</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="qvariant.xml">QVariant</db:link> containing the regular expression value.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Array Object</db:para>
</db:td>
<db:td>
<db:para>The array is converted to a <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link>. Each element is converted to a <db:link xlink:href="qvariant.xml">QVariant</db:link>, recursively; cyclic references are not followed.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Object</db:para>
</db:td>
<db:td>
<db:para>The object is converted to a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link>. Each property is converted to a <db:link xlink:href="qvariant.xml">QVariant</db:link>, recursively; cyclic references are not followed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#isVariant">isVariant</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QJSValue &amp;QJSValue::operator=(const QJSValue &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns the <db:code role="parameter">other</db:code> value to this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>.</db:para>
<db:para>Note that if <db:code role="parameter">other</db:code> is an object (<db:link xlink:href="qjsvalue.xml#isObject">isObject</db:link>() returns true), only a reference to the underlying object will be assigned; the object itself will not be copied.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QJSValue</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="engine">
<db:title>[deprecated] QJSEngine *QJSValue::engine() const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns the <db:link xlink:href="qjsengine.xml">QJSEngine</db:link> that created this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>, or 0 if this <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is invalid or the value is not associated with a particular engine.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
