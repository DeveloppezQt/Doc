<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>C++ Documentation Style</db:title>
<db:productname>QDoc</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>QDoc Manual</db:titleabbrev>
<db:abstract>
<db:para>Style guidelines for C++ documentation.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>To generate the documentation, QDoc goes through the source code and generates documentation for C++ types such as classes. QDoc then associates member functions, properties, and other types to the appropriate class.</db:para>
<db:para>Note that the documentation must be in the implementation files such as <db:code>.cpp</db:code>.</db:para>
<db:section xml:id="class-documentation">
<db:title>Class Documentation</db:title>
<db:para>Class documentation is generated using the <db:link xlink:href="13-qdoc-commands-topics.xml#class">\class</db:link> command and the name of the class as the first argument.</db:para>
<db:programlisting language="cpp">/*!
    \class QCache
    \brief The QCache class is a template class that provides a cache.

    \ingroup tools
    \ingroup shared

    \reentrant

    QCache\&lt;Key, T\&gt; defines a cache that stores objects of type T
    associated with keys of type Key. For example, here's the
    definition of a cache that stores objects of type Employee
    associated with an integer key:

    \snippet code/doc_src_qcache.cpp 0

    Here's how to insert an object in the cache:

    \snippet code/doc_src_qcache.cpp 1

    ... detailed description ommitted

    \sa QPixmapCache, QHash, QMap
*/
</db:programlisting>
<db:para><db:link xlink:href="14-qdoc-commands-contextcommands.xml">Context commands</db:link> add information about the class, such as its module or which version the class was added.</db:para>
<db:para>Some common context commands are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="11-qdoc-commands-specialcontent.xml#brief">\brief</db:link> - the class' brief description <db:emphasis role="bold">(mandatory)</db:emphasis></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="16-qdoc-commands-status.xml#since">\since</db:link> - the version to which the class was added <db:emphasis role="bold">(mandatory)</db:emphasis></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="16-qdoc-commands-status.xml#internal">\internal</db:link> - marks the class as internal. Internal classes do not appear in the public API documentation.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="the-brief-and-detailed-description">
<db:title>The Brief and Detailed Description</db:title>
<db:para>The <db:emphasis>brief description</db:emphasis> is marked with the <db:link xlink:href="11-qdoc-commands-specialcontent.xml#brief">\brief</db:link> command and it is for summarizing the purpose or functionality of the class. For C++ classes, QDoc will take the class and create annotated information for the class. The annotated information appears in lists and tables which display the class.</db:para>
<db:para>The C++ brief should start with:</db:para>
<db:programlisting language="cpp">&quot;The &lt;C++ class name&gt; class&quot;
</db:programlisting>
<db:para>The <db:emphasis>detailed description</db:emphasis> section starts after the brief description. It provides more information about the class. The detailed description may contain images, snippet code, or links to other relevant documents. There must be an empty line which separates the brief and detailed description.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-functions">
<db:title>Member Functions</db:title>
<db:para>Typically, function documentation immediately precedes the implementation of the function in the <db:code>.cpp</db:code> file. For function documentation that is not immediately above the implementation, the <db:link xlink:href="13-qdoc-commands-topics.xml#fn-function">\fn</db:link> is needed.</db:para>
<db:programlisting language="cpp">/*!
  \fn QString &amp;QString::remove(int position, int n)

  Removes \a n characters from the string, starting at the given \a
  position index, and returns a reference to the string.

  If the specified \a position index is within the string, but \a
  position + \a n is beyond the end of the string, the string is
  truncated at the specified \a position.

  \snippet qstring/main.cpp 37

  \sa insert(), replace()
*/
QString &amp;QString::remove(int pos, int len)
</db:programlisting>
<db:para>The function documentation starts with a verb, indicating the operation the function performs. This also applies to constructors and destructors.</db:para>
<db:para>Some common verbs for function documentation:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>&quot;Constructs...&quot; - for constructors</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;Destroys...&quot; - for destructors</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;Returns...&quot; - for accessor functions</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The function documentation must document:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>the return type</db:para>
</db:listitem>
<db:listitem>
<db:para>the parameters</db:para>
</db:listitem>
<db:listitem>
<db:para>the actions of the functions</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:link xlink:href="04-qdoc-commands-textmarkup.xml#a-parameter-marker">\a</db:link> command marks the parameter in the documentation. The return type documentation should link to the type documentation or be marked with the <db:link xlink:href="04-qdoc-commands-textmarkup.xml#c-code-font">\c</db:link> command in the case of boolean values.</db:para>
<db:programlisting language="cpp">/*!
    Returns \c true if a QScroller object was already created for \a target; \c false otherwise.

    \sa scroller()
*/
bool QScroller::hasScroller(QObject *target)
</db:programlisting>
</db:section>
<db:section xml:id="properties">
<db:title>Properties</db:title>
<db:para>The property documentation resides immediately above the read function's implementation. The <db:link xlink:href="qdoc-guide-writing.xml#qdoc-topics">topic command</db:link> for properties is <db:link xlink:href="13-qdoc-commands-topics.xml#property">\property</db:link>.</db:para>
<db:programlisting language="cpp">/*!
    \property QVariantAnimation::duration
    \brief the duration of the animation

    This property describes the duration in milliseconds of the
    animation. The default duration is 250 milliseconds.

    \sa QAbstractAnimation::duration()
 */
int QVariantAnimation::duration() const
</db:programlisting>
<db:para>Property documentation usually starts with &quot;This property...&quot;, but these are alternate expressions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>&quot;This property holds...&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;This property describes...&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;This property represents...&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;Returns <db:code>true</db:code> when... and <db:code>false</db:code> when...&quot; - for properties that are read.</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;Sets the...&quot; - for properties that configure a type.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Property documentation must include:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>description and behavior of the property</db:para>
</db:listitem>
<db:listitem>
<db:para>accepted values for the property</db:para>
</db:listitem>
<db:listitem>
<db:para>the default value of the property</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Similar to <db:link xlink:href="qtwritingstyle-cpp.xml#member-functions">functions</db:link>, the default type may be linked or marked with the <db:code>\c</db:code> command.</db:para>
<db:para>An example of a value range style is:</db:para>
<db:blockquote><db:para>The values range from 0.0 (no blur) to maximumRadius (maximum blur). By default, the property is set to 0.0 (no blur).</db:para>
</db:blockquote>
</db:section>
<db:section xml:id="signals-notifiers-and-slots">
<db:title>Signals, Notifiers, and Slots</db:title>
<db:para>The <db:link xlink:href="qdoc-guide-writing.xml#qdoc-topics">topic command</db:link> for signals, notifiers, and slots is <db:link xlink:href="13-qdoc-commands-topics.xml#fn-function">\fn</db:link>. Signal documentation state when they are triggered or emitted.</db:para>
<db:programlisting language="cpp">/*!
  \fn QAbstractTransition::triggered()

  This signal is emitted when the transition has been triggered (after
  onTransition() has been called).
*/
</db:programlisting>
<db:para>Signal documentation typically begin with &quot;This signal is triggered when...&quot;. Here are alternate styles:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>&quot;This signal is triggered when...&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;Triggered when...&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;Emitted when...&quot;</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For slots or notifiers, the condition when they are executed or triggered by a signal should be documented.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>&quot;Executed when...&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;This slot is executed when...&quot;</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For properties that have overloaded signals, QDoc groups the overloaded notifiers together. To refer to a specific version of a notifier or signal, simply refer to the property and mention that there are different versions of the notifier.</db:para>
<db:programlisting language="cpp">/*!
\property QSpinBox::value
\brief the value of the spin box

setValue() will emit valueChanged() if the new value is different
from the old one. The \l{QSpinBox::}{value} property has a second notifier
signal which includes the spin box's prefix and suffix.
*/
</db:programlisting>
</db:section>
<db:section xml:id="enums-namespaces-and-other-types">
<db:title>Enums, Namespaces, and Other Types</db:title>
<db:para>Enums, namespaces, and macros have a <db:link xlink:href="qdoc-guide-writing.xml#qdoc-topics">topic command</db:link> for their documentation:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="13-qdoc-commands-topics.xml#enum">\enum</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="13-qdoc-commands-topics.xml#typedef">\typedef</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="13-qdoc-commands-topics.xml#macro">\macro</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The language style for these types mention that they are an enum or a macro and continues with the type description.</db:para>
<db:para>For enumerations, the <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#value">\value</db:link> command is for listing the values. QDoc creates a table of values for the enum.</db:para>
<db:programlisting language="cpp">/*!
    \enum QSql::TableType

    This enum type describes types of SQL tables.

    \value Tables  All the tables visible to the user.
    \value SystemTables  Internal tables used by the database.
    \value Views  All the views visible to the user.
    \value AllTables  All of the above.
*/
</db:programlisting>
</db:section>
</db:article>
