<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Changes to Qt Positioning</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Migrate Qt Positioning to Qt 6.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt 6 is a result of the conscious effort to make the framework more efficient and easy to use.</db:para>
<db:para>We try to maintain binary and source compatibility for all the public APIs in each release. But some changes were inevitable in an effort to make Qt a better framework.</db:para>
<db:para>In this topic we summarize those changes in Qt Positioning, and provide guidance to handle them.</db:para>
<db:section xml:id="breaking-public-api-changes">
<db:title>Breaking public API changes</db:title>
<db:para>This section contains information about API changes that break source compatibility.</db:para>
<db:section xml:id="rename-qgeopolygon-path">
<db:title>Rename QGeoPolygon::path()</db:title>
<db:para>The <db:code>QGeoPolygon::path()</db:code> and <db:code>QGeoPolygon::setPath()</db:code> methods are renamed to <db:link xlink:href="qgeopolygon.xml#perimeter">QGeoPolygon::perimeter</db:link>() and <db:link xlink:href="qgeopolygon.xml#setPerimeter">QGeoPolygon::setPerimeter</db:link>() respectively. On the QML side the <db:link xlink:href="qgeopolygon.xml#perimeter">QGeoPolygon::perimeter</db:link> property can be used without any changes.</db:para>
</db:section>
<db:section xml:id="use-qgeoshape-for-qgeolocation-bounding-area">
<db:title>Use <db:link xlink:href="qgeoshape.xml">QGeoShape</db:link> for <db:link xlink:href="qgeolocation.xml">QGeoLocation</db:link> bounding area</db:title>
<db:para>The <db:link xlink:href="qgeolocation.xml">QGeoLocation</db:link> class and its <db:link xlink:href="qml-qtpositioning-location.xml">Location</db:link> QML counterpart are updated to use <db:link xlink:href="qgeoshape.xml">QGeoShape</db:link> instead of <db:link xlink:href="qgeorectangle.xml">QGeoRectangle</db:link> for a bounding area.</db:para>
<db:section xml:id="c">
<db:title>C++</db:title>
<db:para>The <db:code>QGeoLocation::boundingBox()</db:code> and <db:code>QGeoLocation::setBoundingBox()</db:code> are replaced by <db:link xlink:href="qgeolocation.xml#boundingShape">QGeoLocation::boundingShape</db:link>() and <db:link xlink:href="qgeolocation.xml#setBoundingShape">QGeoLocation::setBoundingShape</db:link>() respectively. A <db:link xlink:href="qgeoshape.xml">QGeoShape</db:link> object is now used as an underlying data storage.</db:para>
</db:section>
<db:section xml:id="qml">
<db:title>QML</db:title>
<db:para>The <db:code>QGeoLocation::boundingBox</db:code> property is replaced by <db:link xlink:href="qgeolocation.xml#boundingShape">QGeoLocation::boundingShape</db:link>. This property is available since <db:link xlink:href="qml-qtpositioning-qtpositioning.xml">QtPositioning</db:link> 6.2, so make sure to update the import version in the QML files.</db:para>
<db:programlisting language="cpp">import QtPositioning 6.2
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="remove-qgeoshape-extendshape">
<db:title>Remove QGeoShape::extendShape()</db:title>
<db:para>The <db:code>QGeoShape::extendShape()</db:code> method was deprecated in Qt 5.9 and finally removed in Qt 6. Use <db:link xlink:href="qgeorectangle.xml#extendRectangle">QGeoRectangle::extendRectangle</db:link>() and <db:link xlink:href="qgeocircle.xml#extendCircle">QGeoCircle::extendCircle</db:link>() if you need this functionality for these classes.</db:para>
</db:section>
<db:section xml:id="rename-signal-error-to-erroroccurred">
<db:title>Rename signal error to errorOccurred</db:title>
<db:para>In Qt 5 multiple Qt Positioning classes had the <db:code>error()</db:code> signal, which was clashing with the <db:code>error()</db:code> method. In Qt 6 we renamed these signals to <db:code>errorOccurred()</db:code>. Specifically:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>QGeoAreaMonitorSource::error()</db:code> is renamed to <db:link xlink:href="qgeoareamonitorsource.xml#errorOccurred">QGeoAreaMonitorSource::errorOccurred</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QGeoPositionInfoSource::error()</db:code> is renamed to <db:link xlink:href="qgeopositioninfosource.xml#errorOccurred">QGeoPositionInfoSource::errorOccurred</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QGeoSatelliteInfoSource::error()</db:code> is renamed to <db:link xlink:href="qgeosatelliteinfosource.xml#errorOccurred">QGeoSatelliteInfoSource::errorOccurred</db:link>().</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="remove-update-timeout-signals">
<db:title>Remove update timeout signals</db:title>
<db:para>In Qt 5 <db:code>QGeoPositionInfoSource::updateTimeout()</db:code> and <db:code>QGeoSatelliteInfoSource::requestTimeout()</db:code> signals were used to notify about the cases when the current position or satellite information could not be retrieved within specified timeout. These signals were removed in Qt 6. The <db:code>errorOccurred()</db:code> signals with the new error types are used instead. Specifically:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link> uses an <db:link xlink:href="qgeopositioninfosource.xml#errorOccurred">errorOccurred</db:link>() signal with a new <db:link xlink:href="qgeopositioninfosource.xml#Error-enum">QGeoPositionInfoSource::UpdateTimeoutError</db:link> error code.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgeosatelliteinfosource.xml">QGeoSatelliteInfoSource</db:link> uses an <db:link xlink:href="qgeosatelliteinfosource.xml#errorOccurred">errorOccurred</db:link>() signal with a new <db:link xlink:href="qgeosatelliteinfosource.xml#Error-enum">QGeoSatelliteInfoSource::UpdateTimeoutError</db:link> error code.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Same changes apply to <db:link xlink:href="qml-qtpositioning-positionsource.xml">PositionSource</db:link> QML object. The <db:code>PositionSource::updateTimeout()</db:code> signal is removed. <db:link xlink:href="qml-qtpositioning-positionsource.xml#sourceError-prop">PositionSource::sourceError</db:link> property with a <db:code>PositionSource.UpdateTimeoutError</db:code> is used instead.</db:para>
</db:section>
<db:section xml:id="redesign-nmea-support">
<db:title>Redesign NMEA support</db:title>
<db:para>In Qt 5 we had a <db:emphasis role="bold">serialnmea</db:emphasis> positioning plugin and a <db:code>nmeaSource</db:code> property in <db:link xlink:href="qml-qtpositioning-positionsource.xml">PositionSource</db:link> object.</db:para>
<db:para>The plugin provided access to NMEA streams via serial port, while the QML object was responsible for reading NMEA stream from TCP socket or local file.</db:para>
<db:para>In Qt 6 we joined all these features in the plugin, which is now renamed to <db:emphasis role="bold">nmea</db:emphasis>. It is now capable of working with all three NMEA data sources: serial port, TCP socket and local file. See <db:link xlink:href="position-plugin-nmea.xml">plugin description</db:link> for more details.</db:para>
<db:para>The <db:code>nmeaSource</db:code> property of <db:link xlink:href="qml-qtpositioning-positionsource.xml">PositionSource</db:link> object is now removed.</db:para>
</db:section>
</db:section>
<db:section xml:id="other-api-changes">
<db:title>Other API changes</db:title>
<db:para>This section contains API improvements that do not break source compatibility. However they might have an impact on the application logic, so it is still useful to know about them.</db:para>
<db:section xml:id="reset-errors-properly">
<db:title>Reset errors properly</db:title>
<db:para>In Qt 5 the errors for <db:link xlink:href="qgeoareamonitorsource.xml">QGeoAreaMonitorSource</db:link>, <db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link> and <db:link xlink:href="qgeosatelliteinfosource.xml">QGeoSatelliteInfoSource</db:link> classes were never reset. This behavior is not logical, as calling <db:code>startUpdates()</db:code>, <db:code>startMonitoring()</db:code> or <db:code>requestUpdates()</db:code> on one of these classes or their subclasses effectively means starting a new work sessions, which means that we should not care about previous errors. Since Qt 6 we reset the error to <db:code>NoError</db:code> once one of the aforementioned methods is called.</db:para>
</db:section>
<db:section xml:id="add-qgeoaddress-streetnumber">
<db:title>Add <db:link xlink:href="qgeoaddress.xml#streetNumber">QGeoAddress::streetNumber</db:link></db:title>
<db:para>The <db:link xlink:href="qgeoaddress.xml">QGeoAddress</db:link> class is extended with <db:link xlink:href="qgeoaddress.xml#streetNumber">streetNumber</db:link> property, which holds the information about street number, building name, or anything else that might be used to distinguish one address from another. Use <db:link xlink:href="qgeoaddress.xml#streetNumber">streetNumber</db:link>() and <db:link xlink:href="qgeoaddress.xml#setStreetNumber">setStreetNumber</db:link>() to access this property from C++ code.</db:para>
<db:para>The <db:link xlink:href="qgeoaddress.xml#street">QGeoAddress::street</db:link> now holds only the street name.</db:para>
<db:para>Same applies to <db:link xlink:href="qml-qtpositioning-address.xml">Address</db:link> QML counterpart. The <db:link xlink:href="qml-qtpositioning-address.xml#street-prop">Address::street</db:link> property is now used only for street name, while the <db:link xlink:href="qml-qtpositioning-address.xml#streetNumber-prop">Address::streetNumber</db:link> property is used for other important address details.</db:para>
</db:section>
<db:section xml:id="add-timeout-argument-to-positionsource-update">
<db:title>Add timeout argument to <db:link xlink:href="qml-qtpositioning-positionsource.xml#update-method">PositionSource::update()</db:link></db:title>
<db:para>The <db:code>timeout</db:code> is specified in milliseconds. If the <db:code>timeout</db:code> is zero (the default value), it defaults to a reasonable timeout period as appropriate for the source.</db:para>
</db:section>
<db:section xml:id="refactor-qgeosatelliteinfo-qgeopositioninfo-and-qgeoareamonitorinfo-classes">
<db:title>Refactor <db:link xlink:href="qgeosatelliteinfo.xml">QGeoSatelliteInfo</db:link>, <db:link xlink:href="qgeopositioninfo.xml">QGeoPositionInfo</db:link> and <db:link xlink:href="qgeoareamonitorinfo.xml">QGeoAreaMonitorInfo</db:link> classes</db:title>
<db:para>These classes now use <db:link xlink:href="qexplicitlyshareddatapointer.xml">QExplicitlySharedDataPointer</db:link> in their implementation. It means that the classes implement copy-on-write. It makes them cheap to copy, so that they can be passed by value.</db:para>
<db:para>Another improvement is the addition of support for the efficient move operations.</db:para>
</db:section>
</db:section>
<db:section xml:id="changes-in-qt-positioning-plugin-implementation">
<db:title>Changes in Qt Positioning plugin implementation</db:title>
<db:para>This section provides information about the changes in plugin interface.</db:para>
<db:para>In Qt 5 for we had two versions of plugin interface:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>QGeoPositionInfoSourceFactory</db:code> which provided the basic features.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QGeoPositionInfoSourceFactoryV2</db:code> which extended the base class with the possibility to provide custom parameters for the created objects.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In Qt 6 we merged these two implementations into one, leaving only the <db:link xlink:href="qgeopositioninfosourcefactory.xml">QGeoPositionInfoSourceFactory</db:link> class. Its methods now allow to pass custom parameters.</db:para>
<db:note>
<db:para>The interface <db:emphasis>identifier</db:emphasis> is updated to reflect the major version update. Use <db:code>&quot;org.qt-project.qt.position.sourcefactory/6.0&quot;</db:code> in your Qt Positioning plugins.</db:para>
</db:note>
<db:para>Here is an example of plugin class declaration:</db:para>
<db:programlisting language="cpp">class MyPlugin : public QObject, public QGeoPositionInfoSourceFactory
{
    Q_OBJECT
    Q_PLUGIN_METADATA(IID &quot;org.qt-project.qt.position.sourcefactory/6.0&quot;
                      FILE &quot;plugin.json&quot;)
    Q_INTERFACES(QGeoPositionInfoSourceFactory)

public:
    QGeoPositionInfoSource *positionInfoSource(QObject *parent, const QVariantMap &amp;amp;parameters) override;
    QGeoSatelliteInfoSource *satelliteInfoSource(QObject *parent, const QVariantMap &amp;amp;parameters) override;
    QGeoAreaMonitorSource *areaMonitor(QObject *parent, const QVariantMap &amp;amp;parameters) override;
};
</db:programlisting>
</db:section>
</db:article>
