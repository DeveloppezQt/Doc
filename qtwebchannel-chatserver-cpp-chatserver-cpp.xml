<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt WebChannel ChatServer Example</db:title>
<db:productname>QtWebChannel</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebChannel Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A simple chat server implemented using the <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> C++ API.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2014 Klar√§lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Milian Wolff &lt;milian.wolff@kdab.com&gt;
** Contact: http://www.qt.io/licensing/
**
** This file is part of the QtWebChannel module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL21$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file. Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** As a special exception, The Qt Company gives you certain additional
** rights. These rights are described in The Qt Company LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;chatserver.h&quot;

#include &lt;QtCore/QDebug&gt;
#include &lt;QTimer&gt;
#include &lt;QTime&gt;

ChatServer::ChatServer(QObject *parent)
    : QObject(parent)
{
    QTimer* t = new QTimer(this);
    connect(t, SIGNAL(timeout()), this, SLOT(sendKeepAlive()));
    t-&gt;start(10000);

    m_keepAliveCheckTimer = new QTimer(this);
    m_keepAliveCheckTimer-&gt;setSingleShot(true);
    m_keepAliveCheckTimer-&gt;setInterval(2000);
    connect(m_keepAliveCheckTimer, SIGNAL(timeout()), this, SLOT(checkKeepAliveResponses()));
}

ChatServer::~ChatServer()
{}

bool ChatServer::login(const QString&amp; userName)
{
    //stop keepAliveCheck, when a new user logged in
    if (m_keepAliveCheckTimer-&gt;isActive()) {
        m_keepAliveCheckTimer-&gt;stop();
        m_stillAliveUsers.clear();
    }

    if (m_userList.contains(userName)) {
        return false;
    }

    qDebug() &lt;&lt; &quot;User logged in:&quot; &lt;&lt; userName;
    m_userList.append(userName);
    m_userList.sort();
    emit userListChanged();
    emit userCountChanged();
    return true;
}

bool ChatServer::logout(const QString&amp; userName)
{
    if (!m_userList.contains(userName)) {
        return false;
    } else {
        m_userList.removeAt(m_userList.indexOf(userName));
        emit userListChanged();
        emit userCountChanged();
        return true;
    }
}

bool ChatServer::sendMessage(const QString&amp; user, const QString&amp; msg)
{
    if (m_userList.contains(user)) {
        emit newMessage(QTime::currentTime().toString(&quot;HH:mm:ss&quot;), user, msg);
        return true;
    } else {
        return false;
    }
}

void ChatServer::sendKeepAlive() {
    emit keepAlive();
    m_keepAliveCheckTimer-&gt;start();
}

void ChatServer::checkKeepAliveResponses() {
    qDebug() &lt;&lt; &quot;Keep Alive Check&quot; &lt;&lt; m_stillAliveUsers;
    m_userList = m_stillAliveUsers;
    m_stillAliveUsers.clear();
    m_userList.sort();
    emit userListChanged();
}

void ChatServer::keepAliveResponse(const QString&amp; user) {
    m_stillAliveUsers.append(user);
}

QStringList ChatServer::userList() const
{
    return m_userList;
}


</db:programlisting>
</db:article>
