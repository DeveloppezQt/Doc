<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D: assimp Example</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt 3D Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2014 Klaralvdalens Datakonsult AB (KDAB).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the Qt3D module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL3$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 3 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPLv3 included in the
** packaging of this file. Please review the following information to
** ensure the GNU Lesser General Public License version 3 requirements
** will be met: https://www.gnu.org/licenses/lgpl.html.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 2.0 or later as published by the Free
** Software Foundation and appearing in the file LICENSE.GPL included in
** the packaging of this file. Please review the following information to
** ensure the GNU General Public License version 2.0 requirements will be
** met: http://www.gnu.org/licenses/gpl-2.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;window.h&gt;
#include &lt;Qt3DRender/QRenderAspect&gt;
#include &lt;Qt3DRender/QSceneLoader&gt;
#include &lt;Qt3DCore/QEntity&gt;
#include &lt;Qt3DInput/QInputAspect&gt;
#include &lt;Qt3DQuick/QQmlAspectEngine&gt;

#include &lt;QGuiApplication&gt;
#include &lt;qqml.h&gt;

class SceneHelper : public QObject
{
    Q_OBJECT

public:
    Q_INVOKABLE QObject *findEntity(Qt3DRender::QSceneLoader *loader, const QString &amp;name);
    Q_INVOKABLE QObject *findComponent(Qt3DCore::QEntity *entity, const QString &amp;componentMetatype);
    Q_INVOKABLE void addListEntry(const QVariant &amp;list, QObject *entry);
};

QObject *SceneHelper::findEntity(Qt3DRender::QSceneLoader *loader, const QString &amp;name)
{
    // The QSceneLoader instance is a component of an entity. The loaded scene
    // tree is added under this entity.
    QVector&lt;Qt3DCore::QEntity *&gt; entities = loader-&gt;entities();

    if (entities.isEmpty())
        return 0;

    // Technically there could be multiple entities referencing the scene loader
    // but sharing is discouraged, and in our case there will be one anyhow.
    Qt3DCore::QEntity *root = entities[0];

    // The scene structure and names always depend on the asset.
    return root-&gt;findChild&lt;Qt3DCore::QEntity *&gt;(name);
}

QObject *SceneHelper::findComponent(Qt3DCore::QEntity *entity, const QString &amp;componentMetatype)
{
    Q_ASSERT(entity);
    Qt3DCore::QComponentList components = entity-&gt;components();
    Q_FOREACH (Qt3DCore::QComponent *component, components) {
        qDebug() &lt;&lt; component-&gt;metaObject()-&gt;className();
        if (component-&gt;metaObject()-&gt;className() == componentMetatype) {
            return component;
        }
    }
    return Q_NULLPTR;
}

void SceneHelper::addListEntry(const QVariant &amp;list, QObject *entry)
{
    QQmlListReference ref = list.value&lt;QQmlListReference&gt;();
    ref.append(entry);
}

int main(int argc, char* argv[])
{
    QGuiApplication app(argc, argv);

    Window view;
    Qt3DCore::Quick::QQmlAspectEngine engine;

    engine.aspectEngine()-&gt;registerAspect(new Qt3DRender::QRenderAspect());
    engine.aspectEngine()-&gt;registerAspect(new Qt3DInput::QInputAspect());
    QVariantMap data;
    data.insert(QStringLiteral(&quot;surface&quot;), QVariant::fromValue(static_cast&lt;QSurface *&gt;(&amp;view)));
    data.insert(QStringLiteral(&quot;eventSource&quot;), QVariant::fromValue(&amp;view));
    engine.aspectEngine()-&gt;setData(data);
    qmlRegisterType&lt;SceneHelper&gt;(&quot;Qt3D.Examples&quot;, 2, 0, &quot;SceneHelper&quot;);
    engine.setSource(QUrl(&quot;qrc:/main.qml&quot;));
    view.show();

    return app.exec();
}

#include &quot;main.moc&quot;

</db:programlisting>
</db:article>
