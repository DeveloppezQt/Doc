<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WlShell QML Type</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides an extension for desktop-style user interfaces.</db:para>
<db:para>This type was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtWayland.Compositor 1.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtwayland-compositor-wlshell.xml">WlShell</db:link> extension provides a way to associate a <db:link xlink:href="qml-qtwayland-compositor-shellsurface.xml">ShellSurface</db:link> with a regular Wayland surface. Using the shell surface interface, the client can request that the surface is resized, moved, and so on.</db:para>
<db:para><db:link xlink:href="qml-qtwayland-compositor-wlshell.xml">WlShell</db:link> corresponds to the Wayland interface <db:code>wl_shell</db:code>.</db:para>
<db:para>To provide the functionality of the shell extension in a compositor, create an instance of the <db:link xlink:href="qml-qtwayland-compositor-wlshell.xml">WlShell</db:link> component and add it to the list of extensions supported by the compositor:</db:para>
<db:programlisting language="cpp">import QtWayland.Compositor 1.0

WaylandCompositor {
    WlShell {
        // ...
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="wlShellSurfaceCreated-signal">
<db:title>void wlShellSurfaceCreated(WlShellSurface <db:emphasis>shellSurface</db:emphasis>)</db:title>
<db:para>This signal is emitted when the client has created a <db:code>wl_shell_surface</db:code>. A common use case is to let the handler of this signal instantiate a <db:link xlink:href="qml-qtwayland-compositor-shellsurfaceitem.xml">ShellSurfaceItem</db:link> or <db:link xlink:href="qml-qtwayland-compositor-waylandquickitem.xml">WaylandQuickItem</db:link> for displaying <db:code role="parameter">shellSurface</db:code> in a <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> scene.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onWlShellSurfaceCreated</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="wlShellSurfaceRequested-signal">
<db:title>void wlShellSurfaceRequested(WaylandSurface <db:emphasis>surface</db:emphasis>, WaylandResource <db:emphasis>resource</db:emphasis>)</db:title>
<db:para>This signal is emitted when the client has requested a <db:code>wl_shell_surface</db:code> to be associated with <db:code role="parameter">surface</db:code>. The handler for this signal may create a shell surface for <db:code role="parameter">resource</db:code> and initialize it within the scope of the signal emission. Otherwise a <db:link xlink:href="qml-qtwayland-compositor-wlshellsurface.xml">WlShellSurface</db:link> will be created automatically.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onWlShellSurfaceRequested</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
