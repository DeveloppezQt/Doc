<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMutableHashIterator Class</db:title>
<db:subtitle>template &lt;typename Key, typename T&gt; class QMutableHashIterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmutablehashiterator.xml">QMutableHashIterator</db:link> class provides a Java-style non-const iterator for <db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link> and <db:link xlink:href="qmultihash.xml">QMultiHash</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMutableHashIterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link> has both <db:link xlink:href="containers.xml#java-style-iterators">Java-style iterators</db:link> and <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link>. The Java-style iterators are more high-level and easier to use than the STL-style iterators; on the other hand, they are slightly less efficient.</db:para>
<db:para><db:link xlink:href="qmutablehashiterator.xml">QMutableHashIterator</db:link>&lt;Key, T&gt; allows you to iterate over a <db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link> (or a <db:link xlink:href="qmultihash.xml">QMultiHash</db:link>) and modify the hash. If you don't want to modify the hash (or have a const <db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link>), use the slightly faster <db:link xlink:href="qhashiterator.xml">QHashIterator</db:link> instead.</db:para>
<db:para>The <db:link xlink:href="qmutablehashiterator.xml">QMutableHashIterator</db:link> constructor takes a <db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link> as argument. After construction, the iterator is located at the very beginning of the hash (before the first item). Here's how to iterate over all the elements sequentially:</db:para>
<db:programlisting language="cpp">QHash&lt;int, QWidget *&gt; hash;
...
QMutableHashIterator&lt;QString, QWidget *&gt; i(hash);
while (i.hasNext()) {
    i.next();
    qDebug() &lt;&lt; i.key() &lt;&lt; &quot;: &quot; &lt;&lt; i.value();
}
</db:programlisting>
<db:para>The next() function returns the next item in the hash and advances the iterator. The key() and value() functions return the key and value of the last item that was jumped over.</db:para>
<db:para>Unlike STL-style iterators, Java-style iterators point <db:emphasis>between</db:emphasis> items rather than directly <db:emphasis>at</db:emphasis> items. The first call to next() advances the iterator to the position between the first and second item, and returns the first item; the second call to next() advances the iterator to the position between the second and third item; and so on.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/javaiterators1.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Here's how to iterate over the elements in reverse order:</db:para>
<db:programlisting language="cpp">QMutableHashIterator&lt;int, QWidget *&gt; i(hash);
i.toBack();
while (i.hasPrevious()) {
    i.previous();
    qDebug() &lt;&lt; i.key() &lt;&lt; &quot;: &quot; &lt;&lt; i.value();
}
</db:programlisting>
<db:para>If you want to find all occurrences of a particular value, use findNext() or findPrevious() in a loop. For example:</db:para>
<db:programlisting language="cpp">QMutableHashIterator&lt;int, QWidget *&gt; i(hash);
while (i.findNext(widget)) {
    qDebug() &lt;&lt; &quot;Found widget &quot; &lt;&lt; widget &lt;&lt; &quot; under key &quot;
             &lt;&lt; i.key();
}
</db:programlisting>
<db:para>If you want to remove items as you iterate over the hash, use remove(). If you want to modify the value of an item, use setValue().</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QMutableHashIterator&lt;QString, QString&gt; i(hash);
while (i.hasNext()) {
    i.next();
    if (i.key() == i.value())
        i.remove();
}
</db:programlisting>
<db:para>The example removes all (key, value) pairs where the key and the value are the same.</db:para>
<db:para>Only one mutable iterator can be active on a given hash at any time. Furthermore, no changes should be done directly to the hash while the iterator is active (as opposed to through the iterator), since this could invalidate the iterator and lead to undefined behavior.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhashiterator.xml">QHashIterator</db:link></db:member>
<db:member><db:link xlink:href="qhash-iterator.xml">QHash::iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
