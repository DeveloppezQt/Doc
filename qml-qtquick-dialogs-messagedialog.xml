<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>MessageDialog QML Type</db:title>
<db:productname>QtQuickDialogs</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Dialogs Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Dialog component for displaying popup messages.</db:para>
<db:para>This type was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Dialogs 1.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>MessageDialog is part of <db:simplelist><db:member>qtquickdialogs</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The most basic use case for a <db:link xlink:href="qml-qtquick-dialogs-messagedialog.xml">MessageDialog</db:link> is a popup alert. It also allows the user to respond in various ways depending on which buttons are enabled. The dialog is initially invisible. You need to set the properties as desired first, then set <db:link xlink:href="qml-qtquick-dialogs-messagedialog.xml#visible-prop">visible</db:link> to <db:code>true</db:code> or call <db:link xlink:href="qml-qtquick-dialogs-messagedialog.xml#open-method">open</db:link>().</db:para>
<db:para>Here is a minimal example to show an alert and exit after the user responds:</db:para>
<db:programlisting language="qml">import QtQuick 2.2
import QtQuick.Dialogs 1.1

MessageDialog {
    id: messageDialog
    title: &quot;May I have your attention please&quot;
    text: &quot;It's so cool that you are using Qt Quick.&quot;
    onAccepted: {
        console.log(&quot;And of course you could only agree.&quot;)
        Qt.quit()
    }
    Component.onCompleted: visible = true
}
</db:programlisting>
<db:para>There are several possible handlers depending on which <db:link xlink:href="qml-qtquick-dialogs-messagedialog.xml#standardButtons-prop">standardButtons</db:link> the dialog has and the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">ButtonRole</db:link> of each. For example, the <db:link xlink:href="qml-qtquick-dialogs-messagedialog.xml#rejected-signal">onRejected</db:link> handler will be called if the user presses a <db:emphasis role="bold">Cancel</db:emphasis>, <db:emphasis role="bold">Close</db:emphasis> or <db:emphasis role="bold">Abort</db:emphasis> button.</db:para>
<db:para>A <db:link xlink:href="qml-qtquick-dialogs-messagedialog.xml">MessageDialog</db:link> window is automatically transient for its parent window. So whether you declare the dialog inside an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> or inside a <db:link xlink:href="qml-qtquick-window-window.xml">Window</db:link>, the dialog will appear centered over the window containing the item, or over the Window that you declared.</db:para>
<db:para>The implementation of <db:link xlink:href="qml-qtquick-dialogs-messagedialog.xml">MessageDialog</db:link> will be a platform message dialog if possible. If that isn't possible, then it will try to instantiate a <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link>. If that also isn't possible, then it will fall back to a QML implementation, <db:code>DefaultMessageDialog.qml</db:code>. In that case you can customize the appearance by editing this file. <db:code>DefaultMessageDialog.qml</db:code> contains a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> to hold the dialog's contents, because certain embedded systems do not support multiple top-level windows. When the dialog becomes visible, it will automatically be wrapped in a <db:link xlink:href="qml-qtquick-window-window.xml">Window</db:link> if possible, or simply reparented on top of the main window if there can only be one window.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="clickedButton-prop">
<db:title>[read-only] clickedButton : StandardButton</db:title>
<db:para>This property holds the button pressed by the user. Its value is one of the flags set for the <db:link xlink:href="qml-qtquick-dialogs-messagedialog.xml#standardButtons-prop">standardButtons</db:link> property.</db:para>
</db:section>
<db:section xml:id="detailedText-prop">
<db:title>detailedText : string</db:title>
<db:para>The text to be displayed in the details area, which is hidden by default. The user will then be able to press the <db:emphasis role="bold">Show Details...</db:emphasis> button to make it visible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-dialogs-messagedialog.xml#text-prop">text</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="icon-prop">
<db:title>icon : QQuickStandardIcon::Icon</db:title>
<db:para>The icon of the message box can be specified with one of these values:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>no icon</db:para>
</db:td>
<db:td>
<db:para><db:code>StandardIcon.NoIcon</db:code></db:para>
</db:td>
<db:td>
<db:para>For an unadorned text alert.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/question.png"/>
</db:imageobject>
</db:inlinemediaobject> &quot;Question icon&quot;</db:para>
</db:td>
<db:td>
<db:para><db:code>StandardIcon.Question</db:code></db:para>
</db:td>
<db:td>
<db:para>For asking a question during normal operations.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/information.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para><db:code>StandardIcon.Information</db:code></db:para>
</db:td>
<db:td>
<db:para>For reporting information about normal operations.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/warning.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para><db:code>StandardIcon.Warning</db:code></db:para>
</db:td>
<db:td>
<db:para>For reporting non-critical errors.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/critical.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para><db:code>StandardIcon.Critical</db:code></db:para>
</db:td>
<db:td>
<db:para>For reporting critical errors.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default is <db:code>StandardIcon.NoIcon</db:code>.</db:para>
<db:para>The enum values are the same as in <db:link xlink:href="qmessagebox.xml#Icon-enum">QMessageBox::Icon</db:link>.</db:para>
</db:section>
<db:section xml:id="informativeText-prop">
<db:title>informativeText : string</db:title>
<db:para>The informative text that provides a fuller description for the message.</db:para>
<db:para>Informative text can be used to supplement the <db:code>text</db:code> to give more information to the user. Depending on the platform, it may appear in a smaller font below the text, or simply appended to the text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-dialogs-messagedialog.xml#text-prop">text</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="modality-prop">
<db:title>modality : Qt::WindowModality</db:title>
<db:para>Whether the dialog should be shown modal with respect to the window containing the dialog's parent Item, modal with respect to the whole application, or non-modal.</db:para>
<db:para>By default it is <db:code>Qt.WindowModal</db:code>.</db:para>
<db:para>Modality does not mean that there are any blocking calls to wait for the dialog to be accepted or rejected; it's only that the user will be prevented from interacting with the parent window and/or the application windows until the dialog is dismissed.</db:para>
</db:section>
<db:section xml:id="standardButtons-prop">
<db:title>standardButtons : StandardButtons</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-dialogs-messagedialog.xml">MessageDialog</db:link> has a row of buttons along the bottom, each of which has a <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">ButtonRole</db:link> that determines which signal will be emitted when the button is pressed. You can also find out which specific button was pressed after the fact via the <db:link xlink:href="qml-qtquick-dialogs-messagedialog.xml#clickedButton-prop">clickedButton</db:link> property. You can control which buttons are available by setting standardButtons to a bitwise-or combination of the following flags:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>StandardButton.Ok</db:para>
</db:td>
<db:td>
<db:para>An <db:emphasis role="bold">OK</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">AcceptRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Open</db:para>
</db:td>
<db:td>
<db:para>An <db:emphasis role="bold">Open</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">AcceptRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Save</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Save</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">AcceptRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Cancel</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Cancel</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">RejectRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Close</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Close</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">RejectRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Discard</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Discard</db:emphasis> or <db:emphasis role="bold">Don't Save</db:emphasis> button, depending on the platform, defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">DestructiveRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Apply</db:para>
</db:td>
<db:td>
<db:para>An <db:emphasis role="bold">Apply</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">ApplyRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Reset</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Reset</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">ResetRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.RestoreDefaults</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Restore Defaults</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">ResetRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Help</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Help</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">HelpRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.SaveAll</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Save All</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">AcceptRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Yes</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Yes</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">YesRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.YesToAll</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Yes to All</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">YesRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.No</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">No</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">NoRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.NoToAll</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">No to All</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">NoRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Abort</db:para>
</db:td>
<db:td>
<db:para>An <db:emphasis role="bold">Abort</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">RejectRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Retry</db:para>
</db:td>
<db:td>
<db:para>A <db:emphasis role="bold">Retry</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">AcceptRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StandardButton.Ignore</db:para>
</db:td>
<db:td>
<db:para>An <db:emphasis role="bold">Ignore</db:emphasis> button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">AcceptRole</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For example the following dialog will ask a question with 5 possible answers:</db:para>
<db:programlisting language="qml">import QtQuick 2.2
import QtQuick.Dialogs 1.1

MessageDialog {
    title: &quot;Overwrite?&quot;
    icon: StandardIcon.Question
    text: &quot;file.txt already exists.  Replace?&quot;
    detailedText: &quot;To replace a file means that its existing contents will be lost. &quot; +
        &quot;The file that you are copying now will be copied over it instead.&quot;
    standardButtons: StandardButton.Yes | StandardButton.YesToAll |
        StandardButton.No | StandardButton.NoToAll | StandardButton.Abort
    Component.onCompleted: visible = true
    onYes: console.log(&quot;copied&quot;)
    onNo: console.log(&quot;didn't copy&quot;)
    onRejected: console.log(&quot;aborted&quot;)
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/replacefile.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The default is <db:code>StandardButton.Ok</db:code>.</db:para>
<db:para>The enum values are the same as in <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::StandardButtons</db:link>.</db:para>
</db:section>
<db:section xml:id="text-prop">
<db:title>text : string</db:title>
<db:para>The primary text to be displayed.</db:para>
</db:section>
<db:section xml:id="title-prop">
<db:title>title : string</db:title>
<db:para>The title of the dialog window.</db:para>
</db:section>
<db:section xml:id="visible-prop">
<db:title>visible : bool</db:title>
<db:para>This property holds whether the dialog is visible. By default this is <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-dialogs-messagedialog.xml#modality-prop">modality</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="accepted-signal">
<db:title>accepted()</db:title>
<db:para>This signal is emitted when the user has pressed any button which has the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">AcceptRole</db:link>: <db:emphasis role="bold">OK</db:emphasis>, <db:emphasis role="bold">Open</db:emphasis>, <db:emphasis role="bold">Save</db:emphasis>, <db:emphasis role="bold">Save All</db:emphasis>, <db:emphasis role="bold">Retry</db:emphasis> or <db:emphasis role="bold">Ignore</db:emphasis>.</db:para>
<db:para>The corresponding handler is <db:code>onAccepted</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onAccepted</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="apply-signal">
<db:title>apply()</db:title>
<db:para>This signal is emitted when the user has pressed the <db:emphasis role="bold">Apply</db:emphasis> button.</db:para>
<db:para>The corresponding handler is <db:code>onApply</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onApply</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="discard-signal">
<db:title>discard()</db:title>
<db:para>This signal is emitted when the user has pressed the <db:emphasis role="bold">Discard</db:emphasis> button.</db:para>
<db:para>The corresponding handler is <db:code>onDiscard</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onDiscard</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="help-signal">
<db:title>help()</db:title>
<db:para>This signal is emitted when the user has pressed the <db:emphasis role="bold">Help</db:emphasis> button. Depending on platform, the dialog may not be automatically dismissed because the help that your application provides may need to be relevant to the text shown in this dialog in order to assist the user in making a decision. However on other platforms it's not possible to show a dialog and a help window at the same time. If you want to be sure that the dialog will close, you can set <db:link xlink:href="qml-qtquick-dialogs-messagedialog.xml#visible-prop">visible</db:link> to <db:code>false</db:code> in your handler.</db:para>
<db:para>The corresponding handler is <db:code>onHelp</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onHelp</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="no-signal">
<db:title>no()</db:title>
<db:para>This signal is emitted when the user has pressed any button which has the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">NoRole</db:link>: <db:emphasis role="bold">No</db:emphasis> or <db:emphasis role="bold">No to All</db:emphasis>.</db:para>
<db:para>The corresponding handler is <db:code>onNo</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onNo</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="rejected-signal">
<db:title>rejected()</db:title>
<db:para>This signal is emitted when the user has dismissed the dialog, by closing the dialog window, by pressing a <db:emphasis role="bold">Cancel</db:emphasis>, <db:emphasis role="bold">Close</db:emphasis> or <db:emphasis role="bold">Abort</db:emphasis> button on the dialog, or by pressing the back button or the escape key.</db:para>
<db:para>The corresponding handler is <db:code>onRejected</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onRejected</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="reset-signal">
<db:title>reset()</db:title>
<db:para>This signal is emitted when the user has pressed any button which has the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">ResetRole</db:link>: <db:emphasis role="bold">Reset</db:emphasis> or <db:emphasis role="bold">Restore Defaults</db:emphasis>.</db:para>
<db:para>The corresponding handler is <db:code>onReset</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onReset</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="yes-signal">
<db:title>yes()</db:title>
<db:para>This signal is emitted when the user has pressed any button which has the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">YesRole</db:link>: <db:emphasis role="bold">Yes</db:emphasis> or <db:emphasis role="bold">Yes to All</db:emphasis>.</db:para>
<db:para>The corresponding handler is <db:code>onYes</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onYes</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="close-method">
<db:title>void close()</db:title>
<db:para>Closes the dialog.</db:para>
</db:section>
<db:section xml:id="open-method">
<db:title>void open()</db:title>
<db:para>Shows the dialog to the user. It is equivalent to setting <db:link xlink:href="qml-qtquick-dialogs-messagedialog.xml#visible-prop">visible</db:link> to <db:code>true</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
