<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMessageBox Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> class provides a modal dialog for informing the user or for asking the user a question and receiving an answer.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMessageBox</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdialog.xml" xlink:role="class">QDialog</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMessageBox is part of <db:simplelist><db:member><db:link xlink:href="standard-dialogs.xml">Standard Dialogs</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A message box displays a primary <db:link xlink:href="qmessagebox.xml#text-prop">text</db:link> to alert the user to a situation, an <db:link xlink:href="qmessagebox.xml#informativeText-prop">informative text</db:link> to further explain the situation, and an optional <db:link xlink:href="qmessagebox.xml#detailedText-prop">detailed text</db:link> to provide even more data if the user requests it.</db:para>
<db:para>A message box can also display an <db:link xlink:href="qmessagebox.xml#icon-prop">icon</db:link> and <db:link xlink:href="qmessagebox.xml#standardButtons-prop">standard buttons</db:link> for accepting a user response.</db:para>
<db:para>Two APIs for using <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> are provided, the property-based API, and the static functions. Calling one of the static functions is the simpler approach, but it is less flexible than using the property-based API, and the result is less informative. Using the property-based API is recommended.</db:para>
<db:section xml:id="the-property-based-api">
<db:title>The Property-based API</db:title>
<db:para>To use the property-based API, construct an instance of <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link>, set the desired properties, and call <db:link xlink:href="qmessagebox.xml#exec">exec</db:link>() to show the message. The simplest configuration is to set only the <db:link xlink:href="qmessagebox.xml#text-prop">message text</db:link> property.</db:para>
<db:programlisting language="cpp">QMessageBox msgBox;
msgBox.setText(&quot;The document has been modified.&quot;);
msgBox.exec();
</db:programlisting>
<db:para>The user must click the <db:guilabel>OK</db:guilabel> button to dismiss the message box. The rest of the GUI is blocked until the message box is dismissed.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/msgbox1.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A better approach than just alerting the user to an event is to also ask the user what to do about it.</db:para>
<db:para>Set the <db:link xlink:href="qmessagebox.xml#standardButtons-prop">standard buttons</db:link> property to the set of buttons you want as the set of user responses. The buttons are specified by combining values from <db:link xlink:href="qmessagebox.xml#StandardButton-enum">StandardButtons</db:link> using the bitwise OR operator. The display order for the buttons is platform-dependent. For example, on Windows, <db:guilabel>Save</db:guilabel> is displayed to the left of <db:guilabel>Cancel</db:guilabel>, whereas on macOS, the order is reversed. Mark one of your standard buttons to be your <db:link xlink:href="qmessagebox.xml#defaultButton">default button</db:link>.</db:para>
<db:para>The <db:link xlink:href="qmessagebox.xml#informativeText-prop">informative text</db:link> property can be used to add additional context to help the user choose the appropriate action.</db:para>
<db:programlisting language="cpp">QMessageBox msgBox;
msgBox.setText(&quot;The document has been modified.&quot;);
msgBox.setInformativeText(&quot;Do you want to save your changes?&quot;);
msgBox.setStandardButtons(QMessageBox::Save | QMessageBox::Discard | QMessageBox::Cancel);
msgBox.setDefaultButton(QMessageBox::Save);
int ret = msgBox.exec();
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/msgbox2.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:link xlink:href="qmessagebox.xml#exec">exec</db:link>() slot returns the <db:link xlink:href="qmessagebox.xml#StandardButton-enum">StandardButtons</db:link> value of the button that was clicked.</db:para>
<db:programlisting language="cpp">switch (ret) {
  case QMessageBox::Save:
      // Save was clicked
      break;
  case QMessageBox::Discard:
      // Don't Save was clicked
      break;
  case QMessageBox::Cancel:
      // Cancel was clicked
      break;
  default:
      // should never be reached
      break;
}
</db:programlisting>
<db:para>To give the user more information to help them choose the appropriate, action, set the <db:link xlink:href="qmessagebox.xml#detailedText-prop">detailed text</db:link> property. Depending on the platform the <db:link xlink:href="qmessagebox.xml#detailedText-prop">detailed text</db:link>, may require the user to click a <db:guilabel>Show Details...</db:guilabel> button to be shown.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/msgbox3.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Clicking the <db:guilabel>Show Details...</db:guilabel> button displays the detailed text.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/msgbox4.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="rich-text-and-the-text-format-property">
<db:title>Rich Text and the Text Format Property</db:title>
<db:para>The <db:link xlink:href="qmessagebox.xml#detailedText-prop">detailed text</db:link> property is always interpreted as plain text. The <db:link xlink:href="qmessagebox.xml#text-prop">main text</db:link> and <db:link xlink:href="qmessagebox.xml#informativeText-prop">informative text</db:link> properties can be either plain text or rich text. These strings are interpreted according to the setting of the <db:link xlink:href="qmessagebox.xml#textFormat-prop">text format</db:link> property. The default setting is <db:link xlink:href="qt.xml#TextFormat-enum">auto-text</db:link>.</db:para>
<db:para>Note that for some plain text strings containing XML meta-characters, the auto-text <db:link xlink:href="qt-sub-qtgui.xml#mightBeRichText">rich text detection test</db:link> may fail causing your plain text string to be interpreted incorrectly as rich text. In these rare cases, use <db:link xlink:href="qt-sub-qtgui.xml#convertFromPlainText">Qt::convertFromPlainText</db:link>() to convert your plain text string to a visually equivalent rich text string, or set the <db:link xlink:href="qmessagebox.xml#textFormat-prop">text format</db:link> property explicitly with <db:link xlink:href="qmessagebox.xml#textFormat-prop">setTextFormat</db:link>().</db:para>
</db:section>
<db:section xml:id="severity-levels-and-the-icon-and-pixmap-properties">
<db:title>Severity Levels and the Icon and Pixmap Properties</db:title>
<db:para><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> supports four predefined message severity levels, or message types, which really only differ in the predefined icon they each show. Specify one of the four predefined message types by setting the <db:link xlink:href="qmessagebox.xml#icon-prop">icon</db:link> property to one of the <db:link xlink:href="qmessagebox.xml#Icon-enum">predefined icons</db:link>. The following rules are guidelines:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmessagebox-quest.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmessagebox.xml#Icon-enum">Question</db:link></db:para>
</db:td>
<db:td>
<db:para>For asking a question during normal operations.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmessagebox-info.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmessagebox.xml#Icon-enum">Information</db:link></db:para>
</db:td>
<db:td>
<db:para>For reporting information about normal operations.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmessagebox-warn.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmessagebox.xml#Icon-enum">Warning</db:link></db:para>
</db:td>
<db:td>
<db:para>For reporting non-critical errors.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmessagebox-crit.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmessagebox.xml#Icon-enum">Critical</db:link></db:para>
</db:td>
<db:td>
<db:para>For reporting critical errors.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:link xlink:href="qmessagebox.xml#Icon-enum">Predefined icons</db:link> are not defined by <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link>, but provided by the style. The default value is <db:link xlink:href="qmessagebox.xml#Icon-enum">No Icon</db:link>. The message boxes are otherwise the same for all cases. When using a standard icon, use the one recommended in the table, or use the one recommended by the style guidelines for your platform. If none of the standard icons is right for your message box, you can use a custom icon by setting the <db:link xlink:href="qmessagebox.xml#iconPixmap-prop">icon pixmap</db:link> property instead of setting the <db:link xlink:href="qmessagebox.xml#icon-prop">icon</db:link> property.</db:para>
<db:para>In summary, to set an icon, use <db:emphasis>either</db:emphasis> <db:link xlink:href="qmessagebox.xml#icon-prop">setIcon</db:link>() for one of the standard icons, <db:emphasis>or</db:emphasis> <db:link xlink:href="qmessagebox.xml#iconPixmap-prop">setIconPixmap</db:link>() for a custom icon.</db:para>
</db:section>
</db:section>
<db:section xml:id="the-static-functions-api">
<db:title>The Static Functions API</db:title>
<db:para>Building message boxes with the static functions API, although convenient, is less flexible than using the property-based API, because the static function signatures lack parameters for setting the <db:link xlink:href="qmessagebox.xml#informativeText-prop">informative text</db:link> and <db:link xlink:href="qmessagebox.xml#detailedText-prop">detailed text</db:link> properties. One work-around for this has been to use the title parameter as the message box main text and the text parameter as the message box informative text. Because this has the obvious drawback of making a less readable message box, platform guidelines do not recommend it. The <db:emphasis>Microsoft Windows User Interface Guidelines</db:emphasis> recommend using the <db:link xlink:href="qcoreapplication.xml#applicationName-prop">application name</db:link> as the <db:link xlink:href="qmessagebox.xml#setWindowTitle">window's title</db:link>, which means that if you have an informative text in addition to your main text, you must concatenate it to the text parameter.</db:para>
<db:para>Note that the static function signatures have changed with respect to their button parameters, which are now used to set the <db:link xlink:href="qmessagebox.xml#standardButtons-prop">standard buttons</db:link> and the <db:link xlink:href="qmessagebox.xml#defaultButton">default button</db:link>.</db:para>
<db:para>Static functions are available for creating <db:link xlink:href="qmessagebox.xml#information">information</db:link>(), <db:link xlink:href="qmessagebox.xml#question">question</db:link>(), <db:link xlink:href="qmessagebox.xml#warning">warning</db:link>(), and <db:link xlink:href="qmessagebox.xml#critical">critical</db:link>() message boxes.</db:para>
<db:programlisting language="cpp">int ret = QMessageBox::warning(this, tr(&quot;My Application&quot;),
                               tr(&quot;The document has been modified.\n&quot;
                                  &quot;Do you want to save your changes?&quot;),
                               QMessageBox::Save | QMessageBox::Discard
                               | QMessageBox::Cancel,
                               QMessageBox::Save);
</db:programlisting>
<db:para>The <db:link xlink:href="qtwidgets-dialogs-standarddialogs-example.xml">Standard Dialogs</db:link> example shows how to use <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> and the other built-in Qt dialogs.</db:para>
</db:section>
<db:section xml:id="advanced-usage">
<db:title>Advanced Usage</db:title>
<db:para>If the <db:link xlink:href="qmessagebox.xml#StandardButton-enum">standard buttons</db:link> are not flexible enough for your message box, you can use the <db:link xlink:href="qmessagebox.xml#addButton">addButton</db:link>() overload that takes a text and a <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">ButtonRole</db:link> to add custom buttons. The <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">ButtonRole</db:link> is used by <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> to determine the ordering of the buttons on screen (which varies according to the platform). You can test the value of <db:link xlink:href="qmessagebox.xml#clickedButton">clickedButton</db:link>() after calling <db:link xlink:href="qmessagebox.xml#exec">exec</db:link>(). For example,</db:para>
<db:programlisting language="cpp">QMessageBox msgBox;
QPushButton *connectButton = msgBox.addButton(tr(&quot;Connect&quot;), QMessageBox::ActionRole);
QPushButton *abortButton = msgBox.addButton(QMessageBox::Abort);

msgBox.exec();

if (msgBox.clickedButton() == connectButton) {
    // connect
} else if (msgBox.clickedButton() == abortButton) {
    // abort
}
</db:programlisting>
</db:section>
<db:section xml:id="default-and-escape-keys">
<db:title>Default and Escape Keys</db:title>
<db:para>The default button (i.e., the button activated when <db:guilabel>Enter</db:guilabel> is pressed) can be specified using <db:link xlink:href="qmessagebox.xml#setDefaultButton">setDefaultButton</db:link>(). If a default button is not specified, <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> tries to find one based on the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">button roles</db:link> of the buttons used in the message box.</db:para>
<db:para>The escape button (the button activated when <db:guilabel>Esc</db:guilabel> is pressed) can be specified using <db:link xlink:href="qmessagebox.xml#setEscapeButton">setEscapeButton</db:link>(). If an escape button is not specified, <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> tries to find one using these rules:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>If there is only one button, it is the button activated when <db:guilabel>Esc</db:guilabel> is pressed.</db:para>
</db:listitem>
<db:listitem>
<db:para>If there is a <db:link xlink:href="qmessagebox.xml#StandardButton-enum">Cancel</db:link> button, it is the button activated when <db:guilabel>Esc</db:guilabel> is pressed.</db:para>
</db:listitem>
<db:listitem>
<db:para>If there is exactly one button having either <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">the Reject role</db:link> or the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">the No role</db:link>, it is the button activated when <db:guilabel>Esc</db:guilabel> is pressed.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>When an escape button can't be determined using these rules, pressing <db:guilabel>Esc</db:guilabel> has no effect.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdialogbuttonbox.xml">QDialogButtonBox</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-dialogs-standarddialogs-example.xml">Standard Dialogs Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ButtonRole-enum">
<db:title>enum QMessageBox::ButtonRole</db:title>
<db:enumsynopsis>
<db:enumname>ButtonRole</db:enumname>
<db:enumitem>
<db:enumidentifier>InvalidRole</db:enumidentifier>
<db:enumvalue>-1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AcceptRole</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RejectRole</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DestructiveRole</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ActionRole</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HelpRole</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>YesRole</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoRole</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ResetRole</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ApplyRole</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NRoles</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the roles that can be used to describe buttons in the button box. Combinations of these roles are as flags used to describe different aspects of their behavior.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::InvalidRole</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>The button is invalid.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::AcceptRole</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Clicking the button causes the dialog to be accepted (e.g. OK).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::RejectRole</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Clicking the button causes the dialog to be rejected (e.g. Cancel).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::DestructiveRole</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Clicking the button causes a destructive change (e.g. for Discarding Changes) and closes the dialog.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::ActionRole</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Clicking the button causes changes to the elements within the dialog.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::HelpRole</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The button can be clicked to request help.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::YesRole</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The button is a &quot;Yes&quot;-like button.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::NoRole</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The button is a &quot;No&quot;-like button.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::ApplyRole</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>The button applies current changes.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::ResetRole</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The button resets the dialog's fields to default values.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#StandardButton-enum">StandardButton</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Icon-enum">
<db:title>enum QMessageBox::Icon</db:title>
<db:enumsynopsis>
<db:enumname>Icon</db:enumname>
<db:enumitem>
<db:enumidentifier>NoIcon</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Information</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Warning</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Critical</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Question</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum has the following values:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::NoIcon</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>the message box does not have any icon.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::Question</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>an icon indicating that the message is asking a question.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::Information</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>an icon indicating that the message is nothing out of the ordinary.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::Warning</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>an icon indicating that the message is a warning, but can be dealt with.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::Critical</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>an icon indicating that the message represents a critical problem.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Option-enum">
<db:title>[since 6.6] enum QMessageBox::Option</db:title>
<db:bridgehead renderas="sect2">flags QMessageBox::Options</db:bridgehead>
<db:enumsynopsis>
<db:enumname>Option</db:enumname>
<db:enumitem>
<db:enumidentifier>DontUseNativeDialog</db:enumidentifier>
<db:enumvalue>0x00000001</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QMessageBox::Options</db:typedefname>
</db:typedefsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::<db:emphasis role="bold">Option</db:emphasis>::DontUseNativeDialog</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>Don't use the native message dialog.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 6.6.</db:para>
<db:para>The <db:code>Options</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Option&gt;. </db:code>It stores an OR combination of <db:code>Option</db:code> values.</db:para>
</db:section>
<db:section xml:id="StandardButton-enum">
<db:title>enum QMessageBox::StandardButton</db:title>
<db:bridgehead renderas="sect2">flags QMessageBox::StandardButtons</db:bridgehead>
<db:enumsynopsis>
<db:enumname>StandardButton</db:enumname>
<db:enumitem>
<db:enumidentifier>NoButton</db:enumidentifier>
<db:enumvalue>0x00000000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Ok</db:enumidentifier>
<db:enumvalue>0x00000400</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Save</db:enumidentifier>
<db:enumvalue>0x00000800</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SaveAll</db:enumidentifier>
<db:enumvalue>0x00001000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Open</db:enumidentifier>
<db:enumvalue>0x00002000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Yes</db:enumidentifier>
<db:enumvalue>0x00004000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>YesToAll</db:enumidentifier>
<db:enumvalue>0x00008000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>No</db:enumidentifier>
<db:enumvalue>0x00010000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoToAll</db:enumidentifier>
<db:enumvalue>0x00020000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Abort</db:enumidentifier>
<db:enumvalue>0x00040000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Retry</db:enumidentifier>
<db:enumvalue>0x00080000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Ignore</db:enumidentifier>
<db:enumvalue>0x00100000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Close</db:enumidentifier>
<db:enumvalue>0x00200000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Cancel</db:enumidentifier>
<db:enumvalue>0x00400000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Discard</db:enumidentifier>
<db:enumvalue>0x00800000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Help</db:enumidentifier>
<db:enumvalue>0x01000000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Apply</db:enumidentifier>
<db:enumvalue>0x02000000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Reset</db:enumidentifier>
<db:enumvalue>0x04000000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RestoreDefaults</db:enumidentifier>
<db:enumvalue>0x08000000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FirstButton</db:enumidentifier>
<db:enumvalue>Ok</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LastButton</db:enumidentifier>
<db:enumvalue>RestoreDefaults</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>YesAll</db:enumidentifier>
<db:enumvalue>YesToAll</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoAll</db:enumidentifier>
<db:enumvalue>NoToAll</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Default</db:enumidentifier>
<db:enumvalue>0x00000100</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Escape</db:enumidentifier>
<db:enumvalue>0x00000200</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FlagMask</db:enumidentifier>
<db:enumvalue>0x00000300</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ButtonMask</db:enumidentifier>
<db:enumvalue>~FlagMask</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QMessageBox::StandardButtons</db:typedefname>
</db:typedefsynopsis>
<db:para>These enums describe flags for standard buttons. Each button has a defined <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">ButtonRole</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::Ok</db:code></db:para>
</db:td>
<db:td><db:code>0x00000400</db:code></db:td>
<db:td>
<db:para>An &quot;OK&quot; button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">AcceptRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::Open</db:code></db:para>
</db:td>
<db:td><db:code>0x00002000</db:code></db:td>
<db:td>
<db:para>An &quot;Open&quot; button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">AcceptRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::Save</db:code></db:para>
</db:td>
<db:td><db:code>0x00000800</db:code></db:td>
<db:td>
<db:para>A &quot;Save&quot; button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">AcceptRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::Cancel</db:code></db:para>
</db:td>
<db:td><db:code>0x00400000</db:code></db:td>
<db:td>
<db:para>A &quot;Cancel&quot; button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">RejectRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::Close</db:code></db:para>
</db:td>
<db:td><db:code>0x00200000</db:code></db:td>
<db:td>
<db:para>A &quot;Close&quot; button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">RejectRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::Discard</db:code></db:para>
</db:td>
<db:td><db:code>0x00800000</db:code></db:td>
<db:td>
<db:para>A &quot;Discard&quot; or &quot;Don't Save&quot; button, depending on the platform, defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">DestructiveRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::Apply</db:code></db:para>
</db:td>
<db:td><db:code>0x02000000</db:code></db:td>
<db:td>
<db:para>An &quot;Apply&quot; button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">ApplyRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::Reset</db:code></db:para>
</db:td>
<db:td><db:code>0x04000000</db:code></db:td>
<db:td>
<db:para>A &quot;Reset&quot; button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">ResetRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::RestoreDefaults</db:code></db:para>
</db:td>
<db:td><db:code>0x08000000</db:code></db:td>
<db:td>
<db:para>A &quot;Restore Defaults&quot; button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">ResetRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::Help</db:code></db:para>
</db:td>
<db:td><db:code>0x01000000</db:code></db:td>
<db:td>
<db:para>A &quot;Help&quot; button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">HelpRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::SaveAll</db:code></db:para>
</db:td>
<db:td><db:code>0x00001000</db:code></db:td>
<db:td>
<db:para>A &quot;Save All&quot; button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">AcceptRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::Yes</db:code></db:para>
</db:td>
<db:td><db:code>0x00004000</db:code></db:td>
<db:td>
<db:para>A &quot;Yes&quot; button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">YesRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::YesToAll</db:code></db:para>
</db:td>
<db:td><db:code>0x00008000</db:code></db:td>
<db:td>
<db:para>A &quot;Yes to All&quot; button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">YesRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::No</db:code></db:para>
</db:td>
<db:td><db:code>0x00010000</db:code></db:td>
<db:td>
<db:para>A &quot;No&quot; button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">NoRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::NoToAll</db:code></db:para>
</db:td>
<db:td><db:code>0x00020000</db:code></db:td>
<db:td>
<db:para>A &quot;No to All&quot; button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">NoRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::Abort</db:code></db:para>
</db:td>
<db:td><db:code>0x00040000</db:code></db:td>
<db:td>
<db:para>An &quot;Abort&quot; button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">RejectRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::Retry</db:code></db:para>
</db:td>
<db:td><db:code>0x00080000</db:code></db:td>
<db:td>
<db:para>A &quot;Retry&quot; button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">AcceptRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::Ignore</db:code></db:para>
</db:td>
<db:td><db:code>0x00100000</db:code></db:td>
<db:td>
<db:para>An &quot;Ignore&quot; button defined with the <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">AcceptRole</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::NoButton</db:code></db:para>
</db:td>
<db:td><db:code>0x00000000</db:code></db:td>
<db:td>
<db:para>An invalid button.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The following values are obsolete:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::YesAll</db:code></db:para>
</db:td>
<db:td><db:code>YesToAll</db:code></db:td>
<db:td>
<db:para>Use YesToAll instead.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::NoAll</db:code></db:para>
</db:td>
<db:td><db:code>NoToAll</db:code></db:td>
<db:td>
<db:para>Use NoToAll instead.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::Default</db:code></db:para>
</db:td>
<db:td><db:code>0x00000100</db:code></db:td>
<db:td>
<db:para>Use the defaultButton argument of <db:link xlink:href="qmessagebox.xml#information">information</db:link>(), <db:link xlink:href="qmessagebox.xml#warning">warning</db:link>(), etc. instead, or call <db:link xlink:href="qmessagebox.xml#setDefaultButton">setDefaultButton</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::Escape</db:code></db:para>
</db:td>
<db:td><db:code>0x00000200</db:code></db:td>
<db:td>
<db:para>Call <db:link xlink:href="qmessagebox.xml#setEscapeButton">setEscapeButton</db:link>() instead.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::FlagMask</db:code></db:para>
</db:td>
<db:td><db:code>0x00000300</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:emphasis>::ButtonMask</db:code></db:para>
</db:td>
<db:td><db:code>~FlagMask</db:code></db:td>
<db:td/>
</db:tr>
</db:informaltable>
<db:para>The <db:code>StandardButtons</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;StandardButton&gt;. </db:code>It stores an OR combination of <db:code>StandardButton</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#ButtonRole-enum">ButtonRole</db:link></db:member>
<db:member><db:link xlink:href="qmessagebox.xml#standardButtons-prop">standardButtons</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="detailedText-prop">
<db:title>detailedText : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>detailedText</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">detailedText</db:synopsisinfo>
<db:synopsisinfo role="setter">setDetailedText</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the text to be displayed in the details area.</db:para>
<db:para>The text will be interpreted as a plain text.</db:para>
<db:para>By default, this property contains an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">detailedText</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDetailedText</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>text</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#text-prop">QMessageBox::text</db:link></db:member>
<db:member><db:link xlink:href="qmessagebox.xml#informativeText-prop">QMessageBox::informativeText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="icon-prop">
<db:title>icon : Icon</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Icon</db:type>
<db:varname>icon</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">icon</db:synopsisinfo>
<db:synopsisinfo role="setter">setIcon</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the message box's icon</db:para>
<db:para>The icon of the message box can be specified with one of the values:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#Icon-enum">QMessageBox::NoIcon</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#Icon-enum">QMessageBox::Question</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#Icon-enum">QMessageBox::Information</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#Icon-enum">QMessageBox::Warning</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#Icon-enum">QMessageBox::Critical</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The default is <db:link xlink:href="qmessagebox.xml#Icon-enum">QMessageBox::NoIcon</db:link>.</db:para>
<db:para>The pixmap used to display the actual icon depends on the current <db:link xlink:href="qwidget.xml#style">GUI style</db:link>. You can also set a custom pixmap for the icon by setting the <db:link xlink:href="qmessagebox.xml#iconPixmap-prop">icon pixmap</db:link> property.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmessagebox.xml#Icon-enum">QMessageBox::Icon</db:link></db:type> <db:emphasis role="bold">icon</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setIcon</db:emphasis>(<db:emphasis>QMessageBox::Icon</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#iconPixmap-prop">iconPixmap</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="iconPixmap-prop">
<db:title>iconPixmap : QPixmap</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPixmap</db:type>
<db:varname>iconPixmap</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">iconPixmap</db:synopsisinfo>
<db:synopsisinfo role="setter">setIconPixmap</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current icon</db:para>
<db:para>The icon currently used by the message box. Note that it's often hard to draw one pixmap that looks appropriate in all GUI styles; you may want to supply a different pixmap for each platform.</db:para>
<db:para>By default, this property is undefined.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpixmap.xml">QPixmap</db:link></db:type> <db:emphasis role="bold">iconPixmap</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setIconPixmap</db:emphasis>(const <db:type><db:link xlink:href="qpixmap.xml">QPixmap</db:link></db:type> &amp;<db:emphasis>pixmap</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#icon">icon</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="informativeText-prop">
<db:title>informativeText : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>informativeText</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">informativeText</db:synopsisinfo>
<db:synopsisinfo role="setter">setInformativeText</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the informative text that provides a fuller description for the message</db:para>
<db:para>Informative text can be used to expand upon the <db:link xlink:href="qmessagebox.xml#text-prop">text</db:link>() to give more information to the user, for example describing the consequences of the situation, or suggestion alternative solutions.</db:para>
<db:para>By default, this property contains an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">informativeText</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setInformativeText</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>text</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#text-prop">QMessageBox::text</db:link></db:member>
<db:member><db:link xlink:href="qmessagebox.xml#detailedText-prop">QMessageBox::detailedText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="options-prop">
<db:title>[since 6.6] options : Options</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Options</db:type>
<db:varname>options</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">options</db:synopsisinfo>
<db:synopsisinfo role="setter">setOptions</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Options that affect the look and feel of the dialog.</db:para>
<db:para>By default, these options are disabled.</db:para>
<db:para>The option <db:link xlink:href="qmessagebox.xml#Option-enum">Option::DontUseNativeDialog</db:link> should be set before changing dialog properties or showing the dialog.</db:para>
<db:para>Setting options while the dialog is visible is not guaranteed to have an immediate effect on the dialog.</db:para>
<db:para>Setting options after changing other properties may cause these values to have no effect.</db:para>
<db:para>This property was introduced in Qt 6.6.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmessagebox.xml#Option-enum">QMessageBox::Options</db:link></db:type> <db:emphasis role="bold">options</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOptions</db:emphasis>(<db:type><db:link xlink:href="qmessagebox.xml#Option-enum">QMessageBox::Options</db:link></db:type> <db:emphasis>options</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#setOption">setOption</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#testOption">testOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="standardButtons-prop">
<db:title>standardButtons : StandardButtons</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>StandardButtons</db:type>
<db:varname>standardButtons</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">standardButtons</db:synopsisinfo>
<db:synopsisinfo role="setter">setStandardButtons</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>collection of standard buttons in the message box</db:para>
<db:para>This property controls which standard buttons are used by the message box.</db:para>
<db:para>By default, this property contains no standard buttons.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::StandardButtons</db:link></db:type> <db:emphasis role="bold">standardButtons</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setStandardButtons</db:emphasis>(<db:type><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::StandardButtons</db:link></db:type> <db:emphasis>buttons</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#addButton">addButton</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text-prop">
<db:title>text : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>text</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">text</db:synopsisinfo>
<db:synopsisinfo role="setter">setText</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the message box text to be displayed.</db:para>
<db:para>The text should be a brief sentence or phrase that describes the situation, ideally formulated as a neutral statement, or a call-to-action question.</db:para>
<db:para>The text will be interpreted either as a plain text or as rich text, depending on the text format setting (<db:link xlink:href="qmessagebox.xml#textFormat-prop">QMessageBox::textFormat</db:link>). The default setting is <db:link xlink:href="qt.xml#TextFormat-enum">Qt::AutoText</db:link>, i.e., the message box will try to auto-detect the format of the text.</db:para>
<db:para>The default value of this property is an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">text</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setText</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>text</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#textFormat-prop">textFormat</db:link></db:member>
<db:member><db:link xlink:href="qmessagebox.xml#informativeText-prop">QMessageBox::informativeText</db:link></db:member>
<db:member><db:link xlink:href="qmessagebox.xml#detailedText-prop">QMessageBox::detailedText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textFormat-prop">
<db:title>textFormat : Qt::TextFormat</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::TextFormat</db:type>
<db:varname>textFormat</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">textFormat</db:synopsisinfo>
<db:synopsisinfo role="setter">setTextFormat</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the format of the text displayed by the message box</db:para>
<db:para>The current text format used by the message box. See the <db:link xlink:href="qt.xml#TextFormat-enum">Qt::TextFormat</db:link> enum for an explanation of the possible options.</db:para>
<db:para>The default format is <db:link xlink:href="qt.xml#TextFormat-enum">Qt::AutoText</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#TextFormat-enum">Qt::TextFormat</db:link></db:type> <db:emphasis role="bold">textFormat</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTextFormat</db:emphasis>(<db:type><db:link xlink:href="qt.xml#TextFormat-enum">Qt::TextFormat</db:link></db:type> <db:emphasis>format</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#text-prop">setText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textInteractionFlags-prop">
<db:title>textInteractionFlags : Qt::TextInteractionFlags</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::TextInteractionFlags</db:type>
<db:varname>textInteractionFlags</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">textInteractionFlags</db:synopsisinfo>
<db:synopsisinfo role="setter">setTextInteractionFlags</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Specifies how the label of the message box should interact with user input.</db:para>
<db:para>The default value depends on the style.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#TextInteractionFlag-enum">Qt::TextInteractionFlags</db:link></db:type> <db:emphasis role="bold">textInteractionFlags</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTextInteractionFlags</db:emphasis>(<db:type><db:link xlink:href="qt.xml#TextInteractionFlag-enum">Qt::TextInteractionFlags</db:link></db:type> <db:emphasis>flags</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyle.xml#StyleHint-enum">QStyle::SH_MessageBox_TextInteractionFlags</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMessageBox">
<db:title>[explicit] QMessageBox::QMessageBox(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QMessageBox</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMessageBox(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an <db:link xlink:href="qt.xml#WindowModality-enum">application modal</db:link> message box with no text and no buttons. <db:code role="parameter">parent</db:code> is passed to the <db:link xlink:href="qdialog.xml">QDialog</db:link> constructor.</db:para>
<db:para>The window modality can be overridden via <db:link xlink:href="qmessagebox.xml#setWindowModality">setWindowModality</db:link>() before calling <db:link xlink:href="qwidget.xml#show">show</db:link>().</db:para>
<db:note>
<db:para>Using <db:link xlink:href="qmessagebox.xml#open">open</db:link>() or <db:link xlink:href="qmessagebox.xml#exec">exec</db:link>() to show the message box affects the window modality. Please see the detailed documentation for each function for more information.</db:para>
</db:note>
<db:para>On macOS, if you want your message box to appear as a <db:link xlink:href="qt.xml#WindowType-enum">Qt::Sheet</db:link> of its <db:code role="parameter">parent</db:code>, set the message box's <db:link xlink:href="qmessagebox.xml#setWindowModality">window modality</db:link> to <db:link xlink:href="qt.xml#WindowModality-enum">Qt::WindowModal</db:link> or use <db:link xlink:href="qmessagebox.xml#open">open</db:link>(). Otherwise, the message box will be a standard dialog.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#setWindowTitle">setWindowTitle</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#text-prop">setText</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#icon-prop">setIcon</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#standardButtons-prop">setStandardButtons</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#setWindowModality">setWindowModality</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QMessageBox-1">
<db:title>QMessageBox::QMessageBox(QMessageBox::Icon <db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, QMessageBox::StandardButtons <db:emphasis>buttons</db:emphasis> = NoButton, QWidget *<db:emphasis>parent</db:emphasis> = nullptr, Qt::WindowFlags <db:emphasis>f</db:emphasis> = Qt::Dialog | Qt::MSWindowsFixedSizeDialogHint)</db:title>
<db:constructorsynopsis>
<db:methodname>QMessageBox</db:methodname>
<db:methodparam>
<db:type>QMessageBox::Icon</db:type>
<db:parameter>icon</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>title</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QMessageBox::StandardButtons</db:type>
<db:parameter>buttons</db:parameter>
<db:initializer>NoButton</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::WindowFlags</db:type>
<db:parameter>f</db:parameter>
<db:initializer>Qt::Dialog | Qt::MSWindowsFixedSizeDialogHint</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMessageBox(QMessageBox::Icon icon, const QString &amp;title, const QString &amp;text, QMessageBox::StandardButtons buttons, QWidget *parent, Qt::WindowFlags f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an <db:link xlink:href="qt.xml#WindowModality-enum">application modal</db:link> message box with the given <db:code role="parameter">icon</db:code>, <db:code role="parameter">title</db:code>, <db:code role="parameter">text</db:code>, and standard <db:code role="parameter">buttons</db:code>. Standard or custom buttons can be added at any time using <db:link xlink:href="qmessagebox.xml#addButton">addButton</db:link>(). The <db:code role="parameter">parent</db:code> and <db:code role="parameter">f</db:code> arguments are passed to the <db:link xlink:href="qdialog.xml">QDialog</db:link> constructor.</db:para>
<db:para>The window modality can be overridden via <db:link xlink:href="qmessagebox.xml#setWindowModality">setWindowModality</db:link>() before calling <db:link xlink:href="qwidget.xml#show">show</db:link>().</db:para>
<db:note>
<db:para>Using <db:link xlink:href="qmessagebox.xml#open">open</db:link>() or <db:link xlink:href="qmessagebox.xml#exec">exec</db:link>() to show the message box affects the window modality. Please see the detailed documentation for each function for more information.</db:para>
</db:note>
<db:para>On macOS, if <db:code role="parameter">parent</db:code> is not nullptr and you want your message box to appear as a <db:link xlink:href="qt.xml#WindowType-enum">Qt::Sheet</db:link> of that parent, set the message box's <db:link xlink:href="qmessagebox.xml#setWindowModality">window modality</db:link> to <db:link xlink:href="qt.xml#WindowModality-enum">Qt::WindowModal</db:link> (default). Otherwise, the message box will be a standard dialog.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#setWindowTitle">setWindowTitle</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#text-prop">setText</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#icon-prop">setIcon</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#standardButtons-prop">setStandardButtons</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#setWindowModality">setWindowModality</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QMessageBox">
<db:title>[virtual] QMessageBox::~QMessageBox()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QMessageBox</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QMessageBox()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the message box.</db:para>
</db:section>
<db:section xml:id="about">
<db:title>[static] void QMessageBox::about(QWidget *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>about</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>title</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void about(QWidget *parent, const QString &amp;title, const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Displays a simple about box with title <db:code role="parameter">title</db:code> and text <db:code role="parameter">text</db:code>. The about box's parent is <db:code role="parameter">parent</db:code>.</db:para>
<db:para>about() looks for a suitable icon in four locations:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>It prefers <db:link xlink:href="qwidget.xml#windowIcon-prop">parent-&gt;icon</db:link>() if that exists.</db:para>
</db:listitem>
<db:listitem>
<db:para>If not, it tries the top-level widget containing <db:code role="parameter">parent</db:code>.</db:para>
</db:listitem>
<db:listitem>
<db:para>If that fails, it tries the <db:link xlink:href="qapplication.xml#activeWindow">active window.</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>As a last resort it uses the Information icon.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>The about box has a single button labelled &quot;OK&quot;.</db:para>
<db:para>On macOS, the about box is popped up as a modeless window; on other platforms, it is currently application modal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#windowIcon-prop">QWidget::windowIcon</db:link>()</db:member>
<db:member><db:link xlink:href="qapplication.xml#activeWindow">QApplication::activeWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="aboutQt">
<db:title>[static] void QMessageBox::aboutQt(QWidget *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>aboutQt</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>title</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void aboutQt(QWidget *parent, const QString &amp;title)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Displays a simple message box about Qt, with the given <db:code role="parameter">title</db:code> and centered over <db:code role="parameter">parent</db:code> (if <db:code role="parameter">parent</db:code> is not nullptr). The message includes the version number of Qt being used by the application.</db:para>
<db:para>This is useful for inclusion in the <db:guilabel>Help</db:guilabel> menu of an application, as shown in the <db:link xlink:href="qtwidgets-mainwindows-menus-example.xml">Menus</db:link> example.</db:para>
<db:para><db:link xlink:href="qapplication.xml">QApplication</db:link> provides this functionality as a slot.</db:para>
<db:para>On macOS, the aboutQt box is popped up as a modeless window; on other platforms, it is currently application modal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#aboutQt">QApplication::aboutQt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addButton">
<db:title>void QMessageBox::addButton(QAbstractButton *<db:emphasis>button</db:emphasis>, QMessageBox::ButtonRole <db:emphasis>role</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addButton</db:methodname>
<db:methodparam>
<db:type>QAbstractButton *</db:type>
<db:parameter>button</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QMessageBox::ButtonRole</db:type>
<db:parameter>role</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addButton(QAbstractButton *button, QMessageBox::ButtonRole role)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the given <db:code role="parameter">button</db:code> to the message box with the specified <db:code role="parameter">role</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#removeButton">removeButton</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#button">button</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#standardButtons-prop">setStandardButtons</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addButton-1">
<db:title>QPushButton *QMessageBox::addButton(const QString &amp;<db:emphasis>text</db:emphasis>, QMessageBox::ButtonRole <db:emphasis>role</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPushButton *</db:type>
<db:methodname>addButton</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QMessageBox::ButtonRole</db:type>
<db:parameter>role</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPushButton * addButton(const QString &amp;text, QMessageBox::ButtonRole role)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a button with the given <db:code role="parameter">text</db:code>, adds it to the message box for the specified <db:code role="parameter">role</db:code>, and returns it.</db:para>
</db:section>
<db:section xml:id="addButton-2">
<db:title>QPushButton *QMessageBox::addButton(QMessageBox::StandardButton <db:emphasis>button</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPushButton *</db:type>
<db:methodname>addButton</db:methodname>
<db:methodparam>
<db:type>QMessageBox::StandardButton</db:type>
<db:parameter>button</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QPushButton * addButton(QMessageBox::StandardButton button)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds a standard <db:code role="parameter">button</db:code> to the message box if it is valid to do so, and returns the push button.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#standardButtons-prop">setStandardButtons</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="button">
<db:title>QAbstractButton *QMessageBox::button(QMessageBox::StandardButton <db:emphasis>which</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractButton *</db:type>
<db:methodname>button</db:methodname>
<db:methodparam>
<db:type>QMessageBox::StandardButton</db:type>
<db:parameter>which</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractButton * button(QMessageBox::StandardButton which) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer corresponding to the standard button <db:code role="parameter">which</db:code>, or nullptr if the standard button doesn't exist in this message box.</db:para>
<db:note>
<db:para>Modifying the properties of the returned button may not be reflected in native implementations of the message dialog. To customize dialog buttons add a <db:link xlink:href="qmessagebox.xml#addButton">custom button</db:link> or <db:link xlink:href="qmessagebox.xml#addButton-1">button title</db:link> instead, or set the <db:link xlink:href="qmessagebox.xml#Option-enum">Option::DontUseNativeDialog</db:link> option.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#standardButtons-prop">standardButtons</db:link></db:member>
<db:member><db:link xlink:href="qmessagebox.xml#standardButton">standardButton</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="buttonClicked">
<db:title>void QMessageBox::buttonClicked(QAbstractButton *<db:emphasis>button</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>buttonClicked</db:methodname>
<db:methodparam>
<db:type>QAbstractButton *</db:type>
<db:parameter>button</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void buttonClicked(QAbstractButton *button)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a button is clicked inside the <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link>. The button that was clicked in returned in <db:code role="parameter">button</db:code>.</db:para>
</db:section>
<db:section xml:id="buttonRole">
<db:title>QMessageBox::ButtonRole QMessageBox::buttonRole(QAbstractButton *<db:emphasis>button</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMessageBox::ButtonRole</db:type>
<db:methodname>buttonRole</db:methodname>
<db:methodparam>
<db:type>QAbstractButton *</db:type>
<db:parameter>button</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMessageBox::ButtonRole buttonRole(QAbstractButton *button) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the button role for the specified <db:code role="parameter">button</db:code>. This function returns <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">InvalidRole</db:link> if <db:code role="parameter">button</db:code> is nullptr or has not been added to the message box.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#buttons">buttons</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#addButton">addButton</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="buttons">
<db:title>QList&lt;QAbstractButton *&gt; QMessageBox::buttons() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QAbstractButton *&gt;</db:type>
<db:methodname>buttons</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QAbstractButton *&gt; buttons() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of all the buttons that have been added to the message box.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#buttonRole">buttonRole</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#addButton">addButton</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#removeButton">removeButton</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QMessageBox::changeEvent(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>changeEvent</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void changeEvent(QEvent *ev) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="checkBox">
<db:title>QCheckBox *QMessageBox::checkBox() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCheckBox *</db:type>
<db:methodname>checkBox</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCheckBox * checkBox() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the checkbox shown on the dialog. This is nullptr if no checkbox is set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#setCheckBox">setCheckBox</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clickedButton">
<db:title>QAbstractButton *QMessageBox::clickedButton() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractButton *</db:type>
<db:methodname>clickedButton</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractButton * clickedButton() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the button that was clicked by the user, or nullptr if the user hit the <db:guilabel>Esc</db:guilabel> key and no <db:link xlink:href="qmessagebox.xml#setEscapeButton">escape button</db:link> was set.</db:para>
<db:para>If <db:link xlink:href="qmessagebox.xml#exec">exec</db:link>() hasn't been called yet, returns nullptr.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QMessageBox messageBox(this);
QAbstractButton *disconnectButton =
      messageBox.addButton(tr(&quot;Disconnect&quot;), QMessageBox::ActionRole);
...
messageBox.exec();
if (messageBox.clickedButton() == disconnectButton) {
    ...
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#standardButton">standardButton</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#button">button</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="closeEvent">
<db:title>[override virtual protected] void QMessageBox::closeEvent(QCloseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>closeEvent</db:methodname>
<db:methodparam>
<db:type>QCloseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void closeEvent(QCloseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#closeEvent" role="function">QDialog::closeEvent(QCloseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="critical">
<db:title>[static] QMessageBox::StandardButton QMessageBox::critical(QWidget *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, QMessageBox::StandardButtons <db:emphasis>buttons</db:emphasis> = Ok, QMessageBox::StandardButton <db:emphasis>defaultButton</db:emphasis> = NoButton)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QMessageBox::StandardButton</db:type>
<db:methodname>critical</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>title</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QMessageBox::StandardButtons</db:type>
<db:parameter>buttons</db:parameter>
<db:initializer>Ok</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QMessageBox::StandardButton</db:type>
<db:parameter>defaultButton</db:parameter>
<db:initializer>NoButton</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMessageBox::StandardButton critical(QWidget *parent, const QString &amp;title, const QString &amp;text, QMessageBox::StandardButtons buttons, QMessageBox::StandardButton defaultButton)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Opens a critical message box with the given <db:code role="parameter">title</db:code> and <db:code role="parameter">text</db:code> in front of the specified <db:code role="parameter">parent</db:code> widget.</db:para>
<db:para>The standard <db:code role="parameter">buttons</db:code> are added to the message box. <db:code role="parameter">defaultButton</db:code> specifies the button used when <db:guilabel>Enter</db:guilabel> is pressed. <db:code role="parameter">defaultButton</db:code> must refer to a button that was given in <db:code role="parameter">buttons</db:code>. If <db:code role="parameter">defaultButton</db:code> is <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::NoButton</db:link>, <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> chooses a suitable default automatically.</db:para>
<db:para>Returns the identity of the standard button that was clicked. If <db:guilabel>Esc</db:guilabel> was pressed instead, the <db:link xlink:href="qmessagebox.xml#default-and-escape-keys">escape button</db:link> is returned.</db:para>
<db:para>The message box is an <db:link xlink:href="qt.xml#WindowModality-enum">application modal</db:link> dialog box.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#question">question</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#warning">warning</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#information">information</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultButton">
<db:title>QPushButton *QMessageBox::defaultButton() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPushButton *</db:type>
<db:methodname>defaultButton</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPushButton * defaultButton() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the button that should be the message box's <db:link xlink:href="qpushbutton.xml#default-prop">default button</db:link>. Returns nullptr if no default button was set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#setDefaultButton">setDefaultButton</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#addButton">addButton</db:link>()</db:member>
<db:member><db:link xlink:href="qpushbutton.xml#default-prop">QPushButton::setDefault</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="escapeButton">
<db:title>QAbstractButton *QMessageBox::escapeButton() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractButton *</db:type>
<db:methodname>escapeButton</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractButton * escapeButton() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the button that is activated when escape is pressed.</db:para>
<db:para>By default, <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> attempts to automatically detect an escape button as follows:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>If there is only one button, it is made the escape button.</db:para>
</db:listitem>
<db:listitem>
<db:para>If there is a <db:link xlink:href="qmessagebox.xml#StandardButton-enum">Cancel</db:link> button, it is made the escape button.</db:para>
</db:listitem>
<db:listitem>
<db:para>On macOS only, if there is exactly one button with the role <db:link xlink:href="qmessagebox.xml#ButtonRole-enum">QMessageBox::RejectRole</db:link>, it is made the escape button.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>When an escape button could not be automatically detected, pressing <db:guilabel>Esc</db:guilabel> has no effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#setEscapeButton">setEscapeButton</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#addButton">addButton</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QMessageBox::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="exec">
<db:title>[override virtual] int QMessageBox::exec()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>int</db:type>
<db:methodname>exec</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int exec() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#exec" role="function">QDialog::exec()</db:link>.</db:para>
<db:para>Shows the message box as a <db:link xlink:href="qdialog.xml#modal-dialogs">modal dialog</db:link>, blocking until the user closes it.</db:para>
<db:para>When using a <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> with standard buttons, this function returns a <db:link xlink:href="qmessagebox.xml#StandardButton-enum">StandardButton</db:link> value indicating the standard button that was clicked. When using <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> with custom buttons, this function returns an opaque value; use <db:link xlink:href="qmessagebox.xml#clickedButton">clickedButton</db:link>() to determine which button was clicked.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qdialog.xml#result">result</db:link>() function returns also <db:link xlink:href="qmessagebox.xml#StandardButton-enum">StandardButton</db:link> value instead of <db:link xlink:href="qdialog.xml#DialogCode-enum">QDialog::DialogCode</db:link>.</db:para>
</db:note>
<db:para>Users cannot interact with any other window in the same application until they close the dialog, either by clicking a button or by using a mechanism provided by the window system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#show">show</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#result">result</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="information">
<db:title>[static] QMessageBox::StandardButton QMessageBox::information(QWidget *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, QMessageBox::StandardButtons <db:emphasis>buttons</db:emphasis> = Ok, QMessageBox::StandardButton <db:emphasis>defaultButton</db:emphasis> = NoButton)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QMessageBox::StandardButton</db:type>
<db:methodname>information</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>title</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QMessageBox::StandardButtons</db:type>
<db:parameter>buttons</db:parameter>
<db:initializer>Ok</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QMessageBox::StandardButton</db:type>
<db:parameter>defaultButton</db:parameter>
<db:initializer>NoButton</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMessageBox::StandardButton information(QWidget *parent, const QString &amp;title, const QString &amp;text, QMessageBox::StandardButtons buttons, QMessageBox::StandardButton defaultButton)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Opens an information message box with the given <db:code role="parameter">title</db:code> and <db:code role="parameter">text</db:code> in front of the specified <db:code role="parameter">parent</db:code> widget.</db:para>
<db:para>The standard <db:code role="parameter">buttons</db:code> are added to the message box. <db:code role="parameter">defaultButton</db:code> specifies the button used when <db:guilabel>Enter</db:guilabel> is pressed. <db:code role="parameter">defaultButton</db:code> must refer to a button that was given in <db:code role="parameter">buttons</db:code>. If <db:code role="parameter">defaultButton</db:code> is <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::NoButton</db:link>, <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> chooses a suitable default automatically.</db:para>
<db:para>Returns the identity of the standard button that was clicked. If <db:guilabel>Esc</db:guilabel> was pressed instead, the <db:link xlink:href="qmessagebox.xml#default-and-escape-keys">escape button</db:link> is returned.</db:para>
<db:para>The message box is an <db:link xlink:href="qt.xml#WindowModality-enum">application modal</db:link> dialog box.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#question">question</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#warning">warning</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#critical">critical</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QMessageBox::keyPressEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>keyPressEvent</db:methodname>
<db:methodparam>
<db:type>QKeyEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyPressEvent(QKeyEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#keyPressEvent" role="function">QDialog::keyPressEvent(QKeyEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="open">
<db:title>void QMessageBox::open(QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>member</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>open</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>receiver</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>member</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void open(QObject *receiver, const char *member)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Opens the dialog and connects its <db:link xlink:href="qdialog.xml#finished">finished</db:link>() or <db:link xlink:href="qmessagebox.xml#buttonClicked">buttonClicked</db:link>() signal to the slot specified by <db:code role="parameter">receiver</db:code> and <db:code role="parameter">member</db:code>. If the slot in <db:code role="parameter">member</db:code> has a pointer for its first parameter the connection is to <db:link xlink:href="qmessagebox.xml#buttonClicked">buttonClicked</db:link>(), otherwise the connection is to <db:link xlink:href="qdialog.xml#finished">finished</db:link>().</db:para>
<db:para>The signal will be disconnected from the slot when the dialog is closed.</db:para>
</db:section>
<db:section xml:id="question">
<db:title>[static] QMessageBox::StandardButton QMessageBox::question(QWidget *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, QMessageBox::StandardButtons <db:emphasis>buttons</db:emphasis> = StandardButtons(Yes | No), QMessageBox::StandardButton <db:emphasis>defaultButton</db:emphasis> = NoButton)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QMessageBox::StandardButton</db:type>
<db:methodname>question</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>title</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QMessageBox::StandardButtons</db:type>
<db:parameter>buttons</db:parameter>
<db:initializer>StandardButtons(Yes | No)</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QMessageBox::StandardButton</db:type>
<db:parameter>defaultButton</db:parameter>
<db:initializer>NoButton</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMessageBox::StandardButton question(QWidget *parent, const QString &amp;title, const QString &amp;text, QMessageBox::StandardButtons buttons, QMessageBox::StandardButton defaultButton)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Opens a question message box with the given <db:code role="parameter">title</db:code> and <db:code role="parameter">text</db:code> in front of the specified <db:code role="parameter">parent</db:code> widget.</db:para>
<db:para>The standard <db:code role="parameter">buttons</db:code> are added to the message box. <db:code role="parameter">defaultButton</db:code> specifies the button used when <db:guilabel>Enter</db:guilabel> is pressed. <db:code role="parameter">defaultButton</db:code> must refer to a button that was given in <db:code role="parameter">buttons</db:code>. If <db:code role="parameter">defaultButton</db:code> is <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::NoButton</db:link>, <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> chooses a suitable default automatically.</db:para>
<db:para>Returns the identity of the standard button that was clicked. If <db:guilabel>Esc</db:guilabel> was pressed instead, the <db:link xlink:href="qmessagebox.xml#default-and-escape-keys">escape button</db:link> is returned.</db:para>
<db:para>The message box is an <db:link xlink:href="qt.xml#WindowModality-enum">application modal</db:link> dialog box.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#information">information</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#warning">warning</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#critical">critical</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeButton">
<db:title>void QMessageBox::removeButton(QAbstractButton *<db:emphasis>button</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeButton</db:methodname>
<db:methodparam>
<db:type>QAbstractButton *</db:type>
<db:parameter>button</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeButton(QAbstractButton *button)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes <db:code role="parameter">button</db:code> from the button box without deleting it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#addButton">addButton</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#standardButtons-prop">setStandardButtons</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QMessageBox::resizeEvent(QResizeEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>resizeEvent</db:methodname>
<db:methodparam>
<db:type>QResizeEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resizeEvent(QResizeEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#resizeEvent" role="function">QDialog::resizeEvent(QResizeEvent *)</db:link>.</db:para>
</db:section>
<db:section xml:id="setCheckBox">
<db:title>void QMessageBox::setCheckBox(QCheckBox *<db:emphasis>cb</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCheckBox</db:methodname>
<db:methodparam>
<db:type>QCheckBox *</db:type>
<db:parameter>cb</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCheckBox(QCheckBox *cb)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the checkbox <db:code role="parameter">cb</db:code> on the message dialog. The message box takes ownership of the checkbox. The argument <db:code role="parameter">cb</db:code> can be nullptr to remove an existing checkbox from the message box.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#checkBox">checkBox</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDefaultButton">
<db:title>void QMessageBox::setDefaultButton(QPushButton *<db:emphasis>button</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDefaultButton</db:methodname>
<db:methodparam>
<db:type>QPushButton *</db:type>
<db:parameter>button</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDefaultButton(QPushButton *button)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the message box's <db:link xlink:href="qpushbutton.xml#default-prop">default button</db:link> to <db:code role="parameter">button</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#defaultButton">defaultButton</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#addButton">addButton</db:link>()</db:member>
<db:member><db:link xlink:href="qpushbutton.xml#default-prop">QPushButton::setDefault</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDefaultButton-1">
<db:title>void QMessageBox::setDefaultButton(QMessageBox::StandardButton <db:emphasis>button</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDefaultButton</db:methodname>
<db:methodparam>
<db:type>QMessageBox::StandardButton</db:type>
<db:parameter>button</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDefaultButton(QMessageBox::StandardButton button)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the message box's <db:link xlink:href="qpushbutton.xml#default-prop">default button</db:link> to <db:code role="parameter">button</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#addButton">addButton</db:link>()</db:member>
<db:member><db:link xlink:href="qpushbutton.xml#default-prop">QPushButton::setDefault</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEscapeButton">
<db:title>void QMessageBox::setEscapeButton(QAbstractButton *<db:emphasis>button</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEscapeButton</db:methodname>
<db:methodparam>
<db:type>QAbstractButton *</db:type>
<db:parameter>button</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEscapeButton(QAbstractButton *button)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the button that gets activated when the <db:guilabel>Escape</db:guilabel> key is pressed to <db:code role="parameter">button</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#escapeButton">escapeButton</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#addButton">addButton</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#clickedButton">clickedButton</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEscapeButton-1">
<db:title>void QMessageBox::setEscapeButton(QMessageBox::StandardButton <db:emphasis>button</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEscapeButton</db:methodname>
<db:methodparam>
<db:type>QMessageBox::StandardButton</db:type>
<db:parameter>button</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEscapeButton(QMessageBox::StandardButton button)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the buttons that gets activated when the <db:guilabel>Escape</db:guilabel> key is pressed to <db:code role="parameter">button</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#addButton">addButton</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#clickedButton">clickedButton</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOption">
<db:title>[since 6.6] void QMessageBox::setOption(QMessageBox::Option <db:emphasis>option</db:emphasis>, bool <db:emphasis>on</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOption</db:methodname>
<db:methodparam>
<db:type>QMessageBox::Option</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>on</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOption(QMessageBox::Option option, bool on)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the given <db:code role="parameter">option</db:code> to be enabled if <db:code role="parameter">on</db:code> is true; otherwise, clears the given <db:code role="parameter">option</db:code>.</db:para>
<db:para>Options (particularly the <db:link xlink:href="qmessagebox.xml#Option-enum">Option::DontUseNativeDialog</db:link> option) should be set before showing the dialog.</db:para>
<db:para>Setting options while the dialog is visible is not guaranteed to have an immediate effect on the dialog.</db:para>
<db:para>Setting options after changing other properties may cause these values to have no effect.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-tooling-qmlformat.xml#options">options</db:link></db:member>
<db:member><db:link xlink:href="qmessagebox.xml#testOption">testOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWindowModality">
<db:title>void QMessageBox::setWindowModality(Qt::WindowModality <db:emphasis>windowModality</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWindowModality</db:methodname>
<db:methodparam>
<db:type>Qt::WindowModality</db:type>
<db:parameter>windowModality</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWindowModality(Qt::WindowModality windowModality)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function shadows <db:link xlink:href="qwidget.xml#windowModality-prop">QWidget::setWindowModality</db:link>().</db:para>
<db:para>Sets the modality of the message box to <db:code role="parameter">windowModality</db:code>.</db:para>
<db:para>On macOS, if the modality is set to <db:link xlink:href="qt.xml#WindowModality-enum">Qt::WindowModal</db:link> and the message box has a parent, then the message box will be a <db:link xlink:href="qt.xml#WindowType-enum">Qt::Sheet</db:link>, otherwise the message box will be a standard dialog.</db:para>
</db:section>
<db:section xml:id="setWindowTitle">
<db:title>void QMessageBox::setWindowTitle(const QString &amp;<db:emphasis>title</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWindowTitle</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>title</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWindowTitle(const QString &amp;title)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function shadows <db:link xlink:href="qwidget.xml#windowTitle-prop">QWidget::setWindowTitle</db:link>().</db:para>
<db:para>Sets the title of the message box to <db:code role="parameter">title</db:code>. On macOS, the window title is ignored (as required by the macOS Guidelines).</db:para>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QMessageBox::showEvent(QShowEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>showEvent</db:methodname>
<db:methodparam>
<db:type>QShowEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void showEvent(QShowEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#showEvent" role="function">QDialog::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="standardButton">
<db:title>QMessageBox::StandardButton QMessageBox::standardButton(QAbstractButton *<db:emphasis>button</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMessageBox::StandardButton</db:type>
<db:methodname>standardButton</db:methodname>
<db:methodparam>
<db:type>QAbstractButton *</db:type>
<db:parameter>button</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMessageBox::StandardButton standardButton(QAbstractButton *button) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the standard button enum value corresponding to the given <db:code role="parameter">button</db:code>, or <db:link xlink:href="qmessagebox.xml#StandardButton-enum">NoButton</db:link> if the given <db:code role="parameter">button</db:code> isn't a standard button.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#button">button</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#standardButtons-prop">standardButtons</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="testOption">
<db:title>[since 6.6] bool QMessageBox::testOption(QMessageBox::Option <db:emphasis>option</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>testOption</db:methodname>
<db:methodparam>
<db:type>QMessageBox::Option</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool testOption(QMessageBox::Option option) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the given <db:code role="parameter">option</db:code> is enabled; otherwise, returns false.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-tooling-qmlformat.xml#options">options</db:link></db:member>
<db:member><db:link xlink:href="qmessagebox.xml#setOption">setOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="warning">
<db:title>[static] QMessageBox::StandardButton QMessageBox::warning(QWidget *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, QMessageBox::StandardButtons <db:emphasis>buttons</db:emphasis> = Ok, QMessageBox::StandardButton <db:emphasis>defaultButton</db:emphasis> = NoButton)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QMessageBox::StandardButton</db:type>
<db:methodname>warning</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>title</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QMessageBox::StandardButtons</db:type>
<db:parameter>buttons</db:parameter>
<db:initializer>Ok</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QMessageBox::StandardButton</db:type>
<db:parameter>defaultButton</db:parameter>
<db:initializer>NoButton</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMessageBox::StandardButton warning(QWidget *parent, const QString &amp;title, const QString &amp;text, QMessageBox::StandardButtons buttons, QMessageBox::StandardButton defaultButton)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Opens a warning message box with the given <db:code role="parameter">title</db:code> and <db:code role="parameter">text</db:code> in front of the specified <db:code role="parameter">parent</db:code> widget.</db:para>
<db:para>The standard <db:code role="parameter">buttons</db:code> are added to the message box. <db:code role="parameter">defaultButton</db:code> specifies the button used when <db:guilabel>Enter</db:guilabel> is pressed. <db:code role="parameter">defaultButton</db:code> must refer to a button that was given in <db:code role="parameter">buttons</db:code>. If <db:code role="parameter">defaultButton</db:code> is <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::NoButton</db:link>, <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> chooses a suitable default automatically.</db:para>
<db:para>Returns the identity of the standard button that was clicked. If <db:guilabel>Esc</db:guilabel> was pressed instead, the <db:link xlink:href="qmessagebox.xml#default-and-escape-keys">escape button</db:link> is returned.</db:para>
<db:para>The message box is an <db:link xlink:href="qt.xml#WindowModality-enum">application modal</db:link> dialog box.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#question">question</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#information">information</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#critical">critical</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QT_REQUIRE_VERSION">
<db:title>QT_REQUIRE_VERSION(int <db:emphasis>argc</db:emphasis>, char **<db:emphasis>argv</db:emphasis>, const char *<db:emphasis>version</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>QT_REQUIRE_VERSION</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>argc</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>char **</db:type>
<db:parameter>argv</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>version</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QT_REQUIRE_VERSION(int argc, char **argv, const char *version)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro can be used to ensure that the application is run with a recent enough version of Qt. This is especially useful if your application depends on a specific bug fix introduced in a bug-fix release (for example, 6.1.2).</db:para>
<db:para>The <db:code role="parameter">argc</db:code> and <db:code role="parameter">argv</db:code> parameters are the main() function's argc and argv parameters. The <db:code role="parameter">version</db:code> parameter is a string literal that specifies which version of Qt the application requires (for example, &quot;6.1.2&quot;).</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QApplication&amp;gt;
#include &amp;lt;QMessageBox&amp;gt;

int main(int argc, char *argv[])
{
    QT_REQUIRE_VERSION(argc, argv, &quot;4.0.2&quot;)

    QApplication app(argc, argv);
    ...
    return app.exec();
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QMessageBox</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-type-documentation">
<db:title>Obsolete Member Type Documentation</db:title>
<db:section xml:id="Button-typedef">
<db:title>QMessageBox::Button</db:title>
<db:typedefsynopsis>
<db:typedefname>Button</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::StandardButton</db:link> instead.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="QMessageBox-2">
<db:title>QMessageBox::QMessageBox(const QString &amp;<db:emphasis>title</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, QMessageBox::Icon <db:emphasis>icon</db:emphasis>, int <db:emphasis>button0</db:emphasis>, int <db:emphasis>button1</db:emphasis>, int <db:emphasis>button2</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr, Qt::WindowFlags <db:emphasis>f</db:emphasis> = Qt::Dialog | Qt::MSWindowsFixedSizeDialogHint)</db:title>
<db:constructorsynopsis>
<db:methodname>QMessageBox</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>title</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QMessageBox::Icon</db:type>
<db:parameter>icon</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>button0</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>button1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>button2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::WindowFlags</db:type>
<db:parameter>f</db:parameter>
<db:initializer>Qt::Dialog | Qt::MSWindowsFixedSizeDialogHint</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QMessageBox(const QString &amp;title, const QString &amp;text, QMessageBox::Icon icon, int button0, int button1, int button2, QWidget *parent, Qt::WindowFlags f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Constructs a message box with a <db:code role="parameter">title</db:code>, a <db:code role="parameter">text</db:code>, an <db:code role="parameter">icon</db:code>, and up to three buttons.</db:para>
<db:para>The <db:code role="parameter">icon</db:code> must be one of the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#Icon-enum">QMessageBox::NoIcon</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#Icon-enum">QMessageBox::Question</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#Icon-enum">QMessageBox::Information</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#Icon-enum">QMessageBox::Warning</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#Icon-enum">QMessageBox::Critical</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Each button, <db:code role="parameter">button0</db:code>, <db:code role="parameter">button1</db:code> and <db:code role="parameter">button2</db:code>, can have one of the following values:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::NoButton</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Ok</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Cancel</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Yes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::No</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Abort</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Retry</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Ignore</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::YesAll</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::NoAll</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Use <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::NoButton</db:link> for the later parameters to have fewer than three buttons in your message box. If you don't specify any buttons at all, <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> will provide an Ok button.</db:para>
<db:para>One of the buttons can be OR-ed with the <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Default</db:link> flag to make it the default button (clicked when Enter is pressed).</db:para>
<db:para>One of the buttons can be OR-ed with the <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Escape</db:link> flag to make it the cancel or close button (clicked when <db:guilabel>Esc</db:guilabel> is pressed).</db:para>
<db:programlisting language="cpp">        QMessageBox mb(&quot;Application Name&quot;,
                       &quot;Hardware failure.\n\nDisk error detected\nDo you want to stop?&quot;,
                       QMessageBox::Question,
                       QMessageBox::Yes | QMessageBox::Default,
                       QMessageBox::No | QMessageBox::Escape,
                       QMessageBox::NoButton);
        if (mb.exec() == QMessageBox::No) {
            // try again
</db:programlisting>
<db:para>The message box is an <db:link xlink:href="qt.xml#WindowModality-enum">application modal</db:link> dialog box.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> and <db:code role="parameter">f</db:code> arguments are passed to the <db:link xlink:href="qdialog.xml">QDialog</db:link> constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#setWindowTitle">setWindowTitle</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#text-prop">setText</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#icon-prop">setIcon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="buttonText">
<db:title>QString QMessageBox::buttonText(int <db:emphasis>button</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>buttonText</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>button</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString buttonText(int button) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns the text of the message box button <db:code role="parameter">button</db:code>, or an empty string if the message box does not contain the button.</db:para>
<db:para>Use <db:link xlink:href="qmessagebox.xml#button">button</db:link>() and <db:link xlink:href="qabstractbutton.xml#text-prop">QPushButton::text</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#setButtonText">setButtonText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="critical-2">
<db:title>[static] int QMessageBox::critical(QWidget *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, int <db:emphasis>button0</db:emphasis>, int <db:emphasis>button1</db:emphasis>, int <db:emphasis>button2</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>critical</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>title</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>button0</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>button1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>button2</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">int critical(QWidget *parent, const QString &amp;title, const QString &amp;text, int button0, int button1, int button2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.2. We strongly advise against using it in new code.</db:para>
<db:para>Use the overload taking <db:link xlink:href="qmessagebox.xml#StandardButton-enum">StandardButtons</db:link> instead.</db:para>
<db:para>Opens a critical message box with the given <db:code role="parameter">title</db:code> and <db:code role="parameter">text</db:code>. The dialog may have up to three buttons. Each of the button parameters, <db:code role="parameter">button0</db:code>, <db:code role="parameter">button1</db:code> and <db:code role="parameter">button2</db:code> may be set to one of the following values:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::NoButton</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Ok</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Cancel</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Yes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::No</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Abort</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Retry</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Ignore</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::YesAll</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::NoAll</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If you don't want all three buttons, set the last button, or last two buttons to <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::NoButton</db:link>.</db:para>
<db:para>One button can be OR-ed with <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Default</db:link>, and one button can be OR-ed with <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Escape</db:link>.</db:para>
<db:para>Returns the identity (<db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Ok</db:link>, or <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::No</db:link>, etc.) of the button that was clicked.</db:para>
<db:para>The message box is an <db:link xlink:href="qt.xml#WindowModality-enum">application modal</db:link> dialog box.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#information">information</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#question">question</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#warning">warning</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="critical-3">
<db:title>[static] int QMessageBox::critical(QWidget *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, const QString &amp;<db:emphasis>button0Text</db:emphasis>, const QString &amp;<db:emphasis>button1Text</db:emphasis> = QString(), const QString &amp;<db:emphasis>button2Text</db:emphasis> = QString(), int <db:emphasis>defaultButtonNumber</db:emphasis> = 0, int <db:emphasis>escapeButtonNumber</db:emphasis> = -1)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>critical</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>title</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>button0Text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>button1Text</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>button2Text</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>defaultButtonNumber</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>escapeButtonNumber</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">int critical(QWidget *parent, const QString &amp;title, const QString &amp;text, const QString &amp;button0Text, const QString &amp;button1Text, const QString &amp;button2Text, int defaultButtonNumber, int escapeButtonNumber)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.2. We strongly advise against using it in new code.</db:para>
<db:para>Use the overload taking <db:link xlink:href="qmessagebox.xml#StandardButton-enum">StandardButtons</db:link> instead.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Displays a critical error message box with the given <db:code role="parameter">title</db:code> and <db:code role="parameter">text</db:code>, as well as one, two, or three buttons. Returns the number of the button that was clicked (0, 1 or 2).</db:para>
<db:para><db:code role="parameter">button0Text</db:code> is the text of the first button, and is optional. If <db:code role="parameter">button0Text</db:code> is not supplied, &quot;OK&quot; (translated) will be used. <db:code role="parameter">button1Text</db:code> is the text of the second button, and is optional, and <db:code role="parameter">button2Text</db:code> is the text of the third button, and is optional. <db:code role="parameter">defaultButtonNumber</db:code> (0, 1 or 2) is the index of the default button; pressing Return or Enter is the same as clicking the default button. It defaults to 0 (the first button). <db:code role="parameter">escapeButtonNumber</db:code> is the index of the Escape button; pressing Escape is the same as clicking this button. It defaults to -1; supply 0, 1, or 2 to make pressing Escape equivalent to clicking the relevant button.</db:para>
<db:para>The message box is an <db:link xlink:href="qt.xml#WindowModality-enum">application modal</db:link> dialog box.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#information">information</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#question">question</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#warning">warning</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="information-2">
<db:title>[static] int QMessageBox::information(QWidget *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, int <db:emphasis>button0</db:emphasis>, int <db:emphasis>button1</db:emphasis> = 0, int <db:emphasis>button2</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>information</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>title</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>button0</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>button1</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>button2</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">int information(QWidget *parent, const QString &amp;title, const QString &amp;text, int button0, int button1, int button2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.2. We strongly advise against using it in new code.</db:para>
<db:para>Use the overload taking <db:link xlink:href="qmessagebox.xml#StandardButton-enum">StandardButtons</db:link> instead.</db:para>
<db:para>Opens an information message box with the given <db:code role="parameter">title</db:code> and the <db:code role="parameter">text</db:code>. The dialog may have up to three buttons. Each of the buttons, <db:code role="parameter">button0</db:code>, <db:code role="parameter">button1</db:code> and <db:code role="parameter">button2</db:code> may be set to one of the following values:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::NoButton</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Ok</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Cancel</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Yes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::No</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Abort</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Retry</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Ignore</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::YesAll</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::NoAll</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If you don't want all three buttons, set the last button, or last two buttons to <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::NoButton</db:link>.</db:para>
<db:para>One button can be OR-ed with <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Default</db:link>, and one button can be OR-ed with <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Escape</db:link>.</db:para>
<db:para>Returns the identity (<db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Ok</db:link>, or <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::No</db:link>, etc.) of the button that was clicked.</db:para>
<db:para>The message box is an <db:link xlink:href="qt.xml#WindowModality-enum">application modal</db:link> dialog box.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#question">question</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#warning">warning</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#critical">critical</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="information-3">
<db:title>[static] int QMessageBox::information(QWidget *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, const QString &amp;<db:emphasis>button0Text</db:emphasis>, const QString &amp;<db:emphasis>button1Text</db:emphasis> = QString(), const QString &amp;<db:emphasis>button2Text</db:emphasis> = QString(), int <db:emphasis>defaultButtonNumber</db:emphasis> = 0, int <db:emphasis>escapeButtonNumber</db:emphasis> = -1)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>information</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>title</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>button0Text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>button1Text</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>button2Text</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>defaultButtonNumber</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>escapeButtonNumber</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">int information(QWidget *parent, const QString &amp;title, const QString &amp;text, const QString &amp;button0Text, const QString &amp;button1Text, const QString &amp;button2Text, int defaultButtonNumber, int escapeButtonNumber)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>since 6.2. Use the overload taking <db:link xlink:href="qmessagebox.xml#StandardButton-enum">StandardButtons</db:link> instead.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Displays an information message box with the given <db:code role="parameter">title</db:code> and <db:code role="parameter">text</db:code>, as well as one, two or three buttons. Returns the index of the button that was clicked (0, 1 or 2).</db:para>
<db:para><db:code role="parameter">button0Text</db:code> is the text of the first button, and is optional. If <db:code role="parameter">button0Text</db:code> is not supplied, &quot;OK&quot; (translated) will be used. <db:code role="parameter">button1Text</db:code> is the text of the second button, and is optional. <db:code role="parameter">button2Text</db:code> is the text of the third button, and is optional. <db:code role="parameter">defaultButtonNumber</db:code> (0, 1 or 2) is the index of the default button; pressing Return or Enter is the same as clicking the default button. It defaults to 0 (the first button). <db:code role="parameter">escapeButtonNumber</db:code> is the index of the escape button; pressing <db:guilabel>Esc</db:guilabel> is the same as clicking this button. It defaults to -1; supply 0, 1 or 2 to make pressing <db:guilabel>Esc</db:guilabel> equivalent to clicking the relevant button.</db:para>
<db:para>The message box is an <db:link xlink:href="qt.xml#WindowModality-enum">application modal</db:link> dialog box.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#question">question</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#warning">warning</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#critical">critical</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="question-2">
<db:title>[static] int QMessageBox::question(QWidget *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, int <db:emphasis>button0</db:emphasis>, int <db:emphasis>button1</db:emphasis> = 0, int <db:emphasis>button2</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>question</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>title</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>button0</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>button1</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>button2</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">int question(QWidget *parent, const QString &amp;title, const QString &amp;text, int button0, int button1, int button2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.2. We strongly advise against using it in new code.</db:para>
<db:para>Use the overload taking <db:link xlink:href="qmessagebox.xml#StandardButton-enum">StandardButtons</db:link> instead.</db:para>
<db:para>Opens a question message box with the given <db:code role="parameter">title</db:code> and <db:code role="parameter">text</db:code>. The dialog may have up to three buttons. Each of the buttons, <db:code role="parameter">button0</db:code>, <db:code role="parameter">button1</db:code> and <db:code role="parameter">button2</db:code> may be set to one of the following values:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::NoButton</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Ok</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Cancel</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Yes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::No</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Abort</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Retry</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Ignore</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::YesAll</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::NoAll</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If you don't want all three buttons, set the last button, or last two buttons to <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::NoButton</db:link>.</db:para>
<db:para>One button can be OR-ed with <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Default</db:link>, and one button can be OR-ed with <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Escape</db:link>.</db:para>
<db:para>Returns the identity (<db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Yes</db:link>, or <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::No</db:link>, etc.) of the button that was clicked.</db:para>
<db:para>The message box is an <db:link xlink:href="qt.xml#WindowModality-enum">application modal</db:link> dialog box.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#information">information</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#warning">warning</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#critical">critical</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="question-3">
<db:title>[static] int QMessageBox::question(QWidget *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, const QString &amp;<db:emphasis>button0Text</db:emphasis>, const QString &amp;<db:emphasis>button1Text</db:emphasis> = QString(), const QString &amp;<db:emphasis>button2Text</db:emphasis> = QString(), int <db:emphasis>defaultButtonNumber</db:emphasis> = 0, int <db:emphasis>escapeButtonNumber</db:emphasis> = -1)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>question</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>title</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>button0Text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>button1Text</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>button2Text</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>defaultButtonNumber</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>escapeButtonNumber</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">int question(QWidget *parent, const QString &amp;title, const QString &amp;text, const QString &amp;button0Text, const QString &amp;button1Text, const QString &amp;button2Text, int defaultButtonNumber, int escapeButtonNumber)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.2. We strongly advise against using it in new code.</db:para>
<db:para>Use the overload taking <db:link xlink:href="qmessagebox.xml#StandardButton-enum">StandardButtons</db:link> instead.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Displays a question message box with the given <db:code role="parameter">title</db:code> and <db:code role="parameter">text</db:code>, as well as one, two or three buttons. Returns the index of the button that was clicked (0, 1 or 2).</db:para>
<db:para><db:code role="parameter">button0Text</db:code> is the text of the first button, and is optional. If <db:code role="parameter">button0Text</db:code> is not supplied, &quot;OK&quot; (translated) will be used. <db:code role="parameter">button1Text</db:code> is the text of the second button, and is optional. <db:code role="parameter">button2Text</db:code> is the text of the third button, and is optional. <db:code role="parameter">defaultButtonNumber</db:code> (0, 1 or 2) is the index of the default button; pressing Return or Enter is the same as clicking the default button. It defaults to 0 (the first button). <db:code role="parameter">escapeButtonNumber</db:code> is the index of the Escape button; pressing Escape is the same as clicking this button. It defaults to -1; supply 0, 1 or 2 to make pressing Escape equivalent to clicking the relevant button.</db:para>
<db:para>The message box is an <db:link xlink:href="qt.xml#WindowModality-enum">application modal</db:link> dialog box.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#information">information</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#warning">warning</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#critical">critical</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setButtonText">
<db:title>void QMessageBox::setButtonText(int <db:emphasis>button</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setButtonText</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>button</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setButtonText(int button, const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Sets the text of the message box button <db:code role="parameter">button</db:code> to <db:code role="parameter">text</db:code>. Setting the text of a button that is not in the message box is silently ignored.</db:para>
<db:para>Use <db:link xlink:href="qmessagebox.xml#addButton">addButton</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#buttonText">buttonText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="standardIcon">
<db:title>[static] QPixmap QMessageBox::standardIcon(QMessageBox::Icon <db:emphasis>icon</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QPixmap</db:type>
<db:methodname>standardIcon</db:methodname>
<db:methodparam>
<db:type>QMessageBox::Icon</db:type>
<db:parameter>icon</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap standardIcon(QMessageBox::Icon icon)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns the pixmap used for a standard icon. This allows the pixmaps to be used in more complex message boxes. <db:code role="parameter">icon</db:code> specifies the required icon, e.g. <db:link xlink:href="qmessagebox.xml#Icon-enum">QMessageBox::Question</db:link>, <db:link xlink:href="qmessagebox.xml#Icon-enum">QMessageBox::Information</db:link>, <db:link xlink:href="qmessagebox.xml#Icon-enum">QMessageBox::Warning</db:link> or <db:link xlink:href="qmessagebox.xml#Icon-enum">QMessageBox::Critical</db:link>.</db:para>
<db:para>Call <db:link xlink:href="qstyle.xml#standardIcon">QStyle::standardIcon</db:link>() with <db:link xlink:href="qstyle.xml#StandardPixmap-enum">QStyle::SP_MessageBoxInformation</db:link> etc. instead.</db:para>
</db:section>
<db:section xml:id="warning-2">
<db:title>[static] int QMessageBox::warning(QWidget *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, int <db:emphasis>button0</db:emphasis>, int <db:emphasis>button1</db:emphasis>, int <db:emphasis>button2</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>warning</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>title</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>button0</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>button1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>button2</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">int warning(QWidget *parent, const QString &amp;title, const QString &amp;text, int button0, int button1, int button2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.2. We strongly advise against using it in new code.</db:para>
<db:para>Use the overload taking <db:link xlink:href="qmessagebox.xml#StandardButton-enum">StandardButtons</db:link> instead.</db:para>
<db:para>Opens a warning message box with the given <db:code role="parameter">title</db:code> and <db:code role="parameter">text</db:code>. The dialog may have up to three buttons. Each of the button parameters, <db:code role="parameter">button0</db:code>, <db:code role="parameter">button1</db:code> and <db:code role="parameter">button2</db:code> may be set to one of the following values:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::NoButton</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Ok</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Cancel</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Yes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::No</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Abort</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Retry</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Ignore</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::YesAll</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::NoAll</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If you don't want all three buttons, set the last button, or last two buttons to <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::NoButton</db:link>.</db:para>
<db:para>One button can be OR-ed with <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Default</db:link>, and one button can be OR-ed with <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Escape</db:link>.</db:para>
<db:para>Returns the identity (<db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Ok</db:link> or <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::No</db:link> or ...) of the button that was clicked.</db:para>
<db:para>The message box is an <db:link xlink:href="qt.xml#WindowModality-enum">application modal</db:link> dialog box.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#information">information</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#question">question</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#critical">critical</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="warning-3">
<db:title>[static] int QMessageBox::warning(QWidget *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, const QString &amp;<db:emphasis>button0Text</db:emphasis>, const QString &amp;<db:emphasis>button1Text</db:emphasis> = QString(), const QString &amp;<db:emphasis>button2Text</db:emphasis> = QString(), int <db:emphasis>defaultButtonNumber</db:emphasis> = 0, int <db:emphasis>escapeButtonNumber</db:emphasis> = -1)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>warning</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>title</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>button0Text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>button1Text</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>button2Text</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>defaultButtonNumber</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>escapeButtonNumber</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">int warning(QWidget *parent, const QString &amp;title, const QString &amp;text, const QString &amp;button0Text, const QString &amp;button1Text, const QString &amp;button2Text, int defaultButtonNumber, int escapeButtonNumber)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.2. We strongly advise against using it in new code.</db:para>
<db:para>Use the overload taking <db:link xlink:href="qmessagebox.xml#StandardButton-enum">StandardButtons</db:link> instead.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Displays a warning message box with the given <db:code role="parameter">title</db:code> and <db:code role="parameter">text</db:code>, as well as one, two, or three buttons. Returns the number of the button that was clicked (0, 1, or 2).</db:para>
<db:para><db:code role="parameter">button0Text</db:code> is the text of the first button, and is optional. If <db:code role="parameter">button0Text</db:code> is not supplied, &quot;OK&quot; (translated) will be used. <db:code role="parameter">button1Text</db:code> is the text of the second button, and is optional, and <db:code role="parameter">button2Text</db:code> is the text of the third button, and is optional. <db:code role="parameter">defaultButtonNumber</db:code> (0, 1 or 2) is the index of the default button; pressing Return or Enter is the same as clicking the default button. It defaults to 0 (the first button). <db:code role="parameter">escapeButtonNumber</db:code> is the index of the Escape button; pressing Escape is the same as clicking this button. It defaults to -1; supply 0, 1, or 2 to make pressing Escape equivalent to clicking the relevant button.</db:para>
<db:para>The message box is an <db:link xlink:href="qt.xml#WindowModality-enum">application modal</db:link> dialog box.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml#information">information</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#question">question</db:link>()</db:member>
<db:member><db:link xlink:href="qmessagebox.xml#critical">critical</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
