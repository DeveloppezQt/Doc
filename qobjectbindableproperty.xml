<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QObjectBindableProperty Class</db:title>
<db:subtitle>template &lt;typename Class, typename T, auto Offset, auto Signal&gt; class QObjectBindableProperty</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qobjectbindableproperty.xml">QObjectBindableProperty</db:link> class is a template class that enables automatic property bindings for property data stored in <db:link xlink:href="qobject.xml">QObject</db:link> derived classes.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QObjectBindableProperty</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpropertydata.xml" xlink:role="class">QPropertyData</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QObjectBindableProperty is part of <db:simplelist><db:member>tools</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qobjectbindableproperty.xml">QObjectBindableProperty</db:link> is a generic container that holds an instance of T and behaves mostly like <db:link xlink:href="qproperty.xml">QProperty</db:link>. The extra template parameters are used to identify the surrounding class and a member function of that class. The member function will be called whenever the value held by the property changes.</db:para>
<db:para>You can use <db:link xlink:href="qobjectbindableproperty.xml">QObjectBindableProperty</db:link> to add binding support to code that uses <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link>. The getter and setter methods are easy to adapt for accessing a <db:link xlink:href="qobjectbindableproperty.xml">QObjectBindableProperty</db:link> rather than the plain value. In order to invoke the change signal on property changes, use <db:link xlink:href="qobjectbindableproperty.xml">QObjectBindableProperty</db:link> and pass the change signal as a callback.</db:para>
<db:para><db:link xlink:href="qobjectbindableproperty.xml">QObjectBindableProperty</db:link> is usually not used directly, instead an instance of it is created by using the <db:link xlink:href="qobjectbindableproperty.xml#Q_OBJECT_BINDABLE_PROPERTY">Q_OBJECT_BINDABLE_PROPERTY</db:link> macro.</db:para>
<db:para>Use the <db:link xlink:href="qobjectbindableproperty.xml#Q_OBJECT_BINDABLE_PROPERTY">Q_OBJECT_BINDABLE_PROPERTY</db:link> macro in the class declaration to declare the property as bindable.</db:para>
<db:programlisting language="cpp">class MyClass : public QObject
{
    Q_OBJECT
    Q_PROPERTY(int x READ x WRITE setX NOTIFY xChanged BINDABLE bindableX)
public:
    int x() const { return xProp; }
    void setX(int x) { xProp = x; }
    QBindable&amp;lt;int&amp;gt; bindableX() { return QBindable&amp;lt;int&amp;gt;(&amp;amp;xProp); }

signals:
    void xChanged();

private:
    // Declare the instance of the bindable property data.
    Q_OBJECT_BINDABLE_PROPERTY(MyClass, int, xProp, &amp;amp;MyClass::xChanged)
};
</db:programlisting>
<db:para>If the property does not need a changed notification, you can leave out the &quot;NOFITY xChanged&quot; in the <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link> macro as well as the last argument of the <db:link xlink:href="qobjectbindableproperty.xml#Q_OBJECT_BINDABLE_PROPERTY">Q_OBJECT_BINDABLE_PROPERTY</db:link> macro.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="setValue">
<db:title>void QObjectBindableProperty::setValue(QObjectBindableProperty::parameter_type <db:emphasis>newValue</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="setValue-1">void QObjectBindableProperty::setValue(QObjectBindableProperty::rvalue_ref <db:emphasis>newValue</db:emphasis>)</db:bridgehead>
<db:para>Assigns <db:code role="parameter">newValue</db:code> to this property and removes the property's associated binding, if present. If the property value changes as a result, calls the Callback function on <db:code role="parameter">owner</db:code>.</db:para>
</db:section>
<db:section xml:id="QObjectBindableProperty">
<db:title>QObjectBindableProperty::QObjectBindableProperty()</db:title>
<db:constructorsynopsis>
<db:methodname>QObjectBindableProperty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QObjectBindableProperty()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a property with a default constructed instance of T.</db:para>
</db:section>
<db:section xml:id="QObjectBindableProperty-1">
<db:title>[explicit] QObjectBindableProperty::QObjectBindableProperty(const T &amp;<db:emphasis>initialValue</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QObjectBindableProperty</db:methodname>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>initialValue</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QObjectBindableProperty(const T &amp;initialValue)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a property with the provided <db:code role="parameter">initialValue</db:code>.</db:para>
</db:section>
<db:section xml:id="QObjectBindableProperty-2">
<db:title>[explicit] QObjectBindableProperty::QObjectBindableProperty(T &amp;&amp;<db:emphasis>initialValue</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QObjectBindableProperty</db:methodname>
<db:methodparam>
<db:type>T &amp;&amp;</db:type>
<db:parameter>initialValue</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QObjectBindableProperty(T &amp;&amp;initialValue)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-Constructs a property with the provided <db:code role="parameter">initialValue</db:code>.</db:para>
</db:section>
<db:section xml:id="QObjectBindableProperty-4">
<db:title>[explicit] QObjectBindableProperty::QObjectBindableProperty(Functor &amp;&amp;<db:emphasis>f</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QObjectBindableProperty</db:methodname>
<db:methodparam>
<db:type>Functor &amp;&amp;</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QObjectBindableProperty(Functor &amp;&amp;f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a property that is tied to the provided binding expression <db:code role="parameter">f</db:code>. The first time the property value is read, the binding is evaluated. Whenever a dependency of the binding changes, the binding will be re-evaluated the next time the value of this property is read.</db:para>
</db:section>
<db:section xml:id="QObjectBindableProperty-5">
<db:title>[default] QObjectBindableProperty::QObjectBindableProperty(Class *<db:emphasis>owner</db:emphasis>, const QPropertyBinding&lt;T&gt; &amp;<db:emphasis>binding</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QObjectBindableProperty</db:methodname>
<db:methodparam>
<db:type>Class *</db:type>
<db:parameter>owner</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPropertyBinding&lt;T&gt; &amp;</db:type>
<db:parameter>binding</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QObjectBindableProperty(Class *owner, const QPropertyBinding&lt;T&gt; &amp;binding) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a property that is tied to the provided <db:code role="parameter">binding</db:code> expression. The first time the property value is read, the binding is evaluated. Whenever a dependency of the binding changes, the binding will be re-evaluated the next time the value of this property is read. When the property value changes <db:code role="parameter">owner</db:code> is notified via the Callback function.</db:para>
</db:section>
<db:section xml:id="QObjectBindableProperty-6">
<db:title>[default] QObjectBindableProperty::QObjectBindableProperty(Class *<db:emphasis>owner</db:emphasis>, QPropertyBinding&lt;T&gt; &amp;&amp;<db:emphasis>binding</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QObjectBindableProperty</db:methodname>
<db:methodparam>
<db:type>Class *</db:type>
<db:parameter>owner</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPropertyBinding&lt;T&gt; &amp;&amp;</db:type>
<db:parameter>binding</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QObjectBindableProperty(Class *owner, QPropertyBinding&lt;T&gt; &amp;&amp;binding) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a property that is tied to the provided <db:code role="parameter">binding</db:code> expression. The first time the property value is read, the binding is evaluated. Whenever a dependency of the binding changes, the binding will be re-evaluated the next time the value of this property is read. When the property value changes <db:code role="parameter">owner</db:code> is notified via the Callback function.</db:para>
</db:section>
<db:section xml:id="dtor.QObjectBindableProperty">
<db:title>[default] QObjectBindableProperty::~QObjectBindableProperty()</db:title>
<db:destructorsynopsis>
<db:methodname>~QObjectBindableProperty</db:methodname>
<db:void/>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QObjectBindableProperty() = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the property.</db:para>
</db:section>
<db:section xml:id="binding">
<db:title>QPropertyBinding&lt;T&gt; QObjectBindableProperty::binding() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPropertyBinding&lt;T&gt;</db:type>
<db:methodname>binding</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPropertyBinding&lt;T&gt; binding() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the binding expression that is associated with this property. A default constructed QPropertyBinding&lt;T&gt; will be returned if no such association exists.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobjectbindableproperty.xml#setBinding">setBinding</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasBinding">
<db:title>bool QObjectBindableProperty::hasBinding() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasBinding</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasBinding() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the property is associated with a binding; false otherwise.</db:para>
</db:section>
<db:section xml:id="onValueChanged">
<db:title>QPropertyChangeHandler&lt;Functor&gt; QObjectBindableProperty::onValueChanged(Functor <db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPropertyChangeHandler&lt;Functor&gt;</db:type>
<db:methodname>onValueChanged</db:methodname>
<db:methodparam>
<db:type>Functor</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPropertyChangeHandler&lt;Functor&gt; onValueChanged(Functor f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers the given functor <db:code role="parameter">f</db:code> as a callback that shall be called whenever the value of the property changes.</db:para>
<db:para>The callback <db:code role="parameter">f</db:code> is expected to be a type that has a plain call operator () without any parameters. This means that you can provide a C++ lambda expression, an std::function or even a custom struct with a call operator.</db:para>
<db:para>The returned property change handler object keeps track of the registration. When it goes out of scope, the callback is de-registered.</db:para>
</db:section>
<db:section xml:id="setBinding">
<db:title>QPropertyBinding&lt;T&gt; QObjectBindableProperty::setBinding(const QPropertyBinding&lt;T&gt; &amp;<db:emphasis>newBinding</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPropertyBinding&lt;T&gt;</db:type>
<db:methodname>setBinding</db:methodname>
<db:methodparam>
<db:type>const QPropertyBinding&lt;T&gt; &amp;</db:type>
<db:parameter>newBinding</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPropertyBinding&lt;T&gt; setBinding(const QPropertyBinding&lt;T&gt; &amp;newBinding)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Associates the value of this property with the provided <db:code role="parameter">newBinding</db:code> expression and returns the previously associated binding. The first time the property value is read, the binding is evaluated. Whenever a dependency of the binding changes, the binding will be re-evaluated the next time the value of this property is read. When the property value changes, the owner is notified via the Callback function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobjectbindableproperty.xml#binding">binding</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBinding-1">
<db:title>bool QObjectBindableProperty::setBinding(const QUntypedPropertyBinding &amp;<db:emphasis>newBinding</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setBinding</db:methodname>
<db:methodparam>
<db:type>const QUntypedPropertyBinding &amp;</db:type>
<db:parameter>newBinding</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setBinding(const QUntypedPropertyBinding &amp;newBinding)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Associates the value of this property with the provided <db:code role="parameter">newBinding</db:code> expression. The first time the property value is read, the binding is evaluated. Whenever a dependency of the binding changes, the binding will be re-evaluated the next time the value of this property is read.</db:para>
<db:para>Returns true if the type of this property is the same as the type the binding function returns; false otherwise.</db:para>
</db:section>
<db:section xml:id="setBinding-2">
<db:title>QPropertyBinding&lt;T&gt; QObjectBindableProperty::setBinding(Functor <db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPropertyBinding&lt;T&gt;</db:type>
<db:methodname>setBinding</db:methodname>
<db:methodparam>
<db:type>Functor</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QPropertyBinding&lt;T&gt; setBinding(Functor f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Associates the value of this property with the provided functor <db:code role="parameter">f</db:code> and returns the previously associated binding. The first time the property value is read, the binding is evaluated by invoking the call operator () of <db:code role="parameter">f</db:code>. Whenever a dependency of the binding changes, the binding will be re-evaluated the next time the value of this property is read. When the property value changes, the owner is notified via the Callback function.</db:para>
</db:section>
<db:section xml:id="subscribe">
<db:title>QPropertyChangeHandler&lt;Functor&gt; QObjectBindableProperty::subscribe(Functor <db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPropertyChangeHandler&lt;Functor&gt;</db:type>
<db:methodname>subscribe</db:methodname>
<db:methodparam>
<db:type>Functor</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPropertyChangeHandler&lt;Functor&gt; subscribe(Functor f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Subscribes the given functor <db:code role="parameter">f</db:code> as a callback that is called immediately and whenever the value of the property changes in the future.</db:para>
<db:para>The callback <db:code role="parameter">f</db:code> is expected to be a type that has a plain call operator () without any parameters. This means that you can provide a C++ lambda expression, an std::function or even a custom struct with a call operator.</db:para>
<db:para>The returned property change handler object keeps track of the subscription. When it goes out of scope, the callback is unsubscribed.</db:para>
</db:section>
<db:section xml:id="takeBinding">
<db:title>QPropertyBinding&lt;T&gt; QObjectBindableProperty::takeBinding()</db:title>
<db:methodsynopsis>
<db:type>QPropertyBinding&lt;T&gt;</db:type>
<db:methodname>takeBinding</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPropertyBinding&lt;T&gt; takeBinding()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disassociates the binding expression from this property and returns it. After calling this function, the value of the property will only change if you assign a new value to it, or when a new binding is set.</db:para>
</db:section>
<db:section xml:id="value">
<db:title>QObjectBindableProperty::parameter_type QObjectBindableProperty::value() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObjectBindableProperty::parameter_type</db:type>
<db:methodname>value</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObjectBindableProperty::parameter_type value() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the property. This may evaluate a binding expression that is tied to this property, before returning the value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobjectbindableproperty.xml#setValue">setValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_OBJECT_BINDABLE_PROPERTY">
<db:title>[since 6.0] Q_OBJECT_BINDABLE_PROPERTY(<db:emphasis>containingClass</db:emphasis>, <db:emphasis>type</db:emphasis>, <db:emphasis>name</db:emphasis>, <db:emphasis>signal</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_OBJECT_BINDABLE_PROPERTY</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>containingClass</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type></db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type></db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type></db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_OBJECT_BINDABLE_PROPERTY(containingClass, type, name, signal)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Declares a <db:link xlink:href="qobjectbindableproperty.xml">QObjectBindableProperty</db:link> inside <db:code role="parameter">containingClass</db:code> of type <db:code role="parameter">type</db:code> with name <db:code role="parameter">name</db:code>. If the optional argument <db:code role="parameter">signal</db:code> is given, this signal will be emitted when the property is marked dirty.</db:para>
<db:para>This macro was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="properties.xml">Qt's Property System</db:link></db:member>
<db:member><db:link xlink:href="">Qt Bindable Properties</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_OBJECT_BINDABLE_PROPERTY_WITH_ARGS">
<db:title>[since 6.0] Q_OBJECT_BINDABLE_PROPERTY_WITH_ARGS(<db:emphasis>containingClass</db:emphasis>, <db:emphasis>type</db:emphasis>, <db:emphasis>name</db:emphasis>, <db:emphasis>initialvalue</db:emphasis>, <db:emphasis>signal</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_OBJECT_BINDABLE_PROPERTY_WITH_ARGS</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>containingClass</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type></db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type></db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type></db:type>
<db:parameter>initialvalue</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type></db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_OBJECT_BINDABLE_PROPERTY_WITH_ARGS(containingClass, type, name, initialvalue, signal)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Declares a <db:link xlink:href="qobjectbindableproperty.xml">QObjectBindableProperty</db:link> inside <db:code role="parameter">containingClass</db:code> of type <db:code role="parameter">type</db:code> with name <db:code role="parameter">name</db:code> which is initialized to <db:code role="parameter">initialvalue</db:code>. If the optional argument <db:code role="parameter">signal</db:code> is given, this signal will be emitted when the property is marked dirty.</db:para>
<db:para>This macro was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="properties.xml">Qt's Property System</db:link></db:member>
<db:member><db:link xlink:href="">Qt Bindable Properties</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
