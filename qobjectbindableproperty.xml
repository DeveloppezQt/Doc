<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QObjectBindableProperty Class</db:title>
<db:subtitle>template &lt;typename Class, typename T, auto Offset, auto Signal = nullptr&gt; class QObjectBindableProperty</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qobjectbindableproperty.xml">QObjectBindableProperty</db:link> class is a template class that enables automatic property bindings for property data stored in <db:link xlink:href="qobject.xml">QObject</db:link> derived classes.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QObjectBindableProperty</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpropertydata.xml" xlink:role="class">QPropertyData</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QObjectBindableProperty is part of <db:simplelist><db:member>tools</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qobjectbindableproperty.xml">QObjectBindableProperty</db:link> is a generic container that holds an instance of T and behaves mostly like <db:link xlink:href="qproperty.xml">QProperty</db:link>. It is one of the classes implementing <db:link xlink:href="bindableproperties.xml">Qt Bindable Properties</db:link>. Unlike <db:link xlink:href="qproperty.xml">QProperty</db:link>, it stores its management data structure in the surrounding <db:link xlink:href="qobject.xml">QObject</db:link>. The extra template parameters are used to identify the surrounding class and a member function of that class acting as a change handler.</db:para>
<db:para>You can use <db:link xlink:href="qobjectbindableproperty.xml">QObjectBindableProperty</db:link> to add binding support to code that uses <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link>. The getter and setter methods must be adapted carefully according to the rules described in <db:link xlink:href="bindableproperties.xml#bindable-property-getters-and-setters">Bindable Property Getters and Setters</db:link>.</db:para>
<db:para>In order to invoke the change signal on property changes, use <db:link xlink:href="qobjectbindableproperty.xml">QObjectBindableProperty</db:link> and pass the change signal as a callback.</db:para>
<db:para>A simple example is given in the following.</db:para>
<db:programlisting language="cpp">#include &lt;QObject&gt;
#include &lt;QProperty&gt;
#include &lt;QDebug&gt;

class Foo : public QObject
{
    Q_OBJECT
    Q_PROPERTY(int myVal READ myVal WRITE setMyVal BINDABLE bindableMyVal)
public:
    int myVal() { return myValMember.value(); }
    void setMyVal(int newvalue) { myValMember = newvalue; }
    QBindable&lt;int&gt; bindableMyVal() { return &amp;myValMember; }
signals:
    void myValChanged();

private:
    Q_OBJECT_BINDABLE_PROPERTY(Foo, int, myValMember, &amp;Foo::myValChanged);
};

int main()
{
    bool debugout(true); // enable debug log
    Foo myfoo;
    QProperty&lt;int&gt; prop(42);
    QObject::connect(&amp;myfoo, &amp;Foo::myValChanged, [&amp;]() {
        if (debugout)
            qDebug() &lt;&lt; myfoo.myVal();
    });
    myfoo.bindableMyVal().setBinding([&amp;]() { return prop.value(); }); // prints &quot;42&quot;

    prop = 5; // prints &quot;5&quot;
    debugout = false;
    prop = 6; // prints nothing
    debugout = true;
    prop = 7; // prints &quot;7&quot;
}

#include &quot;main.moc&quot;
</db:programlisting>
<db:para><db:link xlink:href="qobjectbindableproperty.xml">QObjectBindableProperty</db:link> is usually not used directly, instead an instance of it is created by using the <db:link xlink:href="qobjectbindableproperty.xml#Q_OBJECT_BINDABLE_PROPERTY">Q_OBJECT_BINDABLE_PROPERTY</db:link> macro.</db:para>
<db:para>Use the <db:link xlink:href="qobjectbindableproperty.xml#Q_OBJECT_BINDABLE_PROPERTY">Q_OBJECT_BINDABLE_PROPERTY</db:link> macro in the class declaration to declare the property as bindable.</db:para>
<db:programlisting language="cpp">class MyClass : public QObject
{
    Q_OBJECT
    Q_PROPERTY(int x READ x WRITE setX NOTIFY xChanged BINDABLE bindableX)
public:
    int x() const { return xProp; }
    void setX(int x) { xProp = x; }
    QBindable&lt;int&gt; bindableX() { return QBindable&lt;int&gt;(&amp;xProp); }

signals:
    void xChanged();

private:
    // Declare the instance of the bindable property data.
    Q_OBJECT_BINDABLE_PROPERTY(MyClass, int, xProp, &amp;MyClass::xChanged)
};
</db:programlisting>
<db:para>If you need to directly initialize the property with some non-default value, you can use the <db:link xlink:href="qobjectbindableproperty.xml#Q_OBJECT_BINDABLE_PROPERTY_WITH_ARGS">Q_OBJECT_BINDABLE_PROPERTY_WITH_ARGS</db:link> macro. It accepts a value for the initialization as one of its parameters.</db:para>
<db:programlisting language="cpp">class MyClass : public QObject
{
    Q_OBJECT
    Q_PROPERTY(int x READ x WRITE setX NOTIFY xChanged BINDABLE bindableX)
public:
    int x() const { return xProp; }
    void setX(int x) { xProp = x; }
    QBindable&lt;int&gt; bindableX() { return QBindable&lt;int&gt;(&amp;xProp); }

signals:
    void xChanged();

private:
    // Declare the instance of int bindable property data and
    // initialize it with the value 5.
    // This is similar to declaring
    // int xProp = 5;
    // without using the new QObjectBindableProperty class.
    Q_OBJECT_BINDABLE_PROPERTY_WITH_ARGS(MyClass, int, xProp, 5, &amp;MyClass::xChanged)
};
</db:programlisting>
<db:para><db:link xlink:href="qobjectbindableproperty.xml#Q_OBJECT_BINDABLE_PROPERTY_WITH_ARGS">Q_OBJECT_BINDABLE_PROPERTY_WITH_ARGS</db:link> does not support multiple arguments directly. If your property requires multiple arguments for initialization, please explicitly call the specific constructor.</db:para>
<db:programlisting language="cpp">class CustomType
{
public:
    CustomType(int val, int otherVal) : value(val), anotherValue(otherVal) { }

private:
    int value = 0;
    int anotherValue = 0;
};

// later when using CustomType as a property
Q_OBJECT_BINDABLE_PROPERTY_WITH_ARGS(MyClass, CustomType xProp, CustomType(5, 10),
                                     &amp;MyClass::xChanged)
</db:programlisting>
<db:para>The change handler can optionally accept one argument, of the same type as the property, in which case it is passed the new value of the property. Otherwise, it should take no arguments.</db:para>
<db:para>If the property does not need a changed notification, you can leave out the &quot;NOTIFY xChanged&quot; in the <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link> macro as well as the last argument of the <db:link xlink:href="qobjectbindableproperty.xml#Q_OBJECT_BINDABLE_PROPERTY">Q_OBJECT_BINDABLE_PROPERTY</db:link> and <db:link xlink:href="qobjectbindableproperty.xml#Q_OBJECT_BINDABLE_PROPERTY_WITH_ARGS">Q_OBJECT_BINDABLE_PROPERTY_WITH_ARGS</db:link> macros.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobjectbindableproperty.xml#Q_OBJECT_BINDABLE_PROPERTY">Q_OBJECT_BINDABLE_PROPERTY</db:link></db:member>
<db:member><db:link xlink:href="qobjectbindableproperty.xml#Q_OBJECT_BINDABLE_PROPERTY_WITH_ARGS">Q_OBJECT_BINDABLE_PROPERTY_WITH_ARGS</db:link></db:member>
<db:member><db:link xlink:href="qproperty.xml">QProperty</db:link></db:member>
<db:member><db:link xlink:href="qobjectcomputedproperty.xml">QObjectComputedProperty</db:link></db:member>
<db:member><db:link xlink:href="properties.xml">Qt's Property System</db:link></db:member>
<db:member><db:link xlink:href="bindableproperties.xml">Qt Bindable Properties</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="setValue">
<db:title>void QObjectBindableProperty::setValue(QObjectBindableProperty&lt;Class, T, Offset, Signal&gt;::parameter_type <db:emphasis>newValue</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="setValue-1">void QObjectBindableProperty::setValue(QObjectBindableProperty&lt;Class, T, Offset, Signal&gt;::rvalue_ref <db:emphasis>newValue</db:emphasis>)</db:bridgehead>
<db:para>Assigns <db:code role="parameter">newValue</db:code> to this property and removes the property's associated binding, if present. If the property value changes as a result, calls the Callback function on <db:code role="parameter">owner</db:code>.</db:para>
</db:section>
<db:section xml:id="QObjectBindableProperty">
<db:title>QObjectBindableProperty::QObjectBindableProperty()</db:title>
<db:para>Constructs a property with a default constructed instance of T.</db:para>
</db:section>
<db:section xml:id="QObjectBindableProperty-1">
<db:title>[explicit] QObjectBindableProperty::QObjectBindableProperty(Functor &amp;&amp;<db:emphasis>f</db:emphasis>)</db:title>
<db:para>Constructs a property that is tied to the provided binding expression <db:code role="parameter">f</db:code>. The property's value is set to the result of evaluating the new binding. Whenever a dependency of the binding changes, the binding will be re-evaluated, and the property's value gets updated accordingly.</db:para>
</db:section>
<db:section xml:id="QObjectBindableProperty-2">
<db:title>[explicit] QObjectBindableProperty::QObjectBindableProperty(T &amp;&amp;<db:emphasis>initialValue</db:emphasis>)</db:title>
<db:para>Move-Constructs a property with the provided <db:code role="parameter">initialValue</db:code>.</db:para>
</db:section>
<db:section xml:id="QObjectBindableProperty-3">
<db:title>[explicit] QObjectBindableProperty::QObjectBindableProperty(const T &amp;<db:emphasis>initialValue</db:emphasis>)</db:title>
<db:para>Constructs a property with the provided <db:code role="parameter">initialValue</db:code>.</db:para>
</db:section>
<db:section xml:id="QObjectBindableProperty-4">
<db:title>[default] QObjectBindableProperty::QObjectBindableProperty(Class *<db:emphasis>owner</db:emphasis>, QPropertyBinding&lt;T&gt; &amp;&amp;<db:emphasis>binding</db:emphasis>)</db:title>
<db:para>Constructs a property that is tied to the provided <db:code role="parameter">binding</db:code> expression. The property's value is set to the result of evaluating the new binding. Whenever a dependency of the binding changes, the binding will be re-evaluated, and the property's value gets updated accordingly.</db:para>
<db:para>When the property value changes, <db:code role="parameter">owner</db:code> is notified via the Callback function.</db:para>
</db:section>
<db:section xml:id="QObjectBindableProperty-5">
<db:title>[default] QObjectBindableProperty::QObjectBindableProperty(Class *<db:emphasis>owner</db:emphasis>, const QPropertyBinding&lt;T&gt; &amp;<db:emphasis>binding</db:emphasis>)</db:title>
<db:para>Constructs a property that is tied to the provided <db:code role="parameter">binding</db:code> expression. The property's value is set to the result of evaluating the new binding. Whenever a dependency of the binding changes, the binding will be re-evaluated, and the property's value gets updated accordingly.</db:para>
<db:para>When the property value changes, <db:code role="parameter">owner</db:code> is notified via the Callback function.</db:para>
</db:section>
<db:section xml:id="dtor.QObjectBindableProperty">
<db:title>[default] QObjectBindableProperty::~QObjectBindableProperty()</db:title>
<db:para>Destroys the property.</db:para>
</db:section>
<db:section xml:id="addNotifier">
<db:title>QPropertyNotifier QObjectBindableProperty::addNotifier(Functor <db:emphasis>f</db:emphasis>)</db:title>
<db:para>Subscribes the given functor <db:code role="parameter">f</db:code> as a callback that is called whenever the value of the property changes.</db:para>
<db:para>The callback <db:code role="parameter">f</db:code> is expected to be a type that has a plain call operator () without any parameters. This means that you can provide a C++ lambda expression, a std::function or even a custom struct with a call operator.</db:para>
<db:para>The returned property change handler object keeps track of the subscription. When it goes out of scope, the callback is unsubscribed.</db:para>
<db:para>This method is in some cases easier to use than <db:link xlink:href="qobjectbindableproperty.xml#onValueChanged">onValueChanged</db:link>(), as the returned object is not a template. It can therefore more easily be stored, e.g. as a member in a class.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobjectbindableproperty.xml#onValueChanged">onValueChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qobjectbindableproperty.xml#subscribe">subscribe</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="binding">
<db:title>QPropertyBinding&lt;T&gt; QObjectBindableProperty::binding() const</db:title>
<db:para>Returns the binding expression that is associated with this property. A default constructed QPropertyBinding&lt;T&gt; will be returned if no such association exists.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobjectbindableproperty.xml#setBinding">setBinding</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasBinding">
<db:title>bool QObjectBindableProperty::hasBinding() const</db:title>
<db:para>Returns true if the property is associated with a binding; false otherwise.</db:para>
</db:section>
<db:section xml:id="notify">
<db:title>void QObjectBindableProperty::notify()</db:title>
<db:para>Programmatically signals a change of the property. Any binding which depend on it will be notified, and if the property has a signal, it will be emitted.</db:para>
<db:para>This can be useful in combination with setValueBypassingBindings to defer signalling the change until a class invariant has been restored.</db:para>
<db:note>
<db:para>If this property has a binding (i.e. <db:link xlink:href="qobjectbindableproperty.xml#hasBinding">hasBinding</db:link>() returns true), that binding is not reevaluated when notify() is called. Any binding depending on this property is still reevaluated as usual.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qproperty.xml#beginPropertyUpdateGroup">Qt::beginPropertyUpdateGroup</db:link>()</db:member>
<db:member><db:link xlink:href="qpropertydata.xml#setValueBypassingBindings">setValueBypassingBindings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="onValueChanged">
<db:title>QPropertyChangeHandler&lt;Functor&gt; QObjectBindableProperty::onValueChanged(Functor <db:emphasis>f</db:emphasis>)</db:title>
<db:para>Registers the given functor <db:code role="parameter">f</db:code> as a callback that shall be called whenever the value of the property changes. On each value change, the handler is either called immediately, or deferred, depending on the context.</db:para>
<db:para>The callback <db:code role="parameter">f</db:code> is expected to be a type that has a plain call operator () without any parameters. This means that you can provide a C++ lambda expression, a std::function or even a custom struct with a call operator.</db:para>
<db:para>The returned property change handler object keeps track of the registration. When it goes out of scope, the callback is de-registered.</db:para>
</db:section>
<db:section xml:id="setBinding">
<db:title>QPropertyBinding&lt;T&gt; QObjectBindableProperty::setBinding(const QPropertyBinding&lt;T&gt; &amp;<db:emphasis>newBinding</db:emphasis>)</db:title>
<db:para>Associates the value of this property with the provided <db:code role="parameter">newBinding</db:code> expression and returns the previously associated binding. The property's value is set to the result of evaluating the new binding. Whenever a dependency of the binding changes, the binding will be re-evaluated, and the property's value gets updated accordingly. When the property value changes, the owner is notified via the Callback function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobjectbindableproperty.xml#binding">binding</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBinding-1">
<db:title>QPropertyBinding&lt;T&gt; QObjectBindableProperty::setBinding(Functor <db:emphasis>f</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Associates the value of this property with the provided functor <db:code role="parameter">f</db:code> and returns the previously associated binding. The property's value is set to the result of evaluating the new binding by invoking the call operator () of <db:code role="parameter">f</db:code>. Whenever a dependency of the binding changes, the binding will be re-evaluated, and the property's value gets updated accordingly.</db:para>
<db:para>When the property value changes, the owner is notified via the Callback function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="bindableproperties.xml#formulating-a-property-binding">Formulating a Property Binding</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBinding-2">
<db:title>bool QObjectBindableProperty::setBinding(const QUntypedPropertyBinding &amp;<db:emphasis>newBinding</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Associates the value of this property with the provided <db:code role="parameter">newBinding</db:code> expression. The property's value is set to the result of evaluating the new binding. Whenever a dependency of the binding changes, the binding will be re-evaluated, and the property's value gets updated accordingly.</db:para>
<db:para>Returns true if the type of this property is the same as the type the binding function returns; false otherwise.</db:para>
</db:section>
<db:section xml:id="subscribe">
<db:title>QPropertyChangeHandler&lt;Functor&gt; QObjectBindableProperty::subscribe(Functor <db:emphasis>f</db:emphasis>)</db:title>
<db:para>Subscribes the given functor <db:code role="parameter">f</db:code> as a callback that is called immediately and whenever the value of the property changes in the future. On each value change, the handler is either called immediately, or deferred, depending on the context.</db:para>
<db:para>The callback <db:code role="parameter">f</db:code> is expected to be a type that has a plain call operator () without any parameters. This means that you can provide a C++ lambda expression, a std::function or even a custom struct with a call operator.</db:para>
<db:para>The returned property change handler object keeps track of the subscription. When it goes out of scope, the callback is unsubscribed.</db:para>
</db:section>
<db:section xml:id="takeBinding">
<db:title>QPropertyBinding&lt;T&gt; QObjectBindableProperty::takeBinding()</db:title>
<db:para>Disassociates the binding expression from this property and returns it. After calling this function, the value of the property will only change if you assign a new value to it, or when a new binding is set.</db:para>
</db:section>
<db:section xml:id="value">
<db:title>QObjectBindableProperty&lt;Class, T, Offset, Signal&gt;::parameter_type QObjectBindableProperty::value() const</db:title>
<db:para>Returns the value of the property. This may evaluate a binding expression that is tied to this property, before returning the value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobjectbindableproperty.xml#setValue">setValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_OBJECT_BINDABLE_PROPERTY">
<db:title>[since 6.0] Q_OBJECT_BINDABLE_PROPERTY(<db:emphasis>containingClass</db:emphasis>, <db:emphasis>type</db:emphasis>, <db:emphasis>name</db:emphasis>, <db:emphasis>signal</db:emphasis>)</db:title>
<db:para>Declares a <db:link xlink:href="qobjectbindableproperty.xml">QObjectBindableProperty</db:link> inside <db:code role="parameter">containingClass</db:code> of type <db:code role="parameter">type</db:code> with name <db:code role="parameter">name</db:code>. If the optional argument <db:code role="parameter">signal</db:code> is given, this signal will be emitted when the property is marked dirty.</db:para>
<db:para>This macro was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="properties.xml">Qt's Property System</db:link></db:member>
<db:member><db:link xlink:href="bindableproperties.xml">Qt Bindable Properties</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_OBJECT_BINDABLE_PROPERTY_WITH_ARGS">
<db:title>[since 6.0] Q_OBJECT_BINDABLE_PROPERTY_WITH_ARGS(<db:emphasis>containingClass</db:emphasis>, <db:emphasis>type</db:emphasis>, <db:emphasis>name</db:emphasis>, <db:emphasis>initialvalue</db:emphasis>, <db:emphasis>signal</db:emphasis>)</db:title>
<db:para>Declares a <db:link xlink:href="qobjectbindableproperty.xml">QObjectBindableProperty</db:link> inside <db:code role="parameter">containingClass</db:code> of type <db:code role="parameter">type</db:code> with name <db:code role="parameter">name</db:code> which is initialized to <db:code role="parameter">initialvalue</db:code>. If the optional argument <db:code role="parameter">signal</db:code> is given, this signal will be emitted when the property is marked dirty.</db:para>
<db:para>This macro was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="properties.xml">Qt's Property System</db:link></db:member>
<db:member><db:link xlink:href="bindableproperties.xml">Qt Bindable Properties</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
