<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>InputEngine Class</db:title>
<db:subtitle>QtVirtualKeyboard::InputEngine</db:subtitle>
<db:productname>QtVirtualKeyboard</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Virtual Keyboard</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtvirtualkeyboard-inputengine.xml">InputEngine</db:link> class provides an input engine that supports C++ and QML integration.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>InputEngine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>In QML</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-virtualkeyboard-inputengine.xml" xlink:role="">InputEngine</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The input engine is responsible for routing input events to input methods. The actual input logic is implemented by the input methods.</db:para>
<db:para>The input engine also includes the default input method, which takes care of default processing if the active input method does not handle the event.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="InputMode-enum">
<db:title>enum InputEngine::InputMode</db:title>
<db:para>This enum specifies the input mode for the input method.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard.xml">QtVirtualKeyboard</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml">InputEngine</db:link></db:emphasis>::Latin</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The default input mode for latin text.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard.xml">QtVirtualKeyboard</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml">InputEngine</db:link></db:emphasis>::Numeric</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Only numeric input is allowed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard.xml">QtVirtualKeyboard</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml">InputEngine</db:link></db:emphasis>::Dialable</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Only dialable input is allowed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard.xml">QtVirtualKeyboard</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml">InputEngine</db:link></db:emphasis>::Pinyin</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Pinyin input mode for Chinese.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard.xml">QtVirtualKeyboard</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml">InputEngine</db:link></db:emphasis>::Cangjie</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Cangjie input mode for Chinese.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard.xml">QtVirtualKeyboard</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml">InputEngine</db:link></db:emphasis>::Zhuyin</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Zhuyin input mode for Chinese.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard.xml">QtVirtualKeyboard</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml">InputEngine</db:link></db:emphasis>::Hangul</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Hangul input mode for Korean.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard.xml">QtVirtualKeyboard</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml">InputEngine</db:link></db:emphasis>::Hiragana</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Hiragana input mode for Japanese.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard.xml">QtVirtualKeyboard</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml">InputEngine</db:link></db:emphasis>::Katakana</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Katakana input mode for Japanese.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard.xml">QtVirtualKeyboard</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml">InputEngine</db:link></db:emphasis>::FullwidthLatin</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Fullwidth latin input mode for East Asian languages.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="PatternRecognitionMode-enum">
<db:title>enum InputEngine::PatternRecognitionMode</db:title>
<db:para>This enum specifies the input mode for the input method.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard.xml">QtVirtualKeyboard</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml">InputEngine</db:link></db:emphasis>::PatternRecognitionDisabled</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Pattern recognition is not available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard.xml">QtVirtualKeyboard</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml">InputEngine</db:link></db:emphasis>::HandwritingRecoginition</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Pattern recognition mode for handwriting recognition.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ReselectFlag-enum">
<db:title>enum InputEngine::ReselectFlag</db:title>
<db:bridgehead renderas="sect2">flags InputEngine::ReselectFlags</db:bridgehead>
<db:para>This enum specifies the rules for word reselection.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard.xml">QtVirtualKeyboard</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml">InputEngine</db:link></db:emphasis>::WordBeforeCursor</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>Activate the word before the cursor. When this flag is used exclusively, the word must end exactly at the cursor.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard.xml">QtVirtualKeyboard</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml">InputEngine</db:link></db:emphasis>::WordAfterCursor</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>Activate the word after the cursor. When this flag is used exclusively, the word must start exactly at the cursor.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard.xml">QtVirtualKeyboard</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml">InputEngine</db:link></db:emphasis>::WordAtCursor</db:code></db:para>
</db:td>
<db:td><db:code>WordBeforeCursor | WordAfterCursor</db:code></db:td>
<db:td>
<db:para>Activate the word at the cursor. This flag is a combination of the above flags with the exception that the word cannot start or stop at the cursor.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>ReselectFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;ReselectFlag&gt;. </db:code>It stores an OR combination of <db:code>ReselectFlag</db:code> values.</db:para>
</db:section>
<db:section xml:id="TextCase-enum">
<db:title>enum InputEngine::TextCase</db:title>
<db:para>This enum specifies the text case for the input method.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard.xml">QtVirtualKeyboard</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml">InputEngine</db:link></db:emphasis>::Lower</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Lower case text.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard.xml">QtVirtualKeyboard</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml">InputEngine</db:link></db:emphasis>::Upper</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Upper case text.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="activeKey-prop">
<db:title>[read-only] activeKey : const Qt::Key</db:title>
<db:para>This property holds the active key.</db:para>
<db:para>Currently pressed key.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#Key-enum">Qt::Key</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml#activeKey">activeKey</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml#activeKeyChanged">activeKeyChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qt.xml#Key-enum">Qt::Key</db:link></db:type> <db:emphasis>key</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="inputMethod-prop">
<db:title>inputMethod : QtVirtualKeyboard::AbstractInputMethod*</db:title>
<db:para>This property holds the active input method.</db:para>
<db:para>Use this property to set active the input method, or to monitor when the active input method changes.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QtVirtualKeyboard::AbstractInputMethod</db:type> *<db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml#inputMethod">inputMethod</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml#setInputMethod">setInputMethod</db:link></db:emphasis>(<db:type>QtVirtualKeyboard::AbstractInputMethod</db:type> *<db:emphasis>inputMethod</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml#inputMethodChanged">inputMethodChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="inputMode-prop">
<db:title>inputMode : InputMode</db:title>
<db:para>This property holds the current input mode.</db:para>
<db:para>Use this property to get or set the current input mode. The <db:link xlink:href="qtvirtualkeyboard-inputengine.xml#inputModes">InputEngine::inputModes</db:link> provides list of valid input modes for current input method and locale.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtvirtualkeyboard-inputengine.xml#InputMode-enum">QtVirtualKeyboard::InputEngine::InputMode</db:link></db:type> <db:emphasis role="bold">inputMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setInputMode</db:emphasis>(<db:type><db:link xlink:href="qtvirtualkeyboard-inputengine.xml#InputMode-enum">QtVirtualKeyboard::InputEngine::InputMode</db:link></db:type> <db:emphasis>inputMode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml#inputModeChanged">inputModeChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="inputModes-prop">
<db:title>[read-only] inputModes : const QList&lt;int&gt;</db:title>
<db:para>This property holds the available input modes for active input method.</db:para>
<db:para>The list of available input modes is dependent on the input method and locale. This property is updated when either of the dependencies changes.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlist.xml">QList</db:link></db:type>&lt;<db:type>int</db:type>&gt; <db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml#inputModes">inputModes</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml#inputModesChanged">inputModesChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="patternRecognitionModes-prop">
<db:title>[read-only, since QtQuick.VirtualKeyboard 2.0] patternRecognitionModes : const QList&lt;int&gt;</db:title>
<db:para>This property holds the list of available pattern recognition modes.</db:para>
<db:para>The list of available pattern recognition modes.</db:para>
<db:para>This property was introduced in QtQuick.VirtualKeyboard 2.0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlist.xml">QList</db:link></db:type>&lt;<db:type>int</db:type>&gt; <db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml#patternRecognitionModes">patternRecognitionModes</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml#patternRecognitionModesChanged">patternRecognitionModesChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="previousKey-prop">
<db:title>[read-only] previousKey : const Qt::Key</db:title>
<db:para>This property holds the previous active key.</db:para>
<db:para>Previously pressed key.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#Key-enum">Qt::Key</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml#previousKey">previousKey</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qtvirtualkeyboard-inputengine.xml#previousKeyChanged">previousKeyChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qt.xml#Key-enum">Qt::Key</db:link></db:type> <db:emphasis>key</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="wordCandidateListModel-prop">
<db:title>[read-only] wordCandidateListModel : QtVirtualKeyboard::SelectionListModel* const</db:title>
<db:para>list model for the word candidate list.</db:para>
<db:para>Use this property to access the list model for the word candidate list.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtvirtualkeyboard-selectionlistmodel.xml">QtVirtualKeyboard::SelectionListModel</db:link></db:type> *<db:emphasis role="bold">wordCandidateListModel</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">wordCandidateListModelChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="wordCandidateListVisibleHint-prop">
<db:title>[read-only] wordCandidateListVisibleHint : const bool</db:title>
<db:para>visible hint for the word candidate list.</db:para>
<db:para>Use this property to check if the word candidate list should be visible in the UI.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">wordCandidateListVisibleHint</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">wordCandidateListVisibleHintChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="activeKey">
<db:title>Qt::Key InputEngine::activeKey() const</db:title>
<db:para>Returns the currently active key, or <db:link xlink:href="qt.xml#Key-enum">Qt::Key_unknown</db:link> if no key is active.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qtvirtualkeyboard-inputengine.xml#activeKey-prop">activeKey</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="activeKeyChanged">
<db:title>void InputEngine::activeKeyChanged(Qt::Key <db:emphasis>key</db:emphasis>)</db:title>
<db:para>Indicates that the active <db:code role="parameter">key</db:code> has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qtvirtualkeyboard-inputengine.xml#activeKey-prop">activeKey</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="inputContext">
<db:title>QtVirtualKeyboard::InputContext *InputEngine::inputContext() const</db:title>
<db:para>Returns the <db:code>InputContext</db:code> instance associated with the input engine.</db:para>
</db:section>
<db:section xml:id="inputMethod">
<db:title>QtVirtualKeyboard::AbstractInputMethod *InputEngine::inputMethod() const</db:title>
<db:para>Returns the active input method.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qtvirtualkeyboard-inputengine.xml#inputMethod-prop">inputMethod</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtvirtualkeyboard-inputengine.xml#setInputMethod">setInputMethod</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inputMethodChanged">
<db:title>void InputEngine::inputMethodChanged()</db:title>
<db:para>Indicates that the input method has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qtvirtualkeyboard-inputengine.xml#inputMethod-prop">inputMethod</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="inputMethodReset">
<db:title>void InputEngine::inputMethodReset()</db:title>
<db:para>Emitted when the input method needs to be reset.</db:para>
<db:note>
<db:para>This signal is automatically connected to AbstractInputMethod::reset() and <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#reset-method">InputMethod::reset</db:link>() when the input method is activated.</db:para>
</db:note>
</db:section>
<db:section xml:id="inputMethodUpdate">
<db:title>void InputEngine::inputMethodUpdate()</db:title>
<db:note>
<db:para>This signal is automatically connected to AbstractInputMethod::update() and <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#update-method">InputMethod::update</db:link>() when the input method is activated.</db:para>
</db:note>
</db:section>
<db:section xml:id="inputModeChanged">
<db:title>void InputEngine::inputModeChanged()</db:title>
<db:para>Indicates that the input mode has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qtvirtualkeyboard-inputengine.xml#inputMode-prop">inputMode</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="inputModes">
<db:title>QList&lt;int&gt; InputEngine::inputModes() const</db:title>
<db:para>Returns the list of available input modes.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qtvirtualkeyboard-inputengine.xml#inputModes-prop">inputModes</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="inputModesChanged">
<db:title>void InputEngine::inputModesChanged()</db:title>
<db:para>Indicates that the available input modes have changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qtvirtualkeyboard-inputengine.xml#inputModes-prop">inputModes</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="patternRecognitionModes">
<db:title>QList&lt;int&gt; InputEngine::patternRecognitionModes() const</db:title>
<db:para>Returns list of supported pattern recognition modes.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qtvirtualkeyboard-inputengine.xml#patternRecognitionModes-prop">patternRecognitionModes</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="patternRecognitionModesChanged">
<db:title>[since QtQuick.VirtualKeyboard 2.0] void InputEngine::patternRecognitionModesChanged()</db:title>
<db:para>Indicates that the available pattern recognition modes have changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qtvirtualkeyboard-inputengine.xml#patternRecognitionModes-prop">patternRecognitionModes</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in QtQuick.VirtualKeyboard 2.0.</db:para>
</db:section>
<db:section xml:id="previousKey">
<db:title>Qt::Key InputEngine::previousKey() const</db:title>
<db:para>Returns the previously active key, or <db:link xlink:href="qt.xml#Key-enum">Qt::Key_unknown</db:link> if no key has been active.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qtvirtualkeyboard-inputengine.xml#previousKey-prop">previousKey</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="previousKeyChanged">
<db:title>void InputEngine::previousKeyChanged(Qt::Key <db:emphasis>key</db:emphasis>)</db:title>
<db:para>Indicates that the previous <db:code role="parameter">key</db:code> has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qtvirtualkeyboard-inputengine.xml#previousKey-prop">previousKey</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="reselect">
<db:title>[since QtQuick.VirtualKeyboard 2.0] bool InputEngine::reselect(int <db:emphasis>cursorPosition</db:emphasis>, const QtVirtualKeyboard::InputEngine::ReselectFlags &amp;<db:emphasis>reselectFlags</db:emphasis>)</db:title>
<db:para>This function attempts to reselect a word located at the <db:code role="parameter">cursorPosition</db:code>. The <db:code role="parameter">reselectFlags</db:code> define the rules for how the word should be selected in relation to the cursor position.</db:para>
<db:para>The function returns <db:code>true</db:code> if the word was successfully reselected.</db:para>
<db:para>This function was introduced in QtQuick.VirtualKeyboard 2.0.</db:para>
</db:section>
<db:section xml:id="setInputMethod">
<db:title>void InputEngine::setInputMethod(QtVirtualKeyboard::AbstractInputMethod *<db:emphasis>inputMethod</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">inputMethod</db:code> as the active input method.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qtvirtualkeyboard-inputengine.xml#inputMethod-prop">inputMethod</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtvirtualkeyboard-inputengine.xml#inputMethod">inputMethod</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="traceBegin">
<db:title>[since QtQuick.VirtualKeyboard 2.0] QtVirtualKeyboard::Trace *InputEngine::traceBegin(int <db:emphasis>traceId</db:emphasis>, QtVirtualKeyboard::InputEngine::PatternRecognitionMode <db:emphasis>patternRecognitionMode</db:emphasis>, const QVariantMap &amp;<db:emphasis>traceCaptureDeviceInfo</db:emphasis>, const QVariantMap &amp;<db:emphasis>traceScreenInfo</db:emphasis>)</db:title>
<db:para>Starts a trace interaction with the input engine.</db:para>
<db:para>The trace is uniquely identified by the <db:code role="parameter">traceId</db:code>. The input engine will assign the id to the Trace object if the input method accepts the event.</db:para>
<db:para>The <db:code role="parameter">patternRecognitionMode</db:code> specifies the recognition mode used for the pattern.</db:para>
<db:para>If the current input method accepts the event it returns a Trace object associated with this interaction. If the input method discards the event, it returns a NULL value.</db:para>
<db:para>The <db:code role="parameter">traceCaptureDeviceInfo</db:code> provides information about the source device and the <db:code role="parameter">traceScreenInfo</db:code> provides information about the screen context.</db:para>
<db:para>By definition, the Trace object remains valid until the <db:link xlink:href="qtvirtualkeyboard-inputengine.xml#traceEnd">traceEnd</db:link>() method is called.</db:para>
<db:para>The trace interaction is ended by calling the <db:link xlink:href="qtvirtualkeyboard-inputengine.xml#traceEnd">traceEnd</db:link>() method.</db:para>
<db:para>This function was introduced in QtQuick.VirtualKeyboard 2.0.</db:para>
</db:section>
<db:section xml:id="traceEnd">
<db:title>bool InputEngine::traceEnd(QtVirtualKeyboard::Trace *<db:emphasis>trace</db:emphasis>)</db:title>
<db:para>Ends the trace interaction with the input engine.</db:para>
<db:para>The <db:code role="parameter">trace</db:code> object may be discarded at any point after calling this function.</db:para>
<db:para>The function returns true if the trace interaction was accepted (i.e. the touch events should not be used for anything else).</db:para>
</db:section>
<db:section xml:id="virtualKeyCancel">
<db:title>void InputEngine::virtualKeyCancel()</db:title>
<db:para>Reverts the active key state without emitting the key event. This method is useful when the user discards the current key and the key state needs to be restored.</db:para>
</db:section>
<db:section xml:id="virtualKeyClick">
<db:title>bool InputEngine::virtualKeyClick(Qt::Key <db:emphasis>key</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>)</db:title>
<db:para>Emits a key click event for the given <db:code role="parameter">key</db:code>, <db:code role="parameter">text</db:code> and <db:code role="parameter">modifiers</db:code>. Returns <db:code>true</db:code> if the key event was accepted by the input engine.</db:para>
</db:section>
<db:section xml:id="virtualKeyClicked">
<db:title>void InputEngine::virtualKeyClicked(Qt::Key <db:emphasis>key</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>, bool <db:emphasis>isAutoRepeat</db:emphasis>)</db:title>
<db:para>Indicates that the virtual <db:code role="parameter">key</db:code> was clicked with the given <db:code role="parameter">text</db:code> and <db:code role="parameter">modifiers</db:code>. The <db:code role="parameter">isAutoRepeat</db:code> indicates if the event is automatically repeated while the key is being pressed. This signal is emitted after the input method has processed the key event.</db:para>
</db:section>
<db:section xml:id="virtualKeyPress">
<db:title>bool InputEngine::virtualKeyPress(Qt::Key <db:emphasis>key</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>, bool <db:emphasis>repeat</db:emphasis>)</db:title>
<db:para>Called by the keyboard layer to indicate that <db:code role="parameter">key</db:code> was pressed, with the given <db:code role="parameter">text</db:code> and <db:code role="parameter">modifiers</db:code>.</db:para>
<db:para>The <db:code role="parameter">key</db:code> is set as an active key (down key). The actual key event is triggered when the key is released by the <db:link xlink:href="qtvirtualkeyboard-inputengine.xml#virtualKeyRelease">virtualKeyRelease</db:link>() method. The key press event can be discarded by calling <db:link xlink:href="qtvirtualkeyboard-inputengine.xml#virtualKeyCancel">virtualKeyCancel</db:link>().</db:para>
<db:para>The key press also initiates the key repeat timer if <db:code role="parameter">repeat</db:code> is <db:code>true</db:code>.</db:para>
<db:para>Returns <db:code>true</db:code> if the key was accepted by this input engine.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtvirtualkeyboard-inputengine.xml#virtualKeyCancel">virtualKeyCancel</db:link>()</db:member>
<db:member><db:link xlink:href="qtvirtualkeyboard-inputengine.xml#virtualKeyRelease">virtualKeyRelease</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="virtualKeyRelease">
<db:title>bool InputEngine::virtualKeyRelease(Qt::Key <db:emphasis>key</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>)</db:title>
<db:para>Releases the key at <db:code role="parameter">key</db:code>. The method emits a key event for the input method if the event has not been generated by a repeating timer. The <db:code role="parameter">text</db:code> and <db:code role="parameter">modifiers</db:code> are passed to the input method.</db:para>
<db:para>Returns <db:code>true</db:code> if the key was accepted by the input engine.</db:para>
</db:section>
</db:section>
</db:article>
