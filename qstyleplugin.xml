<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStylePlugin Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstyleplugin.xml">QStylePlugin</db:link> class provides an abstract base for custom <db:link xlink:href="qstyle.xml">QStyle</db:link> plugins.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStylePlugin</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStylePlugin is part of <db:simplelist><db:member>plugins</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qstyleplugin.xml">QStylePlugin</db:link> is a simple plugin interface that makes it easy to create custom styles that can be loaded dynamically into applications using the <db:link xlink:href="qstylefactory.xml">QStyleFactory</db:link> class.</db:para>
<db:para>Writing a style plugin is achieved by subclassing this base class, reimplementing the pure virtual <db:link xlink:href="qstyleplugin.xml#create">create</db:link>() function, and exporting the class using the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro.</db:para>
<db:programlisting language="cpp">class MyStylePlugin : public QStylePlugin
{
    Q_OBJECT
    Q_PLUGIN_METADATA(IID &quot;org.qt-project.Qt.QStyleFactoryInterface&quot; FILE &quot;mystyleplugin.json&quot;)
public:
    MyStylePlugin(QObject *parent = 0);

    QStyle *create(const QString &amp;key);
};
</db:programlisting>
<db:para>The json metadata file mystyleplugin.json for the plugin needs to contain information about the names of the styles the plugins supports as follows:</db:para>
<db:programlisting language="cpp">{ &quot;Keys&quot;: [ &quot;Rocket&quot;, &quot;Starbuster&quot; ] }

</db:programlisting>
<db:para>See <db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link> for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstylefactory.xml">QStyleFactory</db:link></db:member>
<db:member><db:link xlink:href="qstyle.xml">QStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QStylePlugin">
<db:title>[explicit] QStylePlugin::QStylePlugin(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a style plugin with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Note that this constructor is invoked automatically by the moc generated code that exports the plugin, so there is no need for calling it explicitly.</db:para>
</db:section>
<db:section xml:id="dtor.QStylePlugin">
<db:title>[virtual noexcept] QStylePlugin::~QStylePlugin()</db:title>
<db:para>Destroys the style plugin.</db:para>
<db:para>Note that Qt destroys a plugin automatically when it is no longer used, so there is no need for calling the destructor explicitly.</db:para>
</db:section>
<db:section xml:id="create">
<db:title>[pure virtual] QStyle *QStylePlugin::create(const QString &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:para>Creates and returns a <db:link xlink:href="qstyle.xml">QStyle</db:link> object for the given style <db:code role="parameter">key</db:code>. If a plugin cannot create a style, it should return 0 instead.</db:para>
<db:para>The style key is usually the class name of the required style. Note that the keys are case insensitive. For example:</db:para>
<db:programlisting language="cpp">QStyle *MyStylePlugin::create(const QString &amp;key)
{
    QString lcKey = key.toLower();
    if (lcKey == &quot;rocket&quot;) {
        return new RocketStyle;
    } else if (lcKey == &quot;starbuster&quot;) {
        return new StarBusterStyle;
    }
    return 0;
}
</db:programlisting>
</db:section>
</db:section>
</db:article>
