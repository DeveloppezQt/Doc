<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Syntax</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>[syntax] Various syntactic errors.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This warning category is spelled [syntax] by qmllint.</db:para>
<db:section xml:id="nested-inline-components-are-not-supported">
<db:title>Nested inline components are not supported</db:title>
<db:section xml:id="what-happened">
<db:title>What happened?</db:title>
<db:para>You defined an <db:link xlink:href="qtqml-documents-definetypes.xml#inline-components">inline component</db:link> inside another inline component.</db:para>
</db:section>
<db:section xml:id="why-is-this-bad">
<db:title>Why is this bad?</db:title>
<db:para>The QML language does not allow nested inline components. Always define inline components inside the root item of the QML file.</db:para>
</db:section>
<db:section xml:id="example">
<db:title>Example</db:title>
<db:programlisting language="qml">import QtQuick

Item {
    component Correct: Item {
        component Evil: Item { ... }
        ...
    }
}
</db:programlisting>
<db:para>To fix this warning, move all components to the root item of the QML file.</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    component NotEvilAnymore: Item { ... }
    component Correct: Item {
        ...
    }
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="inline-component-declaration-must-be-followed-by-a-typename">
<db:title>Inline component declaration must be followed by a typename</db:title>
<db:section xml:id="inline-component-declaration-must-be-followed-by-a-typename-what-happened-5">
<db:title>What happened?</db:title>
<db:para>You defined an <db:link xlink:href="qtqml-documents-definetypes.xml#inline-components">inline component</db:link> with an invalid base type.</db:para>
</db:section>
<db:section xml:id="inline-component-declaration-must-be-followed-by-a-typename-why-is-this-bad-6">
<db:title>Why is this bad?</db:title>
<db:para>Inline components need a base type to inherit from.</db:para>
</db:section>
<db:section xml:id="inline-component-declaration-must-be-followed-by-a-typename-example-7">
<db:title>Example</db:title>
<db:programlisting language="qml">import QtQuick

Item {
    property Item someProperty
    component InlineComponent: someProperty {}
}
</db:programlisting>
<db:para>In this case, someProperty is not a valid type name, as it is a property name. To fix this warning, use a valid Type as the component's base type:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    property Item someProperty
    component InlineComponent: Item { ... }
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="invalid-alias-expression-an-initializer-is-needed">
<db:title>Invalid alias expression: an initializer is needed</db:title>
<db:section xml:id="invalid-alias-expression-an-initializer-is-needed-what-happened-9">
<db:title>What happened?</db:title>
<db:para>You defined a <db:link xlink:href="qtqml-syntax-objectattributes.xml#property-aliases">property alias</db:link> without its aliased property.</db:para>
</db:section>
<db:section xml:id="invalid-alias-expression-an-initializer-is-needed-why-is-this-bad-10">
<db:title>Why is this bad?</db:title>
<db:para>Alias properties always need to have their aliased property or id in their definition.</db:para>
</db:section>
<db:section xml:id="invalid-alias-expression-an-initializer-is-needed-example-11">
<db:title>Example</db:title>
<db:programlisting language="qml">import QtQuick

Item {
    id: root
    property int someProperty
    property alias aliasProperty
}
</db:programlisting>
<db:para>To fix this warning, replace the alias with a normal property, or add the missing aliased property:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    id: root
    property int someProperty
    property alias withAliasedProperty: root.someProperty
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="invalid-alias-expression-only-ids-and-field-member-expressions-can-be-aliased">
<db:title>Invalid alias expression: only ids and field member expressions can be aliased</db:title>
<db:section xml:id="invalid-alias-expression-only-ids-and-field-member-expressions-can-be-aliased-what-happened-13">
<db:title>What happened?</db:title>
<db:para>You defined a <db:link xlink:href="qtqml-syntax-objectattributes.xml#property-aliases">property alias</db:link> that aliases an expression other than an ID or a field member expression.</db:para>
<db:para>A field member expression is an expression of the form someId.someProperty.</db:para>
</db:section>
<db:section xml:id="invalid-alias-expression-only-ids-and-field-member-expressions-can-be-aliased-why-is-this-bad-14">
<db:title>Why is this bad?</db:title>
<db:para>Alias properties always need to have their aliased property in their definition, and can't bind to other expressions than IDs and field member expressions.</db:para>
</db:section>
<db:section xml:id="invalid-alias-expression-only-ids-and-field-member-expressions-can-be-aliased-example-15">
<db:title>Example</db:title>
<db:programlisting language="qml">import QtQuick

Item {
    property int p
    property alias someProperty: p + 1
}
</db:programlisting>
<db:para>To fix this warning, replace the alias with a normal property or bind it to an id or field member expression:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    id: root
    property int p
    property int someProperty: p + 1
    property alias alternative: root.p
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="id-must-be-followed-by-an-identifier">
<db:title>Id must be followed by an identifier</db:title>
<db:section xml:id="id-must-be-followed-by-an-identifier-what-happened-17">
<db:title>What happened?</db:title>
<db:para>You defined an <db:link xlink:href="qtqml-syntax-objectattributes.xml#the-id-attribute">id</db:link> without a value.</db:para>
</db:section>
<db:section xml:id="id-must-be-followed-by-an-identifier-why-is-this-bad-18">
<db:title>Why is this bad?</db:title>
<db:para>The QML language does not allow empty ids.</db:para>
</db:section>
<db:section xml:id="id-must-be-followed-by-an-identifier-example-19">
<db:title>Example</db:title>
<db:programlisting language="qml">import QtQuick

Item {
    id:;
}
</db:programlisting>
<db:para>To fix this warning, bind the id to a valid name:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    id: root;
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="failed-to-parse-id">
<db:title>Failed to parse id</db:title>
<db:section xml:id="failed-to-parse-id-what-happened-21">
<db:title>What happened?</db:title>
<db:para>You bound an <db:link xlink:href="qtqml-syntax-objectattributes.xml#the-id-attribute">id</db:link> to an expression other than a name.</db:para>
</db:section>
<db:section xml:id="failed-to-parse-id-why-is-this-bad-22">
<db:title>Why is this bad?</db:title>
<db:para>The QML language only allows names as bindings to ids; more complex expressions can't be used.</db:para>
</db:section>
<db:section xml:id="failed-to-parse-id-example-23">
<db:title>Example</db:title>
<db:programlisting language="qml">import QtQuick

Item {
    property int a
    property int b
    function f() {
        if (true)
            return a
        return b
    }

    id: f()
}
</db:programlisting>
<db:para>To fix this warning, bind the id to a valid name or declare a property and set up a binding:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    property int a
    property int b
    function f() {
        if (true)
            return a
        return b
    }

    id: someItem // it would be confusing to call it `f` like the function
    property int alternative: f()
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="declaring-an-object-which-is-not-a-qml-object-as-a-list-member">
<db:title>Declaring an object which is not a QML object as a list member</db:title>
<db:section xml:id="declaring-an-object-which-is-not-a-qml-object-as-a-list-member-what-happened-25">
<db:title>What happened?</db:title>
<db:para>You added an expression other than an <db:link xlink:href="qtqml-typesystem-objecttypes.xml">object</db:link> into a list of objects.</db:para>
</db:section>
<db:section xml:id="declaring-an-object-which-is-not-a-qml-object-as-a-list-member-why-is-this-bad-26">
<db:title>Why is this bad?</db:title>
<db:para>The QML language only allows objects in object lists.</db:para>
</db:section>
<db:section xml:id="declaring-an-object-which-is-not-a-qml-object-as-a-list-member-example-27">
<db:title>Example</db:title>
<db:programlisting language="qml">import QtQuick

Item {
    property int hello
    property list&lt;Item&gt; myList: [
        Item {}, hello{}
    ]
}
</db:programlisting>
<db:para>To fix this warning, use a valid object type, or remove the item from the list:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    component Hello: Item {}
    property list&lt;Item&gt; myList: [
        Item {}, Hello{}
    ]
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="enums-declared-inside-of-inline-components-are-ignored">
<db:title>Enums declared inside of inline components are ignored</db:title>
<db:section xml:id="enums-declared-inside-of-inline-components-are-ignored-what-happened-29">
<db:title>What happened?</db:title>
<db:para>You defined an <db:link xlink:href="qtqml-syntax-objectattributes.xml#enumeration-attributes">enum</db:link> inside an inline component.</db:para>
</db:section>
<db:section xml:id="enums-declared-inside-of-inline-components-are-ignored-why-is-this-bad-30">
<db:title>Why is this bad?</db:title>
<db:para>The QML language only allows enum definitions inside the root item of the QML file. Enums declared inside an inline component are unusable, even inside the inline component. The same applies to enums declared inside non-root QML objects.</db:para>
</db:section>
<db:section xml:id="enums-declared-inside-of-inline-components-are-ignored-example-31">
<db:title>Example</db:title>
<db:programlisting language="qml">import QtQuick

Item {
    component MyInlineComponent: Item {
        enum MyEnum { Hello, World }
    }
}
</db:programlisting>
<db:para>To fix this warning, move the enum declaration into the root element of the QML file:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    enum MyEnum { Hello, World }
    component MyInlineComponent: Item {
    }
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="unknown-argument-to-pragma">
<db:title>Unknown argument to pragma</db:title>
<db:section xml:id="unknown-argument-to-pragma-what-happened-33">
<db:title>What happened?</db:title>
<db:para>You specified an invalid argument to a <db:link xlink:href="qtqml-documents-structure.xml#pragmas">pragma</db:link>.</db:para>
</db:section>
<db:section xml:id="unknown-argument-to-pragma-why-is-this-bad-34">
<db:title>Why is this bad?</db:title>
<db:para>The pragma will have no effect.</db:para>
</db:section>
<db:section xml:id="unknown-argument-to-pragma-example-35">
<db:title>Example</db:title>
<db:programlisting language="qml">pragma ComponentBehavior: Buond
import QtQuick

Item {
}
</db:programlisting>
<db:para>You can fix this warning by removing the pragma or fixing a potential typo:</db:para>
<db:programlisting language="qml">pragma ComponentBehavior: Bound
import QtQuick

Item {
}
</db:programlisting>
</db:section>
</db:section>
</db:article>
