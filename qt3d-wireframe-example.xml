<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D: Wireframe QML Example</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A Qt 3D QML application that implements a single-pass wireframe rendering method.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qt3d-wireframe-rendering.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Qt 3D Wireframe Rendering</db:emphasis> illustrates how to draw a single entity (a trefoil knot) using a custom set of shaders to implement a single-pass wireframe rendering method.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-entities">
<db:title>Creating Entities</db:title>
<db:para>The renderer aspect looks for entities that have some geometry, a material, and optionally a transformation. These are all specified in the form of subclasses of QComponent that have been exported to the QML engine in the form of <db:link xlink:href="qml-qt3d-render-mesh.xml">Mesh</db:link>, <db:link xlink:href="qml-qt3d-render-material.xml">Material</db:link>, and <db:link xlink:href="qml-qt3d-core-transform.xml">Transform</db:link>. We use these components to create a custom QML item in <db:emphasis>TrefoilKnot.qml</db:emphasis>.</db:para>
<db:para>We start off by importing the <db:code>Qt3D 2.0</db:code> module that provides the <db:link xlink:href="qml-qt3d-core-entity.xml">Entity</db:link> type and value type helpers, such as Qt.vector3d(). We also import the <db:code>Qt3D.Renderer</db:code> module that provides the components and other types picked up by the renderer aspect:</db:para>
<db:programlisting language="cpp">import Qt3D.Core 2.0
import Qt3D.Render 2.0

</db:programlisting>
<db:para>To use components from other aspects, we would need to import the corresponding QML module, too.</db:para>
<db:para>We then use an <db:link xlink:href="qml-qt3d-core-entity.xml">Entity</db:link> type as the root element of the custom QML type exposing some custom properties just as you would with any other type in QML:</db:para>
<db:programlisting language="cpp">Entity {
    id: root

    property real x: 0.0
    property real y: 0.0
    property real z: 0.0
    property real scale: 1.0
    property real theta: 0.0
    property real phi: 0.0
    property Material material

</db:programlisting>
<db:para>In addition to aggregating components, the <db:link xlink:href="qml-qt3d-core-entity.xml">Entity</db:link> type can be used to group child objects together. This is analogous to how the <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> type is used in Qt Quick 2.</db:para>
</db:section>
<db:section xml:id="specifying-transformations">
<db:title>Specifying Transformations</db:title>
<db:para>We instantiate a <db:link xlink:href="qml-qt3d-core-transform.xml">Transform</db:link> component and a <db:link xlink:href="qml-qt3d-render-mesh.xml">Mesh</db:link> component. The <db:link xlink:href="qml-qt3d-core-transform.xml">Transform</db:link> component specifies how the renderer should transform the geometry when it is drawn with the OpenGL pipeline. We combine an ordered set of transformations into a single <db:link xlink:href="qml-qt3d-core-transform.xml">Transform</db:link> component. This information will be automatically available to our shaders through standard named uniform variables:</db:para>
<db:programlisting language="cpp">    Transform {
        id: transform
        translation: Qt.vector3d(root.x, root.y, root.z)
        rotation: fromEulerAngles(theta, phi, 0)
        scale: root.scale
    }

</db:programlisting>
</db:section>
<db:section xml:id="loading-dynamic-per-vertex-data">
<db:title>Loading Dynamic Per-Vertex Data</db:title>
<db:para>The <db:link xlink:href="qml-qt3d-render-mesh.xml">Mesh</db:link> component is very simple. We use its source property to load in a static set of geometry (such as vertex positions, normal vectors, and texture coordinates) from a file in the Wavefront Obj format. This data was exported from the Blender application.</db:para>
<db:programlisting language="cpp">    Mesh {
        id: mesh
        source: &quot;assets/obj/trefoil.obj&quot;
    }
</db:programlisting>
<db:para>In addition to the <db:link xlink:href="qml-qt3d-render-mesh.xml">Mesh</db:link> element, Qt 3D also enables dynamic generation of per-vertex attribute data through C++ hooks that are called by the task-based engine.</db:para>
</db:section>
<db:section xml:id="aggregating-components">
<db:title>Aggregating Components</db:title>
<db:para>Simply instantiating components is not enough, however. In order for them to imbue special behavior on an entity, the entity must aggregate the components by means of its components property:</db:para>
<db:programlisting language="cpp">    components: [ transform, mesh, root.material ]

</db:programlisting>
<db:para>This allows components to be shared between multiple entities very easily. In this example, we have components for the transform and mesh that are contained within the TrefoilKnot custom type. The final component, of type <db:link xlink:href="qml-qt3d-render-material.xml">Material</db:link>, is provided by a property of the TrefoilKnot custom type. We will later customize the appearance of the entity.</db:para>
</db:section>
<db:section xml:id="rendering-from-cameras">
<db:title>Rendering from Cameras</db:title>
<db:para>We use the TrefoilKnot custom type in <db:emphasis>main.qml</db:emphasis> to draw the trefoil knot on the screen.</db:para>
<db:para>We use the same import statements as in <db:emphasis>TrefoilKnot.qml</db:emphasis>, with the addition of a namespaced import for the Qt Quick module that we will need for animations:</db:para>
<db:programlisting language="cpp">import QtQuick 2.1 as QQ2
import Qt3D.Core 2.0
import Qt3D.Render 2.0

</db:programlisting>
<db:para>We use an <db:link xlink:href="qml-qt3d-core-entity.xml">Entity</db:link> type as the root type simply to act as a parent for its children. In this sense, the <db:link xlink:href="qml-qt3d-core-entity.xml">Entity</db:link> type is much like the <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> type:</db:para>
<db:programlisting language="cpp">Entity {
    id: root

</db:programlisting>
<db:para>The <db:link xlink:href="qml-qt3d-render-framegraph.xml">FrameGraph</db:link> component uses the ForwardRenderer type to completely configure the renderer without touching any C++ code:</db:para>
<db:programlisting language="cpp">    // Render from the mainCamera
    components: [
        FrameGraph {
            activeFrameGraph: ForwardRenderer {
                id: renderer
                camera: mainCamera
            }
        }
    ]

</db:programlisting>
<db:para>The BasicCamera type is a trivial wrapper around the built-in <db:link xlink:href="qml-qt3d-core-camera.xml">Camera</db:link> type that represents a virtual camera. It has properties for such things as the near and far planes, field of view, aspect ratio, projection type, position, and orientation:</db:para>
<db:programlisting language="cpp">    BasicCamera {
        id: mainCamera
        position: Qt.vector3d( 0.0, 0.0, 15.0 )
    }

</db:programlisting>
<db:para>The <db:link xlink:href="qml-qt3d-core-configuration.xml">Configuration</db:link> type provides a temporary workaround for having mouse control of the camera while the proper implementation that uses aspects and components is being completed:</db:para>
<db:programlisting language="cpp">    Configuration  {
        controlledCamera: mainCamera
    }

</db:programlisting>
<db:para>It is trivial to use multiple cameras and choose between them using the framegraph for all or part of the scene rendering.</db:para>
</db:section>
<db:section xml:id="mapping-materials">
<db:title>Mapping Materials</db:title>
<db:para>Qt 3D has a robust and very flexible <db:link xlink:href="qt3d-overview.xml#materials">material system</db:link> that allows multiple levels of customization. We use the WireframeMaterial custom type to wrap the <db:link xlink:href="qml-qt3d-render-material.xml">Material</db:link> type:</db:para>
<db:programlisting language="cpp">    WireframeMaterial {
        id: wireframeMaterial
        effect: WireframeEffect {}
        ambient: Qt.rgba( 0.2, 0.0, 0.0, 1.0 )
        diffuse: Qt.rgba( 0.8, 0.0, 0.0, 1.0 )

</db:programlisting>
<db:para>We then instantiate the TrefoilKnot type and set the material on it:</db:para>
<db:programlisting language="cpp">    TrefoilKnot {
        id: trefoilKnot
        material: wireframeMaterial
    }
</db:programlisting>
<db:para>The Qt 3D engine in conjunction with the renderer aspect now has enough information to finally render our mesh using the material we specified.</db:para>
</db:section>
<db:section xml:id="using-animation-elements">
<db:title>Using Animation Elements</db:title>
<db:para>We use the animation elements provided by Qt Quick 2 to animate the properties of the TrefoilKnot and WireframeMaterial types. The properties of the components of a type are updated by using the QML property binding mechanism:</db:para>
<db:programlisting language="cpp">        QQ2.SequentialAnimation {
            loops: QQ2.Animation.Infinite
            running: true

            QQ2.NumberAnimation {
                target: wireframeMaterial;
                property: &quot;lineWidth&quot;;
                duration: 1000;
                from: 0.8
                to: 1.8
            }

            QQ2.NumberAnimation {
                target: wireframeMaterial;
                property: &quot;lineWidth&quot;;
                duration: 1000;
                from: 1.8
                to: 0.8
            }

            QQ2.PauseAnimation { duration: 1500 }
        }
</db:programlisting>
<db:para>The property updates are noticed by the <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> base class and automatically sent through to the corresponding objects in the renderer aspect. The renderer then takes care of translating the property updates to new values for uniform variables in the GLSL shader programs.</db:para>
<db:para>Run the example to view the trefoil knot with the width of the wireframe lines pulsing. All the heavy lifting is being done by the GPU. The CPU only has to run the property animations and to translate the scenegraph and framegraph into raw OpenGL calls.</db:para>
<db:para>It is also possible to animate on the GPU via a custom shader program and material.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="wireframe/BasicCamera.qml">wireframe/BasicCamera.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="wireframe/TrefoilKnot.qml">wireframe/TrefoilKnot.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="wireframe/WireframeEffect.qml">wireframe/WireframeEffect.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="wireframe/WireframeMaterial.qml">wireframe/WireframeMaterial.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="wireframe/main.cpp">wireframe/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="wireframe/main.qml">wireframe/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="wireframe/shaders/robustwireframe.geom">wireframe/shaders/robustwireframe.geom</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="wireframe/shaders/robustwireframe.vert">wireframe/shaders/robustwireframe.vert</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="wireframe/wireframe.pro">wireframe/wireframe.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="wireframe/wireframe.qrc">wireframe/wireframe.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
