<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>InputEngine QML Type</db:title>
<db:productname>QtVirtualKeyboard</db:productname>
<db:edition>Qt Virtual Keyboard | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Virtual Keyboard</db:titleabbrev>
<db:abstract>
<db:para>Maps the user input to the input methods.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.VirtualKeyboard</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiates:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qvirtualkeyboardinputengine.xml">QVirtualKeyboardInputEngine</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>InputEngine is part of <db:simplelist><db:member>qtvirtualkeyboard-internal-qml</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The input engine is responsible for routing input events to input methods. The actual input logic is implemented by the input methods.</db:para>
<db:para>The input engine also includes the default input method, which takes care of default processing if the active input method does not handle the event.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="activeKey-prop">
<db:title>[read-only] activeKey : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>activeKey</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Currently pressed key.</db:para>
</db:section>
<db:section xml:id="inputMethod-prop">
<db:title>inputMethod : InputMethod</db:title>
<db:fieldsynopsis>
<db:type>InputMethod</db:type>
<db:varname>inputMethod</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Use this property to set the active input method, or to monitor when the active input method changes.</db:para>
</db:section>
<db:section xml:id="inputMode-prop">
<db:title>inputMode : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>inputMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Use this property to get or set the current input mode. The <db:link xlink:href="qml-qtquick-virtualkeyboard-inputengine.xml#inputModes-prop">InputEngine::inputModes</db:link> property provides the list of valid input modes for the current input method and locale.</db:para>
<db:para>The predefined input modes are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>InputEngine.InputMode.Latin</db:code> The default input mode for latin text.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.InputMode.Numeric</db:code> Only numeric input is allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.InputMode.Dialable</db:code> Only dialable input is allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.InputMode.Pinyin</db:code> Pinyin input mode for Chinese.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.InputMode.Cangjie</db:code> Cangjie input mode for Chinese.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.InputMode.Zhuyin</db:code> Zhuyin input mode for Chinese.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.InputMode.Hangul</db:code> Hangul input mode for Korean.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.InputMode.Hiragana</db:code> Hiragana input mode for Japanese.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.InputMode.Katakana</db:code> Katakana input mode for Japanese.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.InputMode.FullwidthLatin</db:code> Fullwidth latin input mode for East Asian languages.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.InputMode.Greek</db:code> Greek input mode.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.InputMode.Cyrillic</db:code> Cyrillic input mode.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.InputMode.Arabic</db:code> Arabic input mode.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.InputMode.Hebrew</db:code> Hebrew input mode.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.InputMode.ChineseHandwriting</db:code> Chinese handwriting.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.InputMode.JapaneseHandwriting</db:code> Japanese handwriting.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.InputMode.KoreanHandwriting</db:code> Korean handwriting.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.InputMode.Thai</db:code> Thai input mode.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.InputMode.Stroke</db:code> Stroke input mode for Chinese.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.InputMode.Romaji</db:code> Romaji input mode for Japanese.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="inputModes-prop">
<db:title>[read-only] inputModes : list&lt;int&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;int&gt;</db:type>
<db:varname>inputModes</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The list of available input modes is dependent on the input method and locale. This property is updated when either of the dependencies change.</db:para>
</db:section>
<db:section xml:id="patternRecognitionModes-prop">
<db:title>[read-only, since QtQuick.VirtualKeyboard 2.0] patternRecognitionModes : list&lt;int&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;int&gt;</db:type>
<db:varname>patternRecognitionModes</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The list of available pattern recognition modes.</db:para>
<db:para>Possible values:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>InputEngine.PatternRecognitionMode.None</db:para>
</db:td>
<db:td>
<db:para>Pattern recognition is not available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>InputEngine.PatternRecognitionMode.PatternRecognitionDisabled</db:para>
</db:td>
<db:td>
<db:para><db:code>obsolete</db:code> - Use <db:code>None</db:code> instead.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>InputEngine.PatternRecognitionMode.Handwriting</db:para>
</db:td>
<db:td>
<db:para>Pattern recognition mode for handwriting recognition.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>InputEngine.PatternRecognitionMode.HandwritingRecoginition</db:para>
</db:td>
<db:td>
<db:para><db:code>obsolete</db:code> - Use <db:code>Handwriting</db:code> instead.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This property was introduced in QtQuick.VirtualKeyboard 2.0.</db:para>
</db:section>
<db:section xml:id="previousKey-prop">
<db:title>[read-only] previousKey : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>previousKey</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Previously pressed key.</db:para>
</db:section>
<db:section xml:id="wordCandidateListModel-prop">
<db:title>[read-only] wordCandidateListModel : SelectionListModel</db:title>
<db:fieldsynopsis>
<db:type>SelectionListModel</db:type>
<db:varname>wordCandidateListModel</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Use this property to access the list model for the word candidate list.</db:para>
</db:section>
<db:section xml:id="wordCandidateListVisibleHint-prop">
<db:title>[read-only] wordCandidateListVisibleHint : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>wordCandidateListVisibleHint</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Use this property to check if the word candidate list should be visible in the UI.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="activeKeyChanged-signal">
<db:title>void activeKeyChanged(int <db:emphasis>key</db:emphasis>)</db:title>
<db:para>Indicates that the active <db:code role="parameter">key</db:code> has changed.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onActiveKeyChanged</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="inputMethodChanged-signal">
<db:title>void inputMethodChanged()</db:title>
<db:para>Indicates that the input method has changed.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onInputMethodChanged</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="inputMethodReset-signal">
<db:title>void inputMethodReset()</db:title>
<db:para>Emitted when the input method needs to be reset.</db:para>
<db:note>
<db:para>This signal is automatically connected to <db:link xlink:href="qvirtualkeyboardabstractinputmethod.xml#reset">QVirtualKeyboardAbstractInputMethod::reset</db:link>() and <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#reset-method">InputMethod::reset</db:link>() when the input method is activated.</db:para>
</db:note>
<db:note>
<db:para>The corresponding handler is <db:code>onInputMethodReset</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="inputMethodUpdate-signal">
<db:title>void inputMethodUpdate()</db:title>
<db:note>
<db:para>This signal is automatically connected to <db:link xlink:href="qvirtualkeyboardabstractinputmethod.xml#update">QVirtualKeyboardAbstractInputMethod::update</db:link>() and <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#update-method">InputMethod::update</db:link>() when the input method is activated.</db:para>
</db:note>
<db:note>
<db:para>The corresponding handler is <db:code>onInputMethodUpdate</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="inputModeChanged-signal">
<db:title>void inputModeChanged()</db:title>
<db:para>Indicates that the input mode has changed.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onInputModeChanged</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="inputModesChanged-signal">
<db:title>void inputModesChanged()</db:title>
<db:para>Indicates that the available input modes have changed.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onInputModesChanged</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="patternRecognitionModesChanged-signal">
<db:title>[since QtQuick.VirtualKeyboard 2.0] void patternRecognitionModesChanged()</db:title>
<db:para>Indicates that the available pattern recognition modes have changed.</db:para>
<db:para>The predefined pattern recognition modes are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>InputEngine.PatternRecognitionMode.None</db:code> Pattern recognition is not available.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.PatternRecognitionMode.PatternRecognitionDisabled</db:code> <db:code>obsolete</db:code> Use <db:link xlink:href="qml-qtquick-virtualkeyboard-inputengine.xml">InputEngine</db:link>.PatternRecognitionMode.None</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.PatternRecognitionMode.Handwriting</db:code> Pattern recognition mode for handwriting recognition.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.PatternRecognitionMode.HandwritingRecoginition</db:code> <db:code>obsolete</db:code> Use <db:link xlink:href="qml-qtquick-virtualkeyboard-inputengine.xml">InputEngine</db:link>.PatternRecognitionMode.Handwriting</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>The corresponding handler is <db:code>onPatternRecognitionModesChanged</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtQuick.VirtualKeyboard 2.0.</db:para>
</db:section>
<db:section xml:id="previousKeyChanged-signal">
<db:title>void previousKeyChanged(int <db:emphasis>key</db:emphasis>)</db:title>
<db:para>Indicates that the previous <db:code role="parameter">key</db:code> has changed.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onPreviousKeyChanged</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="virtualKeyClicked-signal">
<db:title>void virtualKeyClicked(int <db:emphasis>key</db:emphasis>, string <db:emphasis>text</db:emphasis>, int <db:emphasis>modifiers</db:emphasis>)</db:title>
<db:para>Indicates that the virtual <db:code role="parameter">key</db:code> was clicked with the given <db:code role="parameter">text</db:code> and <db:code role="parameter">modifiers</db:code>. This signal is emitted after the input method has processed the key event.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onVirtualKeyClicked</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="traceBegin-method">
<db:title>[since QtQuick.VirtualKeyboard 2.0] Trace traceBegin(int <db:emphasis>traceId</db:emphasis>, int <db:emphasis>patternRecognitionMode</db:emphasis>, var <db:emphasis>traceCaptureDeviceInfo</db:emphasis>, var <db:emphasis>traceScreenInfo</db:emphasis>)</db:title>
<db:para>Starts a trace interaction with the input engine.</db:para>
<db:para>The trace is uniquely identified by the <db:code role="parameter">traceId</db:code>. The input engine will assign the id to the Trace object if the input method accepts the event.</db:para>
<db:para>The <db:code role="parameter">patternRecognitionMode</db:code> specifies the recognition mode used for the pattern.</db:para>
<db:para>If the current input method accepts the event it returns a Trace object associated with this interaction. If the input method discards the event, it returns a null value.</db:para>
<db:para>The <db:code role="parameter">traceCaptureDeviceInfo</db:code> provides information about the source device and the <db:code role="parameter">traceScreenInfo</db:code> provides information about the screen context.</db:para>
<db:para>By definition, the Trace object remains valid until the <db:link xlink:href="qml-qtquick-virtualkeyboard-inputengine.xml#traceEnd-method">traceEnd</db:link>() method is called.</db:para>
<db:para>The trace interaction is ended by calling the <db:link xlink:href="qml-qtquick-virtualkeyboard-inputengine.xml#traceEnd-method">InputEngine.traceEnd</db:link>() method.</db:para>
<db:para>This method was introduced in QtQuick.VirtualKeyboard 2.0.</db:para>
</db:section>
<db:section xml:id="traceEnd-method">
<db:title>bool traceEnd(Trace <db:emphasis>trace</db:emphasis>)</db:title>
<db:para>Ends the trace interaction with the input engine.</db:para>
<db:para>The <db:code role="parameter">trace</db:code> object may be discarded at any point after calling this function.</db:para>
<db:para>The function returns true if the trace interaction was accepted (i.e. the touch events should not be used for anything else).</db:para>
</db:section>
<db:section xml:id="virtualKeyCancel-method">
<db:title>void virtualKeyCancel()</db:title>
<db:para>Reverts the active key state without emitting the key event. This method is useful when the user discards the current key and the key state needs to be restored.</db:para>
</db:section>
<db:section xml:id="virtualKeyClick-method">
<db:title>bool virtualKeyClick(int <db:emphasis>key</db:emphasis>, string <db:emphasis>text</db:emphasis>, int <db:emphasis>modifiers</db:emphasis>)</db:title>
<db:para>Emits a key click event for the given <db:code role="parameter">key</db:code>, <db:code role="parameter">text</db:code> and <db:code role="parameter">modifiers</db:code>. Returns <db:code>true</db:code> if the key event was accepted by the input engine.</db:para>
</db:section>
<db:section xml:id="virtualKeyPress-method">
<db:title>bool virtualKeyPress(int <db:emphasis>key</db:emphasis>, string <db:emphasis>text</db:emphasis>, int <db:emphasis>modifiers</db:emphasis>, bool <db:emphasis>repeat</db:emphasis>)</db:title>
<db:para>Called by the keyboard layer to indicate that <db:code role="parameter">key</db:code> was pressed, with the given <db:code role="parameter">text</db:code> and <db:code role="parameter">modifiers</db:code>.</db:para>
<db:para>The <db:code role="parameter">key</db:code> is set as an active key (down key). The actual key event is triggered when the key is released by the <db:link xlink:href="qml-qtquick-virtualkeyboard-inputengine.xml#virtualKeyRelease-method">virtualKeyRelease</db:link>() method. The key press event can be discarded by calling <db:link xlink:href="qml-qtquick-virtualkeyboard-inputengine.xml#virtualKeyCancel-method">virtualKeyCancel</db:link>().</db:para>
<db:para>The key press also initiates the key repeat timer if <db:code role="parameter">repeat</db:code> is <db:code>true</db:code>.</db:para>
<db:para>Returns <db:code>true</db:code> if the key was accepted by this input engine.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-virtualkeyboard-inputengine.xml#virtualKeyCancel-method">virtualKeyCancel</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-virtualkeyboard-inputengine.xml#virtualKeyRelease-method">virtualKeyRelease</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="virtualKeyRelease-method">
<db:title>bool virtualKeyRelease(int <db:emphasis>key</db:emphasis>, string <db:emphasis>text</db:emphasis>, int <db:emphasis>modifiers</db:emphasis>)</db:title>
<db:para>Releases the key at <db:code role="parameter">key</db:code>. The method emits a key event for the input method if the event has not been generated by a repeating timer. The <db:code role="parameter">text</db:code> and <db:code role="parameter">modifiers</db:code> are passed to the input method.</db:para>
<db:para>Returns <db:code>true</db:code> if the key was accepted by the input engine.</db:para>
</db:section>
</db:section>
</db:article>
