<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>OpenGL Example (ActiveQt)</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The OpenGL example demonstrates the use of the default factory and <db:link xlink:href="qaxfactory.xml#isServer">QAxFactory::isServer</db:link>(), and the implementation of an additional COM interface using <db:link xlink:href="qaxbindable.xml">QAxBindable</db:link> and <db:link xlink:href="qaxaggregated.xml">QAxAggregated</db:link>. The server executable can run both as an ActiveX server and as a stand-alone application.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;globjwin.h&quot;
#include &quot;glbox.h&quot;
#include &lt;QPushButton&gt;
#include &lt;QSlider&gt;
#include &lt;QLayout&gt;
#include &lt;QFrame&gt;
#include &lt;QMenuBar&gt;
#include &lt;QMenu&gt;
#include &lt;QApplication&gt;

GLObjectWindow::GLObjectWindow(QWidget* parent)
    : QWidget(parent)
{

    // Create a menu
    QMenu *file = new QMenu( this );
    file-&gt;addAction( &quot;Exit&quot;,  qApp, SLOT(quit())/*, CTRL+Key_Q*/);

    // Create a menu bar
    QMenuBar *m = new QMenuBar( this );
    m-&gt;addMenu(file)-&gt;setText(&quot;&amp;File&quot;);

    // Create a nice frame to put around the OpenGL widget
    QFrame* f = new QFrame(this);
    f-&gt;setFrameStyle( QFrame::Sunken | QFrame::Panel );
    f-&gt;setLineWidth( 2 );

    // Create our OpenGL widget
    GLBox* c = new GLBox( f, &quot;glbox&quot;);

    // Create the three sliders; one for each rotation axis
    QSlider* x = new QSlider(Qt::Vertical, this);
    x-&gt;setMaximum(360);
    x-&gt;setPageStep(60);
    x-&gt;setTickPosition( QSlider::TicksLeft );
    QObject::connect( x, SIGNAL(valueChanged(int)),c,SLOT(setXRotation(int)) );

    QSlider* y = new QSlider(Qt::Vertical, this);
    y-&gt;setMaximum(360);
    y-&gt;setPageStep(60);
    y-&gt;setTickPosition( QSlider::TicksLeft );
    QObject::connect( y, SIGNAL(valueChanged(int)),c,SLOT(setYRotation(int)) );

    QSlider* z = new QSlider(Qt::Vertical, this);
    z-&gt;setMaximum(360);
    z-&gt;setPageStep(60);
    z-&gt;setTickPosition( QSlider::TicksLeft );
    QObject::connect( z, SIGNAL(valueChanged(int)),c,SLOT(setZRotation(int)) );

    // Now that we have all the widgets, put them into a nice layout

    // Top level layout, puts the sliders to the left of the frame/GL widget
    QHBoxLayout* hlayout = new QHBoxLayout(this);

    // Put the sliders on top of each other
    QVBoxLayout* vlayout = new QVBoxLayout();
    vlayout-&gt;addWidget( x );
    vlayout-&gt;addWidget( y );
    vlayout-&gt;addWidget( z );

    // Put the GL widget inside the frame
    QHBoxLayout* flayout = new QHBoxLayout(f);
    flayout-&gt;setMargin(0);
    flayout-&gt;addWidget( c, 1 );

    hlayout-&gt;setMenuBar( m );
    hlayout-&gt;addLayout( vlayout );
    hlayout-&gt;addWidget( f, 1 );
}

</db:programlisting>
</db:article>
