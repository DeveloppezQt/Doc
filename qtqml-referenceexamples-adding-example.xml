<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Extending QML - Adding Types Example</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Exporting C++ Classes.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Adding Types Example shows how to add a new object type, <db:code>Person</db:code>, to QML. The <db:code>Person</db:code> type can be used from QML like this:</db:para>
<db:programlisting language="qml">import People

Person {
    name: &quot;Bob Jones&quot;
    shoeSize: 12
}
</db:programlisting>
<db:section xml:id="declare-the-person-class">
<db:title>Declare the Person Class</db:title>
<db:para>All QML types map to C++ types. Here we declare a basic C++ Person class with the two properties we want accessible on the QML type - name and shoeSize. Although in this example we use the same name for the C++ class as the QML type, the C++ class can be named differently, or appear in a namespace.</db:para>
<db:programlisting language="cpp">class Person : public QObject
{
    Q_OBJECT
    Q_PROPERTY(QString name READ name WRITE setName)
    Q_PROPERTY(int shoeSize READ shoeSize WRITE setShoeSize)
    QML_ELEMENT
public:
    using QObject::QObject;

    QString name() const;
    void setName(const QString &amp;amp;);

    int shoeSize() const;
    void setShoeSize(int);

private:
    QString m_name;
    int m_shoeSize = 0;
};
</db:programlisting>
</db:section>
<db:section xml:id="define-the-person-class">
<db:title>Define the Person Class</db:title>
<db:programlisting language="cpp">QString Person::name() const
{
    return m_name;
}

void Person::setName(const QString &amp;amp;n)
{
    m_name = n;
}

int Person::shoeSize() const
{
    return m_shoeSize;
}

void Person::setShoeSize(int s)
{
    m_shoeSize = s;
}
</db:programlisting>
<db:para>The Person class implementation is quite basic. The property accessors simply return members of the object instance.</db:para>
</db:section>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>The main.cpp file in the example includes a simple shell application that loads and runs the QML snippet shown at the beginning of this page.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/qml/referenceexamples/adding?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
