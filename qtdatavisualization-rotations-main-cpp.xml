<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Rotations Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using rotated scatter items.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Data Visualization module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;scatterdatamodifier.h&quot;

#include &lt;QtWidgets/QApplication&gt;
#include &lt;QtWidgets/QWidget&gt;
#include &lt;QtWidgets/QHBoxLayout&gt;
#include &lt;QtWidgets/QVBoxLayout&gt;
#include &lt;QtWidgets/QPushButton&gt;
#include &lt;QtWidgets/QSlider&gt;
#include &lt;QtWidgets/QLabel&gt;
#include &lt;QtWidgets/QMessageBox&gt;
#include &lt;QtGui/QScreen&gt;

int main(int argc, char **argv)
{
    QApplication app(argc, argv);
    Q3DScatter *graph = new Q3DScatter();
    QWidget *container = QWidget::createWindowContainer(graph);

    if (!graph-&gt;hasContext()) {
        QMessageBox msgBox;
        msgBox.setText(&quot;Couldn't initialize the OpenGL context.&quot;);
        msgBox.exec();
        return -1;
    }

    QSize screenSize = graph-&gt;screen()-&gt;size();
    container-&gt;setMinimumSize(QSize(screenSize.width() / 2, screenSize.height() / 1.5));
    container-&gt;setMaximumSize(screenSize);
    container-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
    container-&gt;setFocusPolicy(Qt::StrongFocus);

    QWidget *widget = new QWidget;
    QHBoxLayout *hLayout = new QHBoxLayout(widget);
    QVBoxLayout *vLayout = new QVBoxLayout();
    hLayout-&gt;addWidget(container, 1);
    hLayout-&gt;addLayout(vLayout);

    widget-&gt;setWindowTitle(QStringLiteral(&quot;Item rotations example - Magnetic field of the sun&quot;));

    QPushButton *toggleRotationButton = new QPushButton(widget);
    toggleRotationButton-&gt;setText(QStringLiteral(&quot;Toggle animation&quot;));
    QPushButton *toggleSunButton = new QPushButton(widget);
    toggleSunButton-&gt;setText(QStringLiteral(&quot;Toggle Sun&quot;));

    QSlider *fieldLinesSlider = new QSlider(Qt::Horizontal, widget);
    fieldLinesSlider-&gt;setTickInterval(1);
    fieldLinesSlider-&gt;setMinimum(1);
    fieldLinesSlider-&gt;setValue(12);
    fieldLinesSlider-&gt;setMaximum(128);

    QSlider *arrowsSlider = new QSlider(Qt::Horizontal, widget);
    arrowsSlider-&gt;setTickInterval(1);
    arrowsSlider-&gt;setMinimum(8);
    arrowsSlider-&gt;setValue(16);
    arrowsSlider-&gt;setMaximum(32);

    vLayout-&gt;addWidget(toggleRotationButton);
    vLayout-&gt;addWidget(toggleSunButton);
    vLayout-&gt;addWidget(new QLabel(QStringLiteral(&quot;Field Lines (1 - 128):&quot;)));
    vLayout-&gt;addWidget(fieldLinesSlider);
    vLayout-&gt;addWidget(new QLabel(QStringLiteral(&quot;Arrows per line (8 - 32):&quot;)));
    vLayout-&gt;addWidget(arrowsSlider, 1, Qt::AlignTop);

    ScatterDataModifier *modifier = new ScatterDataModifier(graph);

    QObject::connect(toggleRotationButton, &amp;QPushButton::clicked, modifier,
                     &amp;ScatterDataModifier::toggleRotation);
    QObject::connect(toggleSunButton, &amp;QPushButton::clicked, modifier,
                     &amp;ScatterDataModifier::toggleSun);
    QObject::connect(fieldLinesSlider, &amp;QSlider::valueChanged, modifier,
                     &amp;ScatterDataModifier::setFieldLines);
    QObject::connect(arrowsSlider, &amp;QSlider::valueChanged, modifier,
                     &amp;ScatterDataModifier::setArrowsPerLine);

    widget-&gt;show();
    return app.exec();
}

</db:programlisting>
</db:article>
