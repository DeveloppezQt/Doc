<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Overview Compositor</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt Wayland Compositor | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Overview Compositor shows how to switch between clients in a grid.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>Overview Compositor demonstrates selecting and activating an application from a grid of currently connected clients.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/overview-compositor.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>For an introduction to the basic principles of creating a <db:link xlink:href="qtwaylandcompositor-index.xml">Qt Wayland Compositor</db:link> with Qt, see the <db:link xlink:href="qtwaylandcompositor-minimal-qml-example.xml">Minimal QML example</db:link>.</db:para>
</db:section>
<db:section xml:id="application-grid">
<db:title>Application Grid</db:title>
<db:para>In this example, the compositor supports two different modes of operation:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A <db:emphasis>fullscreen</db:emphasis> mode, where a single application window occupies the whole compositor window and is interactable.</db:para>
</db:listitem>
<db:listitem>
<db:para>An <db:emphasis>overview</db:emphasis> mode, where all application windows are visible in a grid. Clicking on a window in the grid causes it to be selected. The compositor enters fullscreen mode, showing the selected application window.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When a client connects to the compositor and creates a top-level surface, the surface will be connected to a <db:link xlink:href="qtwaylandcompositor-shellextensions.xml">shell extension</db:link>. The example only supports the <db:link xlink:href="qml-qtwayland-compositor-xdgshell-xdgshell.xml">XdgShell</db:link> extension, so the client will connect to this.</db:para>
<db:programlisting language="qml">XdgShell {
    onToplevelCreated: (toplevel, xdgSurface) =&amp;gt; {
        toplevels.append({xdgSurface});
        toplevel.sendFullscreen(Qt.size(win.pixelWidth, win.pixelHeight));
    }
}
</db:programlisting>
<db:para>For each surface, we tell the client to configure it as fullscreen. In addition, the surfaces are added to a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> for easy access.</db:para>
<db:para>This model is used by a <db:link xlink:href="qml-qtquick-repeater.xml">Repeater</db:link> to create <db:link xlink:href="qml-qtwayland-compositor-shellsurfaceitem.xml">ShellSurfaceItems</db:link> inside a <db:link xlink:href="qml-qtquick-grid.xml">Grid</db:link>. The <db:link xlink:href="qml-qtquick-grid.xml">Grid</db:link> component positions the items in a grid.</db:para>
<db:programlisting language="qml">Repeater {
    model: toplevels
    Item {
        width: win.width
        height: win.height
        ShellSurfaceItem {
            anchors.fill: parent
            shellSurface: xdgSurface
            onSurfaceDestroyed: toplevels.remove(index)
        }
        MouseArea {
            enabled: grid.overview
            anchors.fill: parent
            onClicked: {
                grid.selected = index;
                grid.overview = false;
            }
        }
    }
}
</db:programlisting>
<db:para>For each of the items, we create a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> which covers the item and intercepts all mouse and touch input. This is only active when the compositor is in <db:emphasis>overview</db:emphasis> mode, and activates the application that was clicked.</db:para>
<db:para>When the compositor goes into fullscreen mode, the same <db:link xlink:href="qml-qtquick-grid.xml">Grid</db:link> component is used, but is scaled and translated into a position where the single selected cell fills the compositor's window. The idea is to &quot;zoom in&quot; on the selected cell, allowing the user to interact with the application it contains.</db:para>
<db:programlisting language="qml">transform: [
    Scale {
        xScale: grid.overview ? (1.0/grid.columns) : 1
        yScale: grid.overview ? (1.0/grid.columns) : 1
        Behavior on xScale { PropertyAnimation { easing.type: Easing.InOutQuad; duration: 200 } }
        Behavior on yScale { PropertyAnimation { easing.type: Easing.InOutQuad; duration: 200 } }
    },
    Translate {
        x: grid.overview ? 0 : win.width * -grid.selectedColumn
        y: grid.overview ? 0 : win.height * -grid.selectedRow
        Behavior on x { PropertyAnimation { easing.type: Easing.InOutQuad; duration: 200 } }
        Behavior on y { PropertyAnimation { easing.type: Easing.InOutQuad; duration: 200 } }
    }
]
</db:programlisting>
<db:para>At the bottom side of the window, there is a button which toggles between the modes. This can be used to bring back the application grid while the compositor is in fullscreen mode.</db:para>
<db:para>This example shows one way to have the compositor visualize clients in different modes. Another way to achieve similar effects is to create multiple Qt Quick items that refer to the same surface. See <db:link xlink:href="qtwaylandcompositor-multi-output-example.xml">the Multi Output example</db:link> for a demonstration.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtwayland.git/tree/examples/wayland/overview-compositor?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
