<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPdfSearchModel Class</db:title>
<db:productname>QtPdf</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Pdf Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpdfsearchmodel.xml">QPdfSearchModel</db:link> class searches for a string in a PDF document and holds the results.</db:para>
<db:para>This class was introduced in Qt 5.15.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPdfSearchModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.15</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractlistmodel.xml" xlink:role="class">QAbstractListModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This is used in the <db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link> paradigm to display a list of search results, to highlight them on the rendered PDF pages, and to iterate through them using the &quot;search forward&quot; / &quot;search backward&quot; buttons and shortcuts that would be found in a typical document-viewing UI:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/search-results.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Role-enum">
<db:title>enum QPdfSearchModel::Role</db:title>
<db:enumsynopsis>
<db:enumname>Role</db:enumname>
<db:enumitem>
<db:enumidentifier>Page</db:enumidentifier>
<db:enumvalue>Qt::UserRole</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IndexOnPage</db:enumidentifier>
<db:enumvalue>257</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Location</db:enumidentifier>
<db:enumvalue>258</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ContextBefore</db:enumidentifier>
<db:enumvalue>259</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ContextAfter</db:enumidentifier>
<db:enumvalue>260</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NRoles</db:enumidentifier>
<db:enumvalue>261</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfsearchmodel.xml">QPdfSearchModel</db:link></db:emphasis>::<db:emphasis role="bold">Role</db:emphasis>::Page</db:code></db:para>
</db:td>
<db:td><db:code>Qt::UserRole</db:code></db:td>
<db:td>
<db:para>The page number where the search result is found (int).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfsearchmodel.xml">QPdfSearchModel</db:link></db:emphasis>::<db:emphasis role="bold">Role</db:emphasis>::IndexOnPage</db:code></db:para>
</db:td>
<db:td><db:code>257</db:code></db:td>
<db:td>
<db:para>The index of the search result on the page (int).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfsearchmodel.xml">QPdfSearchModel</db:link></db:emphasis>::<db:emphasis role="bold">Role</db:emphasis>::Location</db:code></db:para>
</db:td>
<db:td><db:code>258</db:code></db:td>
<db:td>
<db:para>The position of the search result on the page (<db:link xlink:href="qpointf.xml">QPointF</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfsearchmodel.xml">QPdfSearchModel</db:link></db:emphasis>::<db:emphasis role="bold">Role</db:emphasis>::ContextBefore</db:code></db:para>
</db:td>
<db:td><db:code>259</db:code></db:td>
<db:td>
<db:para>The adjacent text on the page, before the search string (<db:link xlink:href="qstring.xml">QString</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfsearchmodel.xml">QPdfSearchModel</db:link></db:emphasis>::<db:emphasis role="bold">Role</db:emphasis>::ContextAfter</db:code></db:para>
</db:td>
<db:td><db:code>260</db:code></db:td>
<db:td>
<db:para>The adjacent text on the page, after the search string (<db:link xlink:href="qstring.xml">QString</db:link>).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdflink.xml">QPdfLink</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="document-prop">
<db:title>document : QPdfDocument*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPdfDocument*</db:type>
<db:varname>document</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">document</db:synopsisinfo>
<db:synopsisinfo role="setter">setDocument</db:synopsisinfo>
<db:synopsisinfo role="notifier">documentChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the document to search</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:type> *<db:emphasis role="bold">document</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDocument</db:emphasis>(<db:type><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:type> *<db:emphasis>document</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">documentChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="searchString-prop">
<db:title>searchString : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>searchString</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">searchString</db:synopsisinfo>
<db:synopsisinfo role="setter">setSearchString</db:synopsisinfo>
<db:synopsisinfo role="notifier">searchStringChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the string to search for</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">searchString</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSearchString</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>searchString</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">searchStringChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPdfSearchModel-1">
<db:title>[explicit] QPdfSearchModel::QPdfSearchModel(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPdfSearchModel</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPdfSearchModel(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new search model with parent object <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QPdfSearchModel">
<db:title>[override virtual] QPdfSearchModel::~QPdfSearchModel()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QPdfSearchModel</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPdfSearchModel() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the model.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>[override virtual] QVariant QPdfSearchModel::data(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, int <db:emphasis>role</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>data</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant data(const QModelIndex &amp;index, int role) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#data" role="function">QAbstractItemModel::data(const QModelIndex &amp;index, int role) const</db:link>.</db:para>
</db:section>
<db:section xml:id="resultAtIndex">
<db:title>QPdfLink QPdfSearchModel::resultAtIndex(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPdfLink</db:type>
<db:methodname>resultAtIndex</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPdfLink resultAtIndex(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a result found by <db:code role="parameter">index</db:code> in the <db:link xlink:href="qpdfsearchmodel.xml#document-prop">document</db:link>, regardless of the page on which it was found. <db:code role="parameter">index</db:code> must be less than <db:link xlink:href="qpdfsearchmodel.xml#rowCount">rowCount</db:link>.</db:para>
</db:section>
<db:section xml:id="resultsOnPage">
<db:title>QList&lt;QPdfLink&gt; QPdfSearchModel::resultsOnPage(int <db:emphasis>page</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QPdfLink&gt;</db:type>
<db:methodname>resultsOnPage</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>page</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QPdfLink&gt; resultsOnPage(int page) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of all results found on the given <db:code role="parameter">page</db:code>.</db:para>
</db:section>
<db:section xml:id="roleNames">
<db:title>[override virtual] QHash&lt;int, QByteArray&gt; QPdfSearchModel::roleNames() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QHash&lt;int, QByteArray&gt;</db:type>
<db:methodname>roleNames</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHash&lt;int, QByteArray&gt; roleNames() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#roleNames" role="function">QAbstractItemModel::roleNames() const</db:link>.</db:para>
</db:section>
<db:section xml:id="rowCount">
<db:title>[override virtual] int QPdfSearchModel::rowCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>rowCount</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int rowCount(const QModelIndex &amp;parent) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#rowCount" role="function">QAbstractItemModel::rowCount(const QModelIndex &amp;parent) const</db:link>.</db:para>
<db:para>The number of rows in the model is equal to the number of search results found.</db:para>
</db:section>
</db:section>
</db:article>
