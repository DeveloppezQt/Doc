<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Getting Started with Qt Quick Controls</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Quick Controls Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>A basic example of a QML file that makes use of controls is shown here:</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick.Controls

ApplicationWindow {
    title: &quot;My Application&quot;
    width: 640
    height: 480
    visible: true

    Button {
        text: &quot;Push Me&quot;
        anchors.centerIn: parent
    }
}
</db:programlisting>
<db:section xml:id="setting-up-controls-from-c">
<db:title>Setting Up Controls from C++</db:title>
<db:para>Although <db:link xlink:href="qquickview.xml">QQuickView</db:link> has traditionally been used to display QML files in a C++ application, doing this means you can only set window properties from C++.</db:para>
<db:para>With Qt Quick Controls, declare an <db:link xlink:href="qml-qtquick-controls-applicationwindow.xml">ApplicationWindow</db:link> as the root item of your application and launch it by using <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link> instead. This ensures that you can control top level window properties from QML.</db:para>
<db:para>A basic example of a source file that makes use of controls is shown here:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QGuiApplication&amp;gt;
#include &amp;lt;QQmlApplicationEngine&amp;gt;

int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);
    QQmlApplicationEngine engine;
    engine.load(QUrl(QStringLiteral(&quot;qrc:/main.qml&quot;)));
    return app.exec();
}
</db:programlisting>
<db:section xml:id="using-c-data-from-qml">
<db:title>Using C++ Data From QML</db:title>
<db:para>If you need to register a C++ class to use from QML, you can call <db:link xlink:href="qqmlengine.xml#qmlRegisterType-1">qmlRegisterType</db:link>() before declaring your <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link>. See <db:link xlink:href="qtqml-cppintegration-definetypes.xml">Defining QML Types from C++</db:link> for more information.</db:para>
<db:para>If you need to expose data to QML components, you need to make them available to the context of the current QML engine. See <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link> for more information.</db:para>
</db:section>
</db:section>
</db:article>
