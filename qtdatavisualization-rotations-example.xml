<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Rotations Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using rotated scatter items.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This example shows how to do the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Use item rotations</db:para>
</db:listitem>
<db:listitem>
<db:para>Use custom item meshes</db:para>
</db:listitem>
<db:listitem>
<db:para>Use range gradient to color the series</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For more basic example about using Qt Data Visualization graphs, see <db:link xlink:href="qtdatavisualization-bars-example.xml">Bars Example</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/rotations-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="using-rotations">
<db:title>Using Rotations</db:title>
<db:para>In this example we want to orient the arrow items tangentially to the origin. This requires rotating them, which can be achieved by specifying rotation quaternion to each item:</db:para>
<db:programlisting language="cpp">QQuaternion yRotation = QQuaternion::fromAxisAndAngle(0.0f, 1.0f, 0.0f, horizontalAngle * radiansToDegrees);
QQuaternion zRotation = QQuaternion::fromAxisAndAngle(0.0f, 0.0f, 1.0f, verticalAngle * radiansToDegrees);
QQuaternion totalRotation = yRotation * zRotation;
ptrToDataArray-&amp;gt;setRotation(totalRotation);
</db:programlisting>
<db:para>Since the items need to be rotated along two axes, we define two rotation quaternions, one for Y-axis and one for Z-axis, and then multiply these together to get the total rotation, which we set to the data item.</db:para>
</db:section>
<db:section xml:id="using-custom-item-meshes">
<db:title>Using Custom Item Meshes</db:title>
<db:para>The narrow arrow mesh we use for magnetic field arrow items is not a standard mesh. Instead we supply our own <db:code>narrowarrow.obj</db:code> file which contains the object definition for the mesh in <db:code>Wavefront</db:code> obj format:</db:para>
<db:programlisting language="cpp">m_magneticField-&amp;gt;setMesh(QAbstract3DSeries::MeshUserDefined);
m_magneticField-&amp;gt;setUserDefinedMesh(QStringLiteral(&quot;:/mesh/narrowarrow.obj&quot;));
</db:programlisting>
</db:section>
<db:section xml:id="using-range-gradient">
<db:title>Using Range Gradient</db:title>
<db:para>Setting the color style to range gradient in a series means that the item is colored according to its relative Y-value on the visible Y-coordinate range. We want the arrows on the bottom part of the graph to be darker and gradually get lighter higher they are, so we define a range gradient with black color at the position 0.0 and white color at the position 1.0:</db:para>
<db:programlisting language="cpp">QLinearGradient fieldGradient(0, 0, 16, 1024);
fieldGradient.setColorAt(0.0, Qt::black);
fieldGradient.setColorAt(1.0, Qt::white);
m_magneticField-&amp;gt;setBaseGradient(fieldGradient);
m_magneticField-&amp;gt;setColorStyle(Q3DTheme::ColorStyleRangeGradient);
</db:programlisting>
</db:section>
<db:section xml:id="example-contents">
<db:title>Example Contents</db:title>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdatavis3d.git/tree/examples/datavisualization/rotations?h=6.1">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:section>
</db:article>
