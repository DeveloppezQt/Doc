<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QAbstractScrollArea Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link> widget provides a scrolling area with on-demand scroll bars.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractScrollArea</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qframe.xml" xlink:role="class">QFrame</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractitemview.xml" xlink:role="class">QAbstractItemView</db:link>, <db:link xlink:href="qgraphicsview.xml" xlink:role="class">QGraphicsView</db:link>, <db:link xlink:href="qmdiarea.xml" xlink:role="class">QMdiArea</db:link>, <db:link xlink:href="qplaintextedit.xml" xlink:role="class">QPlainTextEdit</db:link>, <db:link xlink:href="qscrollarea.xml" xlink:role="class">QScrollArea</db:link>, and <db:link xlink:href="qtextedit.xml" xlink:role="class">QTextEdit</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractScrollArea is part of <db:simplelist><db:member>abstractwidgets</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link> is a low-level abstraction of a scrolling area. The area provides a central widget called the viewport, in which the contents of the area is to be scrolled (i.e, the visible parts of the contents are rendered in the viewport).</db:para>
<db:para>Next to the viewport is a vertical scroll bar, and below is a horizontal scroll bar. When all of the area contents fits in the viewport, each scroll bar can be either visible or hidden depending on the scroll bar's <db:link xlink:href="qt.xml#ScrollBarPolicy-enum">Qt::ScrollBarPolicy</db:link>. When a scroll bar is hidden, the viewport expands in order to cover all available space. When a scroll bar becomes visible again, the viewport shrinks in order to make room for the scroll bar.</db:para>
<db:para>It is possible to reserve a margin area around the viewport, see <db:link xlink:href="qabstractscrollarea.xml#setViewportMargins">setViewportMargins</db:link>(). The feature is mostly used to place a <db:link xlink:href="qheaderview.xml">QHeaderView</db:link> widget above or beside the scrolling area. Subclasses of <db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link> should implement margins.</db:para>
<db:para>When inheriting <db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link>, you need to do the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Control the scroll bars by setting their range, value, page step, and tracking their movements.</db:para>
</db:listitem>
<db:listitem>
<db:para>Draw the contents of the area in the viewport according to the values of the scroll bars.</db:para>
</db:listitem>
<db:listitem>
<db:para>Handle events received by the viewport in <db:link xlink:href="qabstractscrollarea.xml#viewportEvent">viewportEvent</db:link>() - notably resize events.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use <db:code>viewport-&gt;update()</db:code> to update the contents of the viewport instead of <db:link xlink:href="qwidget.xml#update">update</db:link>() as all painting operations take place on the viewport.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>With a scroll bar policy of <db:link xlink:href="qt.xml#ScrollBarPolicy-enum">Qt::ScrollBarAsNeeded</db:link> (the default), <db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link> shows scroll bars when they provide a non-zero scrolling range, and hides them otherwise.</db:para>
<db:para>The scroll bars and viewport should be updated whenever the viewport receives a resize event or the size of the contents changes. The viewport also needs to be updated when the scroll bars values change. The initial values of the scroll bars are often set when the area receives new contents.</db:para>
<db:para>We give a simple example, in which we have implemented a scroll area that can scroll any <db:link xlink:href="qwidget.xml">QWidget</db:link>. We make the widget a child of the viewport; this way, we do not have to calculate which part of the widget to draw but can simply move the widget with QWidget::move(). When the area contents or the viewport size changes, we do the following:</db:para>
<db:programlisting language="cpp">    QSize areaSize = viewport()-&gt;size();
    QSize  widgetSize = widget-&gt;size();

    verticalScrollBar()-&gt;setPageStep(areaSize.height());
    horizontalScrollBar()-&gt;setPageStep(areaSize.width());
    verticalScrollBar()-&gt;setRange(0, widgetSize.height() - areaSize.height());
    horizontalScrollBar()-&gt;setRange(0, widgetSize.width() - areaSize.width());
    updateWidgetPosition();
</db:programlisting>
<db:para>When the scroll bars change value, we need to update the widget position, i.e., find the part of the widget that is to be drawn in the viewport:</db:para>
<db:programlisting language="cpp">    int hvalue = horizontalScrollBar()-&gt;value();
    int vvalue = verticalScrollBar()-&gt;value();
    QPoint topLeft = viewport()-&gt;rect().topLeft();

    widget-&gt;move(topLeft.x() - hvalue, topLeft.y() - vvalue);
</db:programlisting>
<db:para>In order to track scroll bar movements, reimplement the virtual function <db:link xlink:href="qabstractscrollarea.xml#scrollContentsBy">scrollContentsBy</db:link>(). In order to fine-tune scrolling behavior, connect to a scroll bar's <db:link xlink:href="qabstractslider.xml#actionTriggered">QAbstractSlider::actionTriggered</db:link>() signal and adjust the <db:link xlink:href="">QAbstractSlider::sliderPosition</db:link> as you wish.</db:para>
<db:para>For convenience, <db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link> makes all viewport events available in the virtual <db:link xlink:href="qabstractscrollarea.xml#viewportEvent">viewportEvent</db:link>() handler. <db:link xlink:href="qwidget.xml">QWidget</db:link>'s specialized handlers are remapped to viewport events in the cases where this makes sense. The remapped specialized handlers are: <db:link xlink:href="qabstractscrollarea.xml#paintEvent">paintEvent</db:link>(), <db:link xlink:href="qabstractscrollarea.xml#mousePressEvent">mousePressEvent</db:link>(), <db:link xlink:href="qabstractscrollarea.xml#mouseReleaseEvent">mouseReleaseEvent</db:link>(), <db:link xlink:href="qabstractscrollarea.xml#mouseDoubleClickEvent">mouseDoubleClickEvent</db:link>(), <db:link xlink:href="qabstractscrollarea.xml#mouseMoveEvent">mouseMoveEvent</db:link>(), <db:link xlink:href="qabstractscrollarea.xml#wheelEvent">wheelEvent</db:link>(), <db:link xlink:href="qabstractscrollarea.xml#dragEnterEvent">dragEnterEvent</db:link>(), <db:link xlink:href="qabstractscrollarea.xml#dragMoveEvent">dragMoveEvent</db:link>(), <db:link xlink:href="qabstractscrollarea.xml#dragLeaveEvent">dragLeaveEvent</db:link>(), <db:link xlink:href="qabstractscrollarea.xml#dropEvent">dropEvent</db:link>(), <db:link xlink:href="qabstractscrollarea.xml#contextMenuEvent">contextMenuEvent</db:link>(), and <db:link xlink:href="qabstractscrollarea.xml#resizeEvent">resizeEvent</db:link>().</db:para>
<db:para><db:link xlink:href="qscrollarea.xml">QScrollArea</db:link>, which inherits <db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link>, provides smooth scrolling for any <db:link xlink:href="qwidget.xml">QWidget</db:link> (i.e., the widget is scrolled pixel by pixel). You only need to subclass <db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link> if you need more specialized behavior. This is, for instance, true if the entire contents of the area is not suitable for being drawn on a <db:link xlink:href="qwidget.xml">QWidget</db:link> or if you do not want smooth scrolling.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscrollarea.xml">QScrollArea</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractScrollArea">
<db:title>[explicit] QAbstractScrollArea::QAbstractScrollArea(QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a viewport.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> argument is sent to the <db:link xlink:href="qwidget.xml">QWidget</db:link> constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractScrollArea">
<db:title>[virtual noexcept] QAbstractScrollArea::~QAbstractScrollArea()</db:title>
<db:para>Destroys the viewport.</db:para>
</db:section>
<db:section xml:id="addScrollBarWidget">
<db:title>[since 4.2] void QAbstractScrollArea::addScrollBarWidget(QWidget *<db:emphasis>widget</db:emphasis>, Qt::Alignment <db:emphasis>alignment</db:emphasis>)</db:title>
<db:para>Adds <db:code role="parameter">widget</db:code> as a scroll bar widget in the location specified by <db:code role="parameter">alignment</db:code>.</db:para>
<db:para>Scroll bar widgets are shown next to the horizontal or vertical scroll bar, and can be placed on either side of it. If you want the scroll bar widgets to be always visible, set the scrollBarPolicy for the corresponding scroll bar to <db:code>AlwaysOn</db:code>.</db:para>
<db:para><db:code role="parameter">alignment</db:code> must be one of Qt::Alignleft and <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignRight</db:link>, which maps to the horizontal scroll bar, or <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignTop</db:link> and <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignBottom</db:link>, which maps to the vertical scroll bar.</db:para>
<db:para>A scroll bar widget can be removed by either re-parenting the widget or deleting it. It's also possible to hide a widget with <db:link xlink:href="qwidget.xml#hide">QWidget::hide</db:link>()</db:para>
<db:para>The scroll bar widget will be resized to fit the scroll bar geometry for the current style. The following describes the case for scroll bar widgets on the horizontal scroll bar:</db:para>
<db:para>The height of the widget will be set to match the height of the scroll bar. To control the width of the widget, use QWidget::setMinimumWidth and QWidget::setMaximumWidth, or implement QWidget::sizeHint() and set a horizontal size policy. If you want a square widget, call <db:link xlink:href="qstyle.xml#pixelMetric">QStyle::pixelMetric</db:link>(<db:link xlink:href="qstyle.xml#PixelMetric-enum">QStyle::PM_ScrollBarExtent</db:link>) and set the width to this value.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractscrollarea.xml#scrollBarWidgets">scrollBarWidgets</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contextMenuEvent">
<db:title>[override virtual protected] void QAbstractScrollArea::contextMenuEvent(QContextMenuEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#contextMenuEvent" role="function">QWidget::contextMenuEvent(QContextMenuEvent *event)</db:link>.</db:para>
<db:para>This event handler can be reimplemented in a subclass to receive context menu events for the <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>() widget. The event is passed in <db:code role="parameter">e</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#contextMenuEvent">QWidget::contextMenuEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cornerWidget">
<db:title>[since 4.2] QWidget *QAbstractScrollArea::cornerWidget() const</db:title>
<db:para>Returns the widget in the corner between the two scroll bars.</db:para>
<db:para>By default, no corner widget is present.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractscrollarea.xml#setCornerWidget">setCornerWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragEnterEvent">
<db:title>[override virtual protected] void QAbstractScrollArea::dragEnterEvent(QDragEnterEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dragEnterEvent" role="function">QWidget::dragEnterEvent(QDragEnterEvent *event)</db:link>.</db:para>
<db:para>This event handler can be reimplemented in a subclass to receive drag enter events (passed in <db:code role="parameter">event</db:code>), for the <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>() widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#dragEnterEvent">QWidget::dragEnterEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragLeaveEvent">
<db:title>[override virtual protected] void QAbstractScrollArea::dragLeaveEvent(QDragLeaveEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dragLeaveEvent" role="function">QWidget::dragLeaveEvent(QDragLeaveEvent *event)</db:link>.</db:para>
<db:para>This event handler can be reimplemented in a subclass to receive drag leave events (passed in <db:code role="parameter">event</db:code>), for the <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>() widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#dragLeaveEvent">QWidget::dragLeaveEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragMoveEvent">
<db:title>[override virtual protected] void QAbstractScrollArea::dragMoveEvent(QDragMoveEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dragMoveEvent" role="function">QWidget::dragMoveEvent(QDragMoveEvent *event)</db:link>.</db:para>
<db:para>This event handler can be reimplemented in a subclass to receive drag move events (passed in <db:code role="parameter">event</db:code>), for the <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>() widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#dragMoveEvent">QWidget::dragMoveEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dropEvent">
<db:title>[override virtual protected] void QAbstractScrollArea::dropEvent(QDropEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dropEvent" role="function">QWidget::dropEvent(QDropEvent *event)</db:link>.</db:para>
<db:para>This event handler can be reimplemented in a subclass to receive drop events (passed in <db:code role="parameter">event</db:code>), for the <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>() widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#dropEvent">QWidget::dropEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QAbstractScrollArea::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qframe.xml#event" role="function">QFrame::event(QEvent *e)</db:link>.</db:para>
<db:para>This is the main event handler for the <db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link> widget (<db:emphasis>not</db:emphasis> the scrolling area <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>()). The specified <db:code role="parameter">event</db:code> is a general event object that may need to be cast to the appropriate class depending on its type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qevent.xml#type">QEvent::type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="horizontalScrollBar">
<db:title>QScrollBar *QAbstractScrollArea::horizontalScrollBar() const</db:title>
<db:para>Returns the horizontal scroll bar.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractscrollarea.xml#setHorizontalScrollBar">setHorizontalScrollBar</db:link>()</db:member>
<db:member>horizontalScrollBarPolicy</db:member>
<db:member><db:link xlink:href="qabstractscrollarea.xml#verticalScrollBar">verticalScrollBar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QAbstractScrollArea::keyPressEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyPressEvent" role="function">QWidget::keyPressEvent(QKeyEvent *event)</db:link>.</db:para>
<db:para>This function is called with key event <db:code role="parameter">e</db:code> when key presses occur. It handles PageUp, PageDown, Up, Down, Left, and Right, and ignores all other key presses.</db:para>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QAbstractScrollArea::minimumSizeHint() const</db:title>
</db:section>
<db:section xml:id="mouseDoubleClickEvent">
<db:title>[override virtual protected] void QAbstractScrollArea::mouseDoubleClickEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseDoubleClickEvent" role="function">QWidget::mouseDoubleClickEvent(QMouseEvent *event)</db:link>.</db:para>
<db:para>This event handler can be reimplemented in a subclass to receive mouse double click events for the <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>() widget. The event is passed in <db:code role="parameter">e</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#mouseDoubleClickEvent">QWidget::mouseDoubleClickEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QAbstractScrollArea::mouseMoveEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseMoveEvent" role="function">QWidget::mouseMoveEvent(QMouseEvent *event)</db:link>.</db:para>
<db:para>This event handler can be reimplemented in a subclass to receive mouse move events for the <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>() widget. The event is passed in <db:code role="parameter">e</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#mouseMoveEvent">QWidget::mouseMoveEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QAbstractScrollArea::mousePressEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mousePressEvent" role="function">QWidget::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
<db:para>This event handler can be reimplemented in a subclass to receive mouse press events for the <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>() widget. The event is passed in <db:code role="parameter">e</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#mousePressEvent">QWidget::mousePressEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QAbstractScrollArea::mouseReleaseEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseReleaseEvent" role="function">QWidget::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
<db:para>This event handler can be reimplemented in a subclass to receive mouse release events for the <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>() widget. The event is passed in <db:code role="parameter">e</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#mouseReleaseEvent">QWidget::mouseReleaseEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QAbstractScrollArea::paintEvent(QPaintEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qframe.xml#paintEvent" role="function">QFrame::paintEvent(QPaintEvent *)</db:link>.</db:para>
<db:para>This event handler can be reimplemented in a subclass to receive paint events (passed in <db:code role="parameter">event</db:code>), for the <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>() widget.</db:para>
<db:note>
<db:para>If you open a painter, make sure to open it on the <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#paintEvent">QWidget::paintEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QAbstractScrollArea::resizeEvent(QResizeEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#resizeEvent" role="function">QWidget::resizeEvent(QResizeEvent *)</db:link>.</db:para>
<db:para>This event handler can be reimplemented in a subclass to receive resize events (passed in <db:code role="parameter">event</db:code>), for the <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>() widget.</db:para>
<db:para>When resizeEvent() is called, the viewport already has its new geometry: Its new size is accessible through the <db:link xlink:href="qresizeevent.xml#size">QResizeEvent::size</db:link>() function, and the old size through <db:link xlink:href="qresizeevent.xml#oldSize">QResizeEvent::oldSize</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#resizeEvent">QWidget::resizeEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scrollBarWidgets">
<db:title>[since 4.2] QWidgetList QAbstractScrollArea::scrollBarWidgets(Qt::Alignment <db:emphasis>alignment</db:emphasis>)</db:title>
<db:para>Returns a list of the currently set scroll bar widgets. <db:code role="parameter">alignment</db:code> can be any combination of the four location flags.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractscrollarea.xml#addScrollBarWidget">addScrollBarWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scrollContentsBy">
<db:title>[virtual protected] void QAbstractScrollArea::scrollContentsBy(int <db:emphasis>dx</db:emphasis>, int <db:emphasis>dy</db:emphasis>)</db:title>
<db:para>This virtual handler is called when the scroll bars are moved by <db:code role="parameter">dx</db:code>, <db:code role="parameter">dy</db:code>, and consequently the viewport's contents should be scrolled accordingly.</db:para>
<db:para>The default implementation simply calls <db:link xlink:href="qwidget.xml#update">update</db:link>() on the entire <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>(), subclasses can reimplement this handler for optimization purposes, or - like <db:link xlink:href="qscrollarea.xml">QScrollArea</db:link> - to move a contents widget. The parameters <db:code role="parameter">dx</db:code> and <db:code role="parameter">dy</db:code> are there for convenience, so that the class knows how much should be scrolled (useful e.g. when doing pixel-shifts). You may just as well ignore these values and scroll directly to the position the scroll bars indicate.</db:para>
<db:para>Calling this function in order to scroll programmatically is an error, use the scroll bars instead (e.g. by calling QScrollBar::setValue() directly).</db:para>
</db:section>
<db:section xml:id="setCornerWidget">
<db:title>[since 4.2] void QAbstractScrollArea::setCornerWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Sets the widget in the corner between the two scroll bars to be <db:code role="parameter">widget</db:code>.</db:para>
<db:para>You will probably also want to set at least one of the scroll bar modes to <db:code>AlwaysOn</db:code>.</db:para>
<db:para>Passing 0 shows no widget in the corner.</db:para>
<db:para>Any previous corner widget is hidden.</db:para>
<db:para>You may call setCornerWidget() with the same widget at different times.</db:para>
<db:para>All widgets set here will be deleted by the scroll area when it is destroyed unless you separately reparent the widget after setting some other corner widget (or 0).</db:para>
<db:para>Any <db:emphasis>newly</db:emphasis> set widget should have no current parent.</db:para>
<db:para>By default, no corner widget is present.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractscrollarea.xml#cornerWidget">cornerWidget</db:link>()</db:member>
<db:member>horizontalScrollBarPolicy</db:member>
<db:member>horizontalScrollBarPolicy</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHorizontalScrollBar">
<db:title>[since 4.2] void QAbstractScrollArea::setHorizontalScrollBar(QScrollBar *<db:emphasis>scrollBar</db:emphasis>)</db:title>
<db:para>Replaces the existing horizontal scroll bar with <db:code role="parameter">scrollBar</db:code>, and sets all the former scroll bar's slider properties on the new scroll bar. The former scroll bar is then deleted.</db:para>
<db:para><db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link> already provides horizontal and vertical scroll bars by default. You can call this function to replace the default horizontal scroll bar with your own custom scroll bar.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractscrollarea.xml#horizontalScrollBar">horizontalScrollBar</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractscrollarea.xml#setVerticalScrollBar">setVerticalScrollBar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVerticalScrollBar">
<db:title>[since 4.2] void QAbstractScrollArea::setVerticalScrollBar(QScrollBar *<db:emphasis>scrollBar</db:emphasis>)</db:title>
<db:para>Replaces the existing vertical scroll bar with <db:code role="parameter">scrollBar</db:code>, and sets all the former scroll bar's slider properties on the new scroll bar. The former scroll bar is then deleted.</db:para>
<db:para><db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link> already provides vertical and horizontal scroll bars by default. You can call this function to replace the default vertical scroll bar with your own custom scroll bar.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractscrollarea.xml#verticalScrollBar">verticalScrollBar</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractscrollarea.xml#setHorizontalScrollBar">setHorizontalScrollBar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setViewport">
<db:title>[since 4.2] void QAbstractScrollArea::setViewport(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Sets the viewport to be the given <db:code role="parameter">widget</db:code>. The <db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link> will take ownership of the given <db:code role="parameter">widget</db:code>.</db:para>
<db:para>If <db:code role="parameter">widget</db:code> is 0, <db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link> will assign a new <db:link xlink:href="qwidget.xml">QWidget</db:link> instance for the viewport.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setViewportMargins">
<db:title>[protected, since 4.6] void QAbstractScrollArea::setViewportMargins(const QMargins &amp;<db:emphasis>margins</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">margins</db:code> around the scrolling area. This is useful for applications such as spreadsheets with &quot;locked&quot; rows and columns. The marginal space is is left blank; put widgets in the unused area.</db:para>
<db:para>By default all margins are zero.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
</db:section>
<db:section xml:id="setViewportMargins-1">
<db:title>[protected] void QAbstractScrollArea::setViewportMargins(int <db:emphasis>left</db:emphasis>, int <db:emphasis>top</db:emphasis>, int <db:emphasis>right</db:emphasis>, int <db:emphasis>bottom</db:emphasis>)</db:title>
<db:para>Sets the margins around the scrolling area to <db:code role="parameter">left</db:code>, <db:code role="parameter">top</db:code>, <db:code role="parameter">right</db:code> and <db:code role="parameter">bottom</db:code>. This is useful for applications such as spreadsheets with &quot;locked&quot; rows and columns. The marginal space is is left blank; put widgets in the unused area.</db:para>
<db:para>Note that this function is frequently called by <db:link xlink:href="qtreeview.xml">QTreeView</db:link> and <db:link xlink:href="qtableview.xml">QTableView</db:link>, so margins must be implemented by <db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link> subclasses. Also, if the subclasses are to be used in item views, they should not call this function.</db:para>
<db:para>By default all margins are zero.</db:para>
</db:section>
<db:section xml:id="setupViewport">
<db:title>[virtual] void QAbstractScrollArea::setupViewport(QWidget *<db:emphasis>viewport</db:emphasis>)</db:title>
<db:para>This slot is called by <db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link> after <db:link xlink:href="qabstractscrollarea.xml#setViewport">setViewport</db:link>(<db:code role="parameter">viewport</db:code>) has been called. Reimplement this function in a subclass of <db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link> to initialize the new <db:code role="parameter">viewport</db:code> before it is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractscrollarea.xml#setViewport">setViewport</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QAbstractScrollArea::sizeHint() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qframe.xml#sizeHint" role="function">QFrame::sizeHint() const</db:link>.</db:para>
</db:section>
<db:section xml:id="verticalScrollBar">
<db:title>QScrollBar *QAbstractScrollArea::verticalScrollBar() const</db:title>
<db:para>Returns the vertical scroll bar.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractscrollarea.xml#setVerticalScrollBar">setVerticalScrollBar</db:link>()</db:member>
<db:member>verticalScrollBarPolicy</db:member>
<db:member><db:link xlink:href="qabstractscrollarea.xml#horizontalScrollBar">horizontalScrollBar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="viewport">
<db:title>QWidget *QAbstractScrollArea::viewport() const</db:title>
<db:para>Returns the viewport widget.</db:para>
<db:para>Use the <db:link xlink:href="qscrollarea.xml#widget">QScrollArea::widget</db:link>() function to retrieve the contents of the viewport widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractscrollarea.xml#setViewport">setViewport</db:link>()</db:member>
<db:member><db:link xlink:href="qscrollarea.xml#widget">QScrollArea::widget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="viewportEvent">
<db:title>[virtual protected] bool QAbstractScrollArea::viewportEvent(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>The main event handler for the scrolling area (the <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>() widget). It handles the <db:code role="parameter">event</db:code> specified, and can be called by subclasses to provide reasonable default behavior.</db:para>
<db:para>Returns true to indicate to the event system that the event has been handled, and needs no further processing; otherwise returns false to indicate that the event should be propagated further.</db:para>
<db:para>You can reimplement this function in a subclass, but we recommend using one of the specialized event handlers instead.</db:para>
<db:para>Specialized handlers for viewport events are: <db:link xlink:href="qabstractscrollarea.xml#paintEvent">paintEvent</db:link>(), <db:link xlink:href="qabstractscrollarea.xml#mousePressEvent">mousePressEvent</db:link>(), <db:link xlink:href="qabstractscrollarea.xml#mouseReleaseEvent">mouseReleaseEvent</db:link>(), <db:link xlink:href="qabstractscrollarea.xml#mouseDoubleClickEvent">mouseDoubleClickEvent</db:link>(), <db:link xlink:href="qabstractscrollarea.xml#mouseMoveEvent">mouseMoveEvent</db:link>(), <db:link xlink:href="qabstractscrollarea.xml#wheelEvent">wheelEvent</db:link>(), <db:link xlink:href="qabstractscrollarea.xml#dragEnterEvent">dragEnterEvent</db:link>(), <db:link xlink:href="qabstractscrollarea.xml#dragMoveEvent">dragMoveEvent</db:link>(), <db:link xlink:href="qabstractscrollarea.xml#dragLeaveEvent">dragLeaveEvent</db:link>(), <db:link xlink:href="qabstractscrollarea.xml#dropEvent">dropEvent</db:link>(), <db:link xlink:href="qabstractscrollarea.xml#contextMenuEvent">contextMenuEvent</db:link>(), and <db:link xlink:href="qabstractscrollarea.xml#resizeEvent">resizeEvent</db:link>().</db:para>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[override virtual protected] void QAbstractScrollArea::wheelEvent(QWheelEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#wheelEvent" role="function">QWidget::wheelEvent(QWheelEvent *event)</db:link>.</db:para>
<db:para>This event handler can be reimplemented in a subclass to receive wheel events for the <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>() widget. The event is passed in <db:code role="parameter">e</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#wheelEvent">QWidget::wheelEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
