<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QModelIndex and related Classes in QML</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt QML Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Since Qt 5.5, QModelIndex and QPersistentModelIndex are exposed in QML as value-based types. Also exposed in a similar fashion are <db:link xlink:href="qmodelindex-proxy.xml#QModelIndexList-typedef">QModelIndexList</db:link>, QItemSelectionRange and QItemSelection. All objects from these types can be passed back and forth between QML and C++ as var properties or plain JavaScript variables.</db:para>
<db:para>Below you will find an overview of the API exposed to QML for these classes. For more information, refer to their C++ documentation.</db:para>
<db:note>
<db:para>Since all these types are exposed as <db:link xlink:href="qobject-proxy.xml#Q_GADGET">gadgets</db:link>, there are no property change notification signals emitted. Therefore binding to their properties may not give the expected results. This is especially true for QPersistentModelIndex.</db:para>
</db:note>
<db:section xml:id="qmodelindex-and-qpersistentmodelindex-types">
<db:title>QModelIndex and QPersistentModelIndex Types</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">row</db:emphasis> : int</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">column</db:emphasis> : int</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">parent</db:emphasis> : QModelIndex</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">valid</db:emphasis> : bool</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">model</db:emphasis> : QAbstractItemModel</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">internalId</db:emphasis> : quint64</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>All these properties are read-only, as are their C++ counterparts.</db:para>
<db:note>
<db:para>The usual caveats apply to QModelIndex in QML. If the underlying model changes or gets deleted, it may become dangerous to access its properties. Therefore, you should not store any QModelIndex objects. You can, however, store QPersistentModelIndexe objects in a safe way.</db:para>
</db:note>
</db:section>
<db:section xml:id="qmodelindexlist-type">
<db:title>QModelIndexList Type</db:title>
<db:para><db:link xlink:href="qmodelindex-proxy.xml#QModelIndexList-typedef">QModelIndexList</db:link> is exposed in QML as a JavaScript array. Conversions are automatically made from and to C++. In fact, any JavaScript array can be converted back to <db:link xlink:href="qmodelindex-proxy.xml#QModelIndexList-typedef">QModelIndexList</db:link>, with non-QModelIndex objects replaced by invalid <db:link xlink:href="qmodelindex-proxy.xml">QModelIndex</db:link>es.</db:para>
<db:note>
<db:para>QModelIndex to QPersistentModelIndex conversion happens when accessing the array elements because any <db:link xlink:href="qmodelindex-proxy.xml#QModelIndexList-typedef">QModelIndexList</db:link> property retains reference semantics when exposed this way.</db:para>
</db:note>
</db:section>
<db:section xml:id="qitemselectionrange-type">
<db:title>QItemSelectionRange Type</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">top</db:emphasis> : int</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">left</db:emphasis> : int</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">bottom</db:emphasis> : int</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">right</db:emphasis> : int</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">width</db:emphasis> : int</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">height</db:emphasis> : int</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">topLeft</db:emphasis> : QPersistentModelIndex</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">bottomRight</db:emphasis> : QPersistentModelIndex</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">parent</db:emphasis> : QModelIndex</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">valid</db:emphasis> : bool</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">empty</db:emphasis> : bool</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">model</db:emphasis> : QAbstractItemModel</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>All these properties are read-only, as are their C++ counterparts. In addition, we also expose the following functions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>bool <db:emphasis role="bold">contains</db:emphasis>(QModelIndex <db:emphasis>index</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para>bool <db:emphasis role="bold">contains</db:emphasis>(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, QModelIndex <db:emphasis>parentIndex</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para>bool <db:emphasis role="bold">intersects</db:emphasis>(QItemSelectionRange <db:emphasis>other</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para>QItemSelectionRange <db:emphasis role="bold">intersected</db:emphasis>(QItemSelectionRange <db:emphasis>other</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qitemselection-type">
<db:title>QItemSelection Type</db:title>
<db:para>Similarly to <db:link xlink:href="qmodelindex-proxy.xml#QModelIndexList-typedef">QModelIndexList</db:link>, QItemSelection is exposed in QML as a JavaScript array of QItemSelectionRange objects. Conversions are automatically made from and to C++. In fact, any JavaScript array can be converted back to QItemSelection, with non-QItemSelectionRange objects replaced by empty QItemSelectionRanges.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-models-itemselectionmodel.xml">ItemSelectionModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
