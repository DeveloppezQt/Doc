<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPainterStateGuard Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpainterstateguard.xml">QPainterStateGuard</db:link> is a RAII convenience class for balanced <db:link xlink:href="qpainter.xml#save">QPainter::save</db:link>() and <db:link xlink:href="qpainter.xml#restore">QPainter::restore</db:link>() calls.</db:para>
<db:para>This class was introduced in Qt 6.9.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPainterStateGuard</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.9</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPainterStateGuard is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qpainterstateguard.xml">QPainterStateGuard</db:link> should be used everywhere as a replacement for <db:link xlink:href="qpainter.xml#save">QPainter::save</db:link>() to make sure that the corresponding <db:link xlink:href="qpainter.xml#restore">QPainter::restore</db:link>() is called upon finishing of the painting routine to avoid unbalanced calls between those two functions.</db:para>
<db:para>Example with <db:link xlink:href="qpainter.xml#save">QPainter::save</db:link>()/<db:link xlink:href="qpainter.xml#restore">QPainter::restore</db:link>():</db:para>
<db:programlisting language="cpp">void MyWidget::paintEvent(QPaintEvent *)
{
    QPainter painter(this);
    painter.setPen(Qt::red);
    if (drawText) {
        painter.save();
        painter.setPen(Qt::blue);
        painter.setFont(QFont(&quot;Arial&quot;, 30));
        painter.drawText(rect(), Qt::AlignCenter, &quot;Qt&quot;);
        painter.restore();  // don't forget to restore previous painter state
    }
    painter.drawLine(line);
}
</db:programlisting>
<db:para>Example with <db:link xlink:href="qpainterstateguard.xml">QPainterStateGuard</db:link>:</db:para>
<db:programlisting language="cpp">void MyGuardWidget::paintEvent(QPaintEvent *)
{
    QPainter painter(this);
    painter.setPen(Qt::red);
    if (drawText) {
        QPainterStateGuard guard(&amp;painter)
        painter.setPen(Qt::blue);
        painter.setFont(QFont(&quot;Arial&quot;, 30));
        painter.drawText(rect(), Qt::AlignCenter, &quot;Qt&quot;);
    }
    painter.drawLine(line);
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml">QPainter</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPainterStateGuard-1">
<db:title>[explicit] QPainterStateGuard::QPainterStateGuard(QPainter *<db:emphasis>painter</db:emphasis>, QPainterStateGuard::InitialState <db:emphasis>state</db:emphasis> = InitialState::Save)</db:title>
<db:para>Constructs a <db:link xlink:href="qpainterstateguard.xml">QPainterStateGuard</db:link> and calls <db:link xlink:href="qpainterstateguard.xml#save">save</db:link>() on <db:code role="parameter">painter</db:code> if <db:code role="parameter">state</db:code> is <db:code>InitialState::Save</db:code> (which is the default). When <db:link xlink:href="qpainterstateguard.xml">QPainterStateGuard</db:link> is destroyed, <db:link xlink:href="qpainterstateguard.xml#restore">restore</db:link>() is called as often as <db:link xlink:href="qpainterstateguard.xml#save">save</db:link>() was called to restore the <db:link xlink:href="qpainter.xml">QPainter</db:link>'s state.</db:para>
</db:section>
<db:section xml:id="QPainterStateGuard">
<db:title>[noexcept] QPainterStateGuard::QPainterStateGuard(QPainterStateGuard &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-constructs a painter state guard from <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QPainterStateGuard">
<db:title>[noexcept] QPainterStateGuard::~QPainterStateGuard()</db:title>
<db:para>Destroys the <db:link xlink:href="qpainterstateguard.xml">QPainterStateGuard</db:link> instance and calls <db:link xlink:href="qpainterstateguard.xml#restore">restore</db:link>() as often as <db:link xlink:href="qpainterstateguard.xml#save">save</db:link>() was called to restore the <db:link xlink:href="qpainter.xml">QPainter</db:link>'s state.</db:para>
</db:section>
<db:section xml:id="restore">
<db:title>void QPainterStateGuard::restore()</db:title>
<db:para>Calls <db:link xlink:href="qpainter.xml#restore">QPainter::restore</db:link>() if the internal save/restore counter is greater than zero.</db:para>
<db:note>
<db:para>This function asserts in debug builds if the counter has already reached zero.</db:para>
</db:note>
</db:section>
<db:section xml:id="save">
<db:title>void QPainterStateGuard::save()</db:title>
<db:para>Calls <db:link xlink:href="qpainter.xml#save">QPainter::save</db:link>() and increases the internal save/restore counter by one.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QPainterStateGuard::swap(QPainterStateGuard &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps the <db:code role="parameter">other</db:code> with this painter state guard. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept] QPainterStateGuard &amp;QPainterStateGuard::operator=(QPainterStateGuard &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this painter state guard.</db:para>
</db:section>
</db:section>
</db:article>
