<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QModelRoleDataSpan Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmodelroledataspan.xml">QModelRoleDataSpan</db:link> class provides a span over <db:link xlink:href="qmodelroledata.xml">QModelRoleData</db:link> objects.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QModelRoleDataSpan</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QModelRoleDataSpan is part of <db:simplelist><db:member>model-view</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qmodelroledataspan.xml">QModelRoleDataSpan</db:link> is used as an abstraction over an array of <db:link xlink:href="qmodelroledata.xml">QModelRoleData</db:link> objects.</db:para>
<db:para>Like a view, <db:link xlink:href="qmodelroledataspan.xml">QModelRoleDataSpan</db:link> provides a small object (pointer and size) that can be passed to functions that need to examine the contents of the array. A <db:link xlink:href="qmodelroledataspan.xml">QModelRoleDataSpan</db:link> can be constructed from any array-like sequence (plain arrays, <db:link xlink:href="qvector.xml">QVector</db:link>, std::vector, <db:link xlink:href="qvarlengtharray.xml">QVarLengthArray</db:link>, and so on). Moreover, it does not own the sequence, which must therefore be kept alive longer than any <db:link xlink:href="qmodelroledataspan.xml">QModelRoleDataSpan</db:link> objects referencing it.</db:para>
<db:para>Unlike a view, <db:link xlink:href="qmodelroledataspan.xml">QModelRoleDataSpan</db:link> is a span, so it allows for modifications to the underlying elements.</db:para>
<db:para><db:link xlink:href="qmodelroledataspan.xml">QModelRoleDataSpan</db:link>'s main use case is making it possible for a model to return the data corresponding to different roles in one call.</db:para>
<db:para>In order to draw one element from a model, a view (through its delegates) will generally request multiple roles for the same index by calling data() as many times as needed:</db:para>
<db:programlisting language="cpp">QVariant text = model-&amp;gt;data(index, Qt::DisplayRole);
QVariant decoration = model-&amp;gt;data(index, Qt::DecorationRole);
QVariant checkState = model-&amp;gt;data(index, Qt::CheckStateRole);
// etc.
</db:programlisting>
<db:para><db:link xlink:href="qmodelroledataspan.xml">QModelRoleDataSpan</db:link> allows a view to request the same data using just one function call.</db:para>
<db:para>This is achieved by having the view prepare a suitable array of <db:link xlink:href="qmodelroledata.xml">QModelRoleData</db:link> objects, each initialized with the role that should be fetched. The array is then wrapped in a <db:link xlink:href="qmodelroledataspan.xml">QModelRoleDataSpan</db:link> object, which is then passed to a model's multiData() function.</db:para>
<db:programlisting language="cpp">std::array&amp;lt;QModelRoleData, 3&amp;gt; roleData = { {
    QModelRoleData(Qt::DisplayRole),
    QModelRoleData(Qt::DecorationRole),
    QModelRoleData(Qt::CheckStateRole)
} };

// Usually, this is not necessary: A QModelRoleDataSpan
// will be built automatically for you when passing an array-like
// container to multiData().
QModelRoleDataSpan span(roleData);

model-&amp;gt;multiData(index, span);

// Use roleData[0].data(), roleData[1].data(), etc.
</db:programlisting>
<db:para>Views are encouraged to store the array of <db:link xlink:href="qmodelroledata.xml">QModelRoleData</db:link> objects (and, possibly, the corresponding span) and re-use it in subsequent calls to the model. This allows to reduce the memory allocations related with creating and returning <db:link xlink:href="qvariant.xml">QVariant</db:link> objects.</db:para>
<db:para>Finally, given a <db:link xlink:href="qmodelroledataspan.xml">QModelRoleDataSpan</db:link> object, the model's responsibility is to fill in the data corresponding to each role in the span. How this is done depends on the concrete model class. Here's a sketch of a possible implementation that iterates over the span and uses setData() on each element:</db:para>
<db:programlisting language="cpp">void MyModel::multiData(const QModelIndex &amp;amp;index, QModelRoleDataSpan roleDataSpan) const
{
    for (QModelRoleData &amp;amp;roleData : roleDataSpan) {
        int role = roleData.role();

        // ... obtain the data for index and role ...

        roleData.setData(result);
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#multiData">QAbstractItemModel::multiData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QModelRoleDataSpan">
<db:title>[constexpr] QModelRoleDataSpan::QModelRoleDataSpan()</db:title>
<db:constructorsynopsis>
<db:methodname>QModelRoleDataSpan</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelRoleDataSpan()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty <db:link xlink:href="qmodelroledataspan.xml">QModelRoleDataSpan</db:link>. Its <db:link xlink:href="qmodelroledataspan.xml#data">data</db:link>() will be set to nullptr, and its length to zero.</db:para>
</db:section>
<db:section xml:id="QModelRoleDataSpan-1">
<db:title>[constexpr] QModelRoleDataSpan::QModelRoleDataSpan(QModelRoleData &amp;<db:emphasis>modelRoleData</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QModelRoleDataSpan</db:methodname>
<db:methodparam>
<db:type>QModelRoleData &amp;</db:type>
<db:parameter>modelRoleData</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelRoleDataSpan(QModelRoleData &amp;modelRoleData)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an <db:link xlink:href="qmodelroledataspan.xml">QModelRoleDataSpan</db:link> spanning over <db:code role="parameter">modelRoleData</db:code>, seen as a 1-element array.</db:para>
</db:section>
<db:section xml:id="QModelRoleDataSpan-2">
<db:title>[constexpr] QModelRoleDataSpan::QModelRoleDataSpan(QModelRoleData *<db:emphasis>modelRoleData</db:emphasis>, qsizetype <db:emphasis>len</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QModelRoleDataSpan</db:methodname>
<db:methodparam>
<db:type>QModelRoleData *</db:type>
<db:parameter>modelRoleData</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>len</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelRoleDataSpan(QModelRoleData *modelRoleData, qsizetype len)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an <db:link xlink:href="qmodelroledataspan.xml">QModelRoleDataSpan</db:link> spanning over the array beginning at <db:code role="parameter">modelRoleData</db:code> and with length <db:code role="parameter">len</db:code>.</db:para>
<db:note>
<db:para>The array must be kept alive as long as this object has not been destructed.</db:para>
</db:note>
</db:section>
<db:section xml:id="QModelRoleDataSpan-3">
<db:title>[constexpr] QModelRoleDataSpan::QModelRoleDataSpan(Container &amp;<db:emphasis>c</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QModelRoleDataSpan</db:methodname>
<db:methodparam>
<db:type>Container &amp;</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelRoleDataSpan(Container &amp;c)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an <db:link xlink:href="qmodelroledataspan.xml">QModelRoleDataSpan</db:link> spanning over the container <db:code role="parameter">c</db:code>, which can be any contiguous container of <db:link xlink:href="qmodelroledata.xml">QModelRoleData</db:link> objects. For instance, it can be a QVector&lt;QModelRoleData&gt;, a std::array&lt;QModelRoleData, 10&gt; and so on.</db:para>
<db:note>
<db:para>The container must be kept alive as long as this object has not been destructed.</db:para>
</db:note>
</db:section>
<db:section xml:id="begin">
<db:title>[constexpr] QModelRoleData *QModelRoleDataSpan::begin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QModelRoleData *</db:type>
<db:methodname>begin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelRoleData * begin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the beginning of the span represented by this object.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>[constexpr] QModelRoleData *QModelRoleDataSpan::data() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QModelRoleData *</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelRoleData * data() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the beginning of the span represented by this object.</db:para>
</db:section>
<db:section xml:id="dataForRole">
<db:title>[constexpr] QVariant *QModelRoleDataSpan::dataForRole(int <db:emphasis>role</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant *</db:type>
<db:methodname>dataForRole</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant * dataForRole(int role) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the data associated with the first <db:link xlink:href="qmodelroledata.xml">QModelRoleData</db:link> in the span that has its role equal to <db:code role="parameter">role</db:code>. If such a <db:link xlink:href="qmodelroledata.xml">QModelRoleData</db:link> object does not exist, the behavior is undefined.</db:para>
<db:note>
<db:para>Avoid calling this function from the model's side, as a model cannot possibly know in advance which roles are in a given <db:link xlink:href="qmodelroledataspan.xml">QModelRoleDataSpan</db:link>. This function is instead suitable for views and delegates, which have control over the roles in the span.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodelroledata.xml#data">QModelRoleData::data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="end">
<db:title>[constexpr] QModelRoleData *QModelRoleDataSpan::end() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QModelRoleData *</db:type>
<db:methodname>end</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelRoleData * end() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the imaginary element one past the end of the span represented by this object.</db:para>
</db:section>
<db:section xml:id="length">
<db:title>[constexpr] qsizetype QModelRoleDataSpan::length() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>length</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype length() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the length of the span represented by this object.</db:para>
</db:section>
<db:section xml:id="size">
<db:title>[constexpr] qsizetype QModelRoleDataSpan::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the length of the span represented by this object.</db:para>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>[constexpr] QModelRoleData &amp;QModelRoleDataSpan::operator[](qsizetype <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QModelRoleData &amp;</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelRoleData &amp; operator[](qsizetype index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a modifiable reference to the <db:link xlink:href="qmodelroledata.xml">QModelRoleData</db:link> at position <db:code role="parameter">index</db:code> in the span.</db:para>
<db:note>
<db:para><db:code role="parameter">index</db:code> must be a valid index for this span (0 &lt;= <db:code role="parameter">index</db:code> &lt; <db:link xlink:href="qmodelroledataspan.xml#size">size</db:link>()).</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
