<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWizardPage Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwizardpage.xml">QWizardPage</db:link> class is the base class for wizard pages.</db:para>
<db:para>This class was introduced in Qt 4.3.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWizardPage</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qwizard.xml">QWizard</db:link> represents a wizard. Each page is a <db:link xlink:href="qwizardpage.xml">QWizardPage</db:link>. When you create your own wizards, you can use <db:link xlink:href="qwizardpage.xml">QWizardPage</db:link> directly, or you can subclass it for more control.</db:para>
<db:para>A page has the following attributes, which are rendered by <db:link xlink:href="qwizard.xml">QWizard</db:link>: a <db:link xlink:href="qwizardpage.xml#title-prop">title</db:link>, a <db:link xlink:href="qwizardpage.xml#subTitle-prop">subTitle</db:link>, and a <db:link xlink:href="qwizardpage.xml#setPixmap">set of pixmaps</db:link>. See <db:link xlink:href="qwizard.xml#elements-of-a-wizard-page">Elements of a Wizard Page</db:link> for details. Once a page is added to the wizard (using <db:link xlink:href="qwizard.xml#addPage">QWizard::addPage</db:link>() or <db:link xlink:href="qwizard.xml#setPage">QWizard::setPage</db:link>()), <db:link xlink:href="qwizardpage.xml#wizard">wizard</db:link>() returns a pointer to the associated <db:link xlink:href="qwizard.xml">QWizard</db:link> object.</db:para>
<db:para>Page provides five virtual functions that can be reimplemented to provide custom behavior:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qwizardpage.xml#initializePage">initializePage</db:link>() is called to initialize the page's contents when the user clicks the wizard's <db:guilabel>Next</db:guilabel> button. If you want to derive the page's default from what the user entered on previous pages, this is the function to reimplement.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwizardpage.xml#cleanupPage">cleanupPage</db:link>() is called to reset the page's contents when the user clicks the wizard's <db:guilabel>Back</db:guilabel> button.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwizardpage.xml#validatePage">validatePage</db:link>() validates the page when the user clicks <db:guilabel>Next</db:guilabel> or <db:guilabel>Finish</db:guilabel>. It is often used to show an error message if the user has entered incomplete or invalid information.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwizardpage.xml#nextId">nextId</db:link>() returns the ID of the next page. It is useful when <db:link xlink:href="qwizard.xml#creating-non-linear-wizards">creating non-linear wizards</db:link>, which allow different traversal paths based on the information provided by the user.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwizardpage.xml#isComplete">isComplete</db:link>() is called to determine whether the <db:guilabel>Next</db:guilabel> and/or <db:guilabel>Finish</db:guilabel> button should be enabled or disabled. If you reimplement <db:link xlink:href="qwizardpage.xml#isComplete">isComplete</db:link>(), also make sure that <db:link xlink:href="qwizardpage.xml#completeChanged">completeChanged</db:link>() is emitted whenever the complete state changes.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Normally, the <db:guilabel>Next</db:guilabel> button and the <db:guilabel>Finish</db:guilabel> button of a wizard are mutually exclusive. If <db:link xlink:href="qwizardpage.xml#isFinalPage">isFinalPage</db:link>() returns true, <db:guilabel>Finish</db:guilabel> is available; otherwise, <db:guilabel>Next</db:guilabel> is available. By default, <db:link xlink:href="qwizardpage.xml#isFinalPage">isFinalPage</db:link>() is true only when <db:link xlink:href="qwizardpage.xml#nextId">nextId</db:link>() returns -1. If you want to show <db:guilabel>Next</db:guilabel> and <db:guilabel>Final</db:guilabel> simultaneously for a page (letting the user perform an &quot;early finish&quot;), call <db:link xlink:href="qwizardpage.xml#setFinalPage">setFinalPage</db:link>(true) on that page. For wizards that support early finishes, you might also want to set the <db:link xlink:href="qwizard.xml#WizardOption-enum">HaveNextButtonOnLastPage</db:link> and <db:link xlink:href="qwizard.xml#WizardOption-enum">HaveFinishButtonOnEarlyPages</db:link> options on the wizard.</db:para>
<db:para>In many wizards, the contents of a page may affect the default values of the fields of a later page. To make it easy to communicate between pages, <db:link xlink:href="qwizard.xml">QWizard</db:link> supports a <db:link xlink:href="qwizard.xml#registering-and-using-fields">&quot;field&quot; mechanism</db:link> that allows you to register a field (e.g., a <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>) on a page and to access its value from any page. Fields are global to the entire wizard and make it easy for any single page to access information stored by another page, without having to put all the logic in <db:link xlink:href="qwizard.xml">QWizard</db:link> or having the pages know explicitly about each other. Fields are registered using <db:link xlink:href="qwizardpage.xml#registerField">registerField</db:link>() and can be accessed at any time using <db:link xlink:href="qwizardpage.xml#field">field</db:link>() and <db:link xlink:href="qwizardpage.xml#setField">setField</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml">QWizard</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-dialogs-classwizard-example.xml">Class Wizard Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-dialogs-licensewizard-example.xml">License Wizard Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="subTitle-prop">
<db:title>subTitle : QString</db:title>
<db:para>This property holds the subtitle of the page</db:para>
<db:para>The subtitle is shown by the <db:link xlink:href="qwizard.xml">QWizard</db:link>, between the title and the actual page. Subtitles are optional. In <db:link xlink:href="qwizard.xml#WizardStyle-enum">ClassicStyle</db:link> and <db:link xlink:href="qwizard.xml#WizardStyle-enum">ModernStyle</db:link>, using subtitles is necessary to make the header appear. In <db:link xlink:href="qwizard.xml#WizardStyle-enum">MacStyle</db:link>, the subtitle is shown as a text label just above the actual page.</db:para>
<db:para>The subtitle may be plain text or HTML, depending on the value of the <db:link xlink:href="qwizard.xml#subTitleFormat-prop">QWizard::subTitleFormat</db:link> property.</db:para>
<db:para>By default, this property contains an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">subTitle</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSubTitle</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>subTitle</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#title-prop">title</db:link></db:member>
<db:member><db:link xlink:href="qwizard.xml#WizardOption-enum">QWizard::IgnoreSubTitles</db:link></db:member>
<db:member><db:link xlink:href="qwizard.xml#elements-of-a-wizard-page">Elements of a Wizard Page</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="title-prop">
<db:title>title : QString</db:title>
<db:para>This property holds the title of the page</db:para>
<db:para>The title is shown by the <db:link xlink:href="qwizard.xml">QWizard</db:link>, above the actual page. All pages should have a title.</db:para>
<db:para>The title may be plain text or HTML, depending on the value of the <db:link xlink:href="qwizard.xml#titleFormat-prop">QWizard::titleFormat</db:link> property.</db:para>
<db:para>By default, this property contains an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">title</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTitle</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>title</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#subTitle-prop">subTitle</db:link></db:member>
<db:member><db:link xlink:href="qwizard.xml#elements-of-a-wizard-page">Elements of a Wizard Page</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWizardPage">
<db:title>[explicit] QWizardPage::QWizardPage(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a wizard page with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>When the page is inserted into a wizard using <db:link xlink:href="qwizard.xml#addPage">QWizard::addPage</db:link>() or <db:link xlink:href="qwizard.xml#setPage">QWizard::setPage</db:link>(), the parent is automatically set to be the wizard.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#wizard">wizard</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QWizardPage">
<db:title>[virtual noexcept] QWizardPage::~QWizardPage()</db:title>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="buttonText">
<db:title>QString QWizardPage::buttonText(QWizard::WizardButton <db:emphasis>which</db:emphasis>) const</db:title>
<db:para>Returns the text on button <db:code role="parameter">which</db:code> on this page.</db:para>
<db:para>If a text has ben set using <db:link xlink:href="qwizardpage.xml#setButtonText">setButtonText</db:link>(), this text is returned. Otherwise, if a text has been set using <db:link xlink:href="qwizard.xml#setButtonText">QWizard::setButtonText</db:link>(), this text is returned.</db:para>
<db:para>By default, the text on buttons depends on the <db:link xlink:href="qwizard.xml#wizardStyle-prop">QWizard::wizardStyle</db:link>. For example, on macOS, the <db:guilabel>Next</db:guilabel> button is called <db:guilabel>Continue</db:guilabel>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#setButtonText">setButtonText</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#buttonText">QWizard::buttonText</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#setButtonText">QWizard::setButtonText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cleanupPage">
<db:title>[virtual] void QWizardPage::cleanupPage()</db:title>
<db:para>This virtual function is called by <db:link xlink:href="qwizard.xml#cleanupPage">QWizard::cleanupPage</db:link>() when the user leaves the page by clicking <db:guilabel>Back</db:guilabel> (unless the <db:link xlink:href="qwizard.xml#WizardOption-enum">QWizard::IndependentPages</db:link> option is set).</db:para>
<db:para>The default implementation resets the page's fields to their original values (the values they had before <db:link xlink:href="qwizardpage.xml#initializePage">initializePage</db:link>() was called).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#cleanupPage">QWizard::cleanupPage</db:link>()</db:member>
<db:member><db:link xlink:href="qwizardpage.xml#initializePage">initializePage</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#WizardOption-enum">QWizard::IndependentPages</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="completeChanged">
<db:title>void QWizardPage::completeChanged()</db:title>
<db:para>This signal is emitted whenever the complete state of the page (i.e., the value of <db:link xlink:href="qwizardpage.xml#isComplete">isComplete</db:link>()) changes.</db:para>
<db:para>If you reimplement <db:link xlink:href="qwizardpage.xml#isComplete">isComplete</db:link>(), make sure to emit completeChanged() whenever the value of <db:link xlink:href="qwizardpage.xml#isComplete">isComplete</db:link>() changes, to ensure that <db:link xlink:href="qwizard.xml">QWizard</db:link> updates the enabled or disabled state of its buttons.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#isComplete">isComplete</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="field">
<db:title>[protected] QVariant QWizardPage::field(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns the value of the field called <db:code role="parameter">name</db:code>.</db:para>
<db:para>This function can be used to access fields on any page of the wizard. It is equivalent to calling <db:link xlink:href="qwizardpage.xml#wizard">wizard</db:link>()-&gt;<db:link xlink:href="qwizard.xml#field">field(<db:code role="parameter">name</db:code>)</db:link>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">void OutputFilesPage::initializePage()
{
    QString className = field(&quot;className&quot;).toString();
    headerLineEdit-&gt;setText(className.toLower() + &quot;.h&quot;);
    implementationLineEdit-&gt;setText(className.toLower() + &quot;.cpp&quot;);
    outputDirLineEdit-&gt;setText(QDir::toNativeSeparators(QDir::tempPath()));
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#field">QWizard::field</db:link>()</db:member>
<db:member><db:link xlink:href="qwizardpage.xml#setField">setField</db:link>()</db:member>
<db:member><db:link xlink:href="qwizardpage.xml#registerField">registerField</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initializePage">
<db:title>[virtual] void QWizardPage::initializePage()</db:title>
<db:para>This virtual function is called by <db:link xlink:href="qwizard.xml#initializePage">QWizard::initializePage</db:link>() to prepare the page just before it is shown either as a result of <db:link xlink:href="qwizard.xml#restart">QWizard::restart</db:link>() being called, or as a result of the user clicking <db:guilabel>Next</db:guilabel>. (However, if the <db:link xlink:href="qwizard.xml#WizardOption-enum">QWizard::IndependentPages</db:link> option is set, this function is only called the first time the page is shown.)</db:para>
<db:para>By reimplementing this function, you can ensure that the page's fields are properly initialized based on fields from previous pages. For example:</db:para>
<db:programlisting language="cpp">void OutputFilesPage::initializePage()
{
    QString className = field(&quot;className&quot;).toString();
    headerLineEdit-&gt;setText(className.toLower() + &quot;.h&quot;);
    implementationLineEdit-&gt;setText(className.toLower() + &quot;.cpp&quot;);
    outputDirLineEdit-&gt;setText(QDir::toNativeSeparators(QDir::tempPath()));
}
</db:programlisting>
<db:para>The default implementation does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#initializePage">QWizard::initializePage</db:link>()</db:member>
<db:member><db:link xlink:href="qwizardpage.xml#cleanupPage">cleanupPage</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#WizardOption-enum">QWizard::IndependentPages</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isCommitPage">
<db:title>bool QWizardPage::isCommitPage() const</db:title>
<db:para>Returns true if this page is a commit page; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#setCommitPage">setCommitPage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isComplete">
<db:title>[virtual] bool QWizardPage::isComplete() const</db:title>
<db:para>This virtual function is called by <db:link xlink:href="qwizard.xml">QWizard</db:link> to determine whether the <db:guilabel>Next</db:guilabel> or <db:guilabel>Finish</db:guilabel> button should be enabled or disabled.</db:para>
<db:para>The default implementation returns true if all <db:link xlink:href="qwizard.xml#mandatory-fields">mandatory fields</db:link> are filled; otherwise, it returns false.</db:para>
<db:para>If you reimplement this function, make sure to emit <db:link xlink:href="qwizardpage.xml#completeChanged">completeChanged</db:link>(), from the rest of your implementation, whenever the value of isComplete() changes. This ensures that <db:link xlink:href="qwizard.xml">QWizard</db:link> updates the enabled or disabled state of its buttons. An example of the reimplementation is available <db:link xlink:href="http://doc.qt.io/archives/qq/qq22-qwizard.html#validatebeforeitstoolate">here</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#completeChanged">completeChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qwizardpage.xml#isFinalPage">isFinalPage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isFinalPage">
<db:title>bool QWizardPage::isFinalPage() const</db:title>
<db:para>This function is called by <db:link xlink:href="qwizard.xml">QWizard</db:link> to determine whether the <db:guilabel>Finish</db:guilabel> button should be shown for this page or not.</db:para>
<db:para>By default, it returns true if there is no next page (i.e., <db:link xlink:href="qwizardpage.xml#nextId">nextId</db:link>() returns -1); otherwise, it returns false.</db:para>
<db:para>By explicitly calling <db:link xlink:href="qwizardpage.xml#setFinalPage">setFinalPage</db:link>(true), you can let the user perform an &quot;early finish&quot;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#isComplete">isComplete</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#WizardOption-enum">QWizard::HaveFinishButtonOnEarlyPages</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nextId">
<db:title>[virtual] int QWizardPage::nextId() const</db:title>
<db:para>This virtual function is called by <db:link xlink:href="qwizard.xml#nextId">QWizard::nextId</db:link>() to find out which page to show when the user clicks the <db:guilabel>Next</db:guilabel> button.</db:para>
<db:para>The return value is the ID of the next page, or -1 if no page follows.</db:para>
<db:para>By default, this function returns the lowest ID greater than the ID of the current page, or -1 if there is no such ID.</db:para>
<db:para>By reimplementing this function, you can specify a dynamic page order. For example:</db:para>
<db:programlisting language="cpp">int IntroPage::nextId() const
{
    if (evaluateRadioButton-&gt;isChecked()) {
        return LicenseWizard::Page_Evaluate;
    } else {
        return LicenseWizard::Page_Register;
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#nextId">QWizard::nextId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pixmap">
<db:title>QPixmap QWizardPage::pixmap(QWizard::WizardPixmap <db:emphasis>which</db:emphasis>) const</db:title>
<db:para>Returns the pixmap set for role <db:code role="parameter">which</db:code>.</db:para>
<db:para>Pixmaps can also be set for the entire wizard using <db:link xlink:href="qwizard.xml#setPixmap">QWizard::setPixmap</db:link>(), in which case they apply for all pages that don't specify a pixmap.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#setPixmap">setPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#pixmap">QWizard::pixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#elements-of-a-wizard-page">Elements of a Wizard Page</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="registerField">
<db:title>[protected] void QWizardPage::registerField(const QString &amp;<db:emphasis>name</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>, const char *<db:emphasis>property</db:emphasis> = Q_NULLPTR, const char *<db:emphasis>changedSignal</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Creates a field called <db:code role="parameter">name</db:code> associated with the given <db:code role="parameter">property</db:code> of the given <db:code role="parameter">widget</db:code>. From then on, that property becomes accessible using <db:link xlink:href="qwizardpage.xml#field">field</db:link>() and <db:link xlink:href="qwizardpage.xml#setField">setField</db:link>().</db:para>
<db:para>Fields are global to the entire wizard and make it easy for any single page to access information stored by another page, without having to put all the logic in <db:link xlink:href="qwizard.xml">QWizard</db:link> or having the pages know explicitly about each other.</db:para>
<db:para>If <db:code role="parameter">name</db:code> ends with an asterisk (*), the field is a mandatory field. When a page has mandatory fields, the <db:guilabel>Next</db:guilabel> and/or <db:guilabel>Finish</db:guilabel> buttons are enabled only when all mandatory fields are filled. This requires a <db:code role="parameter">changedSignal</db:code> to be specified, to tell <db:link xlink:href="qwizard.xml">QWizard</db:link> to recheck the value stored by the mandatory field.</db:para>
<db:para><db:link xlink:href="qwizard.xml">QWizard</db:link> knows the most common Qt widgets. For these (or their subclasses), you don't need to specify a <db:code role="parameter">property</db:code> or a <db:code role="parameter">changedSignal</db:code>. The table below lists these widgets:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Widget</db:para>
</db:th>
<db:th>
<db:para>Property</db:para>
</db:th>
<db:th>
<db:para>Change Notification Signal</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link></db:para>
</db:td>
<db:td>
<db:para>bool <db:link xlink:href="qabstractbutton.xml#checked-prop">checked</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qabstractbutton.xml#toggled">toggled</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:para>
</db:td>
<db:td>
<db:para>int <db:link xlink:href="qabstractslider.xml#value-prop">value</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qabstractslider.xml#valueChanged">valueChanged</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qcombobox.xml">QComboBox</db:link></db:para>
</db:td>
<db:td>
<db:para>int <db:link xlink:href="qcombobox.xml#currentIndex-prop">currentIndex</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qcombobox.xml#currentIndexChanged">currentIndexChanged</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link> <db:link xlink:href="qdatetimeedit.xml#dateTime-prop">dateTime</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qdatetimeedit.xml#dateTimeChanged">dateTimeChanged</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qlineedit.xml">QLineEdit</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link> <db:link xlink:href="qlineedit.xml#text-prop">text</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlineedit.xml#textChanged">textChanged</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qlistwidget.xml">QListWidget</db:link></db:para>
</db:td>
<db:td>
<db:para>int <db:link xlink:href="qlistwidget.xml#currentRow-prop">currentRow</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlistwidget.xml#currentRowChanged">currentRowChanged</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qspinbox.xml">QSpinBox</db:link></db:para>
</db:td>
<db:td>
<db:para>int <db:link xlink:href="qspinbox.xml#value-prop">value</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qspinbox.xml#valueChanged">valueChanged</db:link>()</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>You can use <db:link xlink:href="qwizard.xml#setDefaultProperty">QWizard::setDefaultProperty</db:link>() to add entries to this table or to override existing entries.</db:para>
<db:para>To consider a field &quot;filled&quot;, <db:link xlink:href="qwizard.xml">QWizard</db:link> simply checks that their current value doesn't equal their original value (the value they had before <db:link xlink:href="qwizardpage.xml#initializePage">initializePage</db:link>() was called). For <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>, it also checks that <db:link xlink:href="qlineedit.xml#acceptableInput-prop">hasAcceptableInput</db:link>() returns true, to honor any validator or mask.</db:para>
<db:para><db:link xlink:href="qwizard.xml">QWizard</db:link>'s mandatory field mechanism is provided for convenience. It can be bypassed by reimplementing <db:link xlink:href="qwizardpage.xml#isComplete">QWizardPage::isComplete</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#field">field</db:link>()</db:member>
<db:member><db:link xlink:href="qwizardpage.xml#setField">setField</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#setDefaultProperty">QWizard::setDefaultProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setButtonText">
<db:title>void QWizardPage::setButtonText(QWizard::WizardButton <db:emphasis>which</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Sets the text on button <db:code role="parameter">which</db:code> to be <db:code role="parameter">text</db:code> on this page.</db:para>
<db:para>By default, the text on buttons depends on the <db:link xlink:href="qwizard.xml#wizardStyle-prop">QWizard::wizardStyle</db:link>, but may be redefined for the wizard as a whole using <db:link xlink:href="qwizard.xml#setButtonText">QWizard::setButtonText</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#buttonText">buttonText</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#setButtonText">QWizard::setButtonText</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#buttonText">QWizard::buttonText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCommitPage">
<db:title>void QWizardPage::setCommitPage(bool <db:emphasis>commitPage</db:emphasis>)</db:title>
<db:para>Sets this page to be a commit page if <db:code role="parameter">commitPage</db:code> is true; otherwise, sets it to be a normal page.</db:para>
<db:para>A commit page is a page that represents an action which cannot be undone by clicking <db:guilabel>Back</db:guilabel> or <db:guilabel>Cancel</db:guilabel>.</db:para>
<db:para>A <db:guilabel>Commit</db:guilabel> button replaces the <db:guilabel>Next</db:guilabel> button on a commit page. Clicking this button simply calls <db:link xlink:href="qwizard.xml#next">QWizard::next</db:link>() just like clicking <db:guilabel>Next</db:guilabel> does.</db:para>
<db:para>A page entered directly from a commit page has its <db:guilabel>Back</db:guilabel> button disabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#isCommitPage">isCommitPage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setField">
<db:title>[protected] void QWizardPage::setField(const QString &amp;<db:emphasis>name</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the value of the field called <db:code role="parameter">name</db:code> to <db:code role="parameter">value</db:code>.</db:para>
<db:para>This function can be used to set fields on any page of the wizard. It is equivalent to calling <db:link xlink:href="qwizardpage.xml#wizard">wizard</db:link>()-&gt;<db:link xlink:href="qwizard.xml#setField">setField(<db:code role="parameter">name</db:code>, <db:code role="parameter">value</db:code>)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#setField">QWizard::setField</db:link>()</db:member>
<db:member><db:link xlink:href="qwizardpage.xml#field">field</db:link>()</db:member>
<db:member><db:link xlink:href="qwizardpage.xml#registerField">registerField</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFinalPage">
<db:title>void QWizardPage::setFinalPage(bool <db:emphasis>finalPage</db:emphasis>)</db:title>
<db:para>Explicitly sets this page to be final if <db:code role="parameter">finalPage</db:code> is true.</db:para>
<db:para>After calling setFinalPage(true), <db:link xlink:href="qwizardpage.xml#isFinalPage">isFinalPage</db:link>() returns true and the <db:guilabel>Finish</db:guilabel> button is visible (and enabled if <db:link xlink:href="qwizardpage.xml#isComplete">isComplete</db:link>() returns true).</db:para>
<db:para>After calling setFinalPage(false), <db:link xlink:href="qwizardpage.xml#isFinalPage">isFinalPage</db:link>() returns true if <db:link xlink:href="qwizardpage.xml#nextId">nextId</db:link>() returns -1; otherwise, it returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#isFinalPage">isFinalPage</db:link>()</db:member>
<db:member><db:link xlink:href="qwizardpage.xml#isComplete">isComplete</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#WizardOption-enum">QWizard::HaveFinishButtonOnEarlyPages</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPixmap">
<db:title>void QWizardPage::setPixmap(QWizard::WizardPixmap <db:emphasis>which</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:para>Sets the pixmap for role <db:code role="parameter">which</db:code> to <db:code role="parameter">pixmap</db:code>.</db:para>
<db:para>The pixmaps are used by <db:link xlink:href="qwizard.xml">QWizard</db:link> when displaying a page. Which pixmaps are actually used depend on the <db:link xlink:href="qwizard.xml#wizard-look-and-feel">wizard style</db:link>.</db:para>
<db:para>Pixmaps can also be set for the entire wizard using <db:link xlink:href="qwizard.xml#setPixmap">QWizard::setPixmap</db:link>(), in which case they apply for all pages that don't specify a pixmap.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#pixmap">pixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#setPixmap">QWizard::setPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#elements-of-a-wizard-page">Elements of a Wizard Page</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="validatePage">
<db:title>[virtual] bool QWizardPage::validatePage()</db:title>
<db:para>This virtual function is called by <db:link xlink:href="qwizard.xml#validateCurrentPage">QWizard::validateCurrentPage</db:link>() when the user clicks <db:guilabel>Next</db:guilabel> or <db:guilabel>Finish</db:guilabel> to perform some last-minute validation. If it returns true, the next page is shown (or the wizard finishes); otherwise, the current page stays up.</db:para>
<db:para>The default implementation returns true.</db:para>
<db:para>When possible, it is usually better style to disable the <db:guilabel>Next</db:guilabel> or <db:guilabel>Finish</db:guilabel> button (by specifying <db:link xlink:href="qwizard.xml#mandatory-fields">mandatory fields</db:link> or reimplementing <db:link xlink:href="qwizardpage.xml#isComplete">isComplete</db:link>()) than to reimplement validatePage().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#validateCurrentPage">QWizard::validateCurrentPage</db:link>()</db:member>
<db:member><db:link xlink:href="qwizardpage.xml#isComplete">isComplete</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wizard">
<db:title>[protected] QWizard *QWizardPage::wizard() const</db:title>
<db:para>Returns the wizard associated with this page, or 0 if this page hasn't been inserted into a <db:link xlink:href="qwizard.xml">QWizard</db:link> yet.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#addPage">QWizard::addPage</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#setPage">QWizard::setPage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
