<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextureImageData Class</db:title>
<db:subtitle>Qt3DRender::QTextureImageData</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qt3drender-qtextureimagedata.xml">QTextureImageData</db:link> stores data representing a texture.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextureImageData</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS 3drender)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::3drender)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3drender</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Status</db:term>
<db:listitem>
<db:para>Deprecated</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextureImageData">
<db:title>QTextureImageData::QTextureImageData()</db:title>
<db:para>Constructs a new <db:link xlink:href="qt3drender-qtextureimagedata.xml">Qt3DRender::QTextureImageData</db:link>.</db:para>
</db:section>
<db:section xml:id="alignment">
<db:title>[noexcept] int QTextureImageData::alignment() const</db:title>
<db:para>Returns the alignment requirement for the image.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#setAlignment">setAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cleanup">
<db:title>[noexcept] void QTextureImageData::cleanup()</db:title>
<db:para>Remove stored texture data and return the object to its initial state</db:para>
</db:section>
<db:section xml:id="data">
<db:title>QByteArray QTextureImageData::data(int <db:emphasis>layer</db:emphasis> = 0, int <db:emphasis>face</db:emphasis> = 0, int <db:emphasis>mipmapLevel</db:emphasis> = 0) const</db:title>
<db:para>Returns the raw image data for the texture at layer <db:code role="parameter">layer</db:code>, face <db:code role="parameter">face</db:code> and mipmapLevel <db:code role="parameter">mipmapLevel</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="depth">
<db:title>[noexcept] int QTextureImageData::depth() const</db:title>
<db:para>Returns the depth of the stored texture</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#setDepth">setDepth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="faces">
<db:title>[noexcept] int QTextureImageData::faces() const</db:title>
<db:para>Returns the number of faces in the stored texture</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#setFaces">setFaces</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="format">
<db:title>[noexcept] QOpenGLTexture::TextureFormat QTextureImageData::format() const</db:title>
<db:para>Returns the format of the stored texture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="height">
<db:title>[noexcept] int QTextureImageData::height() const</db:title>
<db:para>Returns the height of the stored texture</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#setHeight">setHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isCompressed">
<db:title>[noexcept] bool QTextureImageData::isCompressed() const</db:title>
<db:para>Returns true if the stored texture is in a compressed format</db:para>
</db:section>
<db:section xml:id="layers">
<db:title>[noexcept] int QTextureImageData::layers() const</db:title>
<db:para>Returns the number of layers in the stored texture</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#setLayers">setLayers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mipLevels">
<db:title>[noexcept] int QTextureImageData::mipLevels() const</db:title>
<db:para>Returns the number of mip levels in the stored texture</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#setMipLevels">setMipLevels</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pixelFormat">
<db:title>[noexcept] QOpenGLTexture::PixelFormat QTextureImageData::pixelFormat() const</db:title>
<db:para>Returns the pixel format of the stored texture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#setPixelFormat">setPixelFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pixelType">
<db:title>[noexcept] QOpenGLTexture::PixelType QTextureImageData::pixelType() const</db:title>
<db:para>Returns the pixel type of the stored texture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#setPixelType">setPixelType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAlignment">
<db:title>[noexcept] void QTextureImageData::setAlignment(int <db:emphasis>alignment</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">alignment</db:code> requirements for the image.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#alignment">alignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData">
<db:title>void QTextureImageData::setData(const QByteArray &amp;<db:emphasis>data</db:emphasis>, int <db:emphasis>blockSize</db:emphasis>, bool <db:emphasis>isCompressed</db:emphasis> = false)</db:title>
<db:para>Stores the data <db:code role="parameter">data</db:code> with blocksize <db:code role="parameter">blockSize</db:code> and if the data to be stored is compressed <db:code role="parameter">isCompressed</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDepth">
<db:title>[noexcept] void QTextureImageData::setDepth(int <db:emphasis>depth</db:emphasis>)</db:title>
<db:para>Sets the depth to <db:code role="parameter">depth</db:code>. <db:emphasis>setDepth</db:emphasis></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#depth">depth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFaces">
<db:title>[noexcept] void QTextureImageData::setFaces(int <db:emphasis>faces</db:emphasis>)</db:title>
<db:para>Sets the faces to <db:code role="parameter">faces</db:code>. <db:emphasis>setFaces</db:emphasis></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#faces">faces</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFormat">
<db:title>[noexcept] void QTextureImageData::setFormat(QOpenGLTexture::TextureFormat <db:emphasis>format</db:emphasis>)</db:title>
<db:para>Sets the format to <db:code role="parameter">format</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#format">format</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHeight">
<db:title>[noexcept] void QTextureImageData::setHeight(int <db:emphasis>height</db:emphasis>)</db:title>
<db:para>Sets the height to <db:code role="parameter">height</db:code>. <db:emphasis>setHeight</db:emphasis></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#height">height</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setImage">
<db:title>void QTextureImageData::setImage(const QImage &amp;<db:emphasis>image</db:emphasis>)</db:title>
<db:para>Copies the image <db:code role="parameter">image</db:code> as raw data within this object.</db:para>
</db:section>
<db:section xml:id="setLayers">
<db:title>[noexcept] void QTextureImageData::setLayers(int <db:emphasis>layers</db:emphasis>)</db:title>
<db:para>Sets the layers to <db:code role="parameter">layers</db:code>. <db:emphasis>setLayers</db:emphasis></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#layers">layers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMipLevels">
<db:title>[noexcept] void QTextureImageData::setMipLevels(int <db:emphasis>mipLevels</db:emphasis>)</db:title>
<db:para>Sets the mip levels to <db:code role="parameter">mipLevels</db:code>. <db:emphasis>setMipLevels</db:emphasis></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#mipLevels">mipLevels</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPixelFormat">
<db:title>[noexcept] void QTextureImageData::setPixelFormat(QOpenGLTexture::PixelFormat <db:emphasis>pixelFormat</db:emphasis>)</db:title>
<db:para>Sets the pixel format to <db:code role="parameter">pixelFormat</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#pixelFormat">pixelFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPixelType">
<db:title>[noexcept] void QTextureImageData::setPixelType(QOpenGLTexture::PixelType <db:emphasis>pixelType</db:emphasis>)</db:title>
<db:para>Sets the pixel type to <db:code role="parameter">pixelType</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#pixelType">pixelType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTarget">
<db:title>[noexcept] void QTextureImageData::setTarget(QOpenGLTexture::Target <db:emphasis>target</db:emphasis>)</db:title>
<db:para>Sets the target to <db:code role="parameter">target</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#target">target</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWidth">
<db:title>[noexcept] void QTextureImageData::setWidth(int <db:emphasis>width</db:emphasis>)</db:title>
<db:para>Sets the width to <db:code role="parameter">width</db:code>. <db:emphasis>setWidth</db:emphasis></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#width">width</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="target">
<db:title>[noexcept] QOpenGLTexture::Target QTextureImageData::target() const</db:title>
<db:para>Returns the target for the stored texture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#setTarget">setTarget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="width">
<db:title>[noexcept] int QTextureImageData::width() const</db:title>
<db:para>Returns the width of the stored texture</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qtextureimagedata.xml#setWidth">setWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
