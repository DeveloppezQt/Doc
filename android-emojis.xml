<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Supporting Google Emoji Font Policy</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="android-publishing-to-googleplay.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Publishing to Google Play"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="android-platform-notes.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Android Platform Notes"/></db:extendedlink>
<db:abstract>
<db:para>Guide for Supporting Google Emoji Font Policy using QML or C++.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Google has introduced an <db:link xlink:href="https://support.google.com/googleplay/android-developer/answer/11190644?hl=en">Android: Android Emoji Policy</db:link> which compels app developers to support the latest version of Unicode Emoji. The policy states:</db:para>
<db:blockquote><db:para>Apps with custom emoji implementations, including those provided by third-party libraries, must fully support the latest Unicode version when running on Android 12+ within 4 months after new Unicode Emoji are released.</db:para>
</db:blockquote>
<db:para>This guide shows how to support this policy by either bundling an emoji font or using <db:link xlink:href="https://developer.android.com/guide/topics/ui/look-and-feel/downloadable-fonts">Android: Google Downloadable Fonts</db:link>.</db:para>
<db:section xml:id="bundling-an-emoji-font-vs-google-downloadable-fonts">
<db:title>Bundling an Emoji Font VS Google Downloadable Fonts</db:title>
<db:para>There are some advantages and disadvantages of both methods for supporting the latest emojis The best option depends on each app. Here are some advantages and disadvantages of the two methods:</db:para>
<db:para>Bundling font advantages:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Faster loading of the font</db:para>
</db:listitem>
<db:listitem>
<db:para>Works when the user does not have internet</db:para>
</db:listitem>
<db:listitem>
<db:para>Works in all operating systems</db:para>
</db:listitem>
<db:listitem>
<db:para>Independent (no other dependencies other from Qt)</db:para>
</db:listitem>
<db:listitem>
<db:para>Simpler solution</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Bundling font disadvantages:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Increases the application size (NotoColorEmoji is ~10 MB)</db:para>
</db:listitem>
<db:listitem>
<db:para>Requires updating the font on newer releases</db:para>
</db:listitem>
<db:listitem>
<db:para>Older apps will not update emojis automatically</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Google Downloadable Fonts advantages:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Does not change the application size</db:para>
</db:listitem>
<db:listitem>
<db:para>Updated automatically</db:para>
</db:listitem>
<db:listitem>
<db:para>Multiple apps without any relationship share the same font</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Google Downloadable Fonts disadvantages:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Depends on Google Mobile Services</db:para>
</db:listitem>
<db:listitem>
<db:para>Android only</db:para>
</db:listitem>
<db:listitem>
<db:para>Will download the font if not previously cached</db:para>
</db:listitem>
<db:listitem>
<db:para>Does not work without internet when not previously cached</db:para>
</db:listitem>
<db:listitem>
<db:para>More complex than bundling the font</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="how-to-bundle-a-font">
<db:title>How to bundle a font</db:title>
<db:para>It is necessary to obtain and bundle the font and later to load it either using QML or C++.</db:para>
<db:section xml:id="obtaining-a-font">
<db:title>Obtaining a Font</db:title>
<db:para>For this guide, we will be using the Google <db:link xlink:href="https://github.com/googlefonts/noto-emoji/">NotoColorEmoji font</db:link>. NotoColorEmoji is a font licensed by <db:link xlink:href="https://github.com/googlefonts/noto-emoji/blob/main/fonts/LICENSE">SIL OPEN FONT LICENSE</db:link>.</db:para>
<db:note>
<db:para>If downloading from the repository, download the NotoColorEmoji_WindowsCompatible.ttf font instead of NotoColorEmoji.ttf. NotoColorEmoji.ttf is built internally with a different format and it is well supported only by Android/Chrome/Chromium OS. Since Qt runs on other platforms, Qt font loader requires a standard formed TrueType/OpenType font.</db:para>
</db:note>
</db:section>
<db:section xml:id="adding-the-font">
<db:title>Adding the Font</db:title>
<db:para>The proper way to bundle the font is to add it to <db:link xlink:href="">Qt Resources System</db:link> files. For example, you can make a separated resources file for the font - &quot;font.qrc&quot; with the NotoColorEmoji_WindowsCompatible.ttf. To embed the new resources file use the following code in CMakeLists.txt:</db:para>
<db:programlisting language="cpp">qt_add_big_resources(PROJECT_SOURCES font.qrc)
</db:programlisting>
</db:section>
<db:section xml:id="loading-the-bundled-font-in-c">
<db:title>Loading the bundled font in C++</db:title>
<db:para>To load the font using C++, use <db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link>.</db:para>
<db:programlisting language="cpp">// Loading NotoColorEmoji bundled using C++ QFontDatabase
QFontDatabase::addApplicationFont(QStringLiteral(&quot;:/NotoColorEmoji_WindowsCompatible.ttf&quot;));
</db:programlisting>
<db:note>
<db:para>The above code should be used before <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link> loads the QML, so when the QML is loaded the font is already present and ready to use.</db:para>
</db:note>
</db:section>
<db:section xml:id="loading-the-bundled-font-in-qml">
<db:title>Loading the bundled font in QML</db:title>
<db:para>To load the font using QML, it needs to use the <db:link xlink:href="">FontLoader QML Type</db:link>.</db:para>
<db:programlisting language="qml">// Loading NotoColorEmoji using QML FontLoader
FontLoader {
   source:&quot;NotoColorEmoji_WindowsCompatible.ttf&quot;
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="using-google-downloadable-fonts">
<db:title>Using Google downloadable fonts:</db:title>
<db:para>Using Google downloadable fonts for the emoji font provides an automatically updated emoji font without increasing application size. The process for downloading a font using the Downloadable Fonts feature can be seen in more detail in <db:link xlink:href="https://developer.android.com/guide/topics/ui/look-and-feel/downloadable-fonts#downloadable-fonts-process">Android: Downloadable Fonts Process</db:link></db:para>
<db:para>For this guide, the process will be:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>C++ code starts</db:para>
</db:listitem>
<db:listitem>
<db:para>C++ calls Java function</db:para>
</db:listitem>
<db:listitem>
<db:para>Java calls GDF to fetch the font</db:para>
</db:listitem>
<db:listitem>
<db:para>Java opens the font URI</db:para>
</db:listitem>
<db:listitem>
<db:para>Java returns file descriptor to C++</db:para>
</db:listitem>
<db:listitem>
<db:para>C++ loads the font using <db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:para>
</db:listitem>
</db:orderedlist>
<db:section xml:id="configuration">
<db:title>Configuration</db:title>
<db:para>Google Downloadable Fonts is available for API level 26 (Android 8.0). But it is possible to support earlier APIs down to API 14 if the app uses AndroidX.</db:para>
<db:note>
<db:para>The Android documentation refers to the <db:link xlink:href="https://developer.android.com/reference/android/support/v4/provider/package-summary">Android: Support Library</db:link> instead of AndroidX. But since the support library is no longer maintained and is superseded by AndroidX, we followed Google's recommendation to use AndroidX instead.</db:para>
</db:note>
<db:section xml:id="customizing-the-android-packages-template">
<db:title>Customizing the Android packages template</db:title>
<db:para>First, it is necessary to customize the Android package templates. For that, in Qt Creator, go to the Projects tab, and then search in the Build Settings for &quot;Build Android APK&quot;. It should be inside &quot;Build Steps&quot;, expand the details and a button called &quot;Create Templates&quot; will appear.</db:para>
<db:mediaobject>
<db:alt>&quot;Create Templates&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/qtcreator-create-templates.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Click on &quot;Create templates&quot;, follow the wizard, and in the end, a folder with several configuration files for Android will be created. By default, it will be a folder called android inside the project directory.</db:para>
<db:para>See <db:link xlink:href="deployment-android.xml#android-package-templates">Android Package Templates</db:link> for information to how to customize the android templates using qmake.</db:para>
<db:para>In case that you are using CMake and Qt 6, like in this guide, you need to set the <db:link xlink:href="cmake-target-property-qt-android-package-source-dir.xml">QT_ANDROID_PACKAGE_SOURCE_DIR</db:link> property. Ex:</db:para>
<db:programlisting language="cpp">set_property(TARGET emojiremotefont PROPERTY
         QT_ANDROID_PACKAGE_SOURCE_DIR
         ${CMAKE_CURRENT_SOURCE_DIR}/android)
</db:programlisting>
</db:section>
<db:section xml:id="adding-androidx">
<db:title>Adding AndroidX</db:title>
<db:para>To add AndroidX open the build.gradle file inside <db:link xlink:href="cmake-target-property-qt-android-package-source-dir.xml">QT_ANDROID_PACKAGE_SOURCE_DIR</db:link> folder added above and add the dependency there:</db:para>
<db:programlisting language="cpp">dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation 'androidx.appcompat:appcompat:1.4.1'
}
</db:programlisting>
<db:para>To use Androidx we need to set the according flag. For that create a file named gradle.properties inside <db:link xlink:href="cmake-target-property-qt-android-package-source-dir.xml">QT_ANDROID_PACKAGE_SOURCE_DIR</db:link> and add this line:</db:para>
<db:programlisting language="cpp">android.useAndroidX=true
</db:programlisting>
</db:section>
<db:section xml:id="adding-font-provider-certificates">
<db:title>Adding Font Provider Certificates</db:title>
<db:para>Since we are using AndroidX, there is another configuration required - adding <db:link xlink:href="https://developer.android.com/guide/topics/ui/look-and-feel/downloadable-fonts#adding-certificates">Android: Font Provider Certificates</db:link>. To use the GMS font provider, download the <db:link xlink:href="https://github.com/android/user-interface-samples/blob/master/DownloadableFonts/app/src/main/res/values/font_certs.xml">Android: GMS Font Provider Certificates</db:link>. If using other font providers, you need to obtain the certificates from the Provider itself.</db:para>
<db:para>After downloading the file, add it to Android Resources (not the Qt Resource system) by copying it to the values folder in the android templates folder. The following image shows the correct folder on (1):</db:para>
<db:mediaobject>
<db:alt>&quot;Android Templates Folder&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/android-source-folder.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
</db:section>
<db:section xml:id="java-code">
<db:title>Java Code</db:title>
<db:para>Okay, let's dig into code now!</db:para>
<db:para>We need to add <db:link xlink:href="deployment-android.xml#custom-java-code">Custom Java Code</db:link> to our Android templates. Place it under the src folder in the android templates folder. You may need to create the src folder and the folder structure for your java files. You can see this folder structure in the Android Templates Folder image in the previous section in (2).</db:para>
<db:para>To obtain the font in C++, it is necessary for the Java code to:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Create a Font Request</db:para>
</db:listitem>
<db:listitem>
<db:para>Fetch the fonts from FontsContractCompat using the font request</db:para>
</db:listitem>
<db:listitem>
<db:para>Get font Info and the font URI (content scheme file)</db:para>
</db:listitem>
<db:listitem>
<db:para>Open the URI and obtain a File descriptor</db:para>
</db:listitem>
<db:listitem>
<db:para>Return the file descriptor to C++ code</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To create a font request, you need the font provider information (authority, package, and certificates) and search query for the font. For the certificates use the GMS Font Provider Certificates file fonts_cert.xml added previously to the Android resources.</db:para>
<db:programlisting language="cpp">// GMS fonts provider data
private static final String PROVIDER_AUTHORITY = &quot;com.google.android.gms.fonts&quot;;
private static final String PROVIDER_PACKAGE = &quot;com.google.android.gms&quot;;

// Emoji font search query (copied from EmojiCompat source)
private static final String EMOJI_QUERY = &quot;emojicompat-emoji-font&quot;;

// Font Certificates resources strings (from fonts_certs.xml)
private static final String FONT_CERTIFICATE_ID = &quot;com_google_android_gms_fonts_certs&quot;;
private static final String FONT_CERTIFICATE_TYPE = &quot;array&quot;;

(...)

// obtain id for the font_certs.xml
int certificateId = context.getResources().getIdentifier(
                              FONT_CERTIFICATE_ID,
                              FONT_CERTIFICATE_TYPE,
                              context.getPackageName());

// creating the request
FontRequest request = new FontRequest(
                              PROVIDER_AUTHORITY,
                              PROVIDER_PACKAGE,
                              EMOJI_QUERY,
                              certificateId);
</db:programlisting>
<db:para>Now, use the request just made to fetch the font:</db:para>
<db:programlisting language="cpp">// fetch the font
FontsContractCompat.FontFamilyResult result =
     FontsContractCompat.fetchFonts(context, null, request);
</db:programlisting>
<db:para>Obtain the FontInfo and URI:</db:para>
<db:programlisting language="cpp">final FontsContractCompat.FontInfo[] fontInfos = result.getFonts();
final Uri emojiFontUri = fontInfos[0].getUri();
</db:programlisting>
<db:para>Open a new native File Descriptor from the URI:</db:para>
<db:programlisting language="cpp">final ContentResolver resolver = context.getContentResolver();
// in this case the Font URI is always a content scheme file, made
// so the app requesting it has permissions to open
final ParcelFileDescriptor fileDescriptor =
            resolver.openFileDescriptor(fontInfos[0].getUri(), &quot;r&quot;);

// the detachFd will return a native file descriptor that we must close
// later in C++ code
int fd = fileDescriptor.detachFd();

// return fd to C++
</db:programlisting>
<db:note>
<db:para>Everything coded in Java could be done in C++ using JNI. The code presented in the guide is simplified. Production-ready code must be checked, with exception catches, etc...</db:para>
</db:note>
</db:section>
<db:section xml:id="c-code">
<db:title>C++ Code</db:title>
<db:para>Ok all done on the java side. Let's go to the C++ side.</db:para>
<db:para>C++ is responsible for calling the Java code and using the file descriptor to load the font into Qt.</db:para>
<db:para>To get a deeper understanding of how communication between C++ and Java works in Qt 6 check the <db:link xlink:href="qtcore-platform-androidnotifier-example.xml">Qt Android Notifier</db:link> example.</db:para>
<db:para>After obtaining the file descriptor from Java code, wrap the file descriptor into a <db:link xlink:href="">QFile Class</db:link> and load the font file into the <db:link xlink:href="">QFontDatabase Class</db:link> :</db:para>
<db:programlisting language="cpp">QFile file;
file.open(fd, QFile::OpenModeFlag::ReadOnly, QFile::FileHandleFlag::AutoCloseHandle);

QFontDatabase::addApplicationFontFromData(file-&amp;gt;readAll());
</db:programlisting>
</db:section>
</db:section>
</db:article>
