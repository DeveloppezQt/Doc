<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Editable Tree Model Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how to implement a simple item-based tree model that can be used with other classes the model/view framework.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/itemviews-editabletreemodel.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The model supports editable items, custom headers, and the ability to insert and remove rows and columns. With these features, it is also possible to insert new child items, and this is shown in the supporting example code.</db:para>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>As described in the <db:link xlink:href="model-view-programming.xml#model-subclassing-reference">Model Subclassing Reference</db:link>, models must provide implementations for the standard set of model functions: <db:link xlink:href="qabstractitemmodel.xml#flags">flags</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#headerData">headerData</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#columnCount">columnCount</db:link>(), and <db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>(). In addition, hierarchical models, such as this one, need to provide implementations of <db:link xlink:href="qabstractitemmodel.xml#index">index</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#parent">parent</db:link>().</db:para>
<db:para>An editable model needs to provide implementations of <db:link xlink:href="qabstractitemmodel.xml#setData">setData</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#setHeaderData">setHeaderData</db:link>(), and must return a suitable combination of flags from its <db:link xlink:href="qabstractitemmodel.xml#flags">flags</db:link>() function.</db:para>
<db:para>Since this example allows the dimensions of the model to be changed, we must also implement <db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>(), and <db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>().</db:para>
</db:section>
<db:section xml:id="design">
<db:title>Design</db:title>
<db:para>As with the <db:link xlink:href="qtwidgets-itemviews-simpletreemodel-example.xml">Simple Tree Model</db:link> example, the model simply acts as a wrapper around a collection of instances of a TreeItem class. Each TreeItem is designed to hold data for a row of items in a tree view, so it contains a list of values corresponding to the data shown in each column.</db:para>
<db:para>Since <db:link xlink:href="qtreeview.xml">QTreeView</db:link> provides a row-oriented view onto a model, it is natural to choose a row-oriented design for data structures that will supply data via a model to this kind of view. Although this makes the tree model less flexible, and possibly less useful for use with more sophisticated views, it makes it less complex to design and easier to implement.</db:para>
<db:anchor xml:id="relations-between-internal-items"/>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/itemviews-editabletreemodel-items.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Relations between internal items</db:emphasis></db:para>
<db:para>When designing a data structure for use with a custom model, it is useful to expose each item's parent via a function like <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#treeitem-parent">TreeItem::parent()</db:link> because it will make writing the model's own <db:link xlink:href="qabstractitemmodel.xml#parent">parent</db:link>() function easier. Similarly, a function like <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#treeitem-child">TreeItem::child()</db:link> is helpful when implementing the model's <db:link xlink:href="qabstractitemmodel.xml#index">index</db:link>() function. As a result, each TreeItem maintains information about its parent and children, making it possible for us to traverse the tree structure.</db:para>
<db:para>The diagram shows how TreeItem instances are connected via their <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#treeitem-parent">parent()</db:link> and <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#treeitem-child">child()</db:link> functions.</db:para>
<db:para>In the example shown, two top-level items, <db:emphasis role="bold">A</db:emphasis> and <db:emphasis role="bold">B</db:emphasis>, can be obtained from the root item by calling its child() function, and each of these items return the root node from their parent() functions, though this is only shown for item <db:emphasis role="bold">A</db:emphasis>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Each TreeItem stores data for each column in the row it represents in its itemData private member (a list of <db:link xlink:href="qvariant.xml">QVariant</db:link> objects). Since there is a one-to-one mapping between each column in the view and each entry in the list, we provide a simple <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#treeitem-data">data()</db:link> function to read entries in the itemData list and a <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#treeitem-setdata">setData()</db:link> function to allow them to be modified. As with other functions in the item, this simplifies the implemention of the model's <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#setData">setData</db:link>() functions.</db:para>
<db:para>We place an item at the root of the tree of items. This root item corresponds to the null model index, <db:link xlink:href="qmodelindex.xml#QModelIndex">QModelIndex</db:link>(), that is used to represent the parent of a top-level item when handling model indexes. Although the root item does not have a visible representation in any of the standard views, we use its internal list of <db:link xlink:href="qvariant.xml">QVariant</db:link> objects to store a list of strings that will be passed to views for use as horizontal header titles.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/itemviews-editabletreemodel-model.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Accessing data via the model</db:emphasis></db:para>
<db:para>In the case shown in the diagram, the piece of information represented by <db:emphasis role="bold">a</db:emphasis> can be obtained using the standard model/view API:</db:para>
<db:programlisting language="cpp">QVariant a = model-&gt;index(0, 0, QModelIndex()).data();
</db:programlisting>
<db:para>Since each items holds pieces of data for each column in a given row, there can be many model indexes that map to the same TreeItem object. For example, the information represented by <db:emphasis role="bold">b</db:emphasis> can be obtained using the following code:</db:para>
<db:programlisting language="cpp">QVariant b = model-&gt;index(1, 0, QModelIndex()).data();
</db:programlisting>
<db:para>The same underlying TreeItem would be accessed to obtain information for the other model indexes in the same row as <db:emphasis role="bold">b</db:emphasis>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>In the model class, TreeModel, we relate TreeItem objects to model indexes by passing a pointer for each item when we create its corresponding model index with <db:link xlink:href="qabstractitemmodel.xml#createIndex">QAbstractItemModel::createIndex</db:link>() in our <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#treemodel-index">index()</db:link> and <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#treemodel-parent">parent()</db:link> implementations. We can retrieve pointers stored in this way by calling the <db:link xlink:href="qmodelindex.xml#internalPointer">internalPointer</db:link>() function on the relevant model index - we create our own <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#treemodel-getitem">getItem()</db:link> function to do this work for us, and call it from our <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#treemodel-data">data()</db:link> and <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#treemodel-parent">parent()</db:link> implementations.</db:para>
<db:para>Storing pointers to items is convenient when we control how they are created and destroyed since we can assume that an address obtained from <db:link xlink:href="qmodelindex.xml#internalPointer">internalPointer</db:link>() is a valid pointer. However, some models need to handle items that are obtained from other components in a system, and in many cases it is not possible to fully control how items are created or destroyed. In such situations, a pure pointer-based approach needs to be supplemented by safeguards to ensure that the model does not attempt to access items that have been deleted.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Storing information in the underlying data structure</db:emphasis></db:para>
<db:para>Several pieces of data are stored as <db:link xlink:href="qvariant.xml">QVariant</db:link> objects in the itemData member of each TreeItem instance</db:para>
<db:para>The diagram shows how pieces of information, represented by the labels <db:emphasis role="bold">a</db:emphasis>, <db:emphasis role="bold">b</db:emphasis> and <db:emphasis role="bold">c</db:emphasis> in the previous two diagrams, are stored in items <db:emphasis role="bold">A</db:emphasis>, <db:emphasis role="bold">B</db:emphasis> and <db:emphasis role="bold">C</db:emphasis> in the underlying data structure. Note that pieces of information from the same row in the model are all obtained from the same item. Each element in a list corresponds to a piece of information exposed by each column in a given row in the model.</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/itemviews-editabletreemodel-values.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Since the TreeModel implementation has been designed for use with <db:link xlink:href="qtreeview.xml">QTreeView</db:link>, we have added a restriction on the way it uses TreeItem instances: each item must expose the same number of columns of data. This makes viewing the model consistent, allowing us to use the root item to determine the number of columns for any given row, and only adds the requirement that we create items containing enough data for the total number of columns. As a result, inserting and removing columns are time-consuming operations because we need to traverse the entire tree to modify every item.</db:para>
<db:para>An alternative approach would be to design the TreeModel class so that it truncates or expands the list of data in individual TreeItem instances as items of data are modified. However, this &quot;lazy&quot; resizing approach would only allow us to insert and remove columns at the end of each row and would not allow columns to be inserted or removed at arbitrary positions in each row.</db:para>
<db:anchor xml:id="relating-items-using-model-indexes"/>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/itemviews-editabletreemodel-indexes.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Relating items using model indexes</db:emphasis></db:para>
<db:para>As with the <db:link xlink:href="qtwidgets-itemviews-simpletreemodel-example.xml">Simple Tree Model</db:link> example, the TreeModel needs to be able to take a model index, find the corresponding TreeItem, and return model indexes that correspond to its parents and children.</db:para>
<db:para>In the diagram, we show how the model's <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#treemodel-parent">parent()</db:link> implementation obtains the model index corresponding to the parent of an item supplied by the caller, using the items shown in a <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#relations-between-internal-items">previous diagram</db:link>.</db:para>
<db:para>A pointer to item <db:emphasis role="bold">C</db:emphasis> is obtained from the corresponding model index using the <db:link xlink:href="qmodelindex.xml#internalPointer">QModelIndex::internalPointer</db:link>() function. The pointer was stored internally in the index when it was created. Since the child contains a pointer to its parent, we use its <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#treeitem-parent">parent()</db:link> function to obtain a pointer to item <db:emphasis role="bold">B</db:emphasis>. The parent model index is created using the <db:link xlink:href="qabstractitemmodel.xml#createIndex">QAbstractItemModel::createIndex</db:link>() function, passing the pointer to item <db:emphasis role="bold">B</db:emphasis> as the internal pointer.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="treeitem-class-definition">
<db:title>TreeItem Class Definition</db:title>
<db:para>The TreeItem class provides simple items that contain several pieces of data, and which can provide information about their parent and child items:</db:para>
<db:programlisting language="cpp">class TreeItem
{
public:
    explicit TreeItem(const QVector&lt;QVariant&gt; &amp;data, TreeItem *parent = 0);
    ~TreeItem();

    TreeItem *child(int number);
    int childCount() const;
    int columnCount() const;
    QVariant data(int column) const;
    bool insertChildren(int position, int count, int columns);
    bool insertColumns(int position, int columns);
    TreeItem *parent();
    bool removeChildren(int position, int count);
    bool removeColumns(int position, int columns);
    int childNumber() const;
    bool setData(int column, const QVariant &amp;value);

private:
    QList&lt;TreeItem*&gt; childItems;
    QVector&lt;QVariant&gt; itemData;
    TreeItem *parentItem;
};
</db:programlisting>
<db:para>We have designed the API to be similar to that provided by <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> by giving each item functions to return the number of columns of information, read and write data, and insert and remove columns. However, we make the relationship between items explicit by providing functions to deal with &quot;children&quot; rather than &quot;rows&quot;.</db:para>
<db:para>Each item contains a list of pointers to child items, a pointer to its parent item, and a list of <db:link xlink:href="qvariant.xml">QVariant</db:link> objects that correspond to information held in columns in a given row in the model.</db:para>
</db:section>
<db:section xml:id="treeitem-class-implementation">
<db:title>TreeItem Class Implementation</db:title>
<db:para>Each TreeItem is constructed with a list of data and an optional parent item:</db:para>
<db:programlisting language="cpp">TreeItem::TreeItem(const QVector&lt;QVariant&gt; &amp;data, TreeItem *parent)
{
    parentItem = parent;
    itemData = data;
}
</db:programlisting>
<db:para>Initially, each item has no children. These are added to the item's internal childItems member using the insertChildren() function described later.</db:para>
<db:para>The destructor ensures that each child added to the item is deleted when the item itself is deleted:</db:para>
<db:programlisting language="cpp">TreeItem::~TreeItem()
{
    qDeleteAll(childItems);
}
</db:programlisting>
<db:anchor xml:id="treeitem-parent"/>
<db:para>Since each item stores a pointer to its parent, the parent() function is trivial:</db:para>
<db:programlisting language="cpp">TreeItem *TreeItem::parent()
{
    return parentItem;
}
</db:programlisting>
<db:anchor xml:id="treeitem-child"/>
<db:para>Three functions provide information about the children of an item. child() returns a specific child from the internal list of children:</db:para>
<db:programlisting language="cpp">TreeItem *TreeItem::child(int number)
{
    return childItems.value(number);
}
</db:programlisting>
<db:para>The childCount() function returns the total number of children:</db:para>
<db:programlisting language="cpp">int TreeItem::childCount() const
{
    return childItems.count();
}
</db:programlisting>
<db:para>The childNumber() function is used to determine the index of the child in its parent's list of children. It accesses the parent's childItems member directly to obtain this information:</db:para>
<db:programlisting language="cpp">int TreeItem::childNumber() const
{
    if (parentItem)
        return parentItem-&gt;childItems.indexOf(const_cast&lt;TreeItem*&gt;(this));

    return 0;
}
</db:programlisting>
<db:para>The root item has no parent item; for this item, we return zero to be consistent with the other items.</db:para>
<db:para>The columnCount() function simply returns the number of elements in the internal itemData list of <db:link xlink:href="qvariant.xml">QVariant</db:link> objects:</db:para>
<db:programlisting language="cpp">int TreeItem::columnCount() const
{
    return itemData.count();
}
</db:programlisting>
<db:anchor xml:id="treeitem-data"/>
<db:para>Data is retrieved using the data() function, which accesses the appropriate element in the itemData list:</db:para>
<db:programlisting language="cpp">QVariant TreeItem::data(int column) const
{
    return itemData.value(column);
}
</db:programlisting>
<db:anchor xml:id="treeitem-setdata"/>
<db:para>Data is set using the setData() function, which only stores values in the itemData list for valid list indexes, corresponding to column values in the model:</db:para>
<db:programlisting language="cpp">bool TreeItem::setData(int column, const QVariant &amp;value)
{
    if (column &lt; 0 || column &gt;= itemData.size())
        return false;

    itemData[column] = value;
    return true;
}
</db:programlisting>
<db:para>To make implementation of the model easier, we return true to indicate whether the data was set successfully, or false if an invalid column</db:para>
<db:para>Editable models often need to be resizable, enabling rows and columns to be inserted and removed. The insertion of rows beneath a given model index in the model leads to the insertion of new child items in the corresponding item, handled by the insertChildren() function:</db:para>
<db:programlisting language="cpp">bool TreeItem::insertChildren(int position, int count, int columns)
{
    if (position &lt; 0 || position &gt; childItems.size())
        return false;

    for (int row = 0; row &lt; count; ++row) {
        QVector&lt;QVariant&gt; data(columns);
        TreeItem *item = new TreeItem(data, this);
        childItems.insert(position, item);
    }

    return true;
}
</db:programlisting>
<db:para>This ensures that new items are created with the required number of columns and inserted at a valid position in the internal childItems list. Items are removed with the removeChildren() function:</db:para>
<db:programlisting language="cpp">bool TreeItem::removeChildren(int position, int count)
{
    if (position &lt; 0 || position + count &gt; childItems.size())
        return false;

    for (int row = 0; row &lt; count; ++row)
        delete childItems.takeAt(position);

    return true;
}
</db:programlisting>
<db:para>As discussed above, the functions for inserting and removing columns are used differently to those for inserting and removing child items because they are expected to be called on every item in the tree. We do this by recursively calling this function on each child of the item:</db:para>
<db:programlisting language="cpp">bool TreeItem::insertColumns(int position, int columns)
{
    if (position &lt; 0 || position &gt; itemData.size())
        return false;

    for (int column = 0; column &lt; columns; ++column)
        itemData.insert(position, QVariant());

    foreach (TreeItem *child, childItems)
        child-&gt;insertColumns(position, columns);

    return true;
}
</db:programlisting>
</db:section>
<db:section xml:id="treemodel-class-definition">
<db:title>TreeModel Class Definition</db:title>
<db:para>The TreeModel class provides an implementation of the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> class, exposing the necessary interface for a model that can be edited and resized.</db:para>
<db:programlisting language="cpp">class TreeModel : public QAbstractItemModel
{
    Q_OBJECT

public:
    TreeModel(const QStringList &amp;headers, const QString &amp;data,
              QObject *parent = 0);
    ~TreeModel();
</db:programlisting>
<db:para>The constructor and destructor are specific to this model.</db:para>
<db:programlisting language="cpp">    QVariant data(const QModelIndex &amp;index, int role) const Q_DECL_OVERRIDE;
    QVariant headerData(int section, Qt::Orientation orientation,
                        int role = Qt::DisplayRole) const Q_DECL_OVERRIDE;

    QModelIndex index(int row, int column,
                      const QModelIndex &amp;parent = QModelIndex()) const Q_DECL_OVERRIDE;
    QModelIndex parent(const QModelIndex &amp;index) const Q_DECL_OVERRIDE;

    int rowCount(const QModelIndex &amp;parent = QModelIndex()) const Q_DECL_OVERRIDE;
    int columnCount(const QModelIndex &amp;parent = QModelIndex()) const Q_DECL_OVERRIDE;
</db:programlisting>
<db:para>Read-only tree models only need to provide the above functions. The following public functions provide support for editing and resizing:</db:para>
<db:programlisting language="cpp">    Qt::ItemFlags flags(const QModelIndex &amp;index) const Q_DECL_OVERRIDE;
    bool setData(const QModelIndex &amp;index, const QVariant &amp;value,
                 int role = Qt::EditRole) Q_DECL_OVERRIDE;
    bool setHeaderData(int section, Qt::Orientation orientation,
                       const QVariant &amp;value, int role = Qt::EditRole) Q_DECL_OVERRIDE;

    bool insertColumns(int position, int columns,
                       const QModelIndex &amp;parent = QModelIndex()) Q_DECL_OVERRIDE;
    bool removeColumns(int position, int columns,
                       const QModelIndex &amp;parent = QModelIndex()) Q_DECL_OVERRIDE;
    bool insertRows(int position, int rows,
                    const QModelIndex &amp;parent = QModelIndex()) Q_DECL_OVERRIDE;
    bool removeRows(int position, int rows,
                    const QModelIndex &amp;parent = QModelIndex()) Q_DECL_OVERRIDE;

private:
    void setupModelData(const QStringList &amp;lines, TreeItem *parent);
    TreeItem *getItem(const QModelIndex &amp;index) const;

    TreeItem *rootItem;
};
</db:programlisting>
<db:para>To simplify this example, the data exposed by the model is organized into a data structure by the model's <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#treemodel-setupmodeldata">setupModelData()</db:link> function. Many real world models will not process the raw data at all, but simply work with an existing data structure or library API.</db:para>
</db:section>
<db:section xml:id="treemodel-class-implementation">
<db:title>TreeModel Class Implementation</db:title>
<db:para>The constructor creates a root item and initializes it with the header data supplied:</db:para>
<db:programlisting language="cpp">TreeModel::TreeModel(const QStringList &amp;headers, const QString &amp;data, QObject *parent)
    : QAbstractItemModel(parent)
{
    QVector&lt;QVariant&gt; rootData;
    foreach (QString header, headers)
        rootData &lt;&lt; header;

    rootItem = new TreeItem(rootData);
    setupModelData(data.split(QString(&quot;\n&quot;)), rootItem);
}
</db:programlisting>
<db:para>We call the internal <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#treemodel-setupmodeldata">setupModelData()</db:link> function to convert the textual data supplied to a data structure we can use with the model. Other models may be initialized with a ready-made data structure, or use an API to a library that maintains its own data.</db:para>
<db:para>The destructor only has to delete the root item; all child items will be recursively deleted by the TreeItem destructor.</db:para>
<db:programlisting language="cpp">TreeModel::~TreeModel()
{
    delete rootItem;
}
</db:programlisting>
<db:anchor xml:id="treemodel-getitem"/>
<db:para>Since the model's interface to the other model/view components is based on model indexes, and the internal data structure is item-based, many of the functions implemented by the model need to be able to convert any given model index to its corresponding item. For convenience and consistency, we have defined a getItem() function to perform this repetitive task:</db:para>
<db:programlisting language="cpp">TreeItem *TreeModel::getItem(const QModelIndex &amp;index) const
{
    if (index.isValid()) {
        TreeItem *item = static_cast&lt;TreeItem*&gt;(index.internalPointer());
        if (item)
            return item;
    }
    return rootItem;
}
</db:programlisting>
<db:para>This function assumes that each model index it is passed corresponds to a valid item in memory. If the index is invalid, or its internal pointer does not refer to a valid item, the root item is returned instead.</db:para>
<db:para>The model's rowCount() implementation is simple: it first uses the getItem() function to obtain the relevant item, then returns the number of children it contains:</db:para>
<db:programlisting language="cpp">int TreeModel::rowCount(const QModelIndex &amp;parent) const
{
    TreeItem *parentItem = getItem(parent);

    return parentItem-&gt;childCount();
}
</db:programlisting>
<db:para>By contrast, the columnCount() implementation does not need to look for a particular item because all items are defined to have the same number of columns associated with them.</db:para>
<db:programlisting language="cpp">int TreeModel::columnCount(const QModelIndex &amp; /* parent */) const
{
    return rootItem-&gt;columnCount();
}
</db:programlisting>
<db:para>As a result, the number of columns can be obtained directly from the root item.</db:para>
<db:para>To enable items to be edited and selected, the flags() function needs to be implemented so that it returns a combination of flags that includes the <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemIsEditable</db:link> and <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemIsSelectable</db:link> flags as well as <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemIsEnabled</db:link>:</db:para>
<db:programlisting language="cpp">Qt::ItemFlags TreeModel::flags(const QModelIndex &amp;index) const
{
    if (!index.isValid())
        return 0;

    return Qt::ItemIsEditable | QAbstractItemModel::flags(index);
}
</db:programlisting>
<db:anchor xml:id="treemodel-index"/>
<db:para>The model needs to be able to generate model indexes to allow other components to request data and information about its structure. This task is performed by the index() function, which is used to obtain model indexes corresponding to children of a given parent item:</db:para>
<db:programlisting language="cpp">QModelIndex TreeModel::index(int row, int column, const QModelIndex &amp;parent) const
{
    if (parent.isValid() &amp;&amp; parent.column() != 0)
        return QModelIndex();
</db:programlisting>
<db:para>In this model, we only return model indexes for child items if the parent index is invalid (corresponding to the root item) or if it has a zero column number.</db:para>
<db:para>We use the custom <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#treemodel-getitem">getItem()</db:link> function to obtain a TreeItem instance that corresponds to the model index supplied, and request its child item that corresponds to the specified row.</db:para>
<db:programlisting language="cpp">    TreeItem *parentItem = getItem(parent);

    TreeItem *childItem = parentItem-&gt;child(row);
    if (childItem)
        return createIndex(row, column, childItem);
    else
        return QModelIndex();
}
</db:programlisting>
<db:para>Since each item contains information for an entire row of data, we create a model index to uniquely identify it by calling <db:link xlink:href="qabstractitemmodel.xml#createIndex">createIndex</db:link>() it with the row and column numbers and a pointer to the item. In the <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#treemodel-data">data()</db:link> function, we will use the item pointer and column number to access the data associated with the model index; in this model, the row number is not needed to identify data.</db:para>
<db:anchor xml:id="treemodel-parent"/>
<db:para>The parent() function supplies model indexes for parents of items by finding the corresponding item for a given model index, using its <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#treeitem-parent">parent()</db:link> function to obtain its parent item, then creating a model index to represent the parent. (See <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#relating-items-using-model-indexes">the above diagram</db:link>).</db:para>
<db:programlisting language="cpp">QModelIndex TreeModel::parent(const QModelIndex &amp;index) const
{
    if (!index.isValid())
        return QModelIndex();

    TreeItem *childItem = getItem(index);
    TreeItem *parentItem = childItem-&gt;parent();

    if (parentItem == rootItem)
        return QModelIndex();

    return createIndex(parentItem-&gt;childNumber(), 0, parentItem);
}
</db:programlisting>
<db:para>Items without parents, including the root item, are handled by returning a null model index. Otherwise, a model index is created and returned as in the <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#treemodel-index">index()</db:link> function, with a suitable row number, but with a zero column number to be consistent with the scheme used in the <db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml#treemodel-index">index()</db:link> implementation.</db:para>
<db:anchor xml:id="treemodel-data"/>
<db:anchor xml:id="treemodel-setupmodeldata"/>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="itemviews/editabletreemodel/editabletreemodel.pro">itemviews/editabletreemodel/editabletreemodel.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/editabletreemodel/editabletreemodel.qrc">itemviews/editabletreemodel/editabletreemodel.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/editabletreemodel/main.cpp">itemviews/editabletreemodel/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/editabletreemodel/mainwindow.cpp">itemviews/editabletreemodel/mainwindow.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/editabletreemodel/mainwindow.h">itemviews/editabletreemodel/mainwindow.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/editabletreemodel/mainwindow.ui">itemviews/editabletreemodel/mainwindow.ui</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/editabletreemodel/treeitem.cpp">itemviews/editabletreemodel/treeitem.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/editabletreemodel/treeitem.h">itemviews/editabletreemodel/treeitem.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/editabletreemodel/treemodel.cpp">itemviews/editabletreemodel/treemodel.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/editabletreemodel/treemodel.h">itemviews/editabletreemodel/treemodel.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
