<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Image Gestures Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Widgets Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This example shows how to enable gestures for a widget and use gesture input to perform actions.</db:para>
<db:para>We use two classes to create the user interface for the application: <db:code>MainWidget</db:code> and <db:code>ImageWidget</db:code>. The <db:code>MainWidget</db:code> class is simply used as a container for the <db:code>ImageWidget</db:code> class, which we will configure to accept gesture input. Since we are interested in the way gestures are used, we will concentrate on the implementation of the <db:code>ImageWidget</db:code> class.</db:para>
<db:section xml:id="imagewidget-class-definition">
<db:title>ImageWidget Class Definition</db:title>
<db:para>The <db:code>ImageWidget</db:code> class is a simple <db:link xlink:href="qwidget.xml">QWidget</db:link> subclass that reimplements the general <db:link xlink:href="qwidget.xml#event">QWidget::event</db:link>() handler function in addition to several more specific event handlers:</db:para>
<db:programlisting language="cpp">class ImageWidget : public QWidget
{
    Q_OBJECT

public:
    ImageWidget(QWidget *parent = 0);
    void openDirectory(const QString &amp;path);
    void grabGestures(const QList&lt;Qt::GestureType&gt; &amp;gestures);

protected:
    bool event(QEvent *event);
    void paintEvent(QPaintEvent *event);
    void resizeEvent(QResizeEvent *event);
    void mouseDoubleClickEvent(QMouseEvent *event);

private:
    bool gestureEvent(QGestureEvent *event);
    void panTriggered(QPanGesture*);
    void pinchTriggered(QPinchGesture*);
    void swipeTriggered(QSwipeGesture*);
    ...
};
</db:programlisting>
<db:para>We also implement a private helper function, <db:code>gestureEvent()</db:code>, to help manage gesture events delivered to the widget, and three functions to perform actions based on gestures: <db:code>panTriggered()</db:code>, <db:code>pinchTriggered()</db:code> and <db:code>swipeTriggered()</db:code>.</db:para>
</db:section>
<db:section xml:id="imagewidget-class-implementation">
<db:title>ImageWidget Class Implementation</db:title>
<db:para>In the widget's constructor, we begin by setting up various parameters that will be used to control the way images are displayed.</db:para>
<db:programlisting language="cpp">ImageWidget::ImageWidget(QWidget *parent)
    : QWidget(parent),
    position(0),
    horizontalOffset(0),
    verticalOffset(0),
    rotationAngle(0),
    scaleFactor(1),
    currentStepScaleFactor(1)

{
    setMinimumSize(QSize(100,100));
}
</db:programlisting>
<db:para>We enable three of the standard gestures for the widget by calling <db:link xlink:href="qwidget.xml#grabGesture">QWidget::grabGesture</db:link>() with the types of gesture we need. These will be recognized by the application's default gesture recognizer, and events will be delivered to our widget.</db:para>
<db:para>Since <db:link xlink:href="qwidget.xml">QWidget</db:link> does not define a specific event handler for gestures, the widget needs to reimplement the general <db:link xlink:href="qwidget.xml#event">QWidget::event</db:link>() to receive gesture events.</db:para>
<db:programlisting language="cpp">bool ImageWidget::event(QEvent *event)
{
    if (event-&gt;type() == QEvent::Gesture)
        return gestureEvent(static_cast&lt;QGestureEvent*&gt;(event));
    return QWidget::event(event);
}
</db:programlisting>
<db:para>We implement the event handler to delegate gesture events to a private function specifically written for the task, and pass all other events to <db:link xlink:href="qwidget.xml">QWidget</db:link>'s implementation.</db:para>
<db:para>The <db:code>gestureHandler()</db:code> function examines the gestures supplied by the newly-delivered <db:link xlink:href="qgestureevent.xml">QGestureEvent</db:link>. Since only one gesture of a given type can be used on a widget at any particular time, we can check for each gesture type using the <db:link xlink:href="qgestureevent.xml#gesture">QGestureEvent::gesture</db:link>() function:</db:para>
<db:programlisting language="cpp">bool ImageWidget::gestureEvent(QGestureEvent *event)
{
    qCDebug(lcExample) &lt;&lt; &quot;gestureEvent():&quot; &lt;&lt; event-&gt;gestures().size();
    if (QGesture *swipe = event-&gt;gesture(Qt::SwipeGesture))
        swipeTriggered(static_cast&lt;QSwipeGesture *&gt;(swipe));
    else if (QGesture *pan = event-&gt;gesture(Qt::PanGesture))
        panTriggered(static_cast&lt;QPanGesture *&gt;(pan));
    if (QGesture *pinch = event-&gt;gesture(Qt::PinchGesture))
        pinchTriggered(static_cast&lt;QPinchGesture *&gt;(pinch));
    return true;
}
</db:programlisting>
<db:para>If a <db:link xlink:href="qgesture.xml">QGesture</db:link> object is supplied for a certain type of gesture, we call a special purpose function to deal with it, casting the gesture object to the appropriate <db:link xlink:href="qgesture.xml">QGesture</db:link> subclass.</db:para>
<db:para>To illustrate how a standard gesture can be interpreted by an application, we show the implementation of the <db:code>swipeTriggered()</db:code> function, which handles the gesture associated with a brushing or swiping motion on the user's display or input device:</db:para>
<db:programlisting language="cpp">void ImageWidget::swipeTriggered(QSwipeGesture *gesture)
{
    if (gesture-&gt;state() == Qt::GestureFinished) {
        if (gesture-&gt;horizontalDirection() == QSwipeGesture::Left
            || gesture-&gt;verticalDirection() == QSwipeGesture::Up) {
            qCDebug(lcExample) &lt;&lt; &quot;swipeTriggered(): swipe to previous&quot;;
            goPrevImage();
        } else {
            qCDebug(lcExample) &lt;&lt; &quot;swipeTriggered(): swipe to next&quot;;
            goNextImage();
        }
        update();
    }
}
</db:programlisting>
<db:para>The <db:link xlink:href="qswipegesture.xml">QSwipeGesture</db:link> class provides specialized functions and defines a enum to make it more convenient for developers to discover which direction, if any, the user swiped the display. Here, we simply navigate to the previous image in the collection if the user swiped upwards or to the left; otherwise we navigate to the next image in the collection.</db:para>
<db:para>The other gestures are also handled by special purpose functions, but use the values of properties held by the <db:link xlink:href="qgesture.xml">QGesture</db:link> object passed to them.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="gestures/imagegestures/imagegestures.pro">gestures/imagegestures/imagegestures.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="gestures/imagegestures/imagewidget.cpp">gestures/imagegestures/imagewidget.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="gestures/imagegestures/imagewidget.h">gestures/imagegestures/imagewidget.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="gestures/imagegestures/main.cpp">gestures/imagegestures/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="gestures/imagegestures/mainwidget.cpp">gestures/imagegestures/mainwidget.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="gestures/imagegestures/mainwidget.h">gestures/imagegestures/mainwidget.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
