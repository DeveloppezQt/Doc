<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Chapter 4: Using Custom Property Types</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt QML Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The <db:code>PieChart</db:code> type currently has a string-type property and a color-type property. It could have many other types of properties. For example, it could have an int-type property to store an identifier for each chart:</db:para>
<db:programlisting language="cpp">// C++
class PieChart : public QQuickPaintedItem
{
    Q_PROPERTY(int chartId READ chartId WRITE setChartId NOTIFY chartIdChanged)
    ...

public:
    void setChartId(int chartId);
    int chartId() const;
    ...

signals:
    void chartIdChanged();
};

// QML
PieChart {
    ...
    chartId: 100
}
</db:programlisting>
<db:para>Aside from <db:code>int</db:code>, we could use various other property types. Many of the Qt data types such as QColor, <db:link xlink:href="qsize.xml">QSize</db:link> and <db:link xlink:href="qrect.xml">QRect</db:link> are automatically supported from QML. (See <db:link xlink:href="qtqml-cppintegration-data.xml">Data Type Conversion Between QML and C++</db:link> documentation for a full list.)</db:para>
<db:para>If we want to create a property whose type is not supported by QML by default, we need to register the type with the QML engine.</db:para>
<db:para>For example, let's replace the use of the <db:code>property</db:code> with a type called &quot;PieSlice&quot; that has a <db:code>color</db:code> property. Instead of assigning a color, we assign an <db:code>PieSlice</db:code> value which itself contains a <db:code>color</db:code>:</db:para>
<db:programlisting language="qml">import Charts 1.0
import QtQuick 2.0

Item {
    width: 300; height: 200

    PieChart {
        id: chart
        anchors.centerIn: parent
        width: 100; height: 100

        pieSlice: PieSlice {
            anchors.fill: parent
            color: &quot;red&quot;
        }
    }

    Component.onCompleted: console.log(&quot;The pie is colored &quot; + chart.pieSlice.color)
}
</db:programlisting>
<db:para>Like <db:code>PieChart</db:code>, this new <db:code>PieSlice</db:code> type inherits from QQuickPaintedItem and declares its properties with <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link>():</db:para>
<db:programlisting language="cpp">class PieSlice : public QQuickPaintedItem
{
    Q_OBJECT
    Q_PROPERTY(QColor color READ color WRITE setColor)

public:
    PieSlice(QQuickItem *parent = 0);

    QColor color() const;
    void setColor(const QColor &amp;color);

    void paint(QPainter *painter);

private:
    QColor m_color;
};
</db:programlisting>
<db:para>To use it in <db:code>PieChart</db:code>, we modify the <db:code>color</db:code> property declaration and associated method signatures:</db:para>
<db:programlisting language="cpp">class PieChart : public QQuickItem
{
    Q_OBJECT
    Q_PROPERTY(PieSlice* pieSlice READ pieSlice WRITE setPieSlice)
    ...
public:
    ...
    PieSlice *pieSlice() const;
    void setPieSlice(PieSlice *pieSlice);
    ...
};
</db:programlisting>
<db:para>There is one thing to be aware of when implementing <db:code>setPieSlice()</db:code>. The <db:code>PieSlice</db:code> is a visual item, so it must be set as a child of the <db:code>PieChart</db:code> using QQuickItem::setParentItem() so that the <db:code>PieChart</db:code> knows to paint this child item when its contents are drawn:</db:para>
<db:programlisting language="cpp">void PieChart::setPieSlice(PieSlice *pieSlice)
{
    m_pieSlice = pieSlice;
    pieSlice-&gt;setParentItem(this);
}
</db:programlisting>
<db:para>Like the <db:code>PieChart</db:code> type, the <db:code>PieSlice</db:code> type has to be registered using qmlRegisterType() to be used from QML. As with <db:code>PieChart</db:code>, we'll add the type to the &quot;Charts&quot; type namespace, version 1.0:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    ...
    qmlRegisterType&lt;PieSlice&gt;(&quot;Charts&quot;, 1, 0, &quot;PieSlice&quot;);
    ...
}
</db:programlisting>
<db:para>Try it out with the code in Qt's <db:code>examples/qml/tutorials/extending/chapter4-customPropertyTypes</db:code> directory.</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="tutorials/extending/chapter4-customPropertyTypes/app.qml">tutorials/extending/chapter4-customPropertyTypes/app.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/extending/chapter4-customPropertyTypes/chapter4-customPropertyTypes.pro">tutorials/extending/chapter4-customPropertyTypes/chapter4-customPropertyTypes.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/extending/chapter4-customPropertyTypes/chapter4-customPropertyTypes.qrc">tutorials/extending/chapter4-customPropertyTypes/chapter4-customPropertyTypes.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/extending/chapter4-customPropertyTypes/main.cpp">tutorials/extending/chapter4-customPropertyTypes/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/extending/chapter4-customPropertyTypes/piechart.cpp">tutorials/extending/chapter4-customPropertyTypes/piechart.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/extending/chapter4-customPropertyTypes/piechart.h">tutorials/extending/chapter4-customPropertyTypes/piechart.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/extending/chapter4-customPropertyTypes/pieslice.cpp">tutorials/extending/chapter4-customPropertyTypes/pieslice.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/extending/chapter4-customPropertyTypes/pieslice.h">tutorials/extending/chapter4-customPropertyTypes/pieslice.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
