<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title></db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qassociativeiterable-const-iterator.xml">QAssociativeIterable::const_iterator</db:link> allows iteration over a container in a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>This struct was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>const_iterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qassociativeiterable-const-iterator.xml">QAssociativeIterable::const_iterator</db:link> can only be created by a <db:link xlink:href="qassociativeiterable.xml">QAssociativeIterable</db:link> instance, and can be used in a way similar to other stl-style iterators.</db:para>
<db:programlisting language="cpp">QHash&lt;int, QString&gt; mapping;
mapping.insert(7, &quot;Seven&quot;);
mapping.insert(11, &quot;Eleven&quot;);
mapping.insert(42, &quot;Forty-two&quot;);

QVariant variant = QVariant::fromValue(mapping);
if (variant.canConvert&lt;QVariantHash&gt;()) {
    QAssociativeIterable iterable = variant.value&lt;QAssociativeIterable&gt;();
    // Can use foreach over the values:
    foreach (const QVariant &amp;v, iterable) {
        qDebug() &lt;&lt; v;
    }
    // Can use C++11 range-for over the values:
    for (const QVariant &amp;v : iterable) {
        qDebug() &lt;&lt; v;
    }
    // Can use iterators:
    QAssociativeIterable::const_iterator it = iterable.begin();
    const QAssociativeIterable::const_iterator end = iterable.end();
    for ( ; it != end; ++it) {
        qDebug() &lt;&lt; *it; // The current value
        qDebug() &lt;&lt; it.key();
        qDebug() &lt;&lt; it.value();
    }
}

</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qassociativeiterable.xml">QAssociativeIterable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="const_iterator">
<db:title>const_iterator::const_iterator(const QAssociativeIterable::const_iterator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Creates a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.const_iterator">
<db:title>[noexcept] const_iterator::~const_iterator()</db:title>
<db:para>Destroys the <db:link xlink:href="qassociativeiterable-const-iterator.xml">QAssociativeIterable::const_iterator</db:link>.</db:para>
</db:section>
<db:section xml:id="key">
<db:title>const QVariant const_iterator::key() const</db:title>
<db:para>Returns the current key, converted to a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:section>
<db:section xml:id="value">
<db:title>const QVariant const_iterator::value() const</db:title>
<db:para>Returns the current value, converted to a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool const_iterator::operator!=(const QAssociativeIterable::const_iterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">other</db:code> points to a different item than this iterator; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qassociativeiterable-const-iterator.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a">
<db:title>const QVariant const_iterator::operator*() const</db:title>
<db:para>Returns the current value, converted to a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-2b">
<db:title>QAssociativeIterable::const_iterator const_iterator::operator+(int <db:emphasis>j</db:emphasis>) const</db:title>
<db:para>Returns an iterator to the item at <db:code role="parameter">j</db:code> positions forward from this iterator.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qassociativeiterable-const-iterator.xml#operator-">operator-</db:link>()</db:member>
<db:member><db:link xlink:href="qassociativeiterable-const-iterator.xml#operator-2b-eq">operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b">
<db:title>QAssociativeIterable::const_iterator &amp;const_iterator::operator++()</db:title>
<db:para>The prefix ++ operator (<db:code>++it</db:code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</db:para>
<db:para>Calling this function on <db:link xlink:href="qassociativeiterable.xml#end">QAssociativeIterable::end</db:link>() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qassociativeiterable-const-iterator.xml#operator--">operator--</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b-1">
<db:title>QAssociativeIterable::const_iterator const_iterator::operator++(<db:emphasis>int</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix ++ operator (<db:code>it++</db:code>) advances the iterator to the next item in the container and returns an iterator to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>QAssociativeIterable::const_iterator &amp;const_iterator::operator+=(int <db:emphasis>j</db:emphasis>)</db:title>
<db:para>Advances the iterator by <db:code role="parameter">j</db:code> items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qassociativeiterable-const-iterator.xml#operator--eq">operator-=</db:link>()</db:member>
<db:member><db:link xlink:href="qassociativeiterable-const-iterator.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-">
<db:title>QAssociativeIterable::const_iterator const_iterator::operator-(int <db:emphasis>j</db:emphasis>) const</db:title>
<db:para>Returns an iterator to the item at <db:code role="parameter">j</db:code> positions backward from this iterator.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qassociativeiterable-const-iterator.xml#operator-2b">operator+</db:link>()</db:member>
<db:member><db:link xlink:href="qassociativeiterable-const-iterator.xml#operator--eq">operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--">
<db:title>QAssociativeIterable::const_iterator &amp;const_iterator::operator--()</db:title>
<db:para>The prefix – operator (<db:code>--it</db:code>) makes the preceding item current and returns an iterator to the new current item.</db:para>
<db:para>Calling this function on <db:link xlink:href="qassociativeiterable.xml#begin">QAssociativeIterable::begin</db:link>() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qassociativeiterable-const-iterator.xml#operator-2b-2b">operator++</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator---1">
<db:title>QAssociativeIterable::const_iterator const_iterator::operator--(<db:emphasis>int</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix – operator (<db:code>it--</db:code>) makes the preceding item current and returns an iterator to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator--eq">
<db:title>QAssociativeIterable::const_iterator &amp;const_iterator::operator-=(int <db:emphasis>j</db:emphasis>)</db:title>
<db:para>Makes the iterator go back by <db:code role="parameter">j</db:code> items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qassociativeiterable-const-iterator.xml#operator-2b-eq">operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qassociativeiterable-const-iterator.xml#operator-">operator-</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QAssociativeIterable::const_iterator &amp;const_iterator::operator=(const QAssociativeIterable::const_iterator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool const_iterator::operator==(const QAssociativeIterable::const_iterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">other</db:code> points to the same item as this iterator; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qassociativeiterable-const-iterator.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
