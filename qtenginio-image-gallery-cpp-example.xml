<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Enginio C++ Examples - Image Gallery</db:title>
<db:productname>QtEnginio</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Client library for Enginio</db:titleabbrev>
<db:abstract>
<db:para>This is an example that demonstrates uploading and downloading of files in Enginio.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The user interface consists of a list of images and a button to upload more images.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/gallery-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="backend-configuration">
<db:title>Backend Configuration</db:title>
<db:para>The <db:emphasis>Enginio</db:emphasis> <db:emphasis>backend</db:emphasis> needs to be set up in order to get this example working.</db:para>
<db:para>Go to the <db:emphasis>Enginio Dashboard</db:emphasis> and create a new backend with the <db:emphasis role="bold">Image Gallery</db:emphasis> template. The template will construct a new custom backend by executing these steps:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Create a new object type <db:code>objects.image</db:code> (on the <db:emphasis role="bold">Object Types</db:emphasis> page).</db:para>
<db:para>Add two properties to the image object: name:&quot;name&quot;, type: &quot;String&quot; and name: &quot;file&quot;, type: &quot;Ref&quot; with target &quot;files&quot;.</db:para>
</db:listitem>
<db:listitem>
<db:para>Add a file processor by clicking the <db:code>file</db:code> property. Choose <db:emphasis role="bold">Image processor</db:emphasis> and in <db:emphasis role="bold">Variants</db:emphasis> enter:</db:para>
<db:programlisting language="cpp">{
    &quot;thumbnail&quot;: { &quot;crop&quot;:&quot;100x100&quot; }
}
</db:programlisting>
<db:para>This JSON snippet triggers the server to generate thumbnails for all uploaded images. In the image gallery, the thumbnails will be used in the list view, and the full image will be shown when the thumbnail is clicked.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Copy the backend id from the Enginio dashboard, and use them when requested.</db:para>
</db:section>
<db:section xml:id="the-example-code">
<db:title>The Example Code</db:title>
<db:para>The example consists of three classes. <db:link xlink:href="qml-qtlocation-imagemodel.xml">ImageModel</db:link> is a subclass of <db:link xlink:href="enginiomodel.xml#enginiomodelcpp">EnginioModel</db:link> that exposes the images in the <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DecorationRole</db:link> for the list view. In the <db:code>MainWindow</db:code>, a normal <db:link xlink:href="qlistview.xml">QListView</db:link> is used to display the model contents. The ImageObject is a class that takes care of the download, and emits a signal when an image has been downloaded.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="image-gallery-cpp/image-gallery-cpp.pro">image-gallery-cpp/image-gallery-cpp.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="image-gallery-cpp/imagemodel.cpp">image-gallery-cpp/imagemodel.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="image-gallery-cpp/imagemodel.h">image-gallery-cpp/imagemodel.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="image-gallery-cpp/imageobject.cpp">image-gallery-cpp/imageobject.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="image-gallery-cpp/imageobject.h">image-gallery-cpp/imageobject.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="image-gallery-cpp/main.cpp">image-gallery-cpp/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="image-gallery-cpp/mainwindow.cpp">image-gallery-cpp/mainwindow.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="image-gallery-cpp/mainwindow.h">image-gallery-cpp/mainwindow.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
