<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QProperty Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QProperty</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qproperty.xml">QProperty</db:link> class is a template class that enables automatic property bindings.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QProperty</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpropertydata.xml" xlink:role="class">QPropertyData</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QProperty is part of <db:simplelist><db:member>tools</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qproperty.xml">QProperty</db:link>&lt;T&gt; is a generic container that holds an instance of T. You can assign a value to it and you can read it via the <db:link xlink:href="qproperty.xml#value">value</db:link>() function or the T conversion operator. You can also tie the property to an expression that computes the value dynamically, the binding expression. It is represented as a C++ lambda and can be used to express relationships between different properties in your application.</db:para>
<db:para>The binding expression computes the value by reading other <db:link xlink:href="qproperty.xml">QProperty</db:link> values. Behind the scenes this dependency is tracked. Whenever a change in any property's dependency is detected, the binding expression is re-evaluated and the new result is applied to the property. This happens lazily, by marking the binding as dirty and evaluating it only when the property's value is requested. For example:</db:para>
<db:programlisting language="cpp">QProperty&amp;lt;QString&amp;gt; firstname(&quot;John&quot;);
QProperty&amp;lt;QString&amp;gt; lastname(&quot;Smith&quot;);
QProperty&amp;lt;int&amp;gt; age(41);

QProperty&amp;lt;QString&amp;gt; fullname;
fullname.setBinding([&amp;amp;]() { return firstname.value() + &quot; &quot; + lastname.value() + &quot; age: &quot; + QString::number(age.value()); });

qDebug() &amp;lt;&amp;lt; fullname.value(); // Prints &quot;John Smith age: 41&quot;

firstname = &quot;Emma&quot;; // Marks binding expression as dirty

qDebug() &amp;lt;&amp;lt; fullname.value(); // Re-evaluates the binding expression and prints &quot;Emma Smith age: 41&quot;

// Birthday is coming up
age.setValue(age.value() + 1);

qDebug() &amp;lt;&amp;lt; fullname.value(); // Re-evaluates the binding expression and prints &quot;Emma Smith age: 42&quot;
</db:programlisting>
<db:para>When a new value is assigned to the firstname property, the binding expression for fullname is marked as dirty. So when the last qDebug() statement tries to read the name value of the fullname property, the expression is evaluated again, firstname() will be called again and return the new value.</db:para>
<db:para>Since bindings are C++ lambda expressions, they may do anything that's possible in C++. This includes calling other functions. If those functions access values held by <db:link xlink:href="qproperty.xml">QProperty</db:link>, they automatically become dependencies to the binding.</db:para>
<db:para>Binding expressions may use properties of any type, so in the above example the age is an integer and folded into the string value using conversion to integer, but the dependency is fully tracked.</db:para>
<db:section xml:id="tracking-properties">
<db:title>Tracking properties</db:title>
<db:para>Sometimes the relationships between properties cannot be expressed using bindings. Instead you may need to run custom code whenever the value of a property changes and instead of assigning the value to another property, pass it to other parts of your application. For example writing data into a network socket or printing debug output. <db:link xlink:href="qproperty.xml">QProperty</db:link> provides two mechanisms for tracking.</db:para>
<db:para>You can register for a callback function to be called whenever the value of a property changes, by using <db:link xlink:href="qproperty.xml#onValueChanged">onValueChanged</db:link>(). If you want the callback to also be called for the current value of the property, register your callback using <db:link xlink:href="qproperty.xml#subscribe">subscribe</db:link>() instead.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="setValue-1">
<db:title>void QProperty::setValue(QProperty::parameter_type <db:emphasis>newValue</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="setValue">void QProperty::setValue(QProperty::rvalue_ref <db:emphasis>newValue</db:emphasis>)</db:bridgehead>
<db:para>Assigns <db:code role="parameter">newValue</db:code> to this property and removes the property's associated binding, if present.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QProperty&lt;T&gt; &amp;QProperty::operator=(QProperty::parameter_type <db:emphasis>newValue</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-eq">QProperty&lt;T&gt; &amp;QProperty::operator=(QProperty::rvalue_ref <db:emphasis>newValue</db:emphasis>)</db:bridgehead>
<db:para>Assigns <db:code role="parameter">newValue</db:code> to this property and returns a reference to this <db:link xlink:href="qproperty.xml">QProperty</db:link>.</db:para>
</db:section>
<db:section xml:id="QProperty">
<db:title>QProperty::QProperty()</db:title>
<db:constructorsynopsis>
<db:methodname>QProperty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QProperty()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a property with a default constructed instance of T.</db:para>
</db:section>
<db:section xml:id="QProperty-3">
<db:title>[explicit] QProperty::QProperty(const QPropertyBinding&lt;T&gt; &amp;<db:emphasis>binding</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QProperty</db:methodname>
<db:methodparam>
<db:type>const QPropertyBinding&lt;T&gt; &amp;</db:type>
<db:parameter>binding</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QProperty(const QPropertyBinding&lt;T&gt; &amp;binding)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a property that is tied to the provided <db:code role="parameter">binding</db:code> expression. The first time the property value is read, the binding is evaluated. Whenever a dependency of the binding changes, the binding will be re-evaluated the next time the value of this property is read.</db:para>
</db:section>
<db:section xml:id="QProperty-4">
<db:title>[explicit] QProperty::QProperty(Functor &amp;&amp;<db:emphasis>f</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QProperty</db:methodname>
<db:methodparam>
<db:type>Functor &amp;&amp;</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QProperty(Functor &amp;&amp;f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a property that is tied to the provided binding expression <db:code role="parameter">f</db:code>. The first time the property value is read, the binding is evaluated. Whenever a dependency of the binding changes, the binding will be re-evaluated the next time the value of this property is read.</db:para>
</db:section>
<db:section xml:id="QProperty-7">
<db:title>[explicit default] QProperty::QProperty(const T &amp;<db:emphasis>initialValue</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QProperty</db:methodname>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>initialValue</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QProperty(const T &amp;initialValue) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a property with the provided <db:code role="parameter">initialValue</db:code>.</db:para>
</db:section>
<db:section xml:id="QProperty-8">
<db:title>[explicit default] QProperty::QProperty(T &amp;&amp;<db:emphasis>initialValue</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QProperty</db:methodname>
<db:methodparam>
<db:type>T &amp;&amp;</db:type>
<db:parameter>initialValue</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">QProperty(T &amp;&amp;initialValue) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-Constructs a property with the provided <db:code role="parameter">initialValue</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QProperty">
<db:title>QProperty::~QProperty()</db:title>
<db:destructorsynopsis>
<db:methodname>~QProperty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QProperty()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the property.</db:para>
</db:section>
<db:section xml:id="binding">
<db:title>QPropertyBinding&lt;T&gt; QProperty::binding() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPropertyBinding&lt;T&gt;</db:type>
<db:methodname>binding</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPropertyBinding&lt;T&gt; binding() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the binding expression that is associated with this property. A default constructed QPropertyBinding&lt;T&gt; will be returned if no such association exists.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qproperty.xml#setBinding">setBinding</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="onValueChanged">
<db:title>QPropertyChangeHandler&lt;Functor&gt; QProperty::onValueChanged(Functor <db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPropertyChangeHandler&lt;Functor&gt;</db:type>
<db:methodname>onValueChanged</db:methodname>
<db:methodparam>
<db:type>Functor</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPropertyChangeHandler&lt;Functor&gt; onValueChanged(Functor f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers the given functor <db:code role="parameter">f</db:code> as a callback that shall be called whenever the value of the property changes.</db:para>
<db:para>The callback <db:code role="parameter">f</db:code> is expected to be a type that has a plain call operator () without any parameters. This means that you can provide a C++ lambda expression, an std::function or even a custom struct with a call operator.</db:para>
<db:para>The returned property change handler object keeps track of the registration. When it goes out of scope, the callback is de-registered.</db:para>
</db:section>
<db:section xml:id="setBinding">
<db:title>QPropertyBinding&lt;T&gt; QProperty::setBinding(const QPropertyBinding&lt;T&gt; &amp;<db:emphasis>newBinding</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPropertyBinding&lt;T&gt;</db:type>
<db:methodname>setBinding</db:methodname>
<db:methodparam>
<db:type>const QPropertyBinding&lt;T&gt; &amp;</db:type>
<db:parameter>newBinding</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPropertyBinding&lt;T&gt; setBinding(const QPropertyBinding&lt;T&gt; &amp;newBinding)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Associates the value of this property with the provided <db:code role="parameter">newBinding</db:code> expression and returns the previously associated binding. The first time the property value is read, the binding is evaluated. Whenever a dependency of the binding changes, the binding will be re-evaluated the next time the value of this property is read.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qproperty.xml#binding">binding</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBinding-1">
<db:title>bool QProperty::setBinding(const QUntypedPropertyBinding &amp;<db:emphasis>newBinding</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setBinding</db:methodname>
<db:methodparam>
<db:type>const QUntypedPropertyBinding &amp;</db:type>
<db:parameter>newBinding</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setBinding(const QUntypedPropertyBinding &amp;newBinding)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Associates the value of this property with the provided <db:code role="parameter">newBinding</db:code> expression. The first time the property value is read, the binding is evaluated. Whenever a dependency of the binding changes, the binding will be re-evaluated the next time the value of this property is read.</db:para>
<db:para>Returns true if the type of this property is the same as the type the binding function returns; false otherwise.</db:para>
</db:section>
<db:section xml:id="setBinding-2">
<db:title>QPropertyBinding&lt;T&gt; QProperty::setBinding(Functor <db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPropertyBinding&lt;T&gt;</db:type>
<db:methodname>setBinding</db:methodname>
<db:methodparam>
<db:type>Functor</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QPropertyBinding&lt;T&gt; setBinding(Functor f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Associates the value of this property with the provided functor <db:code role="parameter">f</db:code> and returns the previously associated binding. The first time the property value is read, the binding is evaluated by invoking the call operator () of <db:code role="parameter">f</db:code>. Whenever a dependency of the binding changes, the binding will be re-evaluated the next time the value of this property is read.</db:para>
</db:section>
<db:section xml:id="subscribe">
<db:title>QPropertyChangeHandler&lt;Functor&gt; QProperty::subscribe(Functor <db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPropertyChangeHandler&lt;Functor&gt;</db:type>
<db:methodname>subscribe</db:methodname>
<db:methodparam>
<db:type>Functor</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPropertyChangeHandler&lt;Functor&gt; subscribe(Functor f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Subscribes the given functor <db:code role="parameter">f</db:code> as a callback that is called immediately and whenever the value of the property changes in the future.</db:para>
<db:para>The callback <db:code role="parameter">f</db:code> is expected to be a type that has a plain call operator () without any parameters. This means that you can provide a C++ lambda expression, an std::function or even a custom struct with a call operator.</db:para>
<db:para>The returned property change handler object keeps track of the subscription. When it goes out of scope, the callback is unsubscribed.</db:para>
</db:section>
<db:section xml:id="takeBinding">
<db:title>QPropertyBinding&lt;T&gt; QProperty::takeBinding()</db:title>
<db:methodsynopsis>
<db:type>QPropertyBinding&lt;T&gt;</db:type>
<db:methodname>takeBinding</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPropertyBinding&lt;T&gt; takeBinding()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disassociates the binding expression from this property and returns it. After calling this function, the value of the property will only change if you assign a new value to it, or when a new binding is set.</db:para>
</db:section>
<db:section xml:id="value">
<db:title>QProperty::parameter_type QProperty::value() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QProperty::parameter_type</db:type>
<db:methodname>value</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QProperty::parameter_type value() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the property. This may evaluate a binding expression that is tied to this property, before returning the value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qproperty.xml#setValue">setValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-4">
<db:title>[default] QProperty&lt;T&gt; &amp;QProperty::operator=(const QPropertyBinding&lt;T&gt; &amp;<db:emphasis>newBinding</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QProperty&lt;T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QPropertyBinding&lt;T&gt; &amp;</db:type>
<db:parameter>newBinding</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QProperty&lt;T&gt; &amp; operator=(const QPropertyBinding&lt;T&gt; &amp;newBinding) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Associates the value of this property with the provided <db:code role="parameter">newBinding</db:code> expression and returns a reference to this property. The first time the property value is read, the binding is evaluated. Whenever a dependency of the binding changes, the binding will be re-evaluated the next time the value of this property is read.</db:para>
</db:section>
</db:section>
</db:article>
