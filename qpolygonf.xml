<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QPolygonF Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpolygonf.xml">QPolygonF</db:link> class provides a vector of points using floating point precision.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPolygonF</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qvector.xml" xlink:role="class">QVector</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPolygonF is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qpolygonf.xml">QPolygonF</db:link> is a <db:link xlink:href="qvector.xml">QVector</db:link>&lt;<db:link xlink:href="qpointf.xml">QPointF</db:link>&gt;. The easiest way to add points to a <db:link xlink:href="qpolygonf.xml">QPolygonF</db:link> is to use its streaming operator, as illustrated below:</db:para>
<db:programlisting language="cpp">        QPolygonF polygon;
        polygon &lt;&lt; QPointF(10.4, 20.5) &lt;&lt; QPointF(20.2, 30.2);
</db:programlisting>
<db:para>In addition to the functions provided by <db:link xlink:href="qvector.xml">QVector</db:link>, <db:link xlink:href="qpolygonf.xml">QPolygonF</db:link> provides the <db:link xlink:href="qpolygonf.xml#boundingRect">boundingRect</db:link>() and <db:link xlink:href="qpolygonf.xml#translate">translate</db:link>() functions for geometry operations. Use the <db:link xlink:href="qmatrix.xml#map">QMatrix::map</db:link>() function for more general transformations of QPolygonFs.</db:para>
<db:para><db:link xlink:href="qpolygonf.xml">QPolygonF</db:link> also provides the <db:link xlink:href="qpolygonf.xml#isClosed">isClosed</db:link>() function to determine whether a polygon's start and end points are the same, and the <db:link xlink:href="qpolygonf.xml#toPolygon">toPolygon</db:link>() function returning an integer precision copy of this polygon.</db:para>
<db:para>The <db:link xlink:href="qpolygonf.xml">QPolygonF</db:link> class is <db:link xlink:href="implicit-sharing.xml">implicitly shared</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector.xml">QVector</db:link></db:member>
<db:member><db:link xlink:href="qpolygon.xml">QPolygon</db:link></db:member>
<db:member><db:link xlink:href="qlinef.xml">QLineF</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPolygonF">
<db:title>QPolygonF::QPolygonF()</db:title>
<db:para>Constructs a polygon with no points.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QVector::isEmpty()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPolygonF-1">
<db:title>QPolygonF::QPolygonF(const QPolygon &amp;<db:emphasis>polygon</db:emphasis>)</db:title>
<db:para>Constructs a float based polygon from the specified integer based <db:code role="parameter">polygon</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolygonf.xml#toPolygon">toPolygon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPolygonF-3">
<db:title>QPolygonF::QPolygonF(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:para>Constructs a closed polygon from the specified <db:code role="parameter">rectangle</db:code>.</db:para>
<db:para>The polygon contains the four vertices of the rectangle in clockwise order starting and ending with the top-left vertex.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolygonf.xml#isClosed">isClosed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPolygonF-4">
<db:title>QPolygonF::QPolygonF(const QVector&lt;QPointF&gt; &amp;<db:emphasis>points</db:emphasis>)</db:title>
<db:para>Constructs a polygon containing the specified <db:code role="parameter">points</db:code>.</db:para>
</db:section>
<db:section xml:id="QPolygonF-5">
<db:title>[explicit] QPolygonF::QPolygonF(int <db:emphasis>size</db:emphasis>)</db:title>
<db:para>Constructs a polygon of the given <db:code role="parameter">size</db:code>. Creates an empty polygon if <db:code role="parameter">size</db:code> == 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QVector::isEmpty()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPolygonF-2">
<db:title>QPolygonF::QPolygonF(const QPolygonF &amp;<db:emphasis>polygon</db:emphasis>)</db:title>
<db:para>Constructs a copy of the given <db:code role="parameter">polygon</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QPolygonF">
<db:title>[noexcept] QPolygonF::~QPolygonF()</db:title>
<db:para>Destroys the polygon.</db:para>
</db:section>
<db:section xml:id="boundingRect">
<db:title>QRectF QPolygonF::boundingRect() const</db:title>
<db:para>Returns the bounding rectangle of the polygon, or <db:link xlink:href="qrectf.xml">QRectF</db:link>(0,0,0,0) if the polygon is empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QVector::isEmpty()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="containsPoint">
<db:title>[since 4.3] bool QPolygonF::containsPoint(const QPointF &amp;<db:emphasis>point</db:emphasis>, Qt::FillRule <db:emphasis>fillRule</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the given <db:code role="parameter">point</db:code> is inside the polygon according to the specified <db:code role="parameter">fillRule</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="intersected">
<db:title>[since 4.3] QPolygonF QPolygonF::intersected(const QPolygonF &amp;<db:emphasis>r</db:emphasis>) const</db:title>
<db:para>Returns a polygon which is the intersection of this polygon and <db:code role="parameter">r</db:code>.</db:para>
<db:para>Set operations on polygons will treat the polygons as areas. Non-closed polygons will be treated as implicitly closed.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="isClosed">
<db:title>bool QPolygonF::isClosed() const</db:title>
<db:para>Returns <db:code>true</db:code> if the polygon is closed; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>A polygon is said to be closed if its start point and end point are equal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QVector::first()</db:link></db:member>
<db:member><db:link xlink:href="">QVector::last()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="subtracted">
<db:title>[since 4.3] QPolygonF QPolygonF::subtracted(const QPolygonF &amp;<db:emphasis>r</db:emphasis>) const</db:title>
<db:para>Returns a polygon which is <db:code role="parameter">r</db:code> subtracted from this polygon.</db:para>
<db:para>Set operations on polygons will treat the polygons as areas. Non-closed polygons will be treated as implicitly closed.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>[since 4.8] void QPolygonF::swap(QPolygonF &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps polygon <db:code role="parameter">other</db:code> with this polygon. This operation is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
</db:section>
<db:section xml:id="toPolygon">
<db:title>QPolygon QPolygonF::toPolygon() const</db:title>
<db:para>Creates and returns a <db:link xlink:href="qpolygon.xml">QPolygon</db:link> by converting each <db:link xlink:href="qpointf.xml">QPointF</db:link> to a <db:link xlink:href="qpoint.xml">QPoint</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointf.xml#toPoint">QPointF::toPoint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translate">
<db:title>void QPolygonF::translate(const QPointF &amp;<db:emphasis>offset</db:emphasis>)</db:title>
<db:para>Translate all points in the polygon by the given <db:code role="parameter">offset</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolygonf.xml#translated">translated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translate-1">
<db:title>void QPolygonF::translate(qreal <db:emphasis>dx</db:emphasis>, qreal <db:emphasis>dy</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Translates all points in the polygon by (<db:code role="parameter">dx</db:code>, <db:code role="parameter">dy</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolygonf.xml#translated">translated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translated">
<db:title>[since 4.6] QPolygonF QPolygonF::translated(const QPointF &amp;<db:emphasis>offset</db:emphasis>) const</db:title>
<db:para>Returns a copy of the polygon that is translated by the given <db:code role="parameter">offset</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolygonf.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translated-1">
<db:title>[since 4.6] QPolygonF QPolygonF::translated(qreal <db:emphasis>dx</db:emphasis>, qreal <db:emphasis>dy</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a copy of the polygon that is translated by (<db:code role="parameter">dx</db:code>, <db:code role="parameter">dy</db:code>).</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolygonf.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="united">
<db:title>[since 4.3] QPolygonF QPolygonF::united(const QPolygonF &amp;<db:emphasis>r</db:emphasis>) const</db:title>
<db:para>Returns a polygon which is the union of this polygon and <db:code role="parameter">r</db:code>.</db:para>
<db:para>Set operations on polygons will treat the polygons as areas. Non-closed polygons will be treated as implicitly closed.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolygonf.xml#intersected">intersected</db:link>()</db:member>
<db:member><db:link xlink:href="qpolygonf.xml#subtracted">subtracted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QPolygonF::operator QVariant() const</db:title>
<db:para>Returns the polygon as a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt-16">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QPolygonF &amp;<db:emphasis>polygon</db:emphasis>)</db:title>
<db:para>Writes the given <db:code role="parameter">polygon</db:code> to the given <db:code role="parameter">stream</db:code>, and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-16">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QPolygonF &amp;<db:emphasis>polygon</db:emphasis>)</db:title>
<db:para>Reads a polygon from the given <db:code role="parameter">stream</db:code> into the given <db:code role="parameter">polygon</db:code>, and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
