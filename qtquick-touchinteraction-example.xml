<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Examples - Touch Interaction</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A collection of QML Touch Interaction examples.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-touchinteraction-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Touch Interaction</db:emphasis> is a collection of small QML examples relating to touch interaction methods. For more information, visit <db:link xlink:href="qtquick-input-topic.xml">Important Concepts In Qt Quick - User Input</db:link>.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="multipoint-flames-example">
<db:title>Multipoint Flames Example</db:title>
<db:para><db:emphasis>Multipoint Flames</db:emphasis> demonstrates distinguishing different fingers in a <db:link xlink:href="qml-qtquick-multipointtoucharea.xml">MultiPointTouchArea</db:link>, by assigning a different colored flame to each touch point.</db:para>
<db:para>The MultipointTouchArea sets up multiple touch points:</db:para>
<db:programlisting language="qml">    MultiPointTouchArea {
        anchors.fill: parent
        minimumTouchPoints: 1
        maximumTouchPoints: 5
        touchPoints: [
            TouchPoint { id: touch1 },
            TouchPoint { id: touch2 },
            TouchPoint { id: touch11 },
            TouchPoint { id: touch21 },
            TouchPoint { id: touch31 }
        ]
    }
</db:programlisting>
<db:para>The flames are then simply bound to the coordinates of the touch point, and whether it is currently pressed, as follows:</db:para>
<db:programlisting language="qml">    ParticleFlame {
        color: &quot;red&quot;
        emitterX: touch1.x
        emitterY: touch1.y
        emitting: touch1.pressed
    }
</db:programlisting>
</db:section>
<db:section xml:id="bear-whack-example">
<db:title>Bear-Whack Example</db:title>
<db:para><db:emphasis>Bear-Whack</db:emphasis> demonstrates using <db:link xlink:href="qml-qtquick-multipointtoucharea.xml">MultiPointTouchArea</db:link> to add multiple finger support to a simple game. The interaction with the game is done through a <db:link xlink:href="qml-qtquick-particles-spritegoal.xml">SpriteGoal</db:link> that follows the <db:link xlink:href="qml-qtquick-touchpoint.xml">TouchPoint</db:link>. The TouchPoints added to the <db:link xlink:href="qml-qtquick-multipointtoucharea.xml">MultiPointTouchArea</db:link> are a component with the relevant logic embedded into it:</db:para>
<db:programlisting language="qml">TouchPoint {
    id: container
    property ParticleSystem system
    onPressedChanged: {
        if (pressed) {
            timer.restart();
            child.enabled = true;
            system.explode(x,y);
        }
    }
    property QtObject obj: Timer {
        id: timer
        interval: 100
        running: false
        repeat: false
        onTriggered: container.child.enabled = false
    }
    property Item child: SpriteGoal {
        enabled: false
        x: container.area.x - 16
        y: container.area.y - 16
        width: container.area.width + 32
        height: container.area.height + 32 //+32 so it doesn't have to hit the exact center
        system: container.system
        parent: container.system
        goalState: &quot;falling&quot;
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="flick-resize-example">
<db:title>Flick Resize Example</db:title>
<db:para><db:emphasis>Flick Resize</db:emphasis> uses a <db:link xlink:href="qml-qtquick-pincharea.xml">PinchArea</db:link> to implement a <db:emphasis>pinch-to-resize</db:emphasis> behavior. This is easily achieved by listening to the <db:link xlink:href="qml-qtquick-pincharea.xml">PinchArea</db:link> signals and responding to user input.</db:para>
<db:programlisting language="qml">onPinchStarted: {
    initialWidth = flick.contentWidth
    initialHeight = flick.contentHeight
}

onPinchUpdated: (pinch)=&amp;gt; {
    // adjust content pos due to drag
    flick.contentX += pinch.previousCenter.x - pinch.center.x
    flick.contentY += pinch.previousCenter.y - pinch.center.y

    // resize content
    flick.resizeContent(initialWidth * pinch.scale, initialHeight * pinch.scale, pinch.center)
}

onPinchFinished: {
    // Move its content within bounds.
    flick.returnToBounds()
}
</db:programlisting>
</db:section>
<db:section xml:id="flickable-example">
<db:title>Flickable Example</db:title>
<db:para><db:emphasis>Flickable</db:emphasis> is a simple example demonstrating the <db:link xlink:href="qml-qtquick-flickable.xml">Flickable</db:link> type.</db:para>
<db:programlisting language="qml">Rectangle {
width: 320
height: 480
Flickable {
    anchors.fill: parent
    contentWidth: 1200
    contentHeight: 1200
    Rectangle {
        width: 1000
        height: 1000
</db:programlisting>
</db:section>
<db:section xml:id="corkboards-example">
<db:title>Corkboards Example</db:title>
<db:para><db:emphasis>Corkboards</db:emphasis> shows another use for <db:link xlink:href="qml-qtquick-flickable.xml">Flickable</db:link>, with QML types within the flickable object that respond to mouse and keyboard interaction. This behavior does not require special code as the Qt Quick types already cooperate with the Flickable type for accepting touch events.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/touchinteraction?h=6.1">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
