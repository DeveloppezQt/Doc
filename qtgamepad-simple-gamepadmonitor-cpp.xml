<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Gamepad Simple Example</db:title>
<db:productname>QtGamepad</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Gamepad Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A simple example demonstrating the APIs in use.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Gamepad module
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;gamepadmonitor.h&quot;
#include &lt;QtGamepad/QGamepad&gt;

#include &lt;QDebug&gt;

GamepadMonitor::GamepadMonitor(QObject *parent)
    : QObject(parent)
    , m_gamepad(0)
{
    auto gamepads = QGamepadManager::instance()-&gt;connectedGamepads();
    if (gamepads.isEmpty()) {
        return;
    }

    m_gamepad = new QGamepad(*gamepads.begin(), this);
    connect(m_gamepad, &amp;QGamepad::axisLeftXChanged, this, [](double value){
        qDebug() &lt;&lt; &quot;Left X&quot; &lt;&lt; value;
    });
    connect(m_gamepad, &amp;QGamepad::axisLeftYChanged, this, [](double value){
        qDebug() &lt;&lt; &quot;Left Y&quot; &lt;&lt; value;
    });
    connect(m_gamepad, &amp;QGamepad::axisRightXChanged, this, [](double value){
        qDebug() &lt;&lt; &quot;Right X&quot; &lt;&lt; value;
    });
    connect(m_gamepad, &amp;QGamepad::axisRightYChanged, this, [](double value){
        qDebug() &lt;&lt; &quot;Right Y&quot; &lt;&lt; value;
    });
    connect(m_gamepad, &amp;QGamepad::buttonAChanged, this, [](bool pressed){
        qDebug() &lt;&lt; &quot;Button A&quot; &lt;&lt; pressed;
    });
    connect(m_gamepad, &amp;QGamepad::buttonBChanged, this, [](bool pressed){
        qDebug() &lt;&lt; &quot;Button B&quot; &lt;&lt; pressed;
    });
    connect(m_gamepad, &amp;QGamepad::buttonXChanged, this, [](bool pressed){
        qDebug() &lt;&lt; &quot;Button X&quot; &lt;&lt; pressed;
    });
    connect(m_gamepad, &amp;QGamepad::buttonYChanged, this, [](bool pressed){
        qDebug() &lt;&lt; &quot;Button Y&quot; &lt;&lt; pressed;
    });
    connect(m_gamepad, &amp;QGamepad::buttonL1Changed, this, [](bool pressed){
        qDebug() &lt;&lt; &quot;Button L1&quot; &lt;&lt; pressed;
    });
    connect(m_gamepad, &amp;QGamepad::buttonR1Changed, this, [](bool pressed){
        qDebug() &lt;&lt; &quot;Button R1&quot; &lt;&lt; pressed;
    });
    connect(m_gamepad, &amp;QGamepad::buttonL2Changed, this, [](double value){
        qDebug() &lt;&lt; &quot;Button L2: &quot; &lt;&lt; value;
    });
    connect(m_gamepad, &amp;QGamepad::buttonR2Changed, this, [](double value){
        qDebug() &lt;&lt; &quot;Button R2: &quot; &lt;&lt; value;
    });
    connect(m_gamepad, &amp;QGamepad::buttonSelectChanged, this, [](bool pressed){
        qDebug() &lt;&lt; &quot;Button Select&quot; &lt;&lt; pressed;
    });
    connect(m_gamepad, &amp;QGamepad::buttonStartChanged, this, [](bool pressed){
        qDebug() &lt;&lt; &quot;Button Start&quot; &lt;&lt; pressed;
    });
    connect(m_gamepad, &amp;QGamepad::buttonGuideChanged, this, [](bool pressed){
        qDebug() &lt;&lt; &quot;Button Guide&quot; &lt;&lt; pressed;
    });
}

GamepadMonitor::~GamepadMonitor()
{
    delete m_gamepad;
}

</db:programlisting>
</db:article>
