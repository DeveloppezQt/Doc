<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextBlockGroup Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtextblockgroup.xml">QTextBlockGroup</db:link> class provides a container for text blocks within a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextBlockGroup</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qtextobject.xml" xlink:role="class">QTextObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qtextlist.xml" xlink:role="class">QTextList</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextBlockGroup is part of <db:simplelist><db:member><db:link xlink:href="richtext-processing.xml">Rich Text Processing APIs</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Block groups can be used to organize blocks of text within a document. They maintain an up-to-date list of the text blocks that belong to them, even when text blocks are being edited.</db:para>
<db:para>Each group has a parent document which is specified when the group is constructed.</db:para>
<db:para>Text blocks can be inserted into a group with <db:link xlink:href="qtextblockgroup.xml#blockInserted">blockInserted</db:link>(), and removed with <db:link xlink:href="qtextblockgroup.xml#blockRemoved">blockRemoved</db:link>(). If a block's format is changed, <db:link xlink:href="qtextblockgroup.xml#blockFormatChanged">blockFormatChanged</db:link>() is called.</db:para>
<db:para>The list of blocks in the group is returned by <db:link xlink:href="qtextblockgroup.xml#blockList">blockList</db:link>(). Note that the blocks in the list are not necessarily adjacent elements in the document; for example, the top-level items in a multi-level list will be separated by the items in lower levels of the list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml">QTextBlock</db:link></db:member>
<db:member><db:link xlink:href="qtextdocument.xml">QTextDocument</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextBlockGroup">
<db:title>[explicit protected] QTextBlockGroup::QTextBlockGroup(QTextDocument *<db:emphasis>document</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextBlockGroup</db:methodname>
<db:methodparam>
<db:type>QTextDocument *</db:type>
<db:parameter>document</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextBlockGroup(QTextDocument *document)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new block group for the given <db:code role="parameter">document</db:code>.</db:para>
<db:warning>
<db:para>This function should only be called from <db:link xlink:href="qtextdocument.xml#createObject">QTextDocument::createObject</db:link>().</db:para>
</db:warning>
</db:section>
<db:section xml:id="dtor.QTextBlockGroup">
<db:title>[virtual protected] QTextBlockGroup::~QTextBlockGroup()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QTextBlockGroup</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QTextBlockGroup()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this block group; the blocks are not deleted, they simply don't belong to this block anymore.</db:para>
</db:section>
<db:section xml:id="blockFormatChanged">
<db:title>[virtual protected] void QTextBlockGroup::blockFormatChanged(const QTextBlock &amp;<db:emphasis>block</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>blockFormatChanged</db:methodname>
<db:methodparam>
<db:type>const QTextBlock &amp;</db:type>
<db:parameter>block</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void blockFormatChanged(const QTextBlock &amp;block)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called whenever the specified <db:code role="parameter">block</db:code> of text is changed. The text block is a member of this group.</db:para>
<db:para>The base class implementation does nothing.</db:para>
</db:section>
<db:section xml:id="blockInserted">
<db:title>[virtual protected] void QTextBlockGroup::blockInserted(const QTextBlock &amp;<db:emphasis>block</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>blockInserted</db:methodname>
<db:methodparam>
<db:type>const QTextBlock &amp;</db:type>
<db:parameter>block</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void blockInserted(const QTextBlock &amp;block)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends the given <db:code role="parameter">block</db:code> to the end of the group.</db:para>
<db:warning>
<db:para>If you reimplement this function you must call the base class implementation.</db:para>
</db:warning>
</db:section>
<db:section xml:id="blockList">
<db:title>[protected] QList&lt;QTextBlock&gt; QTextBlockGroup::blockList() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QTextBlock&gt;</db:type>
<db:methodname>blockList</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QTextBlock&gt; blockList() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a (possibly empty) list of all the blocks that are part of the block group.</db:para>
</db:section>
<db:section xml:id="blockRemoved">
<db:title>[virtual protected] void QTextBlockGroup::blockRemoved(const QTextBlock &amp;<db:emphasis>block</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>blockRemoved</db:methodname>
<db:methodparam>
<db:type>const QTextBlock &amp;</db:type>
<db:parameter>block</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void blockRemoved(const QTextBlock &amp;block)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the given <db:code role="parameter">block</db:code> from the group; the block itself is not deleted, it simply isn't a member of this group anymore.</db:para>
</db:section>
</db:section>
</db:article>
