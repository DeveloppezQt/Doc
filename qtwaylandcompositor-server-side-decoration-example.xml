<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Server Side Decoration Compositor</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt Wayland Compositor | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Server Side Decoration Compositor is a simple example that demonstrates server side window decorations on xdg-shell.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/server-side-decoration.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>Server Side Decoration Compositor is a desktop-style Wayland compositor example implementing server-side window decorations.</db:para>
<db:para>For an introduction to the basic principles of creating a <db:link xlink:href="qtwaylandcompositor-index.xml">Qt Wayland Compositor</db:link> with Qt, see the <db:link xlink:href="qtwaylandcompositor-minimal-qml-example.xml">Minimal QML example</db:link>.</db:para>
</db:section>
<db:section xml:id="decorations">
<db:title>Decorations</db:title>
<db:para>The term <db:emphasis>window decorations</db:emphasis> refers to the additional UI that accompanies most windows in the windowing system. Examples of this are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The graphical frame around the window surface, which a user can click and drag to resize the window.</db:para>
</db:listitem>
<db:listitem>
<db:para>The title bar of the window, which might be used to move the window.</db:para>
</db:listitem>
<db:listitem>
<db:para>The system tool buttons for maximizing, minimizing and closing a window.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Traditionally in Wayland, it has been the client's task to render these decorations. At the same time, the position, size and state of the window is the compositor's domain. Some <db:link xlink:href="qtwaylandcompositor-shellextensions.xml">shell extensions</db:link> optionally support <db:emphasis>server-side decorations</db:emphasis>. This enables a compositor to communicate to clients that they should not draw their own window decorations. Instead, the compositor is responsible for drawing the window decorations. This corresponds to how decorations are handled on other windowing systems, such as macOS, Windows and X11. It is worth noting that certain clients may not support this at all. If the system is expected to run such applications, then this should also be taken into account.</db:para>
<db:para>Benefits of server-side decorations:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Clients do not have to reserve space for system UI in their Wayland buffers.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt Quick and OpenGL-based clients do not have to render into a separate FBO and copy the content into their Wayland buffers.</db:para>
</db:listitem>
<db:listitem>
<db:para>Client windows will have a consistent appearance, independent of which UI toolkit is in use.</db:para>
</db:listitem>
<db:listitem>
<db:para>System functionality, such as resizing, closing and changing window state, is centralized in the server instead of being shared between the server and client.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="the-code">
<db:title>The Code</db:title>
<db:para>The example compositor only supports the <db:link xlink:href="qml-qtwayland-compositor-xdgshell-xdgshell.xml">XdgShell</db:link> extension. It initializes the extension in the usual way and adds surfaces to a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> in order to access them later.</db:para>
<db:programlisting language="qml">XdgShell {
    onToplevelCreated: (toplevel, xdgSurface) =&amp;gt; shellSurfaces.append({shellSurface: xdgSurface});
}
XdgDecorationManagerV1 {
    preferredMode: XdgToplevel.ServerSideDecoration
}
</db:programlisting>
<db:para>In addition, the example initializes the <db:link xlink:href="qml-qtwayland-compositor-xdgshell-xdgdecorationmanagerv1.xml">XdgDecorationManagerV1</db:link> extension. This allows it to communicate to the client that it prefers server-side decorations.</db:para>
<db:para>Since the interface is optional, it could be that the client does not support it and will always draw its own decorations. Therefore, the mode is only &quot;preferred&quot; and we need to check the actual mode of the top-level window before we decorate it.</db:para>
<db:programlisting language="qml">Column {
    id: chrome
    width: shellSurfaceItem.implicitWidth
    Rectangle {
        visible: modelData.toplevel.decorationMode === XdgToplevel.ServerSideDecoration
        width: parent.width
        height: 30
        gradient: &quot;HeavyRain&quot;;
        Text {
            text: modelData.toplevel.title
            anchors.centerIn: parent
        }
        Item {
            anchors.right: parent.right
            width: 30
            height: 30
            Text { text: &quot;X&quot;; anchors.centerIn: parent }
            TapHandler {
                onTapped: modelData.toplevel.sendClose()
            }
        }
        DragHandler {
            target: chrome
        }
    }
    ShellSurfaceItem {
        id: shellSurfaceItem
        moveItem: parent
        shellSurface: modelData
        onSurfaceDestroyed: shellSurfaces.remove(index)
    }
}
</db:programlisting>
<db:para>For each window, we create a simple title bar above it. The title bar has a gradient, some text, a <db:link xlink:href="qml-qtquick-draghandler.xml">DragHandler</db:link> which manages its position, and a close button.</db:para>
<db:para>The image shows a client which supports the decoration manager extensions on the upper left-hand side, and the same client with client-side decorations on the lower, right-hand side.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtwayland.git/tree/examples/wayland/server-side-decoration?h=6.5">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
