<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Bluetooth Low Energy Overview</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Qt Bluetooth Low Energy API enables communication between Bluetooth Low Energy devices.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt Bluetooth Low Energy API supports the peripheral/server and central/client roles. It is supported on all major Qt platforms. The only exception is the missing peripheral role support on Windows.</db:para>
<db:section xml:id="what-is-bluetooth-low-energy">
<db:title>What Is Bluetooth Low Energy</db:title>
<db:para>Bluetooth Low Energy, also known as Bluetooth Smart, is a wireless computer network technology, which was officially introduced in 2011. It works on the same 2.4 GHz frequency as ”classic” Bluetooth. The main difference is, as stated by its technology name, low energy consumption. It provides an opportunity for Bluetooth Low Energy devices to operate for months, even years, on coin-cell batteries. The technology was introduced by <db:link xlink:href="https://www.bluetooth.org/en-us/specification/adopted-specifications">Bluetooth v4.0</db:link>. Devices which support this technology are called Bluetooth Smart Ready Devices. The key features of the technology are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Ultra-low peak, average and idle mode power consumption</db:para>
</db:listitem>
<db:listitem>
<db:para>Ability to run for years on standard, coin-cell batteries</db:para>
</db:listitem>
<db:listitem>
<db:para>Low cost</db:para>
</db:listitem>
<db:listitem>
<db:para>Multi-vendor interoperability</db:para>
</db:listitem>
<db:listitem>
<db:para>Enhanced range</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Bluetooth Low Energy uses a client-server architecture. The server (also known as peripheral) offers services such as temperature or heart rate and advertises them. The client (known as central device) connects to the server and reads the values advertised by the server. An example might be an apartment with Bluetooth Smart Ready sensors such as a thermostat, humidity or pressure sensor. Those sensors are peripheral devices advertising the environment values of the apartment. At the same time a mobile phone or computer might connect to those sensors, retrieve their values and present them as part of a larger environment control application to the user.</db:para>
</db:section>
<db:section xml:id="basic-service-structure">
<db:title>Basic Service Structure</db:title>
<db:para>Bluetooth Low Energy is based on two protocols: ATT (Attribute Protocol) and GATT (Generic Attribute Profile). They specify the communication layers used by every Bluetooth Smart Ready device.</db:para>
<db:section xml:id="att-protocol">
<db:title>ATT Protocol</db:title>
<db:para>The basic building block of ATT is an <db:emphasis>attribute</db:emphasis>. Each attribute consists of three elements:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>a value - the payload or desirable piece of information</db:para>
</db:listitem>
<db:listitem>
<db:para>a UUID - the type of attribute (used by GATT)</db:para>
</db:listitem>
<db:listitem>
<db:para>a 16-bit handle - a unique identifier for the attribute</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The server stores the attributes and the client uses the ATT protocol to read and write values on the server.</db:para>
</db:section>
<db:section xml:id="gatt-profile">
<db:title>GATT Profile</db:title>
<db:para>GATT defines grouping for a set of attributes by applying a meaning to predefined UUIDs. The table below shows an example service exposing a heart rate on a particular day. The actual values are stored inside the two characteristics:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Handle</db:para>
</db:th>
<db:th>
<db:para>UUID</db:para>
</db:th>
<db:th>
<db:para>Value</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>0x0001</db:para>
</db:td>
<db:td>
<db:para>0x2800</db:para>
</db:td>
<db:td>
<db:para>UUID 0x180D</db:para>
</db:td>
<db:td>
<db:para>Begin Heart Rate service</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>0x0002</db:para>
</db:td>
<db:td>
<db:para>0x2803</db:para>
</db:td>
<db:td>
<db:para>UUID 0x2A37, Value handle: 0x0003</db:para>
</db:td>
<db:td>
<db:para>Characteristic of type <db:emphasis>Heart Rate Measurement (HRM)</db:emphasis></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>0x0003</db:para>
</db:td>
<db:td>
<db:para>0x2A37</db:para>
</db:td>
<db:td>
<db:para>65 bpm</db:para>
</db:td>
<db:td>
<db:para>Heart rate value</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>0x0004</db:para>
</db:td>
<db:td>
<db:para>0x2803</db:para>
</db:td>
<db:td>
<db:para>UUID 0x2A08, Value handle: 0x0005</db:para>
</db:td>
<db:td>
<db:para>Characteristic of type Date Time</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>0x0005</db:para>
</db:td>
<db:td>
<db:para>0x2A08</db:para>
</db:td>
<db:td>
<db:para>18/08/2014 11:00</db:para>
</db:td>
<db:td>
<db:para>Date and Time of the measurement</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>0x0006</db:para>
</db:td>
<db:td>
<db:para>0x2800</db:para>
</db:td>
<db:td>
<db:para>UUID xxxxxx</db:para>
</db:td>
<db:td>
<db:para>Begin next service</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>...</db:para>
</db:td>
<db:td>
<db:para>...</db:para>
</db:td>
<db:td>
<db:para>...</db:para>
</db:td>
<db:td>
<db:para>...</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>GATT specifies that the above used UUID <db:code>0x2800</db:code> marks the begin of a service definition. Every attribute following <db:code>0x2800</db:code> is part of the service until the next <db:code>0x2800</db:code> or the end is encountered. In similar ways the well known UUID <db:code>0x2803</db:code> states that a characteristic is to be found and each of the characteristics has a type defining the nature of the value. The example above uses the UUIDs <db:code>0x2A08</db:code> (Date Time) and <db:code>0x2A37</db:code> (Heart Rate Measurement). Each of the above UUIDs is defined by the <db:link xlink:href="https://bluetooth.org">Bluetooth Special Interest Group</db:link>. and can be found in the <db:link xlink:href="https://www.bluetooth.com/specifications/assigned-numbers">GATT specifications</db:link>. While it is advisable to use pre-defined UUIDs where available it is entirely possible to use new and not yet used UUIDs for characteristic and service types.</db:para>
<db:para>In general, each service may consist of one or more characteristics. A characteristic contains data and can be further described by descriptors, which provide additional information or means of manipulating the characteristic. All services, characteristics and descriptors are recognized by their 128-bit UUID. Finally, it is possible to include services inside of services (see picture below).</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/peripheral-structure.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
</db:section>
<db:section xml:id="using-qt-bluetooth-low-energy-api">
<db:title>Using Qt Bluetooth Low Energy API</db:title>
<db:para>This section describes how to use the Bluetooth Low Energy API provided by Qt. On the client side, the API permits creating connections to peripheral devices, discovering their services, as well as reading and writing data stored on the device. On the server side, it allows to set up services, advertise them, and get notified when the client writes characteristics. The example code below is taken from the <db:link xlink:href="qtbluetooth-heartrate-game-example.xml">Heart Rate Game</db:link> and <db:link xlink:href="qtbluetooth-heartrate-server-example.xml">Heart Rate Server</db:link> examples.</db:para>
<db:section xml:id="establishing-a-connection">
<db:title>Establishing a Connection</db:title>
<db:para>To be able to read and write the characteristics of the Bluetooth Low Energy peripheral device, it is necessary to find and connect the device. This requires the peripheral device to advertise its presence and services. We start the device discovery with the help of the <db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link> class. We connect to its <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#deviceDiscovered">QBluetoothDeviceDiscoveryAgent::deviceDiscovered</db:link>() signal and start the search with <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#start">start</db:link>():</db:para>
<db:programlisting language="cpp">m_deviceDiscoveryAgent = new QBluetoothDeviceDiscoveryAgent(this);
m_deviceDiscoveryAgent-&gt;setLowEnergyDiscoveryTimeout(15000);

connect(m_deviceDiscoveryAgent, &amp;QBluetoothDeviceDiscoveryAgent::deviceDiscovered,
        this, &amp;DeviceFinder::addDevice);
connect(m_deviceDiscoveryAgent, &amp;QBluetoothDeviceDiscoveryAgent::errorOccurred,
        this, &amp;DeviceFinder::scanError);

connect(m_deviceDiscoveryAgent, &amp;QBluetoothDeviceDiscoveryAgent::finished,
        this, &amp;DeviceFinder::scanFinished);
connect(m_deviceDiscoveryAgent, &amp;QBluetoothDeviceDiscoveryAgent::canceled,
        this, &amp;DeviceFinder::scanFinished);
m_deviceDiscoveryAgent-&gt;start(QBluetoothDeviceDiscoveryAgent::LowEnergyMethod);
</db:programlisting>
<db:para>Since we are only interested in Low Energy devices we filter the device type within the receiving slot. The device type can be ascertained using the <db:link xlink:href="qbluetoothdeviceinfo.xml#coreConfigurations">QBluetoothDeviceInfo::coreConfigurations</db:link>() flag. The <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#deviceDiscovered">deviceDiscovered</db:link>() signal may be emitted multiple times for the same device as more details are discovered. Here we match these device discoveries so that the user only sees the individual devices:</db:para>
<db:programlisting language="cpp">void DeviceFinder::addDevice(const QBluetoothDeviceInfo &amp;device)
{
    // If device is LowEnergy-device, add it to the list
    if (device.coreConfigurations() &amp; QBluetoothDeviceInfo::LowEnergyCoreConfiguration) {
        auto devInfo = new DeviceInfo(device);
        auto it = std::find_if(m_devices.begin(), m_devices.end(),
                               [devInfo](DeviceInfo *dev) {
                                   return devInfo-&gt;getAddress() == dev-&gt;getAddress();
                               });
        if (it == m_devices.end()) {
            m_devices.append(devInfo);
        } else {
            auto oldDev = *it;
            *it = devInfo;
            delete oldDev;
        }
        setInfo(tr(&quot;Low Energy device found. Scanning more...&quot;));
        setIcon(IconProgress);
    }
    //...
}
</db:programlisting>
<db:para>Once the address of the peripheral device is known we use the <db:link xlink:href="qlowenergycontroller.xml">QLowEnergyController</db:link> class. This class is the entry point for all Bluetooth Low Energy development. The constructor of the class accepts the remote device's <db:link xlink:href="qbluetoothaddress.xml">QBluetoothAddress</db:link>. Finally we set up the customary slots and directly connect to the device using <db:link xlink:href="qlowenergycontroller.xml#connectToDevice">connectToDevice</db:link>():</db:para>
<db:programlisting language="cpp">m_control = QLowEnergyController::createCentral(m_currentDevice-&gt;getDevice(), this);
connect(m_control, &amp;QLowEnergyController::serviceDiscovered,
        this, &amp;DeviceHandler::serviceDiscovered);
connect(m_control, &amp;QLowEnergyController::discoveryFinished,
        this, &amp;DeviceHandler::serviceScanDone);

connect(m_control, &amp;QLowEnergyController::errorOccurred, this,
        [this](QLowEnergyController::Error error) {
            Q_UNUSED(error);
            setError(&quot;Cannot connect to remote device.&quot;);
            setIcon(IconError);
        });
connect(m_control, &amp;QLowEnergyController::connected, this, [this]() {
    setInfo(&quot;Controller connected. Search services...&quot;);
    setIcon(IconProgress);
    m_control-&gt;discoverServices();
});
connect(m_control, &amp;QLowEnergyController::disconnected, this, [this]() {
    setError(&quot;LowEnergy controller disconnected&quot;);
    setIcon(IconError);
});

// Connect
m_control-&gt;connectToDevice();
</db:programlisting>
</db:section>
<db:section xml:id="service-search">
<db:title>Service Search</db:title>
<db:para>The above code snippet shows how the application initiates the service discovery once the connection has been established.</db:para>
<db:para>The <db:code>serviceDiscovered()</db:code> slot below is triggered as a result of the <db:link xlink:href="qlowenergycontroller.xml#serviceDiscovered">QLowEnergyController::serviceDiscovered</db:link>() signal and provides an intermittent progress report. Since we are talking about the heart listener app which monitors HeartRate devices in the vicinity we ignore any service that is not of type <db:link xlink:href="qbluetoothuuid.xml#ServiceClassUuid-enum">QBluetoothUuid::ServiceClassUuid::HeartRate</db:link>.</db:para>
<db:programlisting language="cpp">void DeviceHandler::serviceDiscovered(const QBluetoothUuid &amp;gatt)
{
    if (gatt == QBluetoothUuid(QBluetoothUuid::ServiceClassUuid::HeartRate)) {
        setInfo(&quot;Heart Rate service discovered. Waiting for service scan to be done...&quot;);
        setIcon(IconProgress);
        m_foundHeartRateService = true;
    }
}
</db:programlisting>
<db:para>Eventually the <db:link xlink:href="qlowenergycontroller.xml#discoveryFinished">QLowEnergyController::discoveryFinished</db:link>() signal is emitted to indicate the successful completion of the service discovery. Provided a HeartRate service was found, a <db:link xlink:href="qlowenergyservice.xml">QLowEnergyService</db:link> instance is created to represent the service. The returned service object provides the required signals for update notifications and the discovery of service details is triggered using <db:link xlink:href="qlowenergyservice.xml#discoverDetails">QLowEnergyService::discoverDetails</db:link>():</db:para>
<db:programlisting language="cpp">    // If heartRateService found, create new service
    if (m_foundHeartRateService)
        m_service = m_control-&gt;createServiceObject(QBluetoothUuid(QBluetoothUuid::ServiceClassUuid::HeartRate), this);

    if (m_service) {
        connect(m_service, &amp;QLowEnergyService::stateChanged, this, &amp;DeviceHandler::serviceStateChanged);
        connect(m_service, &amp;QLowEnergyService::characteristicChanged, this, &amp;DeviceHandler::updateHeartRateValue);
        connect(m_service, &amp;QLowEnergyService::descriptorWritten, this, &amp;DeviceHandler::confirmedDescriptorWrite);
        m_service-&gt;discoverDetails();
    } else {
        setError(&quot;Heart Rate Service not found.&quot;);
        setIcon(IconError);
    }
</db:programlisting>
<db:para>During the detail search the service's <db:link xlink:href="qlowenergyservice.xml#state">state</db:link>() transitions from <db:link xlink:href="qlowenergyservice.xml#ServiceState-enum">RemoteService</db:link> to <db:link xlink:href="qlowenergyservice.xml#ServiceState-enum">RemoteServiceDiscovering</db:link> and eventually ends with <db:link xlink:href="qlowenergyservice.xml#ServiceState-enum">RemoteServiceDiscovered</db:link>:</db:para>
<db:programlisting language="cpp">void DeviceHandler::serviceStateChanged(QLowEnergyService::ServiceState s)
{
    switch (s) {
    case QLowEnergyService::RemoteServiceDiscovering:
        setInfo(tr(&quot;Discovering services...&quot;));
        setIcon(IconProgress);
        break;
    case QLowEnergyService::RemoteServiceDiscovered:
    {
        setInfo(tr(&quot;Service discovered.&quot;));
        setIcon(IconBluetooth);

        const QLowEnergyCharacteristic hrChar =
                m_service-&gt;characteristic(QBluetoothUuid(QBluetoothUuid::CharacteristicType::HeartRateMeasurement));
        if (!hrChar.isValid()) {
            setError(&quot;HR Data not found.&quot;);
            setIcon(IconError);
            break;
        }

        m_notificationDesc = hrChar.descriptor(QBluetoothUuid::DescriptorType::ClientCharacteristicConfiguration);
        if (m_notificationDesc.isValid())
            m_service-&gt;writeDescriptor(m_notificationDesc, QByteArray::fromHex(&quot;0100&quot;));

        break;
    }
    default:
        //nothing for now
        break;
    }

    emit aliveChanged();
}
</db:programlisting>
</db:section>
<db:section xml:id="interaction-with-the-peripheral-device">
<db:title>Interaction with the Peripheral Device</db:title>
<db:para>In the code example above, the desired characteristic is of type <db:link xlink:href="qbluetoothuuid.xml#CharacteristicType-enum">HeartRateMeasurement</db:link>. Since the application measures the heart rate changes, it must enable change notifications for the characteristic. Note that not all characteristics provide change notifications. Since the HeartRate characteristic has been standardized it is possible to assume that notifications can be received. Ultimately <db:link xlink:href="qlowenergycharacteristic.xml#properties">QLowEnergyCharacteristic::properties</db:link>() must have the <db:link xlink:href="qlowenergycharacteristic.xml#PropertyType-enum">QLowEnergyCharacteristic::Notify</db:link> flag set and a descriptor of type <db:link xlink:href="qbluetoothuuid.xml#DescriptorType-enum">QBluetoothUuid::DescriptorType::ClientCharacteristicConfiguration</db:link> must exist to confirm the availability of an appropriate notification.</db:para>
<db:para>Finally, we process the value of the HeartRate characteristic, as per Bluetooth Low Energy standard:</db:para>
<db:programlisting language="cpp">void DeviceHandler::updateHeartRateValue(const QLowEnergyCharacteristic &amp;c, const QByteArray &amp;value)
{
    // ignore any other characteristic change -&gt; shouldn't really happen though
    if (c.uuid() != QBluetoothUuid(QBluetoothUuid::CharacteristicType::HeartRateMeasurement))
        return;

    auto data = reinterpret_cast&lt;const quint8 *&gt;(value.constData());
    quint8 flags = *data;

    //Heart Rate
    int hrvalue = 0;
    if (flags &amp; 0x1) // HR 16 bit? otherwise 8 bit
        hrvalue = static_cast&lt;int&gt;(qFromLittleEndian&lt;quint16&gt;(data[1]));
    else
        hrvalue = static_cast&lt;int&gt;(data[1]);

    addMeasurement(hrvalue);
}
</db:programlisting>
<db:para>In general a characteristic value is a series of bytes. The precise interpretation of those bytes depends on the characteristic type and value structure. A significant number has been standardized by the <db:link xlink:href="https://developer.bluetooth.org/gatt/services/Pages/ServicesHome.aspx">Bluetooth SIG</db:link> whereas others may follow a custom protocol. The above code snippet demonstrates how to the read the standardized HeartRate value.</db:para>
</db:section>
<db:section xml:id="advertising-services">
<db:title>Advertising Services</db:title>
<db:para>If we are implementing a GATT server application on a peripheral device, we need to define the services we want to offer to central devices and advertise them:</db:para>
<db:programlisting language="cpp">QLowEnergyAdvertisingData advertisingData;
advertisingData.setDiscoverability(QLowEnergyAdvertisingData::DiscoverabilityGeneral);
advertisingData.setIncludePowerLevel(true);
advertisingData.setLocalName(&quot;HeartRateServer&quot;);
advertisingData.setServices(QList&lt;QBluetoothUuid&gt;() &lt;&lt; QBluetoothUuid::ServiceClassUuid::HeartRate);
bool errorOccurred = false;
const std::unique_ptr&lt;QLowEnergyController&gt; leController(QLowEnergyController::createPeripheral());
auto errorHandler = [&amp;leController, &amp;errorOccurred](QLowEnergyController::Error errorCode) {
        qWarning().noquote().nospace() &lt;&lt; errorCode &lt;&lt; &quot; occurred: &quot;
            &lt;&lt; leController-&gt;errorString();
        if (errorCode != QLowEnergyController::RemoteHostClosedError) {
            qWarning(&quot;Heartrate-server quitting due to the error.&quot;);
            errorOccurred = true;
            QCoreApplication::quit();
        }
};
QObject::connect(leController.get(), &amp;QLowEnergyController::errorOccurred, errorHandler);

std::unique_ptr&lt;QLowEnergyService&gt; service(leController-&gt;addService(serviceData));
leController-&gt;startAdvertising(QLowEnergyAdvertisingParameters(), advertisingData,
                               advertisingData);
if (errorOccurred)
    return -1;
</db:programlisting>
<db:para>Now potential clients can connect to our device, discover the provided service and register themselves to get notified of changes to the characteristic value. This part of the API was already covered by the above sections.</db:para>
</db:section>
<db:section xml:id="implementing-a-service-on-the-peripheral-device">
<db:title>Implementing a Service on the Peripheral Device</db:title>
<db:para>The first step is to define the service, its characteristics and descriptors. This is achieved using the <db:link xlink:href="qlowenergyservicedata.xml">QLowEnergyServiceData</db:link>, <db:link xlink:href="qlowenergycharacteristicdata.xml">QLowEnergyCharacteristicData</db:link> and <db:link xlink:href="qlowenergydescriptordata.xml">QLowEnergyDescriptorData</db:link> classes. These classes act as containers or building blocks for the essential information that comprises the to-be-defined Bluetooth Low Energy service. The code snippet below defines a simple HeartRate service which publishes the measured beats per minute. An example where such a service could be used is a wrist watch.</db:para>
<db:programlisting language="cpp">QLowEnergyCharacteristicData charData;
charData.setUuid(QBluetoothUuid::CharacteristicType::HeartRateMeasurement);
charData.setValue(QByteArray(2, 0));
charData.setProperties(QLowEnergyCharacteristic::Notify);
const QLowEnergyDescriptorData clientConfig(QBluetoothUuid::DescriptorType::ClientCharacteristicConfiguration,
                                            QByteArray(2, 0));
charData.addDescriptor(clientConfig);

QLowEnergyServiceData serviceData;
serviceData.setType(QLowEnergyServiceData::ServiceTypePrimary);
serviceData.setUuid(QBluetoothUuid::ServiceClassUuid::HeartRate);
serviceData.addCharacteristic(charData);
</db:programlisting>
<db:para>The resulting <db:code>serviceData</db:code> object can be published as described in the <db:link xlink:href="qtbluetooth-le-overview.xml#advertising-services">Advertising Services</db:link> section above. Despite the partial information overlap between the information wrapped by <db:link xlink:href="qlowenergyservicedata.xml">QLowEnergyServiceData</db:link> and <db:link xlink:href="qlowenergyadvertisingdata.xml">QLowEnergyAdvertisingData</db:link> the two classes serve two very different tasks. The advertising data is published to nearby devices and often limited in scope due to its size restriction of 29 bytes. Therefore they are not always 100% complete. By comparison the service data contained inside of <db:link xlink:href="qlowenergyservicedata.xml">QLowEnergyServiceData</db:link> provides the complete set of service data and only becomes visible to the connecting client when a connection with an active service discovery has been performed.</db:para>
<db:para>The next section demonstrates how the service can update the heart rate value. Depending on the nature of the service it may have to comply with the official service definition as defined on <db:link xlink:href="https://www.bluetooth.org">https://www.bluetooth.org</db:link>. Other services may be completely custom. The heart rate service was adopted and its specification can be found under <db:link xlink:href="https://www.bluetooth.com/specifications/adopted-specifications">https://www.bluetooth.com/specifications/adopted-specifications</db:link>.</db:para>
<db:programlisting language="cpp">QTimer heartbeatTimer;
quint8 currentHeartRate = 60;
enum ValueChange { ValueUp, ValueDown } valueChange = ValueUp;
const auto heartbeatProvider = [&amp;service, &amp;currentHeartRate, &amp;valueChange]() {
    QByteArray value;
    value.append(char(0)); // Flags that specify the format of the value.
    value.append(char(currentHeartRate)); // Actual value.
    QLowEnergyCharacteristic characteristic
            = service-&gt;characteristic(QBluetoothUuid::CharacteristicType::HeartRateMeasurement);
    Q_ASSERT(characteristic.isValid());
    service-&gt;writeCharacteristic(characteristic, value); // Potentially causes notification.
    if (currentHeartRate == 60)
        valueChange = ValueUp;
    else if (currentHeartRate == 100)
        valueChange = ValueDown;
    if (valueChange == ValueUp)
        ++currentHeartRate;
    else
        --currentHeartRate;
};
QObject::connect(&amp;heartbeatTimer, &amp;QTimer::timeout, heartbeatProvider);
heartbeatTimer.start(1000);
</db:programlisting>
<db:para>In general characteristic and descriptor value updates on the peripheral device use the same methods as connecting Bluetooth Low Energy devices.</db:para>
<db:note>
<db:para>To use <db:link xlink:href="qtbluetooth-index.xml">Qt Bluetooth</db:link> (in both central and peripheral roles) on iOS, you have to provide an Info.plist file containing the usage description. According to the CoreBluetooth's documentation: <db:emphasis>Your app will crash if its Info.plist doesn’t include usage description keys for the types of data it needs to access. To access Core Bluetooth APIs on apps linked on or after iOS 13, include the NSBluetoothAlwaysUsageDescription key. In iOS 12 and earlier, include NSBluetoothPeripheralUsageDescription to access Bluetooth peripheral data.</db:emphasis></db:para>
</db:note>
</db:section>
</db:section>
</db:article>
