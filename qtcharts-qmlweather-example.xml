<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qml Weather</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This is a basic demonstration showing how to use the different chart types by using qml.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlweather.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>By default the application uses static test data to mimic a weather forecast. You can also obtain an application id from http://www.worldweatheronline.com/ to get access to weather API provided by World Weather Online. You can then give your application id as a parameter to the Qml Weather executable to make it use live data.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">bin\qmlweather.exe 1234567890abcdef123456
</db:programlisting>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="using-charts-in-qt-quick-applications">
<db:title>Using Charts in Qt Quick Applications</db:title>
<db:para>The example application uses a <db:link xlink:href="qml-qtcharts-chartview.xml">ChartView</db:link> and a some series to visualize weather data:</db:para>
<db:programlisting language="qml">ChartView {
    id: chartView
    title: &quot;Weather forecast&quot;
    BarCategoryAxis {
        id: barCategoriesAxis
        titleText: &quot;Date&quot;
    }

    ValueAxis{
        id: valueAxisY2
        min: 0
        max: 10
        titleText: &quot;Rainfall [mm]&quot;
    }

    ValueAxis {
        id: valueAxisX
        // Hide the value axis; it is only used to map the line series to bar categories axis
        visible: false
        min: 0
        max: 5
    }

    ValueAxis{
        id: valueAxisY
        min: 0
        max: 15
        titleText: &quot;Temperature [&amp;amp;deg;C]&quot;
    }

    LineSeries {
        id: maxTempSeries
        axisX: valueAxisX
        axisY: valueAxisY
        name: &quot;Max. temperature&quot;
    }

    LineSeries {
        id: minTempSeries
        axisX: valueAxisX
        axisY: valueAxisY
        name: &quot;Min. temperature&quot;
    }

    BarSeries {
        id: myBarSeries
        axisX: barCategoriesAxis
        axisYRight: valueAxisY2
        BarSet {
            id: rainfallSet
            label: &quot;Rainfall&quot;
        }
    }
</db:programlisting>
<db:para>To get data with weather forecast data, we make an HTTP GET request to World Weather Online. We request the response in JSON data format.</db:para>
<db:programlisting language="qml">// Make HTTP GET request and parse the result
var xhr = new XMLHttpRequest;
xhr.open(&quot;GET&quot;,
         &quot;http://free.worldweatheronline.com/feed/weather.ashx?q=Jyv%c3%a4skyl%c3%a4,Finland&amp;amp;format=json&amp;amp;num_of_days=5&amp;amp;key=&quot;
         + weatherAppKey);
xhr.onreadystatechange = function() {
    if (xhr.readyState == XMLHttpRequest.DONE) {
        var a = JSON.parse(xhr.responseText);
        parseWeatherData(a);
    }
}
xhr.send();
</db:programlisting>
<db:para>The JSON response contains an array of forecast data:</db:para>
<db:programlisting language="qml">// Loop through the parsed JSON
for (var i in weatherData.data.weather) {
    var weatherObj = weatherData.data.weather[i];
</db:programlisting>
<db:para>That is then used as input data for our series and a ListModel we use as a container for weather icon URLs:</db:para>
<db:programlisting language="qml">// Store temperature values, rainfall and weather icon.
// The temperature values begin from 0.5 instead of 0.0 to make the start from the
// middle of the rainfall bars. This makes the temperature lines visually better
// synchronized with the rainfall bars.
maxTempSeries.append(Number(i) + 0.5, weatherObj.tempMaxC);
minTempSeries.append(Number(i) + 0.5, weatherObj.tempMinC);
rainfallSet.append(i, weatherObj.precipMM);
weatherImageModel.append({&quot;imageSource&quot;:weatherObj.weatherIconUrl[0].value});
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtcharts.git/tree/examples/charts/qmlweather?h=6.3">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
