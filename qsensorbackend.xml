<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSensorBackend Class</db:title>
<db:productname>QtSensors</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Sensors Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsensorbackend.xml">QSensorBackend</db:link> class is a sensor implementation.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSensorBackend</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Sensors)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Sensors)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += sensors</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSensorBackend is part of <db:simplelist><db:member>sensors_backend</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Sensors on a device will be represented by sub-classes of <db:link xlink:href="qsensorbackend.xml">QSensorBackend</db:link>.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="addDataRate">
<db:title>void QSensorBackend::addDataRate(qreal <db:emphasis>min</db:emphasis>, qreal <db:emphasis>max</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addDataRate</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>min</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>max</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addDataRate(qreal min, qreal max)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Add a data rate (consisting of <db:code role="parameter">min</db:code> and <db:code role="parameter">max</db:code> values) for the sensor.</db:para>
<db:para>Note that this function should be called from the constructor so that the information is available immediately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsensor.xml#availableDataRates-prop">QSensor::availableDataRates</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addOutputRange">
<db:title>void QSensorBackend::addOutputRange(qreal <db:emphasis>min</db:emphasis>, qreal <db:emphasis>max</db:emphasis>, qreal <db:emphasis>accuracy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addOutputRange</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>min</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>max</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>accuracy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addOutputRange(qreal min, qreal max, qreal accuracy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Add an output range (consisting of <db:code role="parameter">min</db:code>, <db:code role="parameter">max</db:code> values and <db:code role="parameter">accuracy</db:code>) for the sensor.</db:para>
<db:para>Note that this function should be called from the constructor so that the information is available immediately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsensor.xml#outputRange-prop">QSensor::outputRange</db:link></db:member>
<db:member><db:link xlink:href="qsensor.xml#outputRanges-prop">QSensor::outputRanges</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isFeatureSupported">
<db:title>[virtual] bool QSensorBackend::isFeatureSupported(QSensor::Feature <db:emphasis>feature</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isFeatureSupported</db:methodname>
<db:methodparam>
<db:type>QSensor::Feature</db:type>
<db:parameter>feature</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isFeatureSupported(QSensor::Feature feature) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Checks whether a feature is supported by this sensor backend.</db:para>
<db:para>This is the backend side of <db:link xlink:href="qsensor.xml#isFeatureSupported">QSensor::isFeatureSupported</db:link>(). Reimplement this function if the backend supports one of the additional sensor features of <db:link xlink:href="qsensor.xml#Feature-enum">QSensor::Feature</db:link>.</db:para>
<db:para>Returns whether the feature <db:code role="parameter">feature</db:code> is supported by this backend. The default implementation returns false.</db:para>
</db:section>
<db:section xml:id="newReadingAvailable">
<db:title>void QSensorBackend::newReadingAvailable()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>newReadingAvailable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void newReadingAvailable()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Notify the <db:link xlink:href="qsensor.xml">QSensor</db:link> class that a new reading is available.</db:para>
</db:section>
<db:section xml:id="reading">
<db:title>QSensorReading *QSensorBackend::reading() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSensorReading *</db:type>
<db:methodname>reading</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSensorReading * reading() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the backend has lost its reference to the reading it can call this method to get the address.</db:para>
<db:para>Note that you will need to down-cast to the appropriate type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsensorbackend.xml#setReading">setReading</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sensor">
<db:title>QSensor *QSensorBackend::sensor() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSensor *</db:type>
<db:methodname>sensor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSensor * sensor() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the sensor front end associated with this backend.</db:para>
</db:section>
<db:section xml:id="sensorBusy">
<db:title>void QSensorBackend::sensorBusy(bool <db:emphasis>busy</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sensorBusy</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>busy</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sensorBusy(bool busy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inform the front end of the sensor's busy state according to the provided <db:code role="parameter">busy</db:code> parameter.</db:para>
<db:para>If the sensor is set <db:emphasis>busy</db:emphasis> this implicitly calls <db:link xlink:href="qsensorbackend.xml#sensorStopped">sensorStopped</db:link>(). Busy indication is typically done in <db:link xlink:href="qsensorbackend.xml#start">start</db:link>().</db:para>
<db:para>Note that the front end must call <db:link xlink:href="qsensor.xml#busy-prop">QSensor::isBusy</db:link>() to see if the sensor is busy. If the sensor has stopped due to an error the <db:link xlink:href="qsensorbackend.xml#sensorError">sensorError</db:link>() function should be called to notify the class of the error condition.</db:para>
</db:section>
<db:section xml:id="sensorError">
<db:title>void QSensorBackend::sensorError(int <db:emphasis>error</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sensorError</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sensorError(int error)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inform the front end that a sensor error occurred. Note that this only reports an <db:code role="parameter">error</db:code> code. It does not stop the sensor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsensorbackend.xml#sensorStopped">sensorStopped</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sensorStopped">
<db:title>void QSensorBackend::sensorStopped()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sensorStopped</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sensorStopped()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inform the front end that the sensor has stopped. This can be due to <db:link xlink:href="qsensorbackend.xml#start">start</db:link>() failing or for some unexpected reason (eg. hardware failure).</db:para>
<db:para>Note that the front end must call <db:link xlink:href="qsensor.xml#active-prop">QSensor::isActive</db:link>() to see if the sensor has stopped. If the sensor has stopped due to an error the <db:link xlink:href="qsensorbackend.xml#sensorError">sensorError</db:link>() function should be called to notify the class of the error condition.</db:para>
</db:section>
<db:section xml:id="setDataRates">
<db:title>void QSensorBackend::setDataRates(const QSensor *<db:emphasis>otherSensor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDataRates</db:methodname>
<db:methodparam>
<db:type>const QSensor *</db:type>
<db:parameter>otherSensor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDataRates(const QSensor *otherSensor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the data rates for the sensor based on <db:code role="parameter">otherSensor</db:code>.</db:para>
<db:para>This is designed for sensors that are based on other sensors.</db:para>
<db:programlisting language="cpp">setDataRates(otherSensor);
</db:programlisting>
<db:para>Note that this function must be called from the constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsensor.xml#availableDataRates-prop">QSensor::availableDataRates</db:link></db:member>
<db:member><db:link xlink:href="qsensorbackend.xml#addDataRate">addDataRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDescription">
<db:title>void QSensorBackend::setDescription(const QString &amp;<db:emphasis>description</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDescription</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>description</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDescription(const QString &amp;description)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the <db:code role="parameter">description</db:code> for the sensor.</db:para>
<db:para>Note that this function should be called from the constructor so that the information is available immediately.</db:para>
</db:section>
<db:section xml:id="setReading">
<db:title>T *QSensorBackend::setReading(T *<db:emphasis>reading</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>T *</db:type>
<db:methodname>setReading</db:methodname>
<db:methodparam>
<db:type>T *</db:type>
<db:parameter>reading</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T * setReading(T *reading)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called to initialize the <db:code role="parameter">reading</db:code> classes used for a sensor.</db:para>
<db:para>If your backend has already allocated a reading you should pass the address of this to the function. Otherwise you should pass 0 and the function will return the address of the reading your backend should use when it wants to notify the sensor API of new readings.</db:para>
<db:para>Note that this is a template function so it should be called with the appropriate type.</db:para>
<db:programlisting language="cpp">class MyBackend : public QSensorBackend
{
    QAccelerometerReading m_reading;
public:
    MyBackend(QSensor *sensor)
        : QSensorBackend(sensor)
    {
        setReading&amp;lt;QAccelerometerReading&amp;gt;(&amp;amp;m_reading);
    }

    ...
</db:programlisting>
<db:para>Note that this function must be called or you will not be able to send readings to the front end.</db:para>
<db:para>If you do not wish to store the address of the reading you may use the <db:link xlink:href="qsensorbackend.xml#reading">reading</db:link>() method to get it again later.</db:para>
<db:programlisting language="cpp">class MyBackend : public QSensorBackend
{
public:
    MyBackend(QSensor *sensor)
        : QSensorBackend(sensor)
    {
        setReading&amp;lt;QAccelerometerReading&amp;gt;(0);
    }

    void poll()
    {
        quint64 timestamp;
        qreal x, y, z;
        ...
        QAccelerometerReading *reading = static_cast&amp;lt;QAccelerometerReading*&amp;gt;(reading());
        reading-&amp;gt;setTimestamp(timestamp);
        reading-&amp;gt;setX(x);
        reading-&amp;gt;setY(y);
        reading-&amp;gt;setZ(z);
    }

    ...
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsensorbackend.xml#reading">reading</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start">
<db:title>[pure virtual] void QSensorBackend::start()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>start</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void start() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Start reporting values.</db:para>
</db:section>
<db:section xml:id="stop">
<db:title>[pure virtual] void QSensorBackend::stop()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>stop</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stop() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stop reporting values.</db:para>
</db:section>
</db:section>
</db:article>
