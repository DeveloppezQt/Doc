<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAudioProbe Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaudioprobe.xml">QAudioProbe</db:link> class allows you to monitor audio being played or recorded.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAudioProbe</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAudioProbe is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_audio</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:programlisting language="cpp">QAudioRecorder *recorder = new QAudioRecorder();
QAudioProbe *probe = new QAudioProbe;

// ... configure the audio recorder (skipped)

connect(probe, SIGNAL(audioBufferProbed(QAudioBuffer)), this, SLOT(processBuffer(QAudioBuffer)));

probe-&gt;setSource(recorder); // Returns true, hopefully.

recorder-&gt;record(); // Now we can do things like calculating levels or performing an FFT
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoprobe.xml">QVideoProbe</db:link></db:member>
<db:member><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:member>
<db:member><db:link xlink:href="qcamera.xml">QCamera</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAudioProbe">
<db:title>[explicit] QAudioProbe::QAudioProbe(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Creates a new <db:link xlink:href="qaudioprobe.xml">QAudioProbe</db:link> class with a <db:code role="parameter">parent</db:code>. After setting the source to monitor with <db:link xlink:href="qaudioprobe.xml#setSource">setSource</db:link>(), the <db:link xlink:href="qaudioprobe.xml#audioBufferProbed">audioBufferProbed</db:link>() signal will be emitted when audio buffers are flowing in the source media object.</db:para>
</db:section>
<db:section xml:id="dtor.QAudioProbe">
<db:title>[virtual noexcept] QAudioProbe::~QAudioProbe()</db:title>
<db:para>Destroys this probe and disconnects from any media object.</db:para>
</db:section>
<db:section xml:id="audioBufferProbed">
<db:title>void QAudioProbe::audioBufferProbed(const QAudioBuffer &amp;<db:emphasis>buffer</db:emphasis>)</db:title>
<db:para>This signal should be emitted when an audio <db:code role="parameter">buffer</db:code> is processed in the media service.</db:para>
</db:section>
<db:section xml:id="flush">
<db:title>void QAudioProbe::flush()</db:title>
<db:para>This signal should be emitted when it is required to release all buffers. Application must release all outstanding references to audio buffers.</db:para>
</db:section>
<db:section xml:id="isActive">
<db:title>bool QAudioProbe::isActive() const</db:title>
<db:para>Returns true if this probe is monitoring something, or false otherwise.</db:para>
<db:para>The source being monitored does not need to be active.</db:para>
</db:section>
<db:section xml:id="setSource">
<db:title>bool QAudioProbe::setSource(QMediaObject *<db:emphasis>source</db:emphasis>)</db:title>
<db:para>Sets the media object to monitor to <db:code role="parameter">source</db:code>.</db:para>
<db:para>If <db:code role="parameter">source</db:code> is zero, this probe will be deactivated and this function wil return true.</db:para>
<db:para>If the media object does not support monitoring audio, this function will return false.</db:para>
<db:para>The previous object will no longer be monitored. Passing in the same object will be ignored, but monitoring will continue.</db:para>
</db:section>
<db:section xml:id="setSource-1">
<db:title>bool QAudioProbe::setSource(QMediaRecorder *<db:emphasis>mediaRecorder</db:emphasis>)</db:title>
<db:para>Starts monitoring the given <db:code role="parameter">mediaRecorder</db:code>.</db:para>
<db:para>Returns true on success.</db:para>
<db:para>If there is no mediaObject associated with <db:code role="parameter">mediaRecorder</db:code>, or if it is zero, this probe will be deactivated and this function wil return true.</db:para>
<db:para>If the media recorder instance does not support monitoring audio, this function will return false.</db:para>
<db:para>Any previously monitored objects will no longer be monitored. Passing in the same (valid) object will be ignored, but monitoring will continue.</db:para>
</db:section>
</db:section>
</db:article>
