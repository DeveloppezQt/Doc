<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QModbusClient Class</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmodbusclient.xml">QModbusClient</db:link> class is the interface to send Modbus requests.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QModbusClient</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS SerialBus)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::SerialBus)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += serialbus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmodbusdevice.xml" xlink:role="class">QModbusDevice</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmodbusrtuserialclient.xml" xlink:role="class">QModbusRtuSerialClient</db:link> and <db:link xlink:href="qmodbustcpclient.xml" xlink:role="class">QModbusTcpClient</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qmodbusclient.xml">QModbusClient</db:link> API is constructed around one <db:link xlink:href="qmodbusclient.xml">QModbusClient</db:link> object, which holds the common configuration and settings for the requests it sends. One <db:link xlink:href="qmodbusclient.xml">QModbusClient</db:link> should be enough for the whole Qt application.</db:para>
<db:para>Once a <db:link xlink:href="qmodbusclient.xml">QModbusClient</db:link> object has been created, the application can use it to send requests. The returned object is used to obtain any data returned in response to the corresponding request.</db:para>
<db:para><db:link xlink:href="qmodbusclient.xml">QModbusClient</db:link> has an asynchronous API. When the finished slot is called, the parameter it takes is the <db:link xlink:href="qmodbusreply.xml">QModbusReply</db:link> object containing the PDU as well as meta-data (Addressing, etc.).</db:para>
<db:para>Note: <db:link xlink:href="qmodbusclient.xml">QModbusClient</db:link> queues the requests it receives. The number of requests executed in parallel is dependent on the protocol. For example, the HTTP protocol on desktop platforms issues 6 requests in parallel for one host/port combination.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QModbusClient">
<db:title>[explicit] QModbusClient::QModbusClient(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QModbusClient</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QModbusClient(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a Modbus client device with the specified <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="numberOfRetries">
<db:title>int QModbusClient::numberOfRetries() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>numberOfRetries</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int numberOfRetries() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of retries a client will perform before a request fails. The default value is set to <db:code>3</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusclient.xml#setNumberOfRetries">setNumberOfRetries</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="processPrivateResponse">
<db:title>[virtual protected] bool QModbusClient::processPrivateResponse(const QModbusResponse &amp;<db:emphasis>response</db:emphasis>, QModbusDataUnit *<db:emphasis>data</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>processPrivateResponse</db:methodname>
<db:methodparam>
<db:type>const QModbusResponse &amp;</db:type>
<db:parameter>response</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QModbusDataUnit *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool processPrivateResponse(const QModbusResponse &amp;response, QModbusDataUnit *data)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>To be implemented by custom Modbus client implementation. The default implementation ignores <db:code role="parameter">response</db:code> and <db:code role="parameter">data</db:code>. It always returns false to indicate error.</db:para>
</db:section>
<db:section xml:id="processResponse">
<db:title>[virtual protected] bool QModbusClient::processResponse(const QModbusResponse &amp;<db:emphasis>response</db:emphasis>, QModbusDataUnit *<db:emphasis>data</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>processResponse</db:methodname>
<db:methodparam>
<db:type>const QModbusResponse &amp;</db:type>
<db:parameter>response</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QModbusDataUnit *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool processResponse(const QModbusResponse &amp;response, QModbusDataUnit *data)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Processes a Modbus server <db:code role="parameter">response</db:code> and stores the decoded information in <db:code role="parameter">data</db:code>. Returns <db:code>true</db:code> on success; otherwise <db:code>false</db:code>.</db:para>
<db:note>
<db:para>The default implementation does not support all <db:link xlink:href="qmodbuspdu.xml#FunctionCode-enum">FunctionCode</db:link>s. Override this method in a custom Modbus client implementations to handle the needed functions.</db:para>
</db:note>
</db:section>
<db:section xml:id="sendRawRequest">
<db:title>QModbusReply *QModbusClient::sendRawRequest(const QModbusRequest &amp;<db:emphasis>request</db:emphasis>, int <db:emphasis>serverAddress</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QModbusReply *</db:type>
<db:methodname>sendRawRequest</db:methodname>
<db:methodparam>
<db:type>const QModbusRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>serverAddress</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModbusReply * sendRawRequest(const QModbusRequest &amp;request, int serverAddress)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a raw Modbus <db:code role="parameter">request</db:code>. A raw request can contain anything that fits inside the Modbus PDU data section and has a valid function code. The only check performed before sending is therefore the validity check, see <db:link xlink:href="qmodbuspdu.xml#isValid">QModbusPdu::isValid</db:link>. If no error occurred the function returns a new valid <db:link xlink:href="qmodbusreply.xml">QModbusReply</db:link>; nullptr otherwise. Modbus networks may have multiple servers, each server has a unique <db:code role="parameter">serverAddress</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusreply.xml#rawResult">QModbusReply::rawResult</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sendReadRequest">
<db:title>QModbusReply *QModbusClient::sendReadRequest(const QModbusDataUnit &amp;<db:emphasis>read</db:emphasis>, int <db:emphasis>serverAddress</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QModbusReply *</db:type>
<db:methodname>sendReadRequest</db:methodname>
<db:methodparam>
<db:type>const QModbusDataUnit &amp;</db:type>
<db:parameter>read</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>serverAddress</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModbusReply * sendReadRequest(const QModbusDataUnit &amp;read, int serverAddress)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a request to read the contents of the data pointed by <db:code role="parameter">read</db:code>. Returns a new valid <db:link xlink:href="qmodbusreply.xml">QModbusReply</db:link> object if no error occurred, otherwise nullptr. Modbus network may have multiple servers, each server has unique <db:code role="parameter">serverAddress</db:code>.</db:para>
</db:section>
<db:section xml:id="sendReadWriteRequest">
<db:title>QModbusReply *QModbusClient::sendReadWriteRequest(const QModbusDataUnit &amp;<db:emphasis>read</db:emphasis>, const QModbusDataUnit &amp;<db:emphasis>write</db:emphasis>, int <db:emphasis>serverAddress</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QModbusReply *</db:type>
<db:methodname>sendReadWriteRequest</db:methodname>
<db:methodparam>
<db:type>const QModbusDataUnit &amp;</db:type>
<db:parameter>read</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModbusDataUnit &amp;</db:type>
<db:parameter>write</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>serverAddress</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModbusReply * sendReadWriteRequest(const QModbusDataUnit &amp;read, const QModbusDataUnit &amp;write, int serverAddress)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a request to read the contents of the data pointed by <db:code role="parameter">read</db:code> and to modify the contents of the data pointed by <db:code role="parameter">write</db:code> using Modbus function code <db:link xlink:href="qmodbuspdu.xml#FunctionCode-enum">QModbusPdu::ReadWriteMultipleRegisters</db:link>. Returns a new valid <db:link xlink:href="qmodbusreply.xml">QModbusReply</db:link> object if no error occurred, otherwise nullptr. Modbus network may have multiple servers, each server has unique <db:code role="parameter">serverAddress</db:code>.</db:para>
<db:note>
<db:para>: Sending this kind of request is only valid of both <db:code role="parameter">read</db:code> and <db:code role="parameter">write</db:code> are of type <db:link xlink:href="qmodbusdataunit.xml#RegisterType-enum">QModbusDataUnit::HoldingRegisters</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="sendWriteRequest">
<db:title>QModbusReply *QModbusClient::sendWriteRequest(const QModbusDataUnit &amp;<db:emphasis>write</db:emphasis>, int <db:emphasis>serverAddress</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QModbusReply *</db:type>
<db:methodname>sendWriteRequest</db:methodname>
<db:methodparam>
<db:type>const QModbusDataUnit &amp;</db:type>
<db:parameter>write</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>serverAddress</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModbusReply * sendWriteRequest(const QModbusDataUnit &amp;write, int serverAddress)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a request to modify the contents of the data pointed by <db:code role="parameter">write</db:code>. Returns a new valid <db:link xlink:href="qmodbusreply.xml">QModbusReply</db:link> object if no error occurred, otherwise nullptr. Modbus network may have multiple servers, each server has unique <db:code role="parameter">serverAddress</db:code>.</db:para>
</db:section>
<db:section xml:id="setNumberOfRetries">
<db:title>void QModbusClient::setNumberOfRetries(int <db:emphasis>number</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setNumberOfRetries</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>number</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setNumberOfRetries(int number)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">number</db:code> of retries a client will perform before a request fails. The default value is set to <db:code>3</db:code>.</db:para>
<db:note>
<db:para>The new value must be greater than or equal to <db:code>0</db:code>. Changing this property will only effect new requests, not already scheduled ones.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusclient.xml#numberOfRetries">numberOfRetries</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTimeout">
<db:title>void QModbusClient::setTimeout(int <db:emphasis>newTimeout</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTimeout</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>newTimeout</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTimeout(int newTimeout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">newTimeout</db:code> for this <db:link xlink:href="qmodbusclient.xml">QModbusClient</db:link> instance. The minimum timeout is 10 ms.</db:para>
<db:para>The timeout is used by the client to determine how long it waits for a response from the server. If the response is not received within the required timeout, the <db:link xlink:href="qmodbusdevice.xml#Error-enum">TimeoutError</db:link> is set.</db:para>
<db:para>Already active/running timeouts are not affected by such timeout duration changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusclient.xml#timeout">timeout</db:link></db:member>
<db:member><db:link xlink:href="qmodbusclient.xml#timeoutChanged">timeoutChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timeout">
<db:title>int QModbusClient::timeout() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>timeout</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int timeout() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the timeout value used by this <db:link xlink:href="qmodbusclient.xml">QModbusClient</db:link> instance in ms. A timeout is indicated by a <db:link xlink:href="qmodbusdevice.xml#Error-enum">TimeoutError</db:link>. The default value is 1000 ms.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusclient.xml#setTimeout">setTimeout</db:link></db:member>
<db:member><db:link xlink:href="qmodbusclient.xml#timeoutChanged">timeoutChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timeoutChanged">
<db:title>void QModbusClient::timeoutChanged(int <db:emphasis>newTimeout</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>timeoutChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>newTimeout</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void timeoutChanged(int newTimeout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the timeout used by this <db:link xlink:href="qmodbusclient.xml">QModbusClient</db:link> instance is changed. The new response timeout for the device is passed as <db:code role="parameter">newTimeout</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusclient.xml#setTimeout">setTimeout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
