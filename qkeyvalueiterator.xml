<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QKeyValueIterator Class</db:title>
<db:subtitle>template &lt;typename Key, typename T, typename Iterator&gt; class QKeyValueIterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Iterator over the key/value pairs of an associative container.</db:para>
<db:para>This class was introduced in Qt 5.10.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QKeyValueIterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.10</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qkeyvalueiterator.xml">QKeyValueIterator</db:link> class provides an STL-style iterator for returning key/value pairs from associative containers like <db:link xlink:href="qhash.xml#qhash">QHash</db:link> and <db:link xlink:href="qmap.xml">QMap</db:link>. It supports the same API as the STL associative containers, i.e. getting a key/value pair when iterating through the container.</db:para>
<db:para>This will allow for better interoperability between <db:link xlink:href="qmap.xml">QMap</db:link>, <db:link xlink:href="qhash.xml#qhash">QHash</db:link> and friends and STL-style algorithms.</db:para>
<db:warning>
<db:para>Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <db:link xlink:href="containers.xml#implicit-sharing-iterator-problem">Implicit sharing iterator problem</db:link>.</db:para>
</db:warning>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QKeyValueIterator">
<db:title>QKeyValueIterator::QKeyValueIterator()</db:title>
<db:constructorsynopsis>
<db:methodname>QKeyValueIterator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QKeyValueIterator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a default <db:link xlink:href="qkeyvalueiterator.xml">QKeyValueIterator</db:link>.</db:para>
</db:section>
<db:section xml:id="QKeyValueIterator-1">
<db:title>[explicit constexpr] QKeyValueIterator::QKeyValueIterator(Iterator <db:emphasis>o</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QKeyValueIterator</db:methodname>
<db:methodparam>
<db:type>Iterator</db:type>
<db:parameter>o</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QKeyValueIterator(Iterator o)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qkeyvalueiterator.xml">QKeyValueIterator</db:link> on top of <db:code role="parameter">o</db:code>.</db:para>
</db:section>
<db:section xml:id="base">
<db:title>Iterator QKeyValueIterator::base() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Iterator</db:type>
<db:methodname>base</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator base() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the underlying iterator this <db:link xlink:href="qkeyvalueiterator.xml">QKeyValueIterator</db:link> is based on.</db:para>
</db:section>
<db:section xml:id="operator-2a">
<db:title>std::pair&lt;Key, T&gt; QKeyValueIterator::operator*() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>std::pair&lt;Key, T&gt;</db:type>
<db:methodname>operator*</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::pair&lt;Key, T&gt; operator*() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current entry as a pair.</db:para>
</db:section>
<db:section xml:id="operator-2b-2b">
<db:title>QKeyValueIterator&lt;Key, T, Iterator&gt; &amp;QKeyValueIterator::operator++()</db:title>
<db:methodsynopsis>
<db:type>QKeyValueIterator&lt;Key, T, Iterator&gt; &amp;</db:type>
<db:methodname>operator++</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QKeyValueIterator&lt;Key, T, Iterator&gt; &amp; operator++()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The prefix ++ operator (<db:code>++i</db:code>) advances the iterator to the next item in the container and returns the iterator.</db:para>
<db:note>
<db:para>Advancing the iterator past its container's end() constitutes undefined behavior.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qkeyvalueiterator.xml#operator--">operator--</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b-1">
<db:title>QKeyValueIterator&lt;Key, T, Iterator&gt; QKeyValueIterator::operator++(<db:emphasis>int</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QKeyValueIterator&lt;Key, T, Iterator&gt;</db:type>
<db:methodname>operator++</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QKeyValueIterator&lt;Key, T, Iterator&gt; operator++(int)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix ++ operator (<db:code>i++</db:code>) advances the iterator to the next item in the container and returns the iterator's prior value.</db:para>
<db:note>
<db:para>Advancing the iterator past its container's end() constitutes undefined behavior.</db:para>
</db:note>
</db:section>
<db:section xml:id="operator--">
<db:title>QKeyValueIterator&lt;Key, T, Iterator&gt; &amp;QKeyValueIterator::operator--()</db:title>
<db:methodsynopsis>
<db:type>QKeyValueIterator&lt;Key, T, Iterator&gt; &amp;</db:type>
<db:methodname>operator--</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QKeyValueIterator&lt;Key, T, Iterator&gt; &amp; operator--()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The prefix â€“ operator (<db:code>--i</db:code>) backs the iterator up to the previous item in the container and returns the iterator.</db:para>
<db:note>
<db:para>Backing up an iterator to before its container's begin() constitutes undefined behavior.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qkeyvalueiterator.xml#operator-2b-2b">operator++</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator---1">
<db:title>QKeyValueIterator&lt;Key, T, Iterator&gt; QKeyValueIterator::operator--(<db:emphasis>int</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QKeyValueIterator&lt;Key, T, Iterator&gt;</db:type>
<db:methodname>operator--</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QKeyValueIterator&lt;Key, T, Iterator&gt; operator--(int)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix â€“ operator (<db:code>i--</db:code>) backs the iterator up to the previous item in the container and returns the iterator's prior value.</db:para>
<db:note>
<db:para>Backing up an iterator to before its container's begin() constitutes undefined behavior.</db:para>
</db:note>
</db:section>
<db:section xml:id="operator--gt">
<db:title>[since 5.15] QKeyValueIterator::pointer QKeyValueIterator::operator-&gt;() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QKeyValueIterator::pointer</db:type>
<db:methodname>operator-&gt;</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QKeyValueIterator::pointer operator-&gt;() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current entry as a pointer-like object to the pair.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qkeyvalueiterator.xml#operator-2a">operator*</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(QKeyValueIterator&lt;Key, T, Iterator&gt; <db:emphasis>lhs</db:emphasis>, QKeyValueIterator&lt;Key, T, Iterator&gt; <db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>QKeyValueIterator&lt;Key, T, Iterator&gt;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QKeyValueIterator&lt;Key, T, Iterator&gt;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(QKeyValueIterator&lt;Key, T, Iterator&gt; lhs, QKeyValueIterator&lt;Key, T, Iterator&gt; rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">rhs</db:code> points to a different item than <db:code role="parameter">lhs</db:code> otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qkeyvalueiterator.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(QKeyValueIterator&lt;Key, T, Iterator&gt; <db:emphasis>lhs</db:emphasis>, QKeyValueIterator&lt;Key, T, Iterator&gt; <db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>QKeyValueIterator&lt;Key, T, Iterator&gt;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QKeyValueIterator&lt;Key, T, Iterator&gt;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(QKeyValueIterator&lt;Key, T, Iterator&gt; lhs, QKeyValueIterator&lt;Key, T, Iterator&gt; rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">rhs</db:code> points to the same item as <db:code role="parameter">lhs</db:code> otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qkeyvalueiterator.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
