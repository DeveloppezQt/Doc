<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMultiSampleAntiAliasing Class</db:title>
<db:subtitle>Qt3DRender::QMultiSampleAntiAliasing</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Enable multisample antialiasing.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMultiSampleAntiAliasing</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS 3drender)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::3drender)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3drender</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>In QML</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qt3d-render-multisampleantialiasing.xml" xlink:role="">MultiSampleAntiAliasing</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-qrenderstate.xml" xlink:role="class">Qt3DRender::QRenderState</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMultiSampleAntiAliasing is part of <db:simplelist><db:member>renderstates</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Status</db:term>
<db:listitem>
<db:para>Deprecated</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qt3drender-qmultisampleantialiasing.xml">Qt3DRender::QMultiSampleAntiAliasing</db:link> class enables multisample antialiasing.</db:para>
<db:para>It can be added to a <db:link xlink:href="qt3drender-qrenderpass.xml">QRenderPass</db:link> by calling <db:link xlink:href="qt3drender-qrenderpass.xml#addRenderState">QRenderPass::addRenderState</db:link>():</db:para>
<db:programlisting language="cpp">QRenderPass *renderPass = new QRenderPass();

QMultiSampleAntiAliasing *msaa = new QMultiSampleAntiAliasing();
renderPass-&gt;addRenderState(msaa);
</db:programlisting>
<db:para>Or a <db:link xlink:href="qt3drender-qrenderstateset.xml">QRenderStateSet</db:link> by calling <db:link xlink:href="qt3drender-qrenderstateset.xml#addRenderState">QRenderStateSet::addRenderState</db:link>():</db:para>
<db:programlisting language="cpp">QRenderStateSet *renderStateSet = new QRenderStateSet();

QMultiSampleAntiAliasing *msaa = new QMultiSampleAntiAliasing();
renderStateSet-&gt;addRenderState(msaa);
</db:programlisting>
<db:para>For multisampling to take effect, the render target must have been allocated with multisampling enabled:</db:para>
<db:programlisting language="cpp">QTexture2DMultisample *colorTex = new QTexture2DMultisample;
colorTex-&gt;setFormat(QAbstractTexture::RGBA8_UNorm);
colorTex-&gt;setWidth(1024);
colorTex-&gt;setHeight(1024);

QRenderTargetOutput *color = new QRenderTargetOutput;
color-&gt;setAttachmentPoint(QRenderTargetOutput::Color0);
color-&gt;setTexture(colorTex);

QTexture2DMultisample *depthStencilTex = new QTexture2DMultisample;
depthStencilTex-&gt;setFormat(QAbstractTexture::RGBA8_UNorm);
depthStencilTex-&gt;setWidth(1024);
depthStencilTex-&gt;setHeight(1024);

QRenderTargetOutput *depthStencil = new QRenderTargetOutput;
depthStencil-&gt;setAttachmentPoint(QRenderTargetOutput::DepthStencil);
depthStencil-&gt;setTexture(depthStencilTex);

Qt3DRender::QRenderTarget *renderTarget = new Qt3DRender::QRenderTarget;
renderTarget-&gt;addOutput(color);
renderTarget-&gt;addOutput(depthStencil);
</db:programlisting>
<db:para>Further, the shader code must use multisampling sampler types and texelFetch() instead of texture().</db:para>
<db:para>For example, if you have code like</db:para>
<db:programlisting language="cpp">#version 150

uniform sampler2D colorTexture;
in vec2 texCoord;
out vec4 fragColor;

void main()
{
    fragColor = texture(colorTexture, texCoord);
}
</db:programlisting>
<db:para>you can rewrite it as</db:para>
<db:programlisting language="cpp">#version 150

uniform sampler2DMS colorTexture;
in vec2 texCoord;
out vec4 fragColor;

void main()
{
    ivec2 tc = ivec2(floor(textureSize(colorTexture) * texCoord));
    vec4 c = texelFetch(colorTexture, tc, 0) +
                texelFetch(colorTexture, tc, 1) +
                texelFetch(colorTexture, tc, 2) +
                texelFetch(colorTexture, tc, 3);
    fragColor = c / 4.0;
}
</db:programlisting>
<db:note>
<db:para>When using OpenGL as the graphics API, glEnable(GL_MULTISAMPLE) will be called if <db:link xlink:href="qt3drender-qmultisampleantialiasing.xml">QMultiSampleAntiAliasing</db:link> has been added to the render states.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMultiSampleAntiAliasing">
<db:title>[explicit] QMultiSampleAntiAliasing::QMultiSampleAntiAliasing(Qt3DCore::QNode *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>The constructor creates a new <db:link xlink:href="qt3drender-qmultisampleantialiasing.xml">QMultiSampleAntiAliasing::QMultiSampleAntiAliasing</db:link> instance with the specified <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
