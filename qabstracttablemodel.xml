<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractTableModel Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link> class provides an abstract model that can be subclassed to create table models.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractTableModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractitemmodel.xml" xlink:role="class">QAbstractItemModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractTableModel is part of <db:simplelist><db:member>model-view</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link> provides a standard interface for models that represent their data as a two-dimensional array of items. It is not used directly, but must be subclassed.</db:para>
<db:para>Since the model provides a more specialized interface than <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>, it is not suitable for use with tree views, although it can be used to provide data to a QListView. If you need to represent a simple list of items, and only need a model to contain a single column of data, subclassing the <db:link xlink:href="qabstractlistmodel.xml">QAbstractListModel</db:link> may be more appropriate.</db:para>
<db:para>The <db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#columnCount">columnCount</db:link>() functions return the dimensions of the table. To retrieve a model index corresponding to an item in the model, use <db:link xlink:href="qabstracttablemodel.xml#index">index</db:link>() and provide only the row and column numbers.</db:para>
<db:section xml:id="subclassing">
<db:title>Subclassing</db:title>
<db:para>When subclassing <db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link>, you must implement <db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#columnCount">columnCount</db:link>(), and <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>(). Default implementations of the <db:link xlink:href="qabstracttablemodel.xml#index">index</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#parent">parent</db:link>() functions are provided by <db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link>. Well behaved models will also implement <db:link xlink:href="qabstractitemmodel.xml#headerData">headerData</db:link>().</db:para>
<db:para>Editable models need to implement <db:link xlink:href="qabstractitemmodel.xml#setData">setData</db:link>(), and implement <db:link xlink:href="qabstracttablemodel.xml#flags">flags</db:link>() to return a value containing <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemIsEditable</db:link>.</db:para>
<db:para>Models that provide interfaces to resizable data structures can provide implementations of <db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>(), and <db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>(). When implementing these functions, it is important to call the appropriate functions so that all connected views are aware of any changes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>An <db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>() implementation must call <db:link xlink:href="qabstractitemmodel.xml#beginInsertRows">beginInsertRows</db:link>() <db:emphasis>before</db:emphasis> inserting new rows into the data structure, and it must call <db:link xlink:href="qabstractitemmodel.xml#endInsertRows">endInsertRows</db:link>() <db:emphasis>immediately afterwards</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para>An <db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>() implementation must call <db:link xlink:href="qabstractitemmodel.xml#beginInsertColumns">beginInsertColumns</db:link>() <db:emphasis>before</db:emphasis> inserting new columns into the data structure, and it must call <db:link xlink:href="qabstractitemmodel.xml#endInsertColumns">endInsertColumns</db:link>() <db:emphasis>immediately afterwards</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para>A <db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>() implementation must call <db:link xlink:href="qabstractitemmodel.xml#beginRemoveRows">beginRemoveRows</db:link>() <db:emphasis>before</db:emphasis> the rows are removed from the data structure, and it must call <db:link xlink:href="qabstractitemmodel.xml#endRemoveRows">endRemoveRows</db:link>() <db:emphasis>immediately afterwards</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para>A <db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>() implementation must call <db:link xlink:href="qabstractitemmodel.xml#beginRemoveColumns">beginRemoveColumns</db:link>() <db:emphasis>before</db:emphasis> the columns are removed from the data structure, and it must call <db:link xlink:href="qabstractitemmodel.xml#endRemoveColumns">endRemoveColumns</db:link>() <db:emphasis>immediately afterwards</db:emphasis>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Some general guidelines for subclassing models are available in the <db:link xlink:href="">Model Subclassing Reference</db:link>.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Model Classes</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:member>
<db:member><db:link xlink:href="qabstractlistmodel.xml">QAbstractListModel</db:link></db:member>
<db:member><db:link xlink:href="">Pixelator Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractTableModel">
<db:title>[explicit] QAbstractTableModel::QAbstractTableModel(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QAbstractTableModel</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractTableModel(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an abstract table model for the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractTableModel">
<db:title>[virtual] QAbstractTableModel::~QAbstractTableModel()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAbstractTableModel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAbstractTableModel()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the abstract table model.</db:para>
</db:section>
<db:section xml:id="dropMimeData">
<db:title>[override virtual] bool QAbstractTableModel::dropMimeData(const QMimeData *<db:emphasis>data</db:emphasis>, Qt::DropAction <db:emphasis>action</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>dropMimeData</db:methodname>
<db:methodparam>
<db:type>const QMimeData *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::DropAction</db:type>
<db:parameter>action</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool dropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#dropMimeData" role="function">QAbstractItemModel::dropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="flags">
<db:title>[override virtual] Qt::ItemFlags QAbstractTableModel::flags(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>Qt::ItemFlags</db:type>
<db:methodname>flags</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::ItemFlags flags(const QModelIndex &amp;index) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#flags" role="function">QAbstractItemModel::flags(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="index">
<db:title>[override virtual] QModelIndex QAbstractTableModel::index(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>index</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex index(int row, int column, const QModelIndex &amp;parent) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#index" role="function">QAbstractItemModel::index(int row, int column, const QModelIndex &amp;parent) const</db:link>.</db:para>
<db:para>Returns the index of the data in <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> with <db:code role="parameter">parent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#parent">parent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sibling">
<db:title>[override virtual] QModelIndex QAbstractTableModel::sibling(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>idx</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>sibling</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>idx</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex sibling(int row, int column, const QModelIndex &amp;idx) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#sibling" role="function">QAbstractItemModel::sibling(int row, int column, const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
