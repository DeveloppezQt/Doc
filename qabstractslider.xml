<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractSlider Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link> class provides an integer value within a range.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractSlider</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdial.xml" xlink:role="class">QDial</db:link>, <db:link xlink:href="qscrollbar.xml" xlink:role="class">QScrollBar</db:link>, and <db:link xlink:href="qslider.xml" xlink:role="class">QSlider</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractSlider is part of <db:simplelist><db:member>abstractwidgets</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The class is designed as a common super class for widgets like <db:link xlink:href="qscrollbar.xml">QScrollBar</db:link>, <db:link xlink:href="qslider.xml">QSlider</db:link> and <db:link xlink:href="qdial.xml">QDial</db:link>.</db:para>
<db:para>Here are the main properties of the class:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para><db:link xlink:href="qabstractslider.xml#value-prop">value</db:link>: The bounded integer that <db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link> maintains.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractslider.xml#minimum-prop">minimum</db:link>: The lowest possible value.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractslider.xml#maximum-prop">maximum</db:link>: The highest possible value.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractslider.xml#singleStep-prop">singleStep</db:link>: The smaller of two natural steps that an abstract sliders provides and typically corresponds to the user pressing an arrow key.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractslider.xml#pageStep-prop">pageStep</db:link>: The larger of two natural steps that an abstract slider provides and typically corresponds to the user pressing PageUp or PageDown.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractslider.xml#tracking-prop">tracking</db:link>: Whether slider tracking is enabled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractslider.xml#sliderPosition-prop">sliderPosition</db:link>: The current position of the slider. If <db:link xlink:href="qabstractslider.xml#tracking-prop">tracking</db:link> is enabled (the default), this is identical to <db:link xlink:href="qabstractslider.xml#value-prop">value</db:link>.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Unity (1) may be viewed as a third step size. <db:link xlink:href="qabstractslider.xml#value-prop">setValue</db:link>() lets you set the current value to any integer in the allowed range, not just <db:link xlink:href="qabstractslider.xml#minimum-prop">minimum</db:link>() + <db:emphasis>n</db:emphasis> * <db:link xlink:href="qabstractslider.xml#singleStep-prop">singleStep</db:link>() for integer values of <db:emphasis>n</db:emphasis>. Some widgets may allow the user to set any value at all; others may just provide multiples of <db:link xlink:href="qabstractslider.xml#singleStep-prop">singleStep</db:link>() or <db:link xlink:href="qabstractslider.xml#pageStep-prop">pageStep</db:link>().</db:para>
<db:para><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link> emits a comprehensive set of signals:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Signal</db:para>
</db:th>
<db:th>
<db:para>Emitted when</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qabstractslider.xml#valueChanged">valueChanged</db:link>()</db:para>
</db:td>
<db:td>
<db:para>the value has changed. The <db:link xlink:href="qabstractslider.xml#tracking-prop">tracking</db:link> determines whether this signal is emitted during user interaction.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qabstractslider.xml#sliderPressed">sliderPressed</db:link>()</db:para>
</db:td>
<db:td>
<db:para>the user starts to drag the slider.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qabstractslider.xml#sliderMoved">sliderMoved</db:link>()</db:para>
</db:td>
<db:td>
<db:para>the user drags the slider.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qabstractslider.xml#sliderReleased">sliderReleased</db:link>()</db:para>
</db:td>
<db:td>
<db:para>the user releases the slider.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qabstractslider.xml#actionTriggered">actionTriggered</db:link>()</db:para>
</db:td>
<db:td>
<db:para>a slider action was triggered.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qabstractslider.xml#rangeChanged">rangeChanged</db:link>()</db:para>
</db:td>
<db:td>
<db:para>a the range has changed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link> provides a virtual <db:link xlink:href="qabstractslider.xml#sliderChange">sliderChange</db:link>() function that is well suited for updating the on-screen representation of sliders. By calling <db:link xlink:href="qabstractslider.xml#triggerAction">triggerAction</db:link>(), subclasses trigger slider actions. Two helper functions <db:link xlink:href="qstyle.xml#sliderPositionFromValue">QStyle::sliderPositionFromValue</db:link>() and <db:link xlink:href="qstyle.xml#sliderValueFromPosition">QStyle::sliderValueFromPosition</db:link>() help subclasses and styles to map screen coordinates to logical range values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link></db:member>
<db:member><db:link xlink:href="qslider.xml">QSlider</db:link></db:member>
<db:member><db:link xlink:href="qdial.xml">QDial</db:link></db:member>
<db:member><db:link xlink:href="qscrollbar.xml">QScrollBar</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-sliders-example.xml">Sliders Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="SliderAction-enum">
<db:title>enum QAbstractSlider::SliderAction</db:title>
<db:enumsynopsis>
<db:enumname>SliderAction</db:enumname>
<db:enumitem>
<db:enumidentifier>SliderNoAction</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SliderSingleStepAdd</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SliderSingleStepSub</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SliderPageStepAdd</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SliderPageStepSub</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SliderToMinimum</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SliderToMaximum</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SliderMove</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderNoAction</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderSingleStepAdd</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderSingleStepSub</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderPageStepAdd</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderPageStepSub</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderToMinimum</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderToMaximum</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderMove</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="SliderChange-enum">
<db:title>enum QAbstractSlider::SliderChange</db:title>
<db:enumsynopsis>
<db:enumname>SliderChange</db:enumname>
<db:enumitem>
<db:enumidentifier>SliderRangeChange</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SliderOrientationChange</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SliderStepsChange</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SliderValueChange</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderRangeChange</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderOrientationChange</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderStepsChange</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderValueChange</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="invertedAppearance-prop">
<db:title>invertedAppearance : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>invertedAppearance</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">invertedAppearance</db:synopsisinfo>
<db:synopsisinfo role="setter">setInvertedAppearance</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether or not a slider shows its values inverted.</db:para>
<db:para>If this property is <db:code>false</db:code> (the default), the minimum and maximum will be shown in its classic position for the inherited widget. If the value is true, the minimum and maximum appear at their opposite location.</db:para>
<db:para>Note: This property makes most sense for sliders and dials. For scroll bars, the visual effect of the scroll bar subcontrols depends on whether or not the styles understand inverted appearance; most styles ignore this property for scroll bars.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">invertedAppearance</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setInvertedAppearance</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="invertedControls-prop">
<db:title>invertedControls : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>invertedControls</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">invertedControls</db:synopsisinfo>
<db:synopsisinfo role="setter">setInvertedControls</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether or not the slider inverts its wheel and key events.</db:para>
<db:para>If this property is <db:code>false</db:code>, scrolling the mouse wheel &quot;up&quot; and using keys like page up will increase the slider's value towards its maximum. Otherwise pressing page up will move value towards the slider's minimum.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">invertedControls</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setInvertedControls</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maximum-prop">
<db:title>maximum : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>maximum</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">maximum</db:synopsisinfo>
<db:synopsisinfo role="setter">setMaximum</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the slider's maximum value</db:para>
<db:para>When setting this property, the <db:link xlink:href="qabstractslider.xml#minimum-prop">minimum</db:link> is adjusted if necessary to ensure that the range remains valid. Also the slider's current value is adjusted to be within the new range.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maximum</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMaximum</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="minimum-prop">
<db:title>minimum : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>minimum</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">minimum</db:synopsisinfo>
<db:synopsisinfo role="setter">setMinimum</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the sliders's minimum value</db:para>
<db:para>When setting this property, the <db:link xlink:href="qabstractslider.xml#maximum-prop">maximum</db:link> is adjusted if necessary to ensure that the range remains valid. Also the slider's current value is adjusted to be within the new range.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">minimum</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMinimum</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="orientation-prop">
<db:title>orientation : Qt::Orientation</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::Orientation</db:type>
<db:varname>orientation</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">orientation</db:synopsisinfo>
<db:synopsisinfo role="setter">setOrientation</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the orientation of the slider</db:para>
<db:para>The orientation must be <db:link xlink:href="qt.xml#Orientation-enum">Qt::Vertical</db:link> (the default) or <db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#Orientation-enum">Qt::Orientation</db:link></db:type> <db:emphasis role="bold">orientation</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOrientation</db:emphasis>(<db:emphasis>Qt::Orientation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="pageStep-prop">
<db:title>pageStep : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>pageStep</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pageStep</db:synopsisinfo>
<db:synopsisinfo role="setter">setPageStep</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the page step.</db:para>
<db:para>The larger of two natural steps that an abstract slider provides and typically corresponds to the user pressing PageUp or PageDown.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">pageStep</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPageStep</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractslider.xml#singleStep-prop">singleStep</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="singleStep-prop">
<db:title>singleStep : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>singleStep</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">singleStep</db:synopsisinfo>
<db:synopsisinfo role="setter">setSingleStep</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the single step.</db:para>
<db:para>The smaller of two natural steps that an abstract sliders provides and typically corresponds to the user pressing an arrow key.</db:para>
<db:para>If the property is modified during an auto repeating key event, behavior is undefined.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">singleStep</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSingleStep</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractslider.xml#pageStep-prop">pageStep</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliderDown-prop">
<db:title>sliderDown : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>sliderDown</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isSliderDown</db:synopsisinfo>
<db:synopsisinfo role="setter">setSliderDown</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the slider is pressed down.</db:para>
<db:para>The property is set by subclasses in order to let the abstract slider know whether or not <db:link xlink:href="qabstractslider.xml#tracking-prop">tracking</db:link> has any effect.</db:para>
<db:para>Changing the slider down property emits the <db:link xlink:href="qabstractslider.xml#sliderPressed">sliderPressed</db:link>() and <db:link xlink:href="qabstractslider.xml#sliderReleased">sliderReleased</db:link>() signals.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isSliderDown</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSliderDown</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="sliderPosition-prop">
<db:title>sliderPosition : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>sliderPosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">sliderPosition</db:synopsisinfo>
<db:synopsisinfo role="setter">setSliderPosition</db:synopsisinfo>
<db:synopsisinfo role="notifier">sliderMoved</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current slider position</db:para>
<db:para>If <db:link xlink:href="qabstractslider.xml#tracking-prop">tracking</db:link> is enabled (the default), this is identical to <db:link xlink:href="qabstractslider.xml#value-prop">value</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">sliderPosition</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSliderPosition</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml#sliderMoved">sliderMoved</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="tracking-prop">
<db:title>tracking : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>tracking</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">hasTracking</db:synopsisinfo>
<db:synopsisinfo role="setter">setTracking</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether slider tracking is enabled</db:para>
<db:para>If tracking is enabled (the default), the slider emits the <db:link xlink:href="qabstractslider.xml#valueChanged">valueChanged</db:link>() signal while the slider is being dragged. If tracking is disabled, the slider emits the <db:link xlink:href="qabstractslider.xml#valueChanged">valueChanged</db:link>() signal only when the user releases the slider.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">hasTracking</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTracking</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractslider.xml#sliderDown-prop">sliderDown</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value-prop">
<db:title>value : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>value</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">value</db:synopsisinfo>
<db:synopsisinfo role="setter">setValue</db:synopsisinfo>
<db:synopsisinfo role="notifier">valueChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the slider's current value</db:para>
<db:para>The slider forces the value to be within the legal range: <db:link xlink:href="qabstractslider.xml#minimum-prop">minimum</db:link> &lt;= <db:code>value</db:code> &lt;= <db:link xlink:href="qabstractslider.xml#maximum-prop">maximum</db:link>.</db:para>
<db:para>Changing the value also changes the <db:link xlink:href="qabstractslider.xml#sliderPosition-prop">sliderPosition</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">value</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setValue</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml#valueChanged">valueChanged</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractSlider">
<db:title>[explicit] QAbstractSlider::QAbstractSlider(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QAbstractSlider</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractSlider(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an abstract slider.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> argument is sent to the <db:link xlink:href="qwidget.xml">QWidget</db:link> constructor.</db:para>
<db:para>The <db:link xlink:href="qabstractslider.xml#minimum-prop">minimum</db:link> defaults to 0, the <db:link xlink:href="qabstractslider.xml#maximum-prop">maximum</db:link> to 99, with a <db:link xlink:href="qabstractslider.xml#singleStep-prop">singleStep</db:link> size of 1 and a <db:link xlink:href="qabstractslider.xml#pageStep-prop">pageStep</db:link> size of 10, and an initial <db:link xlink:href="qabstractslider.xml#value-prop">value</db:link> of 0.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractSlider">
<db:title>[virtual] QAbstractSlider::~QAbstractSlider()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAbstractSlider</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAbstractSlider()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the slider.</db:para>
</db:section>
<db:section xml:id="actionTriggered">
<db:title>void QAbstractSlider::actionTriggered(int <db:emphasis>action</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>actionTriggered</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>action</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void actionTriggered(int action)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the slider action <db:code role="parameter">action</db:code> is triggered. Actions are <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderSingleStepAdd</db:link>, <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderSingleStepSub</db:link>, <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderPageStepAdd</db:link>, <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderPageStepSub</db:link>, <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderToMinimum</db:link>, <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderToMaximum</db:link>, and <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderMove</db:link>.</db:para>
<db:para>When the signal is emitted, the <db:link xlink:href="qabstractslider.xml#sliderPosition-prop">sliderPosition</db:link> has been adjusted according to the action, but the <db:link xlink:href="qabstractslider.xml#value-prop">value</db:link> has not yet been propagated (meaning the <db:link xlink:href="qabstractslider.xml#valueChanged">valueChanged</db:link>() signal was not yet emitted), and the visual display has not been updated. In slots connected to this signal you can thus safely adjust any action by calling <db:link xlink:href="qabstractslider.xml#sliderPosition-prop">setSliderPosition</db:link>() yourself, based on both the action and the slider's value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractslider.xml#triggerAction">triggerAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QAbstractSlider::changeEvent(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>changeEvent</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void changeEvent(QEvent *ev) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QAbstractSlider::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QAbstractSlider::keyPressEvent(QKeyEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>keyPressEvent</db:methodname>
<db:methodparam>
<db:type>QKeyEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyPressEvent(QKeyEvent *ev) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyPressEvent" role="function">QWidget::keyPressEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="rangeChanged">
<db:title>void QAbstractSlider::rangeChanged(int <db:emphasis>min</db:emphasis>, int <db:emphasis>max</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>rangeChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>min</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>max</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void rangeChanged(int min, int max)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the slider range has changed, with <db:code role="parameter">min</db:code> being the new minimum, and <db:code role="parameter">max</db:code> being the new maximum.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractslider.xml#minimum-prop">minimum</db:link></db:member>
<db:member><db:link xlink:href="qabstractslider.xml#maximum-prop">maximum</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="repeatAction">
<db:title>[protected] QAbstractSlider::SliderAction QAbstractSlider::repeatAction() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractSlider::SliderAction</db:type>
<db:methodname>repeatAction</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractSlider::SliderAction repeatAction() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current repeat action.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractslider.xml#setRepeatAction">setRepeatAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRange">
<db:title>void QAbstractSlider::setRange(int <db:emphasis>min</db:emphasis>, int <db:emphasis>max</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRange</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>min</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>max</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRange(int min, int max)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the slider's minimum to <db:code role="parameter">min</db:code> and its maximum to <db:code role="parameter">max</db:code>.</db:para>
<db:para>If <db:code role="parameter">max</db:code> is smaller than <db:code role="parameter">min</db:code>, <db:code role="parameter">min</db:code> becomes the only legal value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractslider.xml#minimum-prop">minimum</db:link></db:member>
<db:member><db:link xlink:href="qabstractslider.xml#maximum-prop">maximum</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRepeatAction">
<db:title>[protected] void QAbstractSlider::setRepeatAction(QAbstractSlider::SliderAction <db:emphasis>action</db:emphasis>, int <db:emphasis>thresholdTime</db:emphasis> = 500, int <db:emphasis>repeatTime</db:emphasis> = 50)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRepeatAction</db:methodname>
<db:methodparam>
<db:type>QAbstractSlider::SliderAction</db:type>
<db:parameter>action</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>thresholdTime</db:parameter>
<db:initializer>500</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>repeatTime</db:parameter>
<db:initializer>50</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRepeatAction(QAbstractSlider::SliderAction action, int thresholdTime, int repeatTime)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets action <db:code role="parameter">action</db:code> to be triggered repetitively in intervals of <db:code role="parameter">repeatTime</db:code>, after an initial delay of <db:code role="parameter">thresholdTime</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractslider.xml#triggerAction">triggerAction</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractslider.xml#repeatAction">repeatAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliderChange">
<db:title>[virtual protected] void QAbstractSlider::sliderChange(QAbstractSlider::SliderChange <db:emphasis>change</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>sliderChange</db:methodname>
<db:methodparam>
<db:type>QAbstractSlider::SliderChange</db:type>
<db:parameter>change</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sliderChange(QAbstractSlider::SliderChange change)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplement this virtual function to track slider changes such as <db:link xlink:href="qabstractslider.xml#SliderChange-enum">SliderRangeChange</db:link>, <db:link xlink:href="qabstractslider.xml#SliderChange-enum">SliderOrientationChange</db:link>, <db:link xlink:href="qabstractslider.xml#SliderChange-enum">SliderStepsChange</db:link>, or <db:link xlink:href="qabstractslider.xml#SliderChange-enum">SliderValueChange</db:link>. The default implementation only updates the display and ignores the <db:code role="parameter">change</db:code> parameter.</db:para>
</db:section>
<db:section xml:id="sliderMoved">
<db:title>void QAbstractSlider::sliderMoved(int <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sliderMoved</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">sliderPosition</db:synopsisinfo>
<db:synopsisinfo role="signature">void sliderMoved(int value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when <db:link xlink:href="qabstractslider.xml#sliderDown-prop">sliderDown</db:link> is true and the slider moves. This usually happens when the user is dragging the slider. The <db:code role="parameter">value</db:code> is the new slider position.</db:para>
<db:para>This signal is emitted even when tracking is turned off.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qabstractslider.xml#sliderPosition-prop">sliderPosition</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractslider.xml#tracking-prop">setTracking</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractslider.xml#valueChanged">valueChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractslider.xml#sliderDown-prop">isSliderDown</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractslider.xml#sliderPressed">sliderPressed</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractslider.xml#sliderReleased">sliderReleased</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliderPressed">
<db:title>void QAbstractSlider::sliderPressed()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sliderPressed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sliderPressed()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user presses the slider with the mouse, or programmatically when <db:link xlink:href="qabstractslider.xml#sliderDown-prop">setSliderDown</db:link>(true) is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractslider.xml#sliderReleased">sliderReleased</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractslider.xml#sliderMoved">sliderMoved</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractslider.xml#sliderDown-prop">isSliderDown</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliderReleased">
<db:title>void QAbstractSlider::sliderReleased()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sliderReleased</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sliderReleased()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user releases the slider with the mouse, or programmatically when <db:link xlink:href="qabstractslider.xml#sliderDown-prop">setSliderDown</db:link>(false) is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractslider.xml#sliderPressed">sliderPressed</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractslider.xml#sliderMoved">sliderMoved</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractslider.xml#sliderDown-prop">sliderDown</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timerEvent">
<db:title>[override virtual protected] void QAbstractSlider::timerEvent(QTimerEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>timerEvent</db:methodname>
<db:methodparam>
<db:type>QTimerEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void timerEvent(QTimerEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#timerEvent" role="function">QObject::timerEvent(QTimerEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="triggerAction">
<db:title>void QAbstractSlider::triggerAction(QAbstractSlider::SliderAction <db:emphasis>action</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>triggerAction</db:methodname>
<db:methodparam>
<db:type>QAbstractSlider::SliderAction</db:type>
<db:parameter>action</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void triggerAction(QAbstractSlider::SliderAction action)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Triggers a slider <db:code role="parameter">action</db:code>. Possible actions are <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderSingleStepAdd</db:link>, <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderSingleStepSub</db:link>, <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderPageStepAdd</db:link>, <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderPageStepSub</db:link>, <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderToMinimum</db:link>, <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderToMaximum</db:link>, and <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderMove</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractslider.xml#actionTriggered">actionTriggered</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valueChanged">
<db:title>void QAbstractSlider::valueChanged(int <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>valueChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">value</db:synopsisinfo>
<db:synopsisinfo role="signature">void valueChanged(int value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the slider value has changed, with the new slider <db:code role="parameter">value</db:code> as argument.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qabstractslider.xml#value-prop">value</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[override virtual protected] void QAbstractSlider::wheelEvent(QWheelEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>wheelEvent</db:methodname>
<db:methodparam>
<db:type>QWheelEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void wheelEvent(QWheelEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#wheelEvent" role="function">QWidget::wheelEvent(QWheelEvent *event)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
