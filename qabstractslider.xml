<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QAbstractSlider Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link> class provides an integer value within a range.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractSlider</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdial.xml" xlink:role="class">QDial</db:link>, <db:link xlink:href="qscrollbar.xml" xlink:role="class">QScrollBar</db:link>, and <db:link xlink:href="qslider.xml" xlink:role="class">QSlider</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractSlider is part of <db:simplelist><db:member>abstractwidgets</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The class is designed as a common super class for widgets like <db:link xlink:href="qscrollbar.xml">QScrollBar</db:link>, <db:link xlink:href="qslider.xml">QSlider</db:link> and <db:link xlink:href="qdial.xml">QDial</db:link>.</db:para>
<db:para>Here are the main properties of the class:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>value: The bounded integer that <db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link> maintains.</db:para>
</db:listitem>
<db:listitem>
<db:para>minimum: The lowest possible value.</db:para>
</db:listitem>
<db:listitem>
<db:para>maximum: The highest possible value.</db:para>
</db:listitem>
<db:listitem>
<db:para>singleStep: The smaller of two natural steps that an abstract sliders provides and typically corresponds to the user pressing an arrow key.</db:para>
</db:listitem>
<db:listitem>
<db:para>pageStep: The larger of two natural steps that an abstract slider provides and typically corresponds to the user pressing PageUp or PageDown.</db:para>
</db:listitem>
<db:listitem>
<db:para>tracking: Whether slider tracking is enabled.</db:para>
</db:listitem>
<db:listitem>
<db:para>sliderPosition: The current position of the slider. If tracking is enabled (the default), this is identical to value.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Unity (1) may be viewed as a third step size. setValue() lets you set the current value to any integer in the allowed range, not just minimum() + <db:emphasis>n</db:emphasis> * singleStep() for integer values of <db:emphasis>n</db:emphasis>. Some widgets may allow the user to set any value at all; others may just provide multiples of singleStep() or pageStep().</db:para>
<db:para><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link> emits a comprehensive set of signals:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Signal</db:para>
</db:th>
<db:th>
<db:para>Emitted when</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qabstractslider.xml#valueChanged">valueChanged</db:link>()</db:para>
</db:td>
<db:td>
<db:para>the value has changed. The tracking determines whether this signal is emitted during user interaction.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qabstractslider.xml#sliderPressed">sliderPressed</db:link>()</db:para>
</db:td>
<db:td>
<db:para>the user starts to drag the slider.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qabstractslider.xml#sliderMoved">sliderMoved</db:link>()</db:para>
</db:td>
<db:td>
<db:para>the user drags the slider.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qabstractslider.xml#sliderReleased">sliderReleased</db:link>()</db:para>
</db:td>
<db:td>
<db:para>the user releases the slider.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qabstractslider.xml#actionTriggered">actionTriggered</db:link>()</db:para>
</db:td>
<db:td>
<db:para>a slider action was triggerd.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qabstractslider.xml#rangeChanged">rangeChanged</db:link>()</db:para>
</db:td>
<db:td>
<db:para>a the range has changed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link> provides a virtual <db:link xlink:href="qabstractslider.xml#sliderChange">sliderChange</db:link>() function that is well suited for updating the on-screen representation of sliders. By calling <db:link xlink:href="qabstractslider.xml#triggerAction">triggerAction</db:link>(), subclasses trigger slider actions. Two helper functions <db:link xlink:href="qstyle.xml#sliderPositionFromValue">QStyle::sliderPositionFromValue</db:link>() and <db:link xlink:href="qstyle.xml#sliderValueFromPosition">QStyle::sliderValueFromPosition</db:link>() help subclasses and styles to map screen coordinates to logical range values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link></db:member>
<db:member><db:link xlink:href="qslider.xml">QSlider</db:link></db:member>
<db:member><db:link xlink:href="qdial.xml">QDial</db:link></db:member>
<db:member><db:link xlink:href="qscrollbar.xml">QScrollBar</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-sliders-example.xml">Sliders Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="SliderAction-enum">
<db:title>enum QAbstractSlider::SliderAction</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderNoAction</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderSingleStepAdd</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderSingleStepSub</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderPageStepAdd</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderPageStepSub</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderToMinimum</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderToMaximum</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderMove</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="SliderChange-enum">
<db:title>enum QAbstractSlider::SliderChange</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderRangeChange</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderOrientationChange</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderStepsChange</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:emphasis>::SliderValueChange</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractSlider">
<db:title>[explicit] QAbstractSlider::QAbstractSlider(QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs an abstract slider.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> argument is sent to the <db:link xlink:href="qwidget.xml">QWidget</db:link> constructor.</db:para>
<db:para>The minimum defaults to 0, the maximum to 99, with a singleStep size of 1 and a pageStep size of 10, and an initial value of 0.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractSlider">
<db:title>[virtual noexcept] QAbstractSlider::~QAbstractSlider()</db:title>
<db:para>Destroys the slider.</db:para>
</db:section>
<db:section xml:id="actionTriggered">
<db:title>void QAbstractSlider::actionTriggered(int <db:emphasis>action</db:emphasis>)</db:title>
<db:para>This signal is emitted when the slider action <db:code role="parameter">action</db:code> is triggered. Actions are <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderSingleStepAdd</db:link>, <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderSingleStepSub</db:link>, <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderPageStepAdd</db:link>, <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderPageStepSub</db:link>, <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderToMinimum</db:link>, <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderToMaximum</db:link>, and <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderMove</db:link>.</db:para>
<db:para>When the signal is emitted, the sliderPosition has been adjusted according to the action, but the value has not yet been propagated (meaning the <db:link xlink:href="qabstractslider.xml#valueChanged">valueChanged</db:link>() signal was not yet emitted), and the visual display has not been updated. In slots connected to this signal you can thus safely adjust any action by calling setSliderPosition() yourself, based on both the action and the slider's value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractslider.xml#triggerAction">triggerAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QAbstractSlider::changeEvent(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QAbstractSlider::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QAbstractSlider::keyPressEvent(QKeyEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyPressEvent" role="function">QWidget::keyPressEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="rangeChanged">
<db:title>void QAbstractSlider::rangeChanged(int <db:emphasis>min</db:emphasis>, int <db:emphasis>max</db:emphasis>)</db:title>
<db:para>This signal is emitted when the slider range has changed, with <db:code role="parameter">min</db:code> being the new minimum, and <db:code role="parameter">max</db:code> being the new maximum.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>minimum</db:member>
<db:member>maximum</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="repeatAction">
<db:title>[protected] QAbstractSlider::SliderAction QAbstractSlider::repeatAction() const</db:title>
<db:para>Returns the current repeat action.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractslider.xml#setRepeatAction">setRepeatAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRange">
<db:title>void QAbstractSlider::setRange(int <db:emphasis>min</db:emphasis>, int <db:emphasis>max</db:emphasis>)</db:title>
<db:para>Sets the slider's minimum to <db:code role="parameter">min</db:code> and its maximum to <db:code role="parameter">max</db:code>.</db:para>
<db:para>If <db:code role="parameter">max</db:code> is smaller than <db:code role="parameter">min</db:code>, <db:code role="parameter">min</db:code> becomes the only legal value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>minimum</db:member>
<db:member>maximum</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRepeatAction">
<db:title>[protected] void QAbstractSlider::setRepeatAction(QAbstractSlider::SliderAction <db:emphasis>action</db:emphasis>, int <db:emphasis>thresholdTime</db:emphasis> = 500, int <db:emphasis>repeatTime</db:emphasis> = 50)</db:title>
<db:para>Sets action <db:code role="parameter">action</db:code> to be triggered repetitively in intervals of <db:code role="parameter">repeatTime</db:code>, after an initial delay of <db:code role="parameter">thresholdTime</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractslider.xml#triggerAction">triggerAction</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractslider.xml#repeatAction">repeatAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliderChange">
<db:title>[virtual protected] void QAbstractSlider::sliderChange(QAbstractSlider::SliderChange <db:emphasis>change</db:emphasis>)</db:title>
<db:para>Reimplement this virtual function to track slider changes such as <db:link xlink:href="qabstractslider.xml#SliderChange-enum">SliderRangeChange</db:link>, <db:link xlink:href="qabstractslider.xml#SliderChange-enum">SliderOrientationChange</db:link>, <db:link xlink:href="qabstractslider.xml#SliderChange-enum">SliderStepsChange</db:link>, or <db:link xlink:href="qabstractslider.xml#SliderChange-enum">SliderValueChange</db:link>. The default implementation only updates the display and ignores the <db:code role="parameter">change</db:code> parameter.</db:para>
</db:section>
<db:section xml:id="sliderMoved">
<db:title>void QAbstractSlider::sliderMoved(int <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This signal is emitted when sliderDown is true and the slider moves. This usually happens when the user is dragging the slider. The <db:code role="parameter">value</db:code> is the new slider position.</db:para>
<db:para>This signal is emitted even when tracking is turned off.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setTracking()</db:link></db:member>
<db:member><db:link xlink:href="qabstractslider.xml#valueChanged">valueChanged</db:link>()</db:member>
<db:member><db:link xlink:href="">isSliderDown()</db:link></db:member>
<db:member><db:link xlink:href="qabstractslider.xml#sliderPressed">sliderPressed</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractslider.xml#sliderReleased">sliderReleased</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliderPressed">
<db:title>void QAbstractSlider::sliderPressed()</db:title>
<db:para>This signal is emitted when the user presses the slider with the mouse, or programmatically when setSliderDown(true) is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractslider.xml#sliderReleased">sliderReleased</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractslider.xml#sliderMoved">sliderMoved</db:link>()</db:member>
<db:member><db:link xlink:href="">isSliderDown()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliderReleased">
<db:title>void QAbstractSlider::sliderReleased()</db:title>
<db:para>This signal is emitted when the user releases the slider with the mouse, or programmatically when setSliderDown(false) is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractslider.xml#sliderPressed">sliderPressed</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractslider.xml#sliderMoved">sliderMoved</db:link>()</db:member>
<db:member>sliderDown</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timerEvent">
<db:title>[override virtual protected] void QAbstractSlider::timerEvent(QTimerEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#timerEvent" role="function">QObject::timerEvent(QTimerEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="triggerAction">
<db:title>void QAbstractSlider::triggerAction(QAbstractSlider::SliderAction <db:emphasis>action</db:emphasis>)</db:title>
<db:para>Triggers a slider <db:code role="parameter">action</db:code>. Possible actions are <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderSingleStepAdd</db:link>, <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderSingleStepSub</db:link>, <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderPageStepAdd</db:link>, <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderPageStepSub</db:link>, <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderToMinimum</db:link>, <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderToMaximum</db:link>, and <db:link xlink:href="qabstractslider.xml#SliderAction-enum">SliderMove</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractslider.xml#actionTriggered">actionTriggered</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valueChanged">
<db:title>void QAbstractSlider::valueChanged(int <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This signal is emitted when the slider value has changed, with the new slider <db:code role="parameter">value</db:code> as argument.</db:para>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[override virtual protected] void QAbstractSlider::wheelEvent(QWheelEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#wheelEvent" role="function">QWidget::wheelEvent(QWheelEvent *event)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
