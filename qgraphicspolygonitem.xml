<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGraphicsPolygonItem Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicspolygonitem.xml">QGraphicsPolygonItem</db:link> class provides a polygon item that you can add to a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsPolygonItem</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractgraphicsshapeitem.xml" xlink:role="class">QAbstractGraphicsShapeItem</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsPolygonItem is part of <db:simplelist><db:member>graphicsview-api</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>To set the item's polygon, pass a <db:link xlink:href="qpolygonf.xml">QPolygonF</db:link> to <db:link xlink:href="qgraphicspolygonitem.xml">QGraphicsPolygonItem</db:link>'s constructor, or call the <db:link xlink:href="qgraphicspolygonitem.xml#setPolygon">setPolygon</db:link>() function. The <db:link xlink:href="qgraphicspolygonitem.xml#polygon">polygon</db:link>() function returns the current polygon.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/graphicsview-polygonitem.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:link xlink:href="qgraphicspolygonitem.xml">QGraphicsPolygonItem</db:link> uses the polygon and the pen width to provide a reasonable implementation of <db:link xlink:href="qgraphicspolygonitem.xml#boundingRect">boundingRect</db:link>(), <db:link xlink:href="qgraphicspolygonitem.xml#shape">shape</db:link>(), and <db:link xlink:href="qgraphicspolygonitem.xml#contains">contains</db:link>(). The <db:link xlink:href="qgraphicspolygonitem.xml#paint">paint</db:link>() function draws the polygon using the item's associated pen and brush, which you can set by calling the <db:link xlink:href="qabstractgraphicsshapeitem.xml#setPen">setPen</db:link>() and <db:link xlink:href="qabstractgraphicsshapeitem.xml#setBrush">setBrush</db:link>() functions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicspathitem.xml">QGraphicsPathItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsrectitem.xml">QGraphicsRectItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsellipseitem.xml">QGraphicsEllipseItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicstextitem.xml">QGraphicsTextItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicslineitem.xml">QGraphicsLineItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link></db:member>
<db:member><db:link xlink:href="graphicsview.xml">Graphics View Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="anonymous-enum">
<db:title>enum QGraphicsPolygonItem::anonymous</db:title>
<db:enumsynopsis>
<db:enumname>anonymous</db:enumname>
<db:enumitem>
<db:enumidentifier>Type</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>The value returned by the virtual <db:link xlink:href="qgraphicspolygonitem.xml#type">type</db:link>() function.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicspolygonitem.xml">QGraphicsPolygonItem</db:link></db:emphasis>::Type</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>A graphics polygon item</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGraphicsPolygonItem">
<db:title>[explicit] QGraphicsPolygonItem::QGraphicsPolygonItem(QGraphicsItem *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QGraphicsPolygonItem</db:methodname>
<db:methodparam>
<db:type>QGraphicsItem *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsPolygonItem(QGraphicsItem *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qgraphicspolygonitem.xml">QGraphicsPolygonItem</db:link>. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qabstractgraphicsshapeitem.xml">QAbstractGraphicsShapeItem</db:link>'s constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">QGraphicsScene::addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QGraphicsPolygonItem-1">
<db:title>[explicit] QGraphicsPolygonItem::QGraphicsPolygonItem(const QPolygonF &amp;<db:emphasis>polygon</db:emphasis>, QGraphicsItem *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QGraphicsPolygonItem</db:methodname>
<db:methodparam>
<db:type>const QPolygonF &amp;</db:type>
<db:parameter>polygon</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGraphicsItem *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsPolygonItem(const QPolygonF &amp;polygon, QGraphicsItem *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qgraphicspolygonitem.xml">QGraphicsPolygonItem</db:link> with <db:code role="parameter">polygon</db:code> as the default polygon. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qabstractgraphicsshapeitem.xml">QAbstractGraphicsShapeItem</db:link>'s constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">QGraphicsScene::addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QGraphicsPolygonItem">
<db:title>[virtual] QGraphicsPolygonItem::~QGraphicsPolygonItem()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QGraphicsPolygonItem</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGraphicsPolygonItem()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qgraphicspolygonitem.xml">QGraphicsPolygonItem</db:link>.</db:para>
</db:section>
<db:section xml:id="boundingRect">
<db:title>[override virtual] QRectF QGraphicsPolygonItem::boundingRect() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>boundingRect</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF boundingRect() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#boundingRect" role="function">QGraphicsItem::boundingRect() const</db:link>.</db:para>
</db:section>
<db:section xml:id="contains">
<db:title>[override virtual] bool QGraphicsPolygonItem::contains(const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(const QPointF &amp;point) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#contains" role="function">QGraphicsItem::contains(const QPointF &amp;point) const</db:link>.</db:para>
</db:section>
<db:section xml:id="fillRule">
<db:title>Qt::FillRule QGraphicsPolygonItem::fillRule() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::FillRule</db:type>
<db:methodname>fillRule</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::FillRule fillRule() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the fill rule of the polygon. The default fill rule is <db:link xlink:href="qt.xml#FillRule-enum">Qt::OddEvenFill</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicspolygonitem.xml#setFillRule">setFillRule</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#fillRule">QPainterPath::fillRule</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawPolygon">QPainter::drawPolygon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isObscuredBy">
<db:title>[override virtual] bool QGraphicsPolygonItem::isObscuredBy(const QGraphicsItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isObscuredBy</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isObscuredBy(const QGraphicsItem *item) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractgraphicsshapeitem.xml#isObscuredBy" role="function">QAbstractGraphicsShapeItem::isObscuredBy(const QGraphicsItem *item) const</db:link>.</db:para>
</db:section>
<db:section xml:id="opaqueArea">
<db:title>[override virtual] QPainterPath QGraphicsPolygonItem::opaqueArea() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QPainterPath</db:type>
<db:methodname>opaqueArea</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainterPath opaqueArea() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractgraphicsshapeitem.xml#opaqueArea" role="function">QAbstractGraphicsShapeItem::opaqueArea() const</db:link>.</db:para>
</db:section>
<db:section xml:id="paint">
<db:title>[override virtual] void QGraphicsPolygonItem::paint(QPainter *<db:emphasis>painter</db:emphasis>, const QStyleOptionGraphicsItem *<db:emphasis>option</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paint</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStyleOptionGraphicsItem *</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#paint" role="function">QGraphicsItem::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)</db:link>.</db:para>
</db:section>
<db:section xml:id="polygon">
<db:title>QPolygonF QGraphicsPolygonItem::polygon() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>polygon</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF polygon() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item's polygon, or an empty polygon if no polygon has been set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicspolygonitem.xml#setPolygon">setPolygon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFillRule">
<db:title>void QGraphicsPolygonItem::setFillRule(Qt::FillRule <db:emphasis>rule</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFillRule</db:methodname>
<db:methodparam>
<db:type>Qt::FillRule</db:type>
<db:parameter>rule</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFillRule(Qt::FillRule rule)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the fill rule of the polygon to <db:code role="parameter">rule</db:code>. The default fill rule is <db:link xlink:href="qt.xml#FillRule-enum">Qt::OddEvenFill</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicspolygonitem.xml#fillRule">fillRule</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#fillRule">QPainterPath::fillRule</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawPolygon">QPainter::drawPolygon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPolygon">
<db:title>void QGraphicsPolygonItem::setPolygon(const QPolygonF &amp;<db:emphasis>polygon</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPolygon</db:methodname>
<db:methodparam>
<db:type>const QPolygonF &amp;</db:type>
<db:parameter>polygon</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPolygon(const QPolygonF &amp;polygon)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item's polygon to be the given <db:code role="parameter">polygon</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicspolygonitem.xml#polygon">polygon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shape">
<db:title>[override virtual] QPainterPath QGraphicsPolygonItem::shape() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QPainterPath</db:type>
<db:methodname>shape</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainterPath shape() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#shape" role="function">QGraphicsItem::shape() const</db:link>.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>[override virtual] int QGraphicsPolygonItem::type() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int type() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#type" role="function">QGraphicsItem::type() const</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
