<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Widgets Tutorial - Nested Layouts</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Widgets Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Just as widgets can contain other widgets, layouts can be used to provide different levels of grouping for widgets. Here, we want to display a label alongside a line edit at the top of a window, above a table view showing the results of a query.</db:para>
<db:para>We achieve this by creating two layouts: queryLayout is a <db:link xlink:href="qhboxlayout.xml">QHBoxLayout</db:link> that contains <db:link xlink:href="qlabel.xml">QLabel</db:link> and <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> widgets placed side-by-side; mainLayout is a <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link> that contains queryLayout and a <db:link xlink:href="qtableview.xml">QTableView</db:link> arranged vertically.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:programlisting language="cpp">#include &lt;QtWidgets&gt;

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    QWidget window;

    QLabel *queryLabel = new QLabel(
        QApplication::translate(&quot;nestedlayouts&quot;, &quot;Query:&quot;));
    QLineEdit *queryEdit = new QLineEdit();
    QTableView *resultView = new QTableView();

    QHBoxLayout *queryLayout = new QHBoxLayout();
    queryLayout-&gt;addWidget(queryLabel);
    queryLayout-&gt;addWidget(queryEdit);

    QVBoxLayout *mainLayout = new QVBoxLayout();
    mainLayout-&gt;addLayout(queryLayout);
    mainLayout-&gt;addWidget(resultView);
    window.setLayout(mainLayout);

    // Set up the model and configure the view...
    window.setWindowTitle(
        QApplication::translate(&quot;nestedlayouts&quot;, &quot;Nested layouts&quot;));
    window.show();
    return app.exec();
}
</db:programlisting>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/widgets-tutorial-nestedlayouts.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Note that we call the mainLayout's <db:link xlink:href="qboxlayout.xml#addLayout">addLayout</db:link>() function to insert the queryLayout above the resultView table.</db:para>
<db:para>We have omitted the code that sets up the model containing the data shown by the <db:link xlink:href="qtableview.xml">QTableView</db:link> widget, resultView. For completeness, we show this below.</db:para>
<db:para>As well as <db:link xlink:href="qhboxlayout.xml">QHBoxLayout</db:link> and <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link>, Qt also provides <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link> and <db:link xlink:href="qformlayout.xml">QFormLayout</db:link> classes to help with more complex user interfaces. These can be seen if you run Qt Widgets Designer.</db:para>
<db:section xml:id="setting-up-the-model">
<db:title>Setting up the Model</db:title>
<db:para>In the code above, we did not show where the table's data came from because we wanted to concentrate on the use of layouts. Here, we see that the model holds a number of items corresponding to rows, each of which is set up to contain data for two columns.</db:para>
<db:programlisting language="cpp">    QStandardItemModel model;
    model.setHorizontalHeaderLabels({ QApplication::translate(&quot;nestedlayouts&quot;, &quot;Name&quot;),
                                      QApplication::translate(&quot;nestedlayouts&quot;, &quot;Office&quot;) });

    const QStringList rows[] = {
        QStringList{ QStringLiteral(&quot;Verne Nilsen&quot;), QStringLiteral(&quot;123&quot;) },
        QStringList{ QStringLiteral(&quot;Carlos Tang&quot;), QStringLiteral(&quot;77&quot;) },
        QStringList{ QStringLiteral(&quot;Bronwyn Hawcroft&quot;), QStringLiteral(&quot;119&quot;) },
        QStringList{ QStringLiteral(&quot;Alessandro Hanssen&quot;), QStringLiteral(&quot;32&quot;) },
        QStringList{ QStringLiteral(&quot;Andrew John Bakken&quot;), QStringLiteral(&quot;54&quot;) },
        QStringList{ QStringLiteral(&quot;Vanessa Weatherley&quot;), QStringLiteral(&quot;85&quot;) },
        QStringList{ QStringLiteral(&quot;Rebecca Dickens&quot;), QStringLiteral(&quot;17&quot;) },
        QStringList{ QStringLiteral(&quot;David Bradley&quot;), QStringLiteral(&quot;42&quot;) },
        QStringList{ QStringLiteral(&quot;Knut Walters&quot;), QStringLiteral(&quot;25&quot;) },
        QStringList{ QStringLiteral(&quot;Andrea Jones&quot;), QStringLiteral(&quot;34&quot;) }
    };

    QList&lt;QStandardItem *&gt; items;
    for (const QStringList &amp;row : rows) {
        items.clear();
        for (const QString &amp;text : row)
            items.append(new QStandardItem(text));
        model.appendRow(items);
    }

    resultView-&gt;setModel(&amp;model);
    resultView-&gt;verticalHeader()-&gt;hide();
    resultView-&gt;horizontalHeader()-&gt;setStretchLastSection(true);
</db:programlisting>
<db:para>The use of models and views is covered in the <db:link xlink:href="examples-itemviews.xml">Item Views Examples</db:link> and in the <db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link> overview.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/tutorials/widgets/nestedlayouts?h=6.9">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
