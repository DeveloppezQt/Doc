<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Protobuf</db:title>
<db:productname>QtProtobuf</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Protobuf Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Protobuf Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt Protobuf <db:link xlink:href="qtprotobufgen-qt-tool.xml">generator plugin</db:link> generates Qt-based classes from <db:code>.proto</db:code> files. You can use the classes to serialize and deserialize their associated protobuf messages.</db:para>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:section xml:id="what-are-protocol-buffers">
<db:title>What are protocol buffers?</db:title>
<db:para>Protocol buffers are a language-neutral, platform-neutral, and extensible mechanism for serializing structured data, which is compact and easy to use:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A user defines the structure of data in <db:code>.proto</db:code> files.</db:para>
</db:listitem>
<db:listitem>
<db:para>Proto compiler is invoked at build time on <db:code>.proto</db:code> files to generate code in various programming languages.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The provided format is suitable for network traffic or long-term data storage.</db:para>
</db:section>
<db:section xml:id="which-problems-do-protocol-buffers-solve">
<db:title>Which problems do protocol buffers solve?</db:title>
<db:para>Protocol buffers provide a serialization format for packets of typed and structured data that are up to a few megabytes in size. Moreover, it can be extended with new information without invalidating existing data or requiring code to be updated. For more information, see <db:link xlink:href="https://protobuf.dev/">Protocol Buffers Overview</db:link>.</db:para>
</db:section>
<db:section xml:id="what-are-the-benefits-of-using-qt-protobuf">
<db:title>What are the benefits of using Qt Protobuf?</db:title>
<db:para>You can use a Protocol buffers mechanism in any Qt-based project:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>No need to call a protocol buffer compiler explicitly.</db:para>
</db:listitem>
<db:listitem>
<db:para>No need to integrate generated code into project tree manually.</db:para>
</db:listitem>
<db:listitem>
<db:para>Convenient serialization and deserialization API.</db:para>
</db:listitem>
<db:listitem>
<db:para>Integrated properties mechanism for generated protobuf messages.</db:para>
</db:listitem>
<db:listitem>
<db:para>Integrated gRPC-client support (see <db:link xlink:href="qtgrpc-index.xml">QtGrpc module</db:link>).</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="incoming-features">
<db:title>Incoming features</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Enabling using Qt Core and Qt GUI types as a part of *.proto schema.</db:para>
</db:listitem>
<db:listitem>
<db:para>Enabling gRPC-server support.</db:para>
</db:listitem>
<db:listitem>
<db:para>Enabling QML-types support for generated protobuf messages.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="using-qt-protobuf">
<db:title>Using Qt Protobuf</db:title>
<db:para>Google protocol buffers provide a generator called <db:code>protoc</db:code> that supports extensions. <db:link xlink:href="qtprotobufgen-qt-tool.xml">The qtprotobufgen Tool</db:link> is an extension for <db:code>protoc</db:code> and requires that you install <db:code>protoc</db:code> on your host system. For more information about the installation, see <db:link xlink:href="https://grpc.io/docs/protoc-installation/">Protoc Installation</db:link>.</db:para>
<db:para>Example of installation for Linux, using <db:emphasis>apt</db:emphasis>:</db:para>
<db:programlisting language="cpp" role="bad">apt install -y protobuf-compiler
protoc --version  # Ensure compiler version is 3+
</db:programlisting>
<db:para>For more information about component API usage, see <db:emphasis>CMake API</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="cmake-api">
<db:title>CMake API</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="cmake-commands-qtprotobuf.xml">CMake Commands in Qt6 Protobuf</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="class-documentation">
<db:title>Class Documentation</db:title>
<db:para><db:link xlink:href="qtprotobuf-module.xml">C++ Classes</db:link></db:para>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtprotobuf-examples.xml">Qt Protobuf Examples</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
