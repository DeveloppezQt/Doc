<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QJSEngine Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qjsengine.xml">QJSEngine</db:link> class provides an environment for evaluating JavaScript code.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="17-qdoc-commands-thread.xml#reentrant">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QJSEngine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qqmlengine.xml" xlink:role="class">QQmlEngine</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QJSEngine is part of <db:simplelist><db:member><db:link xlink:href="qtjavascript.xml">Scripting Classes and Overviews</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>mainclass</db:code></db:emphasis></db:para>
<db:section xml:id="evaluating-scripts">
<db:title>Evaluating Scripts</db:title>
<db:para>Use <db:link xlink:href="qjsengine.xml#evaluate">evaluate</db:link>() to evaluate script code.</db:para>
<db:programlisting language="cpp">QJSEngine myEngine;
QJSValue three = myEngine.evaluate(&quot;1 + 2&quot;);
</db:programlisting>
<db:para><db:link xlink:href="qjsengine.xml#evaluate">evaluate</db:link>() returns a <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> that holds the result of the evaluation. The <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> class provides functions for converting the result to various C++ types (e.g. <db:link xlink:href="qjsvalue.xml#toString">QJSValue::toString</db:link>() and <db:link xlink:href="qjsvalue.xml#toNumber">QJSValue::toNumber</db:link>()).</db:para>
<db:para>The following code snippet shows how a script function can be defined and then invoked from C++ using <db:link xlink:href="qjsvalue.xml#call">QJSValue::call</db:link>():</db:para>
<db:programlisting language="cpp">QJSValue fun = myEngine.evaluate(&quot;(function(a, b) { return a + b; })&quot;);
QJSValueList args;
args &lt;&lt; 1 &lt;&lt; 2;
QJSValue threeAgain = fun.call(QJSValue(), args);
</db:programlisting>
<db:para>As can be seen from the above snippets, a script is provided to the engine in the form of a string. One common way of loading scripts is by reading the contents of a file and passing it to <db:link xlink:href="qjsengine.xml#evaluate">evaluate</db:link>():</db:para>
<db:programlisting language="cpp">QString fileName = &quot;helloworld.qs&quot;;
QFile scriptFile(fileName);
if (!scriptFile.open(QIODevice::ReadOnly))
    // handle error
QTextStream stream(&amp;scriptFile);
QString contents = stream.readAll();
scriptFile.close();
myEngine.evaluate(contents, fileName);
</db:programlisting>
<db:para>Here we pass the name of the file as the second argument to <db:link xlink:href="qjsengine.xml#evaluate">evaluate</db:link>(). This does not affect evaluation in any way; the second argument is a general-purpose string that is used to identify the script for debugging purposes.</db:para>
</db:section>
<db:section xml:id="engine-configuration">
<db:title>Engine Configuration</db:title>
<db:para>The <db:link xlink:href="qjsengine.xml#globalObject">globalObject</db:link>() function returns the <db:emphasis role="bold">Global Object</db:emphasis> associated with the script engine. Properties of the Global Object are accessible from any script code (i.e. they are global variables). Typically, before evaluating &quot;user&quot; scripts, you will want to configure a script engine by adding one or more properties to the Global Object:</db:para>
<db:programlisting language="cpp">myEngine.globalObject().setProperty(&quot;myNumber&quot;, 123);
...
QJSValue myNumberPlusOne = myEngine.evaluate(&quot;myNumber + 1&quot;);
</db:programlisting>
<db:para>Adding custom properties to the scripting environment is one of the standard means of providing a scripting API that is specific to your application. Usually these custom properties are objects created by the <db:link xlink:href="qjsengine.xml#newQObject">newQObject</db:link>() or <db:link xlink:href="qjsengine.xml#newObject">newObject</db:link>() functions.</db:para>
</db:section>
<db:section xml:id="script-exceptions">
<db:title>Script Exceptions</db:title>
<db:para><db:link xlink:href="qjsengine.xml#evaluate">evaluate</db:link>() can throw a script exception (e.g. due to a syntax error); in that case, the return value is the value that was thrown (typically an <db:code>Error</db:code> object). You can check whether the evaluation caused an exception by calling isError() on the return value. If isError() returns true, you can call toString() on the error object to obtain an error message.</db:para>
<db:programlisting language="cpp">QJSValue result = myEngine.evaluate(...);
if (result.isError())
    qDebug() &lt;&lt; &quot;uncaught exception:&quot; &lt;&lt; result.toString();
</db:programlisting>
</db:section>
<db:section xml:id="script-object-creation">
<db:title>Script Object Creation</db:title>
<db:para>Use <db:link xlink:href="qjsengine.xml#newObject">newObject</db:link>() to create a JavaScript object; this is the C++ equivalent of the script statement <db:code>new Object()</db:code>. You can use the object-specific functionality in <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> to manipulate the script object (e.g. <db:link xlink:href="qjsvalue.xml#setProperty">QJSValue::setProperty</db:link>()). Similarly, use <db:link xlink:href="qjsengine.xml#newArray">newArray</db:link>() to create a JavaScript array object.</db:para>
</db:section>
<db:section xml:id="qobject-integration">
<db:title>QObject Integration</db:title>
<db:para>Use <db:link xlink:href="qjsengine.xml#newQObject">newQObject</db:link>() to wrap a <db:link xlink:href="qobject.xml">QObject</db:link> (or subclass) pointer. <db:link xlink:href="qjsengine.xml#newQObject">newQObject</db:link>() returns a proxy script object; properties, children, and signals and slots of the <db:link xlink:href="qobject.xml">QObject</db:link> are available as properties of the proxy object. No binding code is needed because it is done dynamically using the Qt meta object system.</db:para>
<db:programlisting language="cpp">QPushButton button;
QJSValue scriptButton = myEngine.newQObject(&amp;button);
myEngine.globalObject().setProperty(&quot;button&quot;, scriptButton);

myEngine.evaluate(&quot;button.checkable = true&quot;);

qDebug() &lt;&lt; scriptButton.property(&quot;checkable&quot;).toBoolean();
scriptButton.property(&quot;show&quot;).call(); // call the show() slot
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml">QJSValue</db:link></db:member>
<db:member><db:link xlink:href="qtjavascript.xml">Making Applications Scriptable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QJSEngine">
<db:title>QJSEngine::QJSEngine()</db:title>
<db:para>Constructs a <db:link xlink:href="qjsengine.xml">QJSEngine</db:link> object.</db:para>
<db:para>The <db:link xlink:href="qjsengine.xml#globalObject">globalObject</db:link>() is initialized to have properties as described in <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link>, Section 15.1.</db:para>
</db:section>
<db:section xml:id="QJSEngine-1">
<db:title>[explicit] QJSEngine::QJSEngine(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qjsengine.xml">QJSEngine</db:link> object with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The <db:link xlink:href="qjsengine.xml#globalObject">globalObject</db:link>() is initialized to have properties as described in <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link>, Section 15.1.</db:para>
</db:section>
<db:section xml:id="dtor.QJSEngine">
<db:title>[virtual noexcept] QJSEngine::~QJSEngine()</db:title>
<db:para>Destroys this <db:link xlink:href="qjsengine.xml">QJSEngine</db:link>.</db:para>
<db:para>Garbage is not collected from the persistent JS heap during <db:link xlink:href="qjsengine.xml">QJSEngine</db:link> destruction. If you need all memory freed, call <db:link xlink:href="qjsengine.xml#collectGarbage">collectGarbage</db:link> manually right before destroying the <db:link xlink:href="qjsengine.xml">QJSEngine</db:link>.</db:para>
</db:section>
<db:section xml:id="collectGarbage">
<db:title>void QJSEngine::collectGarbage()</db:title>
<db:para>Runs the garbage collector.</db:para>
<db:para>The garbage collector will attempt to reclaim memory by locating and disposing of objects that are no longer reachable in the script environment.</db:para>
<db:para>Normally you don't need to call this function; the garbage collector will automatically be invoked when the <db:link xlink:href="qjsengine.xml">QJSEngine</db:link> decides that it's wise to do so (i.e. when a certain number of new objects have been created). However, you can call this function to explicitly request that garbage collection should be performed as soon as possible.</db:para>
</db:section>
<db:section xml:id="evaluate">
<db:title>QJSValue QJSEngine::evaluate(const QString &amp;<db:emphasis>program</db:emphasis>, const QString &amp;<db:emphasis>fileName</db:emphasis> = QString(), int <db:emphasis>lineNumber</db:emphasis> = 1)</db:title>
<db:para>Evaluates <db:code role="parameter">program</db:code>, using <db:code role="parameter">lineNumber</db:code> as the base line number, and returns the result of the evaluation.</db:para>
<db:para>The script code will be evaluated in the context of the global object.</db:para>
<db:para>The evaluation of <db:code role="parameter">program</db:code> can cause an exception in the engine; in this case the return value will be the exception that was thrown (typically an <db:code>Error</db:code> object; see <db:link xlink:href="qjsvalue.xml#isError">QJSValue::isError</db:link>()).</db:para>
<db:para><db:code role="parameter">lineNumber</db:code> is used to specify a starting line number for <db:code role="parameter">program</db:code>; line number information reported by the engine that pertains to this evaluation will be based on this argument. For example, if <db:code role="parameter">program</db:code> consists of two lines of code, and the statement on the second line causes a script exception, the exception line number would be <db:code role="parameter">lineNumber</db:code> plus one. When no starting line number is specified, line numbers will be 1-based.</db:para>
<db:para><db:code role="parameter">fileName</db:code> is used for error reporting. For example, in error objects the file name is accessible through the &quot;fileName&quot; property if it is provided with this function.</db:para>
<db:note>
<db:para>If an exception was thrown and the exception value is not an Error instance (i.e., <db:link xlink:href="qjsvalue.xml#isError">QJSValue::isError</db:link>() returns <db:code>false</db:code>), the exception value will still be returned, but there is currently no API for detecting that an exception did occur in this case.</db:para>
</db:note>
</db:section>
<db:section xml:id="globalObject">
<db:title>QJSValue QJSEngine::globalObject() const</db:title>
<db:para>Returns this engine's Global Object.</db:para>
<db:para>By default, the Global Object contains the built-in objects that are part of <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link>, such as Math, Date and String. Additionally, you can set properties of the Global Object to make your own extensions available to all script code. Non-local variables in script code will be created as properties of the Global Object, as well as local variables in global code.</db:para>
</db:section>
<db:section xml:id="newArray">
<db:title>QJSValue QJSEngine::newArray(uint <db:emphasis>length</db:emphasis> = 0)</db:title>
<db:para>Creates a JavaScript object of class Array with the given <db:code role="parameter">length</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsengine.xml#newObject">newObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="newObject">
<db:title>QJSValue QJSEngine::newObject()</db:title>
<db:para>Creates a JavaScript object of class Object.</db:para>
<db:para>The prototype of the created object will be the Object prototype object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsengine.xml#newArray">newArray</db:link>()</db:member>
<db:member><db:link xlink:href="qjsvalue.xml#setProperty">QJSValue::setProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="newQObject">
<db:title>QJSValue QJSEngine::newQObject(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:para>Creates a JavaScript object that wraps the given <db:link xlink:href="qobject.xml">QObject</db:link> <db:code role="parameter">object</db:code>, using JavaScriptOwnership.</db:para>
<db:para>Signals and slots, properties and children of <db:code role="parameter">object</db:code> are available as properties of the created <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>.</db:para>
<db:para>If <db:code role="parameter">object</db:code> is a null pointer, this function returns a null value.</db:para>
<db:para>If a default prototype has been registered for the <db:code role="parameter">object</db:code>'s class (or its superclass, recursively), the prototype of the new script object will be set to be that default prototype.</db:para>
<db:para>If the given <db:code role="parameter">object</db:code> is deleted outside of the engine's control, any attempt to access the deleted <db:link xlink:href="qobject.xml">QObject</db:link>'s members through the JavaScript wrapper object (either by script code or C++) will result in a script exception.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#toQObject">QJSValue::toQObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
