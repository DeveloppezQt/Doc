<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SQL Widget Mapper Example</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The SQL Widget Mapper example shows how to use a map information from a database to widgets on a form.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;
#include &lt;QtSql&gt;

#include &quot;window.h&quot;

Window::Window(QWidget *parent)
    : QWidget(parent)
{
    setupModel();

    nameLabel = new QLabel(tr(&quot;Na&amp;me:&quot;));
    nameEdit = new QLineEdit();
    addressLabel = new QLabel(tr(&quot;&amp;Address:&quot;));
    addressEdit = new QTextEdit();
    typeLabel = new QLabel(tr(&quot;&amp;Type:&quot;));
    typeComboBox = new QComboBox();
    nextButton = new QPushButton(tr(&quot;&amp;Next&quot;));
    previousButton = new QPushButton(tr(&quot;&amp;Previous&quot;));

    nameLabel-&gt;setBuddy(nameEdit);
    addressLabel-&gt;setBuddy(addressEdit);
    typeLabel-&gt;setBuddy(typeComboBox);

    QSqlTableModel *relModel = model-&gt;relationModel(typeIndex);
    typeComboBox-&gt;setModel(relModel);
    typeComboBox-&gt;setModelColumn(relModel-&gt;fieldIndex(&quot;description&quot;));

    mapper = new QDataWidgetMapper(this);
    mapper-&gt;setModel(model);
    mapper-&gt;setItemDelegate(new QSqlRelationalDelegate(this));
    mapper-&gt;addMapping(nameEdit, model-&gt;fieldIndex(&quot;name&quot;));
    mapper-&gt;addMapping(addressEdit, model-&gt;fieldIndex(&quot;address&quot;));
    mapper-&gt;addMapping(typeComboBox, typeIndex);

    connect(previousButton, SIGNAL(clicked()),
            mapper, SLOT(toPrevious()));
    connect(nextButton, SIGNAL(clicked()),
            mapper, SLOT(toNext()));
    connect(mapper, SIGNAL(currentIndexChanged(int)),
            this, SLOT(updateButtons(int)));

    QGridLayout *layout = new QGridLayout();
    layout-&gt;addWidget(nameLabel, 0, 0, 1, 1);
    layout-&gt;addWidget(nameEdit, 0, 1, 1, 1);
    layout-&gt;addWidget(previousButton, 0, 2, 1, 1);
    layout-&gt;addWidget(addressLabel, 1, 0, 1, 1);
    layout-&gt;addWidget(addressEdit, 1, 1, 2, 1);
    layout-&gt;addWidget(nextButton, 1, 2, 1, 1);
    layout-&gt;addWidget(typeLabel, 3, 0, 1, 1);
    layout-&gt;addWidget(typeComboBox, 3, 1, 1, 1);
    setLayout(layout);

    setWindowTitle(tr(&quot;SQL Widget Mapper&quot;));
    mapper-&gt;toFirst();
}

void Window::setupModel()
{
    QSqlDatabase db = QSqlDatabase::addDatabase(&quot;QSQLITE&quot;);
    db.setDatabaseName(&quot;:memory:&quot;);
    if (!db.open()) {
        QMessageBox::critical(0, tr(&quot;Cannot open database&quot;),
            tr(&quot;Unable to establish a database connection.\n&quot;
               &quot;This example needs SQLite support. Please read &quot;
               &quot;the Qt SQL driver documentation for information how &quot;
               &quot;to build it.&quot;), QMessageBox::Cancel);
        return;
    }

    QSqlQuery query;
    query.exec(&quot;create table person (id int primary key, &quot;
               &quot;name varchar(20), address varchar(200), typeid int)&quot;);
    query.exec(&quot;insert into person values(1, 'Alice', &quot;
               &quot;'&lt;qt&gt;123 Main Street&lt;br/&gt;Market Town&lt;/qt&gt;', 101)&quot;);
    query.exec(&quot;insert into person values(2, 'Bob', &quot;
               &quot;'&lt;qt&gt;PO Box 32&lt;br/&gt;Mail Handling Service&quot;
               &quot;&lt;br/&gt;Service City&lt;/qt&gt;', 102)&quot;);
    query.exec(&quot;insert into person values(3, 'Carol', &quot;
               &quot;'&lt;qt&gt;The Lighthouse&lt;br/&gt;Remote Island&lt;/qt&gt;', 103)&quot;);
    query.exec(&quot;insert into person values(4, 'Donald', &quot;
               &quot;'&lt;qt&gt;47338 Park Avenue&lt;br/&gt;Big City&lt;/qt&gt;', 101)&quot;);
    query.exec(&quot;insert into person values(5, 'Emma', &quot;
               &quot;'&lt;qt&gt;Research Station&lt;br/&gt;Base Camp&lt;br/&gt;&quot;
               &quot;Big Mountain&lt;/qt&gt;', 103)&quot;);

    query.exec(&quot;create table addresstype (id int, description varchar(20))&quot;);
    query.exec(&quot;insert into addresstype values(101, 'Home')&quot;);
    query.exec(&quot;insert into addresstype values(102, 'Work')&quot;);
    query.exec(&quot;insert into addresstype values(103, 'Other')&quot;);

    model = new QSqlRelationalTableModel(this);
    model-&gt;setTable(&quot;person&quot;);
    model-&gt;setEditStrategy(QSqlTableModel::OnManualSubmit);

    typeIndex = model-&gt;fieldIndex(&quot;typeid&quot;);

    model-&gt;setRelation(typeIndex,
           QSqlRelation(&quot;addresstype&quot;, &quot;id&quot;, &quot;description&quot;));
    model-&gt;select();
}

void Window::updateButtons(int row)
{
    previousButton-&gt;setEnabled(row &gt; 0);
    nextButton-&gt;setEnabled(row &lt; model-&gt;rowCount() - 1);
}

</db:programlisting>
</db:article>
