<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>TableView QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a list view with scroll bars, styling and header sections.</db:para>
<db:para>This type was introduced in Qt 5.1.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls 1.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-scrollview.xml">ScrollView</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>TableView is part of <db:simplelist><db:member><db:link xlink:href="views.xml">Application Navigation and Views</db:link></db:member><db:member><db:link xlink:href="controls.xml">Buttons and Controls</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/tableview.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A <db:link xlink:href="qml-qtquick-controls-tableview.xml">TableView</db:link> is similar to <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>, and adds scroll bars, selection, and resizable header sections. As with <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>, data for each row is provided through a <db:link xlink:href="qml-qtquick-controls-tableview.xml#model-prop">model</db:link>:</db:para>
<db:programlisting language="cpp">ListModel {
    id: libraryModel
    ListElement {
        title: &quot;A Masterpiece&quot;
        author: &quot;Gabriel&quot;
    }
    ListElement {
        title: &quot;Brilliance&quot;
        author: &quot;Jens&quot;
    }
    ListElement {
        title: &quot;Outstanding&quot;
        author: &quot;Frederik&quot;
    }
}
</db:programlisting>
<db:para>You provide title and size of a column header by adding a <db:link xlink:href="qml-qtquick-controls-tableviewcolumn.xml">TableViewColumn</db:link> as demonstrated below.</db:para>
<db:programlisting language="cpp">TableView {
    TableViewColumn {
        role: &quot;title&quot;
        title: &quot;Title&quot;
        width: 100
    }
    TableViewColumn {
        role: &quot;author&quot;
        title: &quot;Author&quot;
        width: 200
    }
    model: libraryModel
}
</db:programlisting>
<db:para>The header sections are attached to values in the <db:link xlink:href="qml-qtquick-controls-tableview.xml#model-prop">model</db:link> by defining the model role they attach to. Each property in the model will then be shown in their corresponding column.</db:para>
<db:para>You can customize the look by overriding the itemDelegate, <db:link xlink:href="qml-qtquick-controls-tableview.xml#rowDelegate-prop">rowDelegate</db:link>, or <db:link xlink:href="qml-qtquick-controls-tableview.xml#headerDelegate-prop">headerDelegate</db:link> properties.</db:para>
<db:para>The view itself does not provide sorting. This has to be done on the model itself. However you can provide sorting on the model, and enable sort indicators on headers.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>int sortIndicatorColumn - The index of the current sort column</db:para>
</db:listitem>
<db:listitem>
<db:para>bool sortIndicatorVisible - Whether the sort indicator should be enabled</db:para>
</db:listitem>
<db:listitem>
<db:para>enum sortIndicatorOrder - Qt.AscendingOrder or Qt.DescendingOrder depending on state</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>You can create a custom appearance for a <db:link xlink:href="qml-qtquick-controls-tableview.xml">TableView</db:link> by assigning a <db:link xlink:href="qml-qtquick-controls-styles-tableviewstyle.xml">TableViewStyle</db:link>.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="alternatingRowColors-prop">
<db:title>alternatingRowColors : bool</db:title>
<db:para>This property is set to <db:code>true</db:code> if the view alternates the row color. The default value is <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="backgroundVisible-prop">
<db:title>backgroundVisible : bool</db:title>
<db:para>This property determines if the background should be filled or not.</db:para>
<db:para>The default value is <db:code>true</db:code>.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qml-qtquick-controls-tableview.xml#rowDelegate-prop">rowDelegate</db:link> is not affected by this property</db:para>
</db:note>
</db:section>
<db:section xml:id="columnCount-prop">
<db:title>[read-only] columnCount : int</db:title>
<db:para>The current number of columns</db:para>
</db:section>
<db:section xml:id="contentFooter-prop">
<db:title>contentFooter : Component</db:title>
<db:para>This is the content footer of the view.</db:para>
</db:section>
<db:section xml:id="contentHeader-prop">
<db:title>contentHeader : Component</db:title>
<db:para>This is the content header of the view.</db:para>
</db:section>
<db:section xml:id="currentRow-prop">
<db:title>currentRow : int</db:title>
<db:para>The current row index of the view. The default value is <db:code>-1</db:code> to indicate that no row is selected.</db:para>
</db:section>
<db:section xml:id="headerDelegate-prop">
<db:title>headerDelegate : Component</db:title>
<db:para>This property defines a delegate to draw a header.</db:para>
<db:para>In the header delegate you have access to the following special properties:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>styleData.value - the value or text for this item</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.column - the index of the column</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.pressed - true when the column is being pressed</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.containsMouse - true when the column is under the mouse</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.textAlignment - the horizontal text alignment of the column (since QtQuickControls 1.1)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="headerVisible-prop">
<db:title>headerVisible : bool</db:title>
<db:para>This property determines if the header is visible. The default value is <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="itemDelegate-prop">
<db:title>itemDelegate : Component</db:title>
<db:para>This property defines a delegate to draw a specific cell.</db:para>
<db:para>In the item delegate you have access to the following special properties:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>styleData.selected - if the item is currently selected</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.value - the value or text for this item</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.textColor - the default text color for an item</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.row - the index of the view row</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.column - the index of the view column</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.elideMode - the elide mode of the column</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.textAlignment - the horizontal text alignment of the column</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.pressed - true when the item is pressed (since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 1.3)</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.hasActiveFocus - true when the row has focus (since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 1.3)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Example:</db:para>
<db:programlisting language="cpp">itemDelegate: Item {
    Text {
        anchors.verticalCenter: parent.verticalCenter
        color: styleData.textColor
        elide: styleData.elideMode
        text: styleData.value
    }
}
</db:programlisting>
<db:note>
<db:para>For performance reasons, created delegates can be recycled across multiple table rows. This implies that when you make use of implicit properties such as <db:code>styleData.row</db:code> or <db:code>model</db:code>, these values can change after the delegate has been constructed. This means that you should not assume that content is fixed when <db:code>Component.onCompleted</db:code> is called, but instead rely on bindings to such properties.</db:para>
</db:note>
</db:section>
<db:section xml:id="model-prop">
<db:title>model : model</db:title>
<db:para>This property holds the model providing data for the table view.</db:para>
<db:para>The model provides the set of data that is used to create the items in the view. Models can be created directly in QML using <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link>, <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link> or <db:link xlink:href="qml-visualitemmodel.xml">VisualItemModel</db:link>, or provided by C++ model classes.</db:para>
<db:para>Example model:</db:para>
<db:programlisting language="cpp">model: ListModel {
    ListElement {
        column1: &quot;value 1&quot;
        column2: &quot;value 2&quot;
    }
    ListElement {
        column1: &quot;value 3&quot;
        column2: &quot;value 4&quot;
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-listview.xml#model-prop">ListView::model</db:link></db:member>
<db:member><db:link xlink:href="qtquick-modelviewsdata-modelview.xml#models">Data Models</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowCount-prop">
<db:title>rowCount : int</db:title>
<db:para>The current number of rows</db:para>
</db:section>
<db:section xml:id="rowDelegate-prop">
<db:title>rowDelegate : Component</db:title>
<db:para>This property defines a delegate to draw a row.</db:para>
<db:para>In the row delegate you have access to the following special properties:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>styleData.alternate - true when the row uses the alternate background color</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.selected - true when the row is currently selected</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.row - the index of the row</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.hasActiveFocus - true when the row has focus (since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 1.3)</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.pressed - true when the row is pressed (since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 1.3)</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>For performance reasons, created delegates can be recycled across multiple table rows. This implies that when you make use of implicit properties such as <db:code>styleData.row</db:code> or <db:code>model</db:code>, these values can change after the delegate has been constructed. This means that you should not assume that content is fixed when <db:code>Component.onCompleted</db:code> is called, but instead rely on bindings to such properties.</db:para>
</db:note>
</db:section>
<db:section xml:id="section-prop">
<db:title>section group</db:title>
<db:bridgehead renderas="sect2" xml:id="section.criteria-prop">section.criteria : enumeration</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="section.delegate-prop">section.delegate : Component</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="section.labelPositioning-prop">section.labelPositioning : enumeration</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="section.property-prop">section.property : string</db:bridgehead>
<db:para>These properties determine the section labels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-listview.xml#section-prop">ListView.section</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selection-prop">
<db:title>[since QtQuick.Controls 1.1] selection : Selection</db:title>
<db:para>This property contains the current row-selection of the <db:link xlink:href="qml-qtquick-controls-tableview.xml">TableView</db:link>. The selection allows you to select, deselect or iterate over selected rows.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>function <db:emphasis role="bold">clear()</db:emphasis> - deselects all rows</db:para>
</db:listitem>
<db:listitem>
<db:para>function <db:emphasis role="bold">selectAll()</db:emphasis> - selects all rows</db:para>
</db:listitem>
<db:listitem>
<db:para>function <db:emphasis role="bold">select(from, to)</db:emphasis> - select a range</db:para>
</db:listitem>
<db:listitem>
<db:para>function <db:emphasis role="bold">deselect(from, to)</db:emphasis> - de-selects a range</db:para>
</db:listitem>
<db:listitem>
<db:para>function <db:emphasis role="bold">forEach(callback)</db:emphasis> - iterates over all selected rows</db:para>
</db:listitem>
<db:listitem>
<db:para>function <db:emphasis role="bold">contains(index)</db:emphasis> - checks whether the selection includes the given index</db:para>
</db:listitem>
<db:listitem>
<db:para>signal <db:emphasis role="bold">selectionChanged()</db:emphasis> - the current row selection changed</db:para>
</db:listitem>
<db:listitem>
<db:para>readonly property int <db:emphasis role="bold">count</db:emphasis> - the number of selected rows</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:emphasis role="bold">Example</db:emphasis>:</db:para>
<db:programlisting language="cpp">tableview.selection.select(0)       // select row index 0

tableview.selection.select(1, 3)    // select row indexes 1, 2 and 3

tableview.selection.deselect(0, 1)  // deselects row index 0 and 1

tableview.selection.deselect(2)     // deselects row index 2
</db:programlisting>
<db:para><db:emphasis role="bold">Example</db:emphasis>: To iterate over selected indexes, you can pass a callback function. <db:code role="parameter">rowIndex</db:code> is passed as an argument to the callback function.</db:para>
<db:programlisting language="cpp">tableview.selection.forEach( function(rowIndex) {console.log(rowIndex)} )
</db:programlisting>
<db:para>This property was introduced in QtQuick.Controls 1.1.</db:para>
</db:section>
<db:section xml:id="selectionMode-prop">
<db:title>[since QtQuick.Controls 1.1] selectionMode : enumeration</db:title>
<db:para>This enum indicates how the view responds to user selections:</db:para>
<db:para>The possible modes are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>SelectionMode.NoSelection - Items cannot be selected.</db:para>
</db:listitem>
<db:listitem>
<db:para>SelectionMode.SingleSelection - When the user selects an item, any already-selected item becomes unselected, and the user cannot unselect the selected item. (Default)</db:para>
</db:listitem>
<db:listitem>
<db:para>SelectionMode.MultiSelection - When the user selects an item in the usual way, the selection status of that item is toggled and the other items are left alone.</db:para>
</db:listitem>
<db:listitem>
<db:para>SelectionMode.ExtendedSelection - When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Ctrl key when clicking on an item, the clicked item gets toggled and all other items are left untouched. If the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item. Multiple items can be selected by dragging the mouse over them.</db:para>
</db:listitem>
<db:listitem>
<db:para>SelectionMode.ContiguousSelection - When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This property was introduced in QtQuick.Controls 1.1.</db:para>
</db:section>
<db:section xml:id="sortIndicatorColumn-prop">
<db:title>sortIndicatorColumn : int</db:title>
<db:para>Index of the current sort column. The default value is <db:code>0</db:code>.</db:para>
</db:section>
<db:section xml:id="sortIndicatorOrder-prop">
<db:title>sortIndicatorOrder : enumeration</db:title>
<db:para>This sets the sorting order of the sort indicator The allowed values are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.AscendingOrder - the default</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.DescendingOrder</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="sortIndicatorVisible-prop">
<db:title>sortIndicatorVisible : bool</db:title>
<db:para>This property shows or hides the sort indicator The default value is <db:code>false</db:code>.</db:para>
<db:note>
<db:para>The view itself does not sort the data.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="activated-signal">
<db:title>activated(int <db:emphasis>row</db:emphasis>)</db:title>
<db:para>Emitted when the user activates an item by mouse or keyboard interaction. Mouse activation is triggered by single- or double-clicking, depending on the platform.</db:para>
<db:para><db:code role="parameter">row</db:code> int provides access to the activated row index.</db:para>
<db:note>
<db:para>This signal is only emitted for mouse interaction that is not blocked in the row or item delegate.</db:para>
</db:note>
<db:para>The corresponding handler is <db:code>onActivated</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onActivated</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="clicked-signal">
<db:title>clicked(int <db:emphasis>row</db:emphasis>)</db:title>
<db:para>Emitted when the user clicks a valid row by single clicking</db:para>
<db:para><db:code role="parameter">row</db:code> int provides access to the clicked row index.</db:para>
<db:note>
<db:para>This signal is only emitted if the row or item delegate does not accept mouse events.</db:para>
</db:note>
<db:para>The corresponding handler is <db:code>onClicked</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onClicked</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="doubleClicked-signal">
<db:title>doubleClicked(int <db:emphasis>row</db:emphasis>)</db:title>
<db:para>Emitted when the user double clicks a valid row.</db:para>
<db:para><db:code role="parameter">row</db:code> int provides access to the clicked row index.</db:para>
<db:note>
<db:para>This signal is only emitted if the row or item delegate does not accept mouse events.</db:para>
</db:note>
<db:para>The corresponding handler is <db:code>onDoubleClicked</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onDoubleClicked</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="pressAndHold-signal">
<db:title>[since QtQuick.Controls 1.3] pressAndHold(int <db:emphasis>row</db:emphasis>)</db:title>
<db:para>Emitted when the user presses and holds a valid row.</db:para>
<db:para><db:code role="parameter">row</db:code> int provides access to the pressed row index.</db:para>
<db:note>
<db:para>This signal is only emitted if the row or item delegate does not accept mouse events.</db:para>
</db:note>
<db:para>The corresponding handler is <db:code>onPressAndHold</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onPressAndHold</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtQuick.Controls 1.3.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="addColumn-method">
<db:title>TableViewColumn addColumn(object <db:emphasis>column</db:emphasis>)</db:title>
<db:para>Adds a <db:code role="parameter">column</db:code> and returns the added column.</db:para>
<db:para>The <db:code role="parameter">column</db:code> argument can be an instance of <db:link xlink:href="qml-qtquick-controls-tableviewcolumn.xml">TableViewColumn</db:link>, or a Component. The component has to contain a <db:link xlink:href="qml-qtquick-controls-tableviewcolumn.xml">TableViewColumn</db:link>. Otherwise <db:code>null</db:code> is returned.</db:para>
</db:section>
<db:section xml:id="getColumn-method">
<db:title>TableViewColumn getColumn(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns the column at the given <db:code role="parameter">index</db:code> or <db:code>null</db:code> if the <db:code role="parameter">index</db:code> is invalid.</db:para>
</db:section>
<db:section xml:id="insertColumn-method">
<db:title>TableViewColumn insertColumn(int <db:emphasis>index</db:emphasis>, object <db:emphasis>column</db:emphasis>)</db:title>
<db:para>Inserts a <db:code role="parameter">column</db:code> at the given <db:code role="parameter">index</db:code> and returns the inserted column.</db:para>
<db:para>The <db:code role="parameter">column</db:code> argument can be an instance of <db:link xlink:href="qml-qtquick-controls-tableviewcolumn.xml">TableViewColumn</db:link>, or a Component. The component has to contain a <db:link xlink:href="qml-qtquick-controls-tableviewcolumn.xml">TableViewColumn</db:link>. Otherwise <db:code>null</db:code> is returned.</db:para>
</db:section>
<db:section xml:id="moveColumn-method">
<db:title>void moveColumn(int <db:emphasis>from</db:emphasis>, int <db:emphasis>to</db:emphasis>)</db:title>
<db:para>Moves a column <db:code role="parameter">from</db:code> index <db:code role="parameter">to</db:code> another.</db:para>
</db:section>
<db:section xml:id="positionViewAtRow-method">
<db:title>void positionViewAtRow(int <db:emphasis>row</db:emphasis>, PositionMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Positions the view such that the specified <db:code role="parameter">row</db:code> is at the position defined by <db:code role="parameter">mode</db:code>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>.Beginning - position item at the top of the view.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>.Center - position item in the center of the view.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>.End - position item at bottom of the view.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>.Visible - if any part of the item is visible then take no action, otherwise bring the item into view.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>.Contain - ensure the entire item is visible. If the item is larger than the view the item is positioned at the top of the view.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If positioning the <db:code role="parameter">row</db:code> creates an empty space at the beginning or end of the view, then the view is positioned at the boundary.</db:para>
<db:para>For example, to position the view at the end at startup:</db:para>
<db:programlisting language="cpp">Component.onCompleted: table.positionViewAtRow(rowCount -1, ListView.Contain)
</db:programlisting>
<db:para>Depending on how the model is populated, the model may not be ready when <db:link xlink:href="qml-qtquick-controls-tableview.xml">TableView</db:link> Component.onCompleted is called. In that case you may need to delay the call to positionViewAtRow by using a <db:link xlink:href="qml-qtqml-timer.xml">Timer</db:link>.</db:para>
<db:note>
<db:para>This method should only be called after the component has completed.</db:para>
</db:note>
</db:section>
<db:section xml:id="removeColumn-method">
<db:title>void removeColumn(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Removes and destroys a column at the given <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="resizeColumnsToContents-method">
<db:title>[since QtQuick.Controls 1.2] void resizeColumnsToContents()</db:title>
<db:para>Resizes all columns to ensure that the column contents and the headers will fit.</db:para>
<db:para>This method was introduced in QtQuick.Controls 1.2.</db:para>
</db:section>
<db:section xml:id="rowAt-method">
<db:title>int rowAt(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Returns the index of the visible row at the point <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code> in content coordinates. If there is no visible row at the point specified, <db:code>-1</db:code> is returned.</db:para>
<db:note>
<db:para>This method should only be called after the component has completed.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
