<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Coding Conventions</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>code style convention.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This document contains the QML coding conventions that we follow in our documentation and examples and recommend that others follow.</db:para>
<db:section xml:id="qml-object-declarations">
<db:title>QML Object Declarations</db:title>
<db:para>Throughout our documentation and examples, <db:link xlink:href="qtqml-syntax-objectattributes.xml">QML object attributes</db:link> are always structured in the following order:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>id</db:para>
</db:listitem>
<db:listitem>
<db:para>property declarations</db:para>
</db:listitem>
<db:listitem>
<db:para>signal declarations</db:para>
</db:listitem>
<db:listitem>
<db:para>JavaScript functions</db:para>
</db:listitem>
<db:listitem>
<db:para>object properties</db:para>
</db:listitem>
<db:listitem>
<db:para>child objects</db:para>
</db:listitem>
<db:listitem>
<db:para>states</db:para>
</db:listitem>
<db:listitem>
<db:para>transitions</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For better readability, we separate these different parts with an empty line.</db:para>
<db:para>For example, a hypothetical <db:emphasis>photo</db:emphasis> QML object would look like this:</db:para>
<db:programlisting language="qml">Rectangle {
    id: photo                                               // id on the first line makes it easy to find an object

    property bool thumbnail: false                          // property declarations
    property alias image: photoImage.source

    signal clicked                                          // signal declarations

    function doSomething(x)                                 // javascript functions
    {
        return x + photoImage.width
    }

    color: &quot;gray&quot;                                           // object properties
    x: 20; y: 20; height: 150                               // try to group related properties together
    width: {                                                // large bindings
        if (photoImage.width &gt; 200) {
            photoImage.width;
        } else {
            200;
        }
    }

    Rectangle {                                             // child objects
        id: border
        anchors.centerIn: parent; color: &quot;white&quot;

        Image { id: photoImage; anchors.centerIn: parent }
    }

    states: State {                                         // states
        name: &quot;selected&quot;
        PropertyChanges { target: border; color: &quot;red&quot; }
    }

    transitions: Transition {                               // transitions
        from: &quot;&quot;; to: &quot;selected&quot;
        ColorAnimation { target: border; duration: 200 }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="grouped-properties">
<db:title>Grouped Properties</db:title>
<db:para>If using multiple properties from a group of properties, consider using <db:emphasis>group notation</db:emphasis> instead of <db:emphasis>dot notation</db:emphasis> if it improves readability.</db:para>
<db:para>For example, this:</db:para>
<db:programlisting language="qml">Rectangle {
    anchors.left: parent.left; anchors.top: parent.top; anchors.right: parent.right; anchors.leftMargin: 20
}

Text {
    text: &quot;hello&quot;
    font.bold: true; font.italic: true; font.pixelSize: 20; font.capitalization: Font.AllUppercase
}

</db:programlisting>
<db:para>could be written like this:</db:para>
<db:programlisting language="qml">Rectangle {
    anchors { left: parent.left; top: parent.top; right: parent.right; leftMargin: 20 }
}

Text {
    text: &quot;hello&quot;
    font { bold: true; italic: true; pixelSize: 20; capitalization: Font.AllUppercase }
}
</db:programlisting>
</db:section>
<db:section xml:id="lists">
<db:title>Lists</db:title>
<db:para>If a list contains only one element, we generally omit the square brackets.</db:para>
<db:para>For example, it is very common for a component to only have one state.</db:para>
<db:para>In this case, instead of:</db:para>
<db:programlisting language="qml">states: [
    State {
        name: &quot;open&quot;
        PropertyChanges { target: container; width: 200 }
    }
]
</db:programlisting>
<db:para>we will write this:</db:para>
<db:programlisting language="qml">states: State {
    name: &quot;open&quot;
    PropertyChanges { target: container; width: 200 }
}
</db:programlisting>
</db:section>
<db:section xml:id="javascript-code">
<db:title>JavaScript Code</db:title>
<db:para>If the script is a single expression, we recommend writing it inline:</db:para>
<db:programlisting language="qml">Rectangle { color: &quot;blue&quot;; width: parent.width / 3 }
</db:programlisting>
<db:para>If the script is only a couple of lines long, we generally use a block:</db:para>
<db:programlisting language="qml">Rectangle {
    color: &quot;blue&quot;
    width: {
        var w = parent.width / 3
        console.debug(w)
        return w
    }
}
</db:programlisting>
<db:para>If the script is more than a couple of lines long or can be used by different objects, we recommend creating a function and calling it like this:</db:para>
<db:programlisting language="qml">function calculateWidth(object)
{
    var w = object.width / 3
    // ...
    // more javascript code
    // ...
    console.debug(w)
    return w
}

Rectangle { color: &quot;blue&quot;; width: calculateWidth(parent) }
</db:programlisting>
<db:para>For long scripts, we will put the functions in their own JavaScript file and import it like this:</db:para>
<db:programlisting language="qml">import &quot;myscript.js&quot; as Script

Rectangle { color: &quot;blue&quot;; width: Script.calculateWidth(parent) }
</db:programlisting>
<db:para>If the code is longer than one line and hence within a block, we use semicolons to indicate the end of each statement:</db:para>
<db:programlisting language="qml">MouseArea {
    anchors.fill: parent
    onClicked: {
        var scenePos = mapToItem(null, mouseX, mouseY);
        console.log(&quot;MouseArea was clicked at scene pos &quot; + scenePos);
    }
}
</db:programlisting>
</db:section>
</db:article>
