<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Modern QML modules</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Modernize your QML modules.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>QML modules have become more powerful and easier to use in Qt 6. The following sections describe how to modernize QML modules that already use <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link>.</db:para>
<db:para>See also <db:link xlink:href="qt6-port-to-qt-add-qml-module.xml">Port QML modules to CMake</db:link> on how to port a QML module to the <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link> CMake API.</db:para>
<db:section xml:id="use-qt-standard-project-setup">
<db:title>Use qt_standard_project_setup</db:title>
<db:para><db:link xlink:href="qt-standard-project-setup.xml">qt_standard_project_setup</db:link> sets up <db:link xlink:href="">Qt CMake policies</db:link> needed for modern QML modules, among other things. To modernize your QML module and follow best practices, call <db:link xlink:href="qt-standard-project-setup.xml">qt_standard_project_setup</db:link> in the project's top-level CMakeLists.txt file before any <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link> call:</db:para>
<db:programlisting language="cpp" role="bad">qt_standard_project_setup(REQUIRES 6.8)
</db:programlisting>
</db:section>
<db:section xml:id="use-the-new-standard-resource-path-prefix">
<db:title>Use the new standard resource path prefix</db:title>
<db:para>The standard resource path for QML modules moved from :/ to :/qt/qml with <db:link xlink:href="qt-cmake-policy-qtp0001.xml">QTP0001</db:link>. Don't use custom resource prefixes nor extend import paths in the engine. Remove all RESOURCE_PREFIX arguments from all <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link> calls, as well as all calls to <db:link xlink:href="qqmlengine.xml#addImportPath">QQmlEngine::addImportPath</db:link> or similar. Change all qrc paths in your C++ and QML code to use the new resource path prefix:</db:para>
<db:programlisting language="cpp" role="bad">// C++ usages like:
QUrl someUrl(&quot;qrc:/MyQmlModule/MyResource1.png&quot;);
// need to be changed to
QUrl someUrl(&quot;qrc:/qt/qml/MyQmlModule/MyResource1.png&quot;);

// QML usages like:
&quot;:/MyQmlModule/MyResource1.png&quot;
// need to be changed to
&quot;:/qt/qml/MyQmlModule/MyResource1.png&quot;
</db:programlisting>
<db:para>See also <db:link xlink:href="">Using the Qt Resource System with QML</db:link>.</db:para>
</db:section>
<db:section xml:id="use-loadfrommodule-to-load-your-qml-files">
<db:title>Use loadFromModule to load your QML files</db:title>
<db:para>With the default import path, you can use the loadFromModule methods, like <db:link xlink:href="qqmlapplicationengine.xml#loadFromModule">QQmlApplicationEngine::loadFromModule</db:link>, <db:link xlink:href="">QQuickView::loadFromModule</db:link>, or <db:link xlink:href="qqmlcomponent.xml#loadFromModule">QQmlComponent::loadFromModule</db:link>, for example.</db:para>
<db:para>Use loadFromModule to load your QML file, for example:</db:para>
<db:programlisting language="cpp" role="bad">engine.load(QUrl(QStringLiteral(&quot;qrc:/MyQmlModule/Main.qml&quot;)));
// becomes
engine.loadFromModule(&quot;MyQmlModule&quot;, &quot;Main&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="replace-output-directory-and-import-path-with-dependencies-target">
<db:title>Replace OUTPUT_DIRECTORY and IMPORT_PATH with DEPENDENCIES TARGET</db:title>
<db:para>Avoid setting an IMPORT_PATH in the <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link>. Instead, use DEPENDENCIES TARGET to declare dependencies to other QML modules that can't be found in the current import path.</db:para>
<db:para>Using DEPENDENCIES TARGET also eliminates the need for the QT_QML_OUTPUT_DIRECTORY CMake variable and the OUTPUT_DIRECTORY argument to <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link>, so remove their definitions and usages.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp" role="bad">### in the CMakeLists.txt file defining the dependent QML module:
# don't set QT_QML_OUTPUT_DIRECTORY and remove lines like these:
set(QT_QML_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/qml)

qt_add_qml_module(MyThirdPartyQmlLibraryDependency
    URI MyThirdPartyQmlLibraryDependency
    ....
    # custom output paths are obsolete due to DEPENDENCIES TARGET below, so remove:
    OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/qml
}

### in the CMakeLists.txt file defining the QML module that uses the dependency:
qt_add_qml_module(MyQmlLibrary
    URI MyQmlModule
    ...
    # replace import paths like these:
    IMPORT_PATH ${CMAKE_CURRENT_BINARY_DIR}/thirdparty/qml
    # with:
    DEPENDENCIES TARGET MyThirdPartyQmlLibraryDependency
}
</db:programlisting>
<db:note>
<db:para>You might need to call add_subdirectory() before calling <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link> in your CMakeLists.txt for DEPENDENCIES TARGET to find the target.</db:para>
</db:note>
<db:para>For more information on how to declare module dependencies, see <db:link xlink:href="qt-add-qml-module.xml#declaring-module-dependencies">Declaring module dependencies</db:link>.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-changes-qt6.xml">Changes to Qt QML</db:link></db:member>
<db:member><db:link xlink:href="qt6-port-to-qt-add-qml-module.xml">Port QML modules to CMake</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
