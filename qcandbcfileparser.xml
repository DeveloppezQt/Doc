<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCanDbcFileParser Class</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcandbcfileparser.xml">QCanDbcFileParser</db:link> class can be used to parse DBC files.</db:para>
<db:para><db:emphasis role="bold">This class is under development and is subject to change.</db:emphasis></db:para>
<db:para>This class was introduced in Qt 6.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCanDbcFileParser</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS SerialBus)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::SerialBus)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += serialbus</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This class is under development and is subject to change.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A CAN database or CAN DBC file is an ASCII text file that contains information on how to decode and interpret raw CAN bus data. Some more details about the format can be found <db:link xlink:href="https://www.csselectronics.com/pages/can-dbc-file-database-intro">here</db:link> or <db:link xlink:href="https://docs.openvehicles.com/en/stable/components/vehicle_dbc/docs/dbc-primer.html">here</db:link>.</db:para>
<db:para>The <db:link xlink:href="qcandbcfileparser.xml">QCanDbcFileParser</db:link> class takes the input DBC file, parses it, and provides a list of <db:link xlink:href="qcanmessagedescription.xml">QCanMessageDescription</db:link>s as an output. These message descriptions can be forwarded to <db:link xlink:href="qcanframeprocessor.xml">QCanFrameProcessor</db:link>, and later used as rules to encode or decode <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link>s.</db:para>
<db:para>Use one of <db:link xlink:href="qcandbcfileparser.xml#parse">parse</db:link>() overloads to specify a file or a list of files that will be processed. Both overloads return <db:code>true</db:code> if the parsing completes successfully and <db:code>false</db:code> otherwise.</db:para>
<db:para>Call the <db:link xlink:href="qcandbcfileparser.xml#error">error</db:link>() method to get the error which occurred during the parsing. If the parsing completes successfully, this method will return <db:link xlink:href="qcandbcfileparser.xml#Error-enum">None</db:link>. Otherwise, you can use an <db:link xlink:href="qcandbcfileparser.xml#errorString">errorString</db:link>() method to get the string representation of an error.</db:para>
<db:para>During the parsing some non-critical problems may occur as well. Such problems will be logged, but the parsing process will not be aborted. You can use the <db:link xlink:href="qcandbcfileparser.xml#warnings">warnings</db:link>() method to get the full list of such problems after the parsing is completed.</db:para>
<db:para>If the parsing completes successfully, call <db:link xlink:href="qcandbcfileparser.xml#messageDescriptions">messageDescriptions</db:link>() to get a list of the message descriptions that were extracted during the last <db:link xlink:href="qcandbcfileparser.xml#parse">parse</db:link>() call. Call <db:link xlink:href="qcandbcfileparser.xml#messageValueDescriptions">messageValueDescriptions</db:link>() to get the textual descriptions of signal raw values, if they are available.</db:para>
<db:para>Use the static <db:link xlink:href="qcandbcfileparser.xml#uniqueIdDescription">uniqueIdDescription</db:link>() function to get a <db:link xlink:href="qcanuniqueiddescription.xml">QCanUniqueIdDescription</db:link> for the DBC format.</db:para>
<db:programlisting language="cpp">QCanDbcFileParser fileParser;
const bool result = fileParser.parse(u&quot;path/to/file.dbc&quot;_s);
// Check result, call error() and warnings() if needed

// Prepare a QCanFrameProcessor to decode or encode DBC frames
QCanFrameProcessor frameProcessor;
frameProcessor.setUniqueIdDescription(QCanDbcFileParser::uniqueIdDescription());
frameProcessor.setMessageDescriptions(fileParser.messageDescriptions());
</db:programlisting>
<db:note>
<db:para>The parser is stateful, which means that all the results (like extracted message descriptions, error code, or warnings) are reset once the next parsing starts.</db:para>
</db:note>
<db:section xml:id="supported-keywords">
<db:title>Supported Keywords</db:title>
<db:para>The current implementation supports only a subset of keywords that you can find in a DBC file:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>BO_</db:code> - message description.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>SG_</db:code> - signal description.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>SIG_VALTYPE_</db:code> - signal type description.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>SG_MUL_VAL_</db:code> - extended multiplexing description.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>CM_</db:code> - comments (only for message and signal descriptions).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>VAL_</db:code> - textual descriptions for raw signal values.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Lines starting from other keywords are simply ignored.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanmessagedescription.xml">QCanMessageDescription</db:link></db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml">QCanFrameProcessor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QCanDbcFileParser::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>None</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FileReading</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Parsing</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum represents the possible errors that can happen during the parsing of a DBC file.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcandbcfileparser.xml">QCanDbcFileParser</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::None</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcandbcfileparser.xml">QCanDbcFileParser</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::FileReading</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An error occurred while opening or reading the file.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcandbcfileparser.xml">QCanDbcFileParser</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::Parsing</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>An error occurred while parsing the content of the file.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="MessageValueDescriptions-typedef">
<db:title>[alias] QCanDbcFileParser::MessageValueDescriptions</db:title>
<db:typedefsynopsis>
<db:typedefname>MessageValueDescriptions</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This is a type alias for <db:code>QHash&lt;QtCanBus::UniqueId, SignalValueDescriptions&gt;</db:code>.</db:para>
<db:para>The keys of the hash represent message unique ids, and the values of the hash contain the corresponding <db:link xlink:href="qcandbcfileparser.xml#SignalValueDescriptions-typedef">QCanDbcFileParser::SignalValueDescriptions</db:link> entries.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcandbcfileparser.xml#SignalValueDescriptions-typedef">QCanDbcFileParser::SignalValueDescriptions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="SignalValueDescriptions-typedef">
<db:title>[alias] QCanDbcFileParser::SignalValueDescriptions</db:title>
<db:typedefsynopsis>
<db:typedefname>SignalValueDescriptions</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This is a type alias for <db:code>QHash&lt;QString, ValueDescriptions&gt;</db:code>.</db:para>
<db:para>The keys of the hash represent signal names, and the values of the hash contain the corresponding <db:link xlink:href="qcandbcfileparser.xml#ValueDescriptions-typedef">QCanDbcFileParser::ValueDescriptions</db:link> entries.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcandbcfileparser.xml#ValueDescriptions-typedef">QCanDbcFileParser::ValueDescriptions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ValueDescriptions-typedef">
<db:title>[alias] QCanDbcFileParser::ValueDescriptions</db:title>
<db:typedefsynopsis>
<db:typedefname>ValueDescriptions</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This is a type alias for <db:code>QHash&lt;quint32, QString&gt;</db:code>.</db:para>
<db:para>The keys of the hash represent raw signal values, and the values of the hash represent corresponding string descriptions.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCanDbcFileParser">
<db:title>QCanDbcFileParser::QCanDbcFileParser()</db:title>
<db:constructorsynopsis>
<db:methodname>QCanDbcFileParser</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanDbcFileParser()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a DBC file parser.</db:para>
</db:section>
<db:section xml:id="dtor.QCanDbcFileParser">
<db:title>QCanDbcFileParser::~QCanDbcFileParser()</db:title>
<db:destructorsynopsis>
<db:methodname>~QCanDbcFileParser</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCanDbcFileParser()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this DBC file parser.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>QCanDbcFileParser::Error QCanDbcFileParser::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCanDbcFileParser::Error</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanDbcFileParser::Error error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the last error which occurred during the parsing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcandbcfileparser.xml#errorString">errorString</db:link>()</db:member>
<db:member><db:link xlink:href="qcandbcfileparser.xml#parse">parse</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QCanDbcFileParser::errorString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>errorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString errorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the text representation of the last error which occurred during the parsing or an empty string if there was no error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcandbcfileparser.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="messageDescriptions">
<db:title>QList&lt;QCanMessageDescription&gt; QCanDbcFileParser::messageDescriptions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QCanMessageDescription&gt;</db:type>
<db:methodname>messageDescriptions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QCanMessageDescription&gt; messageDescriptions() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of message descriptions that were extracted during the last <db:link xlink:href="qcandbcfileparser.xml#parse">parse</db:link>() call.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcandbcfileparser.xml#parse">parse</db:link>()</db:member>
<db:member><db:link xlink:href="qcandbcfileparser.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="messageValueDescriptions">
<db:title>QCanDbcFileParser::MessageValueDescriptions QCanDbcFileParser::messageValueDescriptions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCanDbcFileParser::MessageValueDescriptions</db:type>
<db:methodname>messageValueDescriptions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanDbcFileParser::MessageValueDescriptions messageValueDescriptions() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the textual descriptions for signal raw values.</db:para>
<db:para>DBC supports the possibility to provide textual descriptions to signal raw values. If such data exists in the parsed DBC file(s), it can be accessed using this function.</db:para>
<db:para>The textual descriptions are unique for a certain signal within a specific message, so the returned structure contains the information about the message unique id and the signal name, as well as the actual value descriptions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcandbcfileparser.xml#MessageValueDescriptions-typedef">QCanDbcFileParser::MessageValueDescriptions</db:link></db:member>
<db:member><db:link xlink:href="qcandbcfileparser.xml#SignalValueDescriptions-typedef">QCanDbcFileParser::SignalValueDescriptions</db:link></db:member>
<db:member><db:link xlink:href="qcandbcfileparser.xml#ValueDescriptions-typedef">QCanDbcFileParser::ValueDescriptions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parse">
<db:title>bool QCanDbcFileParser::parse(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>parse</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool parse(const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Parses the file <db:code role="parameter">fileName</db:code>. Returns <db:code>true</db:code> if the parsing completed successfully or <db:code>false</db:code> otherwise.</db:para>
<db:para>If the parsing completed successfully, call the <db:link xlink:href="qcandbcfileparser.xml#messageDescriptions">messageDescriptions</db:link>() method to get the list of all extracted message descriptions.</db:para>
<db:para>If the parsing failed, call the <db:link xlink:href="qcandbcfileparser.xml#error">error</db:link>() and <db:link xlink:href="qcandbcfileparser.xml#errorString">errorString</db:link>() methods to get the information about the error.</db:para>
<db:para>Call the <db:link xlink:href="qcandbcfileparser.xml#warnings">warnings</db:link>() method to get the list of warnings that were logged during the parsing.</db:para>
<db:note>
<db:para>This method expects the file contents to be encoded in UTF-8.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcandbcfileparser.xml#messageDescriptions">messageDescriptions</db:link>()</db:member>
<db:member><db:link xlink:href="qcandbcfileparser.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qcandbcfileparser.xml#warnings">warnings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parse-1">
<db:title>bool QCanDbcFileParser::parse(const QStringList &amp;<db:emphasis>fileNames</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>parse</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>fileNames</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool parse(const QStringList &amp;fileNames)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Parses a list of files <db:code role="parameter">fileNames</db:code>. Returns <db:code>true</db:code> if the parsing completed successfully or <db:code>false</db:code> otherwise.</db:para>
<db:para>If the parsing completed successfully, call the <db:link xlink:href="qcandbcfileparser.xml#messageDescriptions">messageDescriptions</db:link>() method to get the list of all extracted message descriptions.</db:para>
<db:para>The parsing stops at the first error. Call the <db:link xlink:href="qcandbcfileparser.xml#error">error</db:link>() and <db:link xlink:href="qcandbcfileparser.xml#errorString">errorString</db:link>() methods to get the information about the error.</db:para>
<db:para>Call the <db:link xlink:href="qcandbcfileparser.xml#warnings">warnings</db:link>() method to get the list of warnings that were logged during the parsing.</db:para>
<db:note>
<db:para>This method expects the file contents to be encoded in UTF-8.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcandbcfileparser.xml#messageDescriptions">messageDescriptions</db:link>()</db:member>
<db:member><db:link xlink:href="qcandbcfileparser.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qcandbcfileparser.xml#warnings">warnings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uniqueIdDescription">
<db:title>[static] QCanUniqueIdDescription QCanDbcFileParser::uniqueIdDescription()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QCanUniqueIdDescription</db:type>
<db:methodname>uniqueIdDescription</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanUniqueIdDescription uniqueIdDescription()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a unique identifier description. DBC protocol always uses the Frame Id as an identifier, and therefore the unique identifier description is always the same.</db:para>
<db:para>Use this method to get an instance of <db:link xlink:href="qcanuniqueiddescription.xml">QCanUniqueIdDescription</db:link> and pass it to <db:link xlink:href="qcanframeprocessor.xml">QCanFrameProcessor</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanframeprocessor.xml#setUniqueIdDescription">QCanFrameProcessor::setUniqueIdDescription</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="warnings">
<db:title>QStringList QCanDbcFileParser::warnings() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>warnings</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList warnings() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of non-critical problems which occurred during the parsing.</db:para>
<db:para>A typical problem can be a malformed message or signal description. In such cases the malformed message or signal is skipped, but the rest of the file can be processed as usual.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcandbcfileparser.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qcandbcfileparser.xml#parse">parse</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
