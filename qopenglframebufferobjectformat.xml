<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOpenGLFramebufferObjectFormat Class</db:title>
<db:productname>QtOpenGL</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>QtOpenGL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qopenglframebufferobjectformat.xml">QOpenGLFramebufferObjectFormat</db:link> class specifies the format of an OpenGL framebuffer object.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOpenGLFramebufferObjectFormat</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS OpenGL)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::OpenGL)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += opengl</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QOpenGLFramebufferObjectFormat is part of <db:simplelist><db:member>painting-3D</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A framebuffer object has several characteristics:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qopenglframebufferobjectformat.xml#setSamples">Number of samples per pixels.</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qopenglframebufferobjectformat.xml#setAttachment">Depth and/or stencil attachments.</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qopenglframebufferobjectformat.xml#setTextureTarget">Texture target.</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qopenglframebufferobjectformat.xml#setInternalTextureFormat">Internal texture format.</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Note that the desired attachments or number of samples per pixels might not be supported by the hardware driver. Call <db:link xlink:href="qopenglframebufferobject.xml#format">QOpenGLFramebufferObject::format</db:link>() after creating a <db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link> to find the exact format that was used to create the frame buffer object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QOpenGLFramebufferObjectFormat">
<db:title>QOpenGLFramebufferObjectFormat::QOpenGLFramebufferObjectFormat()</db:title>
<db:constructorsynopsis>
<db:methodname>QOpenGLFramebufferObjectFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLFramebufferObjectFormat()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qopenglframebufferobjectformat.xml">QOpenGLFramebufferObjectFormat</db:link> object for specifying the format of an OpenGL framebuffer object.</db:para>
<db:para>By default the format specifies a non-multisample framebuffer object with no depth/stencil attachments, texture target <db:code>GL_TEXTURE_2D</db:code>, and internal format <db:code>GL_RGBA8</db:code>. On OpenGL/ES systems, the default internal format is <db:code>GL_RGBA</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglframebufferobjectformat.xml#samples">samples</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglframebufferobjectformat.xml#attachment">attachment</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglframebufferobjectformat.xml#internalTextureFormat">internalTextureFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QOpenGLFramebufferObjectFormat-1">
<db:title>QOpenGLFramebufferObjectFormat::QOpenGLFramebufferObjectFormat(const QOpenGLFramebufferObjectFormat &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QOpenGLFramebufferObjectFormat</db:methodname>
<db:methodparam>
<db:type>const QOpenGLFramebufferObjectFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLFramebufferObjectFormat(const QOpenGLFramebufferObjectFormat &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QOpenGLFramebufferObjectFormat">
<db:title>QOpenGLFramebufferObjectFormat::~QOpenGLFramebufferObjectFormat()</db:title>
<db:destructorsynopsis>
<db:methodname>~QOpenGLFramebufferObjectFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QOpenGLFramebufferObjectFormat()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qopenglframebufferobjectformat.xml">QOpenGLFramebufferObjectFormat</db:link>.</db:para>
</db:section>
<db:section xml:id="attachment">
<db:title>QOpenGLFramebufferObject::Attachment QOpenGLFramebufferObjectFormat::attachment() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpenGLFramebufferObject::Attachment</db:type>
<db:methodname>attachment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLFramebufferObject::Attachment attachment() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the configuration of the depth and stencil buffers attached to a framebuffer object. The default is <db:link xlink:href="qopenglframebufferobject.xml#Attachment-enum">QOpenGLFramebufferObject::NoAttachment</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglframebufferobjectformat.xml#setAttachment">setAttachment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="internalTextureFormat">
<db:title>GLenum QOpenGLFramebufferObjectFormat::internalTextureFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>GLenum</db:type>
<db:methodname>internalTextureFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">GLenum internalTextureFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the internal format of a framebuffer object's texture or multisample framebuffer object's color buffer. The default is <db:code>GL_RGBA8</db:code> on desktop OpenGL systems, and <db:code>GL_RGBA</db:code> on OpenGL/ES systems.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglframebufferobjectformat.xml#setInternalTextureFormat">setInternalTextureFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mipmap">
<db:title>bool QOpenGLFramebufferObjectFormat::mipmap() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>mipmap</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool mipmap() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if mipmapping is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglframebufferobjectformat.xml#setMipmap">setMipmap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="samples">
<db:title>int QOpenGLFramebufferObjectFormat::samples() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>samples</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int samples() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of samples per pixel if a framebuffer object is a multisample framebuffer object. Otherwise, returns 0. The default value is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglframebufferobjectformat.xml#setSamples">setSamples</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttachment">
<db:title>void QOpenGLFramebufferObjectFormat::setAttachment(QOpenGLFramebufferObject::Attachment <db:emphasis>attachment</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttachment</db:methodname>
<db:methodparam>
<db:type>QOpenGLFramebufferObject::Attachment</db:type>
<db:parameter>attachment</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttachment(QOpenGLFramebufferObject::Attachment attachment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the attachment configuration of a framebuffer object to <db:code role="parameter">attachment</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglframebufferobjectformat.xml#attachment">attachment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setInternalTextureFormat">
<db:title>void QOpenGLFramebufferObjectFormat::setInternalTextureFormat(GLenum <db:emphasis>internalTextureFormat</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setInternalTextureFormat</db:methodname>
<db:methodparam>
<db:type>GLenum</db:type>
<db:parameter>internalTextureFormat</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setInternalTextureFormat(GLenum internalTextureFormat)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the internal format of a framebuffer object's texture or multisample framebuffer object's color buffer to <db:code role="parameter">internalTextureFormat</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglframebufferobjectformat.xml#internalTextureFormat">internalTextureFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMipmap">
<db:title>void QOpenGLFramebufferObjectFormat::setMipmap(bool <db:emphasis>enabled</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMipmap</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enabled</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMipmap(bool enabled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables mipmapping if <db:code role="parameter">enabled</db:code> is true; otherwise disables it.</db:para>
<db:para>Mipmapping is disabled by default.</db:para>
<db:para>If mipmapping is enabled, additional memory will be allocated for the mipmap levels. The mipmap levels can be updated by binding the texture and calling glGenerateMipmap(). Mipmapping cannot be enabled for multisampled framebuffer objects.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglframebufferobjectformat.xml#mipmap">mipmap</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglframebufferobject.xml#texture">QOpenGLFramebufferObject::texture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSamples">
<db:title>void QOpenGLFramebufferObjectFormat::setSamples(int <db:emphasis>samples</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSamples</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>samples</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSamples(int samples)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the number of samples per pixel for a multisample framebuffer object to <db:code role="parameter">samples</db:code>. The default sample count of 0 represents a regular non-multisample framebuffer object.</db:para>
<db:para>If the desired amount of samples per pixel is not supported by the hardware then the maximum number of samples per pixel will be used. Note that multisample framebuffer objects cannot be bound as textures. Also, the <db:code>GL_EXT_framebuffer_multisample</db:code> extension is required to create a framebuffer with more than one sample per pixel.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglframebufferobjectformat.xml#samples">samples</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextureTarget">
<db:title>void QOpenGLFramebufferObjectFormat::setTextureTarget(GLenum <db:emphasis>target</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTextureTarget</db:methodname>
<db:methodparam>
<db:type>GLenum</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTextureTarget(GLenum target)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the texture target of the texture attached to a framebuffer object to <db:code role="parameter">target</db:code>. Ignored for multisample framebuffer objects.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglframebufferobjectformat.xml#textureTarget">textureTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglframebufferobjectformat.xml#samples">samples</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textureTarget">
<db:title>GLenum QOpenGLFramebufferObjectFormat::textureTarget() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>GLenum</db:type>
<db:methodname>textureTarget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">GLenum textureTarget() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the texture target of the texture attached to a framebuffer object. Ignored for multisample framebuffer objects. The default is <db:code>GL_TEXTURE_2D</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglframebufferobjectformat.xml#setTextureTarget">setTextureTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglframebufferobjectformat.xml#samples">samples</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QOpenGLFramebufferObjectFormat::operator!=(const QOpenGLFramebufferObjectFormat &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QOpenGLFramebufferObjectFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QOpenGLFramebufferObjectFormat &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>false</db:code> if all the options of this framebuffer object format are the same as <db:code role="parameter">other</db:code>; otherwise returns <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QOpenGLFramebufferObjectFormat &amp;QOpenGLFramebufferObjectFormat::operator=(const QOpenGLFramebufferObjectFormat &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QOpenGLFramebufferObjectFormat &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QOpenGLFramebufferObjectFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLFramebufferObjectFormat &amp; operator=(const QOpenGLFramebufferObjectFormat &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this object.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QOpenGLFramebufferObjectFormat::operator==(const QOpenGLFramebufferObjectFormat &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QOpenGLFramebufferObjectFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QOpenGLFramebufferObjectFormat &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if all the options of this framebuffer object format are the same as <db:code role="parameter">other</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
