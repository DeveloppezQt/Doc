<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMatrix Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmatrix.xml">QMatrix</db:link> class specifies 2D transformations of a coordinate system.</db:para>
<db:para><db:emphasis role="bold">This class is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMatrix</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMatrix is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This class is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A matrix specifies how to translate, scale, shear or rotate the coordinate system, and is typically used when rendering graphics. <db:link xlink:href="qmatrix.xml">QMatrix</db:link>, in contrast to <db:link xlink:href="qtransform.xml">QTransform</db:link>, does not allow perspective transformations. <db:link xlink:href="qtransform.xml">QTransform</db:link> is the recommended transformation class in Qt.</db:para>
<db:para>A <db:link xlink:href="qmatrix.xml">QMatrix</db:link> object can be built using the <db:link xlink:href="qmatrix.xml#setMatrix">setMatrix</db:link>(), <db:link xlink:href="qmatrix.xml#scale">scale</db:link>(), <db:link xlink:href="qmatrix.xml#rotate">rotate</db:link>(), <db:link xlink:href="qmatrix.xml#translate">translate</db:link>() and <db:link xlink:href="qmatrix.xml#shear">shear</db:link>() functions. Alternatively, it can be built by applying <db:link xlink:href="qmatrix.xml#basic-matrix-operations">basic matrix operations</db:link>. The matrix can also be defined when constructed, and it can be reset to the identity matrix (the default) using the <db:link xlink:href="qmatrix.xml#reset">reset</db:link>() function.</db:para>
<db:para>The <db:link xlink:href="qmatrix.xml">QMatrix</db:link> class supports mapping of graphic primitives: A given point, line, polygon, region, or painter path can be mapped to the coordinate system defined by <db:emphasis>this</db:emphasis> matrix using the <db:link xlink:href="qmatrix.xml#map">map</db:link>() function. In case of a rectangle, its coordinates can be transformed using the <db:link xlink:href="qmatrix.xml#mapRect">mapRect</db:link>() function. A rectangle can also be transformed into a <db:emphasis>polygon</db:emphasis> (mapped to the coordinate system defined by <db:emphasis>this</db:emphasis> matrix), using the <db:link xlink:href="qmatrix.xml#mapToPolygon">mapToPolygon</db:link>() function.</db:para>
<db:para><db:link xlink:href="qmatrix.xml">QMatrix</db:link> provides the <db:link xlink:href="qmatrix.xml#isIdentity">isIdentity</db:link>() function which returns <db:code>true</db:code> if the matrix is the identity matrix, and the <db:link xlink:href="qmatrix.xml#isInvertible">isInvertible</db:link>() function which returns <db:code>true</db:code> if the matrix is non-singular (i.e. AB = BA = I). The <db:link xlink:href="qmatrix.xml#inverted">inverted</db:link>() function returns an inverted copy of <db:emphasis>this</db:emphasis> matrix if it is invertible (otherwise it returns the identity matrix). In addition, <db:link xlink:href="qmatrix.xml">QMatrix</db:link> provides the <db:link xlink:href="qmatrix.xml#determinant">determinant</db:link>() function returning the matrix's determinant.</db:para>
<db:para>Finally, the <db:link xlink:href="qmatrix.xml">QMatrix</db:link> class supports matrix multiplication, and objects of the class can be streamed as well as compared.</db:para>
<db:section xml:id="rendering-graphics">
<db:title>Rendering Graphics</db:title>
<db:para>When rendering graphics, the matrix defines the transformations but the actual transformation is performed by the drawing routines in <db:link xlink:href="qpainter.xml">QPainter</db:link>.</db:para>
<db:para>By default, <db:link xlink:href="qpainter.xml">QPainter</db:link> operates on the associated device's own coordinate system. The standard coordinate system of a <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> has its origin located at the top-left position. The <db:emphasis>x</db:emphasis> values increase to the right; <db:emphasis>y</db:emphasis> values increase downward. For a complete description, see the <db:link xlink:href="coordsys.xml">coordinate system</db:link> documentation.</db:para>
<db:para><db:link xlink:href="qpainter.xml">QPainter</db:link> has functions to translate, scale, shear and rotate the coordinate system without using a <db:link xlink:href="qmatrix.xml">QMatrix</db:link>. For example:</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmatrix-simpletransformation.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">void SimpleTransformation::paintEvent(QPaintEvent *)
{
    QPainter painter(this);
    painter.setPen(QPen(Qt::blue, 1, Qt::DashLine));
    painter.drawRect(0, 0, 100, 100);

    painter.rotate(45);

    painter.setFont(QFont(&quot;Helvetica&quot;, 24));
    painter.setPen(QPen(Qt::black, 1));
    painter.drawText(20, 10, &quot;QMatrix&quot;);
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Although these functions are very convenient, it can be more efficient to build a <db:link xlink:href="qmatrix.xml">QMatrix</db:link> and call <db:link xlink:href="qpainter.xml#setMatrix">QPainter::setMatrix</db:link>() if you want to perform more than a single transform operation. For example:</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmatrix-combinedtransformation.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">void CombinedTransformation::paintEvent(QPaintEvent *)
{
    QPainter painter(this);
    painter.setPen(QPen(Qt::blue, 1, Qt::DashLine));
    painter.drawRect(0, 0, 100, 100);

    QMatrix matrix;
    matrix.translate(50, 50);
    matrix.rotate(45);
    matrix.scale(0.5, 1.0);
    painter.setMatrix(matrix);

    painter.setFont(QFont(&quot;Helvetica&quot;, 24));
    painter.setPen(QPen(Qt::black, 1));
    painter.drawText(20, 10, &quot;QMatrix&quot;);
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="basic-matrix-operations">
<db:title>Basic Matrix Operations</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmatrix-representation.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A <db:link xlink:href="qmatrix.xml">QMatrix</db:link> object contains a 3 x 3 matrix. The <db:code>dx</db:code> and <db:code>dy</db:code> elements specify horizontal and vertical translation. The <db:code>m11</db:code> and <db:code>m22</db:code> elements specify horizontal and vertical scaling. And finally, the <db:code>m21</db:code> and <db:code>m12</db:code> elements specify horizontal and vertical <db:emphasis>shearing</db:emphasis>.</db:para>
<db:para><db:link xlink:href="qmatrix.xml">QMatrix</db:link> transforms a point in the plane to another point using the following formulas:</db:para>
<db:programlisting language="cpp">x' = m11*x + m21*y + dx
y' = m22*y + m12*x + dy
</db:programlisting>
<db:para>The point <db:emphasis>(x, y)</db:emphasis> is the original point, and <db:emphasis>(x', y')</db:emphasis> is the transformed point. <db:emphasis>(x', y')</db:emphasis> can be transformed back to <db:emphasis>(x, y)</db:emphasis> by performing the same operation on the <db:link xlink:href="qmatrix.xml#inverted">inverted</db:link>() matrix.</db:para>
<db:para>The various matrix elements can be set when constructing the matrix, or by using the <db:link xlink:href="qmatrix.xml#setMatrix">setMatrix</db:link>() function later on. They can also be manipulated using the <db:link xlink:href="qmatrix.xml#translate">translate</db:link>(), <db:link xlink:href="qmatrix.xml#rotate">rotate</db:link>(), <db:link xlink:href="qmatrix.xml#scale">scale</db:link>() and <db:link xlink:href="qmatrix.xml#shear">shear</db:link>() convenience functions, The currently set values can be retrieved using the <db:link xlink:href="qmatrix.xml#m11">m11</db:link>(), <db:link xlink:href="qmatrix.xml#m12">m12</db:link>(), <db:link xlink:href="qmatrix.xml#m21">m21</db:link>(), <db:link xlink:href="qmatrix.xml#m22">m22</db:link>(), <db:link xlink:href="qmatrix.xml#dx">dx</db:link>() and <db:link xlink:href="qmatrix.xml#dy">dy</db:link>() functions.</db:para>
<db:para>Translation is the simplest transformation. Setting <db:code>dx</db:code> and <db:code>dy</db:code> will move the coordinate system <db:code>dx</db:code> units along the X axis and <db:code>dy</db:code> units along the Y axis. Scaling can be done by setting <db:code>m11</db:code> and <db:code>m22</db:code>. For example, setting <db:code>m11</db:code> to 2 and <db:code>m22</db:code> to 1.5 will double the height and increase the width by 50%. The identity matrix has <db:code>m11</db:code> and <db:code>m22</db:code> set to 1 (all others are set to 0) mapping a point to itself. Shearing is controlled by <db:code>m12</db:code> and <db:code>m21</db:code>. Setting these elements to values different from zero will twist the coordinate system. Rotation is achieved by carefully setting both the shearing factors and the scaling factors.</db:para>
<db:para>Here's the combined transformations example using basic matrix operations:</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmatrix-combinedtransformation.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">void BasicOperations::paintEvent(QPaintEvent *)
{
    double pi = 3.14;

    double a    = pi/180 * 45.0;
    double sina = sin(a);
    double cosa = cos(a);

    QMatrix translationMatrix(1, 0, 0, 1, 50.0, 50.0);
    QMatrix rotationMatrix(cosa, sina, -sina, cosa, 0, 0);
    QMatrix scalingMatrix(0.5, 0, 0, 1.0, 0, 0);

    QMatrix matrix;
    matrix =  scalingMatrix * rotationMatrix * translationMatrix;

    QPainter painter(this);
    painter.setPen(QPen(Qt::blue, 1, Qt::DashLine));
    painter.drawRect(0, 0, 100, 100);

    painter.setMatrix(matrix);

    painter.setFont(QFont(&quot;Helvetica&quot;, 24));
    painter.setPen(QPen(Qt::black, 1));
    painter.drawText(20, 10, &quot;QMatrix&quot;);
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml">QPainter</db:link></db:member>
<db:member><db:link xlink:href="qtransform.xml">QTransform</db:link></db:member>
<db:member><db:link xlink:href="coordsys.xml">Coordinate System</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-painting-affine-example.xml">Affine Transformations Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-painting-transformations-example.xml">Transformations Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMatrix-1">
<db:title>QMatrix::QMatrix()</db:title>
<db:constructorsynopsis>
<db:methodname>QMatrix</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an identity matrix.</db:para>
<db:para>All elements are set to zero except <db:code>m11</db:code> and <db:code>m22</db:code> (specifying the scale), which are set to 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#reset">reset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QMatrix-2">
<db:title>QMatrix::QMatrix(qreal <db:emphasis>m11</db:emphasis>, qreal <db:emphasis>m12</db:emphasis>, qreal <db:emphasis>m21</db:emphasis>, qreal <db:emphasis>m22</db:emphasis>, qreal <db:emphasis>dx</db:emphasis>, qreal <db:emphasis>dy</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMatrix</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>m11</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>m12</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>m21</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>m22</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>dx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix(qreal m11, qreal m12, qreal m21, qreal m22, qreal dx, qreal dy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a matrix with the elements, <db:code role="parameter">m11</db:code>, <db:code role="parameter">m12</db:code>, <db:code role="parameter">m21</db:code>, <db:code role="parameter">m22</db:code>, <db:code role="parameter">dx</db:code> and <db:code role="parameter">dy</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#setMatrix">setMatrix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QMatrix-4">
<db:title>QMatrix::QMatrix(const QMatrix &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMatrix</db:methodname>
<db:methodparam>
<db:type>const QMatrix &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix(const QMatrix &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a matrix that is a copy of the given <db:code role="parameter">matrix</db:code>.</db:para>
</db:section>
<db:section xml:id="m11">
<db:title>qreal QMatrix::m11() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>m11</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal m11() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the horizontal scaling factor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#scale">scale</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix.xml#basic-matrix-operations" role="deprecated">Basic Matrix Operations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="m12">
<db:title>qreal QMatrix::m12() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>m12</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal m12() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the vertical shearing factor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#shear">shear</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix.xml#basic-matrix-operations" role="deprecated">Basic Matrix Operations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="m21">
<db:title>qreal QMatrix::m21() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>m21</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal m21() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the horizontal shearing factor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#shear">shear</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix.xml#basic-matrix-operations" role="deprecated">Basic Matrix Operations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="m22">
<db:title>qreal QMatrix::m22() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>m22</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal m22() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the vertical scaling factor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#scale">scale</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix.xml#basic-matrix-operations" role="deprecated">Basic Matrix Operations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="determinant">
<db:title>[since 4.6] qreal QMatrix::determinant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>determinant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal determinant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the matrix's determinant.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
</db:section>
<db:section xml:id="dx">
<db:title>qreal QMatrix::dx() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>dx</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal dx() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the horizontal translation factor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#translate">translate</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix.xml#basic-matrix-operations" role="deprecated">Basic Matrix Operations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dy">
<db:title>qreal QMatrix::dy() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>dy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal dy() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the vertical translation factor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#translate">translate</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix.xml#basic-matrix-operations" role="deprecated">Basic Matrix Operations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inverted">
<db:title>QMatrix QMatrix::inverted(bool *<db:emphasis>invertible</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMatrix</db:type>
<db:methodname>inverted</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>invertible</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix inverted(bool *invertible) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an inverted copy of this matrix.</db:para>
<db:para>If the matrix is singular (not invertible), the returned matrix is the identity matrix. If <db:code role="parameter">invertible</db:code> is valid (i.e. not 0), its value is set to true if the matrix is invertible, otherwise it is set to false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#isInvertible">isInvertible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isIdentity">
<db:title>bool QMatrix::isIdentity() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isIdentity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isIdentity() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the matrix is the identity matrix, otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#reset">reset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isInvertible">
<db:title>bool QMatrix::isInvertible() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isInvertible</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isInvertible() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the matrix is invertible, otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#inverted">inverted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="map">
<db:title>void QMatrix::map(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal *<db:emphasis>tx</db:emphasis>, qreal *<db:emphasis>ty</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>map</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal *</db:type>
<db:parameter>tx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal *</db:type>
<db:parameter>ty</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void map(qreal x, qreal y, qreal *tx, qreal *ty) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the given coordinates <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> into the coordinate system defined by this matrix. The resulting values are put in *<db:code role="parameter">tx</db:code> and *<db:code role="parameter">ty</db:code>, respectively.</db:para>
<db:para>The coordinates are transformed using the following formulas:</db:para>
<db:programlisting language="cpp">x' = m11*x + m21*y + dx
y' = m22*y + m12*x + dy
</db:programlisting>
<db:para>The point (x, y) is the original point, and (x', y') is the transformed point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#basic-matrix-operations" role="deprecated">Basic Matrix Operations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="map-1">
<db:title>void QMatrix::map(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int *<db:emphasis>tx</db:emphasis>, int *<db:emphasis>ty</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>map</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>tx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>ty</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void map(int x, int y, int *tx, int *ty) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Maps the given coordinates <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> into the coordinate system defined by this matrix. The resulting values are put in *<db:code role="parameter">tx</db:code> and *<db:code role="parameter">ty</db:code>, respectively. Note that the transformed coordinates are rounded to the nearest integer.</db:para>
</db:section>
<db:section xml:id="map-2">
<db:title>QPoint QMatrix::map(const QPoint &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>map</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint map(const QPoint &amp;point) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates and returns a <db:link xlink:href="qpoint.xml">QPoint</db:link> object that is a copy of the given <db:code role="parameter">point</db:code>, mapped into the coordinate system defined by this matrix. Note that the transformed coordinates are rounded to the nearest integer.</db:para>
</db:section>
<db:section xml:id="map-3">
<db:title>QPointF QMatrix::map(const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>map</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF map(const QPointF &amp;point) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates and returns a <db:link xlink:href="qpointf.xml">QPointF</db:link> object that is a copy of the given <db:code role="parameter">point</db:code>, mapped into the coordinate system defined by this matrix.</db:para>
</db:section>
<db:section xml:id="map-4">
<db:title>QLine QMatrix::map(const QLine &amp;<db:emphasis>line</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLine</db:type>
<db:methodname>map</db:methodname>
<db:methodparam>
<db:type>const QLine &amp;</db:type>
<db:parameter>line</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QLine map(const QLine &amp;line) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates and returns a <db:link xlink:href="qline.xml">QLine</db:link> object that is a copy of the given <db:code role="parameter">line</db:code>, mapped into the coordinate system defined by this matrix. Note that the transformed coordinates are rounded to the nearest integer.</db:para>
</db:section>
<db:section xml:id="map-5">
<db:title>QLineF QMatrix::map(const QLineF &amp;<db:emphasis>line</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLineF</db:type>
<db:methodname>map</db:methodname>
<db:methodparam>
<db:type>const QLineF &amp;</db:type>
<db:parameter>line</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QLineF map(const QLineF &amp;line) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates and returns a <db:link xlink:href="qlinef.xml">QLineF</db:link> object that is a copy of the given <db:code role="parameter">line</db:code>, mapped into the coordinate system defined by this matrix.</db:para>
</db:section>
<db:section xml:id="map-6">
<db:title>QPolygonF QMatrix::map(const QPolygonF &amp;<db:emphasis>polygon</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>map</db:methodname>
<db:methodparam>
<db:type>const QPolygonF &amp;</db:type>
<db:parameter>polygon</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF map(const QPolygonF &amp;polygon) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates and returns a <db:link xlink:href="qpolygonf.xml">QPolygonF</db:link> object that is a copy of the given <db:code role="parameter">polygon</db:code>, mapped into the coordinate system defined by this matrix.</db:para>
</db:section>
<db:section xml:id="map-7">
<db:title>QPolygon QMatrix::map(const QPolygon &amp;<db:emphasis>polygon</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygon</db:type>
<db:methodname>map</db:methodname>
<db:methodparam>
<db:type>const QPolygon &amp;</db:type>
<db:parameter>polygon</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygon map(const QPolygon &amp;polygon) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates and returns a <db:link xlink:href="qpolygon.xml">QPolygon</db:link> object that is a copy of the given <db:code role="parameter">polygon</db:code>, mapped into the coordinate system defined by this matrix. Note that the transformed coordinates are rounded to the nearest integer.</db:para>
</db:section>
<db:section xml:id="map-8">
<db:title>QRegion QMatrix::map(const QRegion &amp;<db:emphasis>region</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>map</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>region</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion map(const QRegion &amp;region) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates and returns a <db:link xlink:href="qregion.xml">QRegion</db:link> object that is a copy of the given <db:code role="parameter">region</db:code>, mapped into the coordinate system defined by this matrix.</db:para>
<db:para>Calling this method can be rather expensive if rotations or shearing are used.</db:para>
</db:section>
<db:section xml:id="map-9">
<db:title>QPainterPath QMatrix::map(const QPainterPath &amp;<db:emphasis>path</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPainterPath</db:type>
<db:methodname>map</db:methodname>
<db:methodparam>
<db:type>const QPainterPath &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainterPath map(const QPainterPath &amp;path) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates and returns a <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> object that is a copy of the given <db:code role="parameter">path</db:code>, mapped into the coordinate system defined by this matrix.</db:para>
</db:section>
<db:section xml:id="mapRect">
<db:title>QRectF QMatrix::mapRect(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>mapRect</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF mapRect(const QRectF &amp;rectangle) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates and returns a <db:link xlink:href="qrectf.xml">QRectF</db:link> object that is a copy of the given <db:code role="parameter">rectangle</db:code>, mapped into the coordinate system defined by this matrix.</db:para>
<db:para>The rectangle's coordinates are transformed using the following formulas:</db:para>
<db:programlisting language="cpp">x' = m11*x + m21*y + dx
y' = m22*y + m12*x + dy
</db:programlisting>
<db:para>If rotation or shearing has been specified, this function returns the <db:emphasis>bounding</db:emphasis> rectangle. To retrieve the exact region the given <db:code role="parameter">rectangle</db:code> maps to, use the <db:link xlink:href="qmatrix.xml#mapToPolygon">mapToPolygon</db:link>() function instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#mapToPolygon">mapToPolygon</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix.xml#basic-matrix-operations" role="deprecated">Basic Matrix Operations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapRect-1">
<db:title>QRect QMatrix::mapRect(const QRect &amp;<db:emphasis>rectangle</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>mapRect</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect mapRect(const QRect &amp;rectangle) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates and returns a <db:link xlink:href="qrect.xml">QRect</db:link> object that is a copy of the given <db:code role="parameter">rectangle</db:code>, mapped into the coordinate system defined by this matrix. Note that the transformed coordinates are rounded to the nearest integer.</db:para>
</db:section>
<db:section xml:id="mapToPolygon">
<db:title>QPolygon QMatrix::mapToPolygon(const QRect &amp;<db:emphasis>rectangle</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygon</db:type>
<db:methodname>mapToPolygon</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygon mapToPolygon(const QRect &amp;rectangle) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates and returns a <db:link xlink:href="qpolygon.xml">QPolygon</db:link> representation of the given <db:code role="parameter">rectangle</db:code>, mapped into the coordinate system defined by this matrix.</db:para>
<db:para>The rectangle's coordinates are transformed using the following formulas:</db:para>
<db:programlisting language="cpp">x' = m11*x + m21*y + dx
y' = m22*y + m12*x + dy
</db:programlisting>
<db:para>Polygons and rectangles behave slightly differently when transformed (due to integer rounding), so <db:code>matrix.map(QPolygon(rectangle))</db:code> is not always the same as <db:code>matrix.mapToPolygon(rectangle)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#mapRect">mapRect</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix.xml#basic-matrix-operations" role="deprecated">Basic Matrix Operations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reset">
<db:title>void QMatrix::reset()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>reset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void reset()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets the matrix to an identity matrix, i.e. all elements are set to zero, except <db:code>m11</db:code> and <db:code>m22</db:code> (specifying the scale) which are set to 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#QMatrix-1">QMatrix</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix.xml#isIdentity">isIdentity</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix.xml#basic-matrix-operations" role="deprecated">Basic Matrix Operations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rotate">
<db:title>QMatrix &amp;QMatrix::rotate(qreal <db:emphasis>degrees</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMatrix &amp;</db:type>
<db:methodname>rotate</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>degrees</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix &amp; rotate(qreal degrees)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Rotates the coordinate system the given <db:code role="parameter">degrees</db:code> counterclockwise.</db:para>
<db:para>Note that if you apply a <db:link xlink:href="qmatrix.xml" role="deprecated">QMatrix</db:link> to a point defined in widget coordinates, the direction of the rotation will be clockwise because the y-axis points downwards.</db:para>
<db:para>Returns a reference to the matrix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#setMatrix">setMatrix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scale">
<db:title>QMatrix &amp;QMatrix::scale(qreal <db:emphasis>sx</db:emphasis>, qreal <db:emphasis>sy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMatrix &amp;</db:type>
<db:methodname>scale</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>sx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>sy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix &amp; scale(qreal sx, qreal sy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Scales the coordinate system by <db:code role="parameter">sx</db:code> horizontally and <db:code role="parameter">sy</db:code> vertically, and returns a reference to the matrix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#setMatrix">setMatrix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMatrix">
<db:title>void QMatrix::setMatrix(qreal <db:emphasis>m11</db:emphasis>, qreal <db:emphasis>m12</db:emphasis>, qreal <db:emphasis>m21</db:emphasis>, qreal <db:emphasis>m22</db:emphasis>, qreal <db:emphasis>dx</db:emphasis>, qreal <db:emphasis>dy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMatrix</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>m11</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>m12</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>m21</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>m22</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>dx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMatrix(qreal m11, qreal m12, qreal m21, qreal m22, qreal dx, qreal dy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the matrix elements to the specified values, <db:code role="parameter">m11</db:code>, <db:code role="parameter">m12</db:code>, <db:code role="parameter">m21</db:code>, <db:code role="parameter">m22</db:code>, <db:code role="parameter">dx</db:code> and <db:code role="parameter">dy</db:code>.</db:para>
<db:para>Note that this function replaces the previous values. <db:link xlink:href="qmatrix.xml" role="deprecated">QMatrix</db:link> provide the <db:link xlink:href="qmatrix.xml#translate">translate</db:link>(), <db:link xlink:href="qmatrix.xml#rotate">rotate</db:link>(), <db:link xlink:href="qmatrix.xml#scale">scale</db:link>() and <db:link xlink:href="qmatrix.xml#shear">shear</db:link>() convenience functions to manipulate the various matrix elements based on the currently defined coordinate system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#QMatrix-1">QMatrix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shear">
<db:title>QMatrix &amp;QMatrix::shear(qreal <db:emphasis>sh</db:emphasis>, qreal <db:emphasis>sv</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMatrix &amp;</db:type>
<db:methodname>shear</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>sh</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>sv</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix &amp; shear(qreal sh, qreal sv)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Shears the coordinate system by <db:code role="parameter">sh</db:code> horizontally and <db:code role="parameter">sv</db:code> vertically, and returns a reference to the matrix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#setMatrix">setMatrix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translate">
<db:title>QMatrix &amp;QMatrix::translate(qreal <db:emphasis>dx</db:emphasis>, qreal <db:emphasis>dy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMatrix &amp;</db:type>
<db:methodname>translate</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>dx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix &amp; translate(qreal dx, qreal dy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the coordinate system <db:code role="parameter">dx</db:code> along the x axis and <db:code role="parameter">dy</db:code> along the y axis, and returns a reference to the matrix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#setMatrix">setMatrix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>[since 4.2] QVariant QMatrix::operator QVariant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>operator QVariant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant operator QVariant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the matrix as a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QMatrix::operator!=(const QMatrix &amp;<db:emphasis>matrix</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QMatrix &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QMatrix &amp;matrix) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this matrix is not equal to the given <db:code role="parameter">matrix</db:code>, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2a">
<db:title>QMatrix QMatrix::operator*(const QMatrix &amp;<db:emphasis>matrix</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMatrix</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QMatrix &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix operator*(const QMatrix &amp;matrix) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the result of multiplying this matrix by the given <db:code role="parameter">matrix</db:code>.</db:para>
<db:para>Note that matrix multiplication is not commutative, i.e. a*b != b*a.</db:para>
</db:section>
<db:section xml:id="operator-2a-eq">
<db:title>QMatrix &amp;QMatrix::operator*=(const QMatrix &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMatrix &amp;</db:type>
<db:methodname>operator*=</db:methodname>
<db:methodparam>
<db:type>const QMatrix &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix &amp; operator*=(const QMatrix &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the result of multiplying this matrix by the given <db:code role="parameter">matrix</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QMatrix &amp;QMatrix::operator=(const QMatrix &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMatrix &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QMatrix &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMatrix &amp; operator=(const QMatrix &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the given <db:code role="parameter">matrix</db:code>'s values to this matrix.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QMatrix::operator==(const QMatrix &amp;<db:emphasis>matrix</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QMatrix &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QMatrix &amp;matrix) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this matrix is equal to the given <db:code role="parameter">matrix</db:code>, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qFuzzyCompare">
<db:title>[since 4.6] bool qFuzzyCompare(const QMatrix &amp;<db:emphasis>m1</db:emphasis>, const QMatrix &amp;<db:emphasis>m2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>qFuzzyCompare</db:methodname>
<db:methodparam>
<db:type>const QMatrix &amp;</db:type>
<db:parameter>m1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix &amp;</db:type>
<db:parameter>m2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool qFuzzyCompare(const QMatrix &amp;m1, const QMatrix &amp;m2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The qFuzzyCompare function is for comparing two matrices using a fuzziness factor.</db:para>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">m1</db:code> and <db:code role="parameter">m2</db:code> are equal, allowing for a small fuzziness factor for floating-point comparisons; false otherwise.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
</db:section>
<db:section xml:id="qHash">
<db:title>[since 5.6] uint qHash(const QMatrix &amp;<db:emphasis>key</db:emphasis>, uint <db:emphasis>seed</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>qHash</db:methodname>
<db:methodparam>
<db:type>const QMatrix &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>seed</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint qHash(const QMatrix &amp;key, uint seed)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the hash value for <db:code role="parameter">key</db:code>, using <db:code role="parameter">seed</db:code> to seed the calculation.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="operator-2a-1">
<db:title>QPoint operator*(const QPoint &amp;<db:emphasis>point</db:emphasis>, const QMatrix &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPoint</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint operator*(const QPoint &amp;point, const QMatrix &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is the same as <db:code role="parameter">matrix</db:code>.map(<db:code role="parameter">point</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#map">QMatrix::map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-2">
<db:title>QPointF operator*(const QPointF &amp;<db:emphasis>point</db:emphasis>, const QMatrix &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPointF</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF operator*(const QPointF &amp;point, const QMatrix &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:code role="parameter">matrix</db:code>.map(<db:code role="parameter">point</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#map">QMatrix::map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-3">
<db:title>QLineF operator*(const QLineF &amp;<db:emphasis>line</db:emphasis>, const QMatrix &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QLineF</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QLineF &amp;</db:type>
<db:parameter>line</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QLineF operator*(const QLineF &amp;line, const QMatrix &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is the same as <db:code role="parameter">matrix</db:code>.map(<db:code role="parameter">line</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#map">QMatrix::map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-4">
<db:title>QLine operator*(const QLine &amp;<db:emphasis>line</db:emphasis>, const QMatrix &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QLine</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QLine &amp;</db:type>
<db:parameter>line</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QLine operator*(const QLine &amp;line, const QMatrix &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is the same as <db:code role="parameter">matrix</db:code>.map(<db:code role="parameter">line</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#map">QMatrix::map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-5">
<db:title>QPolygonF operator*(const QPolygonF &amp;<db:emphasis>polygon</db:emphasis>, const QMatrix &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPolygonF</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QPolygonF &amp;</db:type>
<db:parameter>polygon</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF operator*(const QPolygonF &amp;polygon, const QMatrix &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is the same as <db:code role="parameter">matrix</db:code>.map(<db:code role="parameter">polygon</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#map">QMatrix::map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-6">
<db:title>QPolygon operator*(const QPolygon &amp;<db:emphasis>polygon</db:emphasis>, const QMatrix &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPolygon</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QPolygon &amp;</db:type>
<db:parameter>polygon</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygon operator*(const QPolygon &amp;polygon, const QMatrix &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is the same as <db:code role="parameter">matrix</db:code>.map(<db:code role="parameter">polygon</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#map">QMatrix::map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-7">
<db:title>QRegion operator*(const QRegion &amp;<db:emphasis>region</db:emphasis>, const QMatrix &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRegion</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>region</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion operator*(const QRegion &amp;region, const QMatrix &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is the same as <db:code role="parameter">matrix</db:code>.map(<db:code role="parameter">region</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#map">QMatrix::map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-8">
<db:title>QPainterPath operator*(const QPainterPath &amp;<db:emphasis>path</db:emphasis>, const QMatrix &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPainterPath</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QPainterPath &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainterPath operator*(const QPainterPath &amp;path, const QMatrix &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is the same as <db:code role="parameter">matrix</db:code>.map(<db:code role="parameter">path</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix.xml#map">QMatrix::map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QMatrix &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QMatrix &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the given <db:code role="parameter">matrix</db:code> to the given <db:code role="parameter">stream</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QMatrix &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QMatrix &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QMatrix &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads the given <db:code role="parameter">matrix</db:code> from the given <db:code role="parameter">stream</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
