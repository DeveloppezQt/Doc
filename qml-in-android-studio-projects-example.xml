<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick for Android Studio Projects</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Uses a <db:link xlink:href="qtquickview-android-class.xml">QtQuickView</db:link> to embed Qt Quick content in Android projects.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>This example contains a QML project that you can import into Android Studio with the <db:link xlink:href="">Qt Tools for Android Studio</db:link> plugin and Java and Kotlin projects that use the QML project as a View by utilizing the <db:link xlink:href="qtquickview-android-class.xml">QtQuickView</db:link> API.</db:para>
<db:para>For more information on how QML works, see the <db:link xlink:href="qtqml-index.xml">Qt Qml</db:link>. This documentation will focus on how a QML component is embedded into Java- and Kotlin-based Android applications.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/portrait_java.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>First, we look at the <db:code>MainActivity</db:code>'s onCreate() method of the Java and Kotlin projects.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    m_getPropertyValueText = findViewById(R.id.getPropertyValueText);
    m_qmlStatus = findViewById(R.id.qmlStatusText);
    m_androidControlsLayout = findViewById(R.id.javaLinear);
    m_box = findViewById(R.id.qmlColorBox);
    m_switch = findViewById(R.id.disconnectQmlListenerSwitch);
    m_switch.setOnClickListener(view -&gt; switchListener());
    m_qtQuickView = new QtQuickView(this);

    // Set status change listener for m_qmlView
    // listener implemented below in OnStatusChanged
    m_mainQmlContent.setStatusChangeListener(this);
    m_secondQmlContent.setStatusChangeListener(this);
    ViewGroup.LayoutParams params = new FrameLayout.LayoutParams(
            ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
    FrameLayout m_qmlFrameLayout = findViewById(R.id.qmlFrame);
    m_qmlFrameLayout.addView(m_qtQuickView, params);
    m_qtQuickView.loadContent(m_mainQmlContent);

    Button m_changeColorButton = findViewById(R.id.changeQmlColorButton);
    m_changeColorButton.setOnClickListener(view -&gt; onClickListener());
    Button m_loadMainQmlButton = findViewById(R.id.loadMainQml);
    m_loadMainQmlButton.setOnClickListener(view -&gt; loadMainQml());
    Button m_loadSecondQmlButton = findViewById(R.id.loadSecondQml);
    m_loadSecondQmlButton.setOnClickListener(view -&gt; loadSecondQml());
    Button m_rotateQmlGridButton = findViewById(R.id.rotateQmlGridButton);
    m_rotateQmlGridButton.setOnClickListener(view -&gt; rotateQmlGrid());
}

</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    m_binding = ActivityMainBinding.inflate(layoutInflater)
    val view = m_binding.root
    setContentView(view)

    m_binding.disconnectQmlListenerSwitch.setOnClickListener { switchListener() }

    m_qtQuickView = QtQuickView(this)

    // Set status change listener for m_qmlView
    // listener implemented below in OnStatusChanged
    m_mainQmlContent.setStatusChangeListener(this)
    m_secondQmlContent.setStatusChangeListener(this)

    val params: ViewGroup.LayoutParams = FrameLayout.LayoutParams(
        ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT
    )
    m_binding.qmlFrame.addView(m_qtQuickView, params)
    m_qtQuickView!!.loadContent(m_mainQmlContent)

    m_binding.changeQmlColorButton.setOnClickListener { onClickListener() }
    m_binding.loadMainQml.setOnClickListener { loadMainQml() }
    m_binding.loadSecondQml.setOnClickListener { loadSecondQml() }
    m_binding.rotateQmlGridButton.setOnClickListener { rotateQmlGrid() }
}
</db:programlisting>
<db:note>
<db:para>in the Kotlin project we use <db:link xlink:href="https://developer.android.com/topic/libraries/view-binding">View binding</db:link> to access the UI components of the application:</db:para>
</db:note>
<db:programlisting language="cpp">m_binding = ActivityMainBinding.inflate(layoutInflater)
val view = m_binding.root
setContentView(view)
</db:programlisting>
<db:para>Inside the <db:code>onCreate()</db:code> method, a previously declared variable <db:code>m_qtQuickView</db:code> is initialized with a new <db:link xlink:href="qtquickview-android-class.xml">QtQuickView</db:link>. This new instance of <db:link xlink:href="qtquickview-android-class.xml">QtQuickView</db:link> is created by giving it the Context of the Java/Kotlin Activity as an argument.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">m_qtQuickView = new QtQuickView(this);
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">m_qtQuickView = QtQuickView(this)
</db:programlisting>
<db:para>The <db:code>Main</db:code> and <db:code>Second</db:code> Java classes inherit from the <db:code>QtQuickViewContent</db:code> class. These classes are generated from the QML project that we've imported. In this example, these QML components are used to explain how to embed QML components into Android Projects.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">private final Main m_mainQmlContent = new Main();
private final Second m_secondQmlContent = new Second();
</db:programlisting>
<db:para>For a Kotlin-based project (initialized when declared):</db:para>
<db:programlisting language="cpp">private var m_mainQmlContent: Main = Main()
private val m_secondQmlContent: Second = Second()
</db:programlisting>
<db:para>The <db:code>m_mainQmlContent</db:code> is loaded into the <db:code>m_qtQuickView</db:code> through the <db:code>QtQuickView.loadContent()</db:code> method, which takes <db:code>QtQuickViewContent</db:code> as an argument.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">m_qtQuickView.loadContent(m_mainQmlContent);
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">m_qtQuickView!!.loadContent(m_mainQmlContent)
</db:programlisting>
<db:para>The <db:code>m_qtQuickView</db:code> is added to Android FrameLayout ViewGroup with appropriate layout parameters.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">ViewGroup.LayoutParams params = new FrameLayout.LayoutParams(
        ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
FrameLayout m_qmlFrameLayout = findViewById(R.id.qmlFrame);
m_qmlFrameLayout.addView(m_qtQuickView, params);
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">val params: ViewGroup.LayoutParams = FrameLayout.LayoutParams(
    ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT
)
m_binding.qmlFrame.addView(m_qtQuickView, params)
</db:programlisting>
</db:section>
<db:section xml:id="interacting-with-the-qml-component">
<db:title>Interacting with the QML component</db:title>
<db:para>To interact with the embedded QML component we implement the <db:code>QtQmlStatusChangeListener</db:code> interface and override the onStatusChanged method to get the loading status of the QtQuickViewContent currently being loaded into the <db:code>m_qtQuickView</db:code>.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">public class MainActivity extends AppCompatActivity implements
QtQmlStatusChangeListener{
    ...
}
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">class MainActivity : AppCompatActivity(), QtQmlStatusChangeListener{
    ...
}
</db:programlisting>
<db:para>The <db:code>onStatusChanged</db:code> implementation.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">@Override
public void onStatusChanged(QtQmlStatus qtQmlStatus) {
    Log.i(TAG, &quot;Status of QtQuickView: &quot; + qtQmlStatus);

    final String qmlStatus = getResources().getString(R.string.qml_view_status)
            + m_statusNames.get(qtQmlStatus);

    // Show current QML View status in a textview
    m_qmlStatus.setText(qmlStatus);

    // Connect signal listener to &quot;onClicked&quot; signal from main.qml
    // addSignalListener returns int which can be used later to identify the listener
    if (qtQmlStatus == QtQmlStatus.READY &amp;&amp; !m_switch.isChecked()) {
        m_qmlButtonSignalListenerId = m_mainQmlContent.connectOnClickedListener(
                (String name, Void v) -&gt; {
                    Log.i(TAG, &quot;QML button clicked&quot;);
                    m_androidControlsLayout.setBackgroundColor(Color.parseColor(
                            m_colors.getColor()
                    ));
                });

    }
}
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">override fun onStatusChanged(status: QtQmlStatus?) {
    Log.v(TAG, &quot;Status of QtQuickView: $status&quot;)

    val qmlStatus = (resources.getString(R.string.qml_view_status)
            + m_statusNames[status])

    // Show current QML View status in a textview
    m_binding.qmlStatusText.text = qmlStatus

    // Connect signal listener to &quot;onClicked&quot; signal from main.qml
    // addSignalListener returns int which can be used later to identify the listener
    if (status == QtQmlStatus.READY &amp;&amp; !m_binding.disconnectQmlListenerSwitch.isChecked) {
        m_qmlButtonSignalListenerId =
            m_mainQmlContent.connectOnClickedListener { _: String, _: Void? -&gt;
                Log.i(TAG, &quot;QML button clicked&quot;)
                m_binding.kotlinLinear.setBackgroundColor(
                    Color.parseColor(
                        m_colors.getColor()
                    )
                )
            }
    }
}
</db:programlisting>
<db:para>The <db:code>onStatusChanged</db:code> listener is set as the <db:code>statusChangeListener</db:code> of the <db:code>m_mainQmlContent</db:code> and <db:code>m_secondQmlContent</db:code> with <db:code>QtQuickViewContent.setStatusChangeListener(QtQmlStatusChangeListener onStatusChanged())</db:code> method.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">m_mainQmlContent.setStatusChangeListener(this);
m_secondQmlContent.setStatusChangeListener(this);
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">m_mainQmlContent.setStatusChangeListener(this)
m_secondQmlContent.setStatusChangeListener(this)
</db:programlisting>
<db:para>The overridden callback function <db:code>onStatusChanged()</db:code> receives <db:code>StatusChanged()</db:code> signal containing the current status (public Enum QtQmlStatus) of the loading of the current QtQuickViewContent into the <db:code>m_qtQuickView</db:code>. If this <db:code>QtQmlStatus</db:code> is confirmed to be <db:code>QtQmlStatus.READY</db:code>, we can start interacting with the QML view.</db:para>
</db:section>
<db:section xml:id="loading-qtquickviewcontents-into-qtquickview">
<db:title>Loading QtQuickViewContents into QtQuickView</db:title>
<db:para>You can have multiple QtQuickViewContents in the imported QML project and switch the currently loaded content of the QtQuickView between them using the QtQuickView.loadContent() method, which takes a QtQuickViewContent as an argument. This will load the QtQuickViewContent that was given and unloads the previous one, if there is one.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">private void loadSecondQml() {
    m_qtQuickView.loadContent(m_secondQmlContent);

    // Reset box color and color text after component reload
    m_box.setBackgroundColor(Color.parseColor(&quot;#00ffffff&quot;));
    m_getPropertyValueText.setText(&quot;&quot;);
}

private void loadMainQml() {
    m_qtQuickView.loadContent(m_mainQmlContent);

    // Reset box color and color text after component reload
    m_box.setBackgroundColor(Color.parseColor(&quot;#00ffffff&quot;));
    m_getPropertyValueText.setText(&quot;&quot;);
}
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">private fun loadSecondQml() {
    m_qtQuickView!!.loadContent(m_secondQmlContent)

    // Reset box color and color text after component reload
    m_binding.qmlColorBox.setBackgroundColor(Color.parseColor(&quot;#00ffffff&quot;))
    m_binding.getPropertyValueText.text = &quot;&quot;
}

private fun loadMainQml() {
    m_qtQuickView!!.loadContent(m_mainQmlContent)

    // Reset box color and color text after component reload
    m_binding.qmlColorBox.setBackgroundColor(Color.parseColor(&quot;#00ffffff&quot;))
    m_binding.getPropertyValueText.text = &quot;&quot;
}
</db:programlisting>
</db:section>
<db:section xml:id="getting-and-setting-qml-component-property-values">
<db:title>Getting and setting QML component property values</db:title>
<db:para>Getting and setting QML component property values happens through the methods described in the <db:code>Main.java</db:code> class. In this case we use the <db:code>m_mainQmlContent.setColorStringProperty()</db:code> and <db:code>m_mainQmlContent.getColorStringProperty()</db:code> methods. These methods are generated according to what properties the QML component includes.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">public void onClickListener() {
    // Set the QML view root object property &quot;colorStringFormat&quot; value to
    // color from Colors.getColor()
    m_mainQmlContent.setColorStringFormat(m_colors.getColor());

    String qmlBackgroundColor = m_mainQmlContent.getColorStringFormat();
    // Display the QML View background color code
    m_getPropertyValueText.setText(qmlBackgroundColor);

    // Display the QML View background color in a view
    // if qmlBackGroundColor is not null
    if (qmlBackgroundColor != null) {
        m_box.setBackgroundColor(Color.parseColor(qmlBackgroundColor));
    }
}
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">private fun onClickListener() {
    // Set the QML view root object property &quot;colorStringFormat&quot; value to
    // color from Colors.getColor()
    m_mainQmlContent.colorStringFormat = m_colors.getColor()

    val qmlBackgroundColor = m_mainQmlContent.colorStringFormat

    // Display the QML View background color code
    m_binding.getPropertyValueText.text = qmlBackgroundColor

    // Display the QML View background color in a view
    // if qmlBackgroundColor is not null
    if (qmlBackgroundColor != null) {
        m_binding.qmlColorBox.setBackgroundColor(Color.parseColor(qmlBackgroundColor))
    }
}
</db:programlisting>
<db:para>With the <db:code>m_mainQmlContent.setColorStringProperty()</db:code> method we set the <db:code>colorStringFormat</db:code> property value of the <db:code>m_mainQmlContent</db:code> a random color value that is fetched from the <db:code>Colors.java</db:code> (or <db:code>Colors.kt</db:code>) class.</db:para>
<db:para>The <db:code>m_mainQmlContent.getColorStringProperty()</db:code> method is used here to fetch the current background color of the root object of the m_mainQmlContent and then show it to the user on the Java/Kotlin Android side of the application.</db:para>
<db:para><db:code>m_secondQmlContent</db:code> has a <db:link xlink:href="qml-qtquick-grid.xml">Grid</db:link> QML component which we can rotate from the Java side with the generated <db:code>m_secondQmlContent.setGridRotation()</db:code> method.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">private void rotateQmlGrid() {
    Integer previousGridRotation = m_secondQmlContent.getGridRotation();
    if (previousGridRotation != null) {
        m_secondQmlContent.setGridRotation(previousGridRotation + 45);
    }
}
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">private fun rotateQmlGrid() {
    val previousGridRotation = m_secondQmlContent.gridRotation
    if (previousGridRotation != null) {
        m_secondQmlContent.gridRotation = previousGridRotation + 45
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="signal-listeners">
<db:title>Signal listeners</db:title>
<db:para>The <db:code>QtQuickViewContent</db:code> class offers a <db:code>connectSignalListener()</db:code> and <db:code>disconnectSignalListener()</db:code> methods which are used to connect and disconnect a signal listener/s between a signal/s that is/are declared in the QML component root object. The <db:code>QtQuickViewContent.connectSignalListener()</db:code> returns a unique signal listener id which we store and use later to identify and disconnect the listener.</db:para>
<db:para>Here we connect a signal listener to the <db:code>onClicked()</db:code> signal of the QML component.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">if (qtQmlStatus == QtQmlStatus.READY &amp;&amp; !m_switch.isChecked()) {
    m_qmlButtonSignalListenerId = m_mainQmlContent.connectOnClickedListener(
            (String name, Void v) -&gt; {
                Log.i(TAG, &quot;QML button clicked&quot;);
                m_androidControlsLayout.setBackgroundColor(Color.parseColor(
                        m_colors.getColor()
                ));
            });

}
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">if (status == QtQmlStatus.READY &amp;&amp; !m_binding.disconnectQmlListenerSwitch.isChecked) {
    m_qmlButtonSignalListenerId =
        m_mainQmlContent.connectOnClickedListener { _: String, _: Void? -&gt;
            Log.i(TAG, &quot;QML button clicked&quot;)
            m_binding.kotlinLinear.setBackgroundColor(
                Color.parseColor(
                    m_colors.getColor()
                )
            )
        }
}
</db:programlisting>
<db:para>The <db:code>onClicked()</db:code> signal is emitted every time the button on the QML component is clicked. That signal is then received by this listener and the background color of the layout holding the Android side of the application is set to a random color value fetched from the <db:code>Colors.java</db:code> class.</db:para>
<db:para>Next, the signal listener is disconnected using the <db:code>QtQuickViewContent.disconnectSignalListener()</db:code> method by giving it the unique signal listener id.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">m_mainQmlContent.disconnectSignalListener(m_qmlButtonSignalListenerId);
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">m_mainQmlContent.disconnectSignalListener(m_qmlButtonSignalListenerId)
</db:programlisting>
</db:section>
</db:article>
