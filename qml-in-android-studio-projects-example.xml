<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick for Android Studio Projects</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Uses a <db:link xlink:href="qtquickview-android-class.xml">QtQuickView</db:link> to embed Qt Quick content in Android projects.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt Quick for Android API examples are provided as Android Studio projects. The project folders are found in your Qt install location.</db:para>
<db:para>For example, under the default Windows install path, they are found here:</db:para>
<db:programlisting language="cpp" role="bad">C:\Qt\Examples\Qt-/1\platforms\android
</db:programlisting>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>This example contains a QML project that you can import into Android Studio with the <db:link xlink:href="">Qt Tools for Android Studio</db:link> plugin and Java and Kotlin projects that use the QML project as a View by utilizing the <db:link xlink:href="qtquickview-android-class.xml">QtQuickView</db:link> API.</db:para>
<db:para>For more information on how QML works, see the <db:link xlink:href="qtqml-index.xml">Qt Qml</db:link>. This documentation will focus on how a QML component is embedded into Java- and Kotlin-based Android applications.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/portrait_java.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>First, we look at the <db:code>MainActivity</db:code>'s onCreate() method of the Java and Kotlin projects.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    m_qmlViewBackgroundText = findViewById(R.id.qmlViewBackgroundText);
    m_qmlStatus = findViewById(R.id.qmlStatusText);
    m_androidControlsLayout = findViewById(R.id.javaRelative);
    m_colorBox = findViewById(R.id.qmlColorBox);
    m_switch = findViewById(R.id.disconnectQmlListenerSwitch);
    m_switch.setOnClickListener(view -&gt; switchListener());
    QtQuickView m_firstQuickView = new QtQuickView(this);
    QtQuickView m_secondQuickView = new QtQuickView(this);

    // Set status change listener for m_qmlView
    // listener implemented below in OnStatusChanged
    m_firstQmlContent.setStatusChangeListener(this);
    m_secondQmlContent.setStatusChangeListener(this);
    final ViewGroup.LayoutParams params = new FrameLayout.LayoutParams(
            ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
    FrameLayout m_firstQmlFrameLayout = findViewById(R.id.firstQmlFrame);
    m_firstQmlFrameLayout.addView(m_firstQuickView, params);
    FrameLayout m_secondQmlFrameLayout = findViewById(R.id.secondQmlFrame);
    m_secondQmlFrameLayout.addView(m_secondQuickView, params);
    m_firstQuickView.loadContent(m_firstQmlContent);
    m_secondQuickView.loadContent(m_secondQmlContent);

    Button m_changeColorButton = findViewById(R.id.changeQmlColorButton);
    m_changeColorButton.setOnClickListener(view -&gt; onClickListener());
    Button m_rotateQmlGridButton = findViewById(R.id.rotateQmlGridButton);
    m_rotateQmlGridButton.setOnClickListener(view -&gt; rotateQmlGrid());
}
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    m_binding = ActivityMainBinding.inflate(layoutInflater)
    val view = m_binding.root
    setContentView(view)

    m_binding.disconnectQmlListenerSwitch.setOnCheckedChangeListener { button, checked -&gt;
        switchListener(
            button,
            checked
        )
    }

    val firstQtQuickView = QtQuickView(this)
    val secondQtQuickView = QtQuickView(this)

    // Set status change listener for m_qmlView
    // listener implemented below in OnStatusChanged
    m_firstQmlContent.setStatusChangeListener(this)
    m_secondQmlContent.setStatusChangeListener(this)

    val params: ViewGroup.LayoutParams = FrameLayout.LayoutParams(
        ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT
    )
    m_binding.firstQmlFrame.addView(firstQtQuickView, params)
    m_binding.secondQmlFrame.addView(secondQtQuickView, params)
    firstQtQuickView.loadContent(m_firstQmlContent)
    secondQtQuickView.loadContent(m_secondQmlContent)

    m_binding.changeQmlColorButton.setOnClickListener { onClickListener() }
    m_binding.rotateQmlGridButton.setOnClickListener { rotateQmlGrid() }
}
</db:programlisting>
<db:note>
<db:para>in the Kotlin project we use <db:link xlink:href="https://developer.android.com/topic/libraries/view-binding">View binding</db:link> to access the UI components of the application:</db:para>
</db:note>
<db:programlisting language="cpp">m_binding = ActivityMainBinding.inflate(layoutInflater)
val view = m_binding.root
setContentView(view)
</db:programlisting>
<db:para>Inside the <db:code>onCreate()</db:code> method, previously declared variables are initialized with new <db:link xlink:href="qtquickview-android-class.xml">QtQuickViews</db:link>. These new instances of <db:link xlink:href="qtquickview-android-class.xml">QtQuickView</db:link> are created by giving them the Context of the Java/Kotlin Activity as arguments.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">QtQuickView m_firstQuickView = new QtQuickView(this);
QtQuickView m_secondQuickView = new QtQuickView(this);
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">val firstQtQuickView = QtQuickView(this)
val secondQtQuickView = QtQuickView(this)
</db:programlisting>
<db:para>The QtQuickViews are added to the Android layout with appropriate layout parameters.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">final ViewGroup.LayoutParams params = new FrameLayout.LayoutParams(
        ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
FrameLayout m_firstQmlFrameLayout = findViewById(R.id.firstQmlFrame);
m_firstQmlFrameLayout.addView(m_firstQuickView, params);
FrameLayout m_secondQmlFrameLayout = findViewById(R.id.secondQmlFrame);
m_secondQmlFrameLayout.addView(m_secondQuickView, params);
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">val params: ViewGroup.LayoutParams = FrameLayout.LayoutParams(
    ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT
)
m_binding.firstQmlFrame.addView(firstQtQuickView, params)
m_binding.secondQmlFrame.addView(secondQtQuickView, params)
</db:programlisting>
<db:para>The <db:code>Main</db:code> and <db:code>Second</db:code> Java classes inherit from the <db:code>QtQuickViewContent</db:code> class. These classes are generated from the QML project that we've imported.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">private final Main m_firstQmlContent = new Main();
private final Second m_secondQmlContent = new Second();
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">private val m_firstQmlContent: Main = Main()
private val m_secondQmlContent: Second = Second()
</db:programlisting>
<db:para>The Qt Quick content is loaded through the <db:code>QtQuickView.loadContent()</db:code> method, which takes a <db:code>QtQuickViewContent</db:code> as an argument.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">m_firstQuickView.loadContent(m_firstQmlContent);
m_secondQuickView.loadContent(m_secondQmlContent);
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">firstQtQuickView.loadContent(m_firstQmlContent)
secondQtQuickView.loadContent(m_secondQmlContent)
</db:programlisting>
</db:section>
<db:section xml:id="interacting-with-the-qml-components">
<db:title>Interacting with the QML components</db:title>
<db:para>To interact with the embedded QML components we implement the <db:code>QtQmlStatusChangeListener</db:code> interface and override the onStatusChanged method to get the loading status of the QtQuickViewContent currently being loaded into the QtQuickViews.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">public class MainActivity extends AppCompatActivity implements
QtQmlStatusChangeListener {
    ...
}
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">class MainActivity : AppCompatActivity(), QtQmlStatusChangeListener {
    ...
}
</db:programlisting>
<db:para>The <db:code>onStatusChanged</db:code> implementation:</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">@Override
public void onStatusChanged(QtQmlStatus qtQmlStatus, QtQuickViewContent content) {
    Log.i(TAG, &quot;Status of QtQuickView: &quot; + qtQmlStatus);

    // Show current QML View status in a textview
    m_qmlStatus.setText(getString(R.string.qml_view_status, m_statusNames.get(qtQmlStatus)));
    updateColorDisplay();

    if (content == m_firstQmlContent) {
        // Connect signal listener to &quot;onClicked&quot; signal from main.qml
        // addSignalListener returns int which can be used later to identify the listener
        if (qtQmlStatus == QtQmlStatus.READY &amp;&amp; m_switch.isChecked()) {
            m_qmlButtonSignalListenerId = m_firstQmlContent.connectOnClickedListener(
                    (String name, Void v) -&gt; {
                        Log.i(TAG, &quot;QML button clicked&quot;);
                        m_androidControlsLayout.setBackgroundColor(Color.parseColor(
                                m_colors.getColor()
                        ));
                    });
        }
    }
}
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">override fun onStatusChanged(status: QtQmlStatus?, content: QtQuickViewContent?) {
    Log.v(TAG, &quot;Status of QtQuickView: $status&quot;)

    // Show current QML View status in a textview
    m_binding.qmlStatusText.text = getString(R.string.qml_view_status, m_statusNames[status])

    updateColorDisplay()

    if (content == m_firstQmlContent) {
        // Connect signal listener to &quot;onClicked&quot; signal from main.qml
        // addSignalListener returns int which can be used later to identify the listener
        if (status == QtQmlStatus.READY &amp;&amp; m_binding.disconnectQmlListenerSwitch.isChecked) {
            m_qmlButtonSignalListenerId =
                m_firstQmlContent.connectOnClickedListener { _: String, _: Void? -&gt;
                    Log.i(TAG, &quot;QML button clicked&quot;)
                    m_binding.kotlinRelative.setBackgroundColor(
                        Color.parseColor(
                            m_colors.getColor()
                        )
                    )
                }
        }
    }
}
</db:programlisting>
<db:para>The <db:code>MainActivity</db:code> is set as the <db:code>statusChangeListener</db:code> of the <db:code>m_mainQmlContent</db:code> and <db:code>m_secondQmlContent</db:code> with the <db:code>QtQuickViewContent.setStatusChangeListener</db:code> method.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">m_firstQmlContent.setStatusChangeListener(this);
m_secondQmlContent.setStatusChangeListener(this);
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">m_firstQmlContent.setStatusChangeListener(this)
m_secondQmlContent.setStatusChangeListener(this)
</db:programlisting>
<db:para>The overridden callback function <db:code>onStatusChanged()</db:code> receives <db:code>StatusChanged()</db:code> signal containing the current status (public Enum QtQmlStatus) of the loading of the current <db:code>QtQuickViewContent</db:code> into the <db:link xlink:href="qtquickview-android-class.xml#qtquickview">QtQuickView</db:link>. If this <db:code>QtQmlStatus</db:code> is confirmed to be <db:code>QtQmlStatus.READY</db:code>, we can start interacting with the QML view.</db:para>
</db:section>
<db:section xml:id="getting-and-setting-qml-component-property-values">
<db:title>Getting and setting QML component property values</db:title>
<db:para>Getting and setting QML component property values happens through the methods described in the <db:code>Main.java</db:code> class. In this case we use the <db:code>m_mainQmlContent.setColorStringProperty()</db:code> and <db:code>m_mainQmlContent.getColorStringProperty()</db:code> methods. These methods are generated according to what properties the QML component includes.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">public void onClickListener() {
    // Set the QML view root object property &quot;colorStringFormat&quot; value to
    // color from Colors.getColor()
    m_firstQmlContent.setColorStringFormat(m_colors.getColor());
    updateColorDisplay();
}
private void updateColorDisplay() {
    String qmlBackgroundColor = m_firstQmlContent.getColorStringFormat();
    // Display the QML View background color code
    m_qmlViewBackgroundText.setText(qmlBackgroundColor);

    // Display the QML View background color in a view
    // if qmlBackGroundColor is not null
    if (qmlBackgroundColor != null) {
        m_colorBox.setBackgroundColor(Color.parseColor(qmlBackgroundColor));
    }
}
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">private fun onClickListener() {
    // Set the QML view root object property &quot;colorStringFormat&quot; value to
    // color from Colors.getColor()
    m_firstQmlContent.colorStringFormat = m_colors.getColor()
    updateColorDisplay()
}

private fun updateColorDisplay() {
    val qmlBackgroundColor = m_firstQmlContent.colorStringFormat
    // Display the QML View background color code
    m_binding.qmlViewBackgroundText.text = qmlBackgroundColor
    // Display the QML View background color in a view
    // if qmlBackgroundColor is not null
    if (qmlBackgroundColor != null) {
        m_binding.qmlColorBox.setBackgroundColor(Color.parseColor(qmlBackgroundColor))
    }
}
</db:programlisting>
<db:para>With the <db:code>m_mainQmlContent.setColorStringProperty()</db:code> method we set the <db:code>colorStringFormat</db:code> property value of the <db:code>m_mainQmlContent</db:code> a random color value that is fetched from the <db:code>Colors.java</db:code> (or <db:code>Colors.kt</db:code>) class.</db:para>
<db:para>The <db:code>m_mainQmlContent.getColorStringProperty()</db:code> method is used here to fetch the current background color of the root object of the m_mainQmlContent and then show it to the user on the Java/Kotlin Android side of the application.</db:para>
<db:para><db:code>m_secondQmlContent</db:code> has a <db:link xlink:href="qml-qtquick-grid.xml">Grid</db:link> QML component which we can rotate from the Java side with the generated <db:code>m_secondQmlContent.setGridRotation()</db:code> method.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">private void rotateQmlGrid() {
    Integer previousGridRotation = m_secondQmlContent.getGridRotation();
    if (previousGridRotation != null) {
        m_secondQmlContent.setGridRotation(previousGridRotation + 45);
    }
}
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">private fun rotateQmlGrid() {
    val previousGridRotation = m_secondQmlContent.gridRotation
    if (previousGridRotation != null) {
        m_secondQmlContent.gridRotation = previousGridRotation + 45
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="signal-listeners">
<db:title>Signal listeners</db:title>
<db:para>The <db:code>QtQuickViewContent</db:code> class offers a <db:code>connectSignalListener()</db:code> and <db:code>disconnectSignalListener()</db:code> methods which are used to connect and disconnect signal listener between signals that are declared in the QML component root object. The <db:code>QtQuickViewContent.connectSignalListener()</db:code> returns a unique signal listener id which we store and use later to identify and disconnect the listener.</db:para>
<db:para>Here we connect a signal listener to the <db:code>onClicked()</db:code> signal of the QML component.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">if (qtQmlStatus == QtQmlStatus.READY &amp;&amp; m_switch.isChecked()) {
    m_qmlButtonSignalListenerId = m_firstQmlContent.connectOnClickedListener(
            (String name, Void v) -&gt; {
                Log.i(TAG, &quot;QML button clicked&quot;);
                m_androidControlsLayout.setBackgroundColor(Color.parseColor(
                        m_colors.getColor()
                ));
            });
}
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">if (status == QtQmlStatus.READY &amp;&amp; m_binding.disconnectQmlListenerSwitch.isChecked) {
    m_qmlButtonSignalListenerId =
        m_firstQmlContent.connectOnClickedListener { _: String, _: Void? -&gt;
            Log.i(TAG, &quot;QML button clicked&quot;)
            m_binding.kotlinRelative.setBackgroundColor(
                Color.parseColor(
                    m_colors.getColor()
                )
            )
        }
}
</db:programlisting>
<db:para>The <db:code>onClicked()</db:code> signal is emitted every time the button on the QML component is clicked. That signal is then received by this listener and the background color of the layout holding the Android side of the application is set to a random color value fetched from the <db:code>Colors.java</db:code> class.</db:para>
<db:para>Next, the signal listener is disconnected using the <db:code>QtQuickViewContent.disconnectSignalListener()</db:code> method by giving it the unique signal listener id.</db:para>
<db:para>For a Java-based project:</db:para>
<db:programlisting language="cpp">m_firstQmlContent.disconnectSignalListener(m_qmlButtonSignalListenerId);
</db:programlisting>
<db:para>For a Kotlin-based project:</db:para>
<db:programlisting language="cpp">m_firstQmlContent.disconnectSignalListener(m_qmlButtonSignalListenerId)
</db:programlisting>
</db:section>
</db:article>
