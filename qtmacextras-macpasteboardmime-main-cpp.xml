<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>macOS: Pasteboard MIME Converter</db:title>
<db:productname>QtMacExtras</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Mac Extras Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates using <db:link xlink:href="qmacpasteboardmime.xml">QMacPasteboardMime</db:link> class.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtMacExtras module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QApplication&gt;
#include &lt;QDebug&gt;
#include &lt;QDragEnterEvent&gt;
#include &lt;QDropEvent&gt;
#include &lt;QWidget&gt;

#include &lt;qmacpasteboardmime.h&gt;

class VCardMime : public QMacPasteboardMime
{
public:
    VCardMime() : QMacPasteboardMime(MIME_ALL)
    { }

    QString convertorName()
    {
        return QString(&quot;VCardMime&quot;);
    }

    bool canConvert(const QString &amp;mime, QString flav)
    {
        return mimeFor(flav) == mime;
    }

    QString mimeFor(QString flav)
    {
        if (flav == QString(&quot;public.vcard&quot;))
            return QString(&quot;application/x-mycompany-VCard&quot;);
        return QString();
    }

    QString flavorFor(const QString &amp;mime)
    {
        if (mime == QString(&quot;application/x-mycompany-VCard&quot;))
            return QString(&quot;public.vcard&quot;);
        return QString();
    }

    QVariant convertToMime(const QString &amp;mime, QList&lt;QByteArray&gt; data, QString flav)
    {
        Q_UNUSED(mime);
        Q_UNUSED(flav);

        QByteArray all;
        foreach (QByteArray i, data) {
            all += i;
        }
        return QVariant(all);
    }

    QList&lt;QByteArray&gt; convertFromMime(const QString &amp;mime, QVariant data, QString flav)
    {
        Q_UNUSED(mime);
        Q_UNUSED(data);
        Q_UNUSED(flav);
        // Todo: implement!
        return QList&lt;QByteArray&gt;();
    }

};

class TestWidget : public QWidget
{
public:
    TestWidget() : QWidget(0)
    {
        vcardMime = new VCardMime();
        setAcceptDrops(true);
    }

    ~TestWidget()
    {
        delete vcardMime;
    }

    void dragEnterEvent(QDragEnterEvent *e)
    {
        e-&gt;accept();

    }

    virtual void dropEvent(QDropEvent *e)
    {
        e-&gt;accept();
        contentsDropEvent(e);
    }

    void contentsDropEvent(QDropEvent* e)
    {
        if ( e-&gt;mimeData()-&gt;hasFormat( &quot;application/x-mycompany-VCard&quot; ) )
        {
            QString s = QString( e-&gt;mimeData()-&gt;data( &quot;application/x-mycompany-VCard&quot; ) );

            // s now contains text of vcard
            qDebug() &lt;&lt; &quot;got vcard&quot; &lt;&lt; s.count();

            e-&gt;acceptProposedAction();
        }
    }
private:
    VCardMime *vcardMime;
};

int main(int argc, char **argv)
{
    QApplication app(argc, argv);

    qRegisterDraggedTypes(QStringList() &lt;&lt; QLatin1String(&quot;public.vcard&quot;));

    TestWidget wid1;
    wid1.show();

    return app.exec();
}

</db:programlisting>
</db:article>
