<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Particles 3D Testbed Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to use the Qt Quick 3D Particles3D module.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2021 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick3D.Particles3D
import QtQuick.Controls

Frame {
    property var particleSystems
    readonly property bool loggingEnabled: settings.showLoggingView
    property bool intervalInstant: false
    property real itemWidth: (width - loggingButton.width - intervalButton.width) / 7

    width: parent.width
    height: tableContent.height + 30

    Component.onCompleted: {
        for (const psystem of particleSystems)
            psystem.logging = settings.showLoggingView;
    }

    // Background
    background: Rectangle {
        color: &quot;#80000000&quot;
        visible: loggingEnabled
    }

    Button {
        id: loggingButton
        anchors.verticalCenter: parent.verticalCenter
        anchors.right: parent.right
        anchors.rightMargin: 10
        opacity: loggingEnabled ? 1.0 : 0.4
        icon.source: &quot;qrc:/qml/images/icon_logging.png&quot;
        icon.width: 32
        icon.height: 32
        icon.color: &quot;transparent&quot;
        background: Rectangle {
            color: &quot;transparent&quot;
        }
        onClicked: {
            settings.showLoggingView = !settings.showLoggingView
            for (const psystem of particleSystems) {
                psystem.logging = settings.showLoggingView;
            }
        }
    }

    Button {
        id: intervalButton
        anchors.verticalCenter: parent.verticalCenter
        anchors.right: loggingButton.left
        anchors.rightMargin: 0
        visible: loggingEnabled
        opacity: intervalInstant ? 1.0 : 0.2
        icon.source: &quot;qrc:/qml/images/icon_interval.png&quot;
        icon.width: 32
        icon.height: 32
        icon.color: &quot;transparent&quot;
        background: Rectangle {
            color: &quot;transparent&quot;
        }
        onClicked: {
            intervalInstant = !intervalInstant;
            var interval = intervalInstant ? 0 : 1000;
            for (const psystem of particleSystems)
                psystem.loggingData.loggingInterval = interval;
        }
    }

    Component {
        id: systemItem
        Row {
            Text {
                width: itemWidth
                horizontalAlignment: Text.AlignHCenter
                color: &quot;#ffffff&quot;
                font.pointSize: settings.fontSizeSmall
                text: modelData.seed
            }
            Text {
                width: itemWidth
                horizontalAlignment: Text.AlignHCenter
                color: &quot;#ffffff&quot;
                font.pointSize: settings.fontSizeSmall
                text: modelData.loggingData.updates
            }
            Text {
                width: itemWidth
                horizontalAlignment: Text.AlignHCenter
                color: &quot;#ffffff&quot;
                font.pointSize: settings.fontSizeSmall
                text: modelData.loggingData.particlesMax
            }
            Text {
                width: itemWidth
                horizontalAlignment: Text.AlignHCenter
                color: &quot;#ffffff&quot;
                font.pointSize: settings.fontSizeSmall
                text: modelData.loggingData.particlesUsed
            }
            Text {
                width: itemWidth
                horizontalAlignment: Text.AlignHCenter
                color: &quot;#ffffff&quot;
                font.pointSize: settings.fontSizeSmall
                text: modelData.loggingData.time.toFixed(4)
            }
            Text {
                width: itemWidth
                horizontalAlignment: Text.AlignHCenter
                color: &quot;#ffffff&quot;
                font.pointSize: settings.fontSizeSmall
                text: modelData.loggingData.timeAverage.toFixed(4)
            }
            Text {
                width: itemWidth
                horizontalAlignment: Text.AlignHCenter
                color: &quot;#ffffff&quot;
                font.pointSize: settings.fontSizeSmall
                text: modelData.loggingData.timeDeviation.toFixed(4)
            }
        }
    }

    Column {
        id: tableContent
        width: parent.width
        anchors.verticalCenter: parent.verticalCenter
        visible: loggingEnabled
        Row {
            Text {
                width: itemWidth
                horizontalAlignment: Text.AlignHCenter
                color: &quot;#ffffff&quot;
                font.pointSize: settings.fontSizeSmall
                text: qsTr(&quot;SEED&quot;)
            }
            Text {
                width: itemWidth
                horizontalAlignment: Text.AlignHCenter
                color: &quot;#ffffff&quot;
                font.pointSize: settings.fontSizeSmall
                text: qsTr(&quot;UPDATES&quot;)
            }
            Text {
                width: itemWidth
                horizontalAlignment: Text.AlignHCenter
                color: &quot;#ffffff&quot;
                font.pointSize: settings.fontSizeSmall
                text: qsTr(&quot;P. MAX&quot;)
            }
            Text {
                width: itemWidth
                horizontalAlignment: Text.AlignHCenter
                color: &quot;#ffffff&quot;
                font.pointSize: settings.fontSizeSmall
                text: qsTr(&quot;P. USED&quot;)
            }
            Text {
                width: itemWidth
                horizontalAlignment: Text.AlignHCenter
                color: &quot;#ffffff&quot;
                font.pointSize: settings.fontSizeSmall
                text: qsTr(&quot;TIME&quot;)
            }
            Text {
                width: itemWidth
                horizontalAlignment: Text.AlignHCenter
                color: &quot;#ffffff&quot;
                font.pointSize: settings.fontSizeSmall
                text: qsTr(&quot;TIME AVG.&quot;)
            }
            Text {
                width: itemWidth
                horizontalAlignment: Text.AlignHCenter
                color: &quot;#ffffff&quot;
                font.pointSize: settings.fontSizeSmall
                text: qsTr(&quot;TIME DEV.&quot;)
            }
        }
        Repeater {
            model: particleSystems
            delegate: systemItem
        }
    }
}

</db:programlisting>
</db:article>
