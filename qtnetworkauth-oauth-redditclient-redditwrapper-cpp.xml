<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Reddit Example</db:title>
<db:productname>QtNetworkAuth</db:productname>
<db:edition>Qt Network Authorization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Network Authorization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates authenticating with OAuth 2 to access Reddit.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Network Auth module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;redditwrapper.h&quot;

#include &amp;lt;QtGui&amp;gt;
#include &amp;lt;QtCore&amp;gt;
#include &amp;lt;QtNetworkAuth&amp;gt;

const QUrl newUrl(&quot;https://oauth.reddit.com/new&quot;);
const QUrl hotUrl(&quot;https://oauth.reddit.com/hot&quot;);
const QUrl liveThreadsUrl(&quot;https://oauth.reddit.com/live/XXXX/about.json&quot;);

RedditWrapper::RedditWrapper(QObject *parent) : QObject(parent)
{
    auto replyHandler = new QOAuthHttpServerReplyHandler(1337, this);
    oauth2.setReplyHandler(replyHandler);
    oauth2.setAuthorizationUrl(QUrl(&quot;https://www.reddit.com/api/v1/authorize&quot;));
    oauth2.setAccessTokenUrl(QUrl(&quot;https://www.reddit.com/api/v1/access_token&quot;));
    oauth2.setScope(&quot;identity read&quot;);

    connect(&amp;amp;oauth2, &amp;amp;QOAuth2AuthorizationCodeFlow::statusChanged, [=](
            QAbstractOAuth::Status status) {
        if (status == QAbstractOAuth::Status::Granted)
            emit authenticated();
    });
    oauth2.setModifyParametersFunction([&amp;amp;](QAbstractOAuth::Stage stage, QVariantMap *parameters) {
        if (stage == QAbstractOAuth::Stage::RequestingAuthorization &amp;amp;&amp;amp; isPermanent())
            parameters-&amp;gt;insert(&quot;duration&quot;, &quot;permanent&quot;);
    });
    connect(&amp;amp;oauth2, &amp;amp;QOAuth2AuthorizationCodeFlow::authorizeWithBrowser,
            &amp;amp;QDesktopServices::openUrl);
}

RedditWrapper::RedditWrapper(const QString &amp;amp;clientIdentifier, QObject *parent) :
    RedditWrapper(parent)
{
    oauth2.setClientIdentifier(clientIdentifier);
}

QNetworkReply *RedditWrapper::requestHotThreads()
{
    qDebug() &amp;lt;&amp;lt; &quot;Getting hot threads...&quot;;
    return oauth2.get(hotUrl);
}

bool RedditWrapper::isPermanent() const
{
    return permanent;
}

void RedditWrapper::setPermanent(bool value)
{
    permanent = value;
}

void RedditWrapper::grant()
{
    oauth2.grant();
}

void RedditWrapper::subscribeToLiveUpdates()
{
    qDebug() &amp;lt;&amp;lt; &quot;Susbscribing...&quot;;
    QNetworkReply *reply = oauth2.get(liveThreadsUrl);
    connect(reply, &amp;amp;QNetworkReply::finished, [=]() {
        reply-&amp;gt;deleteLater();
        if (reply-&amp;gt;error() != QNetworkReply::NoError) {
            qCritical() &amp;lt;&amp;lt; &quot;Reddit error:&quot; &amp;lt;&amp;lt; reply-&amp;gt;errorString();
            return;
        }

        const auto json = reply-&amp;gt;readAll();

        const auto document = QJsonDocument::fromJson(json);
        Q_ASSERT(document.isObject());
        const auto rootObject = document.object();
        const auto dataValue = rootObject.value(&quot;data&quot;);
        Q_ASSERT(dataValue.isObject());
        const auto dataObject = dataValue.toObject();
        const auto websocketUrlValue = dataObject.value(&quot;websocket_url&quot;);
        Q_ASSERT(websocketUrlValue.isString() &amp;amp;&amp;amp; websocketUrlValue.toString().size());
        const QUrl websocketUrl(websocketUrlValue.toString());
        emit subscribed(websocketUrl);
    });
}

</db:programlisting>
</db:article>
