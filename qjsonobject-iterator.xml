<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>iterator Class</db:title>
<db:subtitle>QJsonObject::iterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qjsonobject-iterator.xml">QJsonObject::iterator</db:link> class provides an STL-style non-const iterator for <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link>.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>iterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>iterator is part of <db:simplelist><db:member><db:link xlink:href="json.xml">JSON Support in Qt</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qjsonobject-iterator.xml">QJsonObject::iterator</db:link> allows you to iterate over a <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link> and to modify the value (but not the key) stored under a particular key. If you want to iterate over a const <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link>, you should use <db:link xlink:href="qjsonobject-const-iterator.xml">QJsonObject::const_iterator</db:link>. It is generally good practice to use <db:link xlink:href="qjsonobject-const-iterator.xml">QJsonObject::const_iterator</db:link> on a non-const <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link> as well, unless you need to change the <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link> through the iterator. Const iterators are slightly faster, and improve code readability.</db:para>
<db:para>The default <db:link xlink:href="qjsonobject-iterator.xml">QJsonObject::iterator</db:link> constructor creates an uninitialized iterator. You must initialize it using a <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link> function like <db:link xlink:href="qjsonobject.xml#begin">QJsonObject::begin</db:link>(), <db:link xlink:href="qjsonobject.xml#end">QJsonObject::end</db:link>(), or <db:link xlink:href="qjsonobject.xml#find">QJsonObject::find</db:link>() before you can start iterating.</db:para>
<db:para>Multiple iterators can be used on the same object. Existing iterators will however become dangling once the object gets modified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonobject-const-iterator.xml">QJsonObject::const_iterator</db:link></db:member>
<db:member><db:link xlink:href="json.xml">JSON Support in Qt</db:link></db:member>
<db:member><db:link xlink:href="qtcore-json-savegame-example.xml">JSON Save Game Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="iterator_category-typedef">
<db:title>iterator::iterator_category</db:title>
<db:para>A synonym for <db:emphasis>std::bidirectional_iterator_tag</db:emphasis> indicating this iterator is a bidirectional iterator.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="operator-eq-eq">
<db:title>bool iterator::operator==(const QJsonObject::const_iterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-eq-eq-1">bool iterator::operator==(const QJsonObject::iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns true if <db:code role="parameter">other</db:code> points to the same item as this iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonobject-iterator.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool iterator::operator!=(const QJsonObject::const_iterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-not-eq-1">bool iterator::operator!=(const QJsonObject::iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns true if <db:code role="parameter">other</db:code> points to a different item than this iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonobject-iterator.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="iterator">
<db:title>[constexpr] iterator::iterator()</db:title>
<db:para>Constructs an uninitialized iterator.</db:para>
<db:para>Functions like <db:link xlink:href="qjsonobject-iterator.xml#key">key</db:link>(), <db:link xlink:href="qjsonobject-iterator.xml#value">value</db:link>(), and operator++() must not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonobject.xml#begin">QJsonObject::begin</db:link>()</db:member>
<db:member><db:link xlink:href="qjsonobject.xml#end">QJsonObject::end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="key">
<db:title>QString iterator::key() const</db:title>
<db:para>Returns the current item's key.</db:para>
<db:para>There is no direct way of changing an item's key through an iterator, although it can be done by calling <db:link xlink:href="qjsonobject.xml#erase">QJsonObject::erase</db:link>() followed by <db:link xlink:href="qjsonobject.xml#insert">QJsonObject::insert</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonobject-iterator.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>int iterator::value() const</db:title>
<db:para>Returns a modifiable reference to the current item's value.</db:para>
<db:para>You can change the value of an item by using value() on the left side of an assignment.</db:para>
<db:para>The return value is of type <db:link xlink:href="qjsonvalue.xml#qjsonvalueref">QJsonValueRef</db:link>, a helper class for <db:link xlink:href="qjsonarray.xml">QJsonArray</db:link> and <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link>. When you get an object of type <db:link xlink:href="qjsonvalue.xml#qjsonvalueref">QJsonValueRef</db:link>, you can use it as if it were a reference to a <db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link>. If you assign to it, the assignment will apply to the element in the <db:link xlink:href="qjsonarray.xml">QJsonArray</db:link> or <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link> from which you got the reference.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonobject-iterator.xml#key">key</db:link>()</db:member>
<db:member><db:link xlink:href="qjsonobject-iterator.xml#operator-2a">operator*</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a">
<db:title>int iterator::operator*() const</db:title>
<db:para>Returns a modifiable reference to the current item's value.</db:para>
<db:para>Same as <db:link xlink:href="qjsonobject-iterator.xml#value">value</db:link>().</db:para>
<db:para>The return value is of type <db:link xlink:href="qjsonvalue.xml#qjsonvalueref">QJsonValueRef</db:link>, a helper class for <db:link xlink:href="qjsonarray.xml">QJsonArray</db:link> and <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link>. When you get an object of type <db:link xlink:href="qjsonvalue.xml#qjsonvalueref">QJsonValueRef</db:link>, you can use it as if it were a reference to a <db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link>. If you assign to it, the assignment will apply to the element in the <db:link xlink:href="qjsonarray.xml">QJsonArray</db:link> or <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link> from which you got the reference.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonobject-iterator.xml#key">key</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b">
<db:title>QJsonObject::iterator iterator::operator+(int <db:emphasis>j</db:emphasis>) const</db:title>
<db:para>Returns an iterator to the item at <db:code role="parameter">j</db:code> positions forward from this iterator. If <db:code role="parameter">j</db:code> is negative, the iterator goes backward.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonobject-iterator.xml#operator-">operator-</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b">
<db:title>QJsonObject::iterator &amp;iterator::operator++()</db:title>
<db:para>The prefix ++ operator, ++i, advances the iterator to the next item in the object and returns an iterator to the new current item.</db:para>
<db:para>Calling this function on <db:link xlink:href="qjsonobject.xml#end">QJsonObject::end</db:link>() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonobject-iterator.xml#operator--">operator--</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b-1">
<db:title>QJsonObject::iterator iterator::operator++(<db:emphasis>int</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix ++ operator, i++, advances the iterator to the next item in the object and returns an iterator to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>QJsonObject::iterator &amp;iterator::operator+=(int <db:emphasis>j</db:emphasis>)</db:title>
<db:para>Advances the iterator by <db:code role="parameter">j</db:code> items. If <db:code role="parameter">j</db:code> is negative, the iterator goes backward.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonobject-iterator.xml#operator--eq">operator-=</db:link>()</db:member>
<db:member><db:link xlink:href="qjsonobject-iterator.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-">
<db:title>QJsonObject::iterator iterator::operator-(int <db:emphasis>j</db:emphasis>) const</db:title>
<db:para>Returns an iterator to the item at <db:code role="parameter">j</db:code> positions backward from this iterator. If <db:code role="parameter">j</db:code> is negative, the iterator goes forward.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonobject-iterator.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--">
<db:title>QJsonObject::iterator &amp;iterator::operator--()</db:title>
<db:para>The prefix – operator, --i, makes the preceding item current and returns an iterator pointing to the new current item.</db:para>
<db:para>Calling this function on <db:link xlink:href="qjsonobject.xml#begin">QJsonObject::begin</db:link>() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonobject-iterator.xml#operator-2b-2b">operator++</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator---1">
<db:title>QJsonObject::iterator iterator::operator--(<db:emphasis>int</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix – operator, i--, makes the preceding item current and returns an iterator pointing to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator--eq">
<db:title>QJsonObject::iterator &amp;iterator::operator-=(int <db:emphasis>j</db:emphasis>)</db:title>
<db:para>Makes the iterator go back by <db:code role="parameter">j</db:code> items. If <db:code role="parameter">j</db:code> is negative, the iterator goes forward.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonobject-iterator.xml#operator-2b-eq">operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qjsonobject-iterator.xml#operator-">operator-</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--gt">
<db:title>int *iterator::operator-&gt;() const</db:title>
<db:para>Returns a pointer to a modifiable reference to the current item.</db:para>
</db:section>
</db:section>
</db:article>
