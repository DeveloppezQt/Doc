<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Getting to Know Qt Designer</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>Qt Designer Manual.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>{Qt Designer Manual}{Contents}</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/designer-screenshot.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="launching-designer">
<db:title>Launching Designer</db:title>
<db:para>Once you have installed Qt, you can start <db:emphasis>Qt Designer</db:emphasis> in the same way as any other application on the development host. You can also launch <db:emphasis>Qt Designer</db:emphasis> directly from Qt Creator. Qt Creator automatically opens all .ui files in the integrated <db:emphasis>Qt Designer</db:emphasis>, in <db:emphasis role="bold">Design</db:emphasis> mode.</db:para>
<db:para>Generally, the integrated <db:emphasis>Qt Designer</db:emphasis> contains the same functions as the standalone <db:emphasis>Qt Designer</db:emphasis>. For more information about the differences, see the <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator Manual</db:link>.</db:para>
<db:para>If you have large forms that do not fit in the Qt Creator <db:emphasis role="bold">Design</db:emphasis> mode, you can open them in the stand-alone <db:emphasis>Qt Designer</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="the-user-interface">
<db:title>The User Interface</db:title>
<db:para>When used as a standalone application, <db:emphasis>Qt Designer</db:emphasis>'s user interface can be configured to provide either a multi-window user interface (the default mode), or it can be used in docked window mode. When used from within an integrated development environment (IDE) only the multi-window user interface is available. You can switch modes in the <db:emphasis role="bold">Preferences</db:emphasis> dialog from the <db:emphasis role="bold">Edit</db:emphasis> menu.</db:para>
<db:para>In multi-window mode, you can arrange each of the tool windows to suit your working style. The main window consists of a menu bar, a tool bar, and a widget box that contains the widgets you can use to create your user interface.</db:para>
<db:anchor xml:id="mainwindow"/>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/designer-main-window.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Qt Designer's Main Window</db:emphasis></db:para>
<db:para>The menu bar provides all the standard actions for managing forms, using the clipboard, and accessing application-specific help. The current editing mode, the tool windows, and the forms in use can also be accessed via the menu bar.</db:para>
<db:para>The tool bar displays common actions that are used when editing a form. These are also available via the main menu.</db:para>
<db:para>The widget box provides common widgets and layouts that are used to design components. These are grouped into categories that reflect their uses or features.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Most features of <db:emphasis>Qt Designer</db:emphasis> are accessible via the menu bar, the tool bar, or the widget box. Some features are also available through context menus that can be opened over the form windows. On most platforms, the right mouse is used to open context menus.</db:para>
<db:anchor xml:id="widgetbox"/>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/designer-widget-box.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">Qt Designer's Widget Box</db:emphasis></db:para>
<db:para>The widget box provides a selection of standard Qt widgets, layouts, and other objects that can be used to create user interfaces on forms. Each of the categories in the widget box contain widgets with similar uses or related features.</db:para>
<db:para>You can display all of the available objects in a category by clicking on the handle next to the category label. When in <db:link xlink:href="designer-widget-mode.xml">Widget Editing Mode</db:link>, you can add objects to a form by dragging the appropriate items from the widget box onto the form, and dropping them in the required locations.</db:para>
<db:para><db:emphasis>Qt Designer</db:emphasis> provides a scratch pad feature that allows you to collect frequently used objects in a separate category. The scratch pad category can be filled with any widget currently displayed in a form by dragging them from the form and dropping them onto the widget box. These widgets can be used in the same way as any other widgets, but they can also contain child widgets. Open a context menu over a widget to change its name or remove it from the scratch pad.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="the-concept-of-layouts-in-qt">
<db:title>The Concept of Layouts in Qt</db:title>
<db:para>A layout is used to arrange and manage the elements that make up a user interface. Qt provides a number of classes to automatically handle layouts – QHBoxLayout, QVBoxLayout, QGridLayout, and QFormLayout. These classes solve the challenge of laying out widgets automatically, providing a user interface that behaves predictably. Fortunately knowledge of the layout classes is not required to arrange widgets with <db:emphasis>Qt Designer</db:emphasis>. Instead, select one of the <db:emphasis role="bold">Lay Out Horizontally</db:emphasis>, <db:emphasis role="bold">Lay Out in a Grid</db:emphasis>, etc., options from the context menu.</db:para>
<db:para>Each Qt widget has a recommended size, known as <db:link xlink:href="">sizeHint()</db:link>. The layout manager will attempt to resize a widget to meet its size hint. In some cases, there is no need to have a different size. For example, the height of a QLineEdit is always a fixed value, depending on font size and style. In other cases, you may require the size to change, e.g., the width of a QLineEdit or the width and height of item view widgets. This is where the widget size constraints – minimumSize and maximumSize constraints come into play. These are properties you can set in the property editor. For example, to override the default <db:link xlink:href="">sizeHint()</db:link>, simply set minimumSize and maximumSize to the same value. Alternatively, to use the current size as a size constraint value, choose one of the <db:emphasis role="bold">Size Constraint</db:emphasis> options from the widget's context menu. The layout will then ensure that those constraints are met. To control the size of your widgets via code, you can reimplement <db:link xlink:href="">sizeHint()</db:link> in your code.</db:para>
<db:para>The screenshot below shows the breakdown of a basic user interface designed using a grid. The coordinates on the screenshot show the position of each widget within the grid.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/addressbook-tutorial-part3-labeled-layout.png"/>
</db:imageobject>
</db:mediaobject>
<db:note>
<db:para>Inside the grid, the QPushButton objects are actually nested. The buttons on the right are first placed in a QVBoxLayout; the buttons at the bottom are first placed in a QHBoxLayout. Finally, they are put into coordinates (1,2) and (2,1) of the QGridLayout.</db:para>
</db:note>
<db:para>To visualize, imagine the layout as a box that shrinks as much as possible, attempting to <db:emphasis>squeeze</db:emphasis> your widgets in a neat arrangement, and, at the same time, maximize the use of available space.</db:para>
<db:para>Qt's layouts help when you:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Resize the user face to fit different window sizes.</db:para>
</db:listitem>
<db:listitem>
<db:para>Resize elements within the user interface to suit different localizations.</db:para>
</db:listitem>
<db:listitem>
<db:para>Arrange elements to adhere to layout guidelines for different platforms.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>So, you no longer have to worry about rearranging widgets for different platforms, settings, and languages.</db:para>
<db:para>The example below shows how different localizations can affect the user interface. When a localization requires more space for longer text strings the Qt layout automatically scales to accommodate this, while ensuring that the user interface looks presentable and still matches the platform guidelines.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>A Dialog in English</db:para>
</db:th>
<db:th>
<db:para>A Dialog in French</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/designer-english-dialog.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/designer-french-dialog.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The process of laying out widgets consists of creating the layout hierarchy while setting as few widget size constraints as possible.</db:para>
<db:para>For a more technical perspective on Qt's layout classes, refer to the <db:link xlink:href="layout.xml">Layout Management</db:link> documentation.</db:para>
</db:section>
</db:article>
