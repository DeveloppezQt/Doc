<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Concurrent</db:title>
<db:productname>QtConcurrent</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Concurrent Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Qt Concurrent module contains functionality to support concurrent execution of program code.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt Concurrent module provides high-level APIs that make it possible to write multi-threaded programs without using low-level threading primitives such as mutexes, read-write locks, wait conditions, or semaphores. Programs written with Qt Concurrent automatically adjust the number of threads used according to the number of processor cores available. This means that applications written today will continue to scale when deployed on multi-core systems in the future.</db:para>
<db:para>Qt Concurrent includes functional programming style APIs for parallel list processing, including a MapReduce and FilterReduce implementation for shared-memory (non-distributed) systems, and classes for managing asynchronous computations in GUI applications:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtconcurrentmap.xml">Concurrent Map and Map-Reduce</db:link></db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtconcurrent.xml#map">QtConcurrent::map</db:link>() applies a function to every item in a container, modifying the items in-place.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtconcurrent.xml#mapped">QtConcurrent::mapped</db:link>() is like map(), except that it returns a new container with the modifications.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtconcurrent.xml#mappedReduced">QtConcurrent::mappedReduced</db:link>() is like mapped(), except that the modified results are reduced or folded into a single result.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtconcurrentfilter.xml">Concurrent Filter and Filter-Reduce</db:link></db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtconcurrent.xml#filter">QtConcurrent::filter</db:link>() removes all items from a container based on the result of a filter function.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtconcurrent.xml#filtered">QtConcurrent::filtered</db:link>() is like filter(), except that it returns a new container with the filtered results.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtconcurrent.xml#filteredReduced">QtConcurrent::filteredReduced</db:link>() is like filtered(), except that the filtered results are reduced or folded into a single result.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtconcurrentrun.xml">Concurrent Run</db:link></db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtconcurrent.xml#run">QtConcurrent::run</db:link>() runs a function in another thread.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtconcurrenttask.xml">Concurrent Task</db:link></db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtconcurrent.xml#task">QtConcurrent::task</db:link>() creates an instance of <db:link xlink:href="qtconcurrent-qtaskbuilder.xml">QtConcurrent::QTaskBuilder</db:link>. This object can be used for adjusting parameters and for kicking off a task in a separate thread.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qfuture.xml">QFuture</db:link> represents the result of an asynchronous computation.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qfutureiterator.xml">QFutureIterator</db:link> allows iterating through results available via <db:link xlink:href="qfuture.xml">QFuture</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qfuturewatcher.xml">QFutureWatcher</db:link> allows monitoring a <db:link xlink:href="qfuture.xml">QFuture</db:link> using signals-and-slots.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qfuturesynchronizer.xml">QFutureSynchronizer</db:link> is a convenience class that automatically synchronizes several QFutures.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpromise.xml">QPromise</db:link> provides a way to report progress and results of the asynchronous computation to <db:link xlink:href="qfuture.xml">QFuture</db:link>. Allows suspending or canceling the task when requested by <db:link xlink:href="qfuture.xml">QFuture</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Qt Concurrent supports several STL-compatible container and iterator types, but works best with Qt containers that have random-access iterators, such as <db:link xlink:href="qlist.xml">QList</db:link>. The map and filter functions accept both containers and begin/end iterators.</db:para>
<db:para>STL Iterator support overview:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Iterator Type</db:para>
</db:th>
<db:th>
<db:para>Example classes</db:para>
</db:th>
<db:th>
<db:para>Support status</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Input Iterator</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Not Supported</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Output Iterator</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Not Supported</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Forward Iterator</db:para>
</db:td>
<db:td>
<db:para>std::slist</db:para>
</db:td>
<db:td>
<db:para>Supported</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Bidirectional Iterator</db:para>
</db:td>
<db:td>
<db:para>std::list</db:para>
</db:td>
<db:td>
<db:para>Supported</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Random Access Iterator</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlist.xml">QList</db:link>, std::vector</db:para>
</db:td>
<db:td>
<db:para>Supported and Recommended</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Random access iterators can be faster in cases where Qt Concurrent is iterating over a large number of lightweight items, since they allow skipping to any point in the container. In addition, using random access iterators allows Qt Concurrent to provide progress information trough <db:link xlink:href="qfuture.xml#progressValue">QFuture::progressValue</db:link>() and <db:link xlink:href="qfuturewatcher.xml#progressValueChanged">QFutureWatcher::progressValueChanged</db:link>().</db:para>
<db:para>The non in-place modifying functions such as mapped() and filtered() makes a copy of the container when called. If you are using STL containers this copy operation might take some time, in this case we recommend specifying the begin and end iterators for the container instead.</db:para>
<db:section xml:id="using-the-module">
<db:title>Using the Module</db:title>
<db:para>Using a Qt module requires linking against the module library, either directly or through other dependencies. Several build tools have dedicated support for this, including <db:link xlink:href="http://www.cmake.org/cmake/help/documentation.html">CMake</db:link> and <db:link xlink:href="qmake-manual.xml">qmake</db:link>.</db:para>
<db:section xml:id="building-with-cmake">
<db:title>Building with CMake</db:title>
<db:para>Use the <db:code>find_package()</db:code> command to locate the needed module components in the <db:code>Qt6</db:code> package:</db:para>
<db:programlisting language="cpp">find_package(Qt6 COMPONENTS Concurrent REQUIRED)
target_link_libraries(mytarget PRIVATE Qt6::Concurrent)
</db:programlisting>
<db:para>See also the <db:link xlink:href="cmake-manual.xml">Build with CMake</db:link> overview.</db:para>
</db:section>
<db:section xml:id="building-with-qmake">
<db:title>Building with qmake</db:title>
<db:para>To configure the module for building with qmake, add the module as a value of the <db:code>QT</db:code> variable in the project's .pro file:</db:para>
<db:programlisting language="cpp">QT += concurrent
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="module-evolution">
<db:title>Module Evolution</db:title>
<db:para><db:link xlink:href="concurrent-changes-qt6.xml">Changes to Qt Concurrent</db:link> lists important changes in the module API and functionality that were done for the Qt 6 series of Qt.</db:para>
</db:section>
<db:section xml:id="licenses">
<db:title>Licenses</db:title>
<db:para>The Qt Concurrent module is available under commercial licenses from <db:link xlink:href="http://www.qt.io/about-us/">The Qt Company</db:link>. In addition, it is available under free software licenses: The <db:link xlink:href="http://www.gnu.org/licenses/lgpl-3.0.html">GNU Lesser General Public License, version 3</db:link>, or the <db:link xlink:href="http://www.gnu.org/licenses/gpl-2.0.html">GNU General Public License, version 2</db:link>. See <db:link xlink:href="licensing.xml">Qt Licensing</db:link> for further details.</db:para>
</db:section>
</db:article>
