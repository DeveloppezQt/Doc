<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Qt Concurrent</db:title>
<db:productname>QtConcurrent</db:productname>
<db:titleabbrev>Qt Concurrent Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Qt Concurrent module contains functionality to support concurrent execution of program code.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="getting-started">
<db:title>Getting Started</db:title>
<db:para>The <db:link xlink:href="qtconcurrent-module.xml">QtConcurrent</db:link> namespace provides high-level APIs that make it possible to write multi-threaded programs without using low-level threading primitives such as mutexes, read-write locks, wait conditions, or semaphores. Programs written with <db:link xlink:href="qtconcurrent-module.xml">QtConcurrent</db:link> automatically adjust the number of threads used according to the number of processor cores available. This means that applications written today will continue to scale when deployed on multi-core systems in the future.</db:para>
<db:para><db:link xlink:href="qtconcurrent-module.xml">QtConcurrent</db:link> includes functional programming style APIs for parallel list processing, including a MapReduce and FilterReduce implementation for shared-memory (non-distributed) systems, and classes for managing asynchronous computations in GUI applications:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>QtConcurrent::map() applies a function to every item in a container, modifying the items in-place.</db:para>
</db:listitem>
<db:listitem>
<db:para>QtConcurrent::mapped() is like map(), except that it returns a new container with the modifications.</db:para>
</db:listitem>
<db:listitem>
<db:para>QtConcurrent::mappedReduced() is like mapped(), except that the modified results are reduced or folded into a single result.</db:para>
</db:listitem>
<db:listitem>
<db:para>QtConcurrent::filter() removes all items from a container based on the result of a filter function.</db:para>
</db:listitem>
<db:listitem>
<db:para>QtConcurrent::filtered() is like filter(), except that it returns a new container with the filtered results.</db:para>
</db:listitem>
<db:listitem>
<db:para>QtConcurrent::filteredReduced() is like filtered(), except that the filtered results are reduced or folded into a single result.</db:para>
</db:listitem>
<db:listitem>
<db:para>QtConcurrent::run() runs a function in another thread.</db:para>
</db:listitem>
<db:listitem>
<db:para>QFuture represents the result of an asynchronous computation.</db:para>
</db:listitem>
<db:listitem>
<db:para>QFutureIterator allows iterating through results available via QFuture.</db:para>
</db:listitem>
<db:listitem>
<db:para>QFutureWatcher allows monitoring a QFuture using signals-and-slots.</db:para>
</db:listitem>
<db:listitem>
<db:para>QFutureSynchronizer is a convenience class that automatically synchronizes several QFutures.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Qt Concurrent supports several STL-compatible container and iterator types, but works best with Qt containers that have random-access iterators, such as QList or QVector. The map and filter functions accept both containers and begin/end iterators.</db:para>
<db:para>STL Iterator support overview:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Iterator Type</db:para>
</db:th>
<db:th>
<db:para>Example classes</db:para>
</db:th>
<db:th>
<db:para>Support status</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Input Iterator</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Not Supported</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Output Iterator</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Not Supported</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Forward Iterator</db:para>
</db:td>
<db:td>
<db:para>std::slist</db:para>
</db:td>
<db:td>
<db:para>Supported</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Bidirectional Iterator</db:para>
</db:td>
<db:td>
<db:para>QLinkedList, std::list</db:para>
</db:td>
<db:td>
<db:para>Supported</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Random Access Iterator</db:para>
</db:td>
<db:td>
<db:para>QList, QVector, std::vector</db:para>
</db:td>
<db:td>
<db:para>Supported and Recommended</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Random access iterators can be faster in cases where Qt Concurrent is iterating over a large number of lightweight items, since they allow skipping to any point in the container. In addition, using random access iterators allows Qt Concurrent to provide progress information trough QFuture::progressValue() and QFutureWatcher:: progressValueChanged().</db:para>
<db:para>The non in-place modifying functions such as mapped() and filtered() makes a copy of the container when called. If you are using STL containers this copy operation might take some time, in this case we recommend specifying the begin and end iterators for the container instead.</db:para>
</db:section>
</db:article>
