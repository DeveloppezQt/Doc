<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Context2D QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides 2D context for shapes on a Canvas item.</db:para>
<db:para>This type was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick 2.15</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Context2D is part of <db:simplelist><db:member>qtquick-canvas</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-context2d.xml">Context2D</db:link> object can be created by <db:code>Canvas</db:code> item's <db:code>getContext()</db:code> method:</db:para>
<db:programlisting language="cpp">Canvas {
  id:canvas
  onPaint:{
     var ctx = canvas.getContext('2d');
     //...
  }
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtquick-context2d.xml">Context2D</db:link> API implements the same <db:link xlink:href="http://www.w3.org/TR/2dcontext">W3C Canvas 2D Context API standard</db:link> with some enhanced features.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick-context2d.xml">Context2D</db:link> API provides the rendering <db:emphasis role="bold">context</db:emphasis> which defines the methods and attributes needed to draw on the <db:code>Canvas</db:code> item. The following assigns the canvas rendering context to a <db:code>context</db:code> variable:</db:para>
<db:programlisting language="cpp">var context = mycanvas.getContext(&quot;2d&quot;)
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtquick-context2d.xml">Context2D</db:link> API renders the canvas as a coordinate system whose origin (0,0) is at the top left corner, as shown in the figure below. Coordinates increase along the <db:code>x</db:code> axis from left to right and along the <db:code>y</db:code> axis from top to bottom of the canvas.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-item-canvas-context.gif"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="canvas-prop">
<db:title>canvas : QtQuick::Canvas</db:title>
<db:fieldsynopsis>
<db:type>QtQuick::Canvas</db:type>
<db:varname>canvas</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the canvas item that the context paints on.</db:para>
<db:para>This property is read only.</db:para>
</db:section>
<db:section xml:id="fillRule-prop">
<db:title>fillRule : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>fillRule</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current fill rule used for filling shapes. The following fill rules supported:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.OddEvenFill</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.WindingFill</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Note: Unlike the <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link>, the Canvas API uses the winding fill as the default fill rule. The fillRule property is part of the context rendering state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#fillStyle-prop">fillStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fillStyle-prop">
<db:title>fillStyle : variant</db:title>
<db:fieldsynopsis>
<db:type>variant</db:type>
<db:varname>fillStyle</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current style used for filling shapes. The style can be either a string containing a CSS color, a <db:link xlink:href="qml-qtquick-canvasgradient.xml">CanvasGradient</db:link> or CanvasPattern object. Invalid values are ignored. This property accepts several color syntaxes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>'rgb(red, green, blue)' - for example: 'rgb(255, 100, 55)' or 'rgb(100%, 70%, 30%)'</db:para>
</db:listitem>
<db:listitem>
<db:para>'rgba(red, green, blue, alpha)' - for example: 'rgb(255, 100, 55, 1.0)' or 'rgb(100%, 70%, 30%, 0.5)'</db:para>
</db:listitem>
<db:listitem>
<db:para>'hsl(hue, saturation, lightness)'</db:para>
</db:listitem>
<db:listitem>
<db:para>'hsla(hue, saturation, lightness, alpha)'</db:para>
</db:listitem>
<db:listitem>
<db:para>'#RRGGBB' - for example: '#00FFCC'</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.rgba(red, green, blue, alpha) - for example: Qt.rgba(0.3, 0.7, 1, 1.0)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If the <db:code>fillStyle</db:code> or <db:link xlink:href="qml-qtquick-context2d.xml#strokeStyle-prop">strokeStyle</db:link> is assigned many times in a loop, the last Qt.rgba() syntax should be chosen, as it has the best performance, because it's already a valid <db:link xlink:href="qcolor.xml">QColor</db:link> value, does not need to be parsed everytime.</db:para>
<db:para>The default value is '#000000'.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#createLinearGradient-method">createLinearGradient</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#createRadialGradient-method">createRadialGradient</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#createPattern-method">createPattern</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#strokeStyle-prop">strokeStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font-prop">
<db:title>font : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>font</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current font settings.</db:para>
<db:para>A subset of the <db:link xlink:href="http://www.w3.org/TR/2dcontext/#dom-context-2d-font">w3C 2d context standard for font</db:link> is supported:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>font-style (optional): normal | italic | oblique</db:para>
</db:listitem>
<db:listitem>
<db:para>font-variant (optional): normal | small-caps</db:para>
</db:listitem>
<db:listitem>
<db:para>font-weight (optional): normal | bold | 0 ... 99</db:para>
</db:listitem>
<db:listitem>
<db:para>font-size: Npx | Npt (where N is a positive number)</db:para>
</db:listitem>
<db:listitem>
<db:para>font-family: See <db:link xlink:href="http://www.w3.org/TR/CSS2/fonts.html#propdef-font-family">http://www.w3.org/TR/CSS2/fonts.html#propdef-font-family</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>The font-size and font-family properties are mandatory and must be in the order they are shown in above. In addition, a font family with spaces in its name must be quoted.</db:para>
</db:note>
<db:para>The default font value is &quot;10px sans-serif&quot;.</db:para>
</db:section>
<db:section xml:id="globalAlpha-prop">
<db:title>globalAlpha : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>globalAlpha</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current alpha value applied to rendering operations. The value must be in the range from <db:code>0.0</db:code> (fully transparent) to <db:code>1.0</db:code> (fully opaque). The default value is <db:code>1.0</db:code>.</db:para>
</db:section>
<db:section xml:id="globalCompositeOperation-prop">
<db:title>globalCompositeOperation : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>globalCompositeOperation</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current the current composition operation, from the list below:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>source-atop - A atop B. Display the source image wherever both images are opaque. Display the destination image wherever the destination image is opaque but the source image is transparent. Display transparency elsewhere.</db:para>
</db:listitem>
<db:listitem>
<db:para>source-in - A in B. Display the source image wherever both the source image and destination image are opaque. Display transparency elsewhere.</db:para>
</db:listitem>
<db:listitem>
<db:para>source-out - A out B. Display the source image wherever the source image is opaque and the destination image is transparent. Display transparency elsewhere.</db:para>
</db:listitem>
<db:listitem>
<db:para>source-over - (default) A over B. Display the source image wherever the source image is opaque. Display the destination image elsewhere.</db:para>
</db:listitem>
<db:listitem>
<db:para>destination-atop - B atop A. Same as source-atop but using the destination image instead of the source image and vice versa.</db:para>
</db:listitem>
<db:listitem>
<db:para>destination-in - B in A. Same as source-in but using the destination image instead of the source image and vice versa.</db:para>
</db:listitem>
<db:listitem>
<db:para>destination-out - B out A. Same as source-out but using the destination image instead of the source image and vice versa.</db:para>
</db:listitem>
<db:listitem>
<db:para>destination-over - B over A. Same as source-over but using the destination image instead of the source image and vice versa.</db:para>
</db:listitem>
<db:listitem>
<db:para>lighter - A plus B. Display the sum of the source image and destination image, with color values approaching 255 (100%) as a limit.</db:para>
</db:listitem>
<db:listitem>
<db:para>copy - A (B is ignored). Display the source image instead of the destination image.</db:para>
</db:listitem>
<db:listitem>
<db:para>xor - A xor B. Exclusive OR of the source image and destination image.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Additionally, this property also accepts the compositon modes listed in <db:link xlink:href="qpainter.xml#CompositionMode-enum">QPainter::CompositionMode</db:link>. According to the W3C standard, these extension composition modes are provided as &quot;vendorName-operationName&quot; syntax, for example: <db:link xlink:href="qpainter.xml#CompositionMode-enum">QPainter::CompositionMode_Exclusion</db:link> is provided as &quot;qt-exclusion&quot;.</db:para>
</db:section>
<db:section xml:id="lineCap-prop">
<db:title>lineCap : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>lineCap</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current line cap style. The possible line cap styles are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>butt - the end of each line has a flat edge perpendicular to the direction of the line, this is the default line cap value.</db:para>
</db:listitem>
<db:listitem>
<db:para>round - a semi-circle with the diameter equal to the width of the line must then be added on to the end of the line.</db:para>
</db:listitem>
<db:listitem>
<db:para>square - a rectangle with the length of the line width and the width of half the line width, placed flat against the edge perpendicular to the direction of the line.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Other values are ignored.</db:para>
</db:section>
<db:section xml:id="lineDashOffset-prop">
<db:title>[since QtQuick 2.11] lineDashOffset : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>lineDashOffset</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current line dash offset. The default line dash offset value is <db:code>0</db:code>.</db:para>
<db:para>This property was introduced in QtQuick 2.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#getLineDash-method">getLineDash</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#setLineDash-method">setLineDash</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineJoin-prop">
<db:title>lineJoin : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>lineJoin</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current line join style. A join exists at any point in a subpath shared by two consecutive lines. When a subpath is closed, then a join also exists at its first point (equivalent to its last point) connecting the first and last lines in the subpath.</db:para>
<db:para>The possible line join styles are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>bevel - this is all that is rendered at joins.</db:para>
</db:listitem>
<db:listitem>
<db:para>round - a filled arc connecting the two aforementioned corners of the join, abutting (and not overlapping) the aforementioned triangle, with the diameter equal to the line width and the origin at the point of the join, must be rendered at joins.</db:para>
</db:listitem>
<db:listitem>
<db:para>miter - a second filled triangle must (if it can given the miter length) be rendered at the join, this is the default line join style.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Other values are ignored.</db:para>
</db:section>
<db:section xml:id="lineWidth-prop">
<db:title>lineWidth : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>lineWidth</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current line width. Values that are not finite values greater than zero are ignored.</db:para>
</db:section>
<db:section xml:id="miterLimit-prop">
<db:title>miterLimit : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>miterLimit</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current miter limit ratio. The default miter limit value is 10.0.</db:para>
</db:section>
<db:section xml:id="shadowBlur-prop">
<db:title>shadowBlur : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>shadowBlur</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current level of blur applied to shadows</db:para>
</db:section>
<db:section xml:id="shadowColor-prop">
<db:title>shadowColor : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>shadowColor</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current shadow color.</db:para>
</db:section>
<db:section xml:id="shadowOffsetX-prop">
<db:title>shadowOffsetX : qreal</db:title>
<db:fieldsynopsis>
<db:type>qreal</db:type>
<db:varname>shadowOffsetX</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current shadow offset in the positive horizontal distance.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#shadowOffsetY-prop">shadowOffsetY</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shadowOffsetY-prop">
<db:title>shadowOffsetY : qreal</db:title>
<db:fieldsynopsis>
<db:type>qreal</db:type>
<db:varname>shadowOffsetY</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current shadow offset in the positive vertical distance.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#shadowOffsetX-prop">shadowOffsetX</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="strokeStyle-prop">
<db:title>strokeStyle : variant</db:title>
<db:fieldsynopsis>
<db:type>variant</db:type>
<db:varname>strokeStyle</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current color or style to use for the lines around shapes, The style can be either a string containing a CSS color, a <db:link xlink:href="qml-qtquick-canvasgradient.xml">CanvasGradient</db:link> or CanvasPattern object. Invalid values are ignored.</db:para>
<db:para>The default value is '#000000'.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#createLinearGradient-method">createLinearGradient</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#createRadialGradient-method">createRadialGradient</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#createPattern-method">createPattern</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#fillStyle-prop">fillStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textAlign-prop">
<db:title>textAlign : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>textAlign</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current text alignment settings. The possible values are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>start</db:para>
</db:listitem>
<db:listitem>
<db:para>end</db:para>
</db:listitem>
<db:listitem>
<db:para>left</db:para>
</db:listitem>
<db:listitem>
<db:para>right</db:para>
</db:listitem>
<db:listitem>
<db:para>center</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Other values are ignored. The default value is &quot;start&quot;.</db:para>
</db:section>
<db:section xml:id="textBaseline-prop">
<db:title>textBaseline : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>textBaseline</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current baseline alignment settings. The possible values are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>top</db:para>
</db:listitem>
<db:listitem>
<db:para>hanging</db:para>
</db:listitem>
<db:listitem>
<db:para>middle</db:para>
</db:listitem>
<db:listitem>
<db:para>alphabetic</db:para>
</db:listitem>
<db:listitem>
<db:para>ideographic</db:para>
</db:listitem>
<db:listitem>
<db:para>bottom</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Other values are ignored. The default value is &quot;alphabetic&quot;.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="arc-method">
<db:title>object arc(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>, real <db:emphasis>radius</db:emphasis>, real <db:emphasis>startAngle</db:emphasis>, real <db:emphasis>endAngle</db:emphasis>, bool <db:emphasis>anticlockwise</db:emphasis>)</db:title>
<db:para>Adds an arc to the current subpath that lies on the circumference of the circle whose center is at the point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) and whose radius is <db:code role="parameter">radius</db:code>.</db:para>
<db:para>Both <db:code role="parameter">startAngle</db:code> and <db:code role="parameter">endAngle</db:code> are measured from the x-axis in radians.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-item-canvas-arc.png"/>
</db:imageobject>
</db:mediaobject>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-item-canvas-startAngle.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:code role="parameter">anticlockwise</db:code> parameter is <db:code>true</db:code> for each arc in the figure above because they are all drawn in the anticlockwise direction.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#arcTo-method">arcTo</db:link></db:member>
<db:member><db:link xlink:href="http://www.w3.org/TR/2dcontext/#dom-context-2d-arc">W3C's 2D Context Standard for arc()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="arcTo-method">
<db:title>object arcTo(real <db:emphasis>x1</db:emphasis>, real <db:emphasis>y1</db:emphasis>, real <db:emphasis>x2</db:emphasis>, real <db:emphasis>y2</db:emphasis>, real <db:emphasis>radius</db:emphasis>)</db:title>
<db:para>Adds an arc with the given control points and radius to the current subpath, connected to the previous point by a straight line. To draw an arc, you begin with the same steps you followed to create a line:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Call the <db:link xlink:href="qml-qtquick-context2d.xml#beginPath-method">beginPath</db:link>() method to set a new path.</db:para>
</db:listitem>
<db:listitem>
<db:para>Call the <db:link xlink:href="qml-qtquick-context2d.xml#moveTo-method">moveTo</db:link>(<db:code>x</db:code>, <db:code>y</db:code>) method to set your starting position on the canvas at the point (<db:code>x</db:code>, <db:code>y</db:code>).</db:para>
</db:listitem>
<db:listitem>
<db:para>To draw an arc or circle, call the arcTo(<db:code role="parameter">x1</db:code>, <db:code role="parameter">y1</db:code>, <db:code role="parameter">x2</db:code>, <db:code role="parameter">y2</db:code>, <db:code role="parameter">radius</db:code>) method. This adds an arc with starting point (<db:code role="parameter">x1</db:code>, <db:code role="parameter">y1</db:code>), ending point (<db:code role="parameter">x2</db:code>, <db:code role="parameter">y2</db:code>), and <db:code role="parameter">radius</db:code> to the current subpath and connects it to the previous subpath by a straight line.</db:para>
</db:listitem>
</db:itemizedlist>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-item-canvas-arcTo.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#arc-method">arc</db:link></db:member>
<db:member><db:link xlink:href="http://www.w3.org/TR/2dcontext/#dom-context-2d-arcto">W3C's 2D Context Standard for arcTo()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginPath-method">
<db:title>object beginPath()</db:title>
<db:para>Resets the current path to a new path.</db:para>
</db:section>
<db:section xml:id="bezierCurveTo-method">
<db:title>object bezierCurveTo(real <db:emphasis>cp1x</db:emphasis>, real <db:emphasis>cp1y</db:emphasis>, real <db:emphasis>cp2x</db:emphasis>, real <db:emphasis>cp2y</db:emphasis>, real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Adds a cubic bezier curve between the current position and the given endPoint using the control points specified by (<db:code role="parameter">cp1x</db:code>, <db:code role="parameter">cp1y</db:code>), and (<db:code role="parameter">cp2x</db:code>, <db:code role="parameter">cp2y</db:code>). After the curve is added, the current position is updated to be at the end point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) of the curve. The following code produces the path shown below:</db:para>
<db:programlisting language="cpp">ctx.strokeStyle = Qt.rgba(0, 0, 0, 1);
ctx.lineWidth = 1;
ctx.beginPath();
ctx.moveTo(20, 0);//start point
ctx.bezierCurveTo(-10, 90, 210, 90, 180, 0);
ctx.stroke();
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-item-canvas-bezierCurveTo.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="http://www.w3.org/TR/2dcontext/#dom-context-2d-beziercurveto">W3C 2d context standard for bezierCurveTo</db:link></db:member>
<db:member><db:link xlink:href="http://www.openrise.com/lab/FlowerPower/">The beautiful flower demo by using bezierCurveTo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearRect-method">
<db:title>object clearRect(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>, real <db:emphasis>w</db:emphasis>, real <db:emphasis>h</db:emphasis>)</db:title>
<db:para>Clears all pixels on the canvas in the rectangle specified by (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>) to transparent black.</db:para>
</db:section>
<db:section xml:id="clip-method">
<db:title>object clip()</db:title>
<db:para>Creates the clipping region from the current path. Any parts of the shape outside the clipping path are not displayed. To create a complex shape using the <db:code>clip()</db:code> method:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Call the <db:code>context.beginPath()</db:code> method to set the clipping path.</db:para>
</db:listitem>
<db:listitem>
<db:para>Define the clipping path by calling any combination of the <db:code>lineTo</db:code>, <db:code>arcTo</db:code>, <db:code>arc</db:code>, <db:code>moveTo</db:code>, etc and <db:code>closePath</db:code> methods.</db:para>
</db:listitem>
<db:listitem>
<db:para>Call the <db:code>context.clip()</db:code> method.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>The new shape displays. The following shows how a clipping path can modify how an image displays:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-item-canvas-clip-complex.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#beginPath-method">beginPath</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#closePath-method">closePath</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#stroke-method">stroke</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#fill-method">fill</db:link>()</db:member>
<db:member><db:link xlink:href="http://www.w3.org/TR/2dcontext/#dom-context-2d-clip">W3C 2d context standard for clip</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="closePath-method">
<db:title>object closePath()</db:title>
<db:para>Closes the current subpath by drawing a line to the beginning of the subpath, automatically starting a new path. The current point of the new path is the previous subpath's first point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="http://www.w3.org/TR/2dcontext/#dom-context-2d-closepath">W3C 2d context standard for closePath</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createConicalGradient-method">
<db:title>object createConicalGradient(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>, real <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qml-qtquick-canvasgradient.xml">CanvasGradient</db:link> object that represents a conical gradient that interpolates colors counter-clockwise around a center point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) with a start angle <db:code role="parameter">angle</db:code> in units of radians.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvasgradient.xml#addColorStop-method">CanvasGradient::addColorStop</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#createLinearGradient-method">createLinearGradient</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#createRadialGradient-method">createRadialGradient</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#createPattern-method">createPattern</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#fillStyle-prop">fillStyle</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#strokeStyle-prop">strokeStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createImageData-method">
<db:title>CanvasImageData createImageData(real <db:emphasis>sw</db:emphasis>, real <db:emphasis>sh</db:emphasis>)</db:title>
<db:para>Creates a <db:link xlink:href="qml-qtquick-canvasimagedata.xml">CanvasImageData</db:link> object with the given dimensions(<db:code role="parameter">sw</db:code>, <db:code role="parameter">sh</db:code>).</db:para>
</db:section>
<db:section xml:id="createImageData-method-1">
<db:title>CanvasImageData createImageData(CanvasImageData <db:emphasis>imageData</db:emphasis>)</db:title>
<db:para>Creates a <db:link xlink:href="qml-qtquick-canvasimagedata.xml">CanvasImageData</db:link> object with the same dimensions as the argument.</db:para>
</db:section>
<db:section xml:id="createImageData-method-2">
<db:title>CanvasImageData createImageData(Url <db:emphasis>imageUrl</db:emphasis>)</db:title>
<db:para>Creates a <db:link xlink:href="qml-qtquick-canvasimagedata.xml">CanvasImageData</db:link> object with the given image loaded from <db:code role="parameter">imageUrl</db:code>.</db:para>
<db:note>
<db:para>The <db:code role="parameter">imageUrl</db:code> must be already loaded before this function call, otherwise an empty <db:link xlink:href="qml-qtquick-canvasimagedata.xml">CanvasImageData</db:link> obect will be returned.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#loadImage-method">Canvas::loadImage</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#unloadImage-method">QtQuick::Canvas::unloadImage</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#isImageLoaded-method">QtQuick::Canvas::isImageLoaded</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createLinearGradient-method">
<db:title>object createLinearGradient(real <db:emphasis>x0</db:emphasis>, real <db:emphasis>y0</db:emphasis>, real <db:emphasis>x1</db:emphasis>, real <db:emphasis>y1</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qml-qtquick-canvasgradient.xml">CanvasGradient</db:link> object that represents a linear gradient that transitions the color along a line between the start point (<db:code role="parameter">x0</db:code>, <db:code role="parameter">y0</db:code>) and the end point (<db:code role="parameter">x1</db:code>, <db:code role="parameter">y1</db:code>).</db:para>
<db:para>A gradient is a smooth transition between colors. There are two types of gradients: linear and radial. Gradients must have two or more color stops, representing color shifts positioned from 0 to 1 between to the gradient's starting and end points or circles.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvasgradient.xml#addColorStop-method">CanvasGradient::addColorStop</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#createRadialGradient-method">createRadialGradient</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#createConicalGradient-method">createConicalGradient</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#createPattern-method">createPattern</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#fillStyle-prop">fillStyle</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#strokeStyle-prop">strokeStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createPattern-method">
<db:title>variant createPattern(color <db:emphasis>color</db:emphasis>, enumeration <db:emphasis>patternMode</db:emphasis>)</db:title>
<db:para>This is a overload function. Returns a CanvasPattern object that uses the given <db:code role="parameter">color</db:code> and <db:code role="parameter">patternMode</db:code>. The valid pattern modes are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.SolidPattern</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.Dense1Pattern</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.Dense2Pattern</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.Dense3Pattern</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.Dense4Pattern</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.Dense5Pattern</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.Dense6Pattern</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.Dense7Pattern</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.HorPattern</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.VerPattern</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.CrossPattern</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.BDiagPattern</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.FDiagPattern</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.DiagCrossPattern</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#BrushStyle-enum">Qt::BrushStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createPattern-method-1">
<db:title>variant createPattern(Image <db:emphasis>image</db:emphasis>, string <db:emphasis>repetition</db:emphasis>)</db:title>
<db:para>Returns a CanvasPattern object that uses the given image and repeats in the direction(s) given by the repetition argument.</db:para>
<db:para>The <db:code role="parameter">image</db:code> parameter must be a valid Image item, a valid <db:link xlink:href="qml-qtquick-canvasimagedata.xml">CanvasImageData</db:link> object or loaded image url, if there is no image data, throws an INVALID_STATE_ERR exception.</db:para>
<db:para>The allowed values for <db:code role="parameter">repetition</db:code> are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>&quot;repeat&quot; - both directions</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;repeat-x - horizontal only</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;repeat-y&quot; - vertical only</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;no-repeat&quot; - neither</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If the repetition argument is empty or null, the value &quot;repeat&quot; is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#strokeStyle-prop">strokeStyle</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#fillStyle-prop">fillStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createRadialGradient-method">
<db:title>object createRadialGradient(real <db:emphasis>x0</db:emphasis>, real <db:emphasis>y0</db:emphasis>, real <db:emphasis>r0</db:emphasis>, real <db:emphasis>x1</db:emphasis>, real <db:emphasis>y1</db:emphasis>, real <db:emphasis>r1</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qml-qtquick-canvasgradient.xml">CanvasGradient</db:link> object that represents a radial gradient that paints along the cone given by the start circle with origin (<db:code role="parameter">x0</db:code>, <db:code role="parameter">y0</db:code>) and radius <db:code role="parameter">r0</db:code>, and the end circle with origin (<db:code role="parameter">x1</db:code>, <db:code role="parameter">y1</db:code>) and radius <db:code role="parameter">r1</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvasgradient.xml#addColorStop-method">CanvasGradient::addColorStop</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#createLinearGradient-method">createLinearGradient</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#createConicalGradient-method">createConicalGradient</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#createPattern-method">createPattern</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#fillStyle-prop">fillStyle</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#strokeStyle-prop">strokeStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawImage-method">
<db:title>drawImage(variant <db:emphasis>image</db:emphasis>, real <db:emphasis>dx</db:emphasis>, real <db:emphasis>dy</db:emphasis>)</db:title>
<db:para>Draws the given <db:code role="parameter">image</db:code> on the canvas at position (<db:code role="parameter">dx</db:code>, <db:code role="parameter">dy</db:code>). Note: The <db:code role="parameter">image</db:code> type can be an Image item, an image url or a <db:link xlink:href="qml-qtquick-canvasimagedata.xml">CanvasImageData</db:link> object. When given as Image item, if the image isn't fully loaded, this method draws nothing. When given as url string, the image should be loaded by calling Canvas item's <db:link xlink:href="qml-qtquick-canvas.xml#loadImage-method">Canvas::loadImage</db:link>() method first. This image been drawing is subject to the current context clip path, even the given <db:code>image</db:code> is a <db:link xlink:href="qml-qtquick-canvasimagedata.xml">CanvasImageData</db:link> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvasimagedata.xml">CanvasImageData</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-image.xml">Image</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#loadImage-method">Canvas::loadImage</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#isImageLoaded-method">Canvas::isImageLoaded</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#imageLoaded-signal">Canvas::imageLoaded</db:link></db:member>
<db:member><db:link xlink:href="http://www.w3.org/TR/2dcontext/#dom-context-2d-drawimage">W3C 2d context standard for drawImage</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawImage-method-1">
<db:title>drawImage(variant <db:emphasis>image</db:emphasis>, real <db:emphasis>dx</db:emphasis>, real <db:emphasis>dy</db:emphasis>, real <db:emphasis>dw</db:emphasis>, real <db:emphasis>dh</db:emphasis>)</db:title>
<db:para>This is an overloaded function. Draws the given item as <db:code role="parameter">image</db:code> onto the canvas at point (<db:code role="parameter">dx</db:code>, <db:code role="parameter">dy</db:code>) and with width <db:code role="parameter">dw</db:code>, height <db:code role="parameter">dh</db:code>.</db:para>
<db:para>Note: The <db:code role="parameter">image</db:code> type can be an Image item, an image url or a <db:link xlink:href="qml-qtquick-canvasimagedata.xml">CanvasImageData</db:link> object. When given as Image item, if the image isn't fully loaded, this method draws nothing. When given as url string, the image should be loaded by calling Canvas item's <db:link xlink:href="qml-qtquick-canvas.xml#loadImage-method">Canvas::loadImage</db:link>() method first. This image been drawing is subject to the current context clip path, even the given <db:code>image</db:code> is a <db:link xlink:href="qml-qtquick-canvasimagedata.xml">CanvasImageData</db:link> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvasimagedata.xml">CanvasImageData</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-image.xml">Image</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#loadImage-method">Canvas::loadImage</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#isImageLoaded-method">Canvas::isImageLoaded</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#imageLoaded-signal">Canvas::imageLoaded</db:link></db:member>
<db:member><db:link xlink:href="http://www.w3.org/TR/2dcontext/#dom-context-2d-drawimage">W3C 2d context standard for drawImage</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawImage-method-2">
<db:title>drawImage(variant <db:emphasis>image</db:emphasis>, real <db:emphasis>sx</db:emphasis>, real <db:emphasis>sy</db:emphasis>, real <db:emphasis>sw</db:emphasis>, real <db:emphasis>sh</db:emphasis>, real <db:emphasis>dx</db:emphasis>, real <db:emphasis>dy</db:emphasis>, real <db:emphasis>dw</db:emphasis>, real <db:emphasis>dh</db:emphasis>)</db:title>
<db:para>This is an overloaded function. Draws the given item as <db:code role="parameter">image</db:code> from source point (<db:code role="parameter">sx</db:code>, <db:code role="parameter">sy</db:code>) and source width <db:code role="parameter">sw</db:code>, source height <db:code role="parameter">sh</db:code> onto the canvas at point (<db:code role="parameter">dx</db:code>, <db:code role="parameter">dy</db:code>) and with width <db:code role="parameter">dw</db:code>, height <db:code role="parameter">dh</db:code>.</db:para>
<db:para>Note: The <db:code role="parameter">image</db:code> type can be an Image or Canvas item, an image url or a <db:link xlink:href="qml-qtquick-canvasimagedata.xml">CanvasImageData</db:link> object. When given as Image item, if the image isn't fully loaded, this method draws nothing. When given as url string, the image should be loaded by calling Canvas item's <db:link xlink:href="qml-qtquick-canvas.xml#loadImage-method">Canvas::loadImage</db:link>() method first. This image been drawing is subject to the current context clip path, even the given <db:code>image</db:code> is a <db:link xlink:href="qml-qtquick-canvasimagedata.xml">CanvasImageData</db:link> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-canvasimagedata.xml">CanvasImageData</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-image.xml">Image</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#loadImage-method">Canvas::loadImage</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#isImageLoaded-method">Canvas::isImageLoaded</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-canvas.xml#imageLoaded-signal">Canvas::imageLoaded</db:link></db:member>
<db:member><db:link xlink:href="http://www.w3.org/TR/2dcontext/#dom-context-2d-drawimage">W3C 2d context standard for drawImage</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ellipse-method">
<db:title>object ellipse(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>, real <db:emphasis>w</db:emphasis>, real <db:emphasis>h</db:emphasis>)</db:title>
<db:para>Creates an ellipse within the bounding rectangle defined by its top-left corner at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>), width <db:code role="parameter">w</db:code> and height <db:code role="parameter">h</db:code>, and adds it to the path as a closed subpath.</db:para>
<db:para>The ellipse is composed of a clockwise curve, starting and finishing at zero degrees (the 3 o'clock position).</db:para>
</db:section>
<db:section xml:id="fill-method">
<db:title>object fill()</db:title>
<db:para>Fills the subpaths with the current fill style.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="http://www.w3.org/TR/2dcontext/#dom-context-2d-fill">W3C 2d context standard for fill</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#fillStyle-prop">fillStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fillRect-method">
<db:title>object fillRect(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>, real <db:emphasis>w</db:emphasis>, real <db:emphasis>h</db:emphasis>)</db:title>
<db:para>Paints a rectangular area specified by (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>) using <db:link xlink:href="qml-qtquick-context2d.xml#fillStyle-prop">fillStyle</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#fillStyle-prop">fillStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fillText-method">
<db:title>object fillText(<db:emphasis>text</db:emphasis>, <db:emphasis>x</db:emphasis>, <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Fills the specified <db:code role="parameter">text</db:code> at the given position (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#font-prop">font</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#textAlign-prop">textAlign</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#textBaseline-prop">textBaseline</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#strokeText-method">strokeText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getImageData-method">
<db:title>CanvasImageData getImageData(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>, real <db:emphasis>w</db:emphasis>, real <db:emphasis>h</db:emphasis>)</db:title>
<db:para>Returns an <db:link xlink:href="qml-qtquick-canvasimagedata.xml">CanvasImageData</db:link> object containing the image data for the canvas rectangle specified by (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>).</db:para>
</db:section>
<db:section xml:id="getLineDash-method">
<db:title>[since QtQuick 2.11] array getLineDash()</db:title>
<db:para>Returns an array of qreals representing the dash pattern of the line.</db:para>
<db:para>This method was introduced in QtQuick 2.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#setLineDash-method">setLineDash</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#lineDashOffset-prop">lineDashOffset</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isPointInPath-method">
<db:title>object isPointInPath(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if the point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) is in the current path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="http://www.w3.org/TR/2dcontext/#dom-context-2d-ispointinpath">W3C 2d context standard for isPointInPath</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineTo-method">
<db:title>object lineTo(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Draws a line from the current position to the point at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
</db:section>
<db:section xml:id="measureText-method">
<db:title>object measureText(<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Returns an object with a <db:code>width</db:code> property, whose value is equivalent to calling <db:link xlink:href="qfontmetrics.xml#width" role="deprecated">QFontMetrics::width</db:link>() with the given <db:code role="parameter">text</db:code> in the current font.</db:para>
</db:section>
<db:section xml:id="moveTo-method">
<db:title>object moveTo(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Creates a new subpath with a point at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
</db:section>
<db:section xml:id="putImageData-method">
<db:title>object putImageData(CanvasImageData <db:emphasis>imageData</db:emphasis>, real <db:emphasis>dx</db:emphasis>, real <db:emphasis>dy</db:emphasis>, real <db:emphasis>dirtyX</db:emphasis>, real <db:emphasis>dirtyY</db:emphasis>, real <db:emphasis>dirtyWidth</db:emphasis>, real <db:emphasis>dirtyHeight</db:emphasis>)</db:title>
<db:para>Paints the data from the given <db:code role="parameter">imageData</db:code> object onto the canvas at (<db:code role="parameter">dx</db:code>, <db:code role="parameter">dy</db:code>).</db:para>
<db:para>If a dirty rectangle (<db:code role="parameter">dirtyX</db:code>, <db:code role="parameter">dirtyY</db:code>, <db:code role="parameter">dirtyWidth</db:code>, <db:code role="parameter">dirtyHeight</db:code>) is provided, only the pixels from that rectangle are painted.</db:para>
</db:section>
<db:section xml:id="quadraticCurveTo-method">
<db:title>object quadraticCurveTo(real <db:emphasis>cpx</db:emphasis>, real <db:emphasis>cpy</db:emphasis>, real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Adds a quadratic bezier curve between the current point and the endpoint (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) with the control point specified by (<db:code role="parameter">cpx</db:code>, <db:code role="parameter">cpy</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="http://www.w3.org/TR/2dcontext/#dom-context-2d-quadraticcurveto">W3C 2d context standard for quadraticCurveTo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rect-method">
<db:title>object rect(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>, real <db:emphasis>w</db:emphasis>, real <db:emphasis>h</db:emphasis>)</db:title>
<db:para>Adds a rectangle at position (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>), with the given width <db:code role="parameter">w</db:code> and height <db:code role="parameter">h</db:code>, as a closed subpath.</db:para>
</db:section>
<db:section xml:id="reset-method">
<db:title>object reset()</db:title>
<db:para>Resets the context state and properties to the default values.</db:para>
</db:section>
<db:section xml:id="resetTransform-method">
<db:title>object resetTransform()</db:title>
<db:para>Reset the transformation matrix to the default value (equivalent to calling <db:link xlink:href="qml-qtquick-context2d.xml#setTransform-method">setTransform</db:link>(<db:code>1</db:code>, <db:code>0</db:code>, <db:code>0</db:code>, <db:code>1</db:code>, <db:code>0</db:code>, <db:code>0</db:code>)).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#transform-method">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#setTransform-method">setTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#reset-method">reset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="restore-method">
<db:title>object restore()</db:title>
<db:para>Pops the top state on the stack, restoring the context to that state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#save-method">save</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rotate-method">
<db:title>object rotate(real <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>Rotate the canvas around the current origin by <db:code role="parameter">angle</db:code> in radians and clockwise direction.</db:para>
<db:programlisting language="cpp">ctx.rotate(Math.PI/2);
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-item-canvas-rotate.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The rotation transformation matrix is as follows:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-item-canvas-math-rotate.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>where the <db:code role="parameter">angle</db:code> of rotation is in radians.</db:para>
</db:section>
<db:section xml:id="roundedRect-method">
<db:title>object roundedRect(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>, real <db:emphasis>w</db:emphasis>, real <db:emphasis>h</db:emphasis>, real <db:emphasis>xRadius</db:emphasis>, real <db:emphasis>yRadius</db:emphasis>)</db:title>
<db:para>Adds a rounded-corner rectangle, specified by (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>), to the path. The <db:code role="parameter">xRadius</db:code> and <db:code role="parameter">yRadius</db:code> arguments specify the radius of the ellipses defining the corners of the rounded rectangle.</db:para>
</db:section>
<db:section xml:id="save-method">
<db:title>object save()</db:title>
<db:para>Pushes the current state onto the state stack.</db:para>
<db:para>Before changing any state attributes, you should save the current state for future reference. The context maintains a stack of drawing states. Each state consists of the current transformation matrix, clipping region, and values of the following attributes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-context2d.xml#strokeStyle-prop">strokeStyle</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-context2d.xml#fillStyle-prop">fillStyle</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-context2d.xml#fillRule-prop">fillRule</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-context2d.xml#globalAlpha-prop">globalAlpha</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-context2d.xml#lineWidth-prop">lineWidth</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-context2d.xml#lineCap-prop">lineCap</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-context2d.xml#lineJoin-prop">lineJoin</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-context2d.xml#miterLimit-prop">miterLimit</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-context2d.xml#shadowOffsetX-prop">shadowOffsetX</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-context2d.xml#shadowOffsetY-prop">shadowOffsetY</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-context2d.xml#shadowBlur-prop">shadowBlur</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-context2d.xml#shadowColor-prop">shadowColor</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-context2d.xml#globalCompositeOperation-prop">globalCompositeOperation</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-context2d.xml#font-prop">font</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-context2d.xml#textAlign-prop">textAlign</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-context2d.xml#textBaseline-prop">textBaseline</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The current path is NOT part of the drawing state. The path can be reset by invoking the <db:link xlink:href="qml-qtquick-context2d.xml#beginPath-method">beginPath</db:link>() method.</db:para>
</db:section>
<db:section xml:id="scale-method">
<db:title>object scale(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Increases or decreases the size of each unit in the canvas grid by multiplying the scale factors to the current tranform matrix. <db:code role="parameter">x</db:code> is the scale factor in the horizontal direction and <db:code role="parameter">y</db:code> is the scale factor in the vertical direction.</db:para>
<db:para>The following code doubles the horizontal size of an object drawn on the canvas and halves its vertical size:</db:para>
<db:programlisting language="cpp">ctx.scale(2.0, 0.5);
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-item-canvas-scale.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="setLineDash-method">
<db:title>[since QtQuick 2.11] setLineDash(array <db:emphasis>pattern</db:emphasis>)</db:title>
<db:para>Sets the dash pattern to the given pattern.</db:para>
<db:para><db:code role="parameter">pattern</db:code> a list of numbers that specifies distances to alternately draw a line and a gap.</db:para>
<db:para>If the number of elements in the array is odd, the elements of the array get copied and concatenated. For example, [5, 15, 25] will become [5, 15, 25, 5, 15, 25].</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-item-canvas-lineDash.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var space = 4
ctx.setLineDash([1, space, 3, space, 9, space, 27, space, 9, space])
...
ctx.stroke();
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This method was introduced in QtQuick 2.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#getLineDash-method">getLineDash</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#lineDashOffset-prop">lineDashOffset</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransform-method">
<db:title>object setTransform(real <db:emphasis>a</db:emphasis>, real <db:emphasis>b</db:emphasis>, real <db:emphasis>c</db:emphasis>, real <db:emphasis>d</db:emphasis>, real <db:emphasis>e</db:emphasis>, real <db:emphasis>f</db:emphasis>)</db:title>
<db:para>Changes the transformation matrix to the matrix given by the arguments as described below.</db:para>
<db:para>Modifying the transformation matrix directly enables you to perform scaling, rotating, and translating transformations in a single step.</db:para>
<db:para>Each point on the canvas is multiplied by the matrix before anything is drawn. The <db:link xlink:href="http://www.w3.org/TR/2dcontext/#transformations">HTML Canvas 2D Context specification</db:link> defines the transformation matrix as:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-item-canvas-math.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>where:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code role="parameter">a</db:code> is the scale factor in the horizontal (x) direction</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-item-canvas-scalex.png"/>
</db:imageobject>
</db:mediaobject>
</db:listitem>
<db:listitem>
<db:para><db:code role="parameter">c</db:code> is the skew factor in the x direction</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-item-canvas-skewx.png"/>
</db:imageobject>
</db:mediaobject>
</db:listitem>
<db:listitem>
<db:para><db:code role="parameter">e</db:code> is the translation in the x direction</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-item-canvas-translate.png"/>
</db:imageobject>
</db:mediaobject>
</db:listitem>
<db:listitem>
<db:para><db:code role="parameter">b</db:code> is the skew factor in the y (vertical) direction</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-item-canvas-skewy.png"/>
</db:imageobject>
</db:mediaobject>
</db:listitem>
<db:listitem>
<db:para><db:code role="parameter">d</db:code> is the scale factor in the y direction</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-item-canvas-scaley.png"/>
</db:imageobject>
</db:mediaobject>
</db:listitem>
<db:listitem>
<db:para><db:code role="parameter">f</db:code> is the translation in the y direction</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-item-canvas-translatey.png"/>
</db:imageobject>
</db:mediaobject>
</db:listitem>
<db:listitem>
<db:para>the last row remains constant</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The scale factors and skew factors are multiples; <db:code role="parameter">e</db:code> and <db:code role="parameter">f</db:code> are coordinate space units, just like the units in the translate(x,y) method.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#transform-method">transform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shear-method">
<db:title>object shear(real <db:emphasis>sh</db:emphasis>, real <db:emphasis>sv</db:emphasis>)</db:title>
<db:para>Shears the transformation matrix by <db:code role="parameter">sh</db:code> in the horizontal direction and <db:code role="parameter">sv</db:code> in the vertical direction.</db:para>
</db:section>
<db:section xml:id="stroke-method">
<db:title>object stroke()</db:title>
<db:para>Strokes the subpaths with the current stroke style.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#strokeStyle-prop">strokeStyle</db:link></db:member>
<db:member><db:link xlink:href="http://www.w3.org/TR/2dcontext/#dom-context-2d-stroke">W3C 2d context standard for stroke</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="strokeRect-method">
<db:title>object strokeRect(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>, real <db:emphasis>w</db:emphasis>, real <db:emphasis>h</db:emphasis>)</db:title>
<db:para>Strokes the path of the rectangle specified by (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>) using <db:link xlink:href="qml-qtquick-context2d.xml#strokeStyle-prop">strokeStyle</db:link>, <db:link xlink:href="qml-qtquick-context2d.xml#lineWidth-prop">lineWidth</db:link>, <db:link xlink:href="qml-qtquick-context2d.xml#lineJoin-prop">lineJoin</db:link>, and (if appropriate) <db:link xlink:href="qml-qtquick-context2d.xml#miterLimit-prop">miterLimit</db:link> attributes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#strokeStyle-prop">strokeStyle</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#lineWidth-prop">lineWidth</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#lineJoin-prop">lineJoin</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#miterLimit-prop">miterLimit</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="strokeText-method">
<db:title>object strokeText(<db:emphasis>text</db:emphasis>, <db:emphasis>x</db:emphasis>, <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Strokes the given <db:code role="parameter">text</db:code> at a position specified by (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#font-prop">font</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#textAlign-prop">textAlign</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#textBaseline-prop">textBaseline</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#fillText-method">fillText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text-method">
<db:title>object text(string <db:emphasis>text</db:emphasis>, real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">text</db:code> to the path as a set of closed subpaths created from the current context font supplied.</db:para>
<db:para>The subpaths are positioned so that the left end of the text's baseline lies at the point specified by (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
</db:section>
<db:section xml:id="transform-method">
<db:title>object transform(real <db:emphasis>a</db:emphasis>, real <db:emphasis>b</db:emphasis>, real <db:emphasis>c</db:emphasis>, real <db:emphasis>d</db:emphasis>, real <db:emphasis>e</db:emphasis>, real <db:emphasis>f</db:emphasis>)</db:title>
<db:para>This method is very similar to <db:link xlink:href="qml-qtquick-context2d.xml#setTransform-method">setTransform</db:link>(), but instead of replacing the old transform matrix, this method applies the given tranform matrix to the current matrix by multiplying to it.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick-context2d.xml#setTransform-method">setTransform</db:link>(<db:code role="parameter">a</db:code>, <db:code role="parameter">b</db:code>, <db:code role="parameter">c</db:code>, <db:code role="parameter">d</db:code>, <db:code role="parameter">e</db:code>, <db:code role="parameter">f</db:code>) method actually resets the current transform to the identity matrix, and then invokes the transform(<db:code role="parameter">a</db:code>, <db:code role="parameter">b</db:code>, <db:code role="parameter">c</db:code>, <db:code role="parameter">d</db:code>, <db:code role="parameter">e</db:code>, <db:code role="parameter">f</db:code>) method with the same arguments.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-context2d.xml#setTransform-method">setTransform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translate-method">
<db:title>object translate(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Translates the origin of the canvas by a horizontal distance of <db:code role="parameter">x</db:code>, and a vertical distance of <db:code role="parameter">y</db:code>, in coordinate space units.</db:para>
<db:para>Translating the origin enables you to draw patterns of different objects on the canvas without having to measure the coordinates manually for each shape.</db:para>
</db:section>
</db:section>
</db:article>
