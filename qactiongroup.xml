<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QActionGroup Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qactiongroup.xml">QActionGroup</db:link> class groups actions together.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QActionGroup</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qactiongroup.xml">QActionGroup</db:link> is a base class for classes grouping classes inhheriting <db:link xlink:href="qaction.xml">QAction</db:link> objects together.</db:para>
<db:para>In some situations it is useful to group <db:link xlink:href="qaction.xml">QAction</db:link> objects together. For example, if you have a <db:guilabel>Left Align</db:guilabel> action, a <db:guilabel>Right Align</db:guilabel> action, a <db:guilabel>Justify</db:guilabel> action, and a <db:guilabel>Center</db:guilabel> action, only one of these actions should be active at any one time. One simple way of achieving this is to group the actions together in an action group, inheriting <db:link xlink:href="qactiongroup.xml">QActionGroup</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml">QAction</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ExclusionPolicy-enum">
<db:title>enum QActionGroup::ExclusionPolicy</db:title>
<db:enumsynopsis>
<db:enumname>ExclusionPolicy</db:enumname>
<db:enumitem>
<db:enumidentifier>None</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Exclusive</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExclusiveOptional</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies the different policies that can be used to control how the group performs exclusive checking on checkable actions.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qactiongroup.xml">QActionGroup</db:link></db:emphasis>::<db:emphasis role="bold">ExclusionPolicy</db:emphasis>::None</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The actions in the group can be checked independently of each other.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qactiongroup.xml">QActionGroup</db:link></db:emphasis>::<db:emphasis role="bold">ExclusionPolicy</db:emphasis>::Exclusive</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Exactly one action can be checked at any one time. This is the default policy.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qactiongroup.xml">QActionGroup</db:link></db:emphasis>::<db:emphasis role="bold">ExclusionPolicy</db:emphasis>::ExclusiveOptional</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>At most one action can be checked at any one time. The actions can also be all unchecked.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qactiongroup.xml#exclusionPolicy-prop">exclusionPolicy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="enabled-prop">
<db:title>enabled : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>enabled</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isEnabled</db:synopsisinfo>
<db:synopsisinfo role="setter">setEnabled</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the action group is enabled</db:para>
<db:para>Each action in the group will be enabled or disabled unless it has been explicitly disabled.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setEnabled</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#enabled-prop">QAction::setEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exclusionPolicy-prop">
<db:title>exclusionPolicy : QActionGroup::ExclusionPolicy</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QActionGroup::ExclusionPolicy</db:type>
<db:varname>exclusionPolicy</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">exclusionPolicy</db:synopsisinfo>
<db:synopsisinfo role="setter">setExclusionPolicy</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the group exclusive checking policy</db:para>
<db:para>If exclusionPolicy is set to Exclusive, only one checkable action in the action group can ever be active at any time. If the user chooses another checkable action in the group, the one they chose becomes active and the one that was active becomes inactive. If exclusionPolicy is set to ExclusionOptional the group is exclusive but the active checkable action in the group can be unchecked leaving the group with no actions checked.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qactiongroup.xml#ExclusionPolicy-enum">QActionGroup::ExclusionPolicy</db:link></db:type> <db:emphasis role="bold">exclusionPolicy</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setExclusionPolicy</db:emphasis>(<db:type><db:link xlink:href="qactiongroup.xml#ExclusionPolicy-enum">QActionGroup::ExclusionPolicy</db:link></db:type> <db:emphasis>policy</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#checkable-prop">QAction::checkable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visible-prop">
<db:title>visible : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>visible</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isVisible</db:synopsisinfo>
<db:synopsisinfo role="setter">setVisible</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the action group is visible</db:para>
<db:para>Each action in the action group will match the visible state of this group unless it has been explicitly hidden.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isVisible</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setVisible</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#enabled-prop">QAction::setEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QActionGroup">
<db:title>[explicit] QActionGroup::QActionGroup(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QActionGroup</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QActionGroup(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an action group for the <db:code role="parameter">parent</db:code> object.</db:para>
<db:para>The action group is exclusive by default. Call <db:link xlink:href="qactiongroup.xml#setExclusive">setExclusive</db:link>(false) to make the action group non-exclusive. To make the group exclusive but allow unchecking the active action call instead <db:link xlink:href="qactiongroup.xml#exclusionPolicy-prop">setExclusionPolicy</db:link>(<db:link xlink:href="qactiongroup.xml#ExclusionPolicy-enum">QActionGroup::ExclusionPolicy::ExclusiveOptional</db:link>)</db:para>
</db:section>
<db:section xml:id="dtor.QActionGroup">
<db:title>[virtual] QActionGroup::~QActionGroup()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QActionGroup</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QActionGroup()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the action group.</db:para>
</db:section>
<db:section xml:id="actions">
<db:title>QList&lt;QAction *&gt; QActionGroup::actions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QAction *&gt;</db:type>
<db:methodname>actions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QAction *&gt; actions() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of this groups's actions. This may be empty.</db:para>
</db:section>
<db:section xml:id="addAction">
<db:title>QAction *QActionGroup::addAction(QAction *<db:emphasis>action</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QAction *</db:type>
<db:methodname>addAction</db:methodname>
<db:methodparam>
<db:type>QAction *</db:type>
<db:parameter>action</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAction * addAction(QAction *action)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the <db:code role="parameter">action</db:code> to this group, and returns it.</db:para>
<db:para>Normally an action is added to a group by creating it with the group as its parent, so this function is not usually used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#setActionGroup">QAction::setActionGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addAction-1">
<db:title>QAction *QActionGroup::addAction(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QAction *</db:type>
<db:methodname>addAction</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QAction * addAction(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates and returns an action with <db:code role="parameter">text</db:code>. The newly created action is a child of this action group.</db:para>
<db:para>Normally an action is added to a group by creating it with the group as parent, so this function is not usually used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#setActionGroup">QAction::setActionGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addAction-2">
<db:title>QAction *QActionGroup::addAction(const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QAction *</db:type>
<db:methodname>addAction</db:methodname>
<db:methodparam>
<db:type>const QIcon &amp;</db:type>
<db:parameter>icon</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QAction * addAction(const QIcon &amp;icon, const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates and returns an action with <db:code role="parameter">text</db:code> and an <db:code role="parameter">icon</db:code>. The newly created action is a child of this action group.</db:para>
<db:para>Normally an action is added to a group by creating it with the group as its parent, so this function is not usually used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#setActionGroup">QAction::setActionGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checkedAction">
<db:title>QAction *QActionGroup::checkedAction() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAction *</db:type>
<db:methodname>checkedAction</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAction * checkedAction() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the currently checked action in the group, or <db:code>nullptr</db:code> if none are checked.</db:para>
</db:section>
<db:section xml:id="isExclusive">
<db:title>bool QActionGroup::isExclusive() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isExclusive</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isExclusive() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the group is exclusive</db:para>
<db:para>The group is exclusive if the <db:link xlink:href="qactiongroup.xml#ExclusionPolicy-enum">ExclusionPolicy</db:link> is either Exclusive or ExclusionOptional.</db:para>
</db:section>
<db:section xml:id="removeAction">
<db:title>void QActionGroup::removeAction(QAction *<db:emphasis>action</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeAction</db:methodname>
<db:methodparam>
<db:type>QAction *</db:type>
<db:parameter>action</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeAction(QAction *action)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the <db:code role="parameter">action</db:code> from this group. The action will have no parent as a result.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#setActionGroup">QAction::setActionGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDisabled">
<db:title>void QActionGroup::setDisabled(bool <db:emphasis>b</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDisabled</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDisabled(bool b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience function for the <db:link xlink:href="qactiongroup.xml#enabled-prop">enabled</db:link> property, that is useful for signals–slots connections. If <db:code role="parameter">b</db:code> is true the action group is disabled; otherwise it is enabled.</db:para>
</db:section>
<db:section xml:id="setExclusive">
<db:title>void QActionGroup::setExclusive(bool <db:emphasis>b</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setExclusive</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setExclusive(bool b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enable or disable the group exclusion checking</db:para>
<db:para>This is a convenience method that calls <db:link xlink:href="qactiongroup.xml#exclusionPolicy-prop">setExclusionPolicy</db:link>(<db:link xlink:href="qactiongroup.xml#ExclusionPolicy-enum">ExclusionPolicy::Exclusive</db:link>) when <db:code role="parameter">b</db:code> is true, else <db:link xlink:href="qactiongroup.xml#exclusionPolicy-prop">setExclusionPolicy</db:link>(<db:link xlink:href="qactiongroup.xml#ExclusionPolicy-enum">QActionGroup::ExclusionPolicy::None</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qactiongroup.xml#isExclusive">isExclusive</db:link>()</db:member>
<db:member><db:link xlink:href="qactiongroup.xml#exclusionPolicy-prop">QActionGroup::exclusionPolicy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
