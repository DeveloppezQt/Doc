<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QActionGroup Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qactiongroup.xml">QActionGroup</db:link> class groups actions together.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QActionGroup</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QActionGroup is part of <db:simplelist><db:member>mainwindow-classes</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>In some situations it is useful to group <db:link xlink:href="qaction.xml">QAction</db:link> objects together. For example, if you have a <db:guilabel>Left Align</db:guilabel> action, a <db:guilabel>Right Align</db:guilabel> action, a <db:guilabel>Justify</db:guilabel> action, and a <db:guilabel>Center</db:guilabel> action, only one of these actions should be active at any one time. One simple way of achieving this is to group the actions together in an action group.</db:para>
<db:para>Here's a example (from the <db:link xlink:href="qtwidgets-mainwindows-menus-example.xml">Menus</db:link> example):</db:para>
<db:programlisting language="cpp">    alignmentGroup = new QActionGroup(this);
    alignmentGroup-&gt;addAction(leftAlignAct);
    alignmentGroup-&gt;addAction(rightAlignAct);
    alignmentGroup-&gt;addAction(justifyAct);
    alignmentGroup-&gt;addAction(centerAct);
    leftAlignAct-&gt;setChecked(true);
</db:programlisting>
<db:para>Here we create a new action group. Since the action group is exclusive by default, only one of the actions in the group is checked at any one time.</db:para>
<db:mediaobject>
<db:alt>Alignment options in a QMenu</db:alt>
<db:imageobject>
<db:imagedata fileref="images/qactiongroup-align.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A <db:link xlink:href="qactiongroup.xml">QActionGroup</db:link> emits an <db:link xlink:href="qactiongroup.xml#triggered">triggered</db:link>() signal when one of its actions is chosen. Each action in an action group emits its <db:link xlink:href="qactiongroup.xml#triggered">triggered</db:link>() signal as usual.</db:para>
<db:para>As stated above, an action group is <db:link xlink:href="qactiongroup.xml#exclusive-prop">exclusive</db:link> by default; it ensures that only one checkable action is active at any one time. If you want to group checkable actions without making them exclusive, you can turn of exclusiveness by calling <db:link xlink:href="qactiongroup.xml#exclusive-prop">setExclusive</db:link>(false).</db:para>
<db:para>Actions can be added to an action group using <db:link xlink:href="qactiongroup.xml#addAction">addAction</db:link>(), but it is usually more convenient to specify a group when creating actions; this ensures that actions are automatically created with a parent. Actions can be visually separated from each other by adding a separator action to the group; create an action and use <db:link xlink:href="qaction.xml">QAction</db:link>'s <db:link xlink:href="qaction.xml#setSeparator">setSeparator</db:link>() function to make it considered a separator. Action groups are added to widgets with the <db:link xlink:href="qwidget.xml#addActions">QWidget::addActions</db:link>() function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml">QAction</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="enabled-prop">
<db:title>enabled : bool</db:title>
<db:para>This property holds whether the action group is enabled</db:para>
<db:para>Each action in the group will be enabled or disabled unless it has been explicitly disabled.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setEnabled</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#enabled-prop">QAction::setEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exclusive-prop">
<db:title>exclusive : bool</db:title>
<db:para>This property holds whether the action group does exclusive checking</db:para>
<db:para>If exclusive is true, only one checkable action in the action group can ever be active at any time. If the user chooses another checkable action in the group, the one they chose becomes active and the one that was active becomes inactive.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isExclusive</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setExclusive</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#checkable-prop">QAction::checkable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visible-prop">
<db:title>visible : bool</db:title>
<db:para>This property holds whether the action group is visible</db:para>
<db:para>Each action in the action group will match the visible state of this group unless it has been explicitly hidden.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isVisible</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setVisible</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#enabled-prop">QAction::setEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QActionGroup">
<db:title>[explicit] QActionGroup::QActionGroup(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Constructs an action group for the <db:code role="parameter">parent</db:code> object.</db:para>
<db:para>The action group is exclusive by default. Call <db:link xlink:href="qactiongroup.xml#exclusive-prop">setExclusive</db:link>(false) to make the action group non-exclusive.</db:para>
</db:section>
<db:section xml:id="dtor.QActionGroup">
<db:title>[virtual noexcept] QActionGroup::~QActionGroup()</db:title>
<db:para>Destroys the action group.</db:para>
</db:section>
<db:section xml:id="actions">
<db:title>QList&lt;QAction *&gt; QActionGroup::actions() const</db:title>
<db:para>Returns the list of this groups's actions. This may be empty.</db:para>
</db:section>
<db:section xml:id="addAction">
<db:title>QAction *QActionGroup::addAction(QAction *<db:emphasis>action</db:emphasis>)</db:title>
<db:para>Adds the <db:code role="parameter">action</db:code> to this group, and returns it.</db:para>
<db:para>Normally an action is added to a group by creating it with the group as its parent, so this function is not usually used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#setActionGroup">QAction::setActionGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addAction-1">
<db:title>QAction *QActionGroup::addAction(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Creates and returns an action with <db:code role="parameter">text</db:code>. The newly created action is a child of this action group.</db:para>
<db:para>Normally an action is added to a group by creating it with the group as parent, so this function is not usually used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#setActionGroup">QAction::setActionGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addAction-2">
<db:title>QAction *QActionGroup::addAction(const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Creates and returns an action with <db:code role="parameter">text</db:code> and an <db:code role="parameter">icon</db:code>. The newly created action is a child of this action group.</db:para>
<db:para>Normally an action is added to a group by creating it with the group as its parent, so this function is not usually used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#setActionGroup">QAction::setActionGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checkedAction">
<db:title>QAction *QActionGroup::checkedAction() const</db:title>
<db:para>Returns the currently checked action in the group, or 0 if none are checked.</db:para>
</db:section>
<db:section xml:id="hovered">
<db:title>void QActionGroup::hovered(QAction *<db:emphasis>action</db:emphasis>)</db:title>
<db:para>This signal is emitted when the given <db:code role="parameter">action</db:code> in the action group is highlighted by the user; for example, when the user pauses with the cursor over a menu option, toolbar button, or presses an action's shortcut key combination.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#activate">QAction::activate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeAction">
<db:title>void QActionGroup::removeAction(QAction *<db:emphasis>action</db:emphasis>)</db:title>
<db:para>Removes the <db:code role="parameter">action</db:code> from this group. The action will have no parent as a result.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#setActionGroup">QAction::setActionGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDisabled">
<db:title>void QActionGroup::setDisabled(bool <db:emphasis>b</db:emphasis>)</db:title>
<db:para>This is a convenience function for the <db:link xlink:href="qactiongroup.xml#enabled-prop">enabled</db:link> property, that is useful for signals–slots connections. If <db:code role="parameter">b</db:code> is true the action group is disabled; otherwise it is enabled.</db:para>
</db:section>
<db:section xml:id="triggered">
<db:title>void QActionGroup::triggered(QAction *<db:emphasis>action</db:emphasis>)</db:title>
<db:para>This signal is emitted when the given <db:code role="parameter">action</db:code> in the action group is activated by the user; for example, when the user clicks a menu option, toolbar button, or presses an action's shortcut key combination.</db:para>
<db:para>Connect to this signal for command actions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#activate">QAction::activate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
