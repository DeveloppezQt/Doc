<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Modbus Server</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example implements a Modbus server application.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The example acts as Modbus server. It receives standard Modbus requests, adjusts its internal states based on the request and responds with the appropriate reply.</db:para>
<db:para>This example must be used in conjunction with the <db:link xlink:href="qtserialbus-modbus-client-example.xml">Modbus Client example</db:link>. This example should be started and put into the listen state before the Modbus client example is started. Subsequent interactions between the two examples use the Modbus protocol.</db:para>
<db:para>Key classes used in this example:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmodbusserver.xml">QModbusServer</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmodbusdataunit.xml">QModbusDataUnit</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/modbusserver.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="creating-a-qmodbusserver">
<db:title>Creating a QModbusServer</db:title>
<db:para>An instance of <db:link xlink:href="qmodbusserver.xml">QModbusServer</db:link> is required to perform any communication. Depending on the specified connection type, the example can instantiate a <db:link xlink:href="qmodbusrtuserialserver.xml">QModbusRtuSerialServer</db:link> (for serial communication) or a <db:link xlink:href="qmodbustcpserver.xml">QModbusTcpServer</db:link> (for TCP-based communication).</db:para>
<db:programlisting language="cpp">    auto type = static_cast&amp;lt;ModbusConnection&amp;gt;(index);
    if (type == Serial) {
#if QT_CONFIG(modbus_serialport)
        modbusDevice = new QModbusRtuSerialServer(this);
        // Try to fill in the first available serial port name if the line edit
        // is empty, or contains a url (assume that ':' is only a part of url).
        const auto ports = QSerialPortInfo::availablePorts();
        const auto currentText = ui-&amp;gt;portEdit-&amp;gt;text();
        if (!ports.isEmpty() &amp;amp;&amp;amp; (currentText.isEmpty() || currentText.contains(u':')))
            ui-&amp;gt;portEdit-&amp;gt;setText(ports.front().portName());
#endif
    } else if (type == Tcp) {
        modbusDevice = new QModbusTcpServer(this);
        const QUrl currentUrl = QUrl::fromUserInput(ui-&amp;gt;portEdit-&amp;gt;text());
        // Check if we already have &amp;lt;ip address&amp;gt;:&amp;lt;port&amp;gt;
        if (currentUrl.port() &amp;lt;= 0)
            ui-&amp;gt;portEdit-&amp;gt;setText(QLatin1String(&quot;127.0.0.1:50200&quot;));
    }
</db:programlisting>
<db:para>Once the server is created, the register map is set using <db:link xlink:href="qmodbusserver.xml#setMap">QModbusServer::setMap</db:link>() method. This register map is used by client applications to read and write server data.</db:para>
<db:programlisting language="cpp">        QModbusDataUnitMap reg;
        reg.insert(QModbusDataUnit::Coils, { QModbusDataUnit::Coils, 0, 10 });
        reg.insert(QModbusDataUnit::DiscreteInputs, { QModbusDataUnit::DiscreteInputs, 0, 10 });
        reg.insert(QModbusDataUnit::InputRegisters, { QModbusDataUnit::InputRegisters, 0, 10 });
        reg.insert(QModbusDataUnit::HoldingRegisters, { QModbusDataUnit::HoldingRegisters, 0, 10 });

        modbusDevice-&amp;gt;setMap(reg);
</db:programlisting>
<db:para>After that the communication parameters and the server address are specified. The communication parameters depend on the communication type:</db:para>
<db:programlisting language="cpp">        if (static_cast&amp;lt;ModbusConnection&amp;gt;(ui-&amp;gt;connectType-&amp;gt;currentIndex()) == Serial) {
            modbusDevice-&amp;gt;setConnectionParameter(QModbusDevice::SerialPortNameParameter,
                ui-&amp;gt;portEdit-&amp;gt;text());
#if QT_CONFIG(modbus_serialport)
            modbusDevice-&amp;gt;setConnectionParameter(QModbusDevice::SerialParityParameter,
                m_settingsDialog-&amp;gt;settings().parity);
            modbusDevice-&amp;gt;setConnectionParameter(QModbusDevice::SerialBaudRateParameter,
                m_settingsDialog-&amp;gt;settings().baud);
            modbusDevice-&amp;gt;setConnectionParameter(QModbusDevice::SerialDataBitsParameter,
                m_settingsDialog-&amp;gt;settings().dataBits);
            modbusDevice-&amp;gt;setConnectionParameter(QModbusDevice::SerialStopBitsParameter,
                m_settingsDialog-&amp;gt;settings().stopBits);
#endif
        } else {
            const QUrl url = QUrl::fromUserInput(ui-&amp;gt;portEdit-&amp;gt;text());
            modbusDevice-&amp;gt;setConnectionParameter(QModbusDevice::NetworkPortParameter, url.port());
            modbusDevice-&amp;gt;setConnectionParameter(QModbusDevice::NetworkAddressParameter, url.host());
        }
        modbusDevice-&amp;gt;setServerAddress(ui-&amp;gt;serverEdit-&amp;gt;text().toInt());
</db:programlisting>
<db:para>After the server is created and all the parameters are specified, use <db:link xlink:href="qmodbusdevice.xml#connectDevice">QModbusServer::connectDevice</db:link>() to connect to Modbus network.</db:para>
</db:section>
<db:section xml:id="changing-local-values">
<db:title>Changing Local Values</db:title>
<db:para>The example allows to change values of all supported <db:link xlink:href="qmodbusdataunit.xml#RegisterType-enum">register types</db:link> by using the provided combo boxes or line edits. Once the value is updated in the UI, the <db:link xlink:href="qmodbusserver.xml#setData">QModbusServer::setData</db:link>() method is used to update the actual value on the server:</db:para>
<db:programlisting language="cpp">void MainWindow::bitChanged(int id, QModbusDataUnit::RegisterType table, bool value)
{
    if (!modbusDevice)
        return;

    if (!modbusDevice-&amp;gt;setData(table, quint16(id), value))
        statusBar()-&amp;gt;showMessage(tr(&quot;Could not set data: &quot;) + modbusDevice-&amp;gt;errorString(), 5000);
}

void MainWindow::setRegister(const QString &amp;amp;value)
{
    if (!modbusDevice)
        return;

    const QString objectName = QObject::sender()-&amp;gt;objectName();
    if (registers.contains(objectName)) {
        bool ok = true;
        const quint16 id = quint16(QObject::sender()-&amp;gt;property(&quot;ID&quot;).toUInt());
        if (objectName.startsWith(QStringLiteral(&quot;inReg&quot;))) {
            const auto uval = value.toUShort(&amp;amp;ok, 16);
            if (ok)
                ok = modbusDevice-&amp;gt;setData(QModbusDataUnit::InputRegisters, id, uval);
        } else if (objectName.startsWith(QStringLiteral(&quot;holdReg&quot;))) {
            const auto uval = value.toUShort(&amp;amp;ok, 16);
            if (ok)
                ok = modbusDevice-&amp;gt;setData(QModbusDataUnit::HoldingRegisters, id, uval);
        }

        if (!ok)
            statusBar()-&amp;gt;showMessage(tr(&quot;Could not set register: &quot;) + modbusDevice-&amp;gt;errorString(),
                                     5000);
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="handling-remote-writes">
<db:title>Handling Remote Writes</db:title>
<db:para>The Modbus clients are capable of updating <db:link xlink:href="qmodbusdataunit.xml#RegisterType-enum">Coils</db:link> and <db:link xlink:href="qmodbusdataunit.xml#RegisterType-enum">HoldingRegisters</db:link> by sending write requests. Once the value is updated on the server side using such request, a <db:link xlink:href="qmodbusserver.xml#dataWritten">QModbusServer::dataWritten</db:link>() signal is emitted.</db:para>
<db:programlisting language="cpp">        connect(modbusDevice, &amp;amp;QModbusServer::dataWritten,
                this, &amp;amp;MainWindow::updateWidgets);
</db:programlisting>
<db:para>The Modbus server example connects to this signal, extracts the updated values and updates the UI accordingly:</db:para>
<db:programlisting language="cpp">void MainWindow::updateWidgets(QModbusDataUnit::RegisterType table, int address, int size)
{
    for (int i = 0; i &amp;lt; size; ++i) {
        quint16 value;
        QString text;
        switch (table) {
        case QModbusDataUnit::Coils:
            modbusDevice-&amp;gt;data(QModbusDataUnit::Coils, quint16(address + i), &amp;amp;value);
            coilButtons.button(address + i)-&amp;gt;setChecked(value);
            break;
        case QModbusDataUnit::HoldingRegisters:
            modbusDevice-&amp;gt;data(QModbusDataUnit::HoldingRegisters, quint16(address + i), &amp;amp;value);
            registers.value(QStringLiteral(&quot;holdReg_%1&quot;).arg(address + i))-&amp;gt;setText(text
                .setNum(value, 16));
            break;
        default:
            break;
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtserialbus.git/tree/examples/serialbus/modbus/server?h=6.5">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
