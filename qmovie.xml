<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QMovie Class</db:title>
<db:productname>QtGui</db:productname>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmovie.xml">QMovie</db:link> class is a convenience class for playing movies with <db:link xlink:href="qimagereader.xml">QImageReader</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMovie</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class is used to show simple animations without sound. If you want to display video and media content, use the Phonon multimedia framework instead.</db:para>
<db:para>First, create a <db:link xlink:href="qmovie.xml">QMovie</db:link> object by passing either the name of a file or a pointer to a <db:link xlink:href="qiodevice.xml">QIODevice</db:link> containing an animated image format to <db:link xlink:href="qmovie.xml">QMovie</db:link>'s constructor. You can call <db:link xlink:href="qmovie.xml#isValid">isValid</db:link>() to check if the image data is valid, before starting the movie. To start the movie, call <db:link xlink:href="qmovie.xml#start">start</db:link>(). <db:link xlink:href="qmovie.xml">QMovie</db:link> will enter <db:link xlink:href="qmovie.xml#MovieState-enum">Running</db:link> state, and emit <db:link xlink:href="qmovie.xml#started">started</db:link>() and <db:link xlink:href="qmovie.xml#stateChanged">stateChanged</db:link>(). To get the current state of the movie, call <db:link xlink:href="qmovie.xml#state">state</db:link>().</db:para>
<db:para>To display the movie in your application, you can pass your <db:link xlink:href="qmovie.xml">QMovie</db:link> object to QLabel::setMovie(). Example:</db:para>
<db:programlisting language="cpp">QLabel label;
QMovie *movie = new QMovie(&quot;animations/fire.gif&quot;);

label.setMovie(movie);
movie-&gt;start();
</db:programlisting>
<db:para>Whenever a new frame is available in the movie, <db:link xlink:href="qmovie.xml">QMovie</db:link> will emit <db:link xlink:href="qmovie.xml#updated">updated</db:link>(). If the size of the frame changes, <db:link xlink:href="qmovie.xml#resized">resized</db:link>() is emitted. You can call <db:link xlink:href="qmovie.xml#currentImage">currentImage</db:link>() or <db:link xlink:href="qmovie.xml#currentPixmap">currentPixmap</db:link>() to get a copy of the current frame. When the movie is done, <db:link xlink:href="qmovie.xml">QMovie</db:link> emits <db:link xlink:href="qmovie.xml#finished">finished</db:link>(). If any error occurs during playback (i.e, the image file is corrupt), <db:link xlink:href="qmovie.xml">QMovie</db:link> will emit <db:link xlink:href="qmovie.xml#error">error</db:link>().</db:para>
<db:para>You can control the speed of the movie playback by calling setSpeed(), which takes the percentage of the original speed as an argument. Pause the movie by calling <db:link xlink:href="qmovie.xml#setPaused">setPaused</db:link>(true). <db:link xlink:href="qmovie.xml">QMovie</db:link> will then enter <db:link xlink:href="qmovie.xml#MovieState-enum">Paused</db:link> state and emit <db:link xlink:href="qmovie.xml#stateChanged">stateChanged</db:link>(). If you call <db:link xlink:href="qmovie.xml#setPaused">setPaused</db:link>(false), <db:link xlink:href="qmovie.xml">QMovie</db:link> will reenter <db:link xlink:href="qmovie.xml#MovieState-enum">Running</db:link> state and start the movie again. To stop the movie, call <db:link xlink:href="qmovie.xml#stop">stop</db:link>().</db:para>
<db:para>Certain animation formats allow you to set the background color. You can call <db:link xlink:href="qmovie.xml#setBackgroundColor">setBackgroundColor</db:link>() to set the color, or <db:link xlink:href="qmovie.xml#backgroundColor">backgroundColor</db:link>() to retrieve the current background color.</db:para>
<db:para><db:link xlink:href="qmovie.xml#currentFrameNumber">currentFrameNumber</db:link>() returns the sequence number of the current frame. The first frame in the animation has the sequence number 0. <db:link xlink:href="qmovie.xml#frameCount">frameCount</db:link>() returns the total number of frames in the animation, if the image format supports this. You can call <db:link xlink:href="qmovie.xml#loopCount">loopCount</db:link>() to get the number of times the movie should loop before finishing. <db:link xlink:href="qmovie.xml#nextFrameDelay">nextFrameDelay</db:link>() returns the number of milliseconds the current frame should be displayed.</db:para>
<db:para><db:link xlink:href="qmovie.xml">QMovie</db:link> can be instructed to cache frames of an animation by calling setCacheMode().</db:para>
<db:para>Call <db:link xlink:href="qmovie.xml#supportedFormats">supportedFormats</db:link>() for a list of formats that <db:link xlink:href="qmovie.xml">QMovie</db:link> supports.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>QLabel</db:member>
<db:member><db:link xlink:href="qimagereader.xml">QImageReader</db:link></db:member>
<db:member><db:link xlink:href="">Movie Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CacheMode-enum">
<db:title>enum QMovie::CacheMode</db:title>
<db:para>This enum describes the different cache modes of <db:link xlink:href="qmovie.xml">QMovie</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmovie.xml">QMovie</db:link></db:emphasis>::CacheNone</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No frames are cached (the default).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmovie.xml">QMovie</db:link></db:emphasis>::CacheAll</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>All frames are cached.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="MovieState-enum">
<db:title>enum QMovie::MovieState</db:title>
<db:para>This enum describes the different states of <db:link xlink:href="qmovie.xml">QMovie</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmovie.xml">QMovie</db:link></db:emphasis>::NotRunning</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The movie is not running. This is <db:link xlink:href="qmovie.xml">QMovie</db:link>'s initial state, and the state it enters after <db:link xlink:href="qmovie.xml#stop">stop</db:link>() has been called or the movie is finished.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmovie.xml">QMovie</db:link></db:emphasis>::Paused</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The movie is paused, and <db:link xlink:href="qmovie.xml">QMovie</db:link> stops emitting <db:link xlink:href="qmovie.xml#updated">updated</db:link>() or <db:link xlink:href="qmovie.xml#resized">resized</db:link>(). This state is entered after calling pause() or <db:link xlink:href="qmovie.xml#setPaused">setPaused</db:link>(true). The current frame number it kept, and the movie will continue with the next frame when unpause() or <db:link xlink:href="qmovie.xml#setPaused">setPaused</db:link>(false) is called.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmovie.xml">QMovie</db:link></db:emphasis>::Running</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The movie is running.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMovie">
<db:title>[explicit] QMovie::QMovie(QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a <db:link xlink:href="qmovie.xml">QMovie</db:link> object, passing the <db:code role="parameter">parent</db:code> object to <db:link xlink:href="qobject.xml">QObject</db:link>'s constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmovie.xml#setFileName">setFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qmovie.xml#setDevice">setDevice</db:link>()</db:member>
<db:member><db:link xlink:href="qmovie.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QMovie-1">
<db:title>[explicit] QMovie::QMovie(QIODevice *<db:emphasis>device</db:emphasis>, const QByteArray &amp;<db:emphasis>format</db:emphasis> = QByteArray(), QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a <db:link xlink:href="qmovie.xml">QMovie</db:link> object. <db:link xlink:href="qmovie.xml">QMovie</db:link> will use read image data from <db:code role="parameter">device</db:code>, which it assumes is open and readable. If <db:code role="parameter">format</db:code> is not empty, <db:link xlink:href="qmovie.xml">QMovie</db:link> will use the image format <db:code role="parameter">format</db:code> for decoding the image data. Otherwise, <db:link xlink:href="qmovie.xml">QMovie</db:link> will attempt to guess the format.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> object is passed to <db:link xlink:href="qobject.xml">QObject</db:link>'s constructor.</db:para>
</db:section>
<db:section xml:id="QMovie-2">
<db:title>[explicit] QMovie::QMovie(const QString &amp;<db:emphasis>fileName</db:emphasis>, const QByteArray &amp;<db:emphasis>format</db:emphasis> = QByteArray(), QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a <db:link xlink:href="qmovie.xml">QMovie</db:link> object. <db:link xlink:href="qmovie.xml">QMovie</db:link> will use read image data from <db:code role="parameter">fileName</db:code>. If <db:code role="parameter">format</db:code> is not empty, <db:link xlink:href="qmovie.xml">QMovie</db:link> will use the image format <db:code role="parameter">format</db:code> for decoding the image data. Otherwise, <db:link xlink:href="qmovie.xml">QMovie</db:link> will attempt to guess the format.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> object is passed to <db:link xlink:href="qobject.xml">QObject</db:link>'s constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QMovie">
<db:title>[virtual noexcept] QMovie::~QMovie()</db:title>
<db:para>Destructs the <db:link xlink:href="qmovie.xml">QMovie</db:link> object.</db:para>
</db:section>
<db:section xml:id="backgroundColor">
<db:title>QColor QMovie::backgroundColor() const</db:title>
<db:para>Returns the background color of the movie. If no background color has been assigned, an invalid <db:link xlink:href="qcolor.xml">QColor</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmovie.xml#setBackgroundColor">setBackgroundColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentFrameNumber">
<db:title>int QMovie::currentFrameNumber() const</db:title>
<db:para>Returns the sequence number of the current frame. The number of the first frame in the movie is 0.</db:para>
</db:section>
<db:section xml:id="currentImage">
<db:title>QImage QMovie::currentImage() const</db:title>
<db:para>Returns the current frame as a <db:link xlink:href="qimage.xml">QImage</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmovie.xml#currentPixmap">currentPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qmovie.xml#updated">updated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentPixmap">
<db:title>QPixmap QMovie::currentPixmap() const</db:title>
<db:para>Returns the current frame as a <db:link xlink:href="qpixmap.xml">QPixmap</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmovie.xml#currentImage">currentImage</db:link>()</db:member>
<db:member><db:link xlink:href="qmovie.xml#updated">updated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="device">
<db:title>QIODevice *QMovie::device() const</db:title>
<db:para>Returns the device <db:link xlink:href="qmovie.xml">QMovie</db:link> reads image data from. If no device has currently been assigned, 0 is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmovie.xml#setDevice">setDevice</db:link>()</db:member>
<db:member><db:link xlink:href="qmovie.xml#fileName">fileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>void QMovie::error(QImageReader::ImageReaderError <db:emphasis>error</db:emphasis>)</db:title>
<db:para>This signal is emitted by <db:link xlink:href="qmovie.xml">QMovie</db:link> when the error <db:code role="parameter">error</db:code> occurred during playback. <db:link xlink:href="qmovie.xml">QMovie</db:link> will stop the movie, and enter <db:link xlink:href="qmovie.xml#MovieState-enum">QMovie::NotRunning</db:link> state.</db:para>
</db:section>
<db:section xml:id="fileName">
<db:title>QString QMovie::fileName() const</db:title>
<db:para>Returns the name of the file that <db:link xlink:href="qmovie.xml">QMovie</db:link> reads image data from. If no file name has been assigned, or if the assigned device is not a file, an empty <db:link xlink:href="qstring.xml">QString</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmovie.xml#setFileName">setFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qmovie.xml#device">device</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="finished">
<db:title>void QMovie::finished()</db:title>
<db:para>This signal is emitted when the movie has finished.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmovie.xml#stop">QMovie::stop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="format">
<db:title>QByteArray QMovie::format() const</db:title>
<db:para>Returns the format that <db:link xlink:href="qmovie.xml">QMovie</db:link> uses when decoding image data. If no format has been assigned, an empty QByteArray() is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmovie.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="frameChanged">
<db:title>[since 4.1] void QMovie::frameChanged(int <db:emphasis>frameNumber</db:emphasis>)</db:title>
<db:para>This signal is emitted when the frame number has changed to <db:code role="parameter">frameNumber</db:code>. You can call <db:link xlink:href="qmovie.xml#currentImage">currentImage</db:link>() or <db:link xlink:href="qmovie.xml#currentPixmap">currentPixmap</db:link>() to get a copy of the frame.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
</db:section>
<db:section xml:id="frameCount">
<db:title>int QMovie::frameCount() const</db:title>
<db:para>Returns the number of frames in the movie.</db:para>
<db:para>Certain animation formats do not support this feature, in which case 0 is returned.</db:para>
</db:section>
<db:section xml:id="frameRect">
<db:title>QRect QMovie::frameRect() const</db:title>
<db:para>Returns the rect of the last frame. If no frame has yet been updated, an invalid <db:link xlink:href="qrect.xml">QRect</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmovie.xml#currentImage">currentImage</db:link>()</db:member>
<db:member><db:link xlink:href="qmovie.xml#currentPixmap">currentPixmap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QMovie::isValid() const</db:title>
<db:para>Returns true if the movie is valid (e.g., the image data is readable and the image format is supported); otherwise returns false.</db:para>
</db:section>
<db:section xml:id="jumpToFrame">
<db:title>bool QMovie::jumpToFrame(int <db:emphasis>frameNumber</db:emphasis>)</db:title>
<db:para>Jumps to frame number <db:code role="parameter">frameNumber</db:code>. Returns true on success; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="jumpToNextFrame">
<db:title>bool QMovie::jumpToNextFrame()</db:title>
<db:para>Jumps to the next frame. Returns true on success; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="loopCount">
<db:title>int QMovie::loopCount() const</db:title>
<db:para>Returns the number of times the movie will loop before it finishes. If the movie will only play once (no looping), loopCount returns 0. If the movie loops forever, loopCount returns -1.</db:para>
<db:para>Note that, if the image data comes from a sequential device (e.g. a socket), <db:link xlink:href="qmovie.xml">QMovie</db:link> can only loop the movie if the cacheMode is set to <db:link xlink:href="qmovie.xml#CacheMode-enum">QMovie::CacheAll</db:link>.</db:para>
</db:section>
<db:section xml:id="nextFrameDelay">
<db:title>int QMovie::nextFrameDelay() const</db:title>
<db:para>Returns the number of milliseconds <db:link xlink:href="qmovie.xml">QMovie</db:link> will wait before updating the next frame in the animation.</db:para>
</db:section>
<db:section xml:id="resized">
<db:title>void QMovie::resized(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>This signal is emitted when the current frame has been resized to <db:code role="parameter">size</db:code>. This effect is sometimes used in animations as an alternative to replacing the frame. You can call <db:link xlink:href="qmovie.xml#currentImage">currentImage</db:link>() or <db:link xlink:href="qmovie.xml#currentPixmap">currentPixmap</db:link>() to get a copy of the updated frame.</db:para>
</db:section>
<db:section xml:id="scaledSize">
<db:title>[since 4.1] QSize QMovie::scaledSize()</db:title>
<db:para>Returns the scaled size of frames.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmovie.xml#setScaledSize">setScaledSize</db:link>()</db:member>
<db:member><db:link xlink:href="qimagereader.xml#scaledSize">QImageReader::scaledSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBackgroundColor">
<db:title>void QMovie::setBackgroundColor(const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:para>For image formats that support it, this function sets the background color to <db:code role="parameter">color</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmovie.xml#backgroundColor">backgroundColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDevice">
<db:title>void QMovie::setDevice(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:para>Sets the current device to <db:code role="parameter">device</db:code>. <db:link xlink:href="qmovie.xml">QMovie</db:link> will read image data from this device when the movie is running.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmovie.xml#device">device</db:link>()</db:member>
<db:member><db:link xlink:href="qmovie.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFileName">
<db:title>void QMovie::setFileName(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>Sets the name of the file that <db:link xlink:href="qmovie.xml">QMovie</db:link> reads image data from, to <db:code role="parameter">fileName</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmovie.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qmovie.xml#setDevice">setDevice</db:link>()</db:member>
<db:member><db:link xlink:href="qmovie.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFormat">
<db:title>void QMovie::setFormat(const QByteArray &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:para>Sets the format that <db:link xlink:href="qmovie.xml">QMovie</db:link> will use when decoding image data, to <db:code role="parameter">format</db:code>. By default, <db:link xlink:href="qmovie.xml">QMovie</db:link> will attempt to guess the format of the image data.</db:para>
<db:para>You can call <db:link xlink:href="qmovie.xml#supportedFormats">supportedFormats</db:link>() for the full list of formats <db:link xlink:href="qmovie.xml">QMovie</db:link> supports.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmovie.xml#format">format</db:link>()</db:member>
<db:member><db:link xlink:href="qimagereader.xml#supportedImageFormats">QImageReader::supportedImageFormats</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPaused">
<db:title>void QMovie::setPaused(bool <db:emphasis>paused</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">paused</db:code> is true, <db:link xlink:href="qmovie.xml">QMovie</db:link> will enter <db:link xlink:href="qmovie.xml#MovieState-enum">Paused</db:link> state and emit <db:link xlink:href="qmovie.xml#stateChanged">stateChanged</db:link>(Paused); otherwise it will enter <db:link xlink:href="qmovie.xml#MovieState-enum">Running</db:link> state and emit <db:link xlink:href="qmovie.xml#stateChanged">stateChanged</db:link>(Running).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmovie.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setScaledSize">
<db:title>[since 4.1] void QMovie::setScaledSize(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>Sets the scaled frame size to <db:code role="parameter">size</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmovie.xml#scaledSize">scaledSize</db:link>()</db:member>
<db:member><db:link xlink:href="qimagereader.xml#setScaledSize">QImageReader::setScaledSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start">
<db:title>void QMovie::start()</db:title>
<db:para>Starts the movie. <db:link xlink:href="qmovie.xml">QMovie</db:link> will enter <db:link xlink:href="qmovie.xml#MovieState-enum">Running</db:link> state, and start emitting <db:link xlink:href="qmovie.xml#updated">updated</db:link>() and <db:link xlink:href="qmovie.xml#resized">resized</db:link>() as the movie progresses.</db:para>
<db:para>If <db:link xlink:href="qmovie.xml">QMovie</db:link> is in the <db:link xlink:href="qmovie.xml#MovieState-enum">Paused</db:link> state, this function is equivalent to calling <db:link xlink:href="qmovie.xml#setPaused">setPaused</db:link>(false). If <db:link xlink:href="qmovie.xml">QMovie</db:link> is already in the <db:link xlink:href="qmovie.xml#MovieState-enum">Running</db:link> state, this function does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmovie.xml#stop">stop</db:link>()</db:member>
<db:member><db:link xlink:href="qmovie.xml#setPaused">setPaused</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="started">
<db:title>void QMovie::started()</db:title>
<db:para>This signal is emitted after <db:link xlink:href="qmovie.xml#start">QMovie::start</db:link>() has been called, and <db:link xlink:href="qmovie.xml">QMovie</db:link> has entered <db:link xlink:href="qmovie.xml#MovieState-enum">QMovie::Running</db:link> state.</db:para>
</db:section>
<db:section xml:id="state">
<db:title>QMovie::MovieState QMovie::state() const</db:title>
<db:para>Returns the current state of <db:link xlink:href="qmovie.xml">QMovie</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmovie.xml#MovieState-enum">MovieState</db:link></db:member>
<db:member><db:link xlink:href="qmovie.xml#stateChanged">stateChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QMovie::stateChanged(QMovie::MovieState <db:emphasis>state</db:emphasis>)</db:title>
<db:para>This signal is emitted every time the state of the movie changes. The new state is specified by <db:code role="parameter">state</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmovie.xml#state">QMovie::state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stop">
<db:title>void QMovie::stop()</db:title>
<db:para>Stops the movie. <db:link xlink:href="qmovie.xml">QMovie</db:link> enters <db:link xlink:href="qmovie.xml#MovieState-enum">NotRunning</db:link> state, and stops emitting <db:link xlink:href="qmovie.xml#updated">updated</db:link>() and <db:link xlink:href="qmovie.xml#resized">resized</db:link>(). If <db:link xlink:href="qmovie.xml#start">start</db:link>() is called again, the movie will restart from the beginning.</db:para>
<db:para>If <db:link xlink:href="qmovie.xml">QMovie</db:link> is already in the <db:link xlink:href="qmovie.xml#MovieState-enum">NotRunning</db:link> state, this function does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmovie.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qmovie.xml#setPaused">setPaused</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedFormats">
<db:title>[static, since 4.1] QList&lt;QByteArray&gt; QMovie::supportedFormats()</db:title>
<db:para>Returns the list of image formats supported by <db:link xlink:href="qmovie.xml">QMovie</db:link>.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimagereader.xml#supportedImageFormats">QImageReader::supportedImageFormats</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updated">
<db:title>void QMovie::updated(const QRect &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:para>This signal is emitted when the rect <db:code role="parameter">rect</db:code> in the current frame has been updated. You can call <db:link xlink:href="qmovie.xml#currentImage">currentImage</db:link>() or <db:link xlink:href="qmovie.xml#currentPixmap">currentPixmap</db:link>() to get a copy of the updated frame.</db:para>
</db:section>
</db:section>
</db:article>
