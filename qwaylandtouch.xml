<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWaylandTouch Class</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwaylandtouch.xml">QWaylandTouch</db:link> class provides access to a touch device.</db:para>
<db:para>This class was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWaylandTouch</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Waylandcompositor)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Waylandcompositor)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += waylandcompositor</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class provides access to the touch device in a <db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link>. It corresponds to the Wayland interface wl_touch.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWaylandTouch">
<db:title>QWaylandTouch::QWaylandTouch(QWaylandSeat *<db:emphasis>seat</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QWaylandTouch</db:methodname>
<db:methodparam>
<db:type>QWaylandSeat *</db:type>
<db:parameter>seat</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandTouch(QWaylandSeat *seat, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qwaylandtouch.xml">QWaylandTouch</db:link> for the <db:code role="parameter">seat</db:code> and with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="compositor">
<db:title>QWaylandCompositor *QWaylandTouch::compositor() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWaylandCompositor *</db:type>
<db:methodname>compositor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandCompositor * compositor() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the compositor for this <db:link xlink:href="qwaylandtouch.xml">QWaylandTouch</db:link>.</db:para>
</db:section>
<db:section xml:id="seat">
<db:title>QWaylandSeat *QWaylandTouch::seat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWaylandSeat *</db:type>
<db:methodname>seat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandSeat * seat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the input device for this <db:link xlink:href="qwaylandtouch.xml">QWaylandTouch</db:link>.</db:para>
</db:section>
<db:section xml:id="sendCancelEvent">
<db:title>[virtual] void QWaylandTouch::sendCancelEvent(QWaylandClient *<db:emphasis>client</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>sendCancelEvent</db:methodname>
<db:methodparam>
<db:type>QWaylandClient *</db:type>
<db:parameter>client</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sendCancelEvent(QWaylandClient *client)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a touch cancel event to the touch device of a <db:code role="parameter">client</db:code>.</db:para>
</db:section>
<db:section xml:id="sendFrameEvent">
<db:title>[virtual] void QWaylandTouch::sendFrameEvent(QWaylandClient *<db:emphasis>client</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>sendFrameEvent</db:methodname>
<db:methodparam>
<db:type>QWaylandClient *</db:type>
<db:parameter>client</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sendFrameEvent(QWaylandClient *client)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a touch frame event to the touch device of a <db:code role="parameter">client</db:code>. This indicates the end of a contact point list.</db:para>
</db:section>
<db:section xml:id="sendFullTouchEvent">
<db:title>[virtual] void QWaylandTouch::sendFullTouchEvent(QWaylandSurface *<db:emphasis>surface</db:emphasis>, QTouchEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>sendFullTouchEvent</db:methodname>
<db:methodparam>
<db:type>QWaylandSurface *</db:type>
<db:parameter>surface</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTouchEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sendFullTouchEvent(QWaylandSurface *surface, QTouchEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends all touch points in <db:code role="parameter">event</db:code> to the specified <db:code role="parameter">surface</db:code>, followed by a touch frame event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwaylandtouch.xml#sendTouchPointEvent">sendTouchPointEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qwaylandtouch.xml#sendFrameEvent">sendFrameEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sendTouchPointEvent">
<db:title>[virtual] uint QWaylandTouch::sendTouchPointEvent(QWaylandSurface *<db:emphasis>surface</db:emphasis>, int <db:emphasis>id</db:emphasis>, const QPointF &amp;<db:emphasis>position</db:emphasis>, Qt::TouchPointState <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>uint</db:type>
<db:methodname>sendTouchPointEvent</db:methodname>
<db:methodparam>
<db:type>QWaylandSurface *</db:type>
<db:parameter>surface</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TouchPointState</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint sendTouchPointEvent(QWaylandSurface *surface, int id, const QPointF &amp;position, Qt::TouchPointState state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a touch point event to the touch device of <db:code role="parameter">surface</db:code> with the given <db:code role="parameter">id</db:code>, <db:code role="parameter">position</db:code>, and <db:code role="parameter">state</db:code>.</db:para>
<db:para>Returns the serial of the down or up event if sent, otherwise 0.</db:para>
</db:section>
</db:section>
</db:article>
