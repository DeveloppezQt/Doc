<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Balsam Asset Import Tool</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Command line tool for importing assets for use with Qt Quick 3D.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Balsam tool is a command line application that is part of Qt Quick 3D's asset conditioning pipeline. The purpose is to take assets created in digital content creation tools like <db:link xlink:href="https://www.autodesk.com/products/maya/overview">Maya</db:link>, <db:link xlink:href="https://www.autodesk.com/products/3ds-max/overview">3ds Max</db:link>, or <db:link xlink:href="https://www.blender.org/">Blender</db:link> and convert them into an efficient runtime format for use with Qt Quick 3D. It is not possible, nor does it make sense to reference the interchange formats directly in applications because a large amount of resources are needed to parse and condition the content of the asset before it is usable for realtime rendering. Instead the interchange formats can be converted via the Balsam tool into QML Components and resources like geometry and textures.</db:para>
<db:para>Usage:</db:para>
<db:programlisting language="cpp">balsam [options] sourceFilename
</db:programlisting>
<db:section xml:id="example-usage">
<db:title>Example Usage</db:title>
<db:para>To convert a 3D asset contained in the file <db:code>testModel.fbx</db:code> with <db:code>balsam</db:code> the following command would be used:</db:para>
<db:programlisting language="cpp">balsam testModel.fbx
</db:programlisting>
<db:para>This would generate the following files:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>meshes/testModel.mesh</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>TestModel.qml</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Which can then be used in a Qt Quick 3D project by using that QML Component:</db:para>
<db:programlisting language="cpp">import QtQuick3D

TestModel {
   id: modelInstance
}
</db:programlisting>
</db:section>
<db:section xml:id="supported-3d-asset-types">
<db:title>Supported 3D Asset Types</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Wavefront (.obj)</db:para>
</db:listitem>
<db:listitem>
<db:para>COLLADA (.dae)</db:para>
</db:listitem>
<db:listitem>
<db:para>FBX (.fbx)</db:para>
</db:listitem>
<db:listitem>
<db:para>STL (.stl)</db:para>
</db:listitem>
<db:listitem>
<db:para>PLY (.ply)</db:para>
</db:listitem>
<db:listitem>
<db:para>GLTF2 (.gltf, .glb)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Some of the formats supported also allow for either embedding or referencing of texture assets. These assets are also supported, provided Qt also has support for them.</db:para>
</db:section>
<db:section xml:id="baking-for-image-based-lighting">
<db:title>Baking for Image-Based Lighting</db:title>
<db:para>Balsam also supports generating a pre-filtered cubemap image from .hdr files. Specifying a file with .hdr extension as the input results in generating a file with the same name but with an extension of .ktx. The application can then ship the resulting .ktx file and reference that from the <db:link xlink:href="qml-qtquick3d-texture.xml">Texture</db:link> associated with <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#lightProbe-prop">SceneEnvironment::lightProbe</db:link>. This avoids the costly runtime processing that is necessary for image-based lighting. See <db:link xlink:href="quick3d-asset-conditioning-ibl.xml#pre-generating-ibl-cubemap">Pre-generating IBL cubemap</db:link> for more details.</db:para>
</db:section>
<db:section xml:id="supported-options">
<db:title>Supported Options</db:title>
<db:para>The following table lists the command-line options recognized by <db:code>balsam</db:code> when converting asset files:</db:para>
<db:note>
<db:para>For each boolean option it is possible to use <db:code>--disable-&lt;option-name&gt;</db:code>.</db:para>
</db:note>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>--outputPath, -o &lt;outputPath&gt;</db:code></db:para>
</db:td>
<db:td>
<db:para>Sets the location to place the generated file(s). Default is the current directory.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--calculateTangentSpace</db:code></db:para>
</db:td>
<db:td>
<db:para>Calculates the tangents and bitangents for the imported meshes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--joinIdenticalVertices</db:code></db:para>
</db:td>
<db:td>
<db:para>Identifies and joins identical vertex data sets within all imported meshes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--generateNormals</db:code></db:para>
</db:td>
<db:td>
<db:para>Generates normals for all faces of all meshes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--generateSmoothNormals</db:code></db:para>
</db:td>
<db:td>
<db:para>Generates smooth normals for all vertices in the mesh.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--splitLargeMeshes</db:code></db:para>
</db:td>
<db:td>
<db:para>Splits large meshes into smaller sub-meshes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--preTransformVertices</db:code></db:para>
</db:td>
<db:td>
<db:para>Removes the node graph and pre-transforms all vertices with the local transformation matrices of their nodes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--improveCacheLocality</db:code></db:para>
</db:td>
<db:td>
<db:para>Reorders triangles for better vertex cache locality.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--removeRedundantMaterials</db:code></db:para>
</db:td>
<db:td>
<db:para>Searches for redundant/unreferenced materials and removes them.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--fixInfacingNormals</db:code></db:para>
</db:td>
<db:td>
<db:para>Tries to determine which meshes have normal vectors that are facing inwards and inverts them.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--findDegenerates</db:code></db:para>
</db:td>
<db:td>
<db:para>This step searches all meshes for degenerate primitives and converts them to proper lines or points.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--findInvalidData</db:code></db:para>
</db:td>
<db:td>
<db:para>This step searches all meshes for invalid data, such as zeroed normal vectors or invalid UV coords and removes/fixes them. This is intended to get rid of some common exporter errors.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--transformUVCoordinates</db:code></db:para>
</db:td>
<db:td>
<db:para>This step applies per-texture UV transformations and bakes them into stand-alone texture coordinate channels.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--findInstances</db:code></db:para>
</db:td>
<db:td>
<db:para>This step searches for duplicate meshes and replaces them with references to the first mesh.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--optimizeMeshes</db:code></db:para>
</db:td>
<db:td>
<db:para>A postprocessing step to reduce the number of meshes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--optimizeGraph</db:code></db:para>
</db:td>
<db:td>
<db:para>A postprocessing step to optimize the scene hierarchy.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--useFloatJointIndices</db:code></db:para>
</db:td>
<db:td>
<db:para>Stores joint indices as floating point numbers for GLES 2.0.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--globalScale</db:code></db:para>
</db:td>
<db:td>
<db:para>This step will perform a global scale of the model.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--globalScaleValue &lt;value&gt;</db:code></db:para>
</db:td>
<db:td>
<db:para>Global Scale factor used by <db:code>--globalScale</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--dropNormals</db:code></db:para>
</db:td>
<db:td>
<db:para>Drops normals for all faces of all meshes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--removeComponentNormals</db:code></db:para>
</db:td>
<db:td>
<db:para>Removes Normal component from meshes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--removeComponentTangentsAndBitangents</db:code></db:para>
</db:td>
<db:td>
<db:para>Removes Tangents and Bitangents components from meshes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--removeComponentColors</db:code></db:para>
</db:td>
<db:td>
<db:para>Removes any Color components from meshes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--removeComponentUVs</db:code></db:para>
</db:td>
<db:td>
<db:para>Removes any UV components from meshes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--removeComponentBoneWeights</db:code></db:para>
</db:td>
<db:td>
<db:para>Removes any bone weights from meshes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--removeComponentAnimations</db:code></db:para>
</db:td>
<db:td>
<db:para>Removes any animation components from meshes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--removeComponentTextures</db:code></db:para>
</db:td>
<db:td>
<db:para>Removes any embedded texture components from meshes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--fbxPreservePivots</db:code></db:para>
</db:td>
<db:td>
<db:para>Preserves extra pivot nodes created by FBX assets (can create deep node hierarchies)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--generateMipMaps</db:code></db:para>
</db:td>
<db:td>
<db:para>Force all imported texture components to generate mip maps for mip map texture filtering</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--useBinaryKeyframes</db:code></db:para>
</db:td>
<db:td>
<db:para>Record keyframe data as binary files</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--generateLightmapUV</db:code></db:para>
</db:td>
<db:td>
<db:para>Perform lightmap UV unwrapping and generate an additional UV channel for the meshes. This UV data is then used by the <db:link xlink:href="quick3d-lightmap.xml">lightmap baker and during run-time lightmapping</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--generateMeshLevelsOfDetail</db:code></db:para>
</db:td>
<db:td>
<db:para>When possible create mesh Levels of Detail by automatically simplifying the source mesh.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--recalculateLodNormals</db:code></db:para>
</db:td>
<db:td>
<db:para>Calculate new normals when necessary for Generated Mesh levels of detail.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--recalculateLodNormalsMergeAngle &lt;value&gt;</db:code></db:para>
</db:td>
<db:td>
<db:para>Maximum angle in degrees to consider for normal smoothing/merging when recalculating normals for Generated Mesh levels of detail.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--recalculateLodNormalsSplitAngle &lt;value&gt;</db:code></db:para>
</db:td>
<db:td>
<db:para>Maximum angle in degrees to consider for normal spliting when recalculating normals for Generated Mesh levels of detail.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:article>
