<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNetworkConfigurationManager Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnetworkconfigurationmanager.xml">QNetworkConfigurationManager</db:link> class manages the network configurations provided by the system.</db:para>
<db:para>This class was introduced in Qt 4.7.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNetworkConfigurationManager</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNetworkConfigurationManager is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qnetworkconfigurationmanager.xml">QNetworkConfigurationManager</db:link> provides access to the network configurations known to the system and enables applications to detect the system capabilities (with regards to network sessions) at runtime.</db:para>
<db:para>A <db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link> abstracts a set of configuration options describing how a network interface has to be configured to connect to a particular target network. <db:link xlink:href="qnetworkconfigurationmanager.xml">QNetworkConfigurationManager</db:link> maintains and updates the global list of QNetworkConfigurations. Applications can access and filter this list via <db:link xlink:href="qnetworkconfigurationmanager.xml#allConfigurations">allConfigurations</db:link>(). If a new configuration is added or an existing one is removed or changed the <db:link xlink:href="qnetworkconfigurationmanager.xml#configurationAdded">configurationAdded</db:link>(), <db:link xlink:href="qnetworkconfigurationmanager.xml#configurationRemoved">configurationRemoved</db:link>() and <db:link xlink:href="qnetworkconfigurationmanager.xml#configurationChanged">configurationChanged</db:link>() signals are emitted respectively.</db:para>
<db:para>The <db:link xlink:href="qnetworkconfigurationmanager.xml#defaultConfiguration">defaultConfiguration</db:link>() can be used when intending to immediately create a new network session without caring about the particular configuration. It returns a <db:link xlink:href="qnetworkconfiguration.xml#StateFlag-enum">QNetworkConfiguration::Discovered</db:link> configuration. If there are not any discovered ones an invalid configuration is returned.</db:para>
<db:para>Some configuration updates may require some time to perform updates. A WLAN scan is such an example. Unless the platform performs internal updates it may be required to manually trigger configuration updates via <db:link xlink:href="qnetworkconfigurationmanager.xml#updateConfigurations">QNetworkConfigurationManager::updateConfigurations</db:link>(). The completion of the update process is indicated by emitting the <db:link xlink:href="qnetworkconfigurationmanager.xml#updateCompleted">updateCompleted</db:link>() signal. The update process ensures that every existing <db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link> instance is updated. There is no need to ask for a renewed configuration list via <db:link xlink:href="qnetworkconfigurationmanager.xml#allConfigurations">allConfigurations</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Capability-enum">
<db:title>enum QNetworkConfigurationManager::Capability</db:title>
<db:bridgehead renderas="sect2">flags QNetworkConfigurationManager::Capabilities</db:bridgehead>
<db:para>Specifies the system capabilities of the bearer API. The possible values are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfigurationmanager.xml">QNetworkConfigurationManager</db:link></db:emphasis>::CanStartAndStopInterfaces</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>Network sessions and their underlying access points can be started and stopped. If this flag is not set <db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link> can only monitor but not influence the state of access points. On some platforms this feature may require elevated user permissions. This option is platform specific and may not always be available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfigurationmanager.xml">QNetworkConfigurationManager</db:link></db:emphasis>::DirectConnectionRouting</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>Network sessions and their sockets can be bound to a particular network interface. Any packet that passes through the socket goes to the specified network interface and thus disregards standard routing table entries. This may be useful when two interfaces can reach overlapping IP ranges or an application has specific needs in regards to target networks. This option is platform specific and may not always be available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfigurationmanager.xml">QNetworkConfigurationManager</db:link></db:emphasis>::SystemSessionSupport</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>If this flag is set the underlying platform ensures that a network interface is not shut down until the last network session has been <db:link xlink:href="qnetworksession.xml#close">closed</db:link>(). This works across multiple processes. If the platform session support is missing this API can only ensure the above behavior for network sessions within the same process. In general mobile platforms have such support whereas most desktop platform lack this capability.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfigurationmanager.xml">QNetworkConfigurationManager</db:link></db:emphasis>::ApplicationLevelRoaming</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
<db:td>
<db:para>The system gives applications control over the systems roaming behavior. Applications can initiate roaming (in case the current link is not suitable) and are consulted if the system has identified a more suitable access point.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfigurationmanager.xml">QNetworkConfigurationManager</db:link></db:emphasis>::ForcedRoaming</db:code></db:para>
</db:td>
<db:td><db:code>0x00000010</db:code></db:td>
<db:td>
<db:para>The system disconnects an existing access point and reconnects via a more suitable one. The application does not have any control over this process and has to reconnect its active sockets.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfigurationmanager.xml">QNetworkConfigurationManager</db:link></db:emphasis>::DataStatistics</db:code></db:para>
</db:td>
<db:td><db:code>0x00000020</db:code></db:td>
<db:td>
<db:para>If this flag is set <db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link> can provide statistics about transmitted and received data.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkconfigurationmanager.xml">QNetworkConfigurationManager</db:link></db:emphasis>::NetworkSessionRequired</db:code></db:para>
</db:td>
<db:td><db:code>0x00000040</db:code></db:td>
<db:td>
<db:para>If this flag is set the platform requires that a network session is created before network operations can be performed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Capabilities</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Capability&gt;. </db:code>It stores an OR combination of <db:code>Capability</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNetworkConfigurationManager">
<db:title>[explicit] QNetworkConfigurationManager::QNetworkConfigurationManager(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qnetworkconfigurationmanager.xml">QNetworkConfigurationManager</db:link> with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Note that to ensure a valid list of current configurations immediately available, updating is done during construction which causes some delay.</db:para>
</db:section>
<db:section xml:id="dtor.QNetworkConfigurationManager">
<db:title>[virtual noexcept] QNetworkConfigurationManager::~QNetworkConfigurationManager()</db:title>
<db:para>Frees the resources associated with the <db:link xlink:href="qnetworkconfigurationmanager.xml">QNetworkConfigurationManager</db:link> object.</db:para>
</db:section>
<db:section xml:id="allConfigurations">
<db:title>QList&lt;QNetworkConfiguration&gt; QNetworkConfigurationManager::allConfigurations(QNetworkConfiguration::StateFlags <db:emphasis>filter</db:emphasis> = QNetworkConfiguration::StateFlags()) const</db:title>
<db:para>Returns the list of configurations which comply with the given <db:code role="parameter">filter</db:code>.</db:para>
<db:para>By default this function returns all (defined and undefined) configurations.</db:para>
<db:para>A wireless network with a particular SSID may only be accessible in a certain area despite the fact that the system has a valid configuration for it. Therefore the filter flag may be used to limit the list to discovered and possibly connected configurations only.</db:para>
<db:para>If <db:code role="parameter">filter</db:code> is set to zero this function returns all possible configurations.</db:para>
<db:para>Note that this function returns the states for all configurations as they are known at the time of this function call. If for instance a configuration of type WLAN is defined the system may have to perform a WLAN scan in order to determine whether it is actually available. To obtain the most accurate state <db:link xlink:href="qnetworkconfigurationmanager.xml#updateConfigurations">updateConfigurations</db:link>() should be used to update each configuration's state. Note that such an update may require some time. It's completion is signalled by <db:link xlink:href="qnetworkconfigurationmanager.xml#updateCompleted">updateCompleted</db:link>(). In the absence of a configuration update this function returns the best estimate at the time of the call. Therefore, if WLAN configurations are of interest, it is recommended that <db:link xlink:href="qnetworkconfigurationmanager.xml#updateConfigurations">updateConfigurations</db:link>() is called once after <db:link xlink:href="qnetworkconfigurationmanager.xml">QNetworkConfigurationManager</db:link> instantiation (WLAN scans are too time consuming to perform in constructor). After this the data is kept automatically up-to-date as the system reports any changes.</db:para>
</db:section>
<db:section xml:id="capabilities">
<db:title>QNetworkConfigurationManager::Capabilities QNetworkConfigurationManager::capabilities() const</db:title>
<db:para>Returns the capabilities supported by the current platform.</db:para>
</db:section>
<db:section xml:id="configurationAdded">
<db:title>void QNetworkConfigurationManager::configurationAdded(const QNetworkConfiguration &amp;<db:emphasis>config</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a new network configuration is added to the system. The new configuration is specified by <db:code role="parameter">config</db:code>.</db:para>
</db:section>
<db:section xml:id="configurationChanged">
<db:title>void QNetworkConfigurationManager::configurationChanged(const QNetworkConfiguration &amp;<db:emphasis>config</db:emphasis>)</db:title>
<db:para>This signal is emitted when the <db:link xlink:href="qnetworkconfiguration.xml#state">state</db:link> of <db:code role="parameter">config</db:code> changes.</db:para>
</db:section>
<db:section xml:id="configurationFromIdentifier">
<db:title>QNetworkConfiguration QNetworkConfigurationManager::configurationFromIdentifier(const QString &amp;<db:emphasis>identifier</db:emphasis>) const</db:title>
<db:para>Returns the <db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link> for <db:code role="parameter">identifier</db:code>; otherwise returns an invalid <db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkconfiguration.xml#identifier">QNetworkConfiguration::identifier</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="configurationRemoved">
<db:title>void QNetworkConfigurationManager::configurationRemoved(const QNetworkConfiguration &amp;<db:emphasis>config</db:emphasis>)</db:title>
<db:para>This signal is emitted when a configuration is about to be removed from the system. The removed configuration, specified by <db:code role="parameter">config</db:code>, is invalid but retains name and identifier.</db:para>
</db:section>
<db:section xml:id="defaultConfiguration">
<db:title>QNetworkConfiguration QNetworkConfigurationManager::defaultConfiguration() const</db:title>
<db:para>Returns the default configuration to be used. This function always returns a discovered configuration; otherwise an invalid configuration.</db:para>
<db:para>In some cases it may be required to call <db:link xlink:href="qnetworkconfigurationmanager.xml#updateConfigurations">updateConfigurations</db:link>() and wait for the <db:link xlink:href="qnetworkconfigurationmanager.xml#updateCompleted">updateCompleted</db:link>() signal before calling this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkconfigurationmanager.xml#allConfigurations">allConfigurations</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isOnline">
<db:title>bool QNetworkConfigurationManager::isOnline() const</db:title>
<db:para>Returns true if the system is considered to be connected to another device via an active network interface; otherwise returns false.</db:para>
<db:para>This is equivalent to the following code snippet:</db:para>
<db:programlisting language="cpp">QNetworkConfigurationManager mgr;
QList&lt;QNetworkConfiguration&gt; activeConfigs = mgr.allConfigurations(QNetworkConfiguration::Active);
if (activeConfigs.count() &gt; 0)
    Q_ASSERT(mgr.isOnline());
else
    Q_ASSERT(!mgr.isOnline());
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkconfigurationmanager.xml#onlineStateChanged">onlineStateChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="onlineStateChanged">
<db:title>void QNetworkConfigurationManager::onlineStateChanged(bool <db:emphasis>isOnline</db:emphasis>)</db:title>
<db:para>This signal is emitted when the device changes from online to offline mode or vice versa. <db:code role="parameter">isOnline</db:code> represents the new state of the device.</db:para>
<db:para>The state is considered to be online for as long as <db:link xlink:href="qnetworkconfigurationmanager.xml#allConfigurations">allConfigurations</db:link>(<db:link xlink:href="qnetworkconfiguration.xml#StateFlag-enum">QNetworkConfiguration::Active</db:link>) returns a list with at least one entry.</db:para>
</db:section>
<db:section xml:id="updateCompleted">
<db:title>void QNetworkConfigurationManager::updateCompleted()</db:title>
<db:para>This signal is emitted when the configuration update has been completed. Such an update can be initiated via <db:link xlink:href="qnetworkconfigurationmanager.xml#updateConfigurations">updateConfigurations</db:link>().</db:para>
</db:section>
<db:section xml:id="updateConfigurations">
<db:title>void QNetworkConfigurationManager::updateConfigurations()</db:title>
<db:para>Initiates an update of all configurations. This may be used to initiate WLAN scans or other time consuming updates which may be required to obtain the correct state for configurations.</db:para>
<db:para>This call is asynchronous. On completion of this update the <db:link xlink:href="qnetworkconfigurationmanager.xml#updateCompleted">updateCompleted</db:link>() signal is emitted. If new configurations are discovered or old ones were removed or changed the update process may trigger the emission of one or multiple <db:link xlink:href="qnetworkconfigurationmanager.xml#configurationAdded">configurationAdded</db:link>(), <db:link xlink:href="qnetworkconfigurationmanager.xml#configurationRemoved">configurationRemoved</db:link>() and <db:link xlink:href="qnetworkconfigurationmanager.xml#configurationChanged">configurationChanged</db:link>() signals.</db:para>
<db:para>If a configuration state changes as a result of this update all existing <db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link> instances are updated automatically.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkconfigurationmanager.xml#allConfigurations">allConfigurations</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
