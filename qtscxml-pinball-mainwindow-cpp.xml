<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt SCXML Pinball Example</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Scxml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Encapsulates the internal logic of an application in an SCXML file.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtScxml module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;mainwindow.h&quot;
#include &quot;ui_mainwindow.h&quot;

#include &lt;QStringListModel&gt;
#include &quot;pinball.h&quot;

QT_USE_NAMESPACE

MainWindow::MainWindow(Pinball *machine, QWidget *parent) :
    QWidget(parent),
    m_ui(new Ui::MainWindow),
    m_machine(machine)
{
    m_ui-&gt;setupUi(this);

    // lights
    initAndConnect(QLatin1String(&quot;cLightOn&quot;), m_ui-&gt;cLabel);
    initAndConnect(QLatin1String(&quot;rLightOn&quot;), m_ui-&gt;rLabel);
    initAndConnect(QLatin1String(&quot;aLightOn&quot;), m_ui-&gt;aLabel);
    initAndConnect(QLatin1String(&quot;zLightOn&quot;), m_ui-&gt;zLabel);
    initAndConnect(QLatin1String(&quot;yLightOn&quot;), m_ui-&gt;yLabel);
    initAndConnect(QLatin1String(&quot;hurryLightOn&quot;), m_ui-&gt;hurryLabel);
    initAndConnect(QLatin1String(&quot;jackpotLightOn&quot;), m_ui-&gt;jackpotLabel);
    initAndConnect(QLatin1String(&quot;gameOverLightOn&quot;), m_ui-&gt;gameOverLabel);

    // help labels
    initAndConnect(QLatin1String(&quot;offState&quot;), m_ui-&gt;offStateLabel);
    initAndConnect(QLatin1String(&quot;hurryStateOff&quot;), m_ui-&gt;normalStateLabel);
    initAndConnect(QLatin1String(&quot;hurryStateOn&quot;), m_ui-&gt;hurryStateLabel);
    initAndConnect(QLatin1String(&quot;jackpotStateOn&quot;), m_ui-&gt;jackpotStateLabel);

    // context enablement
    initAndConnect(QLatin1String(&quot;offState&quot;), m_ui-&gt;startButton);
    initAndConnect(QLatin1String(&quot;onState&quot;), m_ui-&gt;cButton);
    initAndConnect(QLatin1String(&quot;onState&quot;), m_ui-&gt;rButton);
    initAndConnect(QLatin1String(&quot;onState&quot;), m_ui-&gt;aButton);
    initAndConnect(QLatin1String(&quot;onState&quot;), m_ui-&gt;zButton);
    initAndConnect(QLatin1String(&quot;onState&quot;), m_ui-&gt;yButton);
    initAndConnect(QLatin1String(&quot;onState&quot;), m_ui-&gt;ballOutButton);

    // datamodel update
    connect(m_machine, SIGNAL(eventOccurred(const QScxmlEvent &amp;)),
            this, SLOT(eventOccurred(const QScxmlEvent &amp;)));

    // gui interaction
    connect(m_ui-&gt;cButton, &amp;QAbstractButton::clicked,
            [this] { m_machine-&gt;submitEvent(&quot;cLetterTriggered&quot;);
            });
    connect(m_ui-&gt;rButton, &amp;QAbstractButton::clicked,
            [this] { m_machine-&gt;submitEvent(&quot;rLetterTriggered&quot;);
            });
    connect(m_ui-&gt;aButton, &amp;QAbstractButton::clicked,
            [this] { m_machine-&gt;submitEvent(&quot;aLetterTriggered&quot;);
            });
    connect(m_ui-&gt;zButton, &amp;QAbstractButton::clicked,
            [this] { m_machine-&gt;submitEvent(&quot;zLetterTriggered&quot;);
            });
    connect(m_ui-&gt;yButton, &amp;QAbstractButton::clicked,
            [this] { m_machine-&gt;submitEvent(&quot;yLetterTriggered&quot;);
            });
    connect(m_ui-&gt;startButton, &amp;QAbstractButton::clicked,
            [this] { m_machine-&gt;submitEvent(&quot;startTriggered&quot;);
            });
    connect(m_ui-&gt;ballOutButton, &amp;QAbstractButton::clicked,
            [this] { m_machine-&gt;submitEvent(&quot;ballOutTriggered&quot;);
            });
}

MainWindow::~MainWindow()
{
    delete m_ui;
}

void MainWindow::initAndConnect(const QString &amp;state, QWidget *widget)
{
    widget-&gt;setEnabled(m_machine-&gt;isActive(state));
    m_machine-&gt;connectToState(state, widget, SLOT(setEnabled(bool)));
}

void MainWindow::eventOccurred(const QScxmlEvent &amp;event)
{
    if (event.originType() != QLatin1String(&quot;qt:signal&quot;))
        return;

    if (event.name() != QLatin1String(&quot;updateScore&quot;))
        return;

    const QVariant data = event.data();
    const QString highScore = data.toMap().value(&quot;highScore&quot;).toString();
    m_ui-&gt;highScoreLabel-&gt;setText(highScore);
    const QString score = data.toMap().value(&quot;score&quot;).toString();
    m_ui-&gt;scoreLabel-&gt;setText(score);
}

</db:programlisting>
</db:article>
