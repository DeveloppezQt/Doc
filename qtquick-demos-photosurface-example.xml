<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Demo - Photo Surface</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A QML app for touch devices that uses a Repeater with a <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link> to access content in a folder, and a <db:link xlink:href="qml-qtquick-pincharea.xml">PinchArea</db:link> that contains a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> to handle pinch gestures on the fetched content.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquick-demo-photosurface-small.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Photo Surface</db:emphasis> demonstrates how to use a <db:link xlink:href="qml-qtquick-repeater.xml">Repeater</db:link> with a <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link> and a <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml">FileDialog</db:link> to access images from a folder selected by a user and how to handle dragging, rotation and pinch zooming within the same item using a <db:link xlink:href="qml-qtquick-pincharea.xml">PinchArea</db:link> that contains a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>.</db:para>
<db:para>All the app code is contained in one QML file, photosurface.qml. Inline JavaScript code is used to place, rotate, and scale images on the photo surface.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-the-main-window">
<db:title>Creating the Main Window</db:title>
<db:para>To create the main window for the Photo Surface app, we use the <db:link xlink:href="qml-qtquick-window-window.xml">Window</db:link> QML type as the root item. It automatically sets up the window for use with <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> graphical types:</db:para>
<db:programlisting language="cpp">Window {
    id: root
    visible: true
    width: 1024; height: 600
    color: &quot;black&quot;
    property int highestZ: 0
    property real defaultSize: 200
    property var currentFrame: undefined
</db:programlisting>
<db:para>To use the <db:link xlink:href="qml-qtquick-window-window.xml">Window</db:link> type, we must import it:</db:para>
<db:programlisting language="cpp">import QtQuick.Window 2.1
</db:programlisting>
</db:section>
<db:section xml:id="accessing-folder-contents">
<db:title>Accessing Folder Contents</db:title>
<db:para>We use a <db:link xlink:href="qml-qtquick-repeater.xml">Repeater</db:link> QML type together with the <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link> to display GIF, JPG, and PNG images located in a folder:</db:para>
<db:programlisting language="cpp">        Repeater {
            model: FolderListModel {
                id: folderModel
                objectName: &quot;folderModel&quot;
                showDirs: false
                nameFilters: imageNameFilters
            }
</db:programlisting>
<db:para>To use the <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link> type, we must import it:</db:para>
<db:programlisting language="cpp">import Qt.labs.folderlistmodel 1.0
</db:programlisting>
<db:para>We use a <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml">FileDialog</db:link> to enable users to select the folder that contains the images:</db:para>
<db:programlisting language="cpp">    FileDialog {
        id: fileDialog
        title: &quot;Choose a folder with some images&quot;
        selectFolder: true
        folder: picturesLocation
        onAccepted: folderModel.folder = fileUrl + &quot;/&quot;
    }

</db:programlisting>
<db:para>To use the <db:link xlink:href="qml-qtquick-dialogs-filedialog.xml">FileDialog</db:link> type, we must import <db:link xlink:href="qtquickdialogs-index.xml">Qt Quick Dialogs</db:link>:</db:para>
<db:programlisting language="cpp">import QtQuick.Dialogs 1.0
</db:programlisting>
<db:para>We use the <db:code>fileDialog.open()</db:code> function to open the file dialog when the app starts:</db:para>
<db:programlisting language="cpp">Component.onCompleted: fileDialog.open()
</db:programlisting>
<db:para>Users can also click the file dialog icon to open the file dialog. We use an <db:link xlink:href="qml-qtquick-image.xml">Image</db:link> QML type to display the icon. Inside the <db:link xlink:href="qml-qtquick-image.xml">Image</db:link> type, we use a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> with the <db:code>onClicked</db:code> signal handler to call the <db:code>fileDialog.open()</db:code> function:</db:para>
<db:programlisting language="cpp">    Image {
        anchors.top: parent.top
        anchors.left: parent.left
        anchors.margins: 10
        source: &quot;resources/folder.png&quot;
        MouseArea {
            anchors.fill: parent
            anchors.margins: -10
            onClicked: fileDialog.open()
            hoverEnabled: true
            onPositionChanged: {
                tooltip.visible = false
                hoverTimer.start()
            }
            onExited: {
                tooltip.visible = false
                hoverTimer.stop()
            }
</db:programlisting>
</db:section>
<db:section xml:id="displaying-images-on-the-photo-surface">
<db:title>Displaying Images on the Photo Surface</db:title>
<db:para>We use a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> as a delegate for a <db:link xlink:href="qml-qtquick-repeater.xml">Repeater</db:link> to provide a frame for each image that the <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link> finds in the selected folder. We use JavaScript <db:code>Math()</db:code> methods to place the frames randomly on the photo surface and to rotate them at random angles, as well as to scale the images:</db:para>
<db:programlisting language="cpp">            Rectangle {
                id: photoFrame
                width: image.width * (1 + 0.10 * image.height / image.width)
                height: image.height * 1.10
                scale: defaultSize / Math.max(image.sourceSize.width, image.sourceSize.height)
                Behavior on scale { NumberAnimation { duration: 200 } }
                Behavior on x { NumberAnimation { duration: 200 } }
                Behavior on y { NumberAnimation { duration: 200 } }
                border.color: &quot;black&quot;
                border.width: 2
                smooth: true
                antialiasing: true
                Component.onCompleted: {
                    x = Math.random() * root.width - width / 2
                    y = Math.random() * root.height - height / 2
                    rotation = Math.random() * 13 - 6
                }
</db:programlisting>
</db:section>
<db:section xml:id="handling-pinch-gestures">
<db:title>Handling Pinch Gestures</db:title>
<db:para>We use a <db:link xlink:href="qml-qtquick-pincharea.xml">PinchArea</db:link> that contains a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> in the photo frames to handle dragging, rotation and pinch zooming of the frame:</db:para>
<db:programlisting language="cpp">                PinchArea {
                    anchors.fill: parent
                    pinch.target: photoFrame
                    pinch.minimumRotation: -360
                    pinch.maximumRotation: 360
                    pinch.minimumScale: 0.1
                    pinch.maximumScale: 10
                    pinch.dragAxis: Pinch.XAndYAxis
                    onPinchStarted: setFrameColor();
</db:programlisting>
<db:para>We use the <db:code>pinch</db:code> group property to control how the photo frames react to pinch gestures. The <db:code>pinch.target</db:code> sets <db:code>photoFrame</db:code> as the item to manipulate. The rotation properties specify that the frames can be rotated at all angles and the scale properties specify that they can be scaled between <db:code>0.1</db:code> and <db:code>10</db:code>.</db:para>
<db:para>In the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>'s <db:code>onPressed</db:code> signal handler, we raise the selected photo frame to the top by increasing the value of its <db:code>z</db:code> property. The root item stores the z value of the top-most frame. The border color of the photo frame is controlled in the <db:code>onEntered</db:code> signal handler to highlight the selected image:</db:para>
<db:programlisting language="cpp">                    MouseArea {
                        id: dragArea
                        hoverEnabled: true
                        anchors.fill: parent
                        drag.target: photoFrame
                        scrollGestureEnabled: false  // 2-finger-flick gesture should pass through to the Flickable
                        onPressed: {
                            photoFrame.z = ++root.highestZ;
                            parent.setFrameColor();
                        }
                        onEntered: parent.setFrameColor();
</db:programlisting>
<db:para>To enable you to test the example on the desktop, we use the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>'s <db:code>onWheel</db:code> signal handler to simulate pinch gestures by using a mouse:</db:para>
<db:programlisting language="cpp">                        onWheel: {
                            if (wheel.modifiers &amp; Qt.ControlModifier) {
                                photoFrame.rotation += wheel.angleDelta.y / 120 * 5;
                                if (Math.abs(photoFrame.rotation) &lt; 4)
                                    photoFrame.rotation = 0;
                            } else {
                                photoFrame.rotation += wheel.angleDelta.x / 120;
                                if (Math.abs(photoFrame.rotation) &lt; 0.6)
                                    photoFrame.rotation = 0;
                                var scaleBefore = photoFrame.scale;
                                photoFrame.scale += photoFrame.scale * wheel.angleDelta.y / 120 / 10;
                            }
                        }
</db:programlisting>
<db:para>The <db:code>onWheel</db:code> signal handler is called in response to mouse wheel gestures. Use the vertical wheel to zoom and Ctrl and the vertical wheel to rotate frames. If the mouse has a horizontal wheel, use it to rotate frames.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="demos/photosurface/main.cpp">demos/photosurface/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/photosurface/photosurface.pro">demos/photosurface/photosurface.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/photosurface/photosurface.qml">demos/photosurface/photosurface.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/photosurface/photosurface.qmlproject">demos/photosurface/photosurface.qmlproject</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/photosurface/photosurface.qrc">demos/photosurface/photosurface.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="demos/photosurface/resources/folder.png">demos/photosurface/resources/folder.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/photosurface/resources/icon.png">demos/photosurface/resources/icon.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmlapplications.xml">QML Applications</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section></db:section></db:article>
