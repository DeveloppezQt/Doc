<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDate Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdate.xml">QDate</db:link> class provides date functions.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDate</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qdate.xml">QDate</db:link> object represents a particular day, regardless of calendar, locale or other settings used when creating it or supplied by the system. It can report the year, month and day of the month that represent the day with respect to the proleptic Gregorian calendar or any calendar supplied as a <db:link xlink:href="qcalendar.xml">QCalendar</db:link> object. <db:link xlink:href="qdate.xml">QDate</db:link> objects should be passed by value rather than by reference to const; they simply package qint64.</db:para>
<db:para>A <db:link xlink:href="qdate.xml">QDate</db:link> object is typically created by giving the year, month, and day numbers explicitly. Note that <db:link xlink:href="qdate.xml">QDate</db:link> interprets year numbers less than 100 as presented, i.e., as years 1 through 99, without adding any offset. The static function <db:link xlink:href="qdate.xml#currentDate">currentDate</db:link>() creates a <db:link xlink:href="qdate.xml">QDate</db:link> object containing the date read from the system clock. An explicit date can also be set using <db:link xlink:href="qdate.xml#setDate">setDate</db:link>(). The <db:link xlink:href="qdate.xml#fromString">fromString</db:link>() function returns a <db:link xlink:href="qdate.xml">QDate</db:link> given a string and a date format which is used to interpret the date within the string.</db:para>
<db:para>The <db:link xlink:href="qdate.xml#year-1">year</db:link>(), <db:link xlink:href="qdate.xml#month-1">month</db:link>(), and <db:link xlink:href="qdate.xml#day-1">day</db:link>() functions provide access to the year, month, and day numbers. When more than one of these values is needed, it is more efficient to call <db:link xlink:href="qcalendar.xml#partsFromDate">QCalendar::partsFromDate</db:link>(), to save repeating (potentially expensive) calendrical calculations.</db:para>
<db:para>Also, <db:link xlink:href="qdate.xml#dayOfWeek-1">dayOfWeek</db:link>() and <db:link xlink:href="qdate.xml#dayOfYear-1">dayOfYear</db:link>() functions are provided. The same information is provided in textual format by <db:link xlink:href="qdate.xml#toString">toString</db:link>(). <db:link xlink:href="qlocale.xml">QLocale</db:link> can map the day numbers to names, <db:link xlink:href="qcalendar.xml">QCalendar</db:link> can map month numbers to names.</db:para>
<db:para><db:link xlink:href="qdate.xml">QDate</db:link> provides a full set of operators to compare two <db:link xlink:href="qdate.xml">QDate</db:link> objects where smaller means earlier, and larger means later.</db:para>
<db:para>You can increment (or decrement) a date by a given number of days using <db:link xlink:href="qdate.xml#addDays">addDays</db:link>(). Similarly you can use <db:link xlink:href="qdate.xml#addMonths">addMonths</db:link>() and <db:link xlink:href="qdate.xml#addYears">addYears</db:link>(). The <db:link xlink:href="qdate.xml#daysTo">daysTo</db:link>() function returns the number of days between two dates.</db:para>
<db:para>The <db:link xlink:href="qdate.xml#daysInMonth-1">daysInMonth</db:link>() and <db:link xlink:href="qdate.xml#daysInYear-1">daysInYear</db:link>() functions return how many days there are in this date's month and year, respectively. The <db:link xlink:href="qdate.xml#isLeapYear">isLeapYear</db:link>() function indicates whether a date is in a leap year. <db:link xlink:href="qcalendar.xml">QCalendar</db:link> can also supply this information, in some cases more conveniently.</db:para>
<db:section xml:id="remarks">
<db:title>Remarks</db:title>
<db:note>
<db:para>All conversion to and from string formats is done using the C locale. For localized conversions, see <db:link xlink:href="qlocale.xml">QLocale</db:link>.</db:para>
</db:note>
<db:para>In the Gregorian calendar, there is no year 0. Dates in that year are considered invalid. The year -1 is the year &quot;1 before Christ&quot; or &quot;1 before common era.&quot; The day before 1 January 1 CE, <db:link xlink:href="qdate.xml">QDate</db:link>(1, 1, 1), is 31 December 1 BCE, <db:link xlink:href="qdate.xml">QDate</db:link>(-1, 12, 31). Various other calendars behave similarly; see <db:link xlink:href="qcalendar.xml#hasYearZero">QCalendar::hasYearZero</db:link>().</db:para>
<db:section xml:id="range-of-valid-dates">
<db:title>Range of Valid Dates</db:title>
<db:para>Dates are stored internally as a Julian Day number, an integer count of every day in a contiguous range, with 24 November 4714 BCE in the Gregorian calendar being Julian Day 0 (1 January 4713 BCE in the Julian calendar). As well as being an efficient and accurate way of storing an absolute date, it is suitable for converting a date into other calendar systems such as Hebrew, Islamic or Chinese. The Julian Day number can be obtained using <db:link xlink:href="qdate.xml#toJulianDay">QDate::toJulianDay</db:link>() and can be set using <db:link xlink:href="qdate.xml#fromJulianDay">QDate::fromJulianDay</db:link>().</db:para>
<db:para>The range of Julian Day numbers that <db:link xlink:href="qdate.xml">QDate</db:link> can represent is, for technical reasons, limited to between -784350574879 and 784354017364, which means from before 2 billion BCE to after 2 billion CE. This is more than seven times as wide as the range of dates a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> can represent.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml">QTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:member>
<db:member><db:link xlink:href="qcalendar.xml">QCalendar</db:link></db:member>
<db:member><db:link xlink:href="qdatetime.xml#YearRange-enum">QDateTime::YearRange</db:link></db:member>
<db:member><db:link xlink:href="qdateedit.xml">QDateEdit</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link></db:member>
<db:member><db:link xlink:href="qcalendarwidget.xml">QCalendarWidget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="startOfDay">
<db:title>[since 5.14] QDateTime QDate::startOfDay(Qt::TimeSpec <db:emphasis>spec</db:emphasis> = Qt::LocalTime, int <db:emphasis>offsetSeconds</db:emphasis> = 0) const</db:title>
<db:bridgehead renderas="sect2" xml:id="startOfDay-1">[since 5.14] QDateTime QDate::startOfDay(const QTimeZone &amp;<db:emphasis>zone</db:emphasis>) const</db:bridgehead>
<db:para>Returns the start-moment of the day. Usually, this shall be midnight at the start of the day: however, if a time-zone transition causes the given date to skip over that midnight (e.g. a DST spring-forward skipping from the end of the previous day to 01:00 of the new day), the actual earliest time in the day is returned. This can only arise when the start-moment is specified in terms of a time-zone (by passing its <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> as <db:code role="parameter">zone</db:code>) or in terms of local time (by passing <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> as <db:code role="parameter">spec</db:code>; this is its default).</db:para>
<db:para>The <db:code role="parameter">offsetSeconds</db:code> is ignored unless <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link>, when it gives the implied zone's offset from UTC. As UTC and such zones have no transitions, the start of the day is <db:link xlink:href="qtime.xml">QTime</db:link>(0, 0) in these cases.</db:para>
<db:para>In the rare case of a date that was entirely skipped (this happens when a zone east of the international date-line switches to being west of it), the return shall be invalid. Passing <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> as <db:code role="parameter">spec</db:code> (instead of passing a <db:link xlink:href="qtimezone.xml">QTimeZone</db:link>) or passing an invalid time-zone as <db:code role="parameter">zone</db:code> will also produce an invalid result, as shall dates that start outside the range representable by <db:link xlink:href="qdatetime.xml">QDateTime</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#endOfDay">endOfDay</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endOfDay">
<db:title>[since 5.14] QDateTime QDate::endOfDay(Qt::TimeSpec <db:emphasis>spec</db:emphasis> = Qt::LocalTime, int <db:emphasis>offsetSeconds</db:emphasis> = 0) const</db:title>
<db:bridgehead renderas="sect2" xml:id="endOfDay-1">[since 5.14] QDateTime QDate::endOfDay(const QTimeZone &amp;<db:emphasis>zone</db:emphasis>) const</db:bridgehead>
<db:para>Returns the end-moment of the day. Usually, this is one millisecond before the midnight at the end of the day: however, if a time-zone transition causes the given date to skip over that midnight (e.g. a DST spring-forward skipping from just before 23:00 to the start of the next day), the actual latest time in the day is returned. This can only arise when the start-moment is specified in terms of a time-zone (by passing its <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> as <db:code role="parameter">zone</db:code>) or in terms of local time (by passing <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> as <db:code role="parameter">spec</db:code>; this is its default).</db:para>
<db:para>The <db:code role="parameter">offsetSeconds</db:code> is ignored unless <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link>, when it gives the implied zone's offset from UTC. As UTC and such zones have no transitions, the end of the day is <db:link xlink:href="qtime.xml">QTime</db:link>(23, 59, 59, 999) in these cases.</db:para>
<db:para>In the rare case of a date that was entirely skipped (this happens when a zone east of the international date-line switches to being west of it), the return shall be invalid. Passing <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> as <db:code role="parameter">spec</db:code> (instead of passing a <db:link xlink:href="qtimezone.xml">QTimeZone</db:link>) will also produce an invalid result, as shall dates that end outside the range representable by <db:link xlink:href="qdatetime.xml">QDateTime</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#startOfDay">startOfDay</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString-2">
<db:title>QString QDate::toString(QStringView <db:emphasis>format</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis> = QCalendar()) const</db:title>
<db:bridgehead renderas="sect2" xml:id="toString">QString QDate::toString(const QString &amp;<db:emphasis>format</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis> = QCalendar()) const</db:bridgehead>
<db:para>Returns the date as a string. The <db:code role="parameter">format</db:code> parameter determines the format of the result string. If <db:code role="parameter">cal</db:code> is supplied, it determines the calendar used to represent the date; it defaults to Gregorian.</db:para>
<db:para>These expressions may be used:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Expression</db:para>
</db:th>
<db:th>
<db:para>Output</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>d</db:para>
</db:td>
<db:td>
<db:para>The day as a number without a leading zero (1 to 31)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dd</db:para>
</db:td>
<db:td>
<db:para>The day as a number with a leading zero (01 to 31)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ddd</db:para>
</db:td>
<db:td>
<db:para>The abbreviated day name ('Mon' to 'Sun').</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dddd</db:para>
</db:td>
<db:td>
<db:para>The long day name ('Monday' to 'Sunday').</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>M</db:para>
</db:td>
<db:td>
<db:para>The month as a number without a leading zero (1 to 12)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MM</db:para>
</db:td>
<db:td>
<db:para>The month as a number with a leading zero (01 to 12)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MMM</db:para>
</db:td>
<db:td>
<db:para>The abbreviated month name ('Jan' to 'Dec').</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MMMM</db:para>
</db:td>
<db:td>
<db:para>The long month name ('January' to 'December').</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>yy</db:para>
</db:td>
<db:td>
<db:para>The year as a two digit number (00 to 99)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>yyyy</db:para>
</db:td>
<db:td>
<db:para>The year as a four digit number. If the year is negative, a minus sign is prepended, making five characters.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Any sequence of characters enclosed in single quotes will be included verbatim in the output string (stripped of the quotes), even if it contains formatting characters. Two consecutive single quotes (&quot;''&quot;) are replaced by a single quote in the output. All other characters in the format string are included verbatim in the output string.</db:para>
<db:para>Formats without separators (e.g. &quot;ddMM&quot;) are supported but must be used with care, as the resulting strings aren't always reliably readable (e.g. if &quot;dM&quot; produces &quot;212&quot; it could mean either the 2nd of December or the 21st of February).</db:para>
<db:para>Example format strings (assuming that the <db:link xlink:href="qdate.xml">QDate</db:link> is the 20 July 1969):</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Format</db:para>
</db:th>
<db:th>
<db:para>Result</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>dd.MM.yyyy</db:para>
</db:td>
<db:td>
<db:para>20.07.1969</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ddd MMMM d yy</db:para>
</db:td>
<db:td>
<db:para>Sun July 20 69</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>'The day is' dddd</db:para>
</db:td>
<db:td>
<db:para>The day is Sunday</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If the datetime is invalid, an empty string will be returned.</db:para>
<db:note>
<db:para>Day and month names are given in English (C locale). If localized month and day names are desired, use <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().<db:link xlink:href="qdate.xml#toString">toString</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#fromString">fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toString">QDateTime::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#toString">QTime::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDate-1">
<db:title>[constexpr] QDate::QDate()</db:title>
<db:constructorsynopsis>
<db:methodname>QDate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDate()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null date. Null dates are invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDate-2">
<db:title>QDate::QDate(int <db:emphasis>y</db:emphasis>, int <db:emphasis>m</db:emphasis>, int <db:emphasis>d</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDate</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>m</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>d</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QDate(int y, int m, int d)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a date with year <db:code role="parameter">y</db:code>, month <db:code role="parameter">m</db:code> and day <db:code role="parameter">d</db:code>.</db:para>
<db:para>The date is understood in terms of the Gregorian calendar. If the specified date is invalid, the date is not set and <db:link xlink:href="qdate.xml#isValid">isValid</db:link>() returns false.</db:para>
<db:warning>
<db:para>Years 1 to 99 are interpreted as is. Year 0 is invalid.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#dateFromParts">QCalendar::dateFromParts</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addDays">
<db:title>QDate QDate::addDays(qint64 <db:emphasis>ndays</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDate</db:type>
<db:methodname>addDays</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>ndays</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDate addDays(qint64 ndays) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qdate.xml">QDate</db:link> object containing a date <db:code role="parameter">ndays</db:code> later than the date of this object (or earlier if <db:code role="parameter">ndays</db:code> is negative).</db:para>
<db:para>Returns a null date if the current date is invalid or the new date is out of range.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#addMonths">addMonths</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#addYears">addYears</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#daysTo">daysTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMonths">
<db:title>QDate QDate::addMonths(int <db:emphasis>nmonths</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDate</db:type>
<db:methodname>addMonths</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>nmonths</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QCalendar</db:type>
<db:parameter>cal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDate addMonths(int nmonths, QCalendar cal) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qdate.xml">QDate</db:link> object containing a date <db:code role="parameter">nmonths</db:code> later than the date of this object (or earlier if <db:code role="parameter">nmonths</db:code> is negative).</db:para>
<db:para>Uses <db:code role="parameter">cal</db:code> as calendar, if supplied, else the Gregorian calendar.</db:para>
<db:note>
<db:para>If the ending day/month combination does not exist in the resulting month/year, this function will return a date that is the latest valid date in the selected month.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#addYears">addYears</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMonths-1">
<db:title>QDate QDate::addMonths(int <db:emphasis>nmonths</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDate</db:type>
<db:methodname>addMonths</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>nmonths</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDate addMonths(int nmonths) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="addYears">
<db:title>QDate QDate::addYears(int <db:emphasis>nyears</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDate</db:type>
<db:methodname>addYears</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>nyears</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QCalendar</db:type>
<db:parameter>cal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDate addYears(int nyears, QCalendar cal) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qdate.xml">QDate</db:link> object containing a date <db:code role="parameter">nyears</db:code> later than the date of this object (or earlier if <db:code role="parameter">nyears</db:code> is negative).</db:para>
<db:para>Uses <db:code role="parameter">cal</db:code> as calendar, if supplied, else the Gregorian calendar.</db:para>
<db:note>
<db:para>If the ending day/month combination does not exist in the resulting year (e.g., for the Gregorian calendar, if the date was Feb 29 and the final year is not a leap year), this function will return a date that is the latest valid date in the given month (in the example, Feb 28).</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#addMonths">addMonths</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addYears-1">
<db:title>QDate QDate::addYears(int <db:emphasis>nyears</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDate</db:type>
<db:methodname>addYears</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>nyears</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDate addYears(int nyears) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="currentDate">
<db:title>[static] QDate QDate::currentDate()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDate</db:type>
<db:methodname>currentDate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDate currentDate()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current date, as reported by the system clock.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#currentTime">QTime::currentTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#currentDateTime">QDateTime::currentDateTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="day">
<db:title>int QDate::day(QCalendar <db:emphasis>cal</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>day</db:methodname>
<db:methodparam>
<db:type>QCalendar</db:type>
<db:parameter>cal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int day(QCalendar cal) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the day of the month for this date.</db:para>
<db:para>Uses <db:code role="parameter">cal</db:code> as calendar if supplied, else the Gregorian calendar (for which the return ranges from 1 to 31). Returns 0 if the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#year-1">year</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#month-1">month</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#dayOfWeek-1">dayOfWeek</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#partsFromDate">QCalendar::partsFromDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="day-1">
<db:title>int QDate::day() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>day</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int day() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="dayOfWeek">
<db:title>int QDate::dayOfWeek(QCalendar <db:emphasis>cal</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>dayOfWeek</db:methodname>
<db:methodparam>
<db:type>QCalendar</db:type>
<db:parameter>cal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int dayOfWeek(QCalendar cal) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the weekday (1 = Monday to 7 = Sunday) for this date.</db:para>
<db:para>Uses <db:code role="parameter">cal</db:code> as calendar if supplied, else the Gregorian calendar. Returns 0 if the date is invalid. Some calendars may give special meaning (e.g. intercallary days) to values greater than 7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#day-1">day</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#dayOfYear-1">dayOfYear</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#dayOfWeek">QCalendar::dayOfWeek</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#DayOfWeek-enum">Qt::DayOfWeek</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dayOfWeek-1">
<db:title>int QDate::dayOfWeek() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>dayOfWeek</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int dayOfWeek() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="dayOfYear">
<db:title>int QDate::dayOfYear(QCalendar <db:emphasis>cal</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>dayOfYear</db:methodname>
<db:methodparam>
<db:type>QCalendar</db:type>
<db:parameter>cal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int dayOfYear(QCalendar cal) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the day of the year (1 for the first day) for this date.</db:para>
<db:para>Uses <db:code role="parameter">cal</db:code> as calendar if supplied, else the Gregorian calendar. Returns 0 if either the date or the first day of its year is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#day-1">day</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#dayOfWeek-1">dayOfWeek</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#daysInYear">QCalendar::daysInYear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dayOfYear-1">
<db:title>int QDate::dayOfYear() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>dayOfYear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int dayOfYear() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="daysInMonth">
<db:title>int QDate::daysInMonth(QCalendar <db:emphasis>cal</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>daysInMonth</db:methodname>
<db:methodparam>
<db:type>QCalendar</db:type>
<db:parameter>cal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int daysInMonth(QCalendar cal) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of days in the month for this date.</db:para>
<db:para>Uses <db:code role="parameter">cal</db:code> as calendar if supplied, else the Gregorian calendar (for which the result ranges from 28 to 31). Returns 0 if the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#day-1">day</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#daysInYear-1">daysInYear</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#daysInMonth">QCalendar::daysInMonth</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#maximumDaysInMonth">QCalendar::maximumDaysInMonth</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#minimumDaysInMonth">QCalendar::minimumDaysInMonth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="daysInMonth-1">
<db:title>int QDate::daysInMonth() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>daysInMonth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int daysInMonth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="daysInYear">
<db:title>int QDate::daysInYear(QCalendar <db:emphasis>cal</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>daysInYear</db:methodname>
<db:methodparam>
<db:type>QCalendar</db:type>
<db:parameter>cal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int daysInYear(QCalendar cal) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of days in the year for this date.</db:para>
<db:para>Uses <db:code role="parameter">cal</db:code> as calendar if supplied, else the Gregorian calendar (for which the result is 365 or 366). Returns 0 if the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#day-1">day</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#daysInMonth-1">daysInMonth</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#daysInYear">QCalendar::daysInYear</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#maximumMonthsInYear">QCalendar::maximumMonthsInYear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="daysInYear-1">
<db:title>int QDate::daysInYear() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>daysInYear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int daysInYear() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="daysTo">
<db:title>qint64 QDate::daysTo(QDate <db:emphasis>d</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>daysTo</db:methodname>
<db:methodparam>
<db:type>QDate</db:type>
<db:parameter>d</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 daysTo(QDate d) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of days from this date to <db:code role="parameter">d</db:code> (which is negative if <db:code role="parameter">d</db:code> is earlier than this date).</db:para>
<db:para>Returns 0 if either date is invalid.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDate d1(1995, 5, 17);  // May 17, 1995
QDate d2(1995, 5, 20);  // May 20, 1995
d1.daysTo(d2);          // returns 3
d2.daysTo(d1);          // returns -3
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#addDays">addDays</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromJulianDay">
<db:title>[static constexpr] QDate QDate::fromJulianDay(qint64 <db:emphasis>jd</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDate</db:type>
<db:methodname>fromJulianDay</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>jd</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDate fromJulianDay(qint64 jd)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the Julian day <db:code role="parameter">jd</db:code> to a <db:link xlink:href="qdate.xml">QDate</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#toJulianDay">toJulianDay</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromString">
<db:title>[static] QDate QDate::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, Qt::DateFormat <db:emphasis>format</db:emphasis> = Qt::TextDate)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDate</db:type>
<db:methodname>fromString</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::DateFormat</db:type>
<db:parameter>format</db:parameter>
<db:initializer>Qt::TextDate</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDate fromString(const QString &amp;string, Qt::DateFormat format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qdate.xml">QDate</db:link> represented by the <db:code role="parameter">string</db:code>, using the <db:code role="parameter">format</db:code> given, or an invalid date if the string cannot be parsed.</db:para>
<db:para>Note for <db:link xlink:href="qt.xml#DateFormat-enum">Qt::TextDate</db:link>: only English month names (e.g. &quot;Jan&quot; in short form or &quot;January&quot; in long form) are recognized.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#toString">toString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toDate">QLocale::toDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromString-1">
<db:title>[static, since 6.0] QDate QDate::fromString(QStringView <db:emphasis>string</db:emphasis>, Qt::DateFormat <db:emphasis>format</db:emphasis> = Qt::TextDate)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDate</db:type>
<db:methodname>fromString</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::DateFormat</db:type>
<db:parameter>format</db:parameter>
<db:initializer>Qt::TextDate</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDate fromString(QStringView string, Qt::DateFormat format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="fromString-2">
<db:title>[static, since 6.0] QDate QDate::fromString(QStringView <db:emphasis>string</db:emphasis>, QStringView <db:emphasis>format</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis> = QCalendar())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDate</db:type>
<db:methodname>fromString</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QCalendar</db:type>
<db:parameter>cal</db:parameter>
<db:initializer>QCalendar()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QDate fromString(QStringView string, QStringView format, QCalendar cal)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="fromString-3">
<db:title>[static, since 6.0] QDate QDate::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, QStringView <db:emphasis>format</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis> = QCalendar())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDate</db:type>
<db:methodname>fromString</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QCalendar</db:type>
<db:parameter>cal</db:parameter>
<db:initializer>QCalendar()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QDate fromString(const QString &amp;string, QStringView format, QCalendar cal)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="fromString-4">
<db:title>[static] QDate QDate::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, const QString &amp;<db:emphasis>format</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis> = QCalendar())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDate</db:type>
<db:methodname>fromString</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QCalendar</db:type>
<db:parameter>cal</db:parameter>
<db:initializer>QCalendar()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QDate fromString(const QString &amp;string, const QString &amp;format, QCalendar cal)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qdate.xml">QDate</db:link> represented by the <db:code role="parameter">string</db:code>, using the <db:code role="parameter">format</db:code> given, or an invalid date if the string cannot be parsed.</db:para>
<db:para>Uses <db:code role="parameter">cal</db:code> as calendar if supplied, else the Gregorian calendar. Ranges of values in the format descriptions below are for the latter; they may be different for other calendars.</db:para>
<db:para>These expressions may be used for the format:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Expression</db:para>
</db:th>
<db:th>
<db:para>Output</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>d</db:para>
</db:td>
<db:td>
<db:para>The day as a number without a leading zero (1 to 31)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dd</db:para>
</db:td>
<db:td>
<db:para>The day as a number with a leading zero (01 to 31)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ddd</db:para>
</db:td>
<db:td>
<db:para>The abbreviated day name ('Mon' to 'Sun').</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dddd</db:para>
</db:td>
<db:td>
<db:para>The long day name ('Monday' to 'Sunday').</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>M</db:para>
</db:td>
<db:td>
<db:para>The month as a number without a leading zero (1 to 12)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MM</db:para>
</db:td>
<db:td>
<db:para>The month as a number with a leading zero (01 to 12)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MMM</db:para>
</db:td>
<db:td>
<db:para>The abbreviated month name ('Jan' to 'Dec').</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MMMM</db:para>
</db:td>
<db:td>
<db:para>The long month name ('January' to 'December').</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>yy</db:para>
</db:td>
<db:td>
<db:para>The year as a two digit number (00 to 99)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>yyyy</db:para>
</db:td>
<db:td>
<db:para>The year as a four digit number, possibly plus a leading minus sign for negative years.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>Day and month names must be given in English (C locale). If localized month and day names are used, use <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().toDate().</db:para>
</db:note>
<db:para>All other input characters will be treated as text. Any non-empty sequence of characters enclosed in single quotes will also be treated (stripped of the quotes) as text and not be interpreted as expressions. For example:</db:para>
<db:programlisting language="cpp">QDate date = QDate::fromString(&quot;1MM12car2003&quot;, &quot;d'MM'MMcaryyyy&quot;);
// date is 1 December 2003
</db:programlisting>
<db:para>If the format is not satisfied, an invalid <db:link xlink:href="qdate.xml">QDate</db:link> is returned. The expressions that don't expect leading zeroes (d, M) will be greedy. This means that they will use two digits even if this will put them outside the accepted range of values and leaves too few digits for other sections. For example, the following format string could have meant January 30 but the M will grab two digits, resulting in an invalid date:</db:para>
<db:programlisting language="cpp">QDate date = QDate::fromString(&quot;130&quot;, &quot;Md&quot;); // invalid
</db:programlisting>
<db:para>For any field that is not represented in the format the following defaults are used:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Field</db:para>
</db:th>
<db:th>
<db:para>Default value</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Year</db:para>
</db:td>
<db:td>
<db:para>1900</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Month</db:para>
</db:td>
<db:td>
<db:para>1 (January)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Day</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The following examples demonstrate the default values:</db:para>
<db:programlisting language="cpp">QDate::fromString(&quot;1.30&quot;, &quot;M.d&quot;);           // January 30 1900
QDate::fromString(&quot;20000110&quot;, &quot;yyyyMMdd&quot;);  // January 10, 2000
QDate::fromString(&quot;20000110&quot;, &quot;yyyyMd&quot;);    // January 10, 2000
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#toString">toString</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#fromString">QDateTime::fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#fromString">QTime::fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toDate">QLocale::toDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getDate">
<db:title>void QDate::getDate(int *<db:emphasis>year</db:emphasis>, int *<db:emphasis>month</db:emphasis>, int *<db:emphasis>day</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>getDate</db:methodname>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>year</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>month</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>day</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void getDate(int *year, int *month, int *day) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Extracts the date's year, month, and day, and assigns them to *<db:code role="parameter">year</db:code>, *<db:code role="parameter">month</db:code>, and *<db:code role="parameter">day</db:code>. The pointers may be null.</db:para>
<db:para>Returns 0 if the date is invalid.</db:para>
<db:note>
<db:para>In Qt versions prior to 5.7, this function is marked as non-const.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#year-1">year</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#month-1">month</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#day-1">day</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#partsFromDate">QCalendar::partsFromDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isLeapYear">
<db:title>[static] bool QDate::isLeapYear(int <db:emphasis>year</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>isLeapYear</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>year</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isLeapYear(int year)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the specified <db:code role="parameter">year</db:code> is a leap year in the Gregorian calendar; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcalendar.xml#isLeapYear">QCalendar::isLeapYear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>[constexpr] bool QDate::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the date is null; otherwise returns false. A null date is invalid.</db:para>
<db:note>
<db:para>The behavior of this function is equivalent to <db:link xlink:href="qdate.xml#isValid">isValid</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>[constexpr] bool QDate::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this date is valid; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#isDateValid">QCalendar::isDateValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid-1">
<db:title>[static] bool QDate::isValid(int <db:emphasis>year</db:emphasis>, int <db:emphasis>month</db:emphasis>, int <db:emphasis>day</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>year</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>month</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>day</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid(int year, int month, int day)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns true if the specified date (<db:code role="parameter">year</db:code>, <db:code role="parameter">month</db:code>, and <db:code role="parameter">day</db:code>) is valid in the Gregorian calendar; otherwise returns false.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDate::isValid(2002, 5, 17);  // true
QDate::isValid(2002, 2, 30);  // false (Feb 30 does not exist)
QDate::isValid(2004, 2, 29);  // true (2004 is a leap year)
QDate::isValid(2000, 2, 29);  // true (2000 is a leap year)
QDate::isValid(2006, 2, 29);  // false (2006 is not a leap year)
QDate::isValid(2100, 2, 29);  // false (2100 is not a leap year)
QDate::isValid(1202, 6, 6);   // true (even though 1202 is pre-Gregorian)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#setDate">setDate</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#isDateValid">QCalendar::isDateValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="month">
<db:title>int QDate::month(QCalendar <db:emphasis>cal</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>month</db:methodname>
<db:methodparam>
<db:type>QCalendar</db:type>
<db:parameter>cal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int month(QCalendar cal) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the month-number for the date.</db:para>
<db:para>Numbers the months of the year starting with 1 for the first. Uses <db:code role="parameter">cal</db:code> as calendar if supplied, else the Gregorian calendar, for which the month numbering is as follows:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>1 = &quot;January&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>2 = &quot;February&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>3 = &quot;March&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>4 = &quot;April&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>5 = &quot;May&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>6 = &quot;June&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>7 = &quot;July&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>8 = &quot;August&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>9 = &quot;September&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>10 = &quot;October&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>11 = &quot;November&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>12 = &quot;December&quot;</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Returns 0 if the date is invalid. Note that some calendars may have more than 12 months in some years.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#year-1">year</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#day-1">day</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#partsFromDate">QCalendar::partsFromDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="month-1">
<db:title>int QDate::month() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>month</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int month() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setDate">
<db:title>bool QDate::setDate(int <db:emphasis>year</db:emphasis>, int <db:emphasis>month</db:emphasis>, int <db:emphasis>day</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setDate</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>year</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>month</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>day</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setDate(int year, int month, int day)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this to represent the date, in the Gregorian calendar, with the given <db:code role="parameter">year</db:code>, <db:code role="parameter">month</db:code> and <db:code role="parameter">day</db:code> numbers. Returns true if the resulting date is valid, otherwise it sets this to represent an invalid date and returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#dateFromParts">QCalendar::dateFromParts</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDate-1">
<db:title>[since 5.14] bool QDate::setDate(int <db:emphasis>year</db:emphasis>, int <db:emphasis>month</db:emphasis>, int <db:emphasis>day</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setDate</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>year</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>month</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>day</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QCalendar</db:type>
<db:parameter>cal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setDate(int year, int month, int day, QCalendar cal)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this to represent the date, in the given calendar <db:code role="parameter">cal</db:code>, with the given <db:code role="parameter">year</db:code>, <db:code role="parameter">month</db:code> and <db:code role="parameter">day</db:code> numbers. Returns true if the resulting date is valid, otherwise it sets this to represent an invalid date and returns false.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#dateFromParts">QCalendar::dateFromParts</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toJulianDay">
<db:title>[constexpr] qint64 QDate::toJulianDay() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>toJulianDay</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 toJulianDay() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the date to a Julian day.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#fromJulianDay">fromJulianDay</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString-1">
<db:title>QString QDate::toString(Qt::DateFormat <db:emphasis>format</db:emphasis> = Qt::TextDate) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toString</db:methodname>
<db:methodparam>
<db:type>Qt::DateFormat</db:type>
<db:parameter>format</db:parameter>
<db:initializer>Qt::TextDate</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toString(Qt::DateFormat format) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the date as a string. The <db:code role="parameter">format</db:code> parameter determines the format of the string.</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::TextDate</db:link>, the string is formatted in the default way. The day and month names will be in English. An example of this formatting is &quot;Sat May 20 1995&quot;. For localized formatting, see <db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>().</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::ISODate</db:link>, the string format corresponds to the ISO 8601 extended specification for representations of dates and times, taking the form yyyy-MM-dd, where yyyy is the year, MM is the month of the year (between 01 and 12), and dd is the day of the month between 01 and 31.</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::RFC2822Date</db:link>, the string is formatted in an <db:link xlink:href="http://www.rfc-editor.org/rfc/rfc2822.txt">RFC 2822</db:link> compatible way. An example of this formatting is &quot;20 May 1995&quot;.</db:para>
<db:para>If the date is invalid, an empty string will be returned.</db:para>
<db:warning>
<db:para>The <db:link xlink:href="qt.xml#DateFormat-enum">Qt::ISODate</db:link> format is only valid for years in the range 0 to 9999.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#fromString">fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="weekNumber">
<db:title>int QDate::weekNumber(int *<db:emphasis>yearNumber</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>weekNumber</db:methodname>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>yearNumber</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int weekNumber(int *yearNumber) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the ISO 8601 week number (1 to 53).</db:para>
<db:para>Returns 0 if the date is invalid. Otherwise, returns the week number for the date. If <db:code role="parameter">yearNumber</db:code> is not nullptr (its default), stores the year as *<db:code role="parameter">yearNumber</db:code>.</db:para>
<db:para>In accordance with ISO 8601, each week falls in the year to which most of its days belong, in the Gregorian calendar. As ISO 8601's week starts on Monday, this is the year in which the week's Thursday falls. Most years have 52 weeks, but some have 53.</db:para>
<db:note>
<db:para>*<db:code role="parameter">yearNumber</db:code> is not always the same as <db:link xlink:href="qdate.xml#year-1">year</db:link>(). For example, 1 January 2000 has week number 52 in the year 1999, and 31 December 2002 has week number 1 in the year 2003.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="year">
<db:title>int QDate::year(QCalendar <db:emphasis>cal</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>year</db:methodname>
<db:methodparam>
<db:type>QCalendar</db:type>
<db:parameter>cal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int year(QCalendar cal) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the year of this date.</db:para>
<db:para>Uses <db:code role="parameter">cal</db:code> as calendar, if supplied, else the Gregorian calendar.</db:para>
<db:para>Returns 0 if the date is invalid. For some calendars, dates before their first year may all be invalid.</db:para>
<db:para>If using a calendar which has a year 0, check using <db:link xlink:href="qdate.xml#isValid">isValid</db:link>() if the return is 0. Such calendars use negative year numbers in the obvious way, with year 1 preceded by year 0, in turn preceded by year -1 and so on.</db:para>
<db:para>Some calendars, despite having no year 0, have a conventional numbering of the years before their first year, counting backwards from 1. For example, in the proleptic Gregorian calendar, successive years before 1 CE (the first year) are identified as 1 BCE, 2 BCE, 3 BCE and so on. For such calendars, negative year numbers are used to indicate these years before year 1, with -1 indicating the year before 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#month-1">month</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#day-1">day</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#hasYearZero">QCalendar::hasYearZero</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#isProleptic">QCalendar::isProleptic</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#partsFromDate">QCalendar::partsFromDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="year-1">
<db:title>int QDate::year() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>year</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int year() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>[constexpr] bool operator!=(QDate <db:emphasis>lhs</db:emphasis>, QDate <db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>QDate</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QDate</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(QDate lhs, QDate rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> represent distinct days; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt">
<db:title>[constexpr] bool operator&lt;(QDate <db:emphasis>lhs</db:emphasis>, QDate <db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>QDate</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QDate</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(QDate lhs, QDate rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is earlier than <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, QDate <db:emphasis>date</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>out</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QDate</db:type>
<db:parameter>date</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, QDate date)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the <db:code role="parameter">date</db:code> to stream <db:code role="parameter">out</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-eq">
<db:title>[constexpr] bool operator&lt;=(QDate <db:emphasis>lhs</db:emphasis>, QDate <db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>QDate</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QDate</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(QDate lhs, QDate rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is earlier than or equal to <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[constexpr] bool operator==(QDate <db:emphasis>lhs</db:emphasis>, QDate <db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>QDate</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QDate</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(QDate lhs, QDate rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> represent the same day, otherwise false.</db:para>
</db:section>
<db:section xml:id="operator-gt">
<db:title>[constexpr] bool operator&gt;(QDate <db:emphasis>lhs</db:emphasis>, QDate <db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>QDate</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QDate</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(QDate lhs, QDate rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is later than <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq">
<db:title>[constexpr] bool operator&gt;=(QDate <db:emphasis>lhs</db:emphasis>, QDate <db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>QDate</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QDate</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(QDate lhs, QDate rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is later than or equal to <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-1">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QDate &amp;<db:emphasis>date</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>in</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QDate &amp;</db:type>
<db:parameter>date</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QDate &amp;date)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a date from stream <db:code role="parameter">in</db:code> into the <db:code role="parameter">date</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
