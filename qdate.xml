<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDate Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdate.xml">QDate</db:link> class provides date functions.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
<db:para>This class is <db:emphasis>strongly comparable</db:emphasis>.</db:para>
<db:para>This class is <db:emphasis role="bold">strongly comparable</db:emphasis> with std::chrono::year_month_day, std::chrono::year_month_day_last, std::chrono::year_month_weekday, and std::chrono::year_month_weekday_last.</db:para>
<db:para>These comparison operators are only available when using C++20.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDate</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qdate.xml">QDate</db:link> object represents a particular day, regardless of calendar, locale or other settings used when creating it or supplied by the system. It can report the year, month and day of the month that represent the day with respect to the proleptic Gregorian calendar or any calendar supplied as a <db:link xlink:href="qcalendar.xml">QCalendar</db:link> object. <db:link xlink:href="qdate.xml">QDate</db:link> objects should be passed by value rather than by reference to const; they simply package qint64.</db:para>
<db:para>A <db:link xlink:href="qdate.xml">QDate</db:link> object is typically created by giving the year, month, and day numbers explicitly. Note that <db:link xlink:href="qdate.xml">QDate</db:link> interprets year numbers less than 100 as presented, i.e., as years 1 through 99, without adding any offset. The static function <db:link xlink:href="qdate.xml#currentDate">currentDate</db:link>() creates a <db:link xlink:href="qdate.xml">QDate</db:link> object containing the date read from the system clock. An explicit date can also be set using <db:link xlink:href="qdate.xml#setDate">setDate</db:link>(). The <db:link xlink:href="qdate.xml#fromString">fromString</db:link>() function returns a <db:link xlink:href="qdate.xml">QDate</db:link> given a string and a date format which is used to interpret the date within the string.</db:para>
<db:para>The <db:link xlink:href="qdate.xml#year-1">year</db:link>(), <db:link xlink:href="qdate.xml#month-1">month</db:link>(), and <db:link xlink:href="qdate.xml#day-1">day</db:link>() functions provide access to the year, month, and day numbers. When more than one of these values is needed, it is more efficient to call <db:link xlink:href="qcalendar.xml#partsFromDate">QCalendar::partsFromDate</db:link>(), to save repeating (potentially expensive) calendrical calculations.</db:para>
<db:para>Also, <db:link xlink:href="qdate.xml#dayOfWeek-1">dayOfWeek</db:link>() and <db:link xlink:href="qdate.xml#dayOfYear-1">dayOfYear</db:link>() functions are provided. The same information is provided in textual format by <db:link xlink:href="qdate.xml#toString">toString</db:link>(). <db:link xlink:href="qlocale.xml">QLocale</db:link> can map the day numbers to names, <db:link xlink:href="qcalendar.xml">QCalendar</db:link> can map month numbers to names.</db:para>
<db:para><db:link xlink:href="qdate.xml">QDate</db:link> provides a full set of operators to compare two <db:link xlink:href="qdate.xml">QDate</db:link> objects where smaller means earlier, and larger means later.</db:para>
<db:para>You can increment (or decrement) a date by a given number of days using <db:link xlink:href="qdate.xml#addDays">addDays</db:link>(). Similarly you can use <db:link xlink:href="qdate.xml#addMonths">addMonths</db:link>() and <db:link xlink:href="qdate.xml#addYears">addYears</db:link>(). The <db:link xlink:href="qdate.xml#daysTo">daysTo</db:link>() function returns the number of days between two dates.</db:para>
<db:para>The <db:link xlink:href="qdate.xml#daysInMonth-1">daysInMonth</db:link>() and <db:link xlink:href="qdate.xml#daysInYear-1">daysInYear</db:link>() functions return how many days there are in this date's month and year, respectively. The <db:link xlink:href="qdate.xml#isLeapYear">isLeapYear</db:link>() function indicates whether a date is in a leap year. <db:link xlink:href="qcalendar.xml">QCalendar</db:link> can also supply this information, in some cases more conveniently.</db:para>
<db:section xml:id="remarks">
<db:title>Remarks</db:title>
<db:note>
<db:para>All conversion to and from string formats is done using the C locale. For localized conversions, see <db:link xlink:href="qlocale.xml">QLocale</db:link>.</db:para>
</db:note>
<db:para>In the Gregorian calendar, there is no year 0. Dates in that year are considered invalid. The year -1 is the year &quot;1 before Christ&quot; or &quot;1 before common era.&quot; The day before 1 January 1 CE, <db:link xlink:href="qdate.xml">QDate</db:link>(1, 1, 1), is 31 December 1 BCE, <db:link xlink:href="qdate.xml">QDate</db:link>(-1, 12, 31). Various other calendars behave similarly; see <db:link xlink:href="qcalendar.xml#hasYearZero">QCalendar::hasYearZero</db:link>().</db:para>
<db:section xml:id="range-of-valid-dates">
<db:title>Range of Valid Dates</db:title>
<db:para>Dates are stored internally as a Julian Day number, an integer count of every day in a contiguous range, with 24 November 4714 BCE in the Gregorian calendar being Julian Day 0 (1 January 4713 BCE in the Julian calendar). As well as being an efficient and accurate way of storing an absolute date, it is suitable for converting a date into other calendar systems such as Hebrew, Islamic or Chinese. The Julian Day number can be obtained using <db:link xlink:href="qdate.xml#toJulianDay">QDate::toJulianDay</db:link>() and can be set using <db:link xlink:href="qdate.xml#fromJulianDay">QDate::fromJulianDay</db:link>().</db:para>
<db:para>The range of Julian Day numbers that <db:link xlink:href="qdate.xml">QDate</db:link> can represent is, for technical reasons, limited to between -784350574879 and 784354017364, which means from before 2 billion BCE to after 2 billion CE. This is more than seven times as wide as the range of dates a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> can represent.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml">QTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:member>
<db:member><db:link xlink:href="qcalendar.xml">QCalendar</db:link></db:member>
<db:member><db:link xlink:href="qdatetime.xml#YearRange-enum">QDateTime::YearRange</db:link></db:member>
<db:member>QDateEdit</db:member>
<db:member>QDateTimeEdit</db:member>
<db:member>QCalendarWidget</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDate-1">
<db:title>[constexpr noexcept, since 6.4] QDate::QDate(std::chrono::year_month_day <db:emphasis>date</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="QDate-2">[constexpr noexcept, since 6.4] QDate::QDate(std::chrono::year_month_day_last <db:emphasis>date</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="QDate-3">[constexpr noexcept, since 6.4] QDate::QDate(std::chrono::year_month_weekday <db:emphasis>date</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="QDate-4">[constexpr noexcept, since 6.4] QDate::QDate(std::chrono::year_month_weekday_last <db:emphasis>date</db:emphasis>)</db:bridgehead>
<db:para>Constructs a <db:link xlink:href="qdate.xml">QDate</db:link> representing the same date as <db:code role="parameter">date</db:code>. This allows for easy interoperability between the Standard Library calendaring classes and Qt datetime classes.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">// 23 April 2012:
QDate date = std::chrono::year_month_day(std::chrono::year(2012),
                                         std::chrono::month(4),
                                         std::chrono::day(23));

// Same, under `using std::chrono` convenience:
QDate dateWithLiterals1 = 23 / April / 2012y;
QDate dateWithLiterals2 = 2012y / April / 23;

// Last day of February 2000
QDate lastDayFeb2020 = 2000y / February / last;

// First Monday of January 2020:
QDate firstMonday = 2020y / January / Monday[0];

// Last Monday of January 2020:
QDate lastMonday = 2020y / January / Monday[last];
</db:programlisting>
<db:note>
<db:para>Unlike <db:link xlink:href="qdate.xml">QDate</db:link>, std::chrono::year and the related classes feature the year zero. This means that if <db:code role="parameter">date</db:code> is in the year zero or before, the resulting <db:link xlink:href="qdate.xml">QDate</db:link> object will have an year one less than the one specified by <db:code role="parameter">date</db:code>.</db:para>
</db:note>
<db:note>
<db:para>This function requires C++20.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
</db:section>
<db:section xml:id="toString">
<db:title>QString QDate::toString(QStringView <db:emphasis>format</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="toString-1">QString QDate::toString(const QString &amp;<db:emphasis>format</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>) const</db:bridgehead>
<db:para>Returns the date as a string. The <db:code role="parameter">format</db:code> parameter determines the format of the result string. If <db:code role="parameter">cal</db:code> is supplied, it determines the calendar used to represent the date; it defaults to Gregorian. Prior to Qt 5.14, there was no <db:code role="parameter">cal</db:code> parameter and the Gregorian calendar was always used.</db:para>
<db:para>These expressions may be used in the <db:code role="parameter">format</db:code> parameter:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Expression</db:para>
</db:th>
<db:th>
<db:para>Output</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>d</db:para>
</db:td>
<db:td>
<db:para>The day as a number without a leading zero (1 to 31)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dd</db:para>
</db:td>
<db:td>
<db:para>The day as a number with a leading zero (01 to 31)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ddd</db:para>
</db:td>
<db:td>
<db:para>The abbreviated day name ('Mon' to 'Sun').</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dddd</db:para>
</db:td>
<db:td>
<db:para>The long day name ('Monday' to 'Sunday').</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>M</db:para>
</db:td>
<db:td>
<db:para>The month as a number without a leading zero (1 to 12)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MM</db:para>
</db:td>
<db:td>
<db:para>The month as a number with a leading zero (01 to 12)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MMM</db:para>
</db:td>
<db:td>
<db:para>The abbreviated month name ('Jan' to 'Dec').</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MMMM</db:para>
</db:td>
<db:td>
<db:para>The long month name ('January' to 'December').</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>yy</db:para>
</db:td>
<db:td>
<db:para>The year as a two digit number (00 to 99)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>yyyy</db:para>
</db:td>
<db:td>
<db:para>The year as a four digit number. If the year is negative, a minus sign is prepended, making five characters.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Any sequence of characters enclosed in single quotes will be included verbatim in the output string (stripped of the quotes), even if it contains formatting characters. Two consecutive single quotes (&quot;''&quot;) are replaced by a single quote in the output. All other characters in the format string are included verbatim in the output string.</db:para>
<db:para>Formats without separators (e.g. &quot;ddMM&quot;) are supported but must be used with care, as the resulting strings aren't always reliably readable (e.g. if &quot;dM&quot; produces &quot;212&quot; it could mean either the 2nd of December or the 21st of February).</db:para>
<db:para>Example format strings (assuming that the <db:link xlink:href="qdate.xml">QDate</db:link> is the 20 July 1969):</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Format</db:para>
</db:th>
<db:th>
<db:para>Result</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>dd.MM.yyyy</db:para>
</db:td>
<db:td>
<db:para>20.07.1969</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ddd MMMM d yy</db:para>
</db:td>
<db:td>
<db:para>Sun July 20 69</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>'The day is' dddd</db:para>
</db:td>
<db:td>
<db:para>The day is Sunday</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If the datetime is invalid, an empty string will be returned.</db:para>
<db:note>
<db:para>Day and month names are given in English (C locale). To get localized month and day names, use <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().<db:link xlink:href="qdate.xml#toString">toString</db:link>().</db:para>
</db:note>
<db:note>
<db:para>If a format character is repeated more times than the longest expression in the table above using it, this part of the format will be read as several expressions with no separator between them; the longest above, possibly repeated as many times as there are copies of it, ending with a residue that may be a shorter expression. Thus 'MMMMMMMMMM' for a date in May will contribute &quot;MayMay05&quot; to the output.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#fromString">fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toString">QDateTime::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#toString">QTime::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDate">
<db:title>[constexpr] QDate::QDate()</db:title>
<db:para>Constructs a null date. Null dates are invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDate-5">
<db:title>QDate::QDate(int <db:emphasis>y</db:emphasis>, int <db:emphasis>m</db:emphasis>, int <db:emphasis>d</db:emphasis>)</db:title>
<db:para>Constructs a date with year <db:code role="parameter">y</db:code>, month <db:code role="parameter">m</db:code> and day <db:code role="parameter">d</db:code>.</db:para>
<db:para>The date is understood in terms of the Gregorian calendar. If the specified date is invalid, the date is not set and <db:link xlink:href="qdate.xml#isValid">isValid</db:link>() returns false.</db:para>
<db:warning>
<db:para>Years 1 to 99 are interpreted as is. Year 0 is invalid.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#dateFromParts">QCalendar::dateFromParts</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addDays">
<db:title>QDate QDate::addDays(qint64 <db:emphasis>ndays</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdate.xml">QDate</db:link> object containing a date <db:code role="parameter">ndays</db:code> later than the date of this object (or earlier if <db:code role="parameter">ndays</db:code> is negative).</db:para>
<db:para>Returns a null date if the current date is invalid or the new date is out of range.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#addMonths">addMonths</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#addYears">addYears</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#daysTo">daysTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addDuration">
<db:title>[since 6.4] QDate QDate::addDuration(std::chrono::days <db:emphasis>ndays</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdate.xml">QDate</db:link> object containing a date <db:code role="parameter">ndays</db:code> later than the date of this object (or earlier if <db:code role="parameter">ndays</db:code> is negative).</db:para>
<db:para>Returns a null date if the current date is invalid or the new date is out of range.</db:para>
<db:note>
<db:para>Adding durations expressed in std::chrono::months or std::chrono::years does not yield the same result obtained by using <db:link xlink:href="qdate.xml#addMonths">addMonths</db:link>() or <db:link xlink:href="qdate.xml#addYears">addYears</db:link>(). The former are fixed durations, calculated in relation to the solar year; the latter use the Gregorian calendar definitions of months/years.</db:para>
</db:note>
<db:note>
<db:para>This function requires C++20.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#addMonths">addMonths</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#addYears">addYears</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#daysTo">daysTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMonths">
<db:title>QDate QDate::addMonths(int <db:emphasis>nmonths</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdate.xml">QDate</db:link> object containing a date <db:code role="parameter">nmonths</db:code> later than the date of this object (or earlier if <db:code role="parameter">nmonths</db:code> is negative).</db:para>
<db:para>Uses <db:code role="parameter">cal</db:code> as calendar, if supplied, else the Gregorian calendar.</db:para>
<db:note>
<db:para>If the ending day/month combination does not exist in the resulting month/year, this function will return a date that is the latest valid date in the selected month.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#addYears">addYears</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMonths-1">
<db:title>QDate QDate::addMonths(int <db:emphasis>nmonths</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="addYears">
<db:title>QDate QDate::addYears(int <db:emphasis>nyears</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdate.xml">QDate</db:link> object containing a date <db:code role="parameter">nyears</db:code> later than the date of this object (or earlier if <db:code role="parameter">nyears</db:code> is negative).</db:para>
<db:para>Uses <db:code role="parameter">cal</db:code> as calendar, if supplied, else the Gregorian calendar.</db:para>
<db:note>
<db:para>If the ending day/month combination does not exist in the resulting year (e.g., for the Gregorian calendar, if the date was Feb 29 and the final year is not a leap year), this function will return a date that is the latest valid date in the given month (in the example, Feb 28).</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#addMonths">addMonths</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addYears-1">
<db:title>QDate QDate::addYears(int <db:emphasis>nyears</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="currentDate">
<db:title>[static] QDate QDate::currentDate()</db:title>
<db:para>Returns the system clock's current date.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#currentTime">QTime::currentTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#currentDateTime-1">QDateTime::currentDateTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="day">
<db:title>int QDate::day(QCalendar <db:emphasis>cal</db:emphasis>) const</db:title>
<db:para>Returns the day of the month for this date.</db:para>
<db:para>Uses <db:code role="parameter">cal</db:code> as calendar if supplied, else the Gregorian calendar (for which the return ranges from 1 to 31). Returns 0 if the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#year-1">year</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#month-1">month</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#dayOfWeek-1">dayOfWeek</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#partsFromDate">QCalendar::partsFromDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="day-1">
<db:title>int QDate::day() const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="dayOfWeek">
<db:title>int QDate::dayOfWeek(QCalendar <db:emphasis>cal</db:emphasis>) const</db:title>
<db:para>Returns the weekday (1 = Monday to 7 = Sunday) for this date.</db:para>
<db:para>Uses <db:code role="parameter">cal</db:code> as calendar if supplied, else the Gregorian calendar. Returns 0 if the date is invalid. Some calendars may give special meaning (e.g. intercallary days) to values greater than 7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#day-1">day</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#dayOfYear-1">dayOfYear</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#dayOfWeek">QCalendar::dayOfWeek</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#DayOfWeek-enum">Qt::DayOfWeek</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dayOfWeek-1">
<db:title>int QDate::dayOfWeek() const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="dayOfYear">
<db:title>int QDate::dayOfYear(QCalendar <db:emphasis>cal</db:emphasis>) const</db:title>
<db:para>Returns the day of the year (1 for the first day) for this date.</db:para>
<db:para>Uses <db:code role="parameter">cal</db:code> as calendar if supplied, else the Gregorian calendar. Returns 0 if either the date or the first day of its year is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#day-1">day</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#dayOfWeek-1">dayOfWeek</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#daysInYear">QCalendar::daysInYear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dayOfYear-1">
<db:title>int QDate::dayOfYear() const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="daysInMonth">
<db:title>int QDate::daysInMonth(QCalendar <db:emphasis>cal</db:emphasis>) const</db:title>
<db:para>Returns the number of days in the month for this date.</db:para>
<db:para>Uses <db:code role="parameter">cal</db:code> as calendar if supplied, else the Gregorian calendar (for which the result ranges from 28 to 31). Returns 0 if the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#day-1">day</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#daysInYear-1">daysInYear</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#daysInMonth">QCalendar::daysInMonth</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#maximumDaysInMonth">QCalendar::maximumDaysInMonth</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#minimumDaysInMonth">QCalendar::minimumDaysInMonth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="daysInMonth-1">
<db:title>int QDate::daysInMonth() const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="daysInYear">
<db:title>int QDate::daysInYear(QCalendar <db:emphasis>cal</db:emphasis>) const</db:title>
<db:para>Returns the number of days in the year for this date.</db:para>
<db:para>Uses <db:code role="parameter">cal</db:code> as calendar if supplied, else the Gregorian calendar (for which the result is 365 or 366). Returns 0 if the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#day-1">day</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#daysInMonth-1">daysInMonth</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#daysInYear">QCalendar::daysInYear</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#maximumMonthsInYear">QCalendar::maximumMonthsInYear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="daysInYear-1">
<db:title>int QDate::daysInYear() const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="daysTo">
<db:title>qint64 QDate::daysTo(QDate <db:emphasis>d</db:emphasis>) const</db:title>
<db:para>Returns the number of days from this date to <db:code role="parameter">d</db:code> (which is negative if <db:code role="parameter">d</db:code> is earlier than this date).</db:para>
<db:para>Returns 0 if either date is invalid.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDate d1(1995, 5, 17);  // May 17, 1995
QDate d2(1995, 5, 20);  // May 20, 1995
d1.daysTo(d2);          // returns 3
d2.daysTo(d1);          // returns -3
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#addDays">addDays</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endOfDay">
<db:title>QDateTime QDate::endOfDay(const QTimeZone &amp;<db:emphasis>zone</db:emphasis>) const</db:title>
<db:para>Returns the end-moment of the day.</db:para>
<db:para>When a day ends depends on a how time is described: each day starts and ends earlier for those in time-zones further west and later for those in time-zones further east. The time representation to use can be specified by an optional time <db:code role="parameter">zone</db:code>. The default time representation is the system's local time.</db:para>
<db:para>Usually, the end of the day is one millisecond before the midnight, 24:00: however, if a time-zone transition causes the given date to skip over that moment (e.g. a DST spring-forward skipping over 23:00 and the following hour), the actual latest time in the day is returned. This can only arise when the time representation is a time-zone or local time.</db:para>
<db:para>When <db:code role="parameter">zone</db:code> has a timeSpec() of <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> or <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>, the time representation has no transitions so the end of the day is <db:link xlink:href="qtime.xml">QTime</db:link>(23, 59, 59, 999).</db:para>
<db:para>In the rare case of a date that was entirely skipped (this happens when a zone east of the international date-line switches to being west of it), the return shall be invalid. Passing an invalid time-zone as <db:code role="parameter">zone</db:code> will also produce an invalid result, as shall dates that end outside the range representable by <db:link xlink:href="qdatetime.xml">QDateTime</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#startOfDay-1">startOfDay</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endOfDay-1">
<db:title>[since 6.5] QDateTime QDate::endOfDay() const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="fromJulianDay">
<db:title>[static constexpr] QDate QDate::fromJulianDay(qint64 <db:emphasis>jd</db:emphasis>)</db:title>
<db:para>Converts the Julian day <db:code role="parameter">jd</db:code> to a <db:link xlink:href="qdate.xml">QDate</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#toJulianDay">toJulianDay</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromStdSysDays">
<db:title>[static constexpr noexcept, since 6.4] QDate QDate::fromStdSysDays(const std::chrono::sys_days &amp;<db:emphasis>days</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qdate.xml">QDate</db:link> <db:code role="parameter">days</db:code> days after January 1st, 1970 (the UNIX epoch). If <db:code role="parameter">days</db:code> is negative, the returned date will be before the epoch.</db:para>
<db:note>
<db:para>This function requires C++20.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#toStdSysDays">toStdSysDays</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromString">
<db:title>[static] QDate QDate::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, Qt::DateFormat <db:emphasis>format</db:emphasis> = Qt::TextDate)</db:title>
<db:para>Returns the <db:link xlink:href="qdate.xml">QDate</db:link> represented by the <db:code role="parameter">string</db:code>, using the <db:code role="parameter">format</db:code> given, or an invalid date if the string cannot be parsed.</db:para>
<db:para>Note for <db:link xlink:href="qt.xml#DateFormat-enum">Qt::TextDate</db:link>: only English month names (e.g. &quot;Jan&quot; in short form or &quot;January&quot; in long form) are recognized.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#toString">toString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toDate">QLocale::toDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromString-1">
<db:title>[static] QDate QDate::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, const QString &amp;<db:emphasis>format</db:emphasis>, int <db:emphasis>baseYear</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>)</db:title>
<db:para>Returns the <db:link xlink:href="qdate.xml">QDate</db:link> represented by the <db:code role="parameter">string</db:code>, using the <db:code role="parameter">format</db:code> given, or an invalid date if the string cannot be parsed.</db:para>
<db:para>Uses <db:code role="parameter">cal</db:code> as calendar if supplied, else the Gregorian calendar. Ranges of values in the format descriptions below are for the latter; they may be different for other calendars.</db:para>
<db:para>These expressions may be used for the format:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Expression</db:para>
</db:th>
<db:th>
<db:para>Output</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>d</db:para>
</db:td>
<db:td>
<db:para>The day as a number without a leading zero (1 to 31)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dd</db:para>
</db:td>
<db:td>
<db:para>The day as a number with a leading zero (01 to 31)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ddd</db:para>
</db:td>
<db:td>
<db:para>The abbreviated day name ('Mon' to 'Sun').</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dddd</db:para>
</db:td>
<db:td>
<db:para>The long day name ('Monday' to 'Sunday').</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>M</db:para>
</db:td>
<db:td>
<db:para>The month as a number without a leading zero (1 to 12)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MM</db:para>
</db:td>
<db:td>
<db:para>The month as a number with a leading zero (01 to 12)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MMM</db:para>
</db:td>
<db:td>
<db:para>The abbreviated month name ('Jan' to 'Dec').</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MMMM</db:para>
</db:td>
<db:td>
<db:para>The long month name ('January' to 'December').</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>yy</db:para>
</db:td>
<db:td>
<db:para>The year as a two digit number (00 to 99)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>yyyy</db:para>
</db:td>
<db:td>
<db:para>The year as a four digit number, possibly plus a leading minus sign for negative years.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>Day and month names must be given in English (C locale). If localized month and day names are to be recognized, use <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().toDate().</db:para>
</db:note>
<db:para>All other input characters will be treated as text. Any non-empty sequence of characters enclosed in single quotes will also be treated (stripped of the quotes) as text and not be interpreted as expressions. For example:</db:para>
<db:programlisting language="cpp">QDate date = QDate::fromString(&quot;1MM12car2003&quot;, &quot;d'MM'MMcaryyyy&quot;);
// date is 1 December 2003
</db:programlisting>
<db:para>If the format is not satisfied, an invalid <db:link xlink:href="qdate.xml">QDate</db:link> is returned. The expressions that don't expect leading zeroes (d, M) will be greedy. This means that they will use two digits even if this will put them outside the accepted range of values and leaves too few digits for other sections. For example, the following format string could have meant January 30 but the M will grab two digits, resulting in an invalid date:</db:para>
<db:programlisting language="cpp">QDate date = QDate::fromString(&quot;130&quot;, &quot;Md&quot;); // invalid
</db:programlisting>
<db:para>For any field that is not represented in the format the following defaults are used:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Field</db:para>
</db:th>
<db:th>
<db:para>Default value</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Year</db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">baseYear</db:code> (or 1900)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Month</db:para>
</db:td>
<db:td>
<db:para>1 (January)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Day</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>When <db:code role="parameter">format</db:code> only specifies the last two digits of a year, the 100 years starting at <db:code role="parameter">baseYear</db:code> are the candidates first considered. Prior to 6.7 there was no <db:code role="parameter">baseYear</db:code> parameter and 1900 was always used. This is the default for <db:code role="parameter">baseYear</db:code>, selecting a year from then to 1999. Passing 1976 as <db:code role="parameter">baseYear</db:code> will select a year from 1976 through 2075, for example. When the format also includes month, day (of month) and day-of-week, these suffice to imply the century. In such a case, a matching date is selected in the nearest century to the one indicated by <db:code role="parameter">baseYear</db:code>, prefering later over earlier. See <db:link xlink:href="qcalendar.xml#matchCenturyToWeekday">QCalendar::matchCenturyToWeekday</db:link>() and <db:link xlink:href="#date-ambiguities">Date ambiguities</db:link> for further details,</db:para>
<db:para>The following examples demonstrate the default values:</db:para>
<db:programlisting language="cpp">QDate::fromString(&quot;1.30&quot;, &quot;M.d&quot;);           // January 30 1900
QDate::fromString(&quot;20000110&quot;, &quot;yyyyMMdd&quot;);  // January 10, 2000
QDate::fromString(&quot;20000110&quot;, &quot;yyyyMd&quot;);    // January 10, 2000
</db:programlisting>
<db:note>
<db:para>If a format character is repeated more times than the longest expression in the table above using it, this part of the format will be read as several expressions with no separator between them; the longest above, possibly repeated as many times as there are copies of it, ending with a residue that may be a shorter expression. Thus 'MMMMMMMMMM' would match &quot;MayMay05&quot; and set the month to May. Likewise, 'MMMMMM' would match &quot;May08&quot; and find it inconsistent, leading to an invalid date.</db:para>
</db:note>
<db:section xml:id="date-ambiguities">
<db:title>Date ambiguities</db:title>
<db:para>Different cultures use different formats for dates and, as a result, users may mix up the order in which date fields should be given. For example, &quot;Wed 28-Nov-01&quot; might mean either 2028 November 1st or the 28th of November, 2001 (each of which happens to be a Wednesday). Using format &quot;ddd yy-MMM-dd&quot; it shall be interpreted the first way, using &quot;ddd dd-MMM-yy&quot; the second. However, which the user meant may depend on the way the user normally writes dates, rather than the format the code was expecting.</db:para>
<db:para>The example considered above mixed up day of the month and a two-digit year. Similar confusion can arise over interchanging the month and day of the month, when both are given as numbers. In these cases, including a day of the week field in the date format can provide some redundancy, that may help to catch errors of this kind. However, as in the example above, this is not always effective: the interchange of two fields (or their meanings) may produce dates with the same day of the week.</db:para>
<db:para>Including a day of the week in the format can also resolve the century of a date specified using only the last two digits of its year. Unfortunately, when combined with a date in which the user (or other source of data) has mixed up two of the fields, this resolution can lead to finding a date which does match the format's reading but isn't the one intended by its author. Likewise, if the user simply gets the day of the week wrong, in an otherwise correct date, this can lead a date in a different century. In each case, finding a date in a different century can turn a wrongly-input date into a wildly different one.</db:para>
<db:para>The best way to avoid date ambiguities is to use four-digit years and months specified by name (whether full or abbreviated), ideally collected via user interface idioms that make abundantly clear to the user which part of the date they are selecting. Including a day of the week can also help by providing the means to check consistency of the data. Where data comes from the user, using a format supplied by a locale selected by the user, it is best to use a long format as short formats are more likely to use two-digit years. Of course, it is not always possible to control the format - data may come from a source you do not control, for example.</db:para>
<db:para>As a result of these possible sources of confusion, particularly when you cannot be sure an unambiguous format is in use, it is important to check that the result of reading a string as a date is not just valid but reasonable for the purpose for which it was supplied. If the result is outside some range of reasonable values, it may be worth getting the user to confirm their date selection, showing the date read from the string in a long format that does include month name and four-digit year, to make it easier for them to recognize any errors.</db:para>
</db:section>
<db:section>
<db:title>Notes</db:title>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#toString">toString</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#fromString">QDateTime::fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#fromString">QTime::fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toDate">QLocale::toDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromString-2">
<db:title>[static, since 6.0] QDate QDate::fromString(QStringView <db:emphasis>string</db:emphasis>, Qt::DateFormat <db:emphasis>format</db:emphasis> = Qt::TextDate)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="fromString-3">
<db:title>[static, since 6.0] QDate QDate::fromString(QStringView <db:emphasis>string</db:emphasis>, QStringView <db:emphasis>format</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="fromString-4">
<db:title>[static, since 6.7] QDate QDate::fromString(QStringView <db:emphasis>string</db:emphasis>, QStringView <db:emphasis>format</db:emphasis>, int <db:emphasis>baseYear</db:emphasis> = QLocale::DefaultTwoDigitBaseYear)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Uses a default-constructed <db:link xlink:href="qcalendar.xml">QCalendar</db:link>.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="fromString-5">
<db:title>[static, since 6.0] QDate QDate::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, QStringView <db:emphasis>format</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="fromString-6">
<db:title>[static, since 6.7] QDate QDate::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, QStringView <db:emphasis>format</db:emphasis>, int <db:emphasis>baseYear</db:emphasis> = QLocale::DefaultTwoDigitBaseYear)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Uses a default-constructed <db:link xlink:href="qcalendar.xml">QCalendar</db:link>.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="fromString-7">
<db:title>[static] QDate QDate::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, const QString &amp;<db:emphasis>format</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="fromString-8">
<db:title>[static, since 6.7] QDate QDate::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, const QString &amp;<db:emphasis>format</db:emphasis>, int <db:emphasis>baseYear</db:emphasis> = QLocale::DefaultTwoDigitBaseYear)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Uses a default-constructed <db:link xlink:href="qcalendar.xml">QCalendar</db:link>.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="fromString-9">
<db:title>[static, since 6.7] QDate QDate::fromString(QStringView <db:emphasis>string</db:emphasis>, QStringView <db:emphasis>format</db:emphasis>, int <db:emphasis>baseYear</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="fromString-10">
<db:title>[static, since 6.0] QDate QDate::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, QStringView <db:emphasis>format</db:emphasis>, int <db:emphasis>baseYear</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="getDate">
<db:title>void QDate::getDate(int *<db:emphasis>year</db:emphasis>, int *<db:emphasis>month</db:emphasis>, int *<db:emphasis>day</db:emphasis>) const</db:title>
<db:para>Extracts the date's year, month, and day, and assigns them to *<db:code role="parameter">year</db:code>, *<db:code role="parameter">month</db:code>, and *<db:code role="parameter">day</db:code>. The pointers may be null.</db:para>
<db:para>Returns 0 if the date is invalid.</db:para>
<db:note>
<db:para>In Qt versions prior to 5.7, this function is marked as non-const.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#year-1">year</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#month-1">month</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#day-1">day</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#partsFromDate">QCalendar::partsFromDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isLeapYear">
<db:title>[static] bool QDate::isLeapYear(int <db:emphasis>year</db:emphasis>)</db:title>
<db:para>Returns true if the specified <db:code role="parameter">year</db:code> is a leap year in the Gregorian calendar; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcalendar.xml#isLeapYear">QCalendar::isLeapYear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>[constexpr] bool QDate::isNull() const</db:title>
<db:para>Returns true if the date is null; otherwise returns false. A null date is invalid.</db:para>
<db:note>
<db:para>The behavior of this function is equivalent to <db:link xlink:href="qdate.xml#isValid">isValid</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>[constexpr] bool QDate::isValid() const</db:title>
<db:para>Returns true if this date is valid; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#isDateValid">QCalendar::isDateValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid-1">
<db:title>[static] bool QDate::isValid(int <db:emphasis>year</db:emphasis>, int <db:emphasis>month</db:emphasis>, int <db:emphasis>day</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns true if the specified date (<db:code role="parameter">year</db:code>, <db:code role="parameter">month</db:code>, and <db:code role="parameter">day</db:code>) is valid in the Gregorian calendar; otherwise returns false.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDate::isValid(2002, 5, 17);  // true
QDate::isValid(2002, 2, 30);  // false (Feb 30 does not exist)
QDate::isValid(2004, 2, 29);  // true (2004 is a leap year)
QDate::isValid(2000, 2, 29);  // true (2000 is a leap year)
QDate::isValid(2006, 2, 29);  // false (2006 is not a leap year)
QDate::isValid(2100, 2, 29);  // false (2100 is not a leap year)
QDate::isValid(1202, 6, 6);   // true (even though 1202 is pre-Gregorian)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#setDate">setDate</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#isDateValid">QCalendar::isDateValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="month">
<db:title>int QDate::month(QCalendar <db:emphasis>cal</db:emphasis>) const</db:title>
<db:para>Returns the month-number for the date.</db:para>
<db:para>Numbers the months of the year starting with 1 for the first. Uses <db:code role="parameter">cal</db:code> as calendar if supplied, else the Gregorian calendar, for which the month numbering is as follows:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>1 = &quot;January&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>2 = &quot;February&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>3 = &quot;March&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>4 = &quot;April&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>5 = &quot;May&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>6 = &quot;June&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>7 = &quot;July&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>8 = &quot;August&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>9 = &quot;September&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>10 = &quot;October&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>11 = &quot;November&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>12 = &quot;December&quot;</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Returns 0 if the date is invalid. Note that some calendars may have more than 12 months in some years.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#year-1">year</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#day-1">day</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#partsFromDate">QCalendar::partsFromDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="month-1">
<db:title>int QDate::month() const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setDate">
<db:title>bool QDate::setDate(int <db:emphasis>year</db:emphasis>, int <db:emphasis>month</db:emphasis>, int <db:emphasis>day</db:emphasis>)</db:title>
<db:para>Sets this to represent the date, in the Gregorian calendar, with the given <db:code role="parameter">year</db:code>, <db:code role="parameter">month</db:code> and <db:code role="parameter">day</db:code> numbers. Returns true if the resulting date is valid, otherwise it sets this to represent an invalid date and returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#dateFromParts">QCalendar::dateFromParts</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDate-1">
<db:title>bool QDate::setDate(int <db:emphasis>year</db:emphasis>, int <db:emphasis>month</db:emphasis>, int <db:emphasis>day</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>)</db:title>
<db:para>Sets this to represent the date, in the given calendar <db:code role="parameter">cal</db:code>, with the given <db:code role="parameter">year</db:code>, <db:code role="parameter">month</db:code> and <db:code role="parameter">day</db:code> numbers. Returns true if the resulting date is valid, otherwise it sets this to represent an invalid date and returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#dateFromParts">QCalendar::dateFromParts</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startOfDay">
<db:title>QDateTime QDate::startOfDay(const QTimeZone &amp;<db:emphasis>zone</db:emphasis>) const</db:title>
<db:para>Returns the start-moment of the day.</db:para>
<db:para>When a day starts depends on a how time is described: each day starts and ends earlier for those in time-zones further west and later for those in time-zones further east. The time representation to use can be specified by an optional time <db:code role="parameter">zone</db:code>. The default time representation is the system's local time.</db:para>
<db:para>Usually, the start of the day is midnight, 00:00: however, if a time-zone transition causes the given date to skip over that midnight (e.g. a DST spring-forward skipping over the first hour of the day day), the actual earliest time in the day is returned. This can only arise when the time representation is a time-zone or local time.</db:para>
<db:para>When <db:code role="parameter">zone</db:code> has a timeSpec() of is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> or <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>, the time representation has no transitions so the start of the day is <db:link xlink:href="qtime.xml">QTime</db:link>(0, 0).</db:para>
<db:para>In the rare case of a date that was entirely skipped (this happens when a zone east of the international date-line switches to being west of it), the return shall be invalid. Passing an invalid time-zone as <db:code role="parameter">zone</db:code> will also produce an invalid result, as shall dates that start outside the range representable by <db:link xlink:href="qdatetime.xml">QDateTime</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#endOfDay-1">endOfDay</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startOfDay-1">
<db:title>[since 6.5] QDateTime QDate::startOfDay() const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="toJulianDay">
<db:title>[constexpr] qint64 QDate::toJulianDay() const</db:title>
<db:para>Converts the date to a Julian day.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#fromJulianDay">fromJulianDay</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toStdSysDays">
<db:title>[constexpr noexcept] std::chrono::sys_days QDate::toStdSysDays() const</db:title>
<db:para>Returns the number of days between January 1st, 1970 (the UNIX epoch) and this date, represented as a std::chrono::sys_days object. If this date is before the epoch, the number of days will be negative.</db:para>
<db:note>
<db:para>This function requires C++20.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#fromStdSysDays">fromStdSysDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#daysTo">daysTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString-2">
<db:title>QString QDate::toString(QStringView <db:emphasis>format</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="toString-3">
<db:title>QString QDate::toString(Qt::DateFormat <db:emphasis>format</db:emphasis> = Qt::TextDate) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the date as a string. The <db:code role="parameter">format</db:code> parameter determines the format of the string.</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::TextDate</db:link>, the string is formatted in the default way. The day and month names will be in English. An example of this formatting is &quot;Sat May 20 1995&quot;. For localized formatting, see <db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>().</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::ISODate</db:link>, the string format corresponds to the ISO 8601 extended specification for representations of dates and times, taking the form yyyy-MM-dd, where yyyy is the year, MM is the month of the year (between 01 and 12), and dd is the day of the month between 01 and 31.</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::RFC2822Date</db:link>, the string is formatted in an <db:link xlink:href="https://datatracker.ietf.org/doc/html/rfc2822">RFC 2822</db:link> compatible way. An example of this formatting is &quot;20 May 1995&quot;.</db:para>
<db:para>If the date is invalid, an empty string will be returned.</db:para>
<db:warning>
<db:para>The <db:link xlink:href="qt.xml#DateFormat-enum">Qt::ISODate</db:link> format is only valid for years in the range 0 to 9999.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#fromString">fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString-4">
<db:title>QString QDate::toString(const QString &amp;<db:emphasis>format</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="weekNumber">
<db:title>int QDate::weekNumber(int *<db:emphasis>yearNumber</db:emphasis> = nullptr) const</db:title>
<db:para>Returns the ISO 8601 week number (1 to 53).</db:para>
<db:para>Returns 0 if the date is invalid. Otherwise, returns the week number for the date. If <db:code role="parameter">yearNumber</db:code> is not nullptr (its default), stores the year as *<db:code role="parameter">yearNumber</db:code>.</db:para>
<db:para>In accordance with ISO 8601, each week falls in the year to which most of its days belong, in the Gregorian calendar. As ISO 8601's week starts on Monday, this is the year in which the week's Thursday falls. Most years have 52 weeks, but some have 53.</db:para>
<db:note>
<db:para>*<db:code role="parameter">yearNumber</db:code> is not always the same as <db:link xlink:href="qdate.xml#year-1">year</db:link>(). For example, 1 January 2000 has week number 52 in the year 1999, and 31 December 2002 has week number 1 in the year 2003.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="year">
<db:title>int QDate::year(QCalendar <db:emphasis>cal</db:emphasis>) const</db:title>
<db:para>Returns the year of this date.</db:para>
<db:para>Uses <db:code role="parameter">cal</db:code> as calendar, if supplied, else the Gregorian calendar.</db:para>
<db:para>Returns 0 if the date is invalid. For some calendars, dates before their first year may all be invalid.</db:para>
<db:para>If using a calendar which has a year 0, check using <db:link xlink:href="qdate.xml#isValid">isValid</db:link>() if the return is 0. Such calendars use negative year numbers in the obvious way, with year 1 preceded by year 0, in turn preceded by year -1 and so on.</db:para>
<db:para>Some calendars, despite having no year 0, have a conventional numbering of the years before their first year, counting backwards from 1. For example, in the proleptic Gregorian calendar, successive years before 1 CE (the first year) are identified as 1 BCE, 2 BCE, 3 BCE and so on. For such calendars, negative year numbers are used to indicate these years before year 1, with -1 indicating the year before 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#month-1">month</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#day-1">day</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#hasYearZero">QCalendar::hasYearZero</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#isProleptic">QCalendar::isProleptic</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#partsFromDate">QCalendar::partsFromDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="year-1">
<db:title>int QDate::year() const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>[constexpr noexcept] bool operator!=(const QDate &amp;<db:emphasis>lhs</db:emphasis>, const QDate &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> represent distinct days; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt">
<db:title>[constexpr noexcept] bool operator&lt;(const QDate &amp;<db:emphasis>lhs</db:emphasis>, const QDate &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is earlier than <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, QDate <db:emphasis>date</db:emphasis>)</db:title>
<db:para>Writes the <db:code role="parameter">date</db:code> to stream <db:code role="parameter">out</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-eq">
<db:title>[constexpr noexcept] bool operator&lt;=(const QDate &amp;<db:emphasis>lhs</db:emphasis>, const QDate &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is earlier than or equal to <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[constexpr noexcept] bool operator==(const QDate &amp;<db:emphasis>lhs</db:emphasis>, const QDate &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> represent the same day, otherwise false.</db:para>
</db:section>
<db:section xml:id="operator-gt">
<db:title>[constexpr noexcept] bool operator&gt;(const QDate &amp;<db:emphasis>lhs</db:emphasis>, const QDate &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is later than <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq">
<db:title>[constexpr noexcept] bool operator&gt;=(const QDate &amp;<db:emphasis>lhs</db:emphasis>, const QDate &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is later than or equal to <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-1">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QDate &amp;<db:emphasis>date</db:emphasis>)</db:title>
<db:para>Reads a date from stream <db:code role="parameter">in</db:code> into the <db:code role="parameter">date</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QDate</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qdate.xml">QDate</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="endOfDay-2">
<db:title>[deprecated in 6.9] QDateTime QDate::endOfDay(Qt::TimeSpec <db:emphasis>spec</db:emphasis>, int <db:emphasis>offsetSeconds</db:emphasis> = 0) const</db:title>
<db:para>This function is deprecated since 6.9. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Use endOfDay(const QTimeZone &amp;) instead. Returns the end-moment of the day. When a day ends depends on a how time is described: each day starts and ends earlier for those with higher offsets from UTC and later for those with lower offsets from UTC. The time representation to use can be specified either by a \a spec and \a offsetSeconds (ignored unless \a spec is Qt::OffsetSeconds) or by a time zone. Usually, the end of the day is one millisecond before the midnight, 24:00: however, if a local time transition causes the given date to skip over that moment (e.g. a DST spring-forward skipping over 23:00 and the following hour), the actual latest time in the day is returned. When \a spec is Qt::OffsetFromUTC, \a offsetSeconds gives the implied zone's offset from UTC. As UTC and such zones have no transitions, the end of the day is QTime(23, 59, 59, 999) in these cases. In the rare case of a date that was entirely skipped (this happens when a zone east of the international date-line switches to being west of it), the return shall be invalid. Passing Qt::TimeZone as \a spec (instead of passing a QTimeZone) will also produce an invalid result, as shall dates that end outside the range representable by QDateTime.</db:para>
</db:section>
<db:section xml:id="startOfDay-2">
<db:title>[deprecated in 6.9] QDateTime QDate::startOfDay(Qt::TimeSpec <db:emphasis>spec</db:emphasis>, int <db:emphasis>offsetSeconds</db:emphasis> = 0) const</db:title>
<db:para>This function is deprecated since 6.9. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Use startOfDay(const QTimeZone &amp;) instead.</db:para>
<db:para>Returns the start-moment of the day.</db:para>
<db:para>When a day starts depends on a how time is described: each day starts and ends earlier for those with higher offsets from UTC and later for those with lower offsets from UTC. The time representation to use can be specified either by a <db:code role="parameter">spec</db:code> and <db:code role="parameter">offsetSeconds</db:code> (ignored unless <db:code role="parameter">spec</db:code> is Qt::OffsetSeconds) or by a time zone.</db:para>
<db:para>Usually, the start of the day is midnight, 00:00: however, if a local time transition causes the given date to skip over that midnight (e.g. a DST spring-forward skipping over the first hour of the day day), the actual earliest time in the day is returned.</db:para>
<db:para>When <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link>, <db:code role="parameter">offsetSeconds</db:code> gives an implied zone's offset from UTC. As UTC and such zones have no transitions, the start of the day is <db:link xlink:href="qtime.xml">QTime</db:link>(0, 0) in these cases.</db:para>
<db:para>In the rare case of a date that was entirely skipped (this happens when a zone east of the international date-line switches to being west of it), the return shall be invalid. Passing <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> as <db:code role="parameter">spec</db:code> (instead of passing a <db:link xlink:href="qtimezone.xml">QTimeZone</db:link>) will also produce an invalid result, as shall dates that start outside the range representable by <db:link xlink:href="qdatetime.xml">QDateTime</db:link>.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
