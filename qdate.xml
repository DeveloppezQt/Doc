<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDate Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdate.xml">QDate</db:link> class provides date functions.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDate</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qdate.xml">QDate</db:link> object contains a calendar date, i.e. year, month, and day numbers, in the Gregorian calendar. It can read the current date from the system clock. It provides functions for comparing dates, and for manipulating dates. For example, it is possible to add and subtract days, months, and years to dates.</db:para>
<db:para>A <db:link xlink:href="qdate.xml">QDate</db:link> object is typically created by giving the year, month, and day numbers explicitly. Note that <db:link xlink:href="qdate.xml">QDate</db:link> interprets two digit years as is, i.e., years 0 - 99. A <db:link xlink:href="qdate.xml">QDate</db:link> can also be constructed with the static function <db:link xlink:href="qdate.xml#currentDate">currentDate</db:link>(), which creates a <db:link xlink:href="qdate.xml">QDate</db:link> object containing the system clock's date. An explicit date can also be set using <db:link xlink:href="qdate.xml#setDate">setDate</db:link>(). The fromString() function returns a <db:link xlink:href="qdate.xml">QDate</db:link> given a string and a date format which is used to interpret the date within the string.</db:para>
<db:para>The <db:link xlink:href="qdate.xml#year">year</db:link>(), <db:link xlink:href="qdate.xml#month">month</db:link>(), and <db:link xlink:href="qdate.xml#day">day</db:link>() functions provide access to the year, month, and day numbers. Also, <db:link xlink:href="qdate.xml#dayOfWeek">dayOfWeek</db:link>() and <db:link xlink:href="qdate.xml#dayOfYear">dayOfYear</db:link>() functions are provided. The same information is provided in textual format by the toString(), shortDayName(), longDayName(), shortMonthName(), and longMonthName() functions.</db:para>
<db:para><db:link xlink:href="qdate.xml">QDate</db:link> provides a full set of operators to compare two <db:link xlink:href="qdate.xml">QDate</db:link> objects where smaller means earlier, and larger means later.</db:para>
<db:para>You can increment (or decrement) a date by a given number of days using <db:link xlink:href="qdate.xml#addDays">addDays</db:link>(). Similarly you can use <db:link xlink:href="qdate.xml#addMonths">addMonths</db:link>() and <db:link xlink:href="qdate.xml#addYears">addYears</db:link>(). The <db:link xlink:href="qdate.xml#daysTo">daysTo</db:link>() function returns the number of days between two dates.</db:para>
<db:para>The <db:link xlink:href="qdate.xml#daysInMonth">daysInMonth</db:link>() and <db:link xlink:href="qdate.xml#daysInYear">daysInYear</db:link>() functions return how many days there are in this date's month and year, respectively. The <db:link xlink:href="qdate.xml#isLeapYear">isLeapYear</db:link>() function indicates whether a date is in a leap year.</db:para>
<db:section xml:id="no-year-0">
<db:title></db:title><db:section xml:id="no-year-0-no-year-0-1">
<db:title>No Year 0</db:title>
<db:para>There is no year 0. Dates in that year are considered invalid. The year -1 is the year &quot;1 before Christ&quot; or &quot;1 before current era.&quot; The day before 1 January 1 CE is 31 December 1 BCE.</db:para>
</db:section>
<db:section xml:id="range-of-valid-dates">
<db:title>Range of Valid Dates</db:title>
<db:para>Dates are stored internally as a Julian Day number, an integer count of every day in a contiguous range, with 24 November 4714 BCE in the Gregorian calendar being Julian Day 0 (1 January 4713 BCE in the Julian calendar). As well as being an efficient and accurate way of storing an absolute date, it is suitable for converting a Date into other calendar systems such as Hebrew, Islamic or Chinese. The Julian Day number can be obtained using QDate::toJulianDay() and can be set using QDate::fromJulianDay().</db:para>
<db:para>The range of dates able to be stored by <db:link xlink:href="qdate.xml">QDate</db:link> as a Julian Day number is for technical reasons limited to between -784350574879 and 784354017364, which means from before 2 billion BCE to after 2 billion CE.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml">QTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:member>
<db:member>QDateEdit</db:member>
<db:member>QDateTimeEdit</db:member>
<db:member>QCalendarWidget</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="MonthNameType-enum">
<db:title>[since 4.5] enum QDate::MonthNameType</db:title>
<db:para>This enum describes the types of the string representation used for the month name.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdate.xml">QDate</db:link></db:emphasis>::DateFormat</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>This type of name can be used for date-to-string formatting.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdate.xml">QDate</db:link></db:emphasis>::StandaloneFormat</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This type is used when you need to enumerate months or weekdays. Usually standalone names are represented in singular forms with capitalized first letter.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 4.5.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDate">
<db:title>[constexpr] QDate::QDate()</db:title>
<db:para>Constructs a null date. Null dates are invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDate-1">
<db:title>QDate::QDate(int <db:emphasis>y</db:emphasis>, int <db:emphasis>m</db:emphasis>, int <db:emphasis>d</db:emphasis>)</db:title>
<db:para>Constructs a date with year <db:code role="parameter">y</db:code>, month <db:code role="parameter">m</db:code> and day <db:code role="parameter">d</db:code>.</db:para>
<db:para>If the specified date is invalid, the date is not set and <db:link xlink:href="qdate.xml#isValid">isValid</db:link>() returns false.</db:para>
<db:warning>
<db:para>Years 1 to 99 are interpreted as is. Year 0 is invalid.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addDays">
<db:title>QDate QDate::addDays(qint64 <db:emphasis>ndays</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdate.xml">QDate</db:link> object containing a date <db:code role="parameter">ndays</db:code> later than the date of this object (or earlier if <db:code role="parameter">ndays</db:code> is negative).</db:para>
<db:para>Returns a null date if the current date is invalid or the new date is out of range.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#addMonths">addMonths</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#addYears">addYears</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#daysTo">daysTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMonths">
<db:title>QDate QDate::addMonths(int <db:emphasis>nmonths</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdate.xml">QDate</db:link> object containing a date <db:code role="parameter">nmonths</db:code> later than the date of this object (or earlier if <db:code role="parameter">nmonths</db:code> is negative).</db:para>
<db:note>
<db:para>If the ending day/month combination does not exist in the resulting month/year, this function will return a date that is the latest valid date.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#addYears">addYears</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addYears">
<db:title>QDate QDate::addYears(int <db:emphasis>nyears</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdate.xml">QDate</db:link> object containing a date <db:code role="parameter">nyears</db:code> later than the date of this object (or earlier if <db:code role="parameter">nyears</db:code> is negative).</db:para>
<db:note>
<db:para>If the ending day/month combination does not exist in the resulting year (i.e., if the date was Feb 29 and the final year is not a leap year), this function will return a date that is the latest valid date (that is, Feb 28).</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#addMonths">addMonths</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentDate">
<db:title>[static] QDate QDate::currentDate()</db:title>
<db:para>Returns the current date, as reported by the system clock.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QTime::currentTime()</db:link></db:member>
<db:member><db:link xlink:href="">QDateTime::currentDateTime()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="day">
<db:title>int QDate::day() const</db:title>
<db:para>Returns the day of the month (1 to 31) of this date.</db:para>
<db:para>Returns 0 if the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#year">year</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#month">month</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#dayOfWeek">dayOfWeek</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dayOfWeek">
<db:title>int QDate::dayOfWeek() const</db:title>
<db:para>Returns the weekday (1 = Monday to 7 = Sunday) for this date.</db:para>
<db:para>Returns 0 if the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#day">day</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#dayOfYear">dayOfYear</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#DayOfWeek-enum">Qt::DayOfWeek</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dayOfYear">
<db:title>int QDate::dayOfYear() const</db:title>
<db:para>Returns the day of the year (1 to 365 or 366 on leap years) for this date.</db:para>
<db:para>Returns 0 if the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#day">day</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#dayOfWeek">dayOfWeek</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="daysInMonth">
<db:title>int QDate::daysInMonth() const</db:title>
<db:para>Returns the number of days in the month (28 to 31) for this date.</db:para>
<db:para>Returns 0 if the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#day">day</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#daysInYear">daysInYear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="daysInYear">
<db:title>int QDate::daysInYear() const</db:title>
<db:para>Returns the number of days in the year (365 or 366) for this date.</db:para>
<db:para>Returns 0 if the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#day">day</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#daysInMonth">daysInMonth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="daysTo">
<db:title>qint64 QDate::daysTo(const QDate &amp;<db:emphasis>d</db:emphasis>) const</db:title>
<db:para>Returns the number of days from this date to <db:code role="parameter">d</db:code> (which is negative if <db:code role="parameter">d</db:code> is earlier than this date).</db:para>
<db:para>Returns 0 if either date is invalid.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDate d1(1995, 5, 17);  // May 17, 1995
QDate d2(1995, 5, 20);  // May 20, 1995
d1.daysTo(d2);          // returns 3
d2.daysTo(d1);          // returns -3
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#addDays">addDays</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromJulianDay">
<db:title>[static constexpr] QDate QDate::fromJulianDay(qint64 <db:emphasis>jd</db:emphasis>)</db:title>
<db:para>Converts the Julian day <db:code role="parameter">jd</db:code> to a <db:link xlink:href="qdate.xml">QDate</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#toJulianDay">toJulianDay</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getDate">
<db:title>[since 4.5] void QDate::getDate(int *<db:emphasis>year</db:emphasis>, int *<db:emphasis>month</db:emphasis>, int *<db:emphasis>day</db:emphasis>)</db:title>
<db:para>Extracts the date's year, month, and day, and assigns them to *<db:code role="parameter">year</db:code>, *<db:code role="parameter">month</db:code>, and *<db:code role="parameter">day</db:code>. The pointers may be null.</db:para>
<db:para>Returns 0 if the date is invalid.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#year">year</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#month">month</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#day">day</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isLeapYear">
<db:title>[static] bool QDate::isLeapYear(int <db:emphasis>year</db:emphasis>)</db:title>
<db:para>Returns true if the specified <db:code role="parameter">year</db:code> is a leap year; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>[constexpr] bool QDate::isNull() const</db:title>
<db:para>Returns true if the date is null; otherwise returns false. A null date is invalid.</db:para>
<db:note>
<db:para>The behavior of this function is equivalent to <db:link xlink:href="qdate.xml#isValid">isValid</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>[constexpr] bool QDate::isValid() const</db:title>
<db:para>Returns true if this date is valid; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid-1">
<db:title>[static] bool QDate::isValid(int <db:emphasis>year</db:emphasis>, int <db:emphasis>month</db:emphasis>, int <db:emphasis>day</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns true if the specified date (<db:code role="parameter">year</db:code>, <db:code role="parameter">month</db:code>, and <db:code role="parameter">day</db:code>) is valid; otherwise returns false.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDate::isValid(2002, 5, 17);  // true
QDate::isValid(2002, 2, 30);  // false (Feb 30 does not exist)
QDate::isValid(2004, 2, 29);  // true (2004 is a leap year)
QDate::isValid(2000, 2, 29);  // true (2000 is a leap year)
QDate::isValid(2006, 2, 29);  // false (2006 is not a leap year)
QDate::isValid(2100, 2, 29);  // false (2100 is not a leap year)
QDate::isValid(1202, 6, 6);   // true (even though 1202 is pre-Gregorian)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#setDate">setDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="month">
<db:title>int QDate::month() const</db:title>
<db:para>Returns the number corresponding to the month of this date, using the following convention:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>1 = &quot;January&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>2 = &quot;February&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>3 = &quot;March&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>4 = &quot;April&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>5 = &quot;May&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>6 = &quot;June&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>7 = &quot;July&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>8 = &quot;August&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>9 = &quot;September&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>10 = &quot;October&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>11 = &quot;November&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>12 = &quot;December&quot;</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Returns 0 if the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#year">year</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#day">day</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDate">
<db:title>[since 4.2] bool QDate::setDate(int <db:emphasis>year</db:emphasis>, int <db:emphasis>month</db:emphasis>, int <db:emphasis>day</db:emphasis>)</db:title>
<db:para>Sets the date's <db:code role="parameter">year</db:code>, <db:code role="parameter">month</db:code>, and <db:code role="parameter">day</db:code>. Returns true if the date is valid; otherwise returns false.</db:para>
<db:para>If the specified date is invalid, the <db:link xlink:href="qdate.xml">QDate</db:link> object is set to be invalid.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toJulianDay">
<db:title>[constexpr] qint64 QDate::toJulianDay() const</db:title>
<db:para>Converts the date to a Julian day.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#fromJulianDay">fromJulianDay</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="weekNumber">
<db:title>int QDate::weekNumber(int *<db:emphasis>yearNumber</db:emphasis> = 0) const</db:title>
<db:para>Returns the week number (1 to 53), and stores the year in *<db:code role="parameter">yearNumber</db:code> unless <db:code role="parameter">yearNumber</db:code> is null (the default).</db:para>
<db:para>Returns 0 if the date is invalid.</db:para>
<db:para>In accordance with ISO 8601, weeks start on Monday and the first Thursday of a year is always in week 1 of that year. Most years have 52 weeks, but some have 53.</db:para>
<db:para>*<db:code role="parameter">yearNumber</db:code> is not always the same as <db:link xlink:href="qdate.xml#year">year</db:link>(). For example, 1 January 2000 has week number 52 in the year 1999, and 31 December 2002 has week number 1 in the year 2003.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="year">
<db:title>int QDate::year() const</db:title>
<db:para>Returns the year of this date. Negative numbers indicate years before 1 CE, such that year -44 is 44 BCE.</db:para>
<db:para>Returns 0 if the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#month">month</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#day">day</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>[constexpr] bool QDate::operator!=(const QDate &amp;<db:emphasis>d</db:emphasis>) const</db:title>
<db:para>Returns true if this date is different from <db:code role="parameter">d</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-lt">
<db:title>[constexpr] bool QDate::operator&lt;(const QDate &amp;<db:emphasis>d</db:emphasis>) const</db:title>
<db:para>Returns true if this date is earlier than <db:code role="parameter">d</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq">
<db:title>[constexpr] bool QDate::operator&lt;=(const QDate &amp;<db:emphasis>d</db:emphasis>) const</db:title>
<db:para>Returns true if this date is earlier than or equal to <db:code role="parameter">d</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[constexpr] bool QDate::operator==(const QDate &amp;<db:emphasis>d</db:emphasis>) const</db:title>
<db:para>Returns true if this date is equal to <db:code role="parameter">d</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-gt">
<db:title>[constexpr] bool QDate::operator&gt;(const QDate &amp;<db:emphasis>d</db:emphasis>) const</db:title>
<db:para>Returns true if this date is later than <db:code role="parameter">d</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq">
<db:title>[constexpr] bool QDate::operator&gt;=(const QDate &amp;<db:emphasis>d</db:emphasis>) const</db:title>
<db:para>Returns true if this date is later than or equal to <db:code role="parameter">d</db:code>; otherwise returns false.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, const QDate &amp;<db:emphasis>date</db:emphasis>)</db:title>
<db:para>Writes the <db:code role="parameter">date</db:code> to stream <db:code role="parameter">out</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-1">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QDate &amp;<db:emphasis>date</db:emphasis>)</db:title>
<db:para>Reads a date from stream <db:code role="parameter">in</db:code> into the <db:code role="parameter">date</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
