<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QDate Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdate.xml">QDate</db:link> class provides date functions.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDate</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qdate.xml">QDate</db:link> object contains a calendar date, i.e. year, month, and day numbers, in the Gregorian calendar. It can read the current date from the system clock. It provides functions for comparing dates, and for manipulating dates. For example, it is possible to add and subtract days, months, and years to dates.</db:para>
<db:para>A <db:link xlink:href="qdate.xml">QDate</db:link> object is typically created by giving the year, month, and day numbers explicitly. Note that <db:link xlink:href="qdate.xml">QDate</db:link> interprets two digit years as is, i.e., years 0 - 99. A <db:link xlink:href="qdate.xml">QDate</db:link> can also be constructed with the static function <db:link xlink:href="qdate.xml#currentDate">currentDate</db:link>(), which creates a <db:link xlink:href="qdate.xml">QDate</db:link> object containing the system clock's date. An explicit date can also be set using <db:link xlink:href="qdate.xml#setDate">setDate</db:link>(). The <db:link xlink:href="qdate.xml#fromString">fromString</db:link>() function returns a <db:link xlink:href="qdate.xml">QDate</db:link> given a string and a date format which is used to interpret the date within the string.</db:para>
<db:para>The <db:link xlink:href="qdate.xml#year">year</db:link>(), <db:link xlink:href="qdate.xml#month">month</db:link>(), and <db:link xlink:href="qdate.xml#day">day</db:link>() functions provide access to the year, month, and day numbers. Also, <db:link xlink:href="qdate.xml#dayOfWeek">dayOfWeek</db:link>() and <db:link xlink:href="qdate.xml#dayOfYear">dayOfYear</db:link>() functions are provided. The same information is provided in textual format by the <db:link xlink:href="qdate.xml#toString">toString</db:link>(), <db:link xlink:href="qdate.xml#shortDayName">shortDayName</db:link>(), <db:link xlink:href="qdate.xml#longDayName">longDayName</db:link>(), <db:link xlink:href="qdate.xml#shortMonthName">shortMonthName</db:link>(), and <db:link xlink:href="qdate.xml#longMonthName">longMonthName</db:link>() functions.</db:para>
<db:para><db:link xlink:href="qdate.xml">QDate</db:link> provides a full set of operators to compare two <db:link xlink:href="qdate.xml">QDate</db:link> objects where smaller means earlier, and larger means later.</db:para>
<db:para>You can increment (or decrement) a date by a given number of days using <db:link xlink:href="qdate.xml#addDays">addDays</db:link>(). Similarly you can use <db:link xlink:href="qdate.xml#addMonths">addMonths</db:link>() and <db:link xlink:href="qdate.xml#addYears">addYears</db:link>(). The <db:link xlink:href="qdate.xml#daysTo">daysTo</db:link>() function returns the number of days between two dates.</db:para>
<db:para>The <db:link xlink:href="qdate.xml#daysInMonth">daysInMonth</db:link>() and <db:link xlink:href="qdate.xml#daysInYear">daysInYear</db:link>() functions return how many days there are in this date's month and year, respectively. The <db:link xlink:href="qdate.xml#isLeapYear">isLeapYear</db:link>() function indicates whether a date is in a leap year.</db:para>
<db:section xml:id="no-year-0">
<db:title></db:title><db:section xml:id="no-year-0-no-year-0-1">
<db:title>No Year 0</db:title>
<db:para>There is no year 0. Dates in that year are considered invalid. The year -1 is the year &quot;1 before Christ&quot; or &quot;1 before current era.&quot; The day before 1 January 1 CE is 31 December 1 BCE.</db:para>
</db:section>
<db:section xml:id="range-of-valid-dates">
<db:title>Range of Valid Dates</db:title>
<db:para>Dates are stored internally as a Julian Day number, an integer count of every day in a contiguous range, with 24 November 4714 BCE in the Gregorian calendar being Julian Day 0 (1 January 4713 BCE in the Julian calendar). As well as being an efficient and accurate way of storing an absolute date, it is suitable for converting a Date into other calendar systems such as Hebrew, Islamic or Chinese. The Julian Day number can be obtained using <db:link xlink:href="qdate.xml#toJulianDay">QDate::toJulianDay</db:link>() and can be set using <db:link xlink:href="qdate.xml#fromJulianDay">QDate::fromJulianDay</db:link>().</db:para>
<db:para>The range of dates able to be stored by <db:link xlink:href="qdate.xml">QDate</db:link> as a Julian Day number is for technical reasons limited to between -784350574879 and 784354017364, which means from before 2 billion BCE to after 2 billion CE.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml">QTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:member>
<db:member>QDateEdit</db:member>
<db:member>QDateTimeEdit</db:member>
<db:member>QCalendarWidget</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="MonthNameType-enum">
<db:title>[since 4.5] enum QDate::MonthNameType</db:title>
<db:para>This enum describes the types of the string representation used for the month name.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdate.xml">QDate</db:link></db:emphasis>::DateFormat</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>This type of name can be used for date-to-string formatting.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdate.xml">QDate</db:link></db:emphasis>::StandaloneFormat</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This type is used when you need to enumerate months or weekdays. Usually standalone names are represented in singular forms with capitalized first letter.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 4.5.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDate">
<db:title>QDate::QDate()</db:title>
<db:para>Constructs a null date. Null dates are invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDate-1">
<db:title>QDate::QDate(int <db:emphasis>y</db:emphasis>, int <db:emphasis>m</db:emphasis>, int <db:emphasis>d</db:emphasis>)</db:title>
<db:para>Constructs a date with year <db:code role="parameter">y</db:code>, month <db:code role="parameter">m</db:code> and day <db:code role="parameter">d</db:code>.</db:para>
<db:para>If the specified date is invalid, the date is not set and <db:link xlink:href="qdate.xml#isValid">isValid</db:link>() returns false.</db:para>
<db:warning>
<db:para>Years 1 to 99 are interpreted as is. Year 0 is invalid.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addDays">
<db:title>QDate QDate::addDays(qint64 <db:emphasis>ndays</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdate.xml">QDate</db:link> object containing a date <db:code role="parameter">ndays</db:code> later than the date of this object (or earlier if <db:code role="parameter">ndays</db:code> is negative).</db:para>
<db:para>Returns a null date if the current date is invalid or the new date is out of range.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#addMonths">addMonths</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#addYears">addYears</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#daysTo">daysTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMonths">
<db:title>QDate QDate::addMonths(int <db:emphasis>nmonths</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdate.xml">QDate</db:link> object containing a date <db:code role="parameter">nmonths</db:code> later than the date of this object (or earlier if <db:code role="parameter">nmonths</db:code> is negative).</db:para>
<db:note>
<db:para>If the ending day/month combination does not exist in the resulting month/year, this function will return a date that is the latest valid date.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#addYears">addYears</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addYears">
<db:title>QDate QDate::addYears(int <db:emphasis>nyears</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdate.xml">QDate</db:link> object containing a date <db:code role="parameter">nyears</db:code> later than the date of this object (or earlier if <db:code role="parameter">nyears</db:code> is negative).</db:para>
<db:note>
<db:para>If the ending day/month combination does not exist in the resulting year (i.e., if the date was Feb 29 and the final year is not a leap year), this function will return a date that is the latest valid date (that is, Feb 28).</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#addMonths">addMonths</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentDate">
<db:title>[static] QDate QDate::currentDate()</db:title>
<db:para>Returns the current date, as reported by the system clock.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtime.xml#currentTime">QTime::currentTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#currentDateTime">QDateTime::currentDateTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="day">
<db:title>int QDate::day() const</db:title>
<db:para>Returns the day of the month (1 to 31) of this date.</db:para>
<db:para>Returns 0 if the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#year">year</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#month">month</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#dayOfWeek">dayOfWeek</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dayOfWeek">
<db:title>int QDate::dayOfWeek() const</db:title>
<db:para>Returns the weekday (1 = Monday to 7 = Sunday) for this date.</db:para>
<db:para>Returns 0 if the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#day">day</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#dayOfYear">dayOfYear</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#DayOfWeek-enum">Qt::DayOfWeek</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dayOfYear">
<db:title>int QDate::dayOfYear() const</db:title>
<db:para>Returns the day of the year (1 to 365 or 366 on leap years) for this date.</db:para>
<db:para>Returns 0 if the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#day">day</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#dayOfWeek">dayOfWeek</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="daysInMonth">
<db:title>int QDate::daysInMonth() const</db:title>
<db:para>Returns the number of days in the month (28 to 31) for this date.</db:para>
<db:para>Returns 0 if the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#day">day</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#daysInYear">daysInYear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="daysInYear">
<db:title>int QDate::daysInYear() const</db:title>
<db:para>Returns the number of days in the year (365 or 366) for this date.</db:para>
<db:para>Returns 0 if the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#day">day</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#daysInMonth">daysInMonth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="daysTo">
<db:title>qint64 QDate::daysTo(const QDate &amp;<db:emphasis>d</db:emphasis>) const</db:title>
<db:para>Returns the number of days from this date to <db:code role="parameter">d</db:code> (which is negative if <db:code role="parameter">d</db:code> is earlier than this date).</db:para>
<db:para>Returns 0 if either date is invalid.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDate d1(1995, 5, 17);  // May 17, 1995
QDate d2(1995, 5, 20);  // May 20, 1995
d1.daysTo(d2);          // returns 3
d2.daysTo(d1);          // returns -3
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#addDays">addDays</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromJulianDay">
<db:title>[static] QDate QDate::fromJulianDay(qint64 <db:emphasis>jd</db:emphasis>)</db:title>
<db:para>Converts the Julian day <db:code role="parameter">jd</db:code> to a <db:link xlink:href="qdate.xml">QDate</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#toJulianDay">toJulianDay</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromString">
<db:title>[static] QDate QDate::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, Qt::DateFormat <db:emphasis>format</db:emphasis> = Qt::TextDate)</db:title>
<db:para>Returns the <db:link xlink:href="qdate.xml">QDate</db:link> represented by the <db:code role="parameter">string</db:code>, using the <db:code role="parameter">format</db:code> given, or an invalid date if the string cannot be parsed.</db:para>
<db:para>Note for <db:link xlink:href="qt.xml#DateFormat-enum">Qt::TextDate</db:link>: It is recommended that you use the English short month names (e.g. &quot;Jan&quot;). Although localized month names can also be used, they depend on the user's locale settings.</db:para>
</db:section>
<db:section xml:id="fromString-1">
<db:title>[static] QDate QDate::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, const QString &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:para>Returns the <db:link xlink:href="qdate.xml">QDate</db:link> represented by the <db:code role="parameter">string</db:code>, using the <db:code role="parameter">format</db:code> given, or an invalid date if the string cannot be parsed.</db:para>
<db:para>These expressions may be used for the format:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Expression</db:para>
</db:th>
<db:th>
<db:para>Output</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>d</db:para>
</db:td>
<db:td>
<db:para>The day as a number without a leading zero (1 to 31)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dd</db:para>
</db:td>
<db:td>
<db:para>The day as a number with a leading zero (01 to 31)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ddd</db:para>
</db:td>
<db:td>
<db:para>The abbreviated localized day name (e.g. 'Mon' to 'Sun'). Uses the system locale to localize the name, i.e. <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dddd</db:para>
</db:td>
<db:td>
<db:para>The long localized day name (e.g. 'Monday' to 'Sunday'). Uses the system locale to localize the name, i.e. <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>M</db:para>
</db:td>
<db:td>
<db:para>The month as a number without a leading zero (1 to 12)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MM</db:para>
</db:td>
<db:td>
<db:para>The month as a number with a leading zero (01 to 12)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MMM</db:para>
</db:td>
<db:td>
<db:para>The abbreviated localized month name (e.g. 'Jan' to 'Dec'). Uses the system locale to localize the name, i.e. <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MMMM</db:para>
</db:td>
<db:td>
<db:para>The long localized month name (e.g. 'January' to 'December'). Uses the system locale to localize the name, i.e. <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>yy</db:para>
</db:td>
<db:td>
<db:para>The year as two digit number (00 to 99)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>yyyy</db:para>
</db:td>
<db:td>
<db:para>The year as four digit number. If the year is negative, a minus sign is prepended in addition.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>All other input characters will be treated as text. Any sequence of characters that are enclosed in single quotes will also be treated as text and will not be used as an expression. For example:</db:para>
<db:programlisting language="cpp">QDate date = QDate::fromString(&quot;1MM12car2003&quot;, &quot;d'MM'MMcaryyyy&quot;);
// date is 1 December 2003
</db:programlisting>
<db:para>If the format is not satisfied, an invalid <db:link xlink:href="qdate.xml">QDate</db:link> is returned. The expressions that don't expect leading zeroes (d, M) will be greedy. This means that they will use two digits even if this will put them outside the accepted range of values and leaves too few digits for other sections. For example, the following format string could have meant January 30 but the M will grab two digits, resulting in an invalid date:</db:para>
<db:programlisting language="cpp">QDate date = QDate::fromString(&quot;130&quot;, &quot;Md&quot;); // invalid
</db:programlisting>
<db:para>For any field that is not represented in the format the following defaults are used:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Field</db:para>
</db:th>
<db:th>
<db:para>Default value</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Year</db:para>
</db:td>
<db:td>
<db:para>1900</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Month</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Day</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The following examples demonstrate the default values:</db:para>
<db:programlisting language="cpp">QDate::fromString(&quot;1.30&quot;, &quot;M.d&quot;);           // January 30 1900
QDate::fromString(&quot;20000110&quot;, &quot;yyyyMMdd&quot;);  // January 10, 2000
QDate::fromString(&quot;20000110&quot;, &quot;yyyyMd&quot;);    // January 10, 2000
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromString">QDateTime::fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#fromString">QTime::fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#toString">QDate::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toString">QDateTime::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#toString">QTime::toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getDate">
<db:title>[since 4.5] void QDate::getDate(int *<db:emphasis>year</db:emphasis>, int *<db:emphasis>month</db:emphasis>, int *<db:emphasis>day</db:emphasis>)</db:title>
<db:para>Extracts the date's year, month, and day, and assigns them to *<db:code role="parameter">year</db:code>, *<db:code role="parameter">month</db:code>, and *<db:code role="parameter">day</db:code>. The pointers may be null.</db:para>
<db:para>Returns 0 if the date is invalid.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#year">year</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#month">month</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#day">day</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isLeapYear">
<db:title>[static] bool QDate::isLeapYear(int <db:emphasis>year</db:emphasis>)</db:title>
<db:para>Returns true if the specified <db:code role="parameter">year</db:code> is a leap year; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QDate::isNull() const</db:title>
<db:para>Returns true if the date is null; otherwise returns false. A null date is invalid.</db:para>
<db:note>
<db:para>The behavior of this function is equivalent to <db:link xlink:href="qdate.xml#isValid">isValid</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QDate::isValid() const</db:title>
<db:para>Returns true if this date is valid; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid-1">
<db:title>[static] bool QDate::isValid(int <db:emphasis>year</db:emphasis>, int <db:emphasis>month</db:emphasis>, int <db:emphasis>day</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns true if the specified date (<db:code role="parameter">year</db:code>, <db:code role="parameter">month</db:code>, and <db:code role="parameter">day</db:code>) is valid; otherwise returns false.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDate::isValid(2002, 5, 17);  // true
QDate::isValid(2002, 2, 30);  // false (Feb 30 does not exist)
QDate::isValid(2004, 2, 29);  // true (2004 is a leap year)
QDate::isValid(2000, 2, 29);  // true (2000 is a leap year)
QDate::isValid(2006, 2, 29);  // false (2006 is not a leap year)
QDate::isValid(2100, 2, 29);  // false (2100 is not a leap year)
QDate::isValid(1202, 6, 6);   // true (even though 1202 is pre-Gregorian)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#setDate">setDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="longDayName">
<db:title>[static, since 4.5] QString QDate::longDayName(int <db:emphasis>weekday</db:emphasis>, QDate::MonthNameType <db:emphasis>type</db:emphasis> = DateFormat)</db:title>
<db:para>Returns the long name of the <db:code role="parameter">weekday</db:code> for the representation specified by <db:code role="parameter">type</db:code>.</db:para>
<db:para>The days are enumerated using the following convention:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>1 = &quot;Monday&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>2 = &quot;Tuesday&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>3 = &quot;Wednesday&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>4 = &quot;Thursday&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>5 = &quot;Friday&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>6 = &quot;Saturday&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>7 = &quot;Sunday&quot;</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The day names will be localized according to the system's locale settings, i.e. using <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().</db:para>
<db:para>Returns an empty string if the date is invalid.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#toString">toString</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#shortDayName">shortDayName</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#shortMonthName">shortMonthName</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#longMonthName">longMonthName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="longMonthName">
<db:title>[static, since 4.5] QString QDate::longMonthName(int <db:emphasis>month</db:emphasis>, QDate::MonthNameType <db:emphasis>type</db:emphasis> = DateFormat)</db:title>
<db:para>Returns the long name of the <db:code role="parameter">month</db:code> for the representation specified by <db:code role="parameter">type</db:code>.</db:para>
<db:para>The months are enumerated using the following convention:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>1 = &quot;January&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>2 = &quot;February&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>3 = &quot;March&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>4 = &quot;April&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>5 = &quot;May&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>6 = &quot;June&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>7 = &quot;July&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>8 = &quot;August&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>9 = &quot;September&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>10 = &quot;October&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>11 = &quot;November&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>12 = &quot;December&quot;</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The month names will be localized according to the system's locale settings, i.e. using <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().</db:para>
<db:para>Returns an empty string if the date is invalid.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#toString">toString</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#shortMonthName">shortMonthName</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#shortDayName">shortDayName</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#longDayName">longDayName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="month">
<db:title>int QDate::month() const</db:title>
<db:para>Returns the number corresponding to the month of this date, using the following convention:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>1 = &quot;January&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>2 = &quot;February&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>3 = &quot;March&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>4 = &quot;April&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>5 = &quot;May&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>6 = &quot;June&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>7 = &quot;July&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>8 = &quot;August&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>9 = &quot;September&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>10 = &quot;October&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>11 = &quot;November&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>12 = &quot;December&quot;</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Returns 0 if the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#year">year</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#day">day</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDate">
<db:title>[since 4.2] bool QDate::setDate(int <db:emphasis>year</db:emphasis>, int <db:emphasis>month</db:emphasis>, int <db:emphasis>day</db:emphasis>)</db:title>
<db:para>Sets the date's <db:code role="parameter">year</db:code>, <db:code role="parameter">month</db:code>, and <db:code role="parameter">day</db:code>. Returns true if the date is valid; otherwise returns false.</db:para>
<db:para>If the specified date is invalid, the <db:link xlink:href="qdate.xml">QDate</db:link> object is set to be invalid.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shortDayName">
<db:title>[static, since 4.5] QString QDate::shortDayName(int <db:emphasis>weekday</db:emphasis>, QDate::MonthNameType <db:emphasis>type</db:emphasis> = DateFormat)</db:title>
<db:para>Returns the short name of the <db:code role="parameter">weekday</db:code> for the representation specified by <db:code role="parameter">type</db:code>.</db:para>
<db:para>The days are enumerated using the following convention:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>1 = &quot;Mon&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>2 = &quot;Tue&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>3 = &quot;Wed&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>4 = &quot;Thu&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>5 = &quot;Fri&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>6 = &quot;Sat&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>7 = &quot;Sun&quot;</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The day names will be localized according to the system's locale settings, i.e. using <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().</db:para>
<db:para>Returns an empty string if the date is invalid.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#toString">toString</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#shortMonthName">shortMonthName</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#longMonthName">longMonthName</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#longDayName">longDayName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shortMonthName">
<db:title>[static, since 4.5] QString QDate::shortMonthName(int <db:emphasis>month</db:emphasis>, QDate::MonthNameType <db:emphasis>type</db:emphasis> = DateFormat)</db:title>
<db:para>Returns the short name of the <db:code role="parameter">month</db:code> for the representation specified by <db:code role="parameter">type</db:code>.</db:para>
<db:para>The months are enumerated using the following convention:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>1 = &quot;Jan&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>2 = &quot;Feb&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>3 = &quot;Mar&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>4 = &quot;Apr&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>5 = &quot;May&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>6 = &quot;Jun&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>7 = &quot;Jul&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>8 = &quot;Aug&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>9 = &quot;Sep&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>10 = &quot;Oct&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>11 = &quot;Nov&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>12 = &quot;Dec&quot;</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The month names will be localized according to the system's locale settings, i.e. using <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().</db:para>
<db:para>Returns an empty string if the date is invalid.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#toString">toString</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#longMonthName">longMonthName</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#shortDayName">shortDayName</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#longDayName">longDayName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toJulianDay">
<db:title>qint64 QDate::toJulianDay() const</db:title>
<db:para>Converts the date to a Julian day.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#fromJulianDay">fromJulianDay</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString">
<db:title>QString QDate::toString(const QString &amp;<db:emphasis>format</db:emphasis>) const</db:title>
<db:para>Returns the date as a string. The <db:code role="parameter">format</db:code> parameter determines the format of the result string.</db:para>
<db:para>These expressions may be used:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Expression</db:para>
</db:th>
<db:th>
<db:para>Output</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>d</db:para>
</db:td>
<db:td>
<db:para>the day as number without a leading zero (1 to 31)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dd</db:para>
</db:td>
<db:td>
<db:para>the day as number with a leading zero (01 to 31)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ddd</db:para>
</db:td>
<db:td>
<db:para>the abbreviated localized day name (e.g. 'Mon' to 'Sun'). Uses the system locale to localize the name, i.e. <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dddd</db:para>
</db:td>
<db:td>
<db:para>the long localized day name (e.g. 'Monday' to 'Sunday'). Uses the system locale to localize the name, i.e. <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>M</db:para>
</db:td>
<db:td>
<db:para>the month as number without a leading zero (1 to 12)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MM</db:para>
</db:td>
<db:td>
<db:para>the month as number with a leading zero (01 to 12)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MMM</db:para>
</db:td>
<db:td>
<db:para>the abbreviated localized month name (e.g. 'Jan' to 'Dec'). Uses the system locale to localize the name, i.e. <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MMMM</db:para>
</db:td>
<db:td>
<db:para>the long localized month name (e.g. 'January' to 'December'). Uses the system locale to localize the name, i.e. <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>yy</db:para>
</db:td>
<db:td>
<db:para>the year as two digit number (00 to 99)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>yyyy</db:para>
</db:td>
<db:td>
<db:para>the year as four digit number. If the year is negative, a minus sign is prepended in addition.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>All other input characters will be ignored. Any sequence of characters that are enclosed in single quotes will be treated as text and not be used as an expression. Two consecutive single quotes (&quot;''&quot;) are replaced by a singlequote in the output. Formats without separators (e.g. &quot;ddMM&quot;) are currently not supported.</db:para>
<db:para>Example format strings (assuming that the <db:link xlink:href="qdate.xml">QDate</db:link> is the 20 July 1969):</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Format</db:para>
</db:th>
<db:th>
<db:para>Result</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>dd.MM.yyyy</db:para>
</db:td>
<db:td>
<db:para>20.07.1969</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ddd MMMM d yy</db:para>
</db:td>
<db:td>
<db:para>Sun July 20 69</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>'The day is' dddd</db:para>
</db:td>
<db:td>
<db:para>The day is Sunday</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If the datetime is invalid, an empty string will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toString">QDateTime::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#toString">QTime::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString-1">
<db:title>QString QDate::toString(Qt::DateFormat <db:emphasis>format</db:emphasis> = Qt::TextDate) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the date as a string. The <db:code role="parameter">format</db:code> parameter determines the format of the string.</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::TextDate</db:link>, the string is formatted in the default way. <db:link xlink:href="qdate.xml#shortDayName">QDate::shortDayName</db:link>() and <db:link xlink:href="qdate.xml#shortMonthName">QDate::shortMonthName</db:link>() are used to generate the string, so the day and month names will be localized names using the system locale, i.e. <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>(). An example of this formatting is &quot;Sat May 20 1995&quot;.</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::ISODate</db:link>, the string format corresponds to the ISO 8601 extended specification for representations of dates and times, taking the form YYYY-MM-DD, where YYYY is the year, MM is the month of the year (between 01 and 12), and DD is the day of the month between 01 and 31.</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::SystemLocaleShortDate</db:link> or <db:link xlink:href="qt.xml#DateFormat-enum">Qt::SystemLocaleLongDate</db:link>, the string format depends on the locale settings of the system. Identical to calling <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().<db:link xlink:href="qdate.xml#toString">toString</db:link>(date, <db:link xlink:href="qlocale.xml#FormatType-enum">QLocale::ShortFormat</db:link>) or <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().<db:link xlink:href="qdate.xml#toString">toString</db:link>(date, <db:link xlink:href="qlocale.xml#FormatType-enum">QLocale::LongFormat</db:link>).</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::DefaultLocaleShortDate</db:link> or <db:link xlink:href="qt.xml#DateFormat-enum">Qt::DefaultLocaleLongDate</db:link>, the string format depends on the default application locale. This is the locale set with <db:link xlink:href="qlocale.xml#setDefault">QLocale::setDefault</db:link>(), or the system locale if no default locale has been set. Identical to calling QLocale().<db:link xlink:href="qdate.xml#toString">toString</db:link>(date, <db:link xlink:href="qlocale.xml#FormatType-enum">QLocale::ShortFormat</db:link>) or QLocale().<db:link xlink:href="qdate.xml#toString">toString</db:link>(date, <db:link xlink:href="qlocale.xml#FormatType-enum">QLocale::LongFormat</db:link>).</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::RFC2822Date</db:link>, the string is formatted in an <db:link xlink:href="http://www.rfc-editor.org/rfc/rfc2822.txt">RFC 2822</db:link> compatible way. An example of this formatting is &quot;20 May 1995&quot;.</db:para>
<db:para>If the date is invalid, an empty string will be returned.</db:para>
<db:warning>
<db:para>The <db:link xlink:href="qt.xml#DateFormat-enum">Qt::ISODate</db:link> format is only valid for years in the range 0 to 9999. This restriction may apply to locale-aware formats as well, depending on the locale settings.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#shortDayName">shortDayName</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#shortMonthName">shortMonthName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="weekNumber">
<db:title>int QDate::weekNumber(int *<db:emphasis>yearNumber</db:emphasis> = 0) const</db:title>
<db:para>Returns the week number (1 to 53), and stores the year in *<db:code role="parameter">yearNumber</db:code> unless <db:code role="parameter">yearNumber</db:code> is null (the default).</db:para>
<db:para>Returns 0 if the date is invalid.</db:para>
<db:para>In accordance with ISO 8601, weeks start on Monday and the first Thursday of a year is always in week 1 of that year. Most years have 52 weeks, but some have 53.</db:para>
<db:para>*<db:code role="parameter">yearNumber</db:code> is not always the same as <db:link xlink:href="qdate.xml#year">year</db:link>(). For example, 1 January 2000 has week number 52 in the year 1999, and 31 December 2002 has week number 1 in the year 2003.</db:para>
<db:para>Copyright (c) 1989 The Regents of the University of California. All rights reserved.</db:para>
<db:para>Redistribution and use in source and binary forms are permitted provided that the above copyright notice and this paragraph are duplicated in all such forms and that any documentation, advertising materials, and other materials related to such distribution and use acknowledge that the software was developed by the University of California, Berkeley. The name of the University may not be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED &quot;AS IS&quot; AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="year">
<db:title>int QDate::year() const</db:title>
<db:para>Returns the year of this date. Negative numbers indicate years before 1 CE, such that year -44 is 44 BCE.</db:para>
<db:para>Returns 0 if the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#month">month</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#day">day</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QDate::operator!=(const QDate &amp;<db:emphasis>d</db:emphasis>) const</db:title>
<db:para>Returns true if this date is different from <db:code role="parameter">d</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-lt">
<db:title>bool QDate::operator&lt;(const QDate &amp;<db:emphasis>d</db:emphasis>) const</db:title>
<db:para>Returns true if this date is earlier than <db:code role="parameter">d</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq">
<db:title>bool QDate::operator&lt;=(const QDate &amp;<db:emphasis>d</db:emphasis>) const</db:title>
<db:para>Returns true if this date is earlier than or equal to <db:code role="parameter">d</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QDate::operator==(const QDate &amp;<db:emphasis>d</db:emphasis>) const</db:title>
<db:para>Returns true if this date is equal to <db:code role="parameter">d</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-gt">
<db:title>bool QDate::operator&gt;(const QDate &amp;<db:emphasis>d</db:emphasis>) const</db:title>
<db:para>Returns true if this date is later than <db:code role="parameter">d</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq">
<db:title>bool QDate::operator&gt;=(const QDate &amp;<db:emphasis>d</db:emphasis>) const</db:title>
<db:para>Returns true if this date is later than or equal to <db:code role="parameter">d</db:code>; otherwise returns false.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, const QDate &amp;<db:emphasis>date</db:emphasis>)</db:title>
<db:para>Writes the <db:code role="parameter">date</db:code> to stream <db:code role="parameter">out</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-1">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QDate &amp;<db:emphasis>date</db:emphasis>)</db:title>
<db:para>Reads a date from stream <db:code role="parameter">in</db:code> into the <db:code role="parameter">date</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
