<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextFormat Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtextformat.xml">QTextFormat</db:link> class provides formatting information for a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextFormat</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qtextblockformat.xml" xlink:role="class">QTextBlockFormat</db:link>, <db:link xlink:href="qtextcharformat.xml" xlink:role="class">QTextCharFormat</db:link>, <db:link xlink:href="qtextframeformat.xml" xlink:role="class">QTextFrameFormat</db:link>, and <db:link xlink:href="qtextlistformat.xml" xlink:role="class">QTextListFormat</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextFormat is part of <db:simplelist><db:member><db:link xlink:href="richtext-processing.xml">Rich Text Processing APIs</db:link></db:member><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qtextformat.xml">QTextFormat</db:link> is a generic class used for describing the format of parts of a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>. The derived classes <db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link>, <db:link xlink:href="qtextblockformat.xml">QTextBlockFormat</db:link>, <db:link xlink:href="qtextlistformat.xml">QTextListFormat</db:link>, and <db:link xlink:href="qtexttableformat.xml">QTextTableFormat</db:link> are usually more useful, and describe the formatting that is applied to specific parts of the document.</db:para>
<db:para>A format has a <db:code>FormatType</db:code> which specifies the kinds of text item it can format; e.g. a block of text, a list, a table, etc. A format also has various properties (some specific to particular format types), as described by the Property enum. Every property has a corresponding Property.</db:para>
<db:para>The format type is given by <db:link xlink:href="qtextformat.xml#type">type</db:link>(), and the format can be tested with <db:link xlink:href="qtextformat.xml#isCharFormat">isCharFormat</db:link>(), <db:link xlink:href="qtextformat.xml#isBlockFormat">isBlockFormat</db:link>(), <db:link xlink:href="qtextformat.xml#isListFormat">isListFormat</db:link>(), <db:link xlink:href="qtextformat.xml#isTableFormat">isTableFormat</db:link>(), <db:link xlink:href="qtextformat.xml#isFrameFormat">isFrameFormat</db:link>(), and <db:link xlink:href="qtextformat.xml#isImageFormat">isImageFormat</db:link>(). If the type is determined, it can be retrieved with <db:link xlink:href="qtextformat.xml#toCharFormat">toCharFormat</db:link>(), <db:link xlink:href="qtextformat.xml#toBlockFormat">toBlockFormat</db:link>(), <db:link xlink:href="qtextformat.xml#toListFormat">toListFormat</db:link>(), <db:link xlink:href="qtextformat.xml#toTableFormat">toTableFormat</db:link>(), <db:link xlink:href="qtextformat.xml#toFrameFormat">toFrameFormat</db:link>(), and <db:link xlink:href="qtextformat.xml#toImageFormat">toImageFormat</db:link>().</db:para>
<db:para>A format's properties can be set with the <db:link xlink:href="qtextformat.xml#setProperty">setProperty</db:link>() functions, and retrieved with <db:link xlink:href="qtextformat.xml#boolProperty">boolProperty</db:link>(), <db:link xlink:href="qtextformat.xml#intProperty">intProperty</db:link>(), <db:link xlink:href="qtextformat.xml#doubleProperty">doubleProperty</db:link>(), and <db:link xlink:href="qtextformat.xml#stringProperty">stringProperty</db:link>() as appropriate. All the property IDs used in the format can be retrieved with allPropertyIds(). One format can be merged into another using <db:link xlink:href="qtextformat.xml#merge">merge</db:link>().</db:para>
<db:para>A format's object index can be set with <db:link xlink:href="qtextformat.xml#setObjectIndex">setObjectIndex</db:link>(), and retrieved with <db:link xlink:href="qtextformat.xml#objectIndex">objectIndex</db:link>(). These methods can be used to associate the format with a <db:link xlink:href="qtextobject.xml">QTextObject</db:link>. It is used to represent lists, frames, and tables inside the document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="richtext.xml">Rich Text Processing</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="FormatType-enum">
<db:title>enum QTextFormat::FormatType</db:title>
<db:enumsynopsis>
<db:enumname>FormatType</db:enumname>
<db:enumitem>
<db:enumidentifier>InvalidFormat</db:enumidentifier>
<db:enumvalue>-1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BlockFormat</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CharFormat</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ListFormat</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FrameFormat</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UserFormat</db:enumidentifier>
<db:enumvalue>100</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the text item a <db:link xlink:href="qtextformat.xml">QTextFormat</db:link> object is formatting.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::InvalidFormat</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>An invalid format as created by the default constructor</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::BlockFormat</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The object formats a text block</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::CharFormat</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The object formats a single character</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::ListFormat</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The object formats a list</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FrameFormat</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The object formats a frame</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::UserFormat</db:code></db:para>
</db:td>
<db:td><db:code>100</db:code></db:td>
<db:td/>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link></db:member>
<db:member><db:link xlink:href="qtextblockformat.xml">QTextBlockFormat</db:link></db:member>
<db:member><db:link xlink:href="qtextlistformat.xml">QTextListFormat</db:link></db:member>
<db:member><db:link xlink:href="qtexttableformat.xml">QTextTableFormat</db:link></db:member>
<db:member><db:link xlink:href="qtextformat.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ObjectTypes-enum">
<db:title>enum QTextFormat::ObjectTypes</db:title>
<db:enumsynopsis>
<db:enumname>ObjectTypes</db:enumname>
<db:enumitem>
<db:enumidentifier>NoObject</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ImageObject</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableObject</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableCellObject</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UserObject</db:enumidentifier>
<db:enumvalue>0x1000</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes what kind of <db:link xlink:href="qtextobject.xml">QTextObject</db:link> this format is associated with.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::NoObject</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::ImageObject</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableObject</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableCellObject</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::UserObject</db:code></db:para>
</db:td>
<db:td><db:code>0x1000</db:code></db:td>
<db:td>
<db:para>The first object that can be used for application-specific purposes.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextobject.xml">QTextObject</db:link></db:member>
<db:member><db:link xlink:href="qtexttable.xml">QTextTable</db:link></db:member>
<db:member><db:link xlink:href="qtextobject.xml#format">QTextObject::format</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="PageBreakFlag-enum">
<db:title>enum QTextFormat::PageBreakFlag</db:title>
<db:bridgehead renderas="sect2">flags QTextFormat::PageBreakFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>PageBreakFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>PageBreak_Auto</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PageBreak_AlwaysBefore</db:enumidentifier>
<db:enumvalue>0x001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PageBreak_AlwaysAfter</db:enumidentifier>
<db:enumvalue>0x010</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QTextFormat::PageBreakFlags</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum describes how page breaking is performed when printing. It maps to the corresponding css properties.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::PageBreak_Auto</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The page break is determined automatically depending on the available space on the current page</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::PageBreak_AlwaysBefore</db:code></db:para>
</db:td>
<db:td><db:code>0x001</db:code></db:td>
<db:td>
<db:para>The page is always broken before the paragraph/table</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::PageBreak_AlwaysAfter</db:code></db:para>
</db:td>
<db:td><db:code>0x010</db:code></db:td>
<db:td>
<db:para>A new page is always started after the paragraph/table</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>PageBreakFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;PageBreakFlag&gt;. </db:code>It stores an OR combination of <db:code>PageBreakFlag</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#pageBreakPolicy">QTextBlockFormat::pageBreakPolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qtextframeformat.xml#pageBreakPolicy">QTextFrameFormat::pageBreakPolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#Property-enum">PageBreakPolicy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Property-enum">
<db:title>enum QTextFormat::Property</db:title>
<db:enumsynopsis>
<db:enumname>Property</db:enumname>
<db:enumitem>
<db:enumidentifier>ObjectIndex</db:enumidentifier>
<db:enumvalue>0x0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CssFloat</db:enumidentifier>
<db:enumvalue>0x0800</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LayoutDirection</db:enumidentifier>
<db:enumvalue>0x0801</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OutlinePen</db:enumidentifier>
<db:enumvalue>0x810</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BackgroundBrush</db:enumidentifier>
<db:enumvalue>0x820</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ForegroundBrush</db:enumidentifier>
<db:enumvalue>0x821</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BackgroundImageUrl</db:enumidentifier>
<db:enumvalue>0x823</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BlockAlignment</db:enumidentifier>
<db:enumvalue>0x1010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BlockTopMargin</db:enumidentifier>
<db:enumvalue>0x1030</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BlockBottomMargin</db:enumidentifier>
<db:enumvalue>0x1031</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BlockLeftMargin</db:enumidentifier>
<db:enumvalue>0x1032</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BlockRightMargin</db:enumidentifier>
<db:enumvalue>0x1033</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TextIndent</db:enumidentifier>
<db:enumvalue>0x1034</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TabPositions</db:enumidentifier>
<db:enumvalue>0x1035</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BlockIndent</db:enumidentifier>
<db:enumvalue>0x1040</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LineHeight</db:enumidentifier>
<db:enumvalue>0x1048</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LineHeightType</db:enumidentifier>
<db:enumvalue>0x1049</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BlockNonBreakableLines</db:enumidentifier>
<db:enumvalue>0x1050</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BlockTrailingHorizontalRulerWidth</db:enumidentifier>
<db:enumvalue>0x1060</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HeadingLevel</db:enumidentifier>
<db:enumvalue>0x1070</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BlockQuoteLevel</db:enumidentifier>
<db:enumvalue>0x1080</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BlockCodeLanguage</db:enumidentifier>
<db:enumvalue>0x1090</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BlockCodeFence</db:enumidentifier>
<db:enumvalue>0x1091</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BlockMarker</db:enumidentifier>
<db:enumvalue>0x10A0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FirstFontProperty</db:enumidentifier>
<db:enumvalue>0x1FE0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontCapitalization</db:enumidentifier>
<db:enumvalue>FirstFontProperty</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontLetterSpacing</db:enumidentifier>
<db:enumvalue>0x1FE1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontWordSpacing</db:enumidentifier>
<db:enumvalue>0x1FE2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontStyleHint</db:enumidentifier>
<db:enumvalue>0x1FE3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontStyleStrategy</db:enumidentifier>
<db:enumvalue>0x1FE4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontKerning</db:enumidentifier>
<db:enumvalue>0x1FE5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontHintingPreference</db:enumidentifier>
<db:enumvalue>0x1FE6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontFamilies</db:enumidentifier>
<db:enumvalue>0x1FE7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontStyleName</db:enumidentifier>
<db:enumvalue>0x1FE8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontLetterSpacingType</db:enumidentifier>
<db:enumvalue>0x1FE9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontStretch</db:enumidentifier>
<db:enumvalue>0x1FEA</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontFamily</db:enumidentifier>
<db:enumvalue>0x2000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontPointSize</db:enumidentifier>
<db:enumvalue>0x2001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontSizeAdjustment</db:enumidentifier>
<db:enumvalue>0x2002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontSizeIncrement</db:enumidentifier>
<db:enumvalue>FontSizeAdjustment</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontWeight</db:enumidentifier>
<db:enumvalue>0x2003</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontItalic</db:enumidentifier>
<db:enumvalue>0x2004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontUnderline</db:enumidentifier>
<db:enumvalue>0x2005</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontOverline</db:enumidentifier>
<db:enumvalue>0x2006</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontStrikeOut</db:enumidentifier>
<db:enumvalue>0x2007</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontFixedPitch</db:enumidentifier>
<db:enumvalue>0x2008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontPixelSize</db:enumidentifier>
<db:enumvalue>0x2009</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LastFontProperty</db:enumidentifier>
<db:enumvalue>FontPixelSize</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TextUnderlineColor</db:enumidentifier>
<db:enumvalue>0x2020</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TextVerticalAlignment</db:enumidentifier>
<db:enumvalue>0x2021</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TextOutline</db:enumidentifier>
<db:enumvalue>0x2022</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TextUnderlineStyle</db:enumidentifier>
<db:enumvalue>0x2023</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TextToolTip</db:enumidentifier>
<db:enumvalue>0x2024</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TextSuperScriptBaseline</db:enumidentifier>
<db:enumvalue>0x2025</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TextSubScriptBaseline</db:enumidentifier>
<db:enumvalue>0x2026</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TextBaselineOffset</db:enumidentifier>
<db:enumvalue>0x2027</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IsAnchor</db:enumidentifier>
<db:enumvalue>0x2030</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AnchorHref</db:enumidentifier>
<db:enumvalue>0x2031</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AnchorName</db:enumidentifier>
<db:enumvalue>0x2032</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OldFontLetterSpacingType</db:enumidentifier>
<db:enumvalue>0x2033</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OldFontStretch</db:enumidentifier>
<db:enumvalue>0x2034</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OldTextUnderlineColor</db:enumidentifier>
<db:enumvalue>0x2010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ObjectType</db:enumidentifier>
<db:enumvalue>0x2f00</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ListStyle</db:enumidentifier>
<db:enumvalue>0x3000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ListIndent</db:enumidentifier>
<db:enumvalue>0x3001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ListNumberPrefix</db:enumidentifier>
<db:enumvalue>0x3002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ListNumberSuffix</db:enumidentifier>
<db:enumvalue>0x3003</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FrameBorder</db:enumidentifier>
<db:enumvalue>0x4000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FrameMargin</db:enumidentifier>
<db:enumvalue>0x4001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FramePadding</db:enumidentifier>
<db:enumvalue>0x4002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FrameWidth</db:enumidentifier>
<db:enumvalue>0x4003</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FrameHeight</db:enumidentifier>
<db:enumvalue>0x4004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FrameTopMargin</db:enumidentifier>
<db:enumvalue>0x4005</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FrameBottomMargin</db:enumidentifier>
<db:enumvalue>0x4006</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FrameLeftMargin</db:enumidentifier>
<db:enumvalue>0x4007</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FrameRightMargin</db:enumidentifier>
<db:enumvalue>0x4008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FrameBorderBrush</db:enumidentifier>
<db:enumvalue>0x4009</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FrameBorderStyle</db:enumidentifier>
<db:enumvalue>0x4010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableColumns</db:enumidentifier>
<db:enumvalue>0x4100</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableColumnWidthConstraints</db:enumidentifier>
<db:enumvalue>0x4101</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableCellSpacing</db:enumidentifier>
<db:enumvalue>0x4102</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableCellPadding</db:enumidentifier>
<db:enumvalue>0x4103</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableHeaderRowCount</db:enumidentifier>
<db:enumvalue>0x4104</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableBorderCollapse</db:enumidentifier>
<db:enumvalue>0x4105</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableCellRowSpan</db:enumidentifier>
<db:enumvalue>0x4810</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableCellColumnSpan</db:enumidentifier>
<db:enumvalue>0x4811</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableCellTopPadding</db:enumidentifier>
<db:enumvalue>0x4812</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableCellBottomPadding</db:enumidentifier>
<db:enumvalue>0x4813</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableCellLeftPadding</db:enumidentifier>
<db:enumvalue>0x4814</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableCellRightPadding</db:enumidentifier>
<db:enumvalue>0x4815</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableCellTopBorder</db:enumidentifier>
<db:enumvalue>0x4816</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableCellBottomBorder</db:enumidentifier>
<db:enumvalue>0x4817</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableCellLeftBorder</db:enumidentifier>
<db:enumvalue>0x4818</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableCellRightBorder</db:enumidentifier>
<db:enumvalue>0x4819</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableCellTopBorderStyle</db:enumidentifier>
<db:enumvalue>0x481a</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableCellBottomBorderStyle</db:enumidentifier>
<db:enumvalue>0x481b</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableCellLeftBorderStyle</db:enumidentifier>
<db:enumvalue>0x481c</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableCellRightBorderStyle</db:enumidentifier>
<db:enumvalue>0x481d</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableCellTopBorderBrush</db:enumidentifier>
<db:enumvalue>0x481e</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableCellBottomBorderBrush</db:enumidentifier>
<db:enumvalue>0x481f</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableCellLeftBorderBrush</db:enumidentifier>
<db:enumvalue>0x4820</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TableCellRightBorderBrush</db:enumidentifier>
<db:enumvalue>0x4821</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ImageName</db:enumidentifier>
<db:enumvalue>0x5000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ImageTitle</db:enumidentifier>
<db:enumvalue>0x5001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ImageAltText</db:enumidentifier>
<db:enumvalue>0x5002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ImageWidth</db:enumidentifier>
<db:enumvalue>0x5010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ImageHeight</db:enumidentifier>
<db:enumvalue>0x5011</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ImageQuality</db:enumidentifier>
<db:enumvalue>0x5014</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FullWidthSelection</db:enumidentifier>
<db:enumvalue>0x06000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PageBreakPolicy</db:enumidentifier>
<db:enumvalue>0x7000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UserProperty</db:enumidentifier>
<db:enumvalue>0x100000</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the different properties a format can have.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::ObjectIndex</db:code></db:para>
</db:td>
<db:td><db:code>0x0</db:code></db:td>
<db:td>
<db:para>The index of the formatted object. See <db:link xlink:href="qtextformat.xml#objectIndex">objectIndex</db:link>().</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Paragraph and character properties</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::CssFloat</db:code></db:para>
</db:td>
<db:td><db:code>0x0800</db:code></db:td>
<db:td>
<db:para>How a frame is located relative to the surrounding text</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::LayoutDirection</db:code></db:para>
</db:td>
<db:td><db:code>0x0801</db:code></db:td>
<db:td>
<db:para>The layout direction of the text in the document (<db:link xlink:href="qt.xml#LayoutDirection-enum">Qt::LayoutDirection</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::OutlinePen</db:code></db:para>
</db:td>
<db:td><db:code>0x810</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::ForegroundBrush</db:code></db:para>
</db:td>
<db:td><db:code>0x821</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::BackgroundBrush</db:code></db:para>
</db:td>
<db:td><db:code>0x820</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::BackgroundImageUrl</db:code></db:para>
</db:td>
<db:td><db:code>0x823</db:code></db:td>
<db:td/>
</db:tr>
</db:informaltable>
<db:para>Paragraph properties</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::BlockAlignment</db:code></db:para>
</db:td>
<db:td><db:code>0x1010</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::BlockTopMargin</db:code></db:para>
</db:td>
<db:td><db:code>0x1030</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::BlockBottomMargin</db:code></db:para>
</db:td>
<db:td><db:code>0x1031</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::BlockLeftMargin</db:code></db:para>
</db:td>
<db:td><db:code>0x1032</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::BlockRightMargin</db:code></db:para>
</db:td>
<db:td><db:code>0x1033</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TextIndent</db:code></db:para>
</db:td>
<db:td><db:code>0x1034</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TabPositions</db:code></db:para>
</db:td>
<db:td><db:code>0x1035</db:code></db:td>
<db:td>
<db:para>Specifies the tab positions. The tab positions are structs of <db:link xlink:href="qtextoption-tab.xml">QTextOption::Tab</db:link> which are stored in a <db:link xlink:href="qlist.xml">QList</db:link> (internally, in a <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qvariant.xml">QVariant</db:link>&gt;).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::BlockIndent</db:code></db:para>
</db:td>
<db:td><db:code>0x1040</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::LineHeight</db:code></db:para>
</db:td>
<db:td><db:code>0x1048</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::LineHeightType</db:code></db:para>
</db:td>
<db:td><db:code>0x1049</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::BlockNonBreakableLines</db:code></db:para>
</db:td>
<db:td><db:code>0x1050</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::BlockTrailingHorizontalRulerWidth</db:code></db:para>
</db:td>
<db:td><db:code>0x1060</db:code></db:td>
<db:td>
<db:para>The width of a horizontal ruler element.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::HeadingLevel</db:code></db:para>
</db:td>
<db:td><db:code>0x1070</db:code></db:td>
<db:td>
<db:para>The level of a heading, for example 1 corresponds to an HTML H1 tag; otherwise 0. This enum value has been added in Qt 5.12.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::BlockCodeFence</db:code></db:para>
</db:td>
<db:td><db:code>0x1091</db:code></db:td>
<db:td>
<db:para>The character that was used in the &quot;fences&quot; around a Markdown code block. If the code block was indented rather than fenced, the block should not have this property. This enum value has been added in Qt 5.14.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::BlockQuoteLevel</db:code></db:para>
</db:td>
<db:td><db:code>0x1080</db:code></db:td>
<db:td>
<db:para>The depth of nested quoting on this block: 1 means the block is a top-level block quote. Blocks that are not block quotes should not have this property. This enum value has been added in Qt 5.14.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::BlockCodeLanguage</db:code></db:para>
</db:td>
<db:td><db:code>0x1090</db:code></db:td>
<db:td>
<db:para>The programming language in a preformatted or code block. Blocks that do not contain code should not have this property. This enum value has been added in Qt 5.14.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::BlockMarker</db:code></db:para>
</db:td>
<db:td><db:code>0x10A0</db:code></db:td>
<db:td>
<db:para>The <db:link xlink:href="qtextblockformat.xml#MarkerType-enum">type of adornment</db:link> to be shown alongside the block. This enum value has been added in Qt 5.14.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Character properties</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FontFamily</db:code></db:para>
</db:td>
<db:td><db:code>0x2000</db:code></db:td>
<db:td>
<db:para>e{This property has been deprecated.} Use QTextFormat::FontFamilies instead.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FontFamilies</db:code></db:para>
</db:td>
<db:td><db:code>0x1FE7</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FontStyleName</db:code></db:para>
</db:td>
<db:td><db:code>0x1FE8</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FontPointSize</db:code></db:para>
</db:td>
<db:td><db:code>0x2001</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FontPixelSize</db:code></db:para>
</db:td>
<db:td><db:code>0x2009</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FontSizeAdjustment</db:code></db:para>
</db:td>
<db:td><db:code>0x2002</db:code></db:td>
<db:td>
<db:para>Specifies the change in size given to the fontsize already set using FontPointSize or FontPixelSize.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FontFixedPitch</db:code></db:para>
</db:td>
<db:td><db:code>0x2008</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FontWeight</db:code></db:para>
</db:td>
<db:td><db:code>0x2003</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FontItalic</db:code></db:para>
</db:td>
<db:td><db:code>0x2004</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FontUnderline</db:code></db:para>
</db:td>
<db:td><db:code>0x2005</db:code></db:td>
<db:td>
<db:para><db:emphasis>This property has been deprecated.</db:emphasis> Use QTextFormat::TextUnderlineStyle instead.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FontOverline</db:code></db:para>
</db:td>
<db:td><db:code>0x2006</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FontStrikeOut</db:code></db:para>
</db:td>
<db:td><db:code>0x2007</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FontCapitalization</db:code></db:para>
</db:td>
<db:td><db:code>FirstFontProperty</db:code></db:td>
<db:td>
<db:para>Specifies the capitalization type that is to be applied to the text.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FontLetterSpacingType</db:code></db:para>
</db:td>
<db:td><db:code>0x1FE9</db:code></db:td>
<db:td>
<db:para>Specifies the meaning of the FontLetterSpacing property. The default is <db:link xlink:href="qfont.xml#SpacingType-enum">QFont::PercentageSpacing</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FontLetterSpacing</db:code></db:para>
</db:td>
<db:td><db:code>0x1FE1</db:code></db:td>
<db:td>
<db:para>Changes the default spacing between individual letters in the font. The value is specified as a percentage or absolute value, depending on FontLetterSpacingType. The default value is 100%.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FontWordSpacing</db:code></db:para>
</db:td>
<db:td><db:code>0x1FE2</db:code></db:td>
<db:td>
<db:para>Changes the default spacing between individual words. A positive value increases the word spacing by the corresponding pixels; a negative value decreases the spacing.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FontStretch</db:code></db:para>
</db:td>
<db:td><db:code>0x1FEA</db:code></db:td>
<db:td>
<db:para>Corresponds to the <db:link xlink:href="qfont.xml#Stretch-enum">QFont::Stretch</db:link> property</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FontStyleHint</db:code></db:para>
</db:td>
<db:td><db:code>0x1FE3</db:code></db:td>
<db:td>
<db:para>Corresponds to the <db:link xlink:href="qfont.xml#StyleHint-enum">QFont::StyleHint</db:link> property</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FontStyleStrategy</db:code></db:para>
</db:td>
<db:td><db:code>0x1FE4</db:code></db:td>
<db:td>
<db:para>Corresponds to the <db:link xlink:href="qfont.xml#StyleStrategy-enum">QFont::StyleStrategy</db:link> property</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FontKerning</db:code></db:para>
</db:td>
<db:td><db:code>0x1FE5</db:code></db:td>
<db:td>
<db:para>Specifies whether the font has kerning turned on.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FontHintingPreference</db:code></db:para>
</db:td>
<db:td><db:code>0x1FE6</db:code></db:td>
<db:td>
<db:para>Controls the use of hinting according to values of the <db:link xlink:href="qfont.xml#HintingPreference-enum">QFont::HintingPreference</db:link> enum.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TextUnderlineColor</db:code></db:para>
</db:td>
<db:td><db:code>0x2020</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TextVerticalAlignment</db:code></db:para>
</db:td>
<db:td><db:code>0x2021</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TextOutline</db:code></db:para>
</db:td>
<db:td><db:code>0x2022</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TextUnderlineStyle</db:code></db:para>
</db:td>
<db:td><db:code>0x2023</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TextToolTip</db:code></db:para>
</db:td>
<db:td><db:code>0x2024</db:code></db:td>
<db:td>
<db:para>Specifies the (optional) tool tip to be displayed for a fragment of text.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TextSuperScriptBaseline</db:code></db:para>
</db:td>
<db:td><db:code>0x2025</db:code></db:td>
<db:td>
<db:para>Specifies the baseline (in % of height) of superscript texts.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TextSubScriptBaseline</db:code></db:para>
</db:td>
<db:td><db:code>0x2026</db:code></db:td>
<db:td>
<db:para>Specifies the baseline (in % of height) of subscript texts.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TextBaselineOffset</db:code></db:para>
</db:td>
<db:td><db:code>0x2027</db:code></db:td>
<db:td>
<db:para>Specifies the baseline (in % of height) of text. A positive value moves up the text, by the corresponding %; a negative value moves it down.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::IsAnchor</db:code></db:para>
</db:td>
<db:td><db:code>0x2030</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::AnchorHref</db:code></db:para>
</db:td>
<db:td><db:code>0x2031</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::AnchorName</db:code></db:para>
</db:td>
<db:td><db:code>0x2032</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::ObjectType</db:code></db:para>
</db:td>
<db:td><db:code>0x2f00</db:code></db:td>
<db:td/>
</db:tr>
</db:informaltable>
<db:para>List properties</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::ListStyle</db:code></db:para>
</db:td>
<db:td><db:code>0x3000</db:code></db:td>
<db:td>
<db:para>Specifies the style used for the items in a list, described by values of the <db:link xlink:href="qtextlistformat.xml#Style-enum">QTextListFormat::Style</db:link> enum.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::ListIndent</db:code></db:para>
</db:td>
<db:td><db:code>0x3001</db:code></db:td>
<db:td>
<db:para>Specifies the amount of indentation used for a list.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::ListNumberPrefix</db:code></db:para>
</db:td>
<db:td><db:code>0x3002</db:code></db:td>
<db:td>
<db:para>Defines the text which is prepended to item numbers in numeric lists.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::ListNumberSuffix</db:code></db:para>
</db:td>
<db:td><db:code>0x3003</db:code></db:td>
<db:td>
<db:para>Defines the text which is appended to item numbers in numeric lists.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Table and frame properties</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FrameBorder</db:code></db:para>
</db:td>
<db:td><db:code>0x4000</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FrameBorderBrush</db:code></db:para>
</db:td>
<db:td><db:code>0x4009</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FrameBorderStyle</db:code></db:para>
</db:td>
<db:td><db:code>0x4010</db:code></db:td>
<db:td>
<db:para>See the <db:link xlink:href="qtextframeformat.xml#BorderStyle-enum">BorderStyle</db:link> enum.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FrameBottomMargin</db:code></db:para>
</db:td>
<db:td><db:code>0x4006</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FrameHeight</db:code></db:para>
</db:td>
<db:td><db:code>0x4004</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FrameLeftMargin</db:code></db:para>
</db:td>
<db:td><db:code>0x4007</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FrameMargin</db:code></db:para>
</db:td>
<db:td><db:code>0x4001</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FramePadding</db:code></db:para>
</db:td>
<db:td><db:code>0x4002</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FrameRightMargin</db:code></db:para>
</db:td>
<db:td><db:code>0x4008</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FrameTopMargin</db:code></db:para>
</db:td>
<db:td><db:code>0x4005</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FrameWidth</db:code></db:para>
</db:td>
<db:td><db:code>0x4003</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableCellSpacing</db:code></db:para>
</db:td>
<db:td><db:code>0x4102</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableCellPadding</db:code></db:para>
</db:td>
<db:td><db:code>0x4103</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableColumns</db:code></db:para>
</db:td>
<db:td><db:code>0x4100</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableColumnWidthConstraints</db:code></db:para>
</db:td>
<db:td><db:code>0x4101</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableHeaderRowCount</db:code></db:para>
</db:td>
<db:td><db:code>0x4104</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableBorderCollapse</db:code></db:para>
</db:td>
<db:td><db:code>0x4105</db:code></db:td>
<db:td>
<db:para>Specifies the <db:link xlink:href="qtexttableformat.xml#borderCollapse">QTextTableFormat::borderCollapse</db:link> property.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Table cell properties</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableCellRowSpan</db:code></db:para>
</db:td>
<db:td><db:code>0x4810</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableCellColumnSpan</db:code></db:para>
</db:td>
<db:td><db:code>0x4811</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableCellLeftPadding</db:code></db:para>
</db:td>
<db:td><db:code>0x4814</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableCellRightPadding</db:code></db:para>
</db:td>
<db:td><db:code>0x4815</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableCellTopPadding</db:code></db:para>
</db:td>
<db:td><db:code>0x4812</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableCellBottomPadding</db:code></db:para>
</db:td>
<db:td><db:code>0x4813</db:code></db:td>
</db:tr>
</db:informaltable>
<db:para>Table cell properties intended for use with <db:link xlink:href="qtexttableformat.xml#borderCollapse">QTextTableFormat::borderCollapse</db:link> enabled</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableCellTopBorder</db:code></db:para>
</db:td>
<db:td><db:code>0x4816</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableCellBottomBorder</db:code></db:para>
</db:td>
<db:td><db:code>0x4817</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableCellLeftBorder</db:code></db:para>
</db:td>
<db:td><db:code>0x4818</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableCellRightBorder</db:code></db:para>
</db:td>
<db:td><db:code>0x4819</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableCellTopBorderStyle</db:code></db:para>
</db:td>
<db:td><db:code>0x481a</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableCellBottomBorderStyle</db:code></db:para>
</db:td>
<db:td><db:code>0x481b</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableCellLeftBorderStyle</db:code></db:para>
</db:td>
<db:td><db:code>0x481c</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableCellRightBorderStyle</db:code></db:para>
</db:td>
<db:td><db:code>0x481d</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableCellTopBorderBrush</db:code></db:para>
</db:td>
<db:td><db:code>0x481e</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableCellBottomBorderBrush</db:code></db:para>
</db:td>
<db:td><db:code>0x481f</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableCellLeftBorderBrush</db:code></db:para>
</db:td>
<db:td><db:code>0x4820</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::TableCellRightBorderBrush</db:code></db:para>
</db:td>
<db:td><db:code>0x4821</db:code></db:td>
</db:tr>
</db:informaltable>
<db:para>Image properties</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::ImageName</db:code></db:para>
</db:td>
<db:td><db:code>0x5000</db:code></db:td>
<db:td>
<db:para>The filename or source of the image.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::ImageTitle</db:code></db:para>
</db:td>
<db:td><db:code>0x5001</db:code></db:td>
<db:td>
<db:para>The title attribute of an HTML image tag, or the quoted string that comes after the URL in a Markdown image link. This enum value has been added in Qt 5.14.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::ImageAltText</db:code></db:para>
</db:td>
<db:td><db:code>0x5002</db:code></db:td>
<db:td>
<db:para>The alt attribute of an HTML image tag, or the image description in a Markdown image link. This enum value has been added in Qt 5.14.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::ImageWidth</db:code></db:para>
</db:td>
<db:td><db:code>0x5010</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::ImageHeight</db:code></db:para>
</db:td>
<db:td><db:code>0x5011</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::ImageQuality</db:code></db:para>
</db:td>
<db:td><db:code>0x5014</db:code></db:td>
<db:td/>
</db:tr>
</db:informaltable>
<db:para>Selection properties</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::FullWidthSelection</db:code></db:para>
</db:td>
<db:td><db:code>0x06000</db:code></db:td>
<db:td>
<db:para>When set on the characterFormat of a selection, the whole width of the text will be shown selected.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Page break properties</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::PageBreakPolicy</db:code></db:para>
</db:td>
<db:td><db:code>0x7000</db:code></db:td>
<db:td>
<db:para>Specifies how pages are broken. See the <db:link xlink:href="qtextformat.xml#PageBreakFlag-enum">PageBreakFlag</db:link> enum.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextformat.xml">QTextFormat</db:link></db:emphasis>::UserProperty</db:code></db:para>
</db:td>
<db:td><db:code>0x100000</db:code></db:td>
<db:td/>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#property">property</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#setProperty">setProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextFormat">
<db:title>QTextFormat::QTextFormat()</db:title>
<db:constructorsynopsis>
<db:methodname>QTextFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextFormat()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new text format with an <db:code>InvalidFormat</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#FormatType-enum">FormatType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTextFormat-1">
<db:title>[explicit] QTextFormat::QTextFormat(int <db:emphasis>type</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextFormat</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextFormat(int type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new text format of the given <db:code role="parameter">type</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#FormatType-enum">FormatType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTextFormat-2">
<db:title>QTextFormat::QTextFormat(const QTextFormat &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextFormat</db:methodname>
<db:methodparam>
<db:type>const QTextFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextFormat(const QTextFormat &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new text format with the same attributes as the <db:code role="parameter">other</db:code> text format.</db:para>
</db:section>
<db:section xml:id="dtor.QTextFormat">
<db:title>QTextFormat::~QTextFormat()</db:title>
<db:destructorsynopsis>
<db:methodname>~QTextFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QTextFormat()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this text format.</db:para>
</db:section>
<db:section xml:id="background">
<db:title>QBrush QTextFormat::background() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBrush</db:type>
<db:methodname>background</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush background() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the brush used to paint the document's background.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#setBackground">setBackground</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#clearBackground">clearBackground</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#foreground">foreground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boolProperty">
<db:title>bool QTextFormat::boolProperty(int <db:emphasis>propertyId</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>boolProperty</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>propertyId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool boolProperty(int propertyId) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the property specified by <db:code role="parameter">propertyId</db:code>. If the property isn't of QTextFormat::Bool type, false is returned instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#setProperty">setProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#intProperty">intProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#doubleProperty">doubleProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#stringProperty">stringProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#colorProperty">colorProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#lengthProperty">lengthProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#lengthVectorProperty">lengthVectorProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#Property-enum">Property</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="brushProperty">
<db:title>QBrush QTextFormat::brushProperty(int <db:emphasis>propertyId</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBrush</db:type>
<db:methodname>brushProperty</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>propertyId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush brushProperty(int propertyId) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the property given by <db:code role="parameter">propertyId</db:code>; if the property isn't of <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QBrush</db:link> type, <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::NoBrush</db:link> is returned instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#setProperty">setProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#boolProperty">boolProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#intProperty">intProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#doubleProperty">doubleProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#stringProperty">stringProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#lengthProperty">lengthProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#lengthVectorProperty">lengthVectorProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#Property-enum">Property</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearBackground">
<db:title>void QTextFormat::clearBackground()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearBackground</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearBackground()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the brush used to paint the document's background. The default brush will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#background">background</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#setBackground">setBackground</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#clearForeground">clearForeground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearForeground">
<db:title>void QTextFormat::clearForeground()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearForeground</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearForeground()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the brush used to paint the document's foreground. The default brush will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#foreground">foreground</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#setForeground">setForeground</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#clearBackground">clearBackground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearProperty">
<db:title>void QTextFormat::clearProperty(int <db:emphasis>propertyId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearProperty</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>propertyId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearProperty(int propertyId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the value of the property given by <db:code role="parameter">propertyId</db:code></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#Property-enum">Property</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="colorProperty">
<db:title>QColor QTextFormat::colorProperty(int <db:emphasis>propertyId</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QColor</db:type>
<db:methodname>colorProperty</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>propertyId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor colorProperty(int propertyId) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the property given by <db:code role="parameter">propertyId</db:code>; if the property isn't of <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QColor</db:link> type, an invalid color is returned instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#setProperty">setProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#boolProperty">boolProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#intProperty">intProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#doubleProperty">doubleProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#stringProperty">stringProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#lengthProperty">lengthProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#lengthVectorProperty">lengthVectorProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#Property-enum">Property</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="doubleProperty">
<db:title>qreal QTextFormat::doubleProperty(int <db:emphasis>propertyId</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>doubleProperty</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>propertyId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal doubleProperty(int propertyId) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the property specified by <db:code role="parameter">propertyId</db:code>. If the property isn't of <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Double</db:link> or <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Float</db:link> type, 0 is returned instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#setProperty">setProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#boolProperty">boolProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#intProperty">intProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#stringProperty">stringProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#colorProperty">colorProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#lengthProperty">lengthProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#lengthVectorProperty">lengthVectorProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#Property-enum">Property</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="foreground">
<db:title>QBrush QTextFormat::foreground() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBrush</db:type>
<db:methodname>foreground</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush foreground() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the brush used to render foreground details, such as text, frame outlines, and table borders.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#setForeground">setForeground</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#clearForeground">clearForeground</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#background">background</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasProperty">
<db:title>bool QTextFormat::hasProperty(int <db:emphasis>propertyId</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasProperty</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>propertyId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasProperty(int propertyId) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the text format has a property with the given <db:code role="parameter">propertyId</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#properties">properties</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#Property-enum">Property</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="intProperty">
<db:title>int QTextFormat::intProperty(int <db:emphasis>propertyId</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>intProperty</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>propertyId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int intProperty(int propertyId) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the property specified by <db:code role="parameter">propertyId</db:code>. If the property is not of QTextFormat::Integer type, 0 is returned instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#setProperty">setProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#boolProperty">boolProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#doubleProperty">doubleProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#stringProperty">stringProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#colorProperty">colorProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#lengthProperty">lengthProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#lengthVectorProperty">lengthVectorProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#Property-enum">Property</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isBlockFormat">
<db:title>bool QTextFormat::isBlockFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isBlockFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isBlockFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this text format is a <db:code>BlockFormat</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isCharFormat">
<db:title>bool QTextFormat::isCharFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isCharFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isCharFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this text format is a <db:code>CharFormat</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>[since 5.3] bool QTextFormat::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the format does not store any properties; false otherwise.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#propertyCount">propertyCount</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#properties">properties</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isFrameFormat">
<db:title>bool QTextFormat::isFrameFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isFrameFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isFrameFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this text format is a <db:code>FrameFormat</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isImageFormat">
<db:title>bool QTextFormat::isImageFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isImageFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isImageFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this text format is an image format; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isListFormat">
<db:title>bool QTextFormat::isListFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isListFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isListFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this text format is a <db:code>ListFormat</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isTableCellFormat">
<db:title>bool QTextFormat::isTableCellFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isTableCellFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isTableCellFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this text format is a <db:code>TableCellFormat</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isTableFormat">
<db:title>bool QTextFormat::isTableFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isTableFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isTableFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this text format is a <db:code>TableFormat</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QTextFormat::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the format is valid (i.e. is not <db:link xlink:href="qtextformat.xml#FormatType-enum">InvalidFormat</db:link>); otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="layoutDirection">
<db:title>Qt::LayoutDirection QTextFormat::layoutDirection() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::LayoutDirection</db:type>
<db:methodname>layoutDirection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::LayoutDirection layoutDirection() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the document's layout direction.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#setLayoutDirection">setLayoutDirection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lengthProperty">
<db:title>QTextLength QTextFormat::lengthProperty(int <db:emphasis>propertyId</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextLength</db:type>
<db:methodname>lengthProperty</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>propertyId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextLength lengthProperty(int propertyId) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the property given by <db:code role="parameter">propertyId</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#setProperty">setProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#boolProperty">boolProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#intProperty">intProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#doubleProperty">doubleProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#stringProperty">stringProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#colorProperty">colorProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#lengthVectorProperty">lengthVectorProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#Property-enum">Property</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lengthVectorProperty">
<db:title>QList&lt;QTextLength&gt; QTextFormat::lengthVectorProperty(int <db:emphasis>propertyId</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QTextLength&gt;</db:type>
<db:methodname>lengthVectorProperty</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>propertyId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QTextLength&gt; lengthVectorProperty(int propertyId) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the property given by <db:code role="parameter">propertyId</db:code>. If the property isn't of QTextFormat::LengthVector type, an empty list is returned instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#setProperty">setProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#boolProperty">boolProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#intProperty">intProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#doubleProperty">doubleProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#stringProperty">stringProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#colorProperty">colorProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#lengthProperty">lengthProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#Property-enum">Property</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="merge">
<db:title>void QTextFormat::merge(const QTextFormat &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>merge</db:methodname>
<db:methodparam>
<db:type>const QTextFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void merge(const QTextFormat &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Merges the <db:code role="parameter">other</db:code> format with this format; where there are conflicts the <db:code role="parameter">other</db:code> format takes precedence.</db:para>
</db:section>
<db:section xml:id="objectIndex">
<db:title>int QTextFormat::objectIndex() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>objectIndex</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int objectIndex() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index of the format object, or -1 if the format object is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#setObjectIndex">setObjectIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="objectType">
<db:title>int QTextFormat::objectType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>objectType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int objectType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the text format's object type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#ObjectTypes-enum">ObjectTypes</db:link></db:member>
<db:member><db:link xlink:href="qtextformat.xml#setObjectType">setObjectType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="penProperty">
<db:title>QPen QTextFormat::penProperty(int <db:emphasis>propertyId</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPen</db:type>
<db:methodname>penProperty</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>propertyId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPen penProperty(int propertyId) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the property given by <db:code role="parameter">propertyId</db:code>; if the property isn't of <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QPen</db:link> type, <db:link xlink:href="qt.xml#PenStyle-enum">Qt::NoPen</db:link> is returned instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#setProperty">setProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#boolProperty">boolProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#intProperty">intProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#doubleProperty">doubleProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#stringProperty">stringProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#lengthProperty">lengthProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#lengthVectorProperty">lengthVectorProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#Property-enum">Property</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="properties">
<db:title>QMap&lt;int, QVariant&gt; QTextFormat::properties() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMap&lt;int, QVariant&gt;</db:type>
<db:methodname>properties</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMap&lt;int, QVariant&gt; properties() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a map with all properties of this text format.</db:para>
</db:section>
<db:section xml:id="property">
<db:title>QVariant QTextFormat::property(int <db:emphasis>propertyId</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>property</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>propertyId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant property(int propertyId) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the property specified by the given <db:code role="parameter">propertyId</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#setProperty">setProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#Property-enum">Property</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="propertyCount">
<db:title>int QTextFormat::propertyCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>propertyCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int propertyCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of properties stored in the format.</db:para>
</db:section>
<db:section xml:id="setBackground">
<db:title>void QTextFormat::setBackground(const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBackground</db:methodname>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBackground(const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the brush use to paint the document's background to the <db:code role="parameter">brush</db:code> specified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#background">background</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#clearBackground">clearBackground</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#setForeground">setForeground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setForeground">
<db:title>void QTextFormat::setForeground(const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setForeground</db:methodname>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setForeground(const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the foreground brush to the specified <db:code role="parameter">brush</db:code>. The foreground brush is mostly used to render text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#foreground">foreground</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#clearForeground">clearForeground</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#setBackground">setBackground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLayoutDirection">
<db:title>void QTextFormat::setLayoutDirection(Qt::LayoutDirection <db:emphasis>direction</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLayoutDirection</db:methodname>
<db:methodparam>
<db:type>Qt::LayoutDirection</db:type>
<db:parameter>direction</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLayoutDirection(Qt::LayoutDirection direction)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the document's layout direction to the specified <db:code role="parameter">direction</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#layoutDirection">layoutDirection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setObjectIndex">
<db:title>void QTextFormat::setObjectIndex(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setObjectIndex</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setObjectIndex(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the format object's object <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#objectIndex">objectIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setObjectType">
<db:title>void QTextFormat::setObjectType(int <db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setObjectType</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setObjectType(int type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the text format's object type to <db:code role="parameter">type</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#ObjectTypes-enum">ObjectTypes</db:link></db:member>
<db:member><db:link xlink:href="qtextformat.xml#objectType">objectType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProperty">
<db:title>void QTextFormat::setProperty(int <db:emphasis>propertyId</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setProperty</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>propertyId</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setProperty(int propertyId, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the property specified by the <db:code role="parameter">propertyId</db:code> to the given <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#property">property</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#Property-enum">Property</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProperty-1">
<db:title>void QTextFormat::setProperty(int <db:emphasis>propertyId</db:emphasis>, const QList&lt;QTextLength&gt; &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setProperty</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>propertyId</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;QTextLength&gt; &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setProperty(int propertyId, const QList&lt;QTextLength&gt; &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the value of the property given by <db:code role="parameter">propertyId</db:code> to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#lengthVectorProperty">lengthVectorProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#Property-enum">Property</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stringProperty">
<db:title>QString QTextFormat::stringProperty(int <db:emphasis>propertyId</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>stringProperty</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>propertyId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString stringProperty(int propertyId) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the property given by <db:code role="parameter">propertyId</db:code>; if the property isn't of <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QString</db:link> type, an empty string is returned instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#setProperty">setProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#boolProperty">boolProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#intProperty">intProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#doubleProperty">doubleProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#colorProperty">colorProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#lengthProperty">lengthProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#lengthVectorProperty">lengthVectorProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextformat.xml#Property-enum">Property</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.0] void QTextFormat::swap(QTextFormat &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QTextFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QTextFormat &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this text format with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="toBlockFormat">
<db:title>QTextBlockFormat QTextFormat::toBlockFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextBlockFormat</db:type>
<db:methodname>toBlockFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextBlockFormat toBlockFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this format as a block format.</db:para>
</db:section>
<db:section xml:id="toCharFormat">
<db:title>QTextCharFormat QTextFormat::toCharFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextCharFormat</db:type>
<db:methodname>toCharFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCharFormat toCharFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this format as a character format.</db:para>
</db:section>
<db:section xml:id="toFrameFormat">
<db:title>QTextFrameFormat QTextFormat::toFrameFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextFrameFormat</db:type>
<db:methodname>toFrameFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextFrameFormat toFrameFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this format as a frame format.</db:para>
</db:section>
<db:section xml:id="toImageFormat">
<db:title>QTextImageFormat QTextFormat::toImageFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextImageFormat</db:type>
<db:methodname>toImageFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextImageFormat toImageFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this format as an image format.</db:para>
</db:section>
<db:section xml:id="toListFormat">
<db:title>QTextListFormat QTextFormat::toListFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextListFormat</db:type>
<db:methodname>toListFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextListFormat toListFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this format as a list format.</db:para>
</db:section>
<db:section xml:id="toTableCellFormat">
<db:title>QTextTableCellFormat QTextFormat::toTableCellFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextTableCellFormat</db:type>
<db:methodname>toTableCellFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextTableCellFormat toTableCellFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this format as a table cell format.</db:para>
</db:section>
<db:section xml:id="toTableFormat">
<db:title>QTextTableFormat QTextFormat::toTableFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextTableFormat</db:type>
<db:methodname>toTableFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextTableFormat toTableFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this format as a table format.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>int QTextFormat::type() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int type() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of this format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#FormatType-enum">FormatType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QTextFormat::operator QVariant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>operator QVariant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant operator QVariant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the text format as a <db:link xlink:href="qvariant.xml">QVariant</db:link></db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QTextFormat::operator!=(const QTextFormat &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QTextFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QTextFormat &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this text format is different from the <db:code role="parameter">other</db:code> text format.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QTextFormat &amp;QTextFormat::operator=(const QTextFormat &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextFormat &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QTextFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextFormat &amp; operator=(const QTextFormat &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the <db:code role="parameter">other</db:code> text format to this text format, and returns a reference to this text format.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QTextFormat::operator==(const QTextFormat &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QTextFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QTextFormat &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this text format is the same as the <db:code role="parameter">other</db:code> text format.</db:para>
</db:section>
</db:section>
</db:article>
