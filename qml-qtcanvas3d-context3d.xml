<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Context3D QML Type</db:title>
<db:productname>QtCanvas3D</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>QtCanvas3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides the 3D rendering API and context.</db:para>
<db:para>This type was introduced in QtCanvas3D 1.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtCanvas3D 1.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtCanvas3D 1.0</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>An uncreatable QML type that provides a WebGL-like API that can be used to draw 3D graphics to the <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> element. You can get it by calling the <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#getContext-method">Canvas3D.getContext</db:link> method.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="canvas-prop">
<db:title>canvas : Canvas3D</db:title>
<db:para>Holds the read only reference to the <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> for this <db:link xlink:href="qml-qtcanvas3d-context3d.xml">Context3D</db:link>.</db:para>
</db:section>
<db:section xml:id="drawingBufferHeight-prop">
<db:title>drawingBufferHeight : int</db:title>
<db:para>Holds the current read-only logical pixel height of the drawing buffer. To get the height in physical pixels you need to multiply this with the <db:code>devicePixelRatio</db:code>.</db:para>
</db:section>
<db:section xml:id="drawingBufferWidth-prop">
<db:title>drawingBufferWidth : int</db:title>
<db:para>Holds the current read-only logical pixel width of the drawing buffer. To get the width in physical pixels you need to multiply this with the <db:code>devicePixelRatio</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="activeTexture-method">
<db:title>void activeTexture(glEnums <db:emphasis>texture</db:emphasis>)</db:title>
<db:para>Sets the given texture unit as active. The number of texture units is implementation dependent, but must be at least 8. Initially <db:code>Context3D.TEXTURE0</db:code> is active. <db:code role="parameter">texture</db:code> must be one of <db:code>Context3D.TEXTUREi</db:code> values where <db:code>i</db:code> ranges from <db:code>0</db:code> to <db:code>(Context3D.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1)</db:code>.</db:para>
</db:section>
<db:section xml:id="attachShader-method">
<db:title>void attachShader(Canvas3DProgram <db:emphasis>program3D</db:emphasis>, Canvas3DShader <db:emphasis>shader3D</db:emphasis>)</db:title>
<db:para>Attaches the given <db:code role="parameter">shader3D</db:code> object to the given <db:code role="parameter">program3D</db:code> object. Calling this method repeatedly on the same object has no side effects.</db:para>
</db:section>
<db:section xml:id="bindAttribLocation-method">
<db:title>void bindAttribLocation(Canvas3DProgram <db:emphasis>program3D</db:emphasis>, int <db:emphasis>index</db:emphasis>, string <db:emphasis>name</db:emphasis>)</db:title>
<db:para>Binds the attribute <db:code role="parameter">index</db:code> with the attribute variable <db:code role="parameter">name</db:code> in the given <db:code role="parameter">program3D</db:code>.</db:para>
</db:section>
<db:section xml:id="bindBuffer-method">
<db:title>void bindBuffer(glEnums <db:emphasis>target</db:emphasis>, Canvas3DBuffer <db:emphasis>buffer3D</db:emphasis>)</db:title>
<db:para>Binds the given <db:code role="parameter">buffer3D</db:code> to the given <db:code role="parameter">target</db:code>. Target must be either <db:code>Context3D.ARRAY_BUFFER</db:code> or <db:code>Context3D.ELEMENT_ARRAY_BUFFER</db:code>. If the <db:code role="parameter">buffer3D</db:code> given is <db:code>null</db:code>, the current buffer bound to the target is unbound.</db:para>
</db:section>
<db:section xml:id="bindFramebuffer-method">
<db:title>void bindFramebuffer(glEnums <db:emphasis>target</db:emphasis>, Canvas3DFrameBuffer <db:emphasis>buffer</db:emphasis>)</db:title>
<db:para>Binds the given <db:code role="parameter">buffer</db:code> object to the given <db:code role="parameter">target</db:code>. <db:code role="parameter">target</db:code> must be <db:code>Context3D.FRAMEBUFFER</db:code>.</db:para>
</db:section>
<db:section xml:id="bindRenderbuffer-method">
<db:title>void bindRenderbuffer(glEnums <db:emphasis>target</db:emphasis>, Canvas3DRenderBuffer <db:emphasis>renderbuffer</db:emphasis>)</db:title>
<db:para>Binds the given <db:code role="parameter">renderbuffer3D</db:code> object to the given <db:code role="parameter">target</db:code>. <db:code role="parameter">target</db:code> must be <db:code>Context3D.RENDERBUFFER</db:code>.</db:para>
</db:section>
<db:section xml:id="bindTexture-method">
<db:title>void bindTexture(glEnums <db:emphasis>target</db:emphasis>, Canvas3DTexture <db:emphasis>texture3D</db:emphasis>)</db:title>
<db:para>Bind a <db:link xlink:href="qml-qtcanvas3d-canvas3dtexture.xml">Canvas3DTexture</db:link> to a texturing target. <db:code role="parameter">target</db:code> is the target of the active texture unit to which the <db:link xlink:href="qml-qtcanvas3d-canvas3dtexture.xml">Canvas3DTexture</db:link> will be bound. Must be either <db:code>Context3D.TEXTURE_2D</db:code> or <db:code>Context3D.TEXTURE_CUBE_MAP</db:code>. <db:code role="parameter">texture3D</db:code> is the <db:link xlink:href="qml-qtcanvas3d-canvas3dtexture.xml">Canvas3DTexture</db:link> to be bound.</db:para>
</db:section>
<db:section xml:id="blendColor-method">
<db:title>void blendColor(float <db:emphasis>red</db:emphasis>, float <db:emphasis>green</db:emphasis>, float <db:emphasis>blue</db:emphasis>, float <db:emphasis>alpha</db:emphasis>)</db:title>
<db:para>Set the blend color. <db:code role="parameter">red</db:code>, <db:code role="parameter">green</db:code>, <db:code role="parameter">blue</db:code> and <db:code role="parameter">alpha</db:code> specify the components of <db:code>Context3D.BLEND_COLOR</db:code>.</db:para>
</db:section>
<db:section xml:id="blendEquation-method">
<db:title>void blendEquation(glEnums <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Sets the equation used for both the RGB blend equation. The alpha blend equation <db:code role="parameter">mode</db:code> specifies how source and destination colors are to be combined. Must be <db:code>Context3D.FUNC_ADD</db:code>, <db:code>Context3D.FUNC_SUBTRACT</db:code> or <db:code>Context3D.FUNC_REVERSE_SUBTRACT</db:code>.</db:para>
</db:section>
<db:section xml:id="blendEquationSeparate-method">
<db:title>void blendEquationSeparate(glEnums <db:emphasis>modeRGB</db:emphasis>, glEnums <db:emphasis>modeAlpha</db:emphasis>)</db:title>
<db:para>Set the RGB blend equation and the alpha blend equation separately. <db:code role="parameter">modeRGB</db:code> specifies how the RGB components of the source and destination colors are to be combined. Must be <db:code>Context3D.FUNC_ADD</db:code>, <db:code>Context3D.FUNC_SUBTRACT</db:code> or <db:code>Context3D.FUNC_REVERSE_SUBTRACT</db:code>. <db:code role="parameter">modeAlpha</db:code> specifies how the alpha component of the source and destination colors are to be combined. Must be <db:code>Context3D.FUNC_ADD</db:code>, <db:code>Context3D.FUNC_SUBTRACT</db:code>, or <db:code>Context3D.FUNC_REVERSE_SUBTRACT</db:code>.</db:para>
</db:section>
<db:section xml:id="blendFunc-method">
<db:title>void blendFunc(glEnums <db:emphasis>sfactor</db:emphasis>, glEnums <db:emphasis>dfactor</db:emphasis>)</db:title>
<db:para>Sets the pixel arithmetic. <db:code role="parameter">sfactor</db:code> specifies how the RGBA source blending factors are computed. Must be <db:code>Context3D.ZERO</db:code>, <db:code>Context3D.ONE</db:code>, <db:code>Context3D.SRC_COLOR</db:code>, <db:code>Context3D.ONE_MINUS_SRC_COLOR</db:code>, <db:code>Context3D.DST_COLOR</db:code>, <db:code>Context3D.ONE_MINUS_DST_COLOR</db:code>, <db:code>Context3D.SRC_ALPHA</db:code>, <db:code>Context3D.ONE_MINUS_SRC_ALPHA</db:code>, <db:code>Context3D.DST_ALPHA</db:code>, <db:code>Context3D.ONE_MINUS_DST_ALPHA</db:code>, <db:code>Context3D.CONSTANT_COLOR</db:code>, <db:code>Context3D.ONE_MINUS_CONSTANT_COLOR</db:code>, <db:code>Context3D.CONSTANT_ALPHA</db:code>, <db:code>Context3D.ONE_MINUS_CONSTANT_ALPHA</db:code> or <db:code>Context3D.SRC_ALPHA_SATURATE</db:code>. Initial value is <db:code>Context3D.ONE</db:code>. <db:code role="parameter">dfactor</db:code> Specifies how the RGBA destination blending factors are computed. Must be <db:code>Context3D.ZERO</db:code>, <db:code>Context3D.ONE</db:code>, <db:code>Context3D.SRC_COLOR</db:code>, <db:code>Context3D.ONE_MINUS_SRC_COLOR</db:code>, <db:code>Context3D.DST_COLOR</db:code>, <db:code>Context3D.ONE_MINUS_DST_COLOR</db:code>, <db:code>Context3D.SRC_ALPHA</db:code>, <db:code>Context3D.ONE_MINUS_SRC_ALPHA</db:code>, <db:code>Context3D.DST_ALPHA</db:code>, <db:code>Context3D.ONE_MINUS_DST_ALPHA</db:code>, <db:code>Context3D.CONSTANT_COLOR</db:code>, <db:code>Context3D.ONE_MINUS_CONSTANT_COLOR</db:code>, <db:code>Context3D.CONSTANT_ALPHA</db:code> or <db:code>Context3D.ONE_MINUS_CONSTANT_ALPHA</db:code>. Initial value is <db:code>Context3D.ZERO</db:code>.</db:para>
</db:section>
<db:section xml:id="blendFuncSeparate-method">
<db:title>void blendFuncSeparate(glEnums <db:emphasis>srcRGB</db:emphasis>, glEnums <db:emphasis>dstRGB</db:emphasis>, glEnums <db:emphasis>srcAlpha</db:emphasis>, glEnums <db:emphasis>dstAlpha</db:emphasis>)</db:title>
<db:para>Sets the pixel arithmetic for RGB and alpha components separately. <db:code role="parameter">srcRGB</db:code> specifies how the RGB source blending factors are computed. Must be <db:code>Context3D.ZERO</db:code>, <db:code>Context3D.ONE</db:code>, <db:code>Context3D.SRC_COLOR</db:code>, <db:code>Context3D.ONE_MINUS_SRC_COLOR</db:code>, <db:code>Context3D.DST_COLOR</db:code>, <db:code>Context3D.ONE_MINUS_DST_COLOR</db:code>, <db:code>Context3D.SRC_ALPHA</db:code>, <db:code>Context3D.ONE_MINUS_SRC_ALPHA</db:code>, <db:code>Context3D.DST_ALPHA</db:code>, <db:code>Context3D.ONE_MINUS_DST_ALPHA</db:code>, <db:code>Context3D.CONSTANT_COLOR</db:code>, <db:code>Context3D.ONE_MINUS_CONSTANT_COLOR</db:code>, <db:code>Context3D.CONSTANT_ALPHA</db:code>, <db:code>Context3D.ONE_MINUS_CONSTANT_ALPHA</db:code> or <db:code>Context3D.SRC_ALPHA_SATURATE</db:code>. Initial value is <db:code>Context3D.ONE</db:code>. <db:code role="parameter">dstRGB</db:code> Specifies how the RGB destination blending factors are computed. Must be <db:code>Context3D.ZERO</db:code>, <db:code>Context3D.ONE</db:code>, <db:code>Context3D.SRC_COLOR</db:code>, <db:code>Context3D.ONE_MINUS_SRC_COLOR</db:code>, <db:code>Context3D.DST_COLOR</db:code>, <db:code>Context3D.ONE_MINUS_DST_COLOR</db:code>, <db:code>Context3D.SRC_ALPHA</db:code>, <db:code>Context3D.ONE_MINUS_SRC_ALPHA</db:code>, <db:code>Context3D.DST_ALPHA</db:code>, <db:code>Context3D.ONE_MINUS_DST_ALPHA</db:code>, <db:code>Context3D.CONSTANT_COLOR</db:code>, <db:code>Context3D.ONE_MINUS_CONSTANT_COLOR</db:code>, <db:code>Context3D.CONSTANT_ALPHA</db:code> or <db:code>Context3D.ONE_MINUS_CONSTANT_ALPHA</db:code>. Initial value is <db:code>Context3D.ZERO</db:code>. <db:code role="parameter">srcAlpha</db:code> specifies how the alpha source blending factors are computed. Must be <db:code>Context3D.ZERO</db:code>, <db:code>Context3D.ONE</db:code>, <db:code>Context3D.SRC_COLOR</db:code>, <db:code>Context3D.ONE_MINUS_SRC_COLOR</db:code>, <db:code>Context3D.DST_COLOR</db:code>, <db:code>Context3D.ONE_MINUS_DST_COLOR</db:code>, <db:code>Context3D.SRC_ALPHA</db:code>, <db:code>Context3D.ONE_MINUS_SRC_ALPHA</db:code>, <db:code>Context3D.DST_ALPHA</db:code>, <db:code>Context3D.ONE_MINUS_DST_ALPHA</db:code>, <db:code>Context3D.CONSTANT_COLOR</db:code>, <db:code>Context3D.ONE_MINUS_CONSTANT_COLOR</db:code>, <db:code>Context3D.CONSTANT_ALPHA</db:code>, <db:code>Context3D.ONE_MINUS_CONSTANT_ALPHA</db:code> or <db:code>Context3D.SRC_ALPHA_SATURATE</db:code>. Initial value is <db:code>Context3D.ONE</db:code>. <db:code role="parameter">dstAlpha</db:code> Specifies how the alpha destination blending factors are computed. Must be <db:code>Context3D.ZERO</db:code>, <db:code>Context3D.ONE</db:code>, <db:code>Context3D.SRC_COLOR</db:code>, <db:code>Context3D.ONE_MINUS_SRC_COLOR</db:code>, <db:code>Context3D.DST_COLOR</db:code>, <db:code>Context3D.ONE_MINUS_DST_COLOR</db:code>, <db:code>Context3D.SRC_ALPHA</db:code>, <db:code>Context3D.ONE_MINUS_SRC_ALPHA</db:code>, <db:code>Context3D.DST_ALPHA</db:code>, <db:code>Context3D.ONE_MINUS_DST_ALPHA</db:code>, <db:code>Context3D.CONSTANT_COLOR</db:code>, <db:code>Context3D.ONE_MINUS_CONSTANT_COLOR</db:code>, <db:code>Context3D.CONSTANT_ALPHA</db:code> or <db:code>Context3D.ONE_MINUS_CONSTANT_ALPHA</db:code>. Initial value is <db:code>Context3D.ZERO</db:code>.</db:para>
</db:section>
<db:section xml:id="bufferData-method">
<db:title>void bufferData(glEnums <db:emphasis>target</db:emphasis>, long <db:emphasis>size</db:emphasis>, glEnums <db:emphasis>usage</db:emphasis>)</db:title>
<db:para>Sets the size of the <db:code role="parameter">target</db:code> buffer to <db:code role="parameter">size</db:code>. Target buffer must be either <db:code>Context3D.ARRAY_BUFFER</db:code> or <db:code>Context3D.ELEMENT_ARRAY_BUFFER</db:code>. <db:code role="parameter">usage</db:code> sets the usage pattern of the data, and must be one of <db:code>Context3D.STREAM_DRAW</db:code>, <db:code>Context3D.STATIC_DRAW</db:code>, or <db:code>Context3D.DYNAMIC_DRAW</db:code>.</db:para>
</db:section>
<db:section xml:id="bufferData-method-1">
<db:title>void bufferData(glEnums <db:emphasis>target</db:emphasis>, value <db:emphasis>data</db:emphasis>, glEnums <db:emphasis>usage</db:emphasis>)</db:title>
<db:para>Writes the <db:code role="parameter">data</db:code> held in <db:code>ArrayBufferView</db:code> or <db:code>ArrayBuffer</db:code> to the <db:code role="parameter">target</db:code> buffer. Target buffer must be either <db:code>Context3D.ARRAY_BUFFER</db:code> or <db:code>Context3D.ELEMENT_ARRAY_BUFFER</db:code>. <db:code role="parameter">usage</db:code> sets the usage pattern of the data, and must be one of <db:code>Context3D.STREAM_DRAW</db:code>, <db:code>Context3D.STATIC_DRAW</db:code>, or <db:code>Context3D.DYNAMIC_DRAW</db:code>.</db:para>
</db:section>
<db:section xml:id="bufferSubData-method">
<db:title>void bufferSubData(glEnums <db:emphasis>target</db:emphasis>, int <db:emphasis>offset</db:emphasis>, value <db:emphasis>data</db:emphasis>)</db:title>
<db:para>Writes the <db:code role="parameter">data</db:code> held in <db:code>ArrayBufferView</db:code> or <db:code>ArrayBuffer</db:code> starting from <db:code role="parameter">offset</db:code> to the <db:code role="parameter">target</db:code> buffer. Target buffer must be either <db:code>Context3D.ARRAY_BUFFER</db:code> or <db:code>Context3D.ELEMENT_ARRAY_BUFFER</db:code>.</db:para>
</db:section>
<db:section xml:id="checkFramebufferStatus-method">
<db:title>Context3D::glEnums checkFramebufferStatus(glEnums <db:emphasis>target</db:emphasis>)</db:title>
<db:para>Returns the completeness status of the framebuffer object. <db:code role="parameter">target</db:code> must be <db:code>Context3D.FRAMEBUFFER</db:code>.</db:para>
</db:section>
<db:section xml:id="clear-method">
<db:title>void clear(glEnums <db:emphasis>flags</db:emphasis>)</db:title>
<db:para>Clears the given <db:code role="parameter">flags</db:code>.</db:para>
</db:section>
<db:section xml:id="clearColor-method">
<db:title>void clearColor(float <db:emphasis>red</db:emphasis>, float <db:emphasis>green</db:emphasis>, float <db:emphasis>blue</db:emphasis>, float <db:emphasis>alpha</db:emphasis>)</db:title>
<db:para>Sets the clear values for the color buffers with <db:code role="parameter">red</db:code>, <db:code role="parameter">green</db:code>, <db:code role="parameter">blue</db:code> and <db:code role="parameter">alpha</db:code>. Values must be between <db:code>[0, 1]</db:code>. All default to <db:code>0</db:code>.</db:para>
</db:section>
<db:section xml:id="clearDepth-method">
<db:title>void clearDepth(float <db:emphasis>depth</db:emphasis>)</db:title>
<db:para>Sets the clear value for the depth buffer to <db:code role="parameter">depth</db:code>. Must be between <db:code>[0, 1]</db:code>. Defaults to <db:code>1</db:code>.</db:para>
</db:section>
<db:section xml:id="clearStencil-method">
<db:title>void clearStencil(int <db:emphasis>stencil</db:emphasis>)</db:title>
<db:para>Sets the clear value for the stencil buffer to <db:code role="parameter">stencil</db:code>. Defaults to <db:code>0</db:code>.</db:para>
</db:section>
<db:section xml:id="colorMask-method">
<db:title>void colorMask(bool <db:emphasis>maskRed</db:emphasis>, bool <db:emphasis>maskGreen</db:emphasis>, bool <db:emphasis>maskBlue</db:emphasis>, bool <db:emphasis>maskAlpha</db:emphasis>)</db:title>
<db:para>Enables or disables the writing of colors to the frame buffer based on <db:code role="parameter">maskRed</db:code>, <db:code role="parameter">maskGreen</db:code>, <db:code role="parameter">maskBlue</db:code> and <db:code role="parameter">maskAlpha</db:code>. All default to <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="compileShader-method">
<db:title>void compileShader(Canvas3DShader <db:emphasis>shader</db:emphasis>)</db:title>
<db:para>Compiles the given <db:code role="parameter">shader</db:code> object.</db:para>
</db:section>
<db:section xml:id="compressedTexImage2D-method">
<db:title>void compressedTexImage2D(glEnums <db:emphasis>target</db:emphasis>, int <db:emphasis>level</db:emphasis>, glEnums <db:emphasis>internalformat</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, int <db:emphasis>border</db:emphasis>, TypedArray <db:emphasis>pixels</db:emphasis>)</db:title>
<db:para>Specify a 2D compressed texture image. <db:code role="parameter">target</db:code> specifies the target texture of the active texture unit. Must be one of: <db:code>Context3D.TEXTURE_2D</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_X</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_NEGATIVE_X</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_Y</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_NEGATIVE_Y</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_Z</db:code>, or <db:code>Context3D.TEXTURE_CUBE_MAP_NEGATIVE_Z</db:code>. <db:code role="parameter">level</db:code> specifies the level of detail number. Level <db:code>0</db:code> is the base image level. Level <db:code>n</db:code> is the <db:code>n</db:code>th mipmap reduction image. <db:code role="parameter">internalformat</db:code> specifies the internal format of the compressed texture. <db:code role="parameter">width</db:code> specifies the width of the texture image. All implementations will support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide. <db:code role="parameter">height</db:code> specifies the height of the texture image. All implementations will support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high. <db:code role="parameter">border</db:code> must be <db:code>0</db:code>. <db:code role="parameter">pixels</db:code> specifies the TypedArray containing the compressed image data.</db:para>
</db:section>
<db:section xml:id="compressedTexSubImage2D-method">
<db:title>void compressedTexSubImage2D(glEnums <db:emphasis>target</db:emphasis>, int <db:emphasis>level</db:emphasis>, int <db:emphasis>xoffset</db:emphasis>, int <db:emphasis>yoffset</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, glEnums <db:emphasis>format</db:emphasis>, TypedArray <db:emphasis>pixels</db:emphasis>)</db:title>
<db:para>Specify a 2D compressed texture image. <db:code role="parameter">target</db:code> specifies the target texture of the active texture unit. Must be one of: <db:code>Context3D.TEXTURE_2D</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_X</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_NEGATIVE_X</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_Y</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_NEGATIVE_Y</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_Z</db:code>, or <db:code>Context3D.TEXTURE_CUBE_MAP_NEGATIVE_Z</db:code>. <db:code role="parameter">level</db:code> specifies the level of detail number. Level <db:code>0</db:code> is the base image level. Level <db:code>n</db:code> is the <db:code>n</db:code>th mipmap reduction image. <db:code role="parameter">xoffset</db:code> Specifies a texel offset in the x direction within the texture array. <db:code role="parameter">yoffset</db:code> Specifies a texel offset in the y direction within the texture array. <db:code role="parameter">width</db:code> Width of the texture subimage. <db:code role="parameter">height</db:code> Height of the texture subimage. <db:code role="parameter">pixels</db:code> specifies the TypedArray containing the compressed image data. <db:code role="parameter">format</db:code> Format of the texel data given in <db:code role="parameter">pixels</db:code>, must match the value of <db:code>internalFormat</db:code> parameter given when the texture was created. <db:code role="parameter">pixels</db:code> TypedArray containing the compressed image data. If pixels is <db:code>null</db:code>.</db:para>
</db:section>
<db:section xml:id="copyTexImage2D-method">
<db:title>void copyTexImage2D(glEnums <db:emphasis>target</db:emphasis>, int <db:emphasis>level</db:emphasis>, glEnums <db:emphasis>internalformat</db:emphasis>, int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, int <db:emphasis>border</db:emphasis>)</db:title>
<db:para>Copies pixels into currently bound 2D texture. <db:code role="parameter">target</db:code> specifies the target texture of the active texture unit. Must be <db:code>Context3D.TEXTURE_2D</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_X</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_NEGATIVE_X</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_Y</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_NEGATIVE_Y</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_Z</db:code>, or <db:code>Context3D.TEXTURE_CUBE_MAP_NEGATIVE_Z</db:code>. <db:code role="parameter">level</db:code> specifies the level of detail number. Level <db:code>0</db:code> is the base image level. Level <db:code>n</db:code> is the <db:code>n</db:code>th mipmap reduction image. <db:code role="parameter">internalformat</db:code> specifies the internal format of the texture. Must be <db:code>Context3D.ALPHA</db:code>, <db:code>Context3D.LUMINANCE</db:code>, <db:code>Context3D.LUMINANCE_ALPHA</db:code>, <db:code>Context3D.RGB</db:code> or <db:code>Context3D.RGBA</db:code>. <db:code role="parameter">x</db:code> specifies the window coordinate of the left edge of the rectangular region of pixels to be copied. <db:code role="parameter">y</db:code> specifies the window coordinate of the lower edge of the rectangular region of pixels to be copied. <db:code role="parameter">width</db:code> specifies the width of the texture image. All implementations will support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide. <db:code role="parameter">height</db:code> specifies the height of the texture image. All implementations will support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high. <db:code role="parameter">border</db:code> must be <db:code>0</db:code>.</db:para>
</db:section>
<db:section xml:id="copyTexSubImage2D-method">
<db:title>void copyTexSubImage2D(glEnums <db:emphasis>target</db:emphasis>, int <db:emphasis>level</db:emphasis>, int <db:emphasis>xoffset</db:emphasis>, int <db:emphasis>yoffset</db:emphasis>, int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:para>Copies to into a currently bound 2D texture subimage. <db:code role="parameter">target</db:code> specifies the target texture of the active texture unit. Must be <db:code>Context3D.TEXTURE_2D</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_X</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_NEGATIVE_X</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_Y</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_NEGATIVE_Y</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_Z</db:code>, or <db:code>Context3D.TEXTURE_CUBE_MAP_NEGATIVE_Z</db:code>. <db:code role="parameter">level</db:code> specifies the level of detail number. Level <db:code>0</db:code> is the base image level. Level <db:code>n</db:code> is the <db:code>n</db:code>th mipmap reduction image. <db:code role="parameter">xoffset</db:code> specifies the texel offset in the x direction within the texture array. <db:code role="parameter">yoffset</db:code> specifies the texel offset in the y direction within the texture array. <db:code role="parameter">x</db:code> specifies the window coordinate of the left edge of the rectangular region of pixels to be copied. <db:code role="parameter">y</db:code> specifies the window coordinate of the lower edge of the rectangular region of pixels to be copied. <db:code role="parameter">width</db:code> specifies the width of the texture subimage. <db:code role="parameter">height</db:code> specifies the height of the texture subimage.</db:para>
</db:section>
<db:section xml:id="createBuffer-method">
<db:title>Canvas3DBuffer createBuffer()</db:title>
<db:para>Creates a <db:link xlink:href="qml-qtcanvas3d-canvas3dbuffer.xml">Canvas3DBuffer</db:link> object and initializes it with a buffer object name as if <db:code>glGenBuffers()</db:code> was called.</db:para>
</db:section>
<db:section xml:id="createFramebuffer-method">
<db:title>Canvas3DFrameBuffer createFramebuffer()</db:title>
<db:para>Returns a created <db:link xlink:href="qml-qtcanvas3d-canvas3dframebuffer.xml">Canvas3DFrameBuffer</db:link> object that is initialized with a framebuffer object name as if by calling <db:code>glGenFramebuffers()</db:code>.</db:para>
</db:section>
<db:section xml:id="createProgram-method">
<db:title>Canvas3DProgram createProgram()</db:title>
<db:para>Returns a created <db:link xlink:href="qml-qtcanvas3d-canvas3dprogram.xml">Canvas3DProgram</db:link> object that is initialized with a program object name as if by calling <db:code>glCreateProgram()</db:code>.</db:para>
</db:section>
<db:section xml:id="createRenderbuffer-method">
<db:title>Canvas3DRenderBuffer createRenderbuffer()</db:title>
<db:para>Returns a created <db:link xlink:href="qml-qtcanvas3d-canvas3drenderbuffer.xml">Canvas3DRenderBuffer</db:link> object that is initialized with a renderbuffer object name as if by calling <db:code>glGenRenderbuffers()</db:code>.</db:para>
</db:section>
<db:section xml:id="createShader-method">
<db:title>Canvas3DShader createShader(glEnums <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Creates a shader of <db:code role="parameter">type</db:code>. Must be either <db:code>Context3D.VERTEX_SHADER</db:code> or <db:code>Context3D.FRAGMENT_SHADER</db:code>.</db:para>
</db:section>
<db:section xml:id="createTexture-method">
<db:title>Canvas3DTexture createTexture()</db:title>
<db:para>Create a <db:link xlink:href="qml-qtcanvas3d-canvas3dtexture.xml">Canvas3DTexture</db:link> object and initialize a name for it as by calling <db:code>glGenTextures()</db:code>.</db:para>
</db:section>
<db:section xml:id="cullFace-method">
<db:title>void cullFace(glEnums <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Sets the culling to <db:code role="parameter">mode</db:code>. Must be one of <db:code>Context3D.FRONT</db:code>, <db:code>Context3D.BACK</db:code>, or <db:code>Context3D.FRONT_AND_BACK</db:code>. Defaults to <db:code>Context3D.BACK</db:code>.</db:para>
</db:section>
<db:section xml:id="deleteBuffer-method">
<db:title>void deleteBuffer(Canvas3DBuffer <db:emphasis>buffer3D</db:emphasis>)</db:title>
<db:para>Deletes the <db:code role="parameter">buffer3D</db:code>. Has no effect if the <db:link xlink:href="qml-qtcanvas3d-canvas3dbuffer.xml">Canvas3DBuffer</db:link> object has been deleted already.</db:para>
</db:section>
<db:section xml:id="deleteFramebuffer-method">
<db:title>void deleteFramebuffer(Canvas3DFrameBuffer <db:emphasis>buffer</db:emphasis>)</db:title>
<db:para>Deletes the given framebuffer as if by calling <db:code>glDeleteFramebuffers()</db:code>. Calling this method repeatedly on the same object has no side effects. <db:code role="parameter">buffer</db:code> is the <db:link xlink:href="qml-qtcanvas3d-canvas3dframebuffer.xml">Canvas3DFrameBuffer</db:link> to be deleted.</db:para>
</db:section>
<db:section xml:id="deleteProgram-method">
<db:title>void deleteProgram(Canvas3DProgram <db:emphasis>program3D</db:emphasis>)</db:title>
<db:para>Deletes the given program as if by calling <db:code>glDeleteProgram()</db:code>. Calling this method repeatedly on the same object has no side effects. <db:code role="parameter">program3D</db:code> is the <db:link xlink:href="qml-qtcanvas3d-canvas3dprogram.xml">Canvas3DProgram</db:link> to be deleted.</db:para>
</db:section>
<db:section xml:id="deleteRenderbuffer-method">
<db:title>void deleteRenderbuffer(Canvas3DRenderBuffer <db:emphasis>renderbuffer3D</db:emphasis>)</db:title>
<db:para>Deletes the given renderbuffer as if by calling <db:code>glDeleteRenderbuffers()</db:code>. Calling this method repeatedly on the same object has no side effects. <db:code role="parameter">renderbuffer3D</db:code> is the <db:link xlink:href="qml-qtcanvas3d-canvas3drenderbuffer.xml">Canvas3DRenderBuffer</db:link> to be deleted.</db:para>
</db:section>
<db:section xml:id="deleteShader-method">
<db:title>void deleteShader(Canvas3DShader <db:emphasis>shader</db:emphasis>)</db:title>
<db:para>Deletes the given shader as if by calling <db:code>glDeleteShader()</db:code>. Calling this method repeatedly on the same object has no side effects. <db:code role="parameter">shader</db:code> is the <db:link xlink:href="qml-qtcanvas3d-canvas3dshader.xml">Canvas3DShader</db:link> to be deleted.</db:para>
</db:section>
<db:section xml:id="deleteTexture-method">
<db:title>void deleteTexture(Canvas3DTexture <db:emphasis>texture3D</db:emphasis>)</db:title>
<db:para>Deletes the given texture as if by calling <db:code>glDeleteTextures()</db:code>. Calling this method repeatedly on the same object has no side effects. <db:code role="parameter">texture3D</db:code> is the <db:link xlink:href="qml-qtcanvas3d-canvas3dtexture.xml">Canvas3DTexture</db:link> to be deleted.</db:para>
</db:section>
<db:section xml:id="depthFunc-method">
<db:title>void depthFunc(glEnums <db:emphasis>func</db:emphasis>)</db:title>
<db:para>Sets the depth function to <db:code role="parameter">func</db:code>. Must be one of <db:code>Context3D.NEVER</db:code>, <db:code>Context3D.LESS</db:code>, <db:code>Context3D.EQUAL</db:code>, <db:code>Context3D.LEQUAL</db:code>, <db:code>Context3D.GREATER</db:code>, <db:code>Context3D.NOTEQUAL</db:code>, <db:code>Context3D.GEQUAL</db:code>, or <db:code>Context3D.ALWAYS</db:code>. Defaults to <db:code>Context3D.LESS</db:code>.</db:para>
</db:section>
<db:section xml:id="depthMask-method">
<db:title>void depthMask(bool <db:emphasis>flag</db:emphasis>)</db:title>
<db:para>Enables or disables the depth mask based on <db:code role="parameter">flag</db:code>. Defaults to <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="depthRange-method">
<db:title>void depthRange(float <db:emphasis>zNear</db:emphasis>, float <db:emphasis>zFar</db:emphasis>)</db:title>
<db:para>Sets the depth range between <db:code role="parameter">zNear</db:code> and <db:code role="parameter">zFar</db:code>. Values are clamped to <db:code>[0, 1]</db:code>. <db:code role="parameter">zNear</db:code> must be less or equal to <db:code role="parameter">zFar</db:code>. zNear Range defaults to <db:code>[0, 1]</db:code>.</db:para>
</db:section>
<db:section xml:id="detachShader-method">
<db:title>void detachShader(Canvas3DProgram <db:emphasis>program</db:emphasis>, Canvas3DShader <db:emphasis>shader</db:emphasis>)</db:title>
<db:para>Detaches given shader object from given program object. <db:code role="parameter">program3D</db:code> specifies the program object from which to detach the shader. <db:code role="parameter">shader3D</db:code> specifies the shader object to detach.</db:para>
</db:section>
<db:section xml:id="disable-method">
<db:title>void disable(glEnums <db:emphasis>cap</db:emphasis>)</db:title>
<db:para>Disable server side GL capabilities. <db:code role="parameter">cap</db:code> specifies a constant indicating a GL capability.</db:para>
</db:section>
<db:section xml:id="disableVertexAttribArray-method">
<db:title>void disableVertexAttribArray(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Disables the vertex attribute array at <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="drawArrays-method">
<db:title>void drawArrays(glEnums <db:emphasis>mode</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Renders the geometric primitives held in the currently bound array buffer starting from <db:code role="parameter">first</db:code> up to <db:code role="parameter">count</db:code> using <db:code role="parameter">mode</db:code> for drawing. Mode can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>Context3D.POINTS</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.LINES</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.LINE_LOOP</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.LINE_STRIP</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.TRIANGLES</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.TRIANGLE_STRIP</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.TRIANGLE_FAN</db:code></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="drawElements-method">
<db:title>void drawElements(glEnums <db:emphasis>mode</db:emphasis>, int <db:emphasis>count</db:emphasis>, glEnums <db:emphasis>type</db:emphasis>, long <db:emphasis>offset</db:emphasis>)</db:title>
<db:para>Renders the number of geometric elements given in <db:code role="parameter">count</db:code> held in the currently bound element array buffer using <db:code role="parameter">mode</db:code> for drawing. Mode can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>Context3D.POINTS</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.LINES</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.LINE_LOOP</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.LINE_STRIP</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.TRIANGLES</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.TRIANGLE_STRIP</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.TRIANGLE_FAN</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:code role="parameter">type</db:code> specifies the element type and can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>Context3D.UNSIGNED_BYTE</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.UNSIGNED_SHORT</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:code role="parameter">offset</db:code> specifies the location3D where indices are stored.</db:para>
</db:section>
<db:section xml:id="enable-method">
<db:title>void enable(glEnums <db:emphasis>cap</db:emphasis>)</db:title>
<db:para>Enable server side GL capabilities. <db:code role="parameter">cap</db:code> specifies a constant indicating a GL capability.</db:para>
</db:section>
<db:section xml:id="enableVertexAttribArray-method">
<db:title>void enableVertexAttribArray(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Enables the vertex attribute array at <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="finish-method">
<db:title>void finish()</db:title>
<db:para>Forces all previous 3D rendering commands to complete.</db:para>
</db:section>
<db:section xml:id="flush-method">
<db:title>void flush()</db:title>
<db:para>Indicates to graphics driver that previously sent commands must complete within finite time.</db:para>
</db:section>
<db:section xml:id="framebufferRenderbuffer-method">
<db:title>void framebufferRenderbuffer(glEnums <db:emphasis>target</db:emphasis>, glEnums <db:emphasis>attachment</db:emphasis>, glEnums <db:emphasis>renderbuffertarget</db:emphasis>, Canvas3DRenderBuffer <db:emphasis>renderbuffer3D</db:emphasis>)</db:title>
<db:para>Attaches the given <db:code role="parameter">renderbuffer3D</db:code> object to the <db:code role="parameter">attachment</db:code> point of the current framebuffer object. <db:code role="parameter">target</db:code> must be <db:code>Context3D.FRAMEBUFFER</db:code>. <db:code role="parameter">renderbuffertarget</db:code> must be <db:code>Context3D.RENDERBUFFER</db:code>.</db:para>
</db:section>
<db:section xml:id="framebufferTexture2D-method">
<db:title>void framebufferTexture2D(glEnums <db:emphasis>target</db:emphasis>, glEnums <db:emphasis>attachment</db:emphasis>, glEnums <db:emphasis>textarget</db:emphasis>, Canvas3DTexture <db:emphasis>texture3D</db:emphasis>, int <db:emphasis>level</db:emphasis>)</db:title>
<db:para>Attaches the given <db:code role="parameter">renderbuffer</db:code> object to the <db:code role="parameter">attachment</db:code> point of the current framebuffer object. <db:code role="parameter">target</db:code> must be <db:code>Context3D.FRAMEBUFFER</db:code>. <db:code role="parameter">renderbuffertarget</db:code> must be <db:code>Context3D.RENDERBUFFER</db:code>.</db:para>
</db:section>
<db:section xml:id="frontFace-method">
<db:title>void frontFace(glEnums <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Sets the front face drawing to <db:code role="parameter">mode</db:code>. Must be either <db:code>Context3D.CW</db:code> or <db:code>Context3D.CCW</db:code>. Defaults to <db:code>Context3D.CCW</db:code>.</db:para>
</db:section>
<db:section xml:id="generateMipmap-method">
<db:title>void generateMipmap(glEnums <db:emphasis>target</db:emphasis>)</db:title>
<db:para>Generates a complete set of mipmaps for a texture object of the currently active texture unit. <db:code role="parameter">target</db:code> defines the texture target to which the texture object is bound whose mipmaps will be generated. Must be either <db:code>Context3D.TEXTURE_2D</db:code> or <db:code>Context3D.TEXTURE_CUBE_MAP</db:code>.</db:para>
</db:section>
<db:section xml:id="getActiveAttrib-method">
<db:title>Canvas3DActiveInfo getActiveAttrib(Canvas3DProgram <db:emphasis>program3D</db:emphasis>, uint <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns information about the given active attribute variable defined by <db:code role="parameter">index</db:code> for the given <db:code role="parameter">program3D</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcanvas3d-canvas3dactiveinfo.xml">Canvas3DActiveInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getActiveUniform-method">
<db:title>Canvas3DActiveInfo getActiveUniform(Canvas3DProgram <db:emphasis>program3D</db:emphasis>, uint <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns information about the given active uniform variable defined by <db:code role="parameter">index</db:code> for the given <db:code role="parameter">program3D</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcanvas3d-canvas3dactiveinfo.xml">Canvas3DActiveInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getAttachedShaders-method">
<db:title>list&lt;Canvas3DShader&gt; getAttachedShaders(Canvas3DProgram <db:emphasis>program3D</db:emphasis>)</db:title>
<db:para>Returns the list of shaders currently attached to the given <db:code role="parameter">program3D</db:code>.</db:para>
</db:section>
<db:section xml:id="getAttribLocation-method">
<db:title>int getAttribLocation(Canvas3DProgram <db:emphasis>program3D</db:emphasis>, string <db:emphasis>name</db:emphasis>)</db:title>
<db:para>Returns location3D of the given attribute variable <db:code role="parameter">name</db:code> in the given <db:code role="parameter">program3D</db:code>.</db:para>
</db:section>
<db:section xml:id="getBufferParameter-method">
<db:title>value getBufferParameter(glEnums <db:emphasis>target</db:emphasis>, glEnums <db:emphasis>pname</db:emphasis>)</db:title>
<db:para>Returns the value for the passed <db:code role="parameter">pname</db:code> of the <db:code role="parameter">target</db:code>. Target must be either <db:code>Context3D.ARRAY_BUFFER</db:code> or <db:code>Context3D.ELEMENT_ARRAY_BUFFER</db:code>. pname must be either <db:code>Context3D.BUFFER_SIZE</db:code> or <db:code>Context3D.BUFFER_USAGE</db:code>.</db:para>
</db:section>
<db:section xml:id="getContextAttributes-method">
<db:title>Canvas3DContextAttributes getContextAttributes()</db:title>
<db:para>Returns a copy of the actual context parameters that are used in the current context.</db:para>
</db:section>
<db:section xml:id="getError-method">
<db:title>glEnums getError()</db:title>
<db:para>Returns the error value, if any.</db:para>
</db:section>
<db:section xml:id="getExtension-method">
<db:title>variant getExtension(string <db:emphasis>name</db:emphasis>)</db:title>
<db:para>Returns object if given <db:code role="parameter">name</db:code> matches a supported extension. Otherwise returns <db:code>null</db:code>. The returned object may contain constants and/or functions provided by the extension, but at minimum a unique object is returned. Case-insensitive <db:code role="parameter">name</db:code> of the extension to be returned.</db:para>
</db:section>
<db:section xml:id="getFramebufferAttachmentParameter-method">
<db:title>int getFramebufferAttachmentParameter(glEnums <db:emphasis>target</db:emphasis>, glEnums <db:emphasis>attachment</db:emphasis>, glEnums <db:emphasis>pname</db:emphasis>)</db:title>
<db:para>Returns information specified by <db:code role="parameter">pname</db:code> about given <db:code role="parameter">attachment</db:code> of a framebuffer object bound to the given <db:code role="parameter">target</db:code>.</db:para>
</db:section>
<db:section xml:id="getParameter-method">
<db:title>variant getParameter(glEnums <db:emphasis>pname</db:emphasis>)</db:title>
<db:para>Returns the value for the given <db:code role="parameter">pname</db:code>.</db:para>
</db:section>
<db:section xml:id="getProgramInfoLog-method">
<db:title>string getProgramInfoLog(Canvas3DProgram <db:emphasis>program3D</db:emphasis>)</db:title>
<db:para>Returns the info log string of the given <db:code role="parameter">program3D</db:code>.</db:para>
</db:section>
<db:section xml:id="getProgramParameter-method">
<db:title>variant getProgramParameter(Canvas3DProgram <db:emphasis>program3D</db:emphasis>, glEnums <db:emphasis>paramName</db:emphasis>)</db:title>
<db:para>Return the value for the passed <db:code role="parameter">paramName</db:code> given the passed <db:code role="parameter">program3D</db:code>. The type returned is the natural type for the requested paramName. <db:code role="parameter">paramName</db:code> must be <db:code>Context3D.DELETE_STATUS</db:code>, <db:code>Context3D.LINK_STATUS</db:code>, <db:code>Context3D.VALIDATE_STATUS</db:code>, <db:code>Context3D.ATTACHED_SHADERS</db:code>, <db:code>Context3D.ACTIVE_ATTRIBUTES</db:code> or <db:code>Context3D.ACTIVE_UNIFORMS</db:code>.</db:para>
</db:section>
<db:section xml:id="getRenderbufferParameter-method">
<db:title>int getRenderbufferParameter(glEnums <db:emphasis>target</db:emphasis>, glEnums <db:emphasis>pname</db:emphasis>)</db:title>
<db:para>Returns information specified by <db:code role="parameter">pname</db:code> of a renderbuffer object bound to the given <db:code role="parameter">target</db:code>.</db:para>
</db:section>
<db:section xml:id="getShaderInfoLog-method">
<db:title>string getShaderInfoLog(Canvas3DShader <db:emphasis>shader</db:emphasis>)</db:title>
<db:para>Returns the info log string of the given <db:code role="parameter">shader</db:code>.</db:para>
</db:section>
<db:section xml:id="getShaderParameter-method">
<db:title>int getShaderParameter(Canvas3DShader <db:emphasis>shader</db:emphasis>, glEnums <db:emphasis>pname</db:emphasis>)</db:title>
<db:para>Returns the value of the passed <db:code role="parameter">pname</db:code> for the given <db:code role="parameter">shader</db:code>. <db:code role="parameter">pname</db:code> must be one of <db:code>Context3D.SHADER_TYPE</db:code>, <db:code>Context3D.DELETE_STATUS</db:code> and <db:code>Context3D.COMPILE_STATUS</db:code>.</db:para>
</db:section>
<db:section xml:id="getShaderPrecisionFormat-method">
<db:title>Canvas3DShaderPrecisionFormat getShaderPrecisionFormat(glEnums <db:emphasis>shadertype</db:emphasis>, glEnums <db:emphasis>precisiontype</db:emphasis>)</db:title>
<db:para>Return a new <db:link xlink:href="qml-qtcanvas3d-canvas3dshaderprecisionformat.xml">Canvas3DShaderPrecisionFormat</db:link> describing the range and precision for the specified shader numeric format. <db:code role="parameter">shadertype</db:code> Type of the shader, either <db:code>Context3D.FRAGMENT_SHADER</db:code> or <db:code>Context3D.VERTEX_SHADER</db:code>. <db:code role="parameter">precisiontype</db:code> Can be <db:code>Context3D.LOW_FLOAT</db:code>, <db:code>Context3D.MEDIUM_FLOAT</db:code>, <db:code>Context3D.HIGH_FLOAT</db:code>, <db:code>Context3D.LOW_INT</db:code>, <db:code>Context3D.MEDIUM_INT</db:code> or <db:code>Context3D.HIGH_INT</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcanvas3d-canvas3dshaderprecisionformat.xml">Canvas3DShaderPrecisionFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getShaderSource-method">
<db:title>string getShaderSource(Canvas3DShader <db:emphasis>shader</db:emphasis>)</db:title>
<db:para>Returns the source code string from the <db:code role="parameter">shader</db:code> object.</db:para>
</db:section>
<db:section xml:id="getSupportedExtensions-method">
<db:title>list&lt;variant&gt; getSupportedExtensions()</db:title>
<db:para>Returns an array of the extension strings supported by this implementation</db:para>
</db:section>
<db:section xml:id="getTexParameter-method">
<db:title>variant getTexParameter(glEnums <db:emphasis>target</db:emphasis>, glEnums <db:emphasis>pname</db:emphasis>)</db:title>
<db:para>Returns parameter specified by the <db:code role="parameter">pname</db:code> of a texture object bound to the given <db:code role="parameter">target</db:code>. <db:code role="parameter">pname</db:code> must be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>Context3D.TEXTURE_MAG_FILTER</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.TEXTURE_MIN_FILTER</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.TEXTURE_WRAP_S</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.TEXTURE_WRAP_T</db:code></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="getUniform-method">
<db:title>variant getUniform(Canvas3DProgram <db:emphasis>program</db:emphasis>, Canvas3DUniformLocation <db:emphasis>location3D</db:emphasis>)</db:title>
<db:para>Returns the uniform value at the given <db:code role="parameter">location3D</db:code> in the <db:code role="parameter">program</db:code>. The type returned is dependent on the uniform type, as shown in the table:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Uniform Type</db:para>
</db:th>
<db:th>
<db:para>Returned Type</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>boolean</db:para>
</db:td>
<db:td>
<db:para>boolean</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>int</db:para>
</db:td>
<db:td>
<db:para>int</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>float</db:para>
</db:td>
<db:td>
<db:para>float</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vec2</db:para>
</db:td>
<db:td>
<db:para>Float32Array (with 2 elements)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vec3</db:para>
</db:td>
<db:td>
<db:para>Float32Array (with 3 elements)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vec4</db:para>
</db:td>
<db:td>
<db:para>Float32Array (with 4 elements)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ivec2</db:para>
</db:td>
<db:td>
<db:para>Int32Array (with 2 elements)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ivec3</db:para>
</db:td>
<db:td>
<db:para>Int32Array (with 3 elements)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ivec4</db:para>
</db:td>
<db:td>
<db:para>Int32Array (with 4 elements)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>bvec2</db:para>
</db:td>
<db:td>
<db:para>sequence&lt;boolean&gt; (with 2 elements)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>bvec3</db:para>
</db:td>
<db:td>
<db:para>sequence&lt;boolean&gt; (with 3 elements)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>bvec4</db:para>
</db:td>
<db:td>
<db:para>sequence&lt;boolean&gt; (with 4 elements)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>mat2</db:para>
</db:td>
<db:td>
<db:para>Float32Array (with 4 elements)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>mat3</db:para>
</db:td>
<db:td>
<db:para>Float32Array (with 9 elements)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>mat4</db:para>
</db:td>
<db:td>
<db:para>Float32Array (with 16 elements)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>sampler2D</db:para>
</db:td>
<db:td>
<db:para>int</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>samplerCube</db:para>
</db:td>
<db:td>
<db:para>int</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="getUniformLocation-method">
<db:title>Canvas3DUniformLocation getUniformLocation(Canvas3DProgram <db:emphasis>program3D</db:emphasis>, string <db:emphasis>name</db:emphasis>)</db:title>
<db:para>Returns <db:link xlink:href="qml-qtcanvas3d-canvas3duniformlocation.xml">Canvas3DUniformLocation</db:link> object that represents the location3D of a specific uniform variable with the given <db:code role="parameter">name</db:code> within the given <db:code role="parameter">program3D</db:code> object. Returns <db:code>null</db:code> if name doesn't correspond to a uniform variable.</db:para>
</db:section>
<db:section xml:id="getVertexAttrib-method">
<db:title>variant getVertexAttrib(int <db:emphasis>index</db:emphasis>, glEnums <db:emphasis>pname</db:emphasis>)</db:title>
<db:para>Returns the requested parameter <db:code role="parameter">pname</db:code> of the specified generic vertex attribute pointer <db:code role="parameter">index</db:code>. The type returned is dependent on the requested <db:code role="parameter">pname</db:code>, as shown in the table:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>pname</db:para>
</db:th>
<db:th>
<db:para>Returned Type</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>Context3D.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>Canvas3DBuffer</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>Context3D.VERTEX_ATTRIB_ARRAY_ENABLED</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>boolean</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>Context3D.VERTEX_ATTRIB_ARRAY_SIZE</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>int</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>Context3D.VERTEX_ATTRIB_ARRAY_STRIDE</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>int</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>Context3D.VERTEX_ATTRIB_ARRAY_TYPE</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>glEnums</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>Context3D.VERTEX_ATTRIB_ARRAY_NORMALIZED</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>boolean</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>Context3D.CURRENT_VERTEX_ATTRIB</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>Float32Array</db:code> (with 4 elements)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="getVertexAttribOffset-method">
<db:title>int getVertexAttribOffset(int <db:emphasis>index</db:emphasis>, glEnums <db:emphasis>pname</db:emphasis>)</db:title>
<db:para>Returns the offset of the specified generic vertex attribute pointer <db:code role="parameter">index</db:code>. <db:code role="parameter">pname</db:code> must be <db:code>Context3D.VERTEX_ATTRIB_ARRAY_POINTER</db:code></db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>Context3D.TEXTURE_MAG_FILTER</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.TEXTURE_MIN_FILTER</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.TEXTURE_WRAP_S</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.TEXTURE_WRAP_T</db:code></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="hint-method">
<db:title>void hint(glEnums <db:emphasis>target</db:emphasis>, glEnums <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Set implementation-specific hints. <db:code role="parameter">target</db:code> <db:code>Context3D.GENERATE_MIPMAP_HINT</db:code> is accepted. <db:code role="parameter">mode</db:code> <db:code>Context3D.FASTEST</db:code>, <db:code>Context3D.NICEST</db:code>, and <db:code>Context3D.DONT_CARE</db:code> are accepted.</db:para>
</db:section>
<db:section xml:id="isBuffer-method">
<db:title>bool isBuffer(Object <db:emphasis>anyObject</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if the given <db:code role="parameter">anyObect</db:code> is a valid <db:link xlink:href="qml-qtcanvas3d-canvas3dbuffer.xml">Canvas3DBuffer</db:link> object, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="isContextLost-method">
<db:title>bool isContextLost()</db:title>
<db:para>Always returns false.</db:para>
</db:section>
<db:section xml:id="isEnabled-method">
<db:title>bool isEnabled(glEnums <db:emphasis>cap</db:emphasis>)</db:title>
<db:para>Returns whether a capability is enabled. <db:code role="parameter">cap</db:code> specifies a constant indicating a GL capability.</db:para>
</db:section>
<db:section xml:id="isFramebuffer-method">
<db:title>void isFramebuffer(Object <db:emphasis>anyObject</db:emphasis>)</db:title>
<db:para>Returns true if the given object is a valid <db:link xlink:href="qml-qtcanvas3d-canvas3dframebuffer.xml">Canvas3DFrameBuffer</db:link> object. <db:code role="parameter">anyObject</db:code> is the object that is to be verified as a valid framebuffer.</db:para>
</db:section>
<db:section xml:id="isProgram-method">
<db:title>bool isProgram(Object <db:emphasis>anyObject</db:emphasis>)</db:title>
<db:para>Returns true if the given object is a valid <db:link xlink:href="qml-qtcanvas3d-canvas3dprogram.xml">Canvas3DProgram</db:link> object. <db:code role="parameter">anyObject</db:code> is the object that is to be verified as a valid program.</db:para>
</db:section>
<db:section xml:id="isRenderbuffer-method">
<db:title>bool isRenderbuffer(Object <db:emphasis>anyObject</db:emphasis>)</db:title>
<db:para>Returns true if the given object is a valid <db:link xlink:href="qml-qtcanvas3d-canvas3drenderbuffer.xml">Canvas3DRenderBuffer</db:link> object. <db:code role="parameter">anyObject</db:code> is the object that is to be verified as a valid renderbuffer.</db:para>
</db:section>
<db:section xml:id="isShader-method">
<db:title>bool isShader(Object <db:emphasis>anyObject</db:emphasis>)</db:title>
<db:para>Returns true if the given object is a valid <db:link xlink:href="qml-qtcanvas3d-canvas3dshader.xml">Canvas3DShader</db:link> object. <db:code role="parameter">anyObject</db:code> is the object that is to be verified as a valid shader.</db:para>
</db:section>
<db:section xml:id="isTexture-method">
<db:title>bool isTexture(Object <db:emphasis>anyObject</db:emphasis>)</db:title>
<db:para>Returns true if the given object is a valid <db:link xlink:href="qml-qtcanvas3d-canvas3dtexture.xml">Canvas3DTexture</db:link> object. <db:code role="parameter">anyObject</db:code> is the object that is to be verified as a valid texture.</db:para>
</db:section>
<db:section xml:id="lineWidth-method">
<db:title>void lineWidth(float <db:emphasis>width</db:emphasis>)</db:title>
<db:para>Specifies the width of rasterized lines. <db:code role="parameter">width</db:code> specifies the width to be used when rasterizing lines. Initial value is <db:code>1.0</db:code>.</db:para>
</db:section>
<db:section xml:id="linkProgram-method">
<db:title>void linkProgram(Canvas3DProgram <db:emphasis>program3D</db:emphasis>)</db:title>
<db:para>Links the given program object. <db:code role="parameter">program3D</db:code> specifies the program to be linked.</db:para>
</db:section>
<db:section xml:id="pixelStorei-method">
<db:title>void pixelStorei(glEnums <db:emphasis>pname</db:emphasis>, int <db:emphasis>param</db:emphasis>)</db:title>
<db:para>Set the pixel storage modes. <db:code role="parameter">pname</db:code> specifies the name of the parameter to be set. <db:code>Context3D.PACK_ALIGNMENT</db:code> affects the packing of pixel data into memory. <db:code>Context3D.UNPACK_ALIGNMENT</db:code> affects the unpacking of pixel data from memory. <db:code>Context3D.UNPACK_FLIP_Y_WEBGL</db:code> is initially <db:code>false</db:code>, but once set, in any subsequent calls to <db:link xlink:href="qml-qtcanvas3d-context3d.xml#texImage2D-method">texImage2D</db:link> or <db:link xlink:href="qml-qtcanvas3d-context3d.xml#texSubImage2D-method">texSubImage2D</db:link>, the source data is flipped along the vertical axis. <db:code>Context3D.UNPACK_PREMULTIPLY_ALPHA_WEBGL</db:code> is initially <db:code>false</db:code>, but once set, in any subsequent calls to <db:link xlink:href="qml-qtcanvas3d-context3d.xml#texImage2D-method">texImage2D</db:link> or <db:link xlink:href="qml-qtcanvas3d-context3d.xml#texSubImage2D-method">texSubImage2D</db:link>, the alpha channel of the source data, is multiplied into the color channels during the data transfer. Initial value is <db:code>false</db:code> and any non-zero value is interpreted as <db:code>true</db:code>.</db:para>
<db:para><db:code role="parameter">param</db:code> specifies the value that <db:code role="parameter">pname</db:code> is set to.</db:para>
</db:section>
<db:section xml:id="polygonOffset-method">
<db:title>void polygonOffset(float <db:emphasis>factor</db:emphasis>, float <db:emphasis>units</db:emphasis>)</db:title>
<db:para>Sets scale and units used to calculate depth values. <db:code role="parameter">factor</db:code> specifies the scale factor that is used to create a variable depth offset for each polygon. Initial value is <db:code>0.0</db:code>. <db:code role="parameter">units</db:code> gets multiplied by an implementation-specific value to create a constant depth offset. Initial value is <db:code>0.0</db:code>.</db:para>
</db:section>
<db:section xml:id="readPixels-method">
<db:title>void readPixels(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, long <db:emphasis>width</db:emphasis>, long <db:emphasis>height</db:emphasis>, glEnums <db:emphasis>format</db:emphasis>, glEnums <db:emphasis>type</db:emphasis>, ArrayBufferView <db:emphasis>pixels</db:emphasis>)</db:title>
<db:para>Returns the pixel data in the rectangle specified by <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code> of the frame buffer in <db:code role="parameter">pixels</db:code> using <db:code role="parameter">format</db:code> (must be <db:code>Context3D.RGBA</db:code>) and <db:code role="parameter">type</db:code> (must be <db:code>Context3D.UNSIGNED_BYTE</db:code>).</db:para>
</db:section>
<db:section xml:id="renderbufferStorage-method">
<db:title>void renderbufferStorage(glEnums <db:emphasis>target</db:emphasis>, glEnums <db:emphasis>internalformat</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:para>Create and initialize a data store for the <db:code>renderbuffer</db:code> object. <db:code role="parameter">target</db:code> must be <db:code>Context3D.RENDERBUFFER</db:code>. <db:code role="parameter">internalformat</db:code> specifies the color-renderable, depth-renderable or stencil-renderable format of the renderbuffer. Must be one of <db:code>Context3D.RGBA4</db:code>, <db:code>Context3D.RGB565</db:code>, <db:code>Context3D.RGB5_A1</db:code>, <db:code>Context3D.DEPTH_COMPONENT16</db:code> or <db:code>Context3D.STENCIL_INDEX8</db:code>. <db:code role="parameter">width</db:code> specifies the renderbuffer width in pixels. <db:code role="parameter">height</db:code> specifies the renderbuffer height in pixels.</db:para>
</db:section>
<db:section xml:id="sampleCoverage-method">
<db:title>void sampleCoverage(float <db:emphasis>value</db:emphasis>, bool <db:emphasis>invert</db:emphasis>)</db:title>
<db:para>Sets the multisample coverage parameters. <db:code role="parameter">value</db:code> specifies the floating-point sample coverage value. The value is clamped to the range <db:code>[0, 1]</db:code> with initial value of <db:code>1.0</db:code>. <db:code role="parameter">invert</db:code> specifies if coverage masks should be inverted.</db:para>
</db:section>
<db:section xml:id="scissor-method">
<db:title>void scissor(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:para>Defines a rectangle that constrains the drawing. <db:code role="parameter">x</db:code> is theleft edge of the rectangle. <db:code role="parameter">y</db:code> is the bottom edge of the rectangle. <db:code role="parameter">width</db:code> is the width of the rectangle. <db:code role="parameter">height</db:code> is the height of the rectangle.</db:para>
</db:section>
<db:section xml:id="shaderSource-method">
<db:title>void shaderSource(Canvas3DShader <db:emphasis>shader</db:emphasis>, string <db:emphasis>shaderSource</db:emphasis>)</db:title>
<db:para>Replaces the shader source code in the given shader object. <db:code role="parameter">shader</db:code> specifies the shader object whose source code is to be replaced. <db:code role="parameter">shaderSource</db:code> specifies the source code to be loaded in to the shader.</db:para>
</db:section>
<db:section xml:id="stencilFunc-method">
<db:title>void stencilFunc(glEnums <db:emphasis>func</db:emphasis>, int <db:emphasis>ref</db:emphasis>, uint <db:emphasis>mask</db:emphasis>)</db:title>
<db:para>Sets front and back function <db:code role="parameter">func</db:code> and reference value <db:code role="parameter">ref</db:code> for stencil testing. Also sets the <db:code role="parameter">mask</db:code> value that is ANDed with both reference and stored stencil value when the test is done. <db:code role="parameter">func</db:code> is initially set to <db:code>Context3D.ALWAYS</db:code> and can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>Context3D.NEVER</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.LESS</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.LEQUAL</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.GREATER</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.GEQUAL</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.EQUAL</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.NOTEQUAL</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.ALWAYS</db:code></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="stencilFuncSeparate-method">
<db:title>void stencilFuncSeparate(glEnums <db:emphasis>face</db:emphasis>, glEnums <db:emphasis>func</db:emphasis>, int <db:emphasis>ref</db:emphasis>, uint <db:emphasis>mask</db:emphasis>)</db:title>
<db:para>Sets front and/or back (defined by <db:code role="parameter">face</db:code>) function <db:code role="parameter">func</db:code> and reference value <db:code role="parameter">ref</db:code> for stencil testing. Also sets the <db:code role="parameter">mask</db:code> value that is ANDed with both reference and stored stencil value when the test is done. <db:code role="parameter">face</db:code> can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>Context3D.FRONT</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.BACK</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.FRONT_AND_BACK</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:code role="parameter">func</db:code> is initially set to <db:code>Context3D.ALWAYS</db:code> and can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>Context3D.NEVER</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.LESS</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.LEQUAL</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.GREATER</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.GEQUAL</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.EQUAL</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.NOTEQUAL</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.ALWAYS</db:code></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="stencilMask-method">
<db:title>void stencilMask(uint <db:emphasis>mask</db:emphasis>)</db:title>
<db:para>Controls the front and back writing of individual bits in the stencil planes. <db:code role="parameter">mask</db:code> defines the bit mask to enable and disable writing of individual bits in the stencil planes.</db:para>
</db:section>
<db:section xml:id="stencilMaskSeparate-method">
<db:title>void stencilMaskSeparate(glEnums <db:emphasis>face</db:emphasis>, uint <db:emphasis>mask</db:emphasis>)</db:title>
<db:para>Controls the front and/or back writing (defined by <db:code role="parameter">face</db:code>) of individual bits in the stencil planes. <db:code role="parameter">mask</db:code> defines the bit mask to enable and disable writing of individual bits in the stencil planes. <db:code role="parameter">face</db:code> can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>Context3D.FRONT</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.BACK</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.FRONT_AND_BACK</db:code></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="stencilOp-method">
<db:title>void stencilOp(glEnums <db:emphasis>sfail</db:emphasis>, glEnums <db:emphasis>zfail</db:emphasis>, glEnums <db:emphasis>zpass</db:emphasis>)</db:title>
<db:para>Sets the front and back stencil test actions for failing the test <db:code role="parameter">zfail</db:code> and passing the test <db:code role="parameter">zpass</db:code>. <db:code role="parameter">sfail</db:code>, <db:code role="parameter">zfail</db:code> and <db:code role="parameter">zpass</db:code> are initially set to <db:code>Context3D.KEEP</db:code> and can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>Context3D.KEEP</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.ZERO</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.GL_REPLACE</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.GL_INCR</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.GL_INCR_WRAP</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.GL_DECR</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.GL_DECR_WRAP</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.GL_INVERT</db:code></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="stencilOpSeparate-method">
<db:title>void stencilOpSeparate(glEnums <db:emphasis>face</db:emphasis>, glEnums <db:emphasis>fail</db:emphasis>, glEnums <db:emphasis>zfail</db:emphasis>, glEnums <db:emphasis>zpass</db:emphasis>)</db:title>
<db:para>Sets the front and/or back (defined by <db:code role="parameter">face</db:code>) stencil test actions for failing the test <db:code role="parameter">zfail</db:code> and passing the test <db:code role="parameter">zpass</db:code>. <db:code role="parameter">face</db:code> can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>Context3D.FRONT</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.BACK</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.FRONT_AND_BACK</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:code role="parameter">sfail</db:code>, <db:code role="parameter">zfail</db:code> and <db:code role="parameter">zpass</db:code> are initially set to <db:code>Context3D.KEEP</db:code> and can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>Context3D.KEEP</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.ZERO</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.GL_REPLACE</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.GL_INCR</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.GL_INCR_WRAP</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.GL_DECR</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.GL_DECR_WRAP</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.GL_INVERT</db:code></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="texImage2D-method">
<db:title>void texImage2D(glEnums <db:emphasis>target</db:emphasis>, int <db:emphasis>level</db:emphasis>, glEnums <db:emphasis>internalformat</db:emphasis>, glEnums <db:emphasis>format</db:emphasis>, glEnums <db:emphasis>type</db:emphasis>, TextureImage <db:emphasis>texImage</db:emphasis>)</db:title>
<db:para>Uploads the given <db:link xlink:href="qml-qtcanvas3d-textureimage.xml">TextureImage</db:link> element to the currently bound <db:link xlink:href="qml-qtcanvas3d-canvas3dtexture.xml">Canvas3DTexture</db:link>. <db:code role="parameter">target</db:code> Target texture of the active texture unit. Must be <db:code>Context3D.TEXTURE_2D</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_X</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP__NEGATIVE_X</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_Y</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP__NEGATIVE_Y</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_Z</db:code>, or <db:code>Context3D.TEXTURE_CUBE_MAP__NEGATIVE_Z</db:code>. <db:code role="parameter">level</db:code> Level of detail number. Level <db:code>0</db:code> is the base image level. Level <db:code>n</db:code> is the <db:code>n</db:code>th mipmap reduction image. <db:code role="parameter">internalformat</db:code> Internal format of the texture, conceptually the given image is first converted to this format, then uploaded. Must be <db:code>Context3D.ALPHA</db:code>, <db:code>Context3D.LUMINANCE</db:code>, <db:code>Context3D.LUMINANCE_ALPHA</db:code>, <db:code>Context3D.RGB</db:code> or <db:code>Context3D.RGBA</db:code>. <db:code role="parameter">format</db:code> Format of the texture, must match the value of <db:code role="parameter">internalFormat</db:code>. <db:code role="parameter">type</db:code> Type of the data, conceptually the given image is first converted to this type, then uploaded. Must be <db:code>Context3D.UNSIGNED_BYTE</db:code>, <db:code>Context3D.UNSIGNED_SHORT_5_6_5</db:code>, <db:code>Context3D.UNSIGNED_SHORT_4_4_4_4</db:code> or <db:code>Context3D.UNSIGNED_SHORT_5_5_5_1</db:code>. <db:code role="parameter">texImage</db:code> A complete <db:code>TextureImage</db:code> loaded using the <db:code>TextureImageFactory</db:code>.</db:para>
</db:section>
<db:section xml:id="texImage2D-method-1">
<db:title>void texImage2D(glEnums <db:emphasis>target</db:emphasis>, int <db:emphasis>level</db:emphasis>, glEnums <db:emphasis>internalformat</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, int <db:emphasis>border</db:emphasis>, glEnums <db:emphasis>format</db:emphasis>, glEnums <db:emphasis>type</db:emphasis>, TypedArray <db:emphasis>pixels</db:emphasis>)</db:title>
<db:para>Specify a 2D texture image. <db:code role="parameter">target</db:code> specifies the target texture of the active texture unit. Must be one of: <db:code>Context3D.TEXTURE_2D</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_X</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_NEGATIVE_X</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_Y</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_NEGATIVE_Y</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_Z</db:code>, or <db:code>Context3D.TEXTURE_CUBE_MAP_NEGATIVE_Z</db:code>. <db:code role="parameter">level</db:code> specifies the level of detail number. Level <db:code>0</db:code> is the base image level. Level <db:code>n</db:code> is the <db:code>n</db:code>th mipmap reduction image. <db:code role="parameter">internalformat</db:code> specifies the internal format of the texture. Must be <db:code>Context3D.ALPHA</db:code>, <db:code>Context3D.LUMINANCE</db:code>, <db:code>Context3D.LUMINANCE_ALPHA</db:code>, <db:code>Context3D.RGB</db:code> or <db:code>Context3D.RGBA</db:code>. <db:code role="parameter">width</db:code> specifies the width of the texture image. All implementations will support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide. <db:code role="parameter">height</db:code> specifies the height of the texture image. All implementations will support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high. <db:code role="parameter">border</db:code> must be <db:code>0</db:code>. <db:code role="parameter">format</db:code> specifies the format of the texel data given in <db:code role="parameter">pixels</db:code>, must match the value of <db:code role="parameter">internalFormat</db:code>. <db:code role="parameter">type</db:code> specifies the data type of the data given in <db:code role="parameter">pixels</db:code>, must match the TypedArray type of <db:code role="parameter">pixels</db:code>. Must be <db:code>Context3D.UNSIGNED_BYTE</db:code>, <db:code>Context3D.UNSIGNED_SHORT_5_6_5</db:code>, <db:code>Context3D.UNSIGNED_SHORT_4_4_4_4</db:code> or <db:code>Context3D.UNSIGNED_SHORT_5_5_5_1</db:code>. <db:code role="parameter">pixels</db:code> specifies the TypedArray containing the image data. If pixels is <db:code>null</db:code>, a buffer of sufficient size initialized to 0 is passed.</db:para>
</db:section>
<db:section xml:id="texParameterf-method">
<db:title>void texParameterf(glEnums <db:emphasis>target</db:emphasis>, glEnums <db:emphasis>pname</db:emphasis>, float <db:emphasis>param</db:emphasis>)</db:title>
<db:para>Sets texture parameters. <db:code role="parameter">target</db:code> specifies the target texture of the active texture unit. Must be <db:code>Context3D.TEXTURE_2D</db:code> or <db:code>Context3D.TEXTURE_CUBE_MAP</db:code>. <db:code role="parameter">pname</db:code> specifies the symbolic name of a texture parameter. pname can be <db:code>Context3D.TEXTURE_MIN_FILTER</db:code>, <db:code>Context3D.TEXTURE_MAG_FILTER</db:code>, <db:code>Context3D.TEXTURE_WRAP_S</db:code> or <db:code>Context3D.TEXTURE_WRAP_T</db:code>. <db:code role="parameter">param</db:code> specifies the new float value to be set to <db:code role="parameter">pname</db:code></db:para>
</db:section>
<db:section xml:id="texParameteri-method">
<db:title>void texParameteri(glEnums <db:emphasis>target</db:emphasis>, glEnums <db:emphasis>pname</db:emphasis>, float <db:emphasis>param</db:emphasis>)</db:title>
<db:para>Sets texture parameters. <db:code role="parameter">target</db:code> specifies the target texture of the active texture unit. Must be <db:code>Context3D.TEXTURE_2D</db:code> or <db:code>Context3D.TEXTURE_CUBE_MAP</db:code>. <db:code role="parameter">pname</db:code> specifies the symbolic name of a texture parameter. pname can be <db:code>Context3D.TEXTURE_MIN_FILTER</db:code>, <db:code>Context3D.TEXTURE_MAG_FILTER</db:code>, <db:code>Context3D.TEXTURE_WRAP_S</db:code> or <db:code>Context3D.TEXTURE_WRAP_T</db:code>. <db:code role="parameter">param</db:code> specifies the new int value to be set to <db:code role="parameter">pname</db:code></db:para>
</db:section>
<db:section xml:id="texSubImage2D-method">
<db:title>void texSubImage2D(glEnums <db:emphasis>target</db:emphasis>, int <db:emphasis>level</db:emphasis>, int <db:emphasis>xoffset</db:emphasis>, int <db:emphasis>yoffset</db:emphasis>, glEnums <db:emphasis>format</db:emphasis>, glEnums <db:emphasis>type</db:emphasis>, TextureImage <db:emphasis>texImage</db:emphasis>)</db:title>
<db:para>Uploads the given <db:link xlink:href="qml-qtcanvas3d-textureimage.xml">TextureImage</db:link> element to the currently bound <db:link xlink:href="qml-qtcanvas3d-canvas3dtexture.xml">Canvas3DTexture</db:link>. <db:code role="parameter">target</db:code> specifies the target texture of the active texture unit. Must be <db:code>Context3D.TEXTURE_2D</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_X</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP__NEGATIVE_X</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_Y</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP__NEGATIVE_Y</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_Z</db:code>, or <db:code>Context3D.TEXTURE_CUBE_MAP__NEGATIVE_Z</db:code>. <db:code role="parameter">level</db:code> Level of detail number. Level <db:code>0</db:code> is the base image level. Level <db:code>n</db:code> is the <db:code>n</db:code>th mipmap reduction image. <db:code role="parameter">internalformat</db:code> Internal format of the texture, conceptually the given image is first converted to this format, then uploaded. Must be <db:code>Context3D.ALPHA</db:code>, <db:code>Context3D.LUMINANCE</db:code>, <db:code>Context3D.LUMINANCE_ALPHA</db:code>, <db:code>Context3D.RGB</db:code> or <db:code>Context3D.RGBA</db:code>. <db:code role="parameter">format</db:code> Format of the texture, must match the value of <db:code role="parameter">internalFormat</db:code>. <db:code role="parameter">type</db:code> Type of the data, conceptually the given image is first converted to this type, then uploaded. Must be <db:code>Context3D.UNSIGNED_BYTE</db:code>, <db:code>Context3D.UNSIGNED_SHORT_5_6_5</db:code>, <db:code>Context3D.UNSIGNED_SHORT_4_4_4_4</db:code> or <db:code>Context3D.UNSIGNED_SHORT_5_5_5_1</db:code>. <db:code role="parameter">texImage</db:code> A complete <db:code>TextureImage</db:code> loaded using the <db:code>TextureImageFactory</db:code>.</db:para>
</db:section>
<db:section xml:id="texSubImage2D-method-1">
<db:title>void texSubImage2D(glEnums <db:emphasis>target</db:emphasis>, int <db:emphasis>level</db:emphasis>, int <db:emphasis>xoffset</db:emphasis>, int <db:emphasis>yoffset</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, glEnums <db:emphasis>format</db:emphasis>, glEnums <db:emphasis>type</db:emphasis>, TypedArray <db:emphasis>pixels</db:emphasis>)</db:title>
<db:para>Specify a 2D texture subimage. <db:code role="parameter">target</db:code> Target texture of the active texture unit. Must be <db:code>Context3D.TEXTURE_2D</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_X</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP__NEGATIVE_X</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_Y</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP__NEGATIVE_Y</db:code>, <db:code>Context3D.TEXTURE_CUBE_MAP_POSITIVE_Z</db:code>, or <db:code>Context3D.TEXTURE_CUBE_MAP__NEGATIVE_Z</db:code>. <db:code role="parameter">level</db:code> Level of detail number. Level <db:code>0</db:code> is the base image level. Level <db:code>n</db:code> is the <db:code>n</db:code>th mipmap reduction image. <db:code role="parameter">xoffset</db:code> Specifies a texel offset in the x direction within the texture array. <db:code role="parameter">yoffset</db:code> Specifies a texel offset in the y direction within the texture array. <db:code role="parameter">width</db:code> Width of the texture subimage. <db:code role="parameter">height</db:code> Height of the texture subimage. <db:code role="parameter">format</db:code> Format of the texel data given in <db:code role="parameter">pixels</db:code>, must match the value of <db:code>internalFormat</db:code> parameter given when the texture was created. <db:code role="parameter">type</db:code> Data type of the data given in <db:code role="parameter">pixels</db:code>, must match the TypedArray type of <db:code role="parameter">pixels</db:code>. Must be <db:code>Context3D.UNSIGNED_BYTE</db:code>, <db:code>Context3D.UNSIGNED_SHORT_5_6_5</db:code>, <db:code>Context3D.UNSIGNED_SHORT_4_4_4_4</db:code> or <db:code>Context3D.UNSIGNED_SHORT_5_5_5_1</db:code>. <db:code role="parameter">pixels</db:code> TypedArray containing the image data.</db:para>
</db:section>
<db:section xml:id="uniform1f-method">
<db:title>void uniform1f(Canvas3DUniformLocation <db:emphasis>location3D</db:emphasis>, float <db:emphasis>x</db:emphasis>)</db:title>
<db:para>Sets the single float value given in <db:code role="parameter">x</db:code> to the given uniform <db:code role="parameter">location3D</db:code>.</db:para>
</db:section>
<db:section xml:id="uniform1fvt-method">
<db:title>void uniform1fvt(Canvas3DUniformLocation <db:emphasis>location3D</db:emphasis>, Object <db:emphasis>array</db:emphasis>)</db:title>
<db:para>Sets the float array given in <db:code role="parameter">array</db:code> to the given uniform <db:code role="parameter">location3D</db:code>. <db:code role="parameter">array</db:code> must be a JavaScript <db:code>Array</db:code> object or a <db:code>Float32Array</db:code> object.</db:para>
</db:section>
<db:section xml:id="uniform1i-method">
<db:title>void uniform1i(Canvas3DUniformLocation <db:emphasis>location3D</db:emphasis>, int <db:emphasis>x</db:emphasis>)</db:title>
<db:para>Sets the single integer value given in <db:code role="parameter">x</db:code> to the given uniform <db:code role="parameter">location3D</db:code>.</db:para>
</db:section>
<db:section xml:id="uniform1iv-method">
<db:title>void uniform1iv(Canvas3DUniformLocation <db:emphasis>location3D</db:emphasis>, Int32Array <db:emphasis>array</db:emphasis>)</db:title>
<db:para>Sets the integer array given in <db:code role="parameter">array</db:code> to the given uniform <db:code role="parameter">location3D</db:code>.</db:para>
</db:section>
<db:section xml:id="uniform2f-method">
<db:title>void uniform2f(Canvas3DUniformLocation <db:emphasis>location3D</db:emphasis>, float <db:emphasis>x</db:emphasis>, float <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Sets the two float values given in <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> to the given uniform <db:code role="parameter">location3D</db:code>.</db:para>
</db:section>
<db:section xml:id="uniform2fv-method">
<db:title>void uniform2fv(Canvas3DUniformLocation <db:emphasis>location3D</db:emphasis>, Float32Array <db:emphasis>array</db:emphasis>)</db:title>
<db:para>Sets the float array given in <db:code role="parameter">array</db:code> to the given uniform <db:code role="parameter">location3D</db:code>.</db:para>
</db:section>
<db:section xml:id="uniform2i-method">
<db:title>void uniform2i(Canvas3DUniformLocation <db:emphasis>location3D</db:emphasis>, int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Sets the two integer values given in <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> to the given uniform <db:code role="parameter">location3D</db:code>.</db:para>
</db:section>
<db:section xml:id="uniform2iv-method">
<db:title>void uniform2iv(Canvas3DUniformLocation <db:emphasis>location3D</db:emphasis>, Int32Array <db:emphasis>array</db:emphasis>)</db:title>
<db:para>Sets the integer array given in <db:code role="parameter">array</db:code> to the given uniform <db:code role="parameter">location3D</db:code>.</db:para>
</db:section>
<db:section xml:id="uniform3f-method">
<db:title>void uniform3f(Canvas3DUniformLocation <db:emphasis>location3D</db:emphasis>, float <db:emphasis>x</db:emphasis>, float <db:emphasis>y</db:emphasis>, float <db:emphasis>z</db:emphasis>)</db:title>
<db:para>Sets the three float values given in <db:code role="parameter">x</db:code> , <db:code role="parameter">y</db:code> and <db:code role="parameter">z</db:code> to the given uniform <db:code role="parameter">location3D</db:code>.</db:para>
</db:section>
<db:section xml:id="uniform3fv-method">
<db:title>void uniform3fv(Canvas3DUniformLocation <db:emphasis>location3D</db:emphasis>, Float32Array <db:emphasis>array</db:emphasis>)</db:title>
<db:para>Sets the float array given in <db:code role="parameter">array</db:code> to the given uniform <db:code role="parameter">location3D</db:code>.</db:para>
</db:section>
<db:section xml:id="uniform3i-method">
<db:title>void uniform3i(Canvas3DUniformLocation <db:emphasis>location3D</db:emphasis>, int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>z</db:emphasis>)</db:title>
<db:para>Sets the three integer values given in <db:code role="parameter">x</db:code> , <db:code role="parameter">y</db:code> and <db:code role="parameter">z</db:code> to the given uniform <db:code role="parameter">location3D</db:code>.</db:para>
</db:section>
<db:section xml:id="uniform3iv-method">
<db:title>void uniform3iv(Canvas3DUniformLocation <db:emphasis>location3D</db:emphasis>, Int32Array <db:emphasis>array</db:emphasis>)</db:title>
<db:para>Sets the integer array given in <db:code role="parameter">array</db:code> to the given uniform <db:code role="parameter">location3D</db:code>.</db:para>
</db:section>
<db:section xml:id="uniform4f-method">
<db:title>void uniform4f(Canvas3DUniformLocation <db:emphasis>location3D</db:emphasis>, float <db:emphasis>x</db:emphasis>, float <db:emphasis>y</db:emphasis>, float <db:emphasis>z</db:emphasis>, float <db:emphasis>w</db:emphasis>)</db:title>
<db:para>Sets the four float values given in <db:code role="parameter">x</db:code> , <db:code role="parameter">y</db:code> , <db:code role="parameter">z</db:code> and <db:code role="parameter">w</db:code> to the given uniform <db:code role="parameter">location3D</db:code>.</db:para>
</db:section>
<db:section xml:id="uniform4fv-method">
<db:title>void uniform4fv(Canvas3DUniformLocation <db:emphasis>location3D</db:emphasis>, Float32Array <db:emphasis>array</db:emphasis>)</db:title>
<db:para>Sets the float array given in <db:code role="parameter">array</db:code> to the given uniform <db:code role="parameter">location3D</db:code>.</db:para>
</db:section>
<db:section xml:id="uniform4i-method">
<db:title>void uniform4i(Canvas3DUniformLocation <db:emphasis>location3D</db:emphasis>, int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>z</db:emphasis>, int <db:emphasis>w</db:emphasis>)</db:title>
<db:para>Sets the four integer values given in <db:code role="parameter">x</db:code> , <db:code role="parameter">y</db:code> , <db:code role="parameter">z</db:code> and <db:code role="parameter">w</db:code> to the given uniform <db:code role="parameter">location3D</db:code>.</db:para>
</db:section>
<db:section xml:id="uniform4iv-method">
<db:title>void uniform4iv(Canvas3DUniformLocation <db:emphasis>location3D</db:emphasis>, Int32Array <db:emphasis>array</db:emphasis>)</db:title>
<db:para>Sets the integer array given in <db:code role="parameter">array</db:code> to the given uniform <db:code role="parameter">location3D</db:code>.</db:para>
</db:section>
<db:section xml:id="uniformMatrix2fv-method">
<db:title>void uniformMatrix2fv(Canvas3DUniformLocation <db:emphasis>location3D</db:emphasis>, bool <db:emphasis>transpose</db:emphasis>, Value <db:emphasis>array</db:emphasis>)</db:title>
<db:para>Converts the float array given in <db:code role="parameter">array</db:code> to a 2x2 matrix and sets it to the given uniform at <db:code role="parameter">uniformLocation</db:code>. Applies <db:code role="parameter">transpose</db:code> if set to <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="uniformMatrix3fv-method">
<db:title>void uniformMatrix3fv(Canvas3DUniformLocation <db:emphasis>location3D</db:emphasis>, bool <db:emphasis>transpose</db:emphasis>, Value <db:emphasis>array</db:emphasis>)</db:title>
<db:para>Converts the float array given in <db:code role="parameter">array</db:code> to a 3x3 matrix and sets it to the given uniform at <db:code role="parameter">uniformLocation</db:code>. Applies <db:code role="parameter">transpose</db:code> if set to <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="uniformMatrix4fv-method">
<db:title>void uniformMatrix4fv(Canvas3DUniformLocation <db:emphasis>location3D</db:emphasis>, bool <db:emphasis>transpose</db:emphasis>, Value <db:emphasis>array</db:emphasis>)</db:title>
<db:para>Converts the float array given in <db:code role="parameter">array</db:code> to a 4x4 matrix and sets it to the given uniform at <db:code role="parameter">uniformLocation</db:code>. Applies <db:code role="parameter">transpose</db:code> if set to <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="useProgram-method">
<db:title>void useProgram(Canvas3DProgram <db:emphasis>program</db:emphasis>)</db:title>
<db:para>Installs the given <db:code role="parameter">program3D</db:code> as a part of the current rendering state.</db:para>
</db:section>
<db:section xml:id="validateProgram-method">
<db:title>void validateProgram(Canvas3DProgram <db:emphasis>program3D</db:emphasis>)</db:title>
<db:para>Validates the given <db:code role="parameter">program3D</db:code>. The validation status is stored into the state of the shader program container in <db:code role="parameter">program3D</db:code>.</db:para>
</db:section>
<db:section xml:id="vertexAttrib1f-method">
<db:title>void vertexAttrib1f(int <db:emphasis>indx</db:emphasis>, float <db:emphasis>x</db:emphasis>)</db:title>
<db:para>Sets the single float value given in <db:code role="parameter">x</db:code> to the generic vertex attribute index specified by <db:code role="parameter">indx</db:code>.</db:para>
</db:section>
<db:section xml:id="vertexAttrib1fv-method">
<db:title>void vertexAttrib1fv(int <db:emphasis>indx</db:emphasis>, Float32Array <db:emphasis>array</db:emphasis>)</db:title>
<db:para>Sets the float array given in <db:code role="parameter">array</db:code> to the generic vertex attribute index specified by <db:code role="parameter">indx</db:code>.</db:para>
</db:section>
<db:section xml:id="vertexAttrib1fva-method">
<db:title>void vertexAttrib1fva(int <db:emphasis>indx</db:emphasis>, list&lt;variant&gt; <db:emphasis>values</db:emphasis>)</db:title>
<db:para>Sets the array of float values given in <db:code role="parameter">values</db:code> to the generic vertex attribute index specified by <db:code role="parameter">indx</db:code>.</db:para>
</db:section>
<db:section xml:id="vertexAttrib2f-method">
<db:title>void vertexAttrib2f(int <db:emphasis>indx</db:emphasis>, float <db:emphasis>x</db:emphasis>, float <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Sets the two float values given in <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> to the generic vertex attribute index specified by <db:code role="parameter">indx</db:code>.</db:para>
</db:section>
<db:section xml:id="vertexAttrib2fv-method">
<db:title>void vertexAttrib2fv(int <db:emphasis>indx</db:emphasis>, Float32Array <db:emphasis>array</db:emphasis>)</db:title>
<db:para>Sets the float array given in <db:code role="parameter">array</db:code> to the generic vertex attribute index specified by <db:code role="parameter">indx</db:code>.</db:para>
</db:section>
<db:section xml:id="vertexAttrib2fva-method">
<db:title>void vertexAttrib2fva(int <db:emphasis>indx</db:emphasis>, list&lt;variant&gt; <db:emphasis>values</db:emphasis>)</db:title>
<db:para>Sets the array of float values given in <db:code role="parameter">values</db:code> to the generic vertex attribute index specified by <db:code role="parameter">indx</db:code>.</db:para>
</db:section>
<db:section xml:id="vertexAttrib3f-method">
<db:title>void vertexAttrib3f(int <db:emphasis>indx</db:emphasis>, float <db:emphasis>x</db:emphasis>, float <db:emphasis>y</db:emphasis>, float <db:emphasis>z</db:emphasis>)</db:title>
<db:para>Sets the three float values given in <db:code role="parameter">x</db:code> , <db:code role="parameter">y</db:code> and <db:code role="parameter">z</db:code> to the generic vertex attribute index specified by <db:code role="parameter">indx</db:code>.</db:para>
</db:section>
<db:section xml:id="vertexAttrib3fv-method">
<db:title>void vertexAttrib3fv(int <db:emphasis>indx</db:emphasis>, Float32Array <db:emphasis>array</db:emphasis>)</db:title>
<db:para>Sets the float array given in <db:code role="parameter">array</db:code> to the generic vertex attribute index specified by <db:code role="parameter">indx</db:code>.</db:para>
</db:section>
<db:section xml:id="vertexAttrib3fva-method">
<db:title>void vertexAttrib3fva(int <db:emphasis>indx</db:emphasis>, list&lt;variant&gt; <db:emphasis>values</db:emphasis>)</db:title>
<db:para>Sets the array of float values given in <db:code role="parameter">values</db:code> to the generic vertex attribute index specified by <db:code role="parameter">indx</db:code>.</db:para>
</db:section>
<db:section xml:id="vertexAttrib4f-method">
<db:title>void vertexAttrib4f(int <db:emphasis>indx</db:emphasis>, float <db:emphasis>x</db:emphasis>, float <db:emphasis>y</db:emphasis>, float <db:emphasis>z</db:emphasis>, float <db:emphasis>w</db:emphasis>)</db:title>
<db:para>Sets the four float values given in <db:code role="parameter">x</db:code> , <db:code role="parameter">y</db:code> , <db:code role="parameter">z</db:code> and <db:code role="parameter">w</db:code> to the generic vertex attribute index specified by <db:code role="parameter">indx</db:code>.</db:para>
</db:section>
<db:section xml:id="vertexAttrib4fv-method">
<db:title>void vertexAttrib4fv(int <db:emphasis>indx</db:emphasis>, Float32Array <db:emphasis>array</db:emphasis>)</db:title>
<db:para>Sets the float array given in <db:code role="parameter">array</db:code> to the generic vertex attribute index specified by <db:code role="parameter">indx</db:code>.</db:para>
</db:section>
<db:section xml:id="vertexAttrib4fva-method">
<db:title>void vertexAttrib4fva(int <db:emphasis>indx</db:emphasis>, list&lt;variant&gt; <db:emphasis>values</db:emphasis>)</db:title>
<db:para>Sets the array of float values given in <db:code role="parameter">values</db:code> to the generic vertex attribute index specified by <db:code role="parameter">indx</db:code>.</db:para>
</db:section>
<db:section xml:id="vertexAttribPointer-method">
<db:title>void vertexAttribPointer(int <db:emphasis>indx</db:emphasis>, int <db:emphasis>size</db:emphasis>, glEnums <db:emphasis>type</db:emphasis>, bool <db:emphasis>normalized</db:emphasis>, int <db:emphasis>stride</db:emphasis>, long <db:emphasis>offset</db:emphasis>)</db:title>
<db:para>Sets the currently bound array buffer to the vertex attribute at the index passed at <db:code role="parameter">indx</db:code>. <db:code role="parameter">size</db:code> is the number of components per attribute. <db:code role="parameter">stride</db:code> specifies the byte offset between consecutive vertex attributes. <db:code role="parameter">offset</db:code> specifies the byte offset to the first vertex attribute in the array. If int values should be normalized, set <db:code role="parameter">normalized</db:code> to <db:code>true</db:code>.</db:para>
<db:para><db:code role="parameter">type</db:code> specifies the element type and can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>Context3D.BYTE</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.UNSIGNED_BYTE</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.SHORT</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.UNSIGNED_SHORT</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Context3D.FLOAT</db:code></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="viewport-method">
<db:title>viewport(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:para>Defines the affine transformation from normalized x and y device coordinates to window coordinates within the drawing buffer. <db:code role="parameter">x</db:code> defines the left edge of the viewport. <db:code role="parameter">y</db:code> defines the bottom edge of the viewport. <db:code role="parameter">width</db:code> defines the width of the viewport. <db:code role="parameter">height</db:code> defines the height of the viewport.</db:para>
</db:section>
</db:section>
</db:article>
