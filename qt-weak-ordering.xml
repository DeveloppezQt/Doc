<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>weak_ordering Class</db:title>
<db:subtitle>Qt::weak_ordering</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qt-weak-ordering.xml">Qt::weak_ordering</db:link> represents a comparison where equivalent values are still distinguishable.</db:para>
<db:para>This class was introduced in Qt 6.7.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QtCompare</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A value of type <db:link xlink:href="qt-weak-ordering.xml">Qt::weak_ordering</db:link> is typically returned from a three-way comparison function. Such a function compares two objects and establishes how they are ordered. It uses this return type to indicate that the ordering is weak; that is, equivalent values may be distinguishable.</db:para>
<db:para><db:link xlink:href="qt-weak-ordering.xml">Qt::weak_ordering</db:link> has three values, represented by the following symbolic constants:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt-weak-ordering.xml#less-var">less</db:link> represents that the left operand is less than the right;</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt-weak-ordering.xml#equivalent-var">equivalent</db:link> represents that the left operand is equivalent to the right;</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt-weak-ordering.xml#greater-var">greater</db:link> represents that the left operand is greater than the right,</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:link xlink:href="qt-weak-ordering.xml">Qt::weak_ordering</db:link> is idiomatically used by comparing an instance against a literal zero, for instance like this:</db:para>
<db:programlisting language="cpp">// given a, b, c, d as objects of some type that allows for a 3-way compare,
// and a compare function declared as follows:

Qt::weak_ordering compare(T lhs, T rhs); // defined out-of-line
~~~

Qt::weak_ordering result = compare(a, b);
if (result &lt; 0) {
    // a is less than b
}

if (compare(c, d) &gt;= 0) {
    // c is greater than or equivalent to d
}

</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt-strong-ordering.xml">Qt::strong_ordering</db:link></db:member>
<db:member><db:link xlink:href="qt-partial-ordering.xml">Qt::partial_ordering</db:link></db:member>
<db:member><db:link xlink:href="comparison-types.xml">Comparison types overview</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="weak_ordering">
<db:title>[constexpr noexcept] weak_ordering::weak_ordering(std::weak_ordering <db:emphasis>stdorder</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qt-weak-ordering.xml">Qt::weak_ordering</db:link> object from <db:code role="parameter">stdorder</db:code> using the following rules:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>std::weak_ordering::less converts to <db:link xlink:href="qt-weak-ordering.xml#less-var">less</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>std::weak_ordering::equivalent converts to <db:link xlink:href="qt-weak-ordering.xml#equivalent-var">equivalent</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>std::weak_ordering::greater converts to <db:link xlink:href="qt-weak-ordering.xml#greater-var">greater</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="operator-Qt-3a-3apartial_ordering">
<db:title>[constexpr noexcept] Qt::partial_ordering weak_ordering::operator Qt::partial_ordering() const</db:title>
<db:para>Converts this <db:link xlink:href="qt-weak-ordering.xml">Qt::weak_ordering</db:link> value to a <db:link xlink:href="qt-partial-ordering.xml">Qt::partial_ordering</db:link> object using the following rules:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt-weak-ordering.xml#less-var">less</db:link> converts to <db:link xlink:href="qt-partial-ordering.xml#less-var">Qt::partial_ordering::less</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt-weak-ordering.xml#equivalent-var">equivalent</db:link> converts to <db:link xlink:href="qt-partial-ordering.xml#equivalent-var">Qt::partial_ordering::equivalent</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt-weak-ordering.xml#greater-var">greater</db:link> converts to <db:link xlink:href="qt-partial-ordering.xml#greater-var">Qt::partial_ordering::greater</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="operator-std-3a-3aweak_ordering">
<db:title>[constexpr noexcept] std::weak_ordering weak_ordering::operator std::weak_ordering() const</db:title>
<db:para>Converts this <db:link xlink:href="qt-weak-ordering.xml">Qt::weak_ordering</db:link> value to a std::weak_ordering object using the following rules:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt-weak-ordering.xml#less-var">less</db:link> converts to std::weak_ordering::less.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt-weak-ordering.xml#equivalent-var">equivalent</db:link> converts to std::weak_ordering::equivalent.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt-weak-ordering.xml#greater-var">greater</db:link> converts to std::weak_ordering::greater.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="equivalent-var">
<db:title>const Qt::weak_ordering weak_ordering::equivalent</db:title>
<db:para>Represents the result of a comparison where the left operand is equivalent to the right operand.</db:para>
</db:section>
<db:section xml:id="greater-var">
<db:title>const Qt::weak_ordering weak_ordering::greater</db:title>
<db:para>Represents the result of a comparison where the left operand is greater than the right operand.</db:para>
</db:section>
<db:section xml:id="less-var">
<db:title>const Qt::weak_ordering weak_ordering::less</db:title>
<db:para>Represents the result of a comparison where the left operand is less than the right operand.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="is_eq">
<db:title>[constexpr noexcept] bool is_eq(Qt::weak_ordering <db:emphasis>o</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="is_gt">[constexpr noexcept] bool is_gt(Qt::weak_ordering <db:emphasis>o</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="is_gteq">[constexpr noexcept] bool is_gteq(Qt::weak_ordering <db:emphasis>o</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="is_lt">[constexpr noexcept] bool is_lt(Qt::weak_ordering <db:emphasis>o</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="is_lteq">[constexpr noexcept] bool is_lteq(Qt::weak_ordering <db:emphasis>o</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="is_neq">[constexpr noexcept] bool is_neq(Qt::weak_ordering <db:emphasis>o</db:emphasis>)</db:bridgehead>
<db:para>Converts <db:code role="parameter">o</db:code> into the result of one of the six relational operators:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Function</db:para>
</db:th>
<db:th>
<db:para>Operation</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>is_eq</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">o</db:code> <db:code>== 0</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>is_neq</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">o</db:code> <db:code>!= 0</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>is_lt</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">o</db:code> <db:code>&lt; 0</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>is_lteq</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">o</db:code> <db:code>&lt;= 0</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>is_gt</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">o</db:code> <db:code>&gt; 0</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>is_gteq</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">o</db:code> <db:code>&gt;= 0</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>These functions are provided for compatibility with <db:code>std::weak_ordering</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>[constexpr noexcept] bool operator!=(Qt::weak_ordering <db:emphasis>lhs</db:emphasis>, Qt::weak_ordering <db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Return true if <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> represent different results; otherwise, returns true.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[constexpr noexcept] bool operator==(Qt::weak_ordering <db:emphasis>lhs</db:emphasis>, Qt::weak_ordering <db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Return true if <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> represent the same result; otherwise, returns false.</db:para>
</db:section>
</db:section>
</db:article>
