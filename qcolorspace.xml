<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QColorSpace Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcolorspace.xml">QColorSpace</db:link> class provides a color space abstraction.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QColorSpace</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QColorSpace is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member><db:member>appearance</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Color values can be interpreted in different ways, and based on the interpretation can live in different spaces. We call this <db:emphasis>color spaces</db:emphasis>.</db:para>
<db:para><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link> provides access to creating several predefined color spaces and can generate QColorTransforms for converting colors from one color space to another.</db:para>
<db:para><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link> can also represent color spaces defined by ICC profiles or embedded in images, that do not otherwise fit the predefined color spaces.</db:para>
<db:para>A color space can generally speaking be conceived as a combination of set of primary colors and a transfer function. The primaries defines the axes of the color space, and the transfer function how values are mapped on the axes. The primaries are for <db:link xlink:href="qcolorspace.xml#ColorModel-enum">ColorModel::Rgb</db:link> color spaces defined by three primary colors that represent exactly how red, green, and blue look in this particular color space, and a white color that represents where and how bright pure white is. For grayscale color spaces, only a single white primary is needed. The range of colors expressible by the primary colors is called the gamut, and a color space that can represent a wider range of colors is also known as a wide-gamut color space.</db:para>
<db:para>The transfer function or gamma curve determines how each component in the color space is encoded. These are used because human perception does not operate linearly, and the transfer functions try to ensure that colors will seem evenly spaced to human eyes.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ColorModel-enum">
<db:title>[since 6.8] enum QColorSpace::ColorModel</db:title>
<db:para>Defines the color model used by the color space data.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">ColorModel</db:emphasis>::Undefined</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No color model</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">ColorModel</db:emphasis>::Rgb</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An RGB color model with red, green, and blue colors. Can apply to RGB and grayscale data.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">ColorModel</db:emphasis>::Gray</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A gray scale color model. Can only apply to grayscale data.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">ColorModel</db:emphasis>::Cmyk</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Can only represent color data defined with cyan, magenta, yellow, and black colors. In effect only QImage::Format_CMYK32. Note Cmyk color spaces will be <db:link xlink:href="qcolorspace.xml#TransformModel-enum">TransformModel::ElementListProcessing</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="NamedColorSpace-enum">
<db:title>enum QColorSpace::NamedColorSpace</db:title>
<db:para>Predefined color spaces.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::SRgb</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The sRGB color space, which Qt operates in by default. It is a close approximation of how most classic monitors operate, and a mode most software and hardware support. <db:link xlink:href="http://www.color.org/chardata/rgb/srgb.xalter">ICC registration of sRGB</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::SRgbLinear</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The sRGB color space with linear gamma. Useful for gamma-corrected blending.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::AdobeRgb</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The Adobe RGB color space is a classic wide-gamut color space, using a gamma of 2.2. <db:link xlink:href="http://www.color.org/chardata/rgb/adobergb.xalter">ICC registration of Adobe RGB (1998)</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::DisplayP3</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>A color-space using the primaries of DCI-P3, but with the whitepoint and transfer function of sRGB. Common in modern wide-gamut screens. <db:link xlink:href="http://www.color.org/chardata/rgb/DCIP3.xalter">ICC registration of DCI-P3</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::ProPhotoRgb</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The Pro Photo RGB color space, also known as ROMM RGB is a very wide gamut color space. <db:link xlink:href="http://www.color.org/chardata/rgb/rommrgb.xalter">ICC registration of ROMM RGB</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::Bt2020 (since Qt 6.8)</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>BT.2020, also known as Rec.2020 is a basic colorspace of HDR TVs. <db:link xlink:href="http://www.color.org/chardata/rgb/BT2020.xalter">ICC registration of BT.2020</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::Bt2100Pq (since Qt 6.8)</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>BT.2100(PQ), also known as Rec.2100 or HDR10 is an HDR encoding with the same primaries as Bt2020 but using the Perceptual Quantizer transfer function. <db:link xlink:href="http://www.color.org/chardata/rgb/BT2100.xalter">ICC registration of BT.2100</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::Bt2100Hlg (since Qt 6.8)</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>BT.2100 (HLG) is an HDR encoding with the same primaries as Bt2020 but using the Hybrid Log-Gamma transfer function.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Primaries-enum">
<db:title>enum QColorSpace::Primaries</db:title>
<db:para>Predefined sets of primary colors.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">Primaries</db:emphasis>::Custom</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The primaries are undefined or does not match any predefined sets.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">Primaries</db:emphasis>::SRgb</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The sRGB primaries</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">Primaries</db:emphasis>::AdobeRgb</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The Adobe RGB primaries</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">Primaries</db:emphasis>::DciP3D65</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The DCI-P3 primaries with the D65 whitepoint</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">Primaries</db:emphasis>::ProPhotoRgb</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The ProPhoto RGB primaries with the D50 whitepoint</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">Primaries</db:emphasis>::Bt2020 (since Qt 6.8)</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The BT.2020 primaries with a D65 whitepoint</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="TransferFunction-enum">
<db:title>enum QColorSpace::TransferFunction</db:title>
<db:para>Predefined transfer functions or gamma curves.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">TransferFunction</db:emphasis>::Custom</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The custom or null transfer function</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">TransferFunction</db:emphasis>::Linear</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The linear transfer functions</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">TransferFunction</db:emphasis>::Gamma</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A transfer function that is a real gamma curve based on the value of <db:link xlink:href="qcolorspace.xml#gamma">gamma</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">TransferFunction</db:emphasis>::SRgb</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The sRGB transfer function, composed of linear and gamma parts</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">TransferFunction</db:emphasis>::ProPhotoRgb</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The ProPhoto RGB transfer function, composed of linear and gamma parts</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">TransferFunction</db:emphasis>::Bt2020 (since Qt 6.8)</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The BT.2020 transfer function, composited of linear and gamma parts</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">TransferFunction</db:emphasis>::St2084 (since Qt 6.8)</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The SMPTE ST 2084 transfer function, also known Perceptual Quantizer(PQ).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">TransferFunction</db:emphasis>::Hlg (since Qt 6.8)</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The Hybrid log-gamma transfer function.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="TransformModel-enum">
<db:title>[since 6.8] enum QColorSpace::TransformModel</db:title>
<db:para>Defines the processing model used for color space transforms.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">TransformModel</db:emphasis>::ThreeComponentMatrix</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The transform consist of a matrix calculated from primaries and set of transfer functions for each color channel. This is very fast and used by all predefined color spaces. Any color space on this form is reversible and always both valid sources and targets.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">TransformModel</db:emphasis>::ElementListProcessing</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The transforms are one or two lists of processing elements that can do many things, each list only process either to the connection color space or from it. This is very flexible, but rather slow, and can only be set by reading ICC profiles (See <db:link xlink:href="qcolorspace.xml#fromIccProfile">fromIccProfile</db:link>()). Since the two lists are separate a color space on this form can be a valid source, but not necessarily also a valid target. When changing either primaries or transfer function on a color space on this type it will reset to an empty ThreeComponentMatrix form.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 6.8.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QColorSpace">
<db:title>[noexcept] QColorSpace::QColorSpace()</db:title>
<db:para>Creates a new colorspace object that represents an undefined and invalid colorspace.</db:para>
</db:section>
<db:section xml:id="QColorSpace-1">
<db:title>QColorSpace::QColorSpace(QColorSpace::NamedColorSpace <db:emphasis>namedColorSpace</db:emphasis>)</db:title>
<db:para>Creates a new colorspace object that represents a <db:code role="parameter">namedColorSpace</db:code>.</db:para>
</db:section>
<db:section xml:id="QColorSpace-2">
<db:title>[since 6.1] QColorSpace::QColorSpace(QColorSpace::Primaries <db:emphasis>gamut</db:emphasis>, const QList&lt;uint16_t&gt; &amp;<db:emphasis>transferFunctionTable</db:emphasis>)</db:title>
<db:para>Creates a custom color space with the primaries <db:code role="parameter">gamut</db:code>, using a custom transfer function described by <db:code role="parameter">transferFunctionTable</db:code>.</db:para>
<db:para>The table should contain at least 2 values, and contain an monotonically increasing list of values from 0 to 65535.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="QColorSpace-3">
<db:title>QColorSpace::QColorSpace(QColorSpace::Primaries <db:emphasis>primaries</db:emphasis>, float <db:emphasis>gamma</db:emphasis>)</db:title>
<db:para>Creates a custom color space with the primaries <db:code role="parameter">primaries</db:code>, using a gamma transfer function of <db:code role="parameter">gamma</db:code>.</db:para>
</db:section>
<db:section xml:id="QColorSpace-4">
<db:title>[explicit, since 6.8] QColorSpace::QColorSpace(QPointF <db:emphasis>whitePoint</db:emphasis>, const QList&lt;uint16_t&gt; &amp;<db:emphasis>transferFunctionTable</db:emphasis>)</db:title>
<db:para>Creates a custom grayscale color space with white point <db:code role="parameter">whitePoint</db:code>, and using the custom transfer function described by <db:code role="parameter">transferFunctionTable</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="QColorSpace-5">
<db:title>QColorSpace::QColorSpace(QColorSpace::Primaries <db:emphasis>primaries</db:emphasis>, QColorSpace::TransferFunction <db:emphasis>transferFunction</db:emphasis>, float <db:emphasis>gamma</db:emphasis> = 0.0f)</db:title>
<db:para>Creates a custom color space with the primaries <db:code role="parameter">primaries</db:code>, using the transfer function <db:code role="parameter">transferFunction</db:code> and optionally <db:code role="parameter">gamma</db:code>.</db:para>
</db:section>
<db:section xml:id="QColorSpace-6">
<db:title>[explicit, since 6.8] QColorSpace::QColorSpace(QPointF <db:emphasis>whitePoint</db:emphasis>, QColorSpace::TransferFunction <db:emphasis>transferFunction</db:emphasis>, float <db:emphasis>gamma</db:emphasis> = 0.0f)</db:title>
<db:para>Creates a custom grayscale color space with the white point <db:code role="parameter">whitePoint</db:code>, using the transfer function <db:code role="parameter">transferFunction</db:code> and optionally <db:code role="parameter">gamma</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="QColorSpace-7">
<db:title>[since 6.9] QColorSpace::QColorSpace(const QColorSpace::PrimaryPoints &amp;<db:emphasis>primaryPoints</db:emphasis>, QColorSpace::TransferFunction <db:emphasis>transferFunction</db:emphasis>, float <db:emphasis>gamma</db:emphasis> = 0.0f)</db:title>
<db:para>Creates a custom colorspace with primaries based on the chromaticities of the primary colors <db:code role="parameter">primaryPoints</db:code>, and using the transfer function <db:code role="parameter">transferFunction</db:code> and optionally <db:code role="parameter">gamma</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.9.</db:para>
</db:section>
<db:section xml:id="QColorSpace-8">
<db:title>[since 6.1] QColorSpace::QColorSpace(const QPointF &amp;<db:emphasis>whitePoint</db:emphasis>, const QPointF &amp;<db:emphasis>redPoint</db:emphasis>, const QPointF &amp;<db:emphasis>greenPoint</db:emphasis>, const QPointF &amp;<db:emphasis>bluePoint</db:emphasis>, const QList&lt;uint16_t&gt; &amp;<db:emphasis>transferFunctionTable</db:emphasis>)</db:title>
<db:para>Creates a custom color space with primaries based on the chromaticities of the primary colors <db:code role="parameter">whitePoint</db:code>, <db:code role="parameter">redPoint</db:code>, <db:code role="parameter">greenPoint</db:code> and <db:code role="parameter">bluePoint</db:code>, and using the custom transfer function described by <db:code role="parameter">transferFunctionTable</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="QColorSpace-9">
<db:title>QColorSpace::QColorSpace(const QPointF &amp;<db:emphasis>whitePoint</db:emphasis>, const QPointF &amp;<db:emphasis>redPoint</db:emphasis>, const QPointF &amp;<db:emphasis>greenPoint</db:emphasis>, const QPointF &amp;<db:emphasis>bluePoint</db:emphasis>, QColorSpace::TransferFunction <db:emphasis>transferFunction</db:emphasis>, float <db:emphasis>gamma</db:emphasis> = 0.0f)</db:title>
<db:para>Creates a custom colorspace with primaries based on the chromaticities of the primary colors <db:code role="parameter">whitePoint</db:code>, <db:code role="parameter">redPoint</db:code>, <db:code role="parameter">greenPoint</db:code> and <db:code role="parameter">bluePoint</db:code>, and using the transfer function <db:code role="parameter">transferFunction</db:code> and optionally <db:code role="parameter">gamma</db:code>.</db:para>
</db:section>
<db:section xml:id="QColorSpace-10">
<db:title>[since 6.1] QColorSpace::QColorSpace(const QPointF &amp;<db:emphasis>whitePoint</db:emphasis>, const QPointF &amp;<db:emphasis>redPoint</db:emphasis>, const QPointF &amp;<db:emphasis>greenPoint</db:emphasis>, const QPointF &amp;<db:emphasis>bluePoint</db:emphasis>, const QList&lt;uint16_t&gt; &amp;<db:emphasis>redTransferFunctionTable</db:emphasis>, const QList&lt;uint16_t&gt; &amp;<db:emphasis>greenTransferFunctionTable</db:emphasis>, const QList&lt;uint16_t&gt; &amp;<db:emphasis>blueTransferFunctionTable</db:emphasis>)</db:title>
<db:para>Creates a custom color space with primaries based on the chromaticities of the primary colors <db:code role="parameter">whitePoint</db:code>, <db:code role="parameter">redPoint</db:code>, <db:code role="parameter">greenPoint</db:code> and <db:code role="parameter">bluePoint</db:code>, and using the custom transfer functions described by <db:code role="parameter">redTransferFunctionTable</db:code>, <db:code role="parameter">greenTransferFunctionTable</db:code>, and <db:code role="parameter">blueTransferFunctionTable</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="colorModel">
<db:title>[noexcept, since 6.8] QColorSpace::ColorModel QColorSpace::colorModel() const</db:title>
<db:para>Returns the color model this color space can represent</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="description">
<db:title>[noexcept, since 6.2] QString QColorSpace::description() const</db:title>
<db:para>Returns the name or short description. If a description hasn't been given in <db:link xlink:href="qcolorspace.xml#setDescription">setDescription</db:link>(), the original name of the profile is returned if the profile is unmodified, a guessed name is returned if the profile has been recognized as a known color space, otherwise an empty string is returned.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#setDescription">setDescription</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromIccProfile">
<db:title>[static] QColorSpace QColorSpace::fromIccProfile(const QByteArray &amp;<db:emphasis>iccProfile</db:emphasis>)</db:title>
<db:para>Creates a <db:link xlink:href="qcolorspace.xml">QColorSpace</db:link> from ICC profile <db:code role="parameter">iccProfile</db:code>.</db:para>
<db:note>
<db:para>Not all ICC profiles are supported. <db:link xlink:href="qcolorspace.xml">QColorSpace</db:link> only supports RGB or Gray ICC profiles.</db:para>
</db:note>
<db:para>If the ICC profile is not supported an invalid <db:link xlink:href="qcolorspace.xml">QColorSpace</db:link> is returned where you can still read the original ICC profile using <db:link xlink:href="qcolorspace.xml#iccProfile">iccProfile</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#iccProfile">iccProfile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="gamma">
<db:title>[noexcept] float QColorSpace::gamma() const</db:title>
<db:para>Returns the gamma value of color spaces with <db:code>TransferFunction::Gamma</db:code>, an approximate gamma value for other predefined color spaces, or 0.0 if no approximate gamma is known.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#transferFunction">transferFunction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="iccProfile">
<db:title>QByteArray QColorSpace::iccProfile() const</db:title>
<db:para>Returns an ICC profile representing the color space.</db:para>
<db:para>If the color space was generated from an ICC profile, that profile is returned, otherwise one is generated.</db:para>
<db:note>
<db:para>Even invalid color spaces may return the ICC profile if they were generated from one, to allow applications to implement wider support themselves.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#fromIccProfile">fromIccProfile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>[noexcept] bool QColorSpace::isValid() const</db:title>
<db:para>Returns <db:code>true</db:code> if the color space is valid. For a color space with <db:code>TransformModel::ThreeComponentMatrix</db:code> that means both primaries and transfer functions set, and implies <db:link xlink:href="qcolorspace.xml#isValidTarget">isValidTarget</db:link>(). For a color space with <db:code>TransformModel::ElementListProcessing</db:code> it means it has a valid source transform, to check if it also a valid target color space use <db:link xlink:href="qcolorspace.xml#isValidTarget">isValidTarget</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#isValidTarget">isValidTarget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValidTarget">
<db:title>[noexcept, since 6.8] bool QColorSpace::isValidTarget() const</db:title>
<db:para>Returns <db:code>true</db:code> if the color space is a valid target color space.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="primaries">
<db:title>[noexcept] QColorSpace::Primaries QColorSpace::primaries() const</db:title>
<db:para>Returns the predefined primaries of the color space or <db:code>primaries::Custom</db:code> if it doesn't match any of them.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#setPrimaries">setPrimaries</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="primaryPoints">
<db:title>[since 6.9] QColorSpace::PrimaryPoints QColorSpace::primaryPoints() const</db:title>
<db:para>Returns the primary chromaticities, if not defined, returns null points.</db:para>
<db:para>This function was introduced in Qt 6.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#primaries">primaries</db:link>()</db:member>
<db:member><db:link xlink:href="qcolorspace.xml#setPrimaryPoints">setPrimaryPoints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDescription">
<db:title>[since 6.2] void QColorSpace::setDescription(const QString &amp;<db:emphasis>description</db:emphasis>)</db:title>
<db:para>Sets the name or short description of the color space to <db:code role="parameter">description</db:code>.</db:para>
<db:para>If set to empty <db:link xlink:href="qcolorspace.xml#description">description</db:link>() will return original or guessed descriptions instead.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#description">description</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPrimaries">
<db:title>void QColorSpace::setPrimaries(QColorSpace::Primaries <db:emphasis>primariesId</db:emphasis>)</db:title>
<db:para>Sets the primaries to those of the <db:code role="parameter">primariesId</db:code> set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#primaries">primaries</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPrimaries-1">
<db:title>void QColorSpace::setPrimaries(const QPointF &amp;<db:emphasis>whitePoint</db:emphasis>, const QPointF &amp;<db:emphasis>redPoint</db:emphasis>, const QPointF &amp;<db:emphasis>greenPoint</db:emphasis>, const QPointF &amp;<db:emphasis>bluePoint</db:emphasis>)</db:title>
<db:para>Set primaries to the chromaticities of <db:code role="parameter">whitePoint</db:code>, <db:code role="parameter">redPoint</db:code>, <db:code role="parameter">greenPoint</db:code> and <db:code role="parameter">bluePoint</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#primaries">primaries</db:link>()</db:member>
<db:member><db:link xlink:href="qcolorspace.xml#setPrimaryPoints">setPrimaryPoints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPrimaryPoints">
<db:title>[since 6.9] void QColorSpace::setPrimaryPoints(const QColorSpace::PrimaryPoints &amp;<db:emphasis>primaryPoints</db:emphasis>)</db:title>
<db:para>Set all primaries to the chromaticities of <db:code role="parameter">primaryPoints</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#primaries">primaries</db:link>()</db:member>
<db:member><db:link xlink:href="qcolorspace.xml#primaryPoints">primaryPoints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransferFunction">
<db:title>[since 6.1] void QColorSpace::setTransferFunction(const QList&lt;uint16_t&gt; &amp;<db:emphasis>transferFunctionTable</db:emphasis>)</db:title>
<db:para>Sets the transfer function to <db:code role="parameter">transferFunctionTable</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#transferFunction">transferFunction</db:link>()</db:member>
<db:member><db:link xlink:href="qcolorspace.xml#withTransferFunction">withTransferFunction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransferFunction-1">
<db:title>void QColorSpace::setTransferFunction(QColorSpace::TransferFunction <db:emphasis>transferFunction</db:emphasis>, float <db:emphasis>gamma</db:emphasis> = 0.0f)</db:title>
<db:para>Sets the transfer function to <db:code role="parameter">transferFunction</db:code> and <db:code role="parameter">gamma</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#transferFunction">transferFunction</db:link>()</db:member>
<db:member><db:link xlink:href="qcolorspace.xml#gamma">gamma</db:link>()</db:member>
<db:member><db:link xlink:href="qcolorspace.xml#withTransferFunction">withTransferFunction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransferFunctions">
<db:title>[since 6.1] void QColorSpace::setTransferFunctions(const QList&lt;uint16_t&gt; &amp;<db:emphasis>redTransferFunctionTable</db:emphasis>, const QList&lt;uint16_t&gt; &amp;<db:emphasis>greenTransferFunctionTable</db:emphasis>, const QList&lt;uint16_t&gt; &amp;<db:emphasis>blueTransferFunctionTable</db:emphasis>)</db:title>
<db:para>Sets the transfer functions to <db:code role="parameter">redTransferFunctionTable</db:code>, <db:code role="parameter">greenTransferFunctionTable</db:code> and <db:code role="parameter">blueTransferFunctionTable</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#withTransferFunctions">withTransferFunctions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWhitePoint">
<db:title>[since 6.8] void QColorSpace::setWhitePoint(QPointF <db:emphasis>whitePoint</db:emphasis>)</db:title>
<db:para>Sets the white point to used for this color space to <db:code role="parameter">whitePoint</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#whitePoint">whitePoint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QColorSpace::swap(QColorSpace &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this color space with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="transferFunction">
<db:title>[noexcept] QColorSpace::TransferFunction QColorSpace::transferFunction() const</db:title>
<db:para>Returns the predefined transfer function of the color space or <db:code>TransferFunction::Custom</db:code> if it doesn't match any of them.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#gamma">gamma</db:link>()</db:member>
<db:member><db:link xlink:href="qcolorspace.xml#setTransferFunction">setTransferFunction</db:link>()</db:member>
<db:member><db:link xlink:href="qcolorspace.xml#withTransferFunction">withTransferFunction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transformModel">
<db:title>[noexcept, since 6.8] QColorSpace::TransformModel QColorSpace::transformModel() const</db:title>
<db:para>Returns the transfrom processing model used for this color space.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="transformationToColorSpace">
<db:title>QColorTransform QColorSpace::transformationToColorSpace(const QColorSpace &amp;<db:emphasis>colorspace</db:emphasis>) const</db:title>
<db:para>Generates and returns a color space transformation from this color space to <db:code role="parameter">colorspace</db:code>.</db:para>
</db:section>
<db:section xml:id="whitePoint">
<db:title>[since 6.8] QPointF QColorSpace::whitePoint() const</db:title>
<db:para>Returns the white point used for this color space. Returns a null <db:link xlink:href="qpointf.xml">QPointF</db:link> if not defined.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#setWhitePoint">setWhitePoint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="withTransferFunction">
<db:title>[since 6.1] QColorSpace QColorSpace::withTransferFunction(const QList&lt;uint16_t&gt; &amp;<db:emphasis>transferFunctionTable</db:emphasis>) const</db:title>
<db:para>Returns a copy of this color space, except using the transfer function described by <db:code role="parameter">transferFunctionTable</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#transferFunction">transferFunction</db:link>()</db:member>
<db:member><db:link xlink:href="qcolorspace.xml#setTransferFunction">setTransferFunction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="withTransferFunction-1">
<db:title>QColorSpace QColorSpace::withTransferFunction(QColorSpace::TransferFunction <db:emphasis>transferFunction</db:emphasis>, float <db:emphasis>gamma</db:emphasis> = 0.0f) const</db:title>
<db:para>Returns a copy of this color space, except using the transfer function <db:code role="parameter">transferFunction</db:code> and <db:code role="parameter">gamma</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#transferFunction">transferFunction</db:link>()</db:member>
<db:member><db:link xlink:href="qcolorspace.xml#gamma">gamma</db:link>()</db:member>
<db:member><db:link xlink:href="qcolorspace.xml#setTransferFunction">setTransferFunction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="withTransferFunctions">
<db:title>[since 6.1] QColorSpace QColorSpace::withTransferFunctions(const QList&lt;uint16_t&gt; &amp;<db:emphasis>redTransferFunctionTable</db:emphasis>, const QList&lt;uint16_t&gt; &amp;<db:emphasis>greenTransferFunctionTable</db:emphasis>, const QList&lt;uint16_t&gt; &amp;<db:emphasis>blueTransferFunctionTable</db:emphasis>) const</db:title>
<db:para>Returns a copy of this color space, except using the transfer functions described by <db:code role="parameter">redTransferFunctionTable</db:code>, <db:code role="parameter">greenTransferFunctionTable</db:code> and <db:code role="parameter">blueTransferFunctionTable</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#setTransferFunctions">setTransferFunctions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QColorSpace::operator QVariant() const</db:title>
<db:para>Returns the color space as a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QColorSpace &amp;<db:emphasis>colorSpace1</db:emphasis>, const QColorSpace &amp;<db:emphasis>colorSpace2</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if colorspace <db:code role="parameter">colorSpace1</db:code> is not equal to colorspace <db:code role="parameter">colorSpace2</db:code>; otherwise returns <db:code>false</db:code></db:para>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QColorSpace &amp;<db:emphasis>colorSpace</db:emphasis>)</db:title>
<db:para>Writes the given <db:code role="parameter">colorSpace</db:code> to the given <db:code role="parameter">stream</db:code> as an ICC profile.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#iccProfile">QColorSpace::iccProfile</db:link>()</db:member>
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const QColorSpace &amp;<db:emphasis>colorSpace1</db:emphasis>, const QColorSpace &amp;<db:emphasis>colorSpace2</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if colorspace <db:code role="parameter">colorSpace1</db:code> is equal to colorspace <db:code role="parameter">colorSpace2</db:code>; otherwise returns <db:code>false</db:code></db:para>
</db:section>
<db:section xml:id="operator-gt-gt-2">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QColorSpace &amp;<db:emphasis>colorSpace</db:emphasis>)</db:title>
<db:para>Reads a color space from the given <db:code role="parameter">stream</db:code> and stores it in the given <db:code role="parameter">colorSpace</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#fromIccProfile">QColorSpace::fromIccProfile</db:link>()</db:member>
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
