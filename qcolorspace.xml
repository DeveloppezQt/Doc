<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QColorSpace Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcolorspace.xml">QColorSpace</db:link> class provides a color space abstraction.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QColorSpace</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QColorSpace is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member><db:member>appearance</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Color values can be interpreted in different ways, and based on the interpretation can live in different spaces. We call this <db:emphasis>color spaces</db:emphasis>.</db:para>
<db:para><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link> provides access to creating several predefined color spaces and can generate QColorTransforms for converting colors from one color space to another.</db:para>
<db:para><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link> can also represent color spaces defined by ICC profiles or embedded in images, that do not otherwise fit the predefined color spaces.</db:para>
<db:para>A color space can generally speaking be conceived as a combination of set of primary colors and a transfer function. The primaries defines the axes of the color space, and the transfer function how values are mapped on the axes. The primaries are defined by three primary colors that represent exactly how red, green, and blue look in this particular color space, and a white color that represents where and how bright pure white is. The range of colors expressible by the primary colors is called the gamut, and a color space that can represent a wider range of colors is also known as a wide-gamut color space.</db:para>
<db:para>The transfer function or gamma curve determines how each component in the color space is encoded. These are used because human perception does not operate linearly, and the transfer functions try to ensure that colors will seem evenly spaced to human eyes.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="NamedColorSpace-enum">
<db:title>enum QColorSpace::NamedColorSpace</db:title>
<db:enumsynopsis>
<db:enumname>NamedColorSpace</db:enumname>
<db:enumitem>
<db:enumidentifier>SRgb</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRgbLinear</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AdobeRgb</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DisplayP3</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ProPhotoRgb</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Predefined color spaces.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::SRgb</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The sRGB color space, which Qt operates in by default. It is a close approximation of how most classic monitors operate, and a mode most software and hardware support. <db:link xlink:href="http://www.color.org/chardata/rgb/srgb.xalter">ICC registration of sRGB</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::SRgbLinear</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The sRGB color space with linear gamma. Useful for gamma-corrected blending.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::AdobeRgb</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The Adobe RGB color space is a classic wide-gamut color space, using a gamma of 2.2. <db:link xlink:href="http://www.color.org/chardata/rgb/adobergb.xalter">ICC registration of Adobe RGB (1998)</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::DisplayP3</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>A color-space using the primaries of DCI-P3, but with the whitepoint and transfer function of sRGB. Common in modern wide-gamut screens. <db:link xlink:href="http://www.color.org/chardata/rgb/DCIP3.xalter">ICC registration of DCI-P3</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::ProPhotoRgb</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The Pro Photo RGB color space, also known as ROMM RGB is a very wide gamut color space. <db:link xlink:href="http://www.color.org/chardata/rgb/rommrgb.xalter">ICC registration of ROMM RGB</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Primaries-enum">
<db:title>enum QColorSpace::Primaries</db:title>
<db:enumsynopsis>
<db:enumname>Primaries</db:enumname>
<db:enumitem>
<db:enumidentifier>Custom</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRgb</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AdobeRgb</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DciP3D65</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ProPhotoRgb</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Predefined sets of primary colors.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">Primaries</db:emphasis>::Custom</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The primaries are undefined or does not match any predefined sets.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">Primaries</db:emphasis>::SRgb</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The sRGB primaries</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">Primaries</db:emphasis>::AdobeRgb</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The Adobe RGB primaries</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">Primaries</db:emphasis>::DciP3D65</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The DCI-P3 primaries with the D65 whitepoint</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">Primaries</db:emphasis>::ProPhotoRgb</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The ProPhoto RGB primaries with the D50 whitepoint</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="TransferFunction-enum">
<db:title>enum QColorSpace::TransferFunction</db:title>
<db:enumsynopsis>
<db:enumname>TransferFunction</db:enumname>
<db:enumitem>
<db:enumidentifier>Custom</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Linear</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Gamma</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRgb</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ProPhotoRgb</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Predefined transfer functions or gamma curves.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">TransferFunction</db:emphasis>::Custom</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The custom or null transfer function</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">TransferFunction</db:emphasis>::Linear</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The linear transfer functions</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">TransferFunction</db:emphasis>::Gamma</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A transfer function that is a real gamma curve based on the value of <db:link xlink:href="qcolorspace.xml#gamma">gamma</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">TransferFunction</db:emphasis>::SRgb</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The sRGB transfer function, composed of linear and gamma parts</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolorspace.xml">QColorSpace</db:link></db:emphasis>::<db:emphasis role="bold">TransferFunction</db:emphasis>::ProPhotoRgb</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The ProPhoto RGB transfer function, composed of linear and gamma parts</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QColorSpace">
<db:title>QColorSpace::QColorSpace()</db:title>
<db:constructorsynopsis>
<db:methodname>QColorSpace</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QColorSpace()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new colorspace object that represents an undefined and invalid colorspace.</db:para>
</db:section>
<db:section xml:id="QColorSpace-1">
<db:title>QColorSpace::QColorSpace(QColorSpace::NamedColorSpace <db:emphasis>namedColorSpace</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QColorSpace</db:methodname>
<db:methodparam>
<db:type>QColorSpace::NamedColorSpace</db:type>
<db:parameter>namedColorSpace</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QColorSpace(QColorSpace::NamedColorSpace namedColorSpace)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new colorspace object that represents a <db:code role="parameter">namedColorSpace</db:code>.</db:para>
</db:section>
<db:section xml:id="QColorSpace-2">
<db:title>QColorSpace::QColorSpace(QColorSpace::Primaries <db:emphasis>primaries</db:emphasis>, QColorSpace::TransferFunction <db:emphasis>transferFunction</db:emphasis>, float <db:emphasis>gamma</db:emphasis> = 0.0f)</db:title>
<db:constructorsynopsis>
<db:methodname>QColorSpace</db:methodname>
<db:methodparam>
<db:type>QColorSpace::Primaries</db:type>
<db:parameter>primaries</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QColorSpace::TransferFunction</db:type>
<db:parameter>transferFunction</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>gamma</db:parameter>
<db:initializer>0.0f</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QColorSpace(QColorSpace::Primaries primaries, QColorSpace::TransferFunction transferFunction, float gamma)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a custom color space with the primaries <db:code role="parameter">primaries</db:code>, using the transfer function <db:code role="parameter">transferFunction</db:code> and optionally <db:code role="parameter">gamma</db:code>.</db:para>
</db:section>
<db:section xml:id="QColorSpace-3">
<db:title>QColorSpace::QColorSpace(QColorSpace::Primaries <db:emphasis>primaries</db:emphasis>, float <db:emphasis>gamma</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QColorSpace</db:methodname>
<db:methodparam>
<db:type>QColorSpace::Primaries</db:type>
<db:parameter>primaries</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>gamma</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QColorSpace(QColorSpace::Primaries primaries, float gamma)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a custom color space with the primaries <db:code role="parameter">primaries</db:code>, using a gamma transfer function of <db:code role="parameter">gamma</db:code>.</db:para>
</db:section>
<db:section xml:id="QColorSpace-4">
<db:title>[since 6.1] QColorSpace::QColorSpace(QColorSpace::Primaries <db:emphasis>gamut</db:emphasis>, const QList&lt;uint16_t&gt; &amp;<db:emphasis>transferFunctionTable</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QColorSpace</db:methodname>
<db:methodparam>
<db:type>QColorSpace::Primaries</db:type>
<db:parameter>gamut</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;uint16_t&gt; &amp;</db:type>
<db:parameter>transferFunctionTable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QColorSpace(QColorSpace::Primaries gamut, const QList&lt;uint16_t&gt; &amp;transferFunctionTable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a custom color space with the primaries <db:code role="parameter">gamut</db:code>, using a custom transfer function described by <db:code role="parameter">transferFunctionTable</db:code>.</db:para>
<db:para>The table should contain at least 2 values, and contain an monotonically increasing list of values from 0 to 65535.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="QColorSpace-5">
<db:title>QColorSpace::QColorSpace(const QPointF &amp;<db:emphasis>whitePoint</db:emphasis>, const QPointF &amp;<db:emphasis>redPoint</db:emphasis>, const QPointF &amp;<db:emphasis>greenPoint</db:emphasis>, const QPointF &amp;<db:emphasis>bluePoint</db:emphasis>, QColorSpace::TransferFunction <db:emphasis>transferFunction</db:emphasis>, float <db:emphasis>gamma</db:emphasis> = 0.0f)</db:title>
<db:constructorsynopsis>
<db:methodname>QColorSpace</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>whitePoint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>redPoint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>greenPoint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>bluePoint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QColorSpace::TransferFunction</db:type>
<db:parameter>transferFunction</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>gamma</db:parameter>
<db:initializer>0.0f</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QColorSpace(const QPointF &amp;whitePoint, const QPointF &amp;redPoint, const QPointF &amp;greenPoint, const QPointF &amp;bluePoint, QColorSpace::TransferFunction transferFunction, float gamma)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a custom colorspace with a primaries based on the chromaticities of the primary colors <db:code role="parameter">whitePoint</db:code>, <db:code role="parameter">redPoint</db:code>, <db:code role="parameter">greenPoint</db:code> and <db:code role="parameter">bluePoint</db:code>, and using the transfer function <db:code role="parameter">transferFunction</db:code> and optionally <db:code role="parameter">gamma</db:code>.</db:para>
</db:section>
<db:section xml:id="QColorSpace-6">
<db:title>[since 6.1] QColorSpace::QColorSpace(const QPointF &amp;<db:emphasis>whitePoint</db:emphasis>, const QPointF &amp;<db:emphasis>redPoint</db:emphasis>, const QPointF &amp;<db:emphasis>greenPoint</db:emphasis>, const QPointF &amp;<db:emphasis>bluePoint</db:emphasis>, const QList&lt;uint16_t&gt; &amp;<db:emphasis>transferFunctionTable</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QColorSpace</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>whitePoint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>redPoint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>greenPoint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>bluePoint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;uint16_t&gt; &amp;</db:type>
<db:parameter>transferFunctionTable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QColorSpace(const QPointF &amp;whitePoint, const QPointF &amp;redPoint, const QPointF &amp;greenPoint, const QPointF &amp;bluePoint, const QList&lt;uint16_t&gt; &amp;transferFunctionTable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a custom color space with primaries based on the chromaticities of the primary colors <db:code role="parameter">whitePoint</db:code>, <db:code role="parameter">redPoint</db:code>, <db:code role="parameter">greenPoint</db:code> and <db:code role="parameter">bluePoint</db:code>, and using the custom transfer function described by <db:code role="parameter">transferFunctionTable</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="QColorSpace-7">
<db:title>[since 6.1] QColorSpace::QColorSpace(const QPointF &amp;<db:emphasis>whitePoint</db:emphasis>, const QPointF &amp;<db:emphasis>redPoint</db:emphasis>, const QPointF &amp;<db:emphasis>greenPoint</db:emphasis>, const QPointF &amp;<db:emphasis>bluePoint</db:emphasis>, const QList&lt;uint16_t&gt; &amp;<db:emphasis>redTransferFunctionTable</db:emphasis>, const QList&lt;uint16_t&gt; &amp;<db:emphasis>greenTransferFunctionTable</db:emphasis>, const QList&lt;uint16_t&gt; &amp;<db:emphasis>blueTransferFunctionTable</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QColorSpace</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>whitePoint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>redPoint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>greenPoint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>bluePoint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;uint16_t&gt; &amp;</db:type>
<db:parameter>redTransferFunctionTable</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;uint16_t&gt; &amp;</db:type>
<db:parameter>greenTransferFunctionTable</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;uint16_t&gt; &amp;</db:type>
<db:parameter>blueTransferFunctionTable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QColorSpace(const QPointF &amp;whitePoint, const QPointF &amp;redPoint, const QPointF &amp;greenPoint, const QPointF &amp;bluePoint, const QList&lt;uint16_t&gt; &amp;redTransferFunctionTable, const QList&lt;uint16_t&gt; &amp;greenTransferFunctionTable, const QList&lt;uint16_t&gt; &amp;blueTransferFunctionTable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a custom color space with primaries based on the chromaticities of the primary colors <db:code role="parameter">whitePoint</db:code>, <db:code role="parameter">redPoint</db:code>, <db:code role="parameter">greenPoint</db:code> and <db:code role="parameter">bluePoint</db:code>, and using the custom transfer functions described by <db:code role="parameter">redTransferFunctionTable</db:code>, <db:code role="parameter">greenTransferFunctionTable</db:code>, and <db:code role="parameter">blueTransferFunctionTable</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="description">
<db:title>[since 6.2] QString QColorSpace::description() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>description</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString description() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name or short description. If a description hasn't been given in <db:link xlink:href="qcolorspace.xml#setDescription">setDescription</db:link>(), the original name of the profile is returned if the profile is unmodified, a guessed name is returned if the profile has been recognized as a known color space, otherwise an empty string is returned.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#setDescription">setDescription</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromIccProfile">
<db:title>[static] QColorSpace QColorSpace::fromIccProfile(const QByteArray &amp;<db:emphasis>iccProfile</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QColorSpace</db:type>
<db:methodname>fromIccProfile</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>iccProfile</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColorSpace fromIccProfile(const QByteArray &amp;iccProfile)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a <db:link xlink:href="qcolorspace.xml">QColorSpace</db:link> from ICC profile <db:code role="parameter">iccProfile</db:code>.</db:para>
<db:note>
<db:para>Not all ICC profiles are supported. <db:link xlink:href="qcolorspace.xml">QColorSpace</db:link> only supports RGB-XYZ ICC profiles that are three-component matrix-based.</db:para>
</db:note>
<db:para>If the ICC profile is not supported an invalid <db:link xlink:href="qcolorspace.xml">QColorSpace</db:link> is returned where you can still read the original ICC profile using <db:link xlink:href="qcolorspace.xml#iccProfile">iccProfile</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#iccProfile">iccProfile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="gamma">
<db:title>float QColorSpace::gamma() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>gamma</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float gamma() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the gamma value of color spaces with <db:code>TransferFunction::Gamma</db:code>, an approximate gamma value for other predefined color spaces, or 0.0 if no approximate gamma is known.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#transferFunction">transferFunction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="iccProfile">
<db:title>QByteArray QColorSpace::iccProfile() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>iccProfile</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray iccProfile() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an ICC profile representing the color space.</db:para>
<db:para>If the color space was generated from an ICC profile, that profile is returned, otherwise one is generated.</db:para>
<db:note>
<db:para>Even invalid color spaces may return the ICC profile if they were generated from one, to allow applications to implement wider support themselves.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#fromIccProfile">fromIccProfile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QColorSpace::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the color space is valid.</db:para>
</db:section>
<db:section xml:id="primaries">
<db:title>QColorSpace::Primaries QColorSpace::primaries() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QColorSpace::Primaries</db:type>
<db:methodname>primaries</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColorSpace::Primaries primaries() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the predefined primaries of the color space or <db:code>primaries::Custom</db:code> if it doesn't match any of them.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#setPrimaries">setPrimaries</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDescription">
<db:title>[since 6.2] void QColorSpace::setDescription(const QString &amp;<db:emphasis>description</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDescription</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>description</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDescription(const QString &amp;description)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the name or short description of the color space to <db:code role="parameter">description</db:code>.</db:para>
<db:para>If set to empty <db:link xlink:href="qcolorspace.xml#description">description</db:link>() will return original or guessed descriptions instead.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#description">description</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPrimaries">
<db:title>void QColorSpace::setPrimaries(QColorSpace::Primaries <db:emphasis>primariesId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPrimaries</db:methodname>
<db:methodparam>
<db:type>QColorSpace::Primaries</db:type>
<db:parameter>primariesId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPrimaries(QColorSpace::Primaries primariesId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the primaries to those of the <db:code role="parameter">primariesId</db:code> set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#primaries">primaries</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPrimaries-1">
<db:title>void QColorSpace::setPrimaries(const QPointF &amp;<db:emphasis>whitePoint</db:emphasis>, const QPointF &amp;<db:emphasis>redPoint</db:emphasis>, const QPointF &amp;<db:emphasis>greenPoint</db:emphasis>, const QPointF &amp;<db:emphasis>bluePoint</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPrimaries</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>whitePoint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>redPoint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>greenPoint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>bluePoint</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPrimaries(const QPointF &amp;whitePoint, const QPointF &amp;redPoint, const QPointF &amp;greenPoint, const QPointF &amp;bluePoint)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set primaries to the chromaticities of <db:code role="parameter">whitePoint</db:code>, <db:code role="parameter">redPoint</db:code>, <db:code role="parameter">greenPoint</db:code> and <db:code role="parameter">bluePoint</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#primaries">primaries</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransferFunction">
<db:title>void QColorSpace::setTransferFunction(QColorSpace::TransferFunction <db:emphasis>transferFunction</db:emphasis>, float <db:emphasis>gamma</db:emphasis> = 0.0f)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTransferFunction</db:methodname>
<db:methodparam>
<db:type>QColorSpace::TransferFunction</db:type>
<db:parameter>transferFunction</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>gamma</db:parameter>
<db:initializer>0.0f</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTransferFunction(QColorSpace::TransferFunction transferFunction, float gamma)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the transfer function to <db:code role="parameter">transferFunction</db:code> and <db:code role="parameter">gamma</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#transferFunction">transferFunction</db:link>()</db:member>
<db:member><db:link xlink:href="qcolorspace.xml#gamma">gamma</db:link>()</db:member>
<db:member><db:link xlink:href="qcolorspace.xml#withTransferFunction">withTransferFunction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransferFunction-1">
<db:title>[since 6.1] void QColorSpace::setTransferFunction(const QList&lt;uint16_t&gt; &amp;<db:emphasis>transferFunctionTable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTransferFunction</db:methodname>
<db:methodparam>
<db:type>const QList&lt;uint16_t&gt; &amp;</db:type>
<db:parameter>transferFunctionTable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTransferFunction(const QList&lt;uint16_t&gt; &amp;transferFunctionTable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the transfer function to <db:code role="parameter">transferFunctionTable</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#withTransferFunction">withTransferFunction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransferFunctions">
<db:title>[since 6.1] void QColorSpace::setTransferFunctions(const QList&lt;uint16_t&gt; &amp;<db:emphasis>redTransferFunctionTable</db:emphasis>, const QList&lt;uint16_t&gt; &amp;<db:emphasis>greenTransferFunctionTable</db:emphasis>, const QList&lt;uint16_t&gt; &amp;<db:emphasis>blueTransferFunctionTable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTransferFunctions</db:methodname>
<db:methodparam>
<db:type>const QList&lt;uint16_t&gt; &amp;</db:type>
<db:parameter>redTransferFunctionTable</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;uint16_t&gt; &amp;</db:type>
<db:parameter>greenTransferFunctionTable</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;uint16_t&gt; &amp;</db:type>
<db:parameter>blueTransferFunctionTable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTransferFunctions(const QList&lt;uint16_t&gt; &amp;redTransferFunctionTable, const QList&lt;uint16_t&gt; &amp;greenTransferFunctionTable, const QList&lt;uint16_t&gt; &amp;blueTransferFunctionTable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the transfer functions to <db:code role="parameter">redTransferFunctionTable</db:code>, <db:code role="parameter">greenTransferFunctionTable</db:code> and <db:code role="parameter">blueTransferFunctionTable</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#withTransferFunctions">withTransferFunctions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QColorSpace::swap(QColorSpace &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QColorSpace &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QColorSpace &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps color space <db:code role="parameter">other</db:code> with this color space. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="transferFunction">
<db:title>QColorSpace::TransferFunction QColorSpace::transferFunction() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QColorSpace::TransferFunction</db:type>
<db:methodname>transferFunction</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColorSpace::TransferFunction transferFunction() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the predefined transfer function of the color space or <db:code>TransferFunction::Custom</db:code> if it doesn't match any of them.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#gamma">gamma</db:link>()</db:member>
<db:member><db:link xlink:href="qcolorspace.xml#setTransferFunction">setTransferFunction</db:link>()</db:member>
<db:member><db:link xlink:href="qcolorspace.xml#withTransferFunction">withTransferFunction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transformationToColorSpace">
<db:title>QColorTransform QColorSpace::transformationToColorSpace(const QColorSpace &amp;<db:emphasis>colorspace</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QColorTransform</db:type>
<db:methodname>transformationToColorSpace</db:methodname>
<db:methodparam>
<db:type>const QColorSpace &amp;</db:type>
<db:parameter>colorspace</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColorTransform transformationToColorSpace(const QColorSpace &amp;colorspace) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Generates and returns a color space transformation from this color space to <db:code role="parameter">colorspace</db:code>.</db:para>
</db:section>
<db:section xml:id="withTransferFunction">
<db:title>QColorSpace QColorSpace::withTransferFunction(QColorSpace::TransferFunction <db:emphasis>transferFunction</db:emphasis>, float <db:emphasis>gamma</db:emphasis> = 0.0f) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QColorSpace</db:type>
<db:methodname>withTransferFunction</db:methodname>
<db:methodparam>
<db:type>QColorSpace::TransferFunction</db:type>
<db:parameter>transferFunction</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>gamma</db:parameter>
<db:initializer>0.0f</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColorSpace withTransferFunction(QColorSpace::TransferFunction transferFunction, float gamma) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of this color space, except using the transfer function <db:code role="parameter">transferFunction</db:code> and <db:code role="parameter">gamma</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#transferFunction">transferFunction</db:link>()</db:member>
<db:member><db:link xlink:href="qcolorspace.xml#gamma">gamma</db:link>()</db:member>
<db:member><db:link xlink:href="qcolorspace.xml#setTransferFunction">setTransferFunction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="withTransferFunction-1">
<db:title>[since 6.1] QColorSpace QColorSpace::withTransferFunction(const QList&lt;uint16_t&gt; &amp;<db:emphasis>transferFunctionTable</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QColorSpace</db:type>
<db:methodname>withTransferFunction</db:methodname>
<db:methodparam>
<db:type>const QList&lt;uint16_t&gt; &amp;</db:type>
<db:parameter>transferFunctionTable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QColorSpace withTransferFunction(const QList&lt;uint16_t&gt; &amp;transferFunctionTable) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of this color space, except using the transfer function described by <db:code role="parameter">transferFunctionTable</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#transferFunction">transferFunction</db:link>()</db:member>
<db:member><db:link xlink:href="qcolorspace.xml#setTransferFunction">setTransferFunction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="withTransferFunctions">
<db:title>[since 6.1] QColorSpace QColorSpace::withTransferFunctions(const QList&lt;uint16_t&gt; &amp;<db:emphasis>redTransferFunctionTable</db:emphasis>, const QList&lt;uint16_t&gt; &amp;<db:emphasis>greenTransferFunctionTable</db:emphasis>, const QList&lt;uint16_t&gt; &amp;<db:emphasis>blueTransferFunctionTable</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QColorSpace</db:type>
<db:methodname>withTransferFunctions</db:methodname>
<db:methodparam>
<db:type>const QList&lt;uint16_t&gt; &amp;</db:type>
<db:parameter>redTransferFunctionTable</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;uint16_t&gt; &amp;</db:type>
<db:parameter>greenTransferFunctionTable</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;uint16_t&gt; &amp;</db:type>
<db:parameter>blueTransferFunctionTable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColorSpace withTransferFunctions(const QList&lt;uint16_t&gt; &amp;redTransferFunctionTable, const QList&lt;uint16_t&gt; &amp;greenTransferFunctionTable, const QList&lt;uint16_t&gt; &amp;blueTransferFunctionTable) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of this color space, except using the transfer functions described by <db:code role="parameter">redTransferFunctionTable</db:code>, <db:code role="parameter">greenTransferFunctionTable</db:code> and <db:code role="parameter">blueTransferFunctionTable</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#setTransferFunctions">setTransferFunctions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QColorSpace::operator QVariant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>operator QVariant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant operator QVariant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the color space as a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QColorSpace &amp;<db:emphasis>colorSpace1</db:emphasis>, const QColorSpace &amp;<db:emphasis>colorSpace2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QColorSpace &amp;</db:type>
<db:parameter>colorSpace1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QColorSpace &amp;</db:type>
<db:parameter>colorSpace2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QColorSpace &amp;colorSpace1, const QColorSpace &amp;colorSpace2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if colorspace <db:code role="parameter">colorSpace1</db:code> is not equal to colorspace <db:code role="parameter">colorSpace2</db:code>; otherwise returns <db:code>false</db:code></db:para>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QColorSpace &amp;<db:emphasis>colorSpace</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QColorSpace &amp;</db:type>
<db:parameter>colorSpace</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QColorSpace &amp;colorSpace)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the given <db:code role="parameter">colorSpace</db:code> to the given <db:code role="parameter">stream</db:code> as an ICC profile.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#iccProfile">QColorSpace::iccProfile</db:link>()</db:member>
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const QColorSpace &amp;<db:emphasis>colorSpace1</db:emphasis>, const QColorSpace &amp;<db:emphasis>colorSpace2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QColorSpace &amp;</db:type>
<db:parameter>colorSpace1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QColorSpace &amp;</db:type>
<db:parameter>colorSpace2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QColorSpace &amp;colorSpace1, const QColorSpace &amp;colorSpace2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if colorspace <db:code role="parameter">colorSpace1</db:code> is equal to colorspace <db:code role="parameter">colorSpace2</db:code>; otherwise returns <db:code>false</db:code></db:para>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QColorSpace &amp;<db:emphasis>colorSpace</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QColorSpace &amp;</db:type>
<db:parameter>colorSpace</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QColorSpace &amp;colorSpace)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a color space from the given <db:code role="parameter">stream</db:code> and stores it in the given <db:code role="parameter">colorSpace</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolorspace.xml#fromIccProfile">QColorSpace::fromIccProfile</db:link>()</db:member>
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
