<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>The QML Disk Cache</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>QML documents are generally pre-compiled or cached after compilation.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>You should define your QML modules using <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link> that makes sure that the <db:link xlink:href="qtqml-qtquick-compiler-tech.xml">Qt Quick Compiler</db:link> processes your QML and JavaScript files ahead of time. Also, it guarantees optimum performance at run time. The <db:link xlink:href="qtqml-qtquick-compiler-tech.xml">Qt Quick Compiler</db:link> generates byte code for each function and binding. This byte code can be used by the QML interpreter, and the Just-in-time (JIT) compiler in the QML engine. In addition, the <db:link xlink:href="qtqml-qtquick-compiler-tech.xml">Qt Quick Compiler</db:link> generates native code for suitable functions and bindings. The native code can be executed directly, which results in better performance than interpreting or just-in-time compiling the byte code. Both, byte code and native code are then compiled into your binary.</db:para>
<db:para>When using <db:link xlink:href="qmake-manual.xml">qmake</db:link> you can specify CONFIG += qtquickcompiler to give similar treatment to QML and JavaScript files added as resources to your project. <db:link xlink:href="qtquick-tools-and-utilities.xml#qt-creator">Qt Creator</db:link> has a setting that allows passing CONFIG += qtquickcompiler to the qmake command line. By default, it is enabled for release and profile builds. <db:link xlink:href="qmake-manual.xml">qmake</db:link> cannot pass as much information to the <db:link xlink:href="qtqml-qtquick-compiler-tech.xml">Qt Quick Compiler</db:link> as CMake. Therefore, the compilation will contain less native code.</db:para>
<db:para>You should make sure to load your QML documents from the resource file system where possible. Otherwise the QML engine won't be able to find the code compiled ahead of time.</db:para>
<db:para>If no byte code or native code can be found for a QML document at run time, or if the code is found but cannot be used, the QML engine compiles the document into a byte code representation on the fly. The compiling process can be time consuming, and the result will contain only byte code. Subsequent loads of the same document will yield the same byte code. The QML engine can optimize this step by caching the result of the compilation. It stores the byte code in a cache file and later loads the cache file instead of re-compiling when the same QML document is requested again. Usually, the cache files are stored in a subdirectory qmlcache of the system's cache directory, as denoted by <db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::CacheLocation</db:link>.</db:para>
<db:para>Checks are in place to make sure that any cache files and any code compiled ahead of time are only loaded if all of the following conditions are met:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The Qt version has not changed</db:para>
</db:listitem>
<db:listitem>
<db:para>The source code in the original file has not changed</db:para>
</db:listitem>
<db:listitem>
<db:para>The QML debugger is not running</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Only the QML_FORCE_DISK_CACHE variable (see below) overrides only the condition regarding the QML debugger. The other environment variables do not influence these conditions.</db:para>
<db:para>The primary way of fine tuning the behavior regarding ahead of time compiled code and caching is via the environment variable QML_DISK_CACHE. This variable takes a comma-separated list of options, for example:</db:para>
<db:programlisting language="cpp" role="bad">QML_DISK_CACHE=aot,qmlc-read
</db:programlisting>
<db:para>The available options are as follows:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>aot-native</db:para>
</db:td>
<db:td>
<db:para>Load the compilation units compiled ahead of time and allow execution of any native code found in them.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>aot-bytecode</db:para>
</db:td>
<db:td>
<db:para>Load the compilation units compiled ahead of time and allow interpretation and just-in-time compilation of byte code found in them.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>aot</db:para>
</db:td>
<db:td>
<db:para>Shorthand for aot-native,aot-bytecode.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qmlc-read</db:para>
</db:td>
<db:td>
<db:para>Load any cached compilation units for QML and JavaScript files from the host file system and allow interpretation and just-in-time compilation of byte code found in them.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qmlc-write</db:para>
</db:td>
<db:td>
<db:para>When compiling a QML or JavaScript file on the fly, create a cache file afterward. The cache file can be loaded when the same document is requested again.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qmlc</db:para>
</db:td>
<db:td>
<db:para>Shorthand for qmlc-read,qmlc-write.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Furthermore, you can use the following environment variables:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Environment Variable</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>QML_DISABLE_DISK_CACHE</db:para>
</db:td>
<db:td>
<db:para>Disables the disk cache and forces re-compilation from source for all QML and JavaScript files. QML_DISABLE_DISK_CACHE overrides QML_DISK_CACHE.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QML_FORCE_DISK_CACHE</db:para>
</db:td>
<db:td>
<db:para>Enables the disk cache even when debugging QML. You cannot use the JavaScript debugger this way. It may fail to stop at breakpoints, for example. You can still use the QML inspector to explore the object hierarchy, though. QML_FORCE_DISK_CACHE overrides QML_DISABLE_DISK_CACHE and QML_DISK_CACHE.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QML_DISK_CACHE_PATH</db:para>
</db:td>
<db:td>
<db:para>Specifies a custom location where the cache files shall be stored instead of using the default location.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:article>
