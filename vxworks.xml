<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for VxWorks</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Platform support for VxWorks. .</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt for VxWorks is available only under a commercial license.</db:para>
<db:para>Contact The Qt Company for more information: <db:link xlink:href="https://www.qt.io/contact-us/">https://www.qt.io/contact-us/</db:link></db:para>
<db:section xml:id="supported-architectures-and-vxworks-releases">
<db:title>Supported Architectures and VxWorks Releases</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Qt 5.5 was verified on VxWorks 7 release SR0480 2016-09-16. Supported architecture is ARM-v7.</db:para>
<db:note>
<db:para>Qt 5.5 is no longer supported.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>Qt 5.9 LTS was verified on VxWorks 7 SR0541.</db:para>
<db:note>
<db:para>Support for Qt 5.9 ends May 2020.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>5.12 LTS is verified on VxWorks 7 SR0541. Qt 5.12 is supported until December 2021.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If you are interested in later Qt releases, please <db:link xlink:href="https://www.qt.io/contact-us/">contact</db:link> Qt professional services.</db:para>
</db:section>
<db:section xml:id="qt-for-vxworks-source-package">
<db:title>Qt for VxWorks Source Package</db:title>
<db:para>Qt for VxWorks is delivered via the <db:link xlink:href="https://account.qt.io/">Qt Account</db:link>, under the name <db:emphasis role="bold">Qt 5.5.1</db:emphasis> &gt; <db:emphasis role="bold">Qt VxWorks Platform Source Package</db:emphasis>.</db:para>
<db:note>
<db:para>Qt 5.5 is no longer supported.</db:para>
</db:note>
<db:para>Source packages for up-to-date and supported Qt releases on VxWorks are available through Qt Professional Services.</db:para>
</db:section>
<db:section xml:id="requirements-for-vxworks">
<db:title>Requirements for VxWorks</db:title>
<db:section xml:id="qtwidget-applications">
<db:title>QtWidget Applications</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Framebuffer device (FBDEV)</db:para>
</db:listitem>
<db:listitem>
<db:para>Evdev support (compatibility mode)</db:para>
</db:listitem>
<db:listitem>
<db:para>POSIX support</db:para>
</db:listitem>
<db:listitem>
<db:para>C++11 support</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-quick-2-applications">
<db:title>Qt Quick 2 Applications</db:title>
<db:para>All features which are required for QtWidget applications, and in addition the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>GPU device (GPUDEV) for OpenGL ES 2.0</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="supported-modules">
<db:title>Supported Modules</db:title>
<db:para>Almost all essential <db:link xlink:href="qtmodules.xml">Qt modules</db:link> and some add-on modules supported.</db:para>
<db:section xml:id="limitations-for-essential-modules">
<db:title>Limitations for Essential modules</db:title>
<db:informaltable style="generic" width="80%">
<db:thead>
<db:tr>
<db:th>
<db:para>Qt Module</db:para>
</db:th>
<db:th>
<db:para>Supported Features</db:para>
</db:th>
<db:th>
<db:para>Notes</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtmultimedia-index.xml">Qt Multimedia</db:link></db:para>
</db:td>
<db:td>
<db:para>Audio</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtmultimedia-soundeffect.xml">SoundEffect</db:link>, <db:link xlink:href="qsound.xml">QSound</db:link>, <db:link xlink:href="qsoundeffect.xml">QSoundEffect</db:link> and <db:link xlink:href="qaudiooutput.xml">QAudioOutput</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtmultimediawidgets-index.xml">Qt Multimedia Widgets</db:link></db:para>
</db:td>
<db:td>
<db:para>Not supported</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Qt WebKit</db:para>
</db:td>
<db:td>
<db:para>Not supported</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Qt WebKit Widgets</db:para>
</db:td>
<db:td>
<db:para>Not supported</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="supported-add-ons">
<db:title>Supported Add-ons</db:title>
<db:informaltable style="generic" width="80%">
<db:thead>
<db:tr>
<db:th>
<db:para>Qt Add-on</db:para>
</db:th>
<db:th>
<db:para>Notes</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtcharts-index.xml">Qt Charts</db:link></db:para>
</db:td>
<db:td>
<db:para>Version 2.0.1</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtdatavisualization-index.xml">Qt Data Visualization</db:link></db:para>
</db:td>
<db:td>
<db:para>Version 1.2.1</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtvirtualkeyboard-index.xml">Qt Virtual Keyboard</db:link></db:para>
</db:td>
<db:td>
<db:para>Version 2.0</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="http://doc.qt.io/QtQuickCompiler">Qt Quick Compiler</db:link></db:para>
</db:td>
<db:td>
<db:para>Version 3.0</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtconcurrent-index.xml">Qt Concurrent</db:link></db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtgraphicaleffects-index.xml">Qt Graphical Effects</db:link></db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="license-changes.xml#qt-image-formats">Qt Image Formats</db:link></db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtopengl-index.xml">Qt OpenGL</db:link></db:para>
</db:td>
<db:td>
<db:para>Only OpenGL ES 2</db:para>
<db:note>
<db:para>Provided to ease porting from Qt 4.x. Use the QOpenGL classes in <db:link xlink:href="qtgui-index.xml">Qt GUI</db:link> for new code</db:para>
</db:note>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtplatformheaders-index.xml">Qt Platform Headers</db:link></db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtsvg-index.xml">Qt SVG</db:link></db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtxmlpatterns-index.xml">Qt XML Patterns</db:link></db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>You can explicitly exclude unsupported or unused modules from the build via the -skip &lt;module&gt; option when running the configure tool.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="platform-notes">
<db:title>Platform Notes</db:title>
<db:para>With the release of Qt 5.0, Qt no longer contains its own window system implementation: QWS is no longer a supported platform. For single-process use cases, the <db:link xlink:href="qpa.xml">Qt Platform Abstraction</db:link> is a superior solution.</db:para>
<db:para>There are two platform plugins that are usable on VxWorks: EGLFS and VxWorksFB. The availability of these plugins depends on the configuration of Qt. The default platform plugin is also device-specific. For instance, on many boards eglfs will be chosen as the default one. If the default is not suitable, the QT_QPA_PLATFORM environment variable parameter can be used to request another plugin. Alternatively, for quick tests, the -platform command-line option can be used with the same syntax.</db:para>
</db:section>
<db:section xml:id="configuring-for-a-specific-device">
<db:title>Configuring for a Specific Device</db:title>
<db:para>Building Qt for a given device requires a toolchain and a sysroot. Additionally, some devices require vendor specific adaptation code for EGL and OpenGL ES 2.0 support. This is not relevant for non-accelerated platforms, for example the ones using the VxWorksFB plugin, however neither OpenGL nor Qt Quick 2 will be functional in such a setup.</db:para>
<db:para>The directory <db:emphasis>qtbase/mkspecs/devices</db:emphasis> contains configuration and graphics adaptation code for a number of devices. For example, vxworks-imx6 contains build settings, such as the optimal compiler and linker flags, for the <db:link xlink:href="http://en.wikipedia.org/wiki/I.MX#i.MX6x_series">Freescale iMX6 series</db:link>, and either an implementation of the eglfs hooks (vendor-specific adaptation code), or a reference to a suitable eglfs device integration plugin. The device is selected through the <db:link xlink:href="configure-options.xml">configure</db:link> tool's -device parameter. The name that follows after this argument must, at least partially, match one of the subdirectories under <db:emphasis>devices</db:emphasis>.</db:para>
<db:para>Before running configure and building Qt 5 it is required to open <db:emphasis>VxWorks 7 Development Shell</db:emphasis> in command prompt.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Linux:</db:para>
<db:programlisting language="cpp" role="bad">cd &amp;lt;VxWorks 7 installation directory&amp;gt;
./wrenv.sh -p vxworks-7
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Windows:</db:para>
<db:programlisting language="cpp" role="bad">cd &amp;lt;VxWorks 7 installation directory&amp;gt;
wrenv -p vxworks-7
</db:programlisting>
</db:listitem>
</db:itemizedlist>
<db:para>Below is an example configuration for the BD-SL-i.MX6. For most VxWorks boards the configure command will look very similar. By default, Qt 5 is configured to use shared libraries. To build Qt 5 statically, add -static option for configure.</db:para>
<db:programlisting language="cpp" role="bad">./configure -commercial -confirm-license -device vxworks-imx6 -device-option CROSS_COMPILE=arm -prefix /sd1:1/qt5rtp -sysroot &amp;lt;path_to_vxworks_vsb_dir&amp;gt;/fsl_imx6_1_1_11_0_VSB -no-gcc-sysroot -extprefix &amp;lt;path_to_host_dir&amp;gt;/qt5rtp -hostprefix &amp;lt;path_to_host_dir&amp;gt;/qt5rtp -no-openssl -nomake tools -nomake examples
</db:programlisting>
<db:para>The most important parameters are -device, -device-option CROSS_COMPILE=&lt;arch&gt;, -sysroot and -no-gcc-sysroot. By specifying -sysroot, the include files and libraries used by configure's feature detection tests, as well as Qt itself, will be taken from the specified location, instead of the host PC's standard locations. This means that installing development packages on the host machine has no relevance. Instead, the headers and the libraries for the target architecture (e.g. ARM) have to be present in the sysroot.</db:para>
<db:para>It is recommended to build Qt 5 using a <db:emphasis>shadow build</db:emphasis>. See <db:link xlink:href="configure-options.xml">Qt Configure Options</db:link> for more information.</db:para>
</db:section>
<db:section xml:id="building-and-installing-qt-5">
<db:title>Building and Installing Qt 5</db:title>
<db:programlisting language="cpp" role="bad">make -j&amp;lt;N&amp;gt;
make install
</db:programlisting>
</db:section>
<db:section xml:id="platform-plugins-for-vxworks-devices">
<db:title>Platform Plugins for VxWorks Devices</db:title>
<db:section xml:id="eglfs">
<db:title>EGLFS</db:title>
<db:para><db:link xlink:href="http://www.khronos.org/egl">EGL</db:link> is an interface between OpenGL and the native windowing system. Qt can use EGL for context and surface management, however the API contains no platform specifics: The creation of a <db:emphasis>native window</db:emphasis> (which will not necessarily be an actual window on the screen) must still be done by platform-specific means. Hence the need for the board or GPU specific adaptation code. Such adaptations are provided either as <db:emphasis>eglfs hooks</db:emphasis>, a single source file compiled in to the platform plugin, or as dynamically loaded <db:emphasis>EGL device integration</db:emphasis> plugins.</db:para>
<db:para>EGLFS is a platform plugin for running Qt 5 applications on top of EGL and OpenGL ES 2.0 without an actual windowing system (like X11 or Wayland). In addition to Qt Quick 2 and native OpenGL applications it supports software-rendered windows (for example <db:link xlink:href="qwidget.xml">QWidget</db:link>) too. In the latter case the widgets' contents are rendered using the CPU into images which are then uploaded into textures and composited by the plugin.</db:para>
<db:para>This is the recommended plugin for modern VxWorks devices that include a GPU.</db:para>
<db:para>EGLFS forces the first top-level window (be it either a <db:link xlink:href="qwidget.xml">QWidget</db:link> or a <db:link xlink:href="qquickview.xml">QQuickView</db:link>) to become fullscreen. This window is also chosen to be the <db:emphasis>root</db:emphasis> widget window into which all other top-level widgets (for example dialogs, popup menus or combobox dropdowns) are composited. This is necessary because with EGLFS there is always exactly one native window and EGL window surface, and these belong to the widget or window that is created first. This approach works well when there is a main window that exists for the entire lifetime of the application and all other widgets are either non top-levels or are created afterwards, once the main window is shown.</db:para>
<db:para>There are further restrictions for OpenGL-based windows. As of Qt 5.3, eglfs supports a single, fullscreen GL window (for example, an OpenGL-based <db:link xlink:href="qwindow.xml">QWindow</db:link>, a <db:link xlink:href="qquickview.xml">QQuickView</db:link> or a QGLWidget). Opening additional OpenGL windows or mixing such windows with <db:link xlink:href="qwidget.xml">QWidget</db:link>-based content is not supported and will terminate the application with an error message.</db:para>
<db:para>If necessary, eglfs can be configured via environment variables:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>QT_QPA_EGLFS_FB - Overrides the framebuffer device. The default is /dev/fb0. On most embedded platforms this is not very relevant because the framebuffer is used only for querying settings like the display dimensions. On certain devices however this parameter provides the ability to specify which display to use in multiple display setups, similarly to the fb parameter in VxWorksFB.</db:para>
</db:listitem>
<db:listitem>
<db:para>QT_QPA_EGLFS_WIDTH and QT_QPA_EGLFS_HEIGHT - Contain the screen width and height in pixels. While eglfs will try to determine the dimensions from the framebuffer device <db:emphasis>/dev/fb0</db:emphasis>, this will not always work and manually specifying the sizes may become necessary.</db:para>
</db:listitem>
<db:listitem>
<db:para>QT_QPA_EGLFS_PHYSICAL_WIDTH and QT_QPA_EGLFS_PHYSICAL_HEIGHT - Physical screen width and height in millimeters. On platforms where the framebuffer device <db:emphasis>/dev/fb0</db:emphasis> is not available or the query is not successful, the values are calculated based on a default DPI of 100. This variable can be used to override any such defaults.</db:para>
</db:listitem>
<db:listitem>
<db:para>QT_QPA_EGLFS_DEPTH - Overrides the color depth for the screen. On platforms where the framebuffer device <db:emphasis>/dev/fb0</db:emphasis> is not available or the query is not successful, the default of 32 is used. This variable can be used to override any such defaults. Note that this affects only the color depth value reported by <db:link xlink:href="qscreen.xml">QScreen</db:link>. It has no connection to EGL configurations and the color depth used for OpenGL rendering.</db:para>
</db:listitem>
<db:listitem>
<db:para>QT_QPA_EGLFS_SWAPINTERVAL - By default a swap interval of 1 will be requested. This enables synchronizing to the displays vertical refresh. The value can be overridden with this environment variable. For instance, passing 0 will disable blocking on swap, resulting in running as fast as possible without any synchronization.</db:para>
</db:listitem>
<db:listitem>
<db:para>QT_QPA_EGLFS_FORCE888 - When set, the red, green and blue color channel sizes are ignored whenever creating a new context, window or offscreen surface. Instead, the plugin will request a configuration with 8 bits per channel. This can be helpful on devices where configurations with less than 32 or 24 bits per pixel are chosen by default but are known not to be suitable, for example, due to banding effects. Instead of changing all the applications, this variable provides an easier shortcut to force 24/32 bpp configurations for a given device.</db:para>
</db:listitem>
<db:listitem>
<db:para>QT_QPA_EGLFS_DEBUG - When set, some debugging information is printed on the debug output. For example, the input <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link> and the properties of the chosen EGL configuration are printed whenever creating a new context. Together with Qt Quick's QSG_INFO variable, this can provide useful information for troubleshooting issues related to the EGL configuration.</db:para>
</db:listitem>
<db:listitem>
<db:para>QT_QPA_EGLFS_INTEGRATION - In addition to the compiled-in <db:emphasis>hooks</db:emphasis>, it is also possible to provide device or vendor-specific adaptation in the form of dynamically loaded plugins. This environment variable enforces a specific plugin. For example, setting it to <db:emphasis>eglfs_kms</db:emphasis> will use the KMS/DRM backend. This is only an option when no static, compiled-in hooks were specified in the device makespecs. In practice the traditional compiled-in hooks are rarely used, almost all backends are now migrated to plugins. The device makespecs still contain a relevant EGLFS_DEVICE_INTEGRATION entry: the name of the preferred backend for that particular device. This is optional, but very useful to avoid the need to set this environment variable in case there are more than one plugins present in the target system. In a desktop environment the KMS or the X11 backends are prioritized, depending on the presence of the DISPLAY environment variable.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In addition to QT_QPA_EGLFS_DEBUG, eglfs also supports the more modern categorized logging system of Qt. The following logging categories are available:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>qt.qpa.egldeviceintegration – Enables logging for dynamically loaded backends. Very useful to check what backend is in use.</db:para>
</db:listitem>
<db:listitem>
<db:para>qt.qpa.input – Enables debug output from the evdev input handler. Very useful to check if a given input device was correctly recognized and opened.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-quick-scene-graph-rendering-thread">
<db:title>Qt Quick Scene Graph Rendering Thread</db:title>
<db:para>The scene graph is a graphical representation of the Item scene. It can be thought of as a graphical deep copy, an independent structure that contains enough information to render all the items.</db:para>
<db:para>On many platforms, the <db:link xlink:href="topics-graphics.xml#qt-quick-scene-graph">scene graph</db:link> will even be rendered on a dedicated render thread while the GUI thread is preparing the next frame's state.</db:para>
<db:para>In some cases when application is complex e.g. it's scene graph contains lot's of Items, scene graph can consume more stack memory than what is available by default for the render thread. Default stack memory size is 64KB. Using the environment variable QSG_RENDERTHREAD_STACK_SIZE, it is possible to increase the stack size available for the scene graph render thread.</db:para>
</db:section>
<db:section xml:id="vxworksfb">
<db:title>VxWorksFB</db:title>
<db:para>This plugin writes directly to the framebuffer. Only software-rendered content is supported. Note that on some setups the display performance is expected to be limited.</db:para>
<db:para>The vxworksfb plugin allows specifying additional settings by passing them in the QT_QPA_PLATFORM environment variable or -platform command-line option. For example, QT_QPA_PLATFORM=vxworksfb:fb=/dev/fb1 specifies that the framebuffer device /dev/fb1 should be used instead of the default fb0. Multiple settings can be specfified by separating them with a colon.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>fb=/dev/fbN - Specifies the framebuffer devices. On multiple display setups this will typically allow running the application on different displays. For the time being there is no way to use multiple framebuffers from one Qt application.</db:para>
</db:listitem>
<db:listitem>
<db:para>size=<db:emphasis>&lt;width&gt;</db:emphasis>x<db:emphasis>&lt;height&gt;</db:emphasis> - Specifies the screen size in pixels. The plugin will try to query the display dimensions, both physical and logical, from the framebuffer device. This may not always lead to proper results however, and therefore it may become necessary to explicitly specify the values.</db:para>
</db:listitem>
<db:listitem>
<db:para>mmSize=<db:emphasis>&lt;width&gt;</db:emphasis>x<db:emphasis>&lt;height&gt;</db:emphasis> - Physical width and height in millimeters.</db:para>
</db:listitem>
<db:listitem>
<db:para>offset=<db:emphasis>&lt;width&gt;</db:emphasis>x<db:emphasis>&lt;height&gt;</db:emphasis> - Offset in pixels specifying the top-left corner of the screen. The default position is at (0, 0).</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="input">
<db:title>Input</db:title>
<db:para>When no windowing system is present, the mouse, keyboard and touch input are read directly via evdev. Note that this requires that devices nodes /input/event* are readable by the user. eglfs and vxworksfb has all the evdev input handling code built-in.</db:para>
<db:section xml:id="input-on-eglfs-and-vxworksfb">
<db:title>Input on eglfs and vxworksfb</db:title>
<db:para>Parameters like the device node name can be set in the environment variables QT_QPA_EVDEV_MOUSE_PARAMETERS, QT_QPA_EVDEV_KEYBOARD_PARAMETERS and QT_QPA_EVDEV_TOUCHSCREEN_PARAMETERS. Additionally, the built-in input handlers can be disabled by setting QT_QPA_EGLFS_DISABLE_INPUT or QT_QPA_FB_DISABLE_INPUT to 1. On some touch screens the coordinates will need to be rotated. This can be enabled by setting QT_QPA_EVDEV_TOUCHSCREEN_PARAMETERS to rotate=180.</db:para>
</db:section>
<db:section xml:id="mouse">
<db:title>Mouse</db:title>
<db:para>The mouse cursor will show up whenever QT_QPA_EGLFS_HIDECURSOR (for eglfs) or QT_QPA_FB_HIDECURSOR (for vxworksfb) is not set, the mouse cursor will always show up unless explicitly disabled via the environment variable.</db:para>
<db:para>Hot plugging is not supported.</db:para>
</db:section>
<db:section xml:id="keyboard">
<db:title>Keyboard</db:title>
<db:para>The evdev keyboard handler supports the following extra parameters:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>/input/... - Specifies the name of the input device. When not given, Qt will look for a suitable device by walking through the available nodes.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If the default, built-in keymap is not sufficient, a different one can be specified either via the keymap parameter or by using the eglfs-specific <db:link xlink:href="qeglfsfunctions.xml#loadKeymap">loadKeymap</db:link>() function. The latter allows switching the keymap at runtime. Note however that this requires using eglfs' built-in keyboard handler; it is not supported when the keyboard handler is loaded via the -plugin command-line parameter.</db:para>
</db:section>
<db:section xml:id="touch">
<db:title>Touch</db:title>
<db:para>Both single and multitouch devices are supported and require that VxWorks has been properly configured to support touch devices.</db:para>
</db:section>
<db:section xml:id="debugging-input-devices">
<db:title>Debugging Input Devices</db:title>
<db:para>It is possible to print some information to the debug output by enabling the qt.qpa.input logging rule, for example by setting the QT_LOGGING_RULES environment variable to qt.qpa.input=true. This is useful for detecting which device is being used, or to troubleshoot device discovery issues.</db:para>
</db:section>
<db:section xml:id="using-custom-mouse-cursor-images">
<db:title>Using Custom Mouse Cursor Images</db:title>
<db:para>eglfs comes with its own set of 32x32 sized mouse cursor images. If these are not sufficient, a custom cursor atlas can be provided by setting the QT_QPA_EGLFS_CURSOR environment variable to the name of a JSON file. The file can also be embedded into the application via Qt's resource system.</db:para>
<db:para>For example, an embedded cursor atlas with 8 cursor images per row can be specified like the following:</db:para>
<db:programlisting language="cpp" role="bad">{
  &quot;image&quot;: &quot;:/cursor-atlas.png&quot;,
  &quot;cursorsPerRow&quot;: 8,
  &quot;hotSpots&quot;: [
      [7, 2],
      [12, 3],
      [12, 12],
      ...
  ]
}
</db:programlisting>
<db:para>Note that the images are expected to be tightly packed in the atlas: the width and height of the cursors are decided based on the total image size and the cursorsPerRow setting. Atlases have to provide an image for all the supported cursors.</db:para>
</db:section>
</db:section>
<db:section xml:id="qml-component-loader-thread">
<db:title>QML Component Loader Thread</db:title>
<db:para>In some cases, a complex application (for example, using a lot of custom QML components) may cause the QML loader thread to consume stack memory more than the 32 KB available by default. Using the environment variable QML_LOADERTHREAD_STACK_SIZE, it is possible to increase the stack size available for the QML loader thread.</db:para>
</db:section>
<db:section xml:id="preventing-timeouts-in-qeventdispatcher">
<db:title>Preventing Timeouts in QEventDispatcher</db:title>
<db:para>Default system clock rate (SYS_CLK_RATE) for VxWorks 7 is 1/60s or ~16,67ms. In some cases this may cause a drop in the application frame rate; in QEventDispatcher, the select function is blocking for the entire system clock interval because a timeout is used. By defining an environment variable QT_FORCE_SELECT_NOTIMEOUT=1, the select function returns immediately if no new events are available and the resolution of the system clock is higher than 10ms, which is true with default value.</db:para>
</db:section>
<db:section xml:id="running-qt-applications">
<db:title>Running Qt Applications</db:title>
<db:para>Following example shows how to start an application when Qt 5 is built using shared libraries. With a statically build Qt 5, there is no need to use the LD_LIBRARY_PATH environment variable. This variable is only needed to point the location of VxWorks shared libraries (for example libc and OpenGL ES 2.0). It is not needed for Qt 5 shared libraries.</db:para>
<db:programlisting language="cpp" role="bad">putenv &quot;LD_LIBRARY_PATH=/sd0:1/lib&quot;
cd &quot;/sd0:1&quot;
rtpSp(&quot;&amp;lt;Qt5_app&amp;gt;&quot;, 200, 0x100000, 0, 0x01000000)
</db:programlisting>
</db:section>
<db:section xml:id="limitations">
<db:title>Limitations</db:title>
<db:section xml:id="openssl-support">
<db:title>OpenSSL Support</db:title>
<db:para>Qt 5 does not support OpenSSL for VxWorks as it does not support using OpenSSL in RTP mode.</db:para>
</db:section>
<db:section xml:id="video-memory">
<db:title>Video Memory</db:title>
<db:para>Systems with a fixed amount of dedicated video memory may need extra care before running Qt application based on Qt Quick or classes like <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link>. The default setting may be insufficient for such applications, especially when they are displayed on a high resolution (for example, full HD) screen. In this case they may start failing in unexpected ways. It is therefore recommended to ensure that there is at least 128 MB of GPU memory available. For systems that do not have a fixed amount of memory reserved for the GPU this is not an issue.</db:para>
</db:section>
<db:section xml:id="vxworksfb">
<db:title>vxworksfb</db:title>
<db:para>Use the fb plugin parameter to specify the framebuffer device to use.</db:para>
</db:section>
</db:section>
</db:article>
