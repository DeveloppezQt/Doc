<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Extras - Dashboard</db:title>
<db:productname>QtQuickExtras</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Extras Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A car dashboard created using several <db:link xlink:href="qml-qtquick-extras-circulargauge.xml">CircularGauge</db:link> controls.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickextras-example-dashboard.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example project demonstrates the use of <db:link xlink:href="qml-qtquick-extras-circulargauge.xml">CircularGauge</db:link> to create a car dashboard.</db:para>
<db:para>The ValueSource type generates random data for testing the dashboard. The data is random but there is a logical link between some of them, for example, <db:code>kph</db:code> and <db:code>rpm</db:code>.</db:para>
<db:programlisting language="qml">Item {
    id: valueSource
    property real kph: 0
    property real rpm: 1
    property real fuel: 0.85
    property string gear: {
        var g;
        if (kph == 0) {
            return &quot;P&quot;;
        }
        if (kph &amp;lt; 30) {
            return &quot;1&quot;;
        }
        if (kph &amp;lt; 50) {
            return &quot;2&quot;;
        }
        if (kph &amp;lt; 80) {
            return &quot;3&quot;;
        }
        if (kph &amp;lt; 120) {
            return &quot;4&quot;;
        }
        if (kph &amp;lt; 160) {
            return &quot;5&quot;;
        }
    }
    property int turnSignal: gear == &quot;P&quot; &amp;amp;&amp;amp; !start ? randomDirection() : -1
    property real temperature: 0.6
    property bool start: true
</db:programlisting>
<db:para>It runs a looping <db:link xlink:href="qml-qtquick-sequentialanimation.xml">SequentialAnimation</db:link> that sets the values of the properties over time.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick-sequentialanimation.xml">SequentialAnimation</db:link> object consists of several <db:link xlink:href="qml-qtquick-parallelanimation.xml">ParallelAnimation</db:link> objects, which in turn consist of two NumberAnimations, one for <db:code>kph</db:code> and one for <db:code>rpm</db:code>. Both let the value develop to a certain value over a specified <db:code>duration</db:code> with the Easing type <db:code>Easing.InOutSine</db:code></db:para>
<db:programlisting language="qml">            ParallelAnimation {
                NumberAnimation {
                    target: valueSource
                    property: &quot;kph&quot;
                    easing.type: Easing.InOutSine
                    from: 0
                    to: 30
                    duration: 3000
                }
                NumberAnimation {
                    target: valueSource
                    property: &quot;rpm&quot;
                    easing.type: Easing.InOutSine
                    from: 1
                    to: 6.1
                    duration: 3000
                }
            }
</db:programlisting>
<db:para>The flashTimer object switches the turn signals <db:code>on</db:code> or <db:code>off</db:code>.</db:para>
<db:programlisting language="qml">    Timer {
        id: flashTimer
        interval: 500
        running: on
        repeat: true
        onTriggered: flashing = !flashing
    }
</db:programlisting>
<db:para>The <db:code>paintOutlinePath(ctx)</db:code> method does the actual painting of the arrow for the turn signal.</db:para>
<db:programlisting language="qml">    function paintOutlinePath(ctx) {
        ctx.beginPath();
        ctx.moveTo(0, height * 0.5);
        ctx.lineTo(0.6 * width, 0);
        ctx.lineTo(0.6 * width, height * 0.28);
        ctx.lineTo(width, height * 0.28);
        ctx.lineTo(width, height * 0.72);
        ctx.lineTo(0.6 * width, height * 0.72);
        ctx.lineTo(0.6 * width, height);
        ctx.lineTo(0, height * 0.5);
    }
</db:programlisting>
<db:para>The screen consists of a <db:code>foregroundCanvas</db:code> and a <db:code>backgroundCanvas</db:code>. <db:code>foregroundCanvas</db:code> displays the green turn signal if the <db:code>on</db:code> and <db:code>flashing</db:code> booleans are <db:code>true</db:code>.</db:para>
<db:programlisting language="qml">    Canvas {
        id: foregroundCanvas
        anchors.fill: parent
        visible: on &amp;amp;&amp;amp; flashing

        onPaint: {
            var ctx = getContext(&quot;2d&quot;);
            ctx.reset();

            paintOutlinePath(ctx);

            ctx.fillStyle = &quot;green&quot;;
            ctx.fill();
        }
    }
</db:programlisting>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="dashboard/dashboard.pro">dashboard/dashboard.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dashboard/dashboard.qrc">dashboard/dashboard.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dashboard/main.cpp">dashboard/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dashboard/qml/DashboardGaugeStyle.qml">dashboard/qml/DashboardGaugeStyle.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dashboard/qml/IconGaugeStyle.qml">dashboard/qml/IconGaugeStyle.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dashboard/qml/TachometerStyle.qml">dashboard/qml/TachometerStyle.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dashboard/qml/TurnIndicator.qml">dashboard/qml/TurnIndicator.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dashboard/qml/ValueSource.qml">dashboard/qml/ValueSource.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dashboard/qml/dashboard.qml">dashboard/qml/dashboard.qml</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="dashboard/images/fuel-icon.png">dashboard/images/fuel-icon.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dashboard/images/temperature-icon.png">dashboard/images/temperature-icon.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
