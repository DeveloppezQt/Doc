<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSignalBlocker Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Exception-safe wrapper around <db:link xlink:href="qobject.xml#blockSignals">QObject::blockSignals</db:link>().</db:para>
<db:para>This class was introduced in Qt 5.3.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSignalBlocker</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSignalBlocker is part of <db:simplelist><db:member>objectmodel</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qsignalblocker.xml">QSignalBlocker</db:link> can be used wherever you would otherwise use a pair of calls to blockSignals(). It blocks signals in its constructor and in the destructor it resets the state to what it was before the constructor ran.</db:para>
<db:programlisting language="cpp">{
const QSignalBlocker blocker(someQObject);
// no signals here
}
</db:programlisting>
<db:para>is thus equivalent to</db:para>
<db:programlisting language="cpp">const bool wasBlocked = someQObject-&amp;gt;blockSignals(true);
// no signals here
someQObject-&amp;gt;blockSignals(wasBlocked);
</db:programlisting>
<db:para>except the code using <db:link xlink:href="qsignalblocker.xml">QSignalBlocker</db:link> is safe in the face of exceptions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link></db:member>
<db:member><db:link xlink:href="qeventlooplocker.xml">QEventLoopLocker</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSignalBlocker">
<db:title>[explicit] QSignalBlocker::QSignalBlocker(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSignalBlocker</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSignalBlocker(QObject *object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructor. Calls <db:code role="parameter">object</db:code>-&gt;blockSignals(true).</db:para>
</db:section>
<db:section xml:id="QSignalBlocker-1">
<db:title>[explicit] QSignalBlocker::QSignalBlocker(QObject &amp;<db:emphasis>object</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSignalBlocker</db:methodname>
<db:methodparam>
<db:type>QObject &amp;</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSignalBlocker(QObject &amp;object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Calls <db:code role="parameter">object</db:code>.blockSignals(true).</db:para>
</db:section>
<db:section xml:id="QSignalBlocker-2">
<db:title>QSignalBlocker::QSignalBlocker(QSignalBlocker &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSignalBlocker</db:methodname>
<db:methodparam>
<db:type>QSignalBlocker &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QSignalBlocker(QSignalBlocker &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a signal blocker from <db:code role="parameter">other</db:code>. <db:code role="parameter">other</db:code> will have a no-op destructor, while responsibility for restoring the <db:link xlink:href="qobject.xml#signalsBlocked">QObject::signalsBlocked</db:link>() state is transferred to the new object.</db:para>
</db:section>
<db:section xml:id="dtor.QSignalBlocker">
<db:title>QSignalBlocker::~QSignalBlocker()</db:title>
<db:destructorsynopsis>
<db:methodname>~QSignalBlocker</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSignalBlocker()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructor. Restores the <db:link xlink:href="qobject.xml#signalsBlocked">QObject::signalsBlocked</db:link>() state to what it was before the constructor ran, unless <db:link xlink:href="qsignalblocker.xml#unblock">unblock</db:link>() has been called without a following <db:link xlink:href="qsignalblocker.xml#reblock">reblock</db:link>(), in which case it does nothing.</db:para>
</db:section>
<db:section xml:id="reblock">
<db:title>void QSignalBlocker::reblock()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>reblock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void reblock()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Re-blocks signals after a previous <db:link xlink:href="qsignalblocker.xml#unblock">unblock</db:link>().</db:para>
<db:para>The numbers of reblock() and <db:link xlink:href="qsignalblocker.xml#unblock">unblock</db:link>() calls are not counted, so every reblock() undoes any number of <db:link xlink:href="qsignalblocker.xml#unblock">unblock</db:link>() calls.</db:para>
</db:section>
<db:section xml:id="unblock">
<db:title>void QSignalBlocker::unblock()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>unblock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void unblock()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Temporarily restores the <db:link xlink:href="qobject.xml#signalsBlocked">QObject::signalsBlocked</db:link>() state to what it was before this <db:link xlink:href="qsignalblocker.xml">QSignalBlocker</db:link>'s constructor ran. To undo, use <db:link xlink:href="qsignalblocker.xml#reblock">reblock</db:link>().</db:para>
<db:para>The numbers of <db:link xlink:href="qsignalblocker.xml#reblock">reblock</db:link>() and unblock() calls are not counted, so every unblock() undoes any number of <db:link xlink:href="qsignalblocker.xml#reblock">reblock</db:link>() calls.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QSignalBlocker &amp;QSignalBlocker::operator=(QSignalBlocker &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSignalBlocker &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QSignalBlocker &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QSignalBlocker &amp; operator=(QSignalBlocker &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns this signal blocker from <db:code role="parameter">other</db:code>. <db:code role="parameter">other</db:code> will have a no-op destructor, while responsibility for restoring the <db:link xlink:href="qobject.xml#signalsBlocked">QObject::signalsBlocked</db:link>() state is transferred to this object.</db:para>
<db:para>The object's signals this signal blocker was blocking prior to being moved to, if any, are unblocked <db:emphasis>except</db:emphasis> in the case where both instances block the same object's signals and *this is unblocked while <db:code role="parameter">other</db:code> is not, at the time of the move.</db:para>
</db:section>
</db:section>
</db:article>
