<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Multiple Inheritance Example</db:title>
<db:productname>QtUiTools</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt UI Tools Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using a form created with Qt Designer in an application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Multiple Inheritance Example shows how to use a form created with <db:link xlink:href="qtdesigner-index.xml">Qt Designer</db:link> in an application by subclassing both <db:link xlink:href="qwidget.xml">QWidget</db:link> and the user interface class, which is <db:code>Ui::CalculatorForm</db:code>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/multipleinheritance-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>To subclass the <db:code>calculatorform.ui</db:code> file and ensure that <db:code>qmake</db:code> processes it with the <db:code>uic</db:code>, we have to include <db:code>calculatorform.ui</db:code> in the <db:code>.pro</db:code> file, as shown below:</db:para>
<db:programlisting language="cpp">QT += widgets

HEADERS = calculatorform.h
SOURCES = calculatorform.cpp main.cpp
FORMS = calculatorform.ui
</db:programlisting>
<db:para>When the project is compiled, the <db:code>uic</db:code> will generate a corresponding <db:code>ui_calculatorform.h</db:code>.</db:para>
<db:section xml:id="calculatorform-definition">
<db:title>CalculatorForm Definition</db:title>
<db:para>In the <db:code>CalculatorForm</db:code> definition, we include the <db:code>ui_calculatorform.h</db:code> that was generated earlier.</db:para>
<db:programlisting language="cpp">#include &quot;ui_calculatorform.h&quot;
</db:programlisting>
<db:para>As mentioned earlier, the class is a subclass of both <db:link xlink:href="qwidget.xml">QWidget</db:link> and <db:code>Ui::CalculatorForm</db:code>.</db:para>
<db:programlisting language="cpp">class CalculatorForm : public QWidget, private Ui::CalculatorForm
{
    Q_OBJECT

public:
    explicit CalculatorForm(QWidget *parent = nullptr);

private slots:
    void on_inputSpinBox1_valueChanged(int value);
    void on_inputSpinBox2_valueChanged(int value);
};
</db:programlisting>
<db:para>Two slots are defined according to the <db:link xlink:href="designer-using-a-ui-file.xml#automatic-connections">automatic connection</db:link> naming convention required by <db:code>uic</db:code>. This is to ensure that <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link>'s auto-connection facilities connect all the signals and slots involved automatically.</db:para>
</db:section>
<db:section xml:id="calculatorform-implementation">
<db:title>CalculatorForm Implementation</db:title>
<db:para>In the constructor, we call <db:code>setupUi()</db:code> to load the user interface file. Note that setupUi is a method of <db:code>Ui::CalculatorForm</db:code>.</db:para>
<db:programlisting language="cpp">CalculatorForm::CalculatorForm(QWidget *parent)
    : QWidget(parent)
{
    setupUi(this);
}
</db:programlisting>
<db:para>We include two slots, <db:code>on_inputSpinBox1_valueChanged()</db:code> and <db:code>on_inputSpinBox2_valueChanged()</db:code>. These slots respond to the <db:link xlink:href="qspinbox.xml#valueChanged">valueChanged</db:link>() signal that both spin boxes emit. Whenever there is a change in one spin box's value, we take that value and add it to whatever value the other spin box has.</db:para>
<db:programlisting language="cpp">void CalculatorForm::on_inputSpinBox1_valueChanged(int value)
{
    outputWidget-&amp;gt;setText(QString::number(value + inputSpinBox2-&amp;gt;value()));
}

void CalculatorForm::on_inputSpinBox2_valueChanged(int value)
{
    outputWidget-&amp;gt;setText(QString::number(value + inputSpinBox1-&amp;gt;value()));
}
</db:programlisting>
</db:section>
<db:section xml:id="main-function">
<db:title><db:code>main()</db:code> Function</db:title>
<db:para>The <db:code>main()</db:code> function instantiates <db:link xlink:href="qapplication.xml">QApplication</db:link> and <db:code>CalculatorForm</db:code>. The <db:code>calculator</db:code> object is displayed by invoking the <db:link xlink:href="qwidget.xml#show">show</db:link>() function.</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    CalculatorForm calculator;
    calculator.show();
    return app.exec();
}
</db:programlisting>
<db:para>There are various approaches to include forms into applications. The Multiple Inheritance approach is just one of them. See <db:link xlink:href="designer-using-a-ui-file.xml">Using a Designer UI File in Your Application</db:link> for more information on the other approaches available.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="multipleinheritance/calculatorform.cpp">multipleinheritance/calculatorform.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multipleinheritance/calculatorform.h">multipleinheritance/calculatorform.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multipleinheritance/calculatorform.ui">multipleinheritance/calculatorform.ui</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multipleinheritance/main.cpp">multipleinheritance/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="multipleinheritance/multipleinheritance.pro">multipleinheritance/multipleinheritance.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
